
/Users/pjb/Dropbox/Smart_Coasts_Sensors/Water-Level/Open-Water-Level/Firmware/SLR_Boron_Maxbotix_MB7092_cm/target/4.2.0/boron/SLR_Boron_Maxbotix_MB7092_cm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004754  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8770  000b8770  00008770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8794  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003dd94  000b8798  0001dd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009ec  2003de04  2003de04  0002de04  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8808  000b8808  00028808  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b8830  000b8830  00028830  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0017b7c8  00000000  00000000  00028834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001883f  00000000  00000000  001a3ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00040ecd  00000000  00000000  001bc83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e78  00000000  00000000  001fd708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b930  00000000  00000000  00200580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000438b2  00000000  00000000  0020beb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00052175  00000000  00000000  0024f762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f283  00000000  00000000  002a18d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008460  00000000  00000000  003e0b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 f8b1 	bl	b8194 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 f8b9 	bl	b81b0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003dd94 	.word	0x2003dd94
   b4048:	000b8798 	.word	0x000b8798
   b404c:	2003de04 	.word	0x2003de04
   b4050:	2003de04 	.word	0x2003de04
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 faed 	bl	b763c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8748 	.word	0x000b8748
   b407c:	000b876c 	.word	0x000b876c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b8e4 	b.w	b424c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f939 	bl	b42fc <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 ba8d 	b.w	b75ac <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 b923 	b.w	b62dc <malloc>

000b4096 <_Znaj>:
   b4096:	f002 b921 	b.w	b62dc <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 b927 	b.w	b62ec <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40ae:	4770      	bx	lr

000b40b0 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40b0:	7c03      	ldrb	r3, [r0, #16]
   b40b2:	f013 0308 	ands.w	r3, r3, #8
   b40b6:	bf1e      	ittt	ne
   b40b8:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40ba:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40bc:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40be:	2b00      	cmp	r3, #0
  }
   b40c0:	bfac      	ite	ge
   b40c2:	4618      	movge	r0, r3
   b40c4:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40c8:	4770      	bx	lr

000b40ca <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40ca:	4770      	bx	lr

000b40cc <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b40cc:	3010      	adds	r0, #16
   b40ce:	f000 bd8f 	b.w	b4bf0 <_ZN7FatFile4syncEv>

000b40d2 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b40d2:	3010      	adds	r0, #16
   b40d4:	f000 bcad 	b.w	b4a32 <_ZN7FatFile4peekEv>

000b40d8 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b40d8:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b40da:	2201      	movs	r2, #1
   b40dc:	f10d 0107 	add.w	r1, sp, #7
   b40e0:	3010      	adds	r0, #16
   b40e2:	f000 fbf8 	bl	b48d6 <_ZN7FatFile4readEPvj>
   b40e6:	2801      	cmp	r0, #1
   b40e8:	bf0c      	ite	eq
   b40ea:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b40ee:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b40f2:	b003      	add	sp, #12
   b40f4:	f85d fb04 	ldr.w	pc, [sp], #4

000b40f8 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b40f8:	3010      	adds	r0, #16
   b40fa:	f000 be03 	b.w	b4d04 <_ZN7FatFile5writeEPKvj>

000b40fe <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b40fe:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4100:	2201      	movs	r2, #1
   b4102:	f88d 1007 	strb.w	r1, [sp, #7]
   b4106:	3010      	adds	r0, #16
   b4108:	f10d 0107 	add.w	r1, sp, #7
   b410c:	f000 fdfa 	bl	b4d04 <_ZN7FatFile5writeEPKvj>
  }
   b4110:	b003      	add	sp, #12
   b4112:	f85d fb04 	ldr.w	pc, [sp], #4

000b4116 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4116:	b510      	push	{r4, lr}
  }
   b4118:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b411a:	4604      	mov	r4, r0
  }
   b411c:	f7ff ffbd 	bl	b409a <_ZdlPvj>
   b4120:	4620      	mov	r0, r4
   b4122:	bd10      	pop	{r4, pc}

000b4124 <_ZN4FileD0Ev>:
class File : public FatFile, public Stream {
   b4124:	b510      	push	{r4, lr}
   b4126:	2134      	movs	r1, #52	; 0x34
   b4128:	4604      	mov	r4, r0
   b412a:	f7ff ffb6 	bl	b409a <_ZdlPvj>
   b412e:	4620      	mov	r0, r4
   b4130:	bd10      	pop	{r4, pc}

000b4132 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>:
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   b4132:	b121      	cbz	r1, b413e <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0+0xc>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   b4134:	888b      	ldrh	r3, [r1, #4]
   b4136:	4283      	cmp	r3, r0
   b4138:	d001      	beq.n	b413e <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0+0xc>
                return start;
            }
            start = start->next;
   b413a:	6889      	ldr	r1, [r1, #8]
        while (start) {
   b413c:	e7f9      	b.n	b4132 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
        }
        return nullptr;
    }
   b413e:	4608      	mov	r0, r1
   b4140:	4770      	bx	lr

000b4142 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4142:	b40e      	push	{r1, r2, r3}
   b4144:	b503      	push	{r0, r1, lr}
   b4146:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4148:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b414a:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b414e:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4150:	f002 ff53 	bl	b6ffa <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4154:	b002      	add	sp, #8
   b4156:	f85d eb04 	ldr.w	lr, [sp], #4
   b415a:	b003      	add	sp, #12
   b415c:	4770      	bx	lr
	...

000b4160 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4160:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4162:	4604      	mov	r4, r0
   b4164:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4166:	7922      	ldrb	r2, [r4, #4]
   b4168:	68a3      	ldr	r3, [r4, #8]
   b416a:	b132      	cbz	r2, b417a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b416c:	b9a3      	cbnz	r3, b4198 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b416e:	490b      	ldr	r1, [pc, #44]	; (b419c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4170:	b002      	add	sp, #8
   b4172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4176:	f002 bf05 	b.w	b6f84 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b417a:	4a09      	ldr	r2, [pc, #36]	; (b41a0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b417c:	7b26      	ldrb	r6, [r4, #12]
   b417e:	4d09      	ldr	r5, [pc, #36]	; (b41a4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4180:	4909      	ldr	r1, [pc, #36]	; (b41a8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4182:	7b64      	ldrb	r4, [r4, #13]
   b4184:	2e01      	cmp	r6, #1
   b4186:	bf18      	it	ne
   b4188:	4629      	movne	r1, r5
   b418a:	e9cd 1400 	strd	r1, r4, [sp]
   b418e:	4907      	ldr	r1, [pc, #28]	; (b41ac <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4190:	f7ff ffd7 	bl	b4142 <_ZN5Print6printfEPKcz>
  }
   b4194:	b002      	add	sp, #8
   b4196:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4198:	4a05      	ldr	r2, [pc, #20]	; (b41b0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b419a:	e7ef      	b.n	b417c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b419c:	000b8359 	.word	0x000b8359
   b41a0:	000b8405 	.word	0x000b8405
   b41a4:	000b8355 	.word	0x000b8355
   b41a8:	000b8351 	.word	0x000b8351
   b41ac:	000b836f 	.word	0x000b836f
   b41b0:	000b8348 	.word	0x000b8348

000b41b4 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41b4:	b40e      	push	{r1, r2, r3}
   b41b6:	b503      	push	{r0, r1, lr}
   b41b8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b41ba:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41bc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b41c0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b41c2:	f002 ff1a 	bl	b6ffa <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b41c6:	b002      	add	sp, #8
   b41c8:	f85d eb04 	ldr.w	lr, [sp], #4
   b41cc:	b003      	add	sp, #12
   b41ce:	4770      	bx	lr

000b41d0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b41d0:	b530      	push	{r4, r5, lr}
   b41d2:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b41d4:	4b1b      	ldr	r3, [pc, #108]	; (b4244 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b41d6:	9300      	str	r3, [sp, #0]
   b41d8:	7913      	ldrb	r3, [r2, #4]
   b41da:	f88d 3004 	strb.w	r3, [sp, #4]
   b41de:	6893      	ldr	r3, [r2, #8]
   b41e0:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b41e2:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b41e6:	8993      	ldrh	r3, [r2, #12]
   b41e8:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b41ec:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b41ee:	460a      	mov	r2, r1
   b41f0:	466b      	mov	r3, sp
   b41f2:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b41f6:	4628      	mov	r0, r5
   b41f8:	f001 fbce 	bl	b5998 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b41fc:	b910      	cbnz	r0, b4204 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b41fe:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4200:	b005      	add	sp, #20
   b4202:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b4204:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b4206:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b420a:	4628      	mov	r0, r5
   b420c:	f000 fd26 	bl	b4c5c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4210:	2101      	movs	r1, #1
   b4212:	4620      	mov	r0, r4
   b4214:	f001 fa6a 	bl	b56ec <_ZN9FatVolume4initEh>
   b4218:	4601      	mov	r1, r0
   b421a:	b168      	cbz	r0, b4238 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b421c:	4621      	mov	r1, r4
   b421e:	4628      	mov	r0, r5
   b4220:	f000 fb53 	bl	b48ca <_ZN7FatFile8openRootEP9FatVolume>
   b4224:	2800      	cmp	r0, #0
   b4226:	d0ea      	beq.n	b41fe <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4228:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b422c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4230:	d0e5      	beq.n	b41fe <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b4232:	4b05      	ldr	r3, [pc, #20]	; (b4248 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4234:	601d      	str	r5, [r3, #0]
    return true;
   b4236:	e7e3      	b.n	b4200 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4238:	4620      	mov	r0, r4
   b423a:	f001 fa57 	bl	b56ec <_ZN9FatVolume4initEh>
   b423e:	2800      	cmp	r0, #0
   b4240:	d1ec      	bne.n	b421c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4242:	e7dc      	b.n	b41fe <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4244:	000b84d0 	.word	0x000b84d0
   b4248:	2003e678 	.word	0x2003e678

000b424c <setup>:
const unsigned long MAX_TIME_TO_PUBLISH_MS = 20000; // Only stay awake for this time trying to connect to the cloud and publish
// const unsigned long TIME_AFTER_PUBLISH_MS = 4000; // After publish, wait 4 seconds for data to go out
const unsigned long SECONDS_BETWEEN_MEASUREMENTS = 360; // What should sampling period be?
const unsigned long EARLYBIRD_SECONDS = 10; // how long before desired time should I wake up? Sample currenly takes 10 s, so wake up 10 s early

void setup(void) {
   b424c:	b508      	push	{r3, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b424e:	f001 ffbd 	bl	b61cc <spark_cloud_flag_connect>
    Cellular.off(); // turn off cellular for prelim testing (uncomment)
  }

  // delay(5000); // to see response from begin command

  Serial.begin(9600);
   b4252:	f003 f963 	bl	b751c <_Z16_fetch_usbserialv>
   b4256:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b425a:	f003 f953 	bl	b7504 <_ZN9USBSerial5beginEl>
  Serial.println("Maxbotix Test");
   b425e:	f003 f95d 	bl	b751c <_Z16_fetch_usbserialv>

}
   b4262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("Maxbotix Test");
   b4266:	4901      	ldr	r1, [pc, #4]	; (b426c <setup+0x20>)
   b4268:	f002 be9f 	b.w	b6faa <_ZN5Print7printlnEPKc>
   b426c:	000b838c 	.word	0x000b838c

000b4270 <_Z21secondsUntilNextEventv>:
  }
  break;
  }
}

int secondsUntilNextEvent() {
   b4270:	b570      	push	{r4, r5, r6, lr}

  int current_seconds = Time.now();
   b4272:	f003 f889 	bl	b7388 <_ZN9TimeClass3nowEv>
  int seconds_to_sleep = SECONDS_BETWEEN_MEASUREMENTS - (current_seconds % SECONDS_BETWEEN_MEASUREMENTS) - EARLYBIRD_SECONDS;
   b4276:	f44f 74b4 	mov.w	r4, #360	; 0x168
   b427a:	fbb0 f3f4 	udiv	r3, r0, r4
   b427e:	fb03 0014 	mls	r0, r3, r4, r0
   b4282:	f5c0 74af 	rsb	r4, r0, #350	; 0x15e

  Serial.print("Sleeping for ");
   b4286:	f003 f949 	bl	b751c <_Z16_fetch_usbserialv>
   b428a:	490b      	ldr	r1, [pc, #44]	; (b42b8 <_Z21secondsUntilNextEventv+0x48>)
   b428c:	f002 fe7a 	bl	b6f84 <_ZN5Print5printEPKc>
  Serial.println(seconds_to_sleep);
   b4290:	f003 f944 	bl	b751c <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4294:	2c00      	cmp	r4, #0
  int seconds_to_sleep = SECONDS_BETWEEN_MEASUREMENTS - (current_seconds % SECONDS_BETWEEN_MEASUREMENTS) - EARLYBIRD_SECONDS;
   b4296:	4626      	mov	r6, r4
  Serial.println(seconds_to_sleep);
   b4298:	4605      	mov	r5, r0
   b429a:	da03      	bge.n	b42a4 <_Z21secondsUntilNextEventv+0x34>
            t = print('-');
   b429c:	212d      	movs	r1, #45	; 0x2d
   b429e:	f002 fe75 	bl	b6f8c <_ZN5Print5printEc>
            val = -n;
   b42a2:	4264      	negs	r4, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b42a4:	220a      	movs	r2, #10
   b42a6:	4621      	mov	r1, r4
   b42a8:	4628      	mov	r0, r5
   b42aa:	f002 fe88 	bl	b6fbe <_ZN5Print11printNumberEmh>
        n += println();
   b42ae:	4628      	mov	r0, r5
   b42b0:	f002 fe6f 	bl	b6f92 <_ZN5Print7printlnEv>

  return seconds_to_sleep;
   b42b4:	4630      	mov	r0, r6
   b42b6:	bd70      	pop	{r4, r5, r6, pc}
   b42b8:	000b839a 	.word	0x000b839a

000b42bc <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>:
    // Constructs succeeded future
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
   b42bc:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b42be:	6804      	ldr	r4, [r0, #0]
        return (application_thread_current(nullptr) != 0);
   b42c0:	2000      	movs	r0, #0
   b42c2:	f001 ff3b 	bl	b613c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b42c6:	b120      	cbz	r0, b42d2 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b42c8:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b42ca:	b913      	cbnz	r3, b42d2 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
        spark_process();
   b42cc:	f001 ff76 	bl	b61bc <spark_process>
    }
   b42d0:	e7fa      	b.n	b42c8 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0xc>
   b42d2:	7863      	ldrb	r3, [r4, #1]
   b42d4:	f3bf 8f5b 	dmb	ish
   b42d8:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b42da:	b90b      	cbnz	r3, b42e0 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x24>
        return std::move(defaultValue);
   b42dc:	2000      	movs	r0, #0
        return this->p_->result();
    }
   b42de:	bd38      	pop	{r3, r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b42e0:	2000      	movs	r0, #0
   b42e2:	f001 ff2b 	bl	b613c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b42e6:	b120      	cbz	r0, b42f2 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
   b42e8:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b42ea:	b913      	cbnz	r3, b42f2 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
        spark_process();
   b42ec:	f001 ff66 	bl	b61bc <spark_process>
    }
   b42f0:	e7fa      	b.n	b42e8 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x2c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b42f2:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b42f4:	2b01      	cmp	r3, #1
   b42f6:	d1f1      	bne.n	b42dc <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x20>
            return result_;
   b42f8:	7b20      	ldrb	r0, [r4, #12]
   b42fa:	e7f0      	b.n	b42de <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x22>

000b42fc <loop>:
void loop(void) {
   b42fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch (state) {
   b4300:	4e92      	ldr	r6, [pc, #584]	; (b454c <loop+0x250>)
   b4302:	7835      	ldrb	r5, [r6, #0]
   b4304:	2d01      	cmp	r5, #1
void loop(void) {
   b4306:	b099      	sub	sp, #100	; 0x64
  switch (state) {
   b4308:	f000 80bb 	beq.w	b4482 <loop+0x186>
   b430c:	2d02      	cmp	r5, #2
   b430e:	f000 8157 	beq.w	b45c0 <loop+0x2c4>
   b4312:	2d00      	cmp	r5, #0
   b4314:	f040 80a6 	bne.w	b4464 <loop+0x168>
   b4318:	4d8d      	ldr	r5, [pc, #564]	; (b4550 <loop+0x254>)
   b431a:	24c8      	movs	r4, #200	; 0xc8
   b431c:	462f      	mov	r7, r5
      filterArray[sample] = (analogRead(A1));
   b431e:	2012      	movs	r0, #18
   b4320:	f003 fa26 	bl	b7770 <analogRead>
   b4324:	ee07 0a90 	vmov	s15, r0
   b4328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      delay(50); // to avoid untrasonic interfering
   b432c:	2032      	movs	r0, #50	; 0x32
      filterArray[sample] = (analogRead(A1));
   b432e:	ece7 7a01 	vstmia	r7!, {s15}
      delay(50); // to avoid untrasonic interfering
   b4332:	f002 f813 	bl	b635c <delay>
    for (int sample = 0; sample < 200; sample++) {
   b4336:	3c01      	subs	r4, #1
   b4338:	d1f1      	bne.n	b431e <loop+0x22>
      for (int j = i + 1; j < 200; j++) {
   b433a:	3401      	adds	r4, #1
   b433c:	4629      	mov	r1, r5
   b433e:	3504      	adds	r5, #4
   b4340:	462a      	mov	r2, r5
   b4342:	4623      	mov	r3, r4
        if (filterArray[i] > filterArray[j]) {
   b4344:	edd1 7a00 	vldr	s15, [r1]
   b4348:	ecb2 7a01 	vldmia	r2!, {s14}
   b434c:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      for (int j = i + 1; j < 200; j++) {
   b4354:	f103 0301 	add.w	r3, r3, #1
          filterArray[i] = filterArray[j];
   b4358:	bfc4      	itt	gt
   b435a:	ed81 7a00 	vstrgt	s14, [r1]
          filterArray[j] = swap;
   b435e:	ed42 7a01 	vstrgt	s15, [r2, #-4]
      for (int j = i + 1; j < 200; j++) {
   b4362:	2bc8      	cmp	r3, #200	; 0xc8
   b4364:	d1ee      	bne.n	b4344 <loop+0x48>
    for (int i = 0; i < 199; i++) {
   b4366:	2cc7      	cmp	r4, #199	; 0xc7
   b4368:	d1e7      	bne.n	b433a <loop+0x3e>
   b436a:	4d7a      	ldr	r5, [pc, #488]	; (b4554 <loop+0x258>)
   b436c:	24b4      	movs	r4, #180	; 0xb4
    double sum = 0;
   b436e:	f04f 0800 	mov.w	r8, #0
   b4372:	f04f 0900 	mov.w	r9, #0
      sum += filterArray[sample];
   b4376:	f855 0b04 	ldr.w	r0, [r5], #4
   b437a:	f003 fc3b 	bl	b7bf4 <__aeabi_f2d>
   b437e:	4602      	mov	r2, r0
   b4380:	460b      	mov	r3, r1
   b4382:	4640      	mov	r0, r8
   b4384:	4649      	mov	r1, r9
   b4386:	f003 fad7 	bl	b7938 <__adddf3>
    for (int sample = 10; sample < 190; sample++) {
   b438a:	3c01      	subs	r4, #1
      sum += filterArray[sample];
   b438c:	4680      	mov	r8, r0
   b438e:	4689      	mov	r9, r1
    for (int sample = 10; sample < 190; sample++) {
   b4390:	d1f1      	bne.n	b4376 <loop+0x7a>
    distance_unconverted = sum / 180;
   b4392:	2200      	movs	r2, #0
   b4394:	4b70      	ldr	r3, [pc, #448]	; (b4558 <loop+0x25c>)
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b4396:	f8df 821c 	ldr.w	r8, [pc, #540]	; b45b4 <loop+0x2b8>
    real_time = Time.now(); // "Real" time and current millis for logging
   b439a:	4f70      	ldr	r7, [pc, #448]	; (b455c <loop+0x260>)
    distance_unconverted = sum / 180;
   b439c:	f003 fdac 	bl	b7ef8 <__aeabi_ddiv>
   b43a0:	f003 fe92 	bl	b80c8 <__aeabi_d2f>
   b43a4:	ee07 0a90 	vmov	s15, r0
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b43a8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   b43ac:	ee67 7a87 	vmul.f32	s15, s15, s14
    distance_unconverted = sum / 180;
   b43b0:	4b6b      	ldr	r3, [pc, #428]	; (b4560 <loop+0x264>)
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b43b2:	edc8 7a00 	vstr	s15, [r8]
    distance_unconverted = sum / 180;
   b43b6:	6018      	str	r0, [r3, #0]
    real_time = Time.now(); // "Real" time and current millis for logging
   b43b8:	f002 ffe6 	bl	b7388 <_ZN9TimeClass3nowEv>
   b43bc:	6038      	str	r0, [r7, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b43be:	f001 fd15 	bl	b5dec <HAL_Timer_Get_Milli_Seconds>
    millis_now = millis();
   b43c2:	4b68      	ldr	r3, [pc, #416]	; (b4564 <loop+0x268>)
   b43c4:	6018      	str	r0, [r3, #0]
    float cellVoltage = batteryMonitor.getVCell();
   b43c6:	4868      	ldr	r0, [pc, #416]	; (b4568 <loop+0x26c>)
   b43c8:	f002 fbba 	bl	b6b40 <_ZN9FuelGauge8getVCellEv>
    float stateOfCharge = batteryMonitor.getSoC();
   b43cc:	4866      	ldr	r0, [pc, #408]	; (b4568 <loop+0x26c>)
    float cellVoltage = batteryMonitor.getVCell();
   b43ce:	ee10 5a10 	vmov	r5, s0
    float stateOfCharge = batteryMonitor.getSoC();
   b43d2:	f002 fbd1 	bl	b6b78 <_ZN9FuelGauge6getSoCEv>
   b43d6:	ee10 0a10 	vmov	r0, s0
    snprintf(data, sizeof(data), "%li,%.5f,%.02f,%.02f", //,%.5f,%.5f,%.5f,%.5f,%.5f,%.02f,%.02f",
   b43da:	f003 fc0b 	bl	b7bf4 <__aeabi_f2d>
   b43de:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b43e2:	4628      	mov	r0, r5
   b43e4:	f003 fc06 	bl	b7bf4 <__aeabi_f2d>
   b43e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b43ec:	f8d8 0000 	ldr.w	r0, [r8]
   b43f0:	f003 fc00 	bl	b7bf4 <__aeabi_f2d>
   b43f4:	e9cd 0100 	strd	r0, r1, [sp]
   b43f8:	683b      	ldr	r3, [r7, #0]
   b43fa:	4a5c      	ldr	r2, [pc, #368]	; (b456c <loop+0x270>)
   b43fc:	485c      	ldr	r0, [pc, #368]	; (b4570 <loop+0x274>)
   b43fe:	2178      	movs	r1, #120	; 0x78
   b4400:	f001 ff7c 	bl	b62fc <snprintf>
    Serial.println(data);
   b4404:	f003 f88a 	bl	b751c <_Z16_fetch_usbserialv>
   b4408:	4959      	ldr	r1, [pc, #356]	; (b4570 <loop+0x274>)
   b440a:	f002 fdce 	bl	b6faa <_ZN5Print7printlnEPKc>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b440e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4412:	930d      	str	r3, [sp, #52]	; 0x34
  File() {}
   b4414:	4b57      	ldr	r3, [pc, #348]	; (b4574 <loop+0x278>)
   b4416:	930b      	str	r3, [sp, #44]	; 0x2c
      dataMode_{dataMode}
   b4418:	4b57      	ldr	r3, [pc, #348]	; (b4578 <loop+0x27c>)
   b441a:	9307      	str	r3, [sp, #28]
   b441c:	4b57      	ldr	r3, [pc, #348]	; (b457c <loop+0x280>)
   b441e:	9309      	str	r3, [sp, #36]	; 0x24
    if (!sd.begin(SD_CHIP_SELECT, SPI_FULL_SPEED)) {
   b4420:	4857      	ldr	r0, [pc, #348]	; (b4580 <loop+0x284>)
    Print() : write_error(0) {}
   b4422:	940c      	str	r4, [sp, #48]	; 0x30
   b4424:	2301      	movs	r3, #1
   b4426:	aa07      	add	r2, sp, #28
   b4428:	2105      	movs	r1, #5
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b442a:	940f      	str	r4, [sp, #60]	; 0x3c
   b442c:	f88d 4020 	strb.w	r4, [sp, #32]
   b4430:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   b4434:	f7ff fecc 	bl	b41d0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b4438:	b920      	cbnz	r0, b4444 <loop+0x148>
      Serial.println("failed to open card");
   b443a:	f003 f86f 	bl	b751c <_Z16_fetch_usbserialv>
   b443e:	4951      	ldr	r1, [pc, #324]	; (b4584 <loop+0x288>)
   b4440:	f002 fdb3 	bl	b6faa <_ZN5Print7printlnEPKc>
    return open(m_cwd, path, oflag);
   b4444:	4950      	ldr	r1, [pc, #320]	; (b4588 <loop+0x28c>)
   b4446:	4a51      	ldr	r2, [pc, #324]	; (b458c <loop+0x290>)
   b4448:	6809      	ldr	r1, [r1, #0]
   b444a:	f244 2302 	movw	r3, #16898	; 0x4202
   b444e:	a80f      	add	r0, sp, #60	; 0x3c
   b4450:	f000 fc0b 	bl	b4c6a <_ZN7FatFile4openEPS_PKci>
    if (!myFile.open("distance.csv", O_RDWR | O_CREAT | O_AT_END)) {
   b4454:	b948      	cbnz	r0, b446a <loop+0x16e>
      Serial.println("opening distance.csv for write failed");
   b4456:	f003 f861 	bl	b751c <_Z16_fetch_usbserialv>
   b445a:	494d      	ldr	r1, [pc, #308]	; (b4590 <loop+0x294>)
   b445c:	f002 fda5 	bl	b6faa <_ZN5Print7printlnEPKc>
      state = PUBLISH_STATE;
   b4460:	2301      	movs	r3, #1
        state = SLEEP_STATE;
   b4462:	7033      	strb	r3, [r6, #0]
}
   b4464:	b019      	add	sp, #100	; 0x64
   b4466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      myFile.print(data);
   b446a:	4941      	ldr	r1, [pc, #260]	; (b4570 <loop+0x274>)
   b446c:	a80b      	add	r0, sp, #44	; 0x2c
   b446e:	f002 fd89 	bl	b6f84 <_ZN5Print5printEPKc>
      myFile.print("\n"); // put next data on new line
   b4472:	4948      	ldr	r1, [pc, #288]	; (b4594 <loop+0x298>)
   b4474:	a80b      	add	r0, sp, #44	; 0x2c
   b4476:	f002 fd85 	bl	b6f84 <_ZN5Print5printEPKc>
      myFile.close();
   b447a:	a80f      	add	r0, sp, #60	; 0x3c
   b447c:	f000 fbee 	bl	b4c5c <_ZN7FatFile5closeEv>
   b4480:	e7ee      	b.n	b4460 <loop+0x164>
   b4482:	f001 fcb3 	bl	b5dec <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b4486:	4d44      	ldr	r5, [pc, #272]	; (b4598 <loop+0x29c>)
        Serial.print("Trying to connect");
   b4488:	f8df 812c 	ldr.w	r8, [pc, #300]	; b45b8 <loop+0x2bc>
          Serial.println("max time for publishing reached without success; go to sleep");
   b448c:	f8df 912c 	ldr.w	r9, [pc, #300]	; b45bc <loop+0x2c0>
        Serial.println("Not max time, try again to connect and publish");
   b4490:	4f42      	ldr	r7, [pc, #264]	; (b459c <loop+0x2a0>)
    stateTime = millis();
   b4492:	6028      	str	r0, [r5, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4494:	f001 fea2 	bl	b61dc <spark_cloud_flag_connected>
      if (Particle.connected() == false) {
   b4498:	b930      	cbnz	r0, b44a8 <loop+0x1ac>
        spark_cloud_flag_connect();
   b449a:	f001 fe97 	bl	b61cc <spark_cloud_flag_connect>
        Serial.print("Trying to connect");
   b449e:	f003 f83d 	bl	b751c <_Z16_fetch_usbserialv>
   b44a2:	4641      	mov	r1, r8
   b44a4:	f002 fd6e 	bl	b6f84 <_ZN5Print5printEPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b44a8:	f001 fe98 	bl	b61dc <spark_cloud_flag_connected>
      if (Particle.connected()) {
   b44ac:	4604      	mov	r4, r0
   b44ae:	2800      	cmp	r0, #0
   b44b0:	d030      	beq.n	b4514 <loop+0x218>
        Serial.println("publishing data");
   b44b2:	f003 f833 	bl	b751c <_Z16_fetch_usbserialv>
   b44b6:	493a      	ldr	r1, [pc, #232]	; (b45a0 <loop+0x2a4>)
   b44b8:	f002 fd77 	bl	b6faa <_ZN5Print7printlnEPKc>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b44bc:	4b39      	ldr	r3, [pc, #228]	; (b45a4 <loop+0x2a8>)
   b44be:	4a3a      	ldr	r2, [pc, #232]	; (b45a8 <loop+0x2ac>)
   b44c0:	781b      	ldrb	r3, [r3, #0]
   b44c2:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b44c4:	4939      	ldr	r1, [pc, #228]	; (b45ac <loop+0x2b0>)
   b44c6:	4313      	orrs	r3, r2
   b44c8:	f88d 3000 	strb.w	r3, [sp]
   b44cc:	4a28      	ldr	r2, [pc, #160]	; (b4570 <loop+0x274>)
   b44ce:	6809      	ldr	r1, [r1, #0]
   b44d0:	233c      	movs	r3, #60	; 0x3c
   b44d2:	a80b      	add	r0, sp, #44	; 0x2c
   b44d4:	f002 f910 	bl	b66f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    ResultT result(ResultT defaultValue) const {
        return this->p_->result(std::move(defaultValue));
    }

    operator ResultT() const {
        return result();
   b44d8:	a80b      	add	r0, sp, #44	; 0x2c
   b44da:	f7ff feef 	bl	b42bc <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
	if (_M_pi != nullptr)
   b44de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b44e0:	4605      	mov	r5, r0
   b44e2:	b17c      	cbz	r4, b4504 <loop+0x208>
      if (--_M_use_count == 0)
   b44e4:	6863      	ldr	r3, [r4, #4]
   b44e6:	3b01      	subs	r3, #1
   b44e8:	6063      	str	r3, [r4, #4]
   b44ea:	b95b      	cbnz	r3, b4504 <loop+0x208>
          _M_dispose();
   b44ec:	6823      	ldr	r3, [r4, #0]
   b44ee:	4620      	mov	r0, r4
   b44f0:	689b      	ldr	r3, [r3, #8]
   b44f2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b44f4:	68a3      	ldr	r3, [r4, #8]
   b44f6:	3b01      	subs	r3, #1
   b44f8:	60a3      	str	r3, [r4, #8]
   b44fa:	b91b      	cbnz	r3, b4504 <loop+0x208>
            _M_destroy();
   b44fc:	6823      	ldr	r3, [r4, #0]
   b44fe:	4620      	mov	r0, r4
   b4500:	68db      	ldr	r3, [r3, #12]
   b4502:	4798      	blx	r3
        Serial.printlnf("publish result %d", success); 
   b4504:	f003 f80a 	bl	b751c <_Z16_fetch_usbserialv>
   b4508:	4929      	ldr	r1, [pc, #164]	; (b45b0 <loop+0x2b4>)
   b450a:	462a      	mov	r2, r5
   b450c:	f7ff fe52 	bl	b41b4 <_ZN5Print8printlnfEPKcz>
        state = SLEEP_STATE;
   b4510:	2302      	movs	r3, #2
   b4512:	e7a6      	b.n	b4462 <loop+0x166>
   b4514:	f001 fc6a 	bl	b5dec <HAL_Timer_Get_Milli_Seconds>
        if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS) {
   b4518:	682b      	ldr	r3, [r5, #0]
   b451a:	1ac0      	subs	r0, r0, r3
   b451c:	f644 631f 	movw	r3, #19999	; 0x4e1f
   b4520:	4298      	cmp	r0, r3
   b4522:	d907      	bls.n	b4534 <loop+0x238>
          state = SLEEP_STATE;
   b4524:	2302      	movs	r3, #2
   b4526:	7033      	strb	r3, [r6, #0]
          Serial.println("max time for publishing reached without success; go to sleep");
   b4528:	f002 fff8 	bl	b751c <_Z16_fetch_usbserialv>
   b452c:	4649      	mov	r1, r9
   b452e:	f002 fd3c 	bl	b6faa <_ZN5Print7printlnEPKc>
          isMaxTime = true;
   b4532:	2401      	movs	r4, #1
        Serial.println("Not max time, try again to connect and publish");
   b4534:	f002 fff2 	bl	b751c <_Z16_fetch_usbserialv>
   b4538:	4639      	mov	r1, r7
   b453a:	f002 fd36 	bl	b6faa <_ZN5Print7printlnEPKc>
        delay(500);
   b453e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4542:	f001 ff0b 	bl	b635c <delay>
    while (!isMaxTime) {
   b4546:	2c00      	cmp	r4, #0
   b4548:	d0a4      	beq.n	b4494 <loop+0x198>
   b454a:	e78b      	b.n	b4464 <loop+0x168>
   b454c:	2003e66c 	.word	0x2003e66c
   b4550:	2003debc 	.word	0x2003debc
   b4554:	2003dee4 	.word	0x2003dee4
   b4558:	40668000 	.word	0x40668000
   b455c:	2003e1e4 	.word	0x2003e1e4
   b4560:	2003deb8 	.word	0x2003deb8
   b4564:	2003e1dc 	.word	0x2003e1dc
   b4568:	2003de20 	.word	0x2003de20
   b456c:	000b83a8 	.word	0x000b83a8
   b4570:	2003de40 	.word	0x2003de40
   b4574:	000b84e4 	.word	0x000b84e4
   b4578:	000b84d0 	.word	0x000b84d0
   b457c:	02faf080 	.word	0x02faf080
   b4580:	2003e1e8 	.word	0x2003e1e8
   b4584:	000b83bd 	.word	0x000b83bd
   b4588:	2003e678 	.word	0x2003e678
   b458c:	000b83d1 	.word	0x000b83d1
   b4590:	000b83de 	.word	0x000b83de
   b4594:	000b8404 	.word	0x000b8404
   b4598:	2003e670 	.word	0x2003e670
   b459c:	000b8477 	.word	0x000b8477
   b45a0:	000b8418 	.word	0x000b8418
   b45a4:	2003de1d 	.word	0x2003de1d
   b45a8:	2003de1c 	.word	0x2003de1c
   b45ac:	2003dd94 	.word	0x2003dd94
   b45b0:	000b8428 	.word	0x000b8428
   b45b4:	2003e1e0 	.word	0x2003e1e0
   b45b8:	000b8406 	.word	0x000b8406
   b45bc:	000b843a 	.word	0x000b843a
    Serial.println("going to sleep");
   b45c0:	f002 ffac 	bl	b751c <_Z16_fetch_usbserialv>
   b45c4:	494c      	ldr	r1, [pc, #304]	; (b46f8 <loop+0x3fc>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b45c6:	4c4d      	ldr	r4, [pc, #308]	; (b46fc <loop+0x400>)
   b45c8:	f002 fcef 	bl	b6faa <_ZN5Print7printlnEPKc>
    delay(500);
   b45cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b45d0:	f001 fec4 	bl	b635c <delay>
    int wakeInSeconds = secondsUntilNextEvent(); // Calculate how long to sleep 
   b45d4:	f7ff fe4c 	bl	b4270 <_Z21secondsUntilNextEventv>
   b45d8:	7d23      	ldrb	r3, [r4, #20]
   b45da:	4680      	mov	r8, r0
   b45dc:	b1e3      	cbz	r3, b4618 <loop+0x31c>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b45de:	6823      	ldr	r3, [r4, #0]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b45e0:	7225      	strb	r5, [r4, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b45e2:	68d9      	ldr	r1, [r3, #12]
   b45e4:	2001      	movs	r0, #1
   b45e6:	f7ff fda4 	bl	b4132 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
   b45ea:	4605      	mov	r5, r0

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
        if (valid_) {
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
            while (wakeup) {
   b45ec:	2800      	cmp	r0, #0
   b45ee:	d03e      	beq.n	b466e <loop+0x372>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   b45f0:	8983      	ldrh	r3, [r0, #12]
   b45f2:	2b02      	cmp	r3, #2
   b45f4:	d139      	bne.n	b466a <loop+0x36e>
                    gpioWakeup->mode = mode;
   b45f6:	7383      	strb	r3, [r0, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b45f8:	7d23      	ldrb	r3, [r4, #20]
   b45fa:	b16b      	cbz	r3, b4618 <loop+0x31c>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b45fc:	6823      	ldr	r3, [r4, #0]
      .duration(wakeInSeconds* 1000L) // Set seconds until wake
   b45fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4602:	68d9      	ldr	r1, [r3, #12]
   b4604:	fb00 f808 	mul.w	r8, r0, r8
   b4608:	2004      	movs	r0, #4
   b460a:	f7ff fd92 	bl	b4132 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
            if (wakeup) {
   b460e:	4607      	mov	r7, r0
   b4610:	2800      	cmp	r0, #0
   b4612:	d042      	beq.n	b469a <loop+0x39e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4614:	f8c0 800c 	str.w	r8, [r0, #12]
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
        if (valid_) {
   b4618:	7d23      	ldrb	r3, [r4, #20]
   b461a:	b183      	cbz	r3, b463e <loop+0x342>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b461c:	6823      	ldr	r3, [r4, #0]
   b461e:	68d9      	ldr	r1, [r3, #12]
   b4620:	200e      	movs	r0, #14
   b4622:	f7ff fd86 	bl	b4132 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
   b4626:	4605      	mov	r5, r0
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK);
            while (wakeup) {
   b4628:	2800      	cmp	r0, #0
   b462a:	d04b      	beq.n	b46c4 <loop+0x3c8>
                auto networkWakeup = reinterpret_cast<hal_wakeup_source_network_t*>(wakeup);
                if (networkWakeup->index == netif) {
   b462c:	7b03      	ldrb	r3, [r0, #12]
   b462e:	2b04      	cmp	r3, #4
   b4630:	d146      	bne.n	b46c0 <loop+0x3c4>
                    if (networkWakeup->flags != flags.value()) {
   b4632:	89c3      	ldrh	r3, [r0, #14]
   b4634:	2b01      	cmp	r3, #1
   b4636:	d002      	beq.n	b463e <loop+0x342>
                        networkWakeup->flags |= flags.value();
   b4638:	f043 0301 	orr.w	r3, r3, #1
   b463c:	81c3      	strh	r3, [r0, #14]
    SystemSleepResult result = System.sleep(config); // Device sleeps here
   b463e:	492f      	ldr	r1, [pc, #188]	; (b46fc <loop+0x400>)
   b4640:	a80b      	add	r0, sp, #44	; 0x2c
   b4642:	f002 fe05 	bl	b7250 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    Serial.print("Feeling restless");
   b4646:	f002 ff69 	bl	b751c <_Z16_fetch_usbserialv>
   b464a:	492d      	ldr	r1, [pc, #180]	; (b4700 <loop+0x404>)
   b464c:	f002 fc9a 	bl	b6f84 <_ZN5Print5printEPKc>
   b4650:	f001 fbcc 	bl	b5dec <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b4654:	4b2b      	ldr	r3, [pc, #172]	; (b4704 <loop+0x408>)
   b4656:	6018      	str	r0, [r3, #0]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   b4658:	980b      	ldr	r0, [sp, #44]	; 0x2c
    state = DATALOG_STATE;
   b465a:	2300      	movs	r3, #0
   b465c:	7033      	strb	r3, [r6, #0]
   b465e:	2800      	cmp	r0, #0
   b4660:	f43f af00 	beq.w	b4464 <loop+0x168>
            free(wakeupSource_);
   b4664:	f001 fe42 	bl	b62ec <free>
}
   b4668:	e6fc      	b.n	b4464 <loop+0x168>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b466a:	6881      	ldr	r1, [r0, #8]
   b466c:	e7ba      	b.n	b45e4 <loop+0x2e8>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b466e:	4926      	ldr	r1, [pc, #152]	; (b4708 <loop+0x40c>)
   b4670:	2010      	movs	r0, #16
   b4672:	f003 f953 	bl	b791c <_ZnwjRKSt9nothrow_t>
   b4676:	4607      	mov	r7, r0
   b4678:	2800      	cmp	r0, #0
   b467a:	d03b      	beq.n	b46f4 <loop+0x3f8>
   b467c:	2210      	movs	r2, #16
   b467e:	4629      	mov	r1, r5
   b4680:	f003 fd96 	bl	b81b0 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4684:	4b21      	ldr	r3, [pc, #132]	; (b470c <loop+0x410>)
   b4686:	603b      	str	r3, [r7, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4688:	2301      	movs	r3, #1
   b468a:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b468c:	6923      	ldr	r3, [r4, #16]
   b468e:	60bb      	str	r3, [r7, #8]
            wakeupSource->pin = pin;
   b4690:	2302      	movs	r3, #2
   b4692:	81bb      	strh	r3, [r7, #12]
            wakeupSource->mode = mode;
   b4694:	73bb      	strb	r3, [r7, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4696:	6127      	str	r7, [r4, #16]
   b4698:	e7ae      	b.n	b45f8 <loop+0x2fc>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b469a:	491b      	ldr	r1, [pc, #108]	; (b4708 <loop+0x40c>)
   b469c:	2010      	movs	r0, #16
   b469e:	f003 f93d 	bl	b791c <_ZnwjRKSt9nothrow_t>
   b46a2:	4605      	mov	r5, r0
   b46a4:	b330      	cbz	r0, b46f4 <loop+0x3f8>
   b46a6:	2210      	movs	r2, #16
   b46a8:	4639      	mov	r1, r7
   b46aa:	f003 fd81 	bl	b81b0 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b46ae:	4b17      	ldr	r3, [pc, #92]	; (b470c <loop+0x410>)
   b46b0:	602b      	str	r3, [r5, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b46b2:	2304      	movs	r3, #4
   b46b4:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b46b6:	6923      	ldr	r3, [r4, #16]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b46b8:	6125      	str	r5, [r4, #16]
            wakeupSource->ms = ms;
   b46ba:	e9c5 3802 	strd	r3, r8, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b46be:	e7ab      	b.n	b4618 <loop+0x31c>
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   b46c0:	6881      	ldr	r1, [r0, #8]
   b46c2:	e7ad      	b.n	b4620 <loop+0x324>
            }
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   b46c4:	4910      	ldr	r1, [pc, #64]	; (b4708 <loop+0x40c>)
   b46c6:	2014      	movs	r0, #20
   b46c8:	f003 f928 	bl	b791c <_ZnwjRKSt9nothrow_t>
   b46cc:	4607      	mov	r7, r0
   b46ce:	b178      	cbz	r0, b46f0 <loop+0x3f4>
   b46d0:	2214      	movs	r2, #20
   b46d2:	4629      	mov	r1, r5
   b46d4:	f003 fd6c 	bl	b81b0 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b46d8:	4b0c      	ldr	r3, [pc, #48]	; (b470c <loop+0x410>)
   b46da:	603b      	str	r3, [r7, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   b46dc:	230e      	movs	r3, #14
   b46de:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b46e0:	6923      	ldr	r3, [r4, #16]
   b46e2:	60bb      	str	r3, [r7, #8]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   b46e4:	2304      	movs	r3, #4
   b46e6:	733b      	strb	r3, [r7, #12]
            wakeupSource->flags = flags.value();
   b46e8:	2301      	movs	r3, #1
   b46ea:	81fb      	strh	r3, [r7, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b46ec:	6127      	str	r7, [r4, #16]
   b46ee:	e7a6      	b.n	b463e <loop+0x342>
                valid_ = false;
   b46f0:	7525      	strb	r5, [r4, #20]
                return *this;
   b46f2:	e7a4      	b.n	b463e <loop+0x342>
                valid_ = false;
   b46f4:	7525      	strb	r5, [r4, #20]
                return *this;
   b46f6:	e78f      	b.n	b4618 <loop+0x31c>
   b46f8:	000b84a6 	.word	0x000b84a6
   b46fc:	2003de28 	.word	0x2003de28
   b4700:	000b84b5 	.word	0x000b84b5
   b4704:	2003e670 	.word	0x2003e670
   b4708:	000b86d4 	.word	0x000b86d4
   b470c:	00030010 	.word	0x00030010

000b4710 <_GLOBAL__sub_I_sd>:
        val_(val) {
   b4710:	4b25      	ldr	r3, [pc, #148]	; (b47a8 <_GLOBAL__sub_I_sd+0x98>)
   b4712:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4714:	2201      	movs	r2, #1
   b4716:	701a      	strb	r2, [r3, #0]
   b4718:	4b24      	ldr	r3, [pc, #144]	; (b47ac <_GLOBAL__sub_I_sd+0x9c>)
  SdFat() {
   b471a:	4c25      	ldr	r4, [pc, #148]	; (b47b0 <_GLOBAL__sub_I_sd+0xa0>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b471c:	4d25      	ldr	r5, [pc, #148]	; (b47b4 <_GLOBAL__sub_I_sd+0xa4>)
  {
   b471e:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
   b4722:	2108      	movs	r1, #8
   b4724:	7019      	strb	r1, [r3, #0]
   b4726:	2164      	movs	r1, #100	; 0x64
   b4728:	2300      	movs	r3, #0
   b472a:	f8c4 1460 	str.w	r1, [r4, #1120]	; 0x460
   b472e:	4922      	ldr	r1, [pc, #136]	; (b47b8 <_GLOBAL__sub_I_sd+0xa8>)
   b4730:	6063      	str	r3, [r4, #4]
   b4732:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   b4736:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
   b473a:	f8c4 1470 	str.w	r1, [r4, #1136]	; 0x470
   b473e:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
   b4742:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   b4746:	7829      	ldrb	r1, [r5, #0]
   b4748:	f3bf 8f5b 	dmb	ish
   b474c:	4011      	ands	r1, r2
   b474e:	d10b      	bne.n	b4768 <_GLOBAL__sub_I_sd+0x58>
   b4750:	4628      	mov	r0, r5
   b4752:	9101      	str	r1, [sp, #4]
   b4754:	f7ff fca3 	bl	b409e <__cxa_guard_acquire>
   b4758:	9901      	ldr	r1, [sp, #4]
   b475a:	b128      	cbz	r0, b4768 <_GLOBAL__sub_I_sd+0x58>
   b475c:	4817      	ldr	r0, [pc, #92]	; (b47bc <_GLOBAL__sub_I_sd+0xac>)
   b475e:	f002 fc89 	bl	b7074 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4762:	4628      	mov	r0, r5
   b4764:	f7ff fca0 	bl	b40a8 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b4768:	4b14      	ldr	r3, [pc, #80]	; (b47bc <_GLOBAL__sub_I_sd+0xac>)
   b476a:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
              error_(SYSTEM_ERROR_NONE) {
   b476e:	4b14      	ldr	r3, [pc, #80]	; (b47c0 <_GLOBAL__sub_I_sd+0xb0>)
    SleepResult() {}
   b4770:	4a14      	ldr	r2, [pc, #80]	; (b47c4 <_GLOBAL__sub_I_sd+0xb4>)
   b4772:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4774:	2400      	movs	r4, #0
   b4776:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b477a:	2002      	movs	r0, #2
   b477c:	f001 fcc6 	bl	b610c <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4780:	4621      	mov	r1, r4
   b4782:	2001      	movs	r0, #1
   b4784:	f001 fcd2 	bl	b612c <system_thread_set_state>
FuelGauge batteryMonitor;
   b4788:	4621      	mov	r1, r4
   b478a:	480f      	ldr	r0, [pc, #60]	; (b47c8 <_GLOBAL__sub_I_sd+0xb8>)
   b478c:	f002 f98c 	bl	b6aa8 <_ZN9FuelGaugeC1Eb>
        : config_(config) {
   b4790:	4b0e      	ldr	r3, [pc, #56]	; (b47cc <_GLOBAL__sub_I_sd+0xbc>)
   b4792:	1d1a      	adds	r2, r3, #4
   b4794:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4796:	4a0e      	ldr	r2, [pc, #56]	; (b47d0 <_GLOBAL__sub_I_sd+0xc0>)
   b4798:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b479a:	2201      	movs	r2, #1
   b479c:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b47a0:	611c      	str	r4, [r3, #16]
   b47a2:	751a      	strb	r2, [r3, #20]
   b47a4:	b003      	add	sp, #12
   b47a6:	bd30      	pop	{r4, r5, pc}
   b47a8:	2003de1c 	.word	0x2003de1c
   b47ac:	2003de1d 	.word	0x2003de1d
   b47b0:	2003e1e8 	.word	0x2003e1e8
   b47b4:	2003de04 	.word	0x2003de04
   b47b8:	000b84d0 	.word	0x000b84d0
   b47bc:	2003de08 	.word	0x2003de08
   b47c0:	2003de10 	.word	0x2003de10
   b47c4:	ffff0000 	.word	0xffff0000
   b47c8:	2003de20 	.word	0x2003de20
   b47cc:	2003de28 	.word	0x2003de28
   b47d0:	00030010 	.word	0x00030010

000b47d4 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b47d4:	b538      	push	{r3, r4, r5, lr}
   b47d6:	4604      	mov	r4, r0
   b47d8:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b47da:	2224      	movs	r2, #36	; 0x24
   b47dc:	2100      	movs	r1, #0
   b47de:	f003 fce7 	bl	b81b0 <memset>

  m_vol = vol;
   b47e2:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b47e4:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b47e6:	2b10      	cmp	r3, #16
   b47e8:	d003      	beq.n	b47f2 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b47ea:	2b20      	cmp	r3, #32
   b47ec:	d006      	beq.n	b47fc <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b47ee:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b47f0:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b47f2:	2320      	movs	r3, #32
  m_flags = F_READ;
   b47f4:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b47f6:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b47f8:	70a0      	strb	r0, [r4, #2]
  return true;
   b47fa:	e7f9      	b.n	b47f0 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b47fc:	2340      	movs	r3, #64	; 0x40
   b47fe:	e7f9      	b.n	b47f4 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b4800 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b4800:	b510      	push	{r4, lr}
   b4802:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b4804:	3024      	adds	r0, #36	; 0x24
   b4806:	f000 fe63 	bl	b54d0 <_ZN8FatCache4syncEv>
   b480a:	b128      	cbz	r0, b4818 <_ZN9FatVolume9cacheSyncEv+0x18>
   b480c:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b4810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b4814:	f000 be5c 	b.w	b54d0 <_ZN8FatCache4syncEv>
  }
   b4818:	bd10      	pop	{r4, pc}

000b481a <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b481a:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b481c:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b481e:	f043 0304 	orr.w	r3, r3, #4
   b4822:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b4824:	f100 0210 	add.w	r2, r0, #16
   b4828:	6880      	ldr	r0, [r0, #8]
   b482a:	f000 bf07 	b.w	b563c <_ZN9FatVolume15allocateClusterEmPm>
	...

000b4830 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b4830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b4834:	7801      	ldrb	r1, [r0, #0]
   b4836:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b483a:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b483c:	d003      	beq.n	b4846 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b483e:	2600      	movs	r6, #0
}
   b4840:	4630      	mov	r0, r6
   b4842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b4846:	6942      	ldr	r2, [r0, #20]
   b4848:	4b17      	ldr	r3, [pc, #92]	; (b48a8 <_ZN7FatFile13addDirClusterEv+0x78>)
   b484a:	429a      	cmp	r2, r3
   b484c:	d2f7      	bcs.n	b483e <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b484e:	f7ff ffe4 	bl	b481a <_ZN7FatFile10addClusterEv>
   b4852:	4606      	mov	r6, r0
   b4854:	2800      	cmp	r0, #0
   b4856:	d0f2      	beq.n	b483e <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b4858:	6921      	ldr	r1, [r4, #16]
   b485a:	68a0      	ldr	r0, [r4, #8]
   b485c:	f000 fe83 	bl	b5566 <_ZNK9FatVolume17clusterFirstBlockEm>
   b4860:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b4862:	68a0      	ldr	r0, [r4, #8]
   b4864:	2205      	movs	r2, #5
   b4866:	4639      	mov	r1, r7
   b4868:	3024      	adds	r0, #36	; 0x24
   b486a:	f000 fe59 	bl	b5520 <_ZN8FatCache4readEmh>
  if (!pc) {
   b486e:	4680      	mov	r8, r0
   b4870:	2800      	cmp	r0, #0
   b4872:	d0e4      	beq.n	b483e <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b4874:	4629      	mov	r1, r5
   b4876:	f44f 7200 	mov.w	r2, #512	; 0x200
   b487a:	f003 fc99 	bl	b81b0 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b487e:	2501      	movs	r5, #1
   b4880:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b4882:	791a      	ldrb	r2, [r3, #4]
   b4884:	42aa      	cmp	r2, r5
   b4886:	d909      	bls.n	b489c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b4888:	6818      	ldr	r0, [r3, #0]
   b488a:	4642      	mov	r2, r8
   b488c:	19e9      	adds	r1, r5, r7
   b488e:	f001 f9b4 	bl	b5bfa <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b4892:	2800      	cmp	r0, #0
   b4894:	d0d3      	beq.n	b483e <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b4896:	3501      	adds	r5, #1
   b4898:	b2ed      	uxtb	r5, r5
   b489a:	e7f1      	b.n	b4880 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b489c:	6963      	ldr	r3, [r4, #20]
   b489e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b48a2:	6163      	str	r3, [r4, #20]
  return true;
   b48a4:	e7cc      	b.n	b4840 <_ZN7FatFile13addDirClusterEv+0x10>
   b48a6:	bf00      	nop
   b48a8:	001ffe00 	.word	0x001ffe00

000b48ac <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b48ac:	b510      	push	{r4, lr}
   b48ae:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b48b0:	6880      	ldr	r0, [r0, #8]
   b48b2:	460a      	mov	r2, r1
   b48b4:	3024      	adds	r0, #36	; 0x24
   b48b6:	69a1      	ldr	r1, [r4, #24]
   b48b8:	f000 fe32 	bl	b5520 <_ZN8FatCache4readEmh>
  if (!pc) {
   b48bc:	b120      	cbz	r0, b48c8 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b48be:	88a3      	ldrh	r3, [r4, #4]
   b48c0:	f003 030f 	and.w	r3, r3, #15
   b48c4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b48c8:	bd10      	pop	{r4, pc}

000b48ca <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b48ca:	7803      	ldrb	r3, [r0, #0]
   b48cc:	b90b      	cbnz	r3, b48d2 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b48ce:	f7ff bf81 	b.w	b47d4 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b48d2:	2000      	movs	r0, #0
   b48d4:	4770      	bx	lr

000b48d6 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b48d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b48da:	7803      	ldrb	r3, [r0, #0]
   b48dc:	4604      	mov	r4, r0
   b48de:	4688      	mov	r8, r1
   b48e0:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b48e2:	2b00      	cmp	r3, #0
   b48e4:	d05d      	beq.n	b49a2 <_ZN7FatFile4readEPvj+0xcc>
   b48e6:	7882      	ldrb	r2, [r0, #2]
   b48e8:	07d1      	lsls	r1, r2, #31
   b48ea:	d55a      	bpl.n	b49a2 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b48ec:	071a      	lsls	r2, r3, #28
   b48ee:	d52d      	bpl.n	b494c <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b48f0:	69c3      	ldr	r3, [r0, #28]
   b48f2:	6942      	ldr	r2, [r0, #20]
   b48f4:	1a9b      	subs	r3, r3, r2
   b48f6:	429d      	cmp	r5, r3
   b48f8:	bf28      	it	cs
   b48fa:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b48fc:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b48fe:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4902:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b4906:	2e00      	cmp	r6, #0
   b4908:	f000 808f 	beq.w	b4a2a <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b490c:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b490e:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4910:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b4912:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b4914:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4918:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b491c:	d51f      	bpl.n	b495e <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b491e:	6a00      	ldr	r0, [r0, #32]
   b4920:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b4922:	68a0      	ldr	r0, [r4, #8]
   b4924:	f1ba 0f00 	cmp.w	sl, #0
   b4928:	d142      	bne.n	b49b0 <_ZN7FatFile4readEPvj+0xda>
   b492a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b492e:	d33f      	bcc.n	b49b0 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b4930:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4932:	4299      	cmp	r1, r3
   b4934:	d03c      	beq.n	b49b0 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b4936:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b493a:	d252      	bcs.n	b49e2 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b493c:	6800      	ldr	r0, [r0, #0]
   b493e:	4642      	mov	r2, r8
   b4940:	f001 f8d2 	bl	b5ae8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b4944:	b368      	cbz	r0, b49a2 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b4946:	f44f 7700 	mov.w	r7, #512	; 0x200
   b494a:	e044      	b.n	b49d6 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b494c:	069b      	lsls	r3, r3, #26
   b494e:	d5d5      	bpl.n	b48fc <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b4950:	6883      	ldr	r3, [r0, #8]
   b4952:	891a      	ldrh	r2, [r3, #8]
   b4954:	6943      	ldr	r3, [r0, #20]
   b4956:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b495a:	b29b      	uxth	r3, r3
   b495c:	e7cb      	b.n	b48f6 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b495e:	f890 9005 	ldrb.w	r9, [r0, #5]
   b4962:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b4966:	f1ba 0f00 	cmp.w	sl, #0
   b496a:	d108      	bne.n	b497e <_ZN7FatFile4readEPvj+0xa8>
   b496c:	f1b9 0f00 	cmp.w	r9, #0
   b4970:	d105      	bne.n	b497e <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b4972:	b95b      	cbnz	r3, b498c <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b4974:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b4976:	bf4c      	ite	mi
   b4978:	6a03      	ldrmi	r3, [r0, #32]
   b497a:	6a23      	ldrpl	r3, [r4, #32]
   b497c:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b497e:	6921      	ldr	r1, [r4, #16]
   b4980:	68a0      	ldr	r0, [r4, #8]
   b4982:	f000 fdf0 	bl	b5566 <_ZNK9FatVolume17clusterFirstBlockEm>
   b4986:	eb09 0100 	add.w	r1, r9, r0
   b498a:	e7ca      	b.n	b4922 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b498c:	6921      	ldr	r1, [r4, #16]
   b498e:	465a      	mov	r2, fp
   b4990:	f000 fdef 	bl	b5572 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b4994:	2800      	cmp	r0, #0
   b4996:	db04      	blt.n	b49a2 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b4998:	d1f1      	bne.n	b497e <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b499a:	7823      	ldrb	r3, [r4, #0]
   b499c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b49a0:	d143      	bne.n	b4a2a <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b49a2:	7863      	ldrb	r3, [r4, #1]
   b49a4:	f043 0302 	orr.w	r3, r3, #2
   b49a8:	7063      	strb	r3, [r4, #1]
  return -1;
   b49aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b49ae:	e03d      	b.n	b4a2c <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b49b0:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b49b4:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b49b6:	f04f 0200 	mov.w	r2, #0
   b49ba:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b49be:	bf28      	it	cs
   b49c0:	4637      	movcs	r7, r6
   b49c2:	f000 fdad 	bl	b5520 <_ZN8FatCache4readEmh>
      if (!pc) {
   b49c6:	2800      	cmp	r0, #0
   b49c8:	d0eb      	beq.n	b49a2 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b49ca:	eb00 010a 	add.w	r1, r0, sl
   b49ce:	463a      	mov	r2, r7
   b49d0:	4640      	mov	r0, r8
   b49d2:	f003 fbdf 	bl	b8194 <memcpy>
    m_curPosition += n;
   b49d6:	6963      	ldr	r3, [r4, #20]
   b49d8:	443b      	add	r3, r7
    dst += n;
   b49da:	44b8      	add	r8, r7
    m_curPosition += n;
   b49dc:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b49de:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b49e0:	e791      	b.n	b4906 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b49e2:	7822      	ldrb	r2, [r4, #0]
   b49e4:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b49e6:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b49ea:	d406      	bmi.n	b49fa <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b49ec:	7902      	ldrb	r2, [r0, #4]
   b49ee:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b49f2:	b2d2      	uxtb	r2, r2
   b49f4:	4592      	cmp	sl, r2
   b49f6:	bf28      	it	cs
   b49f8:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b49fa:	4299      	cmp	r1, r3
      n = 512*nb;
   b49fc:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4a00:	d208      	bcs.n	b4a14 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b4a02:	68a0      	ldr	r0, [r4, #8]
   b4a04:	4653      	mov	r3, sl
   b4a06:	6800      	ldr	r0, [r0, #0]
   b4a08:	4642      	mov	r2, r8
   b4a0a:	f001 f8b5 	bl	b5b78 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b4a0e:	2800      	cmp	r0, #0
   b4a10:	d1e1      	bne.n	b49d6 <_ZN7FatFile4readEPvj+0x100>
   b4a12:	e7c6      	b.n	b49a2 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4a14:	4453      	add	r3, sl
   b4a16:	428b      	cmp	r3, r1
   b4a18:	d9f3      	bls.n	b4a02 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b4a1a:	3024      	adds	r0, #36	; 0x24
   b4a1c:	9101      	str	r1, [sp, #4]
   b4a1e:	f000 fd57 	bl	b54d0 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b4a22:	9901      	ldr	r1, [sp, #4]
   b4a24:	2800      	cmp	r0, #0
   b4a26:	d1ec      	bne.n	b4a02 <_ZN7FatFile4readEPvj+0x12c>
   b4a28:	e7bb      	b.n	b49a2 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b4a2a:	1ba8      	subs	r0, r5, r6
}
   b4a2c:	b003      	add	sp, #12
   b4a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4a32 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b4a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b4a34:	2201      	movs	r2, #1
   b4a36:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b4a3a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b4a3e:	4604      	mov	r4, r0
   b4a40:	f7ff ff49 	bl	b48d6 <_ZN7FatFile4readEPvj>
   b4a44:	2801      	cmp	r0, #1
   b4a46:	bf0a      	itet	eq
   b4a48:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4a4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b4a50:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b4a54:	b002      	add	sp, #8
   b4a56:	bd70      	pop	{r4, r5, r6, pc}

000b4a58 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b4a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b4a5a:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b4a5c:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b4a60:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b4a62:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b4a66:	d000      	beq.n	b4a6a <_ZN7FatFile12readDirCacheEb+0x12>
   b4a68:	b999      	cbnz	r1, b4a92 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b4a6a:	2201      	movs	r2, #1
   b4a6c:	f10d 0107 	add.w	r1, sp, #7
   b4a70:	4620      	mov	r0, r4
   b4a72:	f7ff ff30 	bl	b48d6 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b4a76:	b240      	sxtb	r0, r0
   b4a78:	2801      	cmp	r0, #1
   b4a7a:	d002      	beq.n	b4a82 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b4a7c:	2000      	movs	r0, #0
}
   b4a7e:	b003      	add	sp, #12
   b4a80:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b4a82:	6963      	ldr	r3, [r4, #20]
   b4a84:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b4a86:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b4a88:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b4a8a:	3030      	adds	r0, #48	; 0x30
   b4a8c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b4a90:	e7f5      	b.n	b4a7e <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b4a92:	3320      	adds	r3, #32
   b4a94:	e7f7      	b.n	b4a86 <_ZN7FatFile12readDirCacheEb+0x2e>

000b4a96 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b4a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b4a9a:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b4a9c:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b4a9e:	4604      	mov	r4, r0
   b4aa0:	460d      	mov	r5, r1
  if (!isOpen()) {
   b4aa2:	b162      	cbz	r2, b4abe <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b4aa4:	6940      	ldr	r0, [r0, #20]
   b4aa6:	4288      	cmp	r0, r1
   b4aa8:	d002      	beq.n	b4ab0 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b4aaa:	b919      	cbnz	r1, b4ab4 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b4aac:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b4aae:	6165      	str	r5, [r4, #20]
    return true;
   b4ab0:	2001      	movs	r0, #1
   b4ab2:	e006      	b.n	b4ac2 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b4ab4:	0716      	lsls	r6, r2, #28
   b4ab6:	d506      	bpl.n	b4ac6 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b4ab8:	69e3      	ldr	r3, [r4, #28]
   b4aba:	428b      	cmp	r3, r1
   b4abc:	d20b      	bcs.n	b4ad6 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b4abe:	6127      	str	r7, [r4, #16]
  return false;
   b4ac0:	2000      	movs	r0, #0
}
   b4ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b4ac6:	0691      	lsls	r1, r2, #26
   b4ac8:	d505      	bpl.n	b4ad6 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b4aca:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b4acc:	891b      	ldrh	r3, [r3, #8]
   b4ace:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b4ad2:	d9ec      	bls.n	b4aae <_ZN7FatFile7seekSetEm+0x18>
   b4ad4:	e7f3      	b.n	b4abe <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b4ad6:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b4ada:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b4ade:	1e43      	subs	r3, r0, #1
   b4ae0:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b4ae4:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b4ae6:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b4ae8:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b4aea:	42b3      	cmp	r3, r6
   b4aec:	d800      	bhi.n	b4af0 <_ZN7FatFile7seekSetEm+0x5a>
   b4aee:	b998      	cbnz	r0, b4b18 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b4af0:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b4af2:	bf4c      	ite	mi
   b4af4:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b4af8:	6a23      	ldrpl	r3, [r4, #32]
   b4afa:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b4afc:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b4b00:	2e00      	cmp	r6, #0
   b4b02:	d0d4      	beq.n	b4aae <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b4b04:	6921      	ldr	r1, [r4, #16]
   b4b06:	68a0      	ldr	r0, [r4, #8]
   b4b08:	4642      	mov	r2, r8
   b4b0a:	f000 fd32 	bl	b5572 <_ZN9FatVolume6fatGetEmPm>
   b4b0e:	2800      	cmp	r0, #0
   b4b10:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b4b14:	dcf4      	bgt.n	b4b00 <_ZN7FatFile7seekSetEm+0x6a>
   b4b16:	e7d2      	b.n	b4abe <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b4b18:	1af6      	subs	r6, r6, r3
   b4b1a:	e7ef      	b.n	b4afc <_ZN7FatFile7seekSetEm+0x66>

000b4b1c <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b4b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b1e:	460f      	mov	r7, r1
   b4b20:	4604      	mov	r4, r0
   b4b22:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b4b24:	2100      	movs	r1, #0
   b4b26:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b4b28:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b4b2a:	f003 fb41 	bl	b81b0 <memset>
  m_vol = dirFile->m_vol;
   b4b2e:	68b8      	ldr	r0, [r7, #8]
   b4b30:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b4b32:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b4b34:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b4b38:	6a3b      	ldr	r3, [r7, #32]
   b4b3a:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b4b3c:	016a      	lsls	r2, r5, #5
   b4b3e:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b4b42:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b4b46:	071f      	lsls	r7, r3, #28
   b4b48:	d444      	bmi.n	b4bd4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b4b4a:	f003 0317 	and.w	r3, r3, #23
   b4b4e:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b4b50:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b4b54:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b4b58:	bf04      	itt	eq
   b4b5a:	f043 0308 	orreq.w	r3, r3, #8
   b4b5e:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b4b60:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b4b64:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b4b66:	f006 0303 	and.w	r3, r6, #3
   b4b6a:	2b01      	cmp	r3, #1
   b4b6c:	d02c      	beq.n	b4bc8 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b4b6e:	2b02      	cmp	r3, #2
   b4b70:	d028      	beq.n	b4bc4 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b4b72:	bb7b      	cbnz	r3, b4bd4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b4b74:	0571      	lsls	r1, r6, #21
   b4b76:	d42d      	bmi.n	b4bd4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b4b78:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b4b7a:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b4b7c:	78a1      	ldrb	r1, [r4, #2]
   b4b7e:	078b      	lsls	r3, r1, #30
   b4b80:	d504      	bpl.n	b4b8c <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b4b82:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b4b84:	06df      	lsls	r7, r3, #27
   b4b86:	d425      	bmi.n	b4bd4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b4b88:	07dd      	lsls	r5, r3, #31
   b4b8a:	d423      	bmi.n	b4bd4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b4b8c:	11b3      	asrs	r3, r6, #6
   b4b8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b4b92:	f006 0508 	and.w	r5, r6, #8
   b4b96:	432b      	orrs	r3, r5
   b4b98:	430b      	orrs	r3, r1
   b4b9a:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b4b9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b4b9e:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b4ba0:	1883      	adds	r3, r0, r2
   b4ba2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b4ba6:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b4baa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b4bae:	0572      	lsls	r2, r6, #21
   b4bb0:	d513      	bpl.n	b4bda <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b4bb2:	b959      	cbnz	r1, b4bcc <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b4bb4:	78a3      	ldrb	r3, [r4, #2]
   b4bb6:	f043 0304 	orr.w	r3, r3, #4
   b4bba:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b4bbc:	0473      	lsls	r3, r6, #17
   b4bbe:	d410      	bmi.n	b4be2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b4bc0:	2001      	movs	r0, #1
}
   b4bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b4bc4:	2303      	movs	r3, #3
   b4bc6:	e7d8      	b.n	b4b7a <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b4bc8:	2302      	movs	r3, #2
   b4bca:	e7d6      	b.n	b4b7a <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b4bcc:	f000 fd71 	bl	b56b2 <_ZN9FatVolume9freeChainEm>
   b4bd0:	2800      	cmp	r0, #0
   b4bd2:	d1ef      	bne.n	b4bb4 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b4bd4:	2000      	movs	r0, #0
   b4bd6:	7020      	strb	r0, [r4, #0]
  return false;
   b4bd8:	e7f3      	b.n	b4bc2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b4bda:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b4bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4bde:	61e3      	str	r3, [r4, #28]
   b4be0:	e7ec      	b.n	b4bbc <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b4be2:	69e1      	ldr	r1, [r4, #28]
   b4be4:	4620      	mov	r0, r4
   b4be6:	f7ff ff56 	bl	b4a96 <_ZN7FatFile7seekSetEm>
   b4bea:	2800      	cmp	r0, #0
   b4bec:	d1e8      	bne.n	b4bc0 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b4bee:	e7f1      	b.n	b4bd4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b4bf0 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b4bf0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b4bf2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b4bf4:	4604      	mov	r4, r0
  if (!isOpen()) {
   b4bf6:	b90b      	cbnz	r3, b4bfc <_ZN7FatFile4syncEv+0xc>
    return true;
   b4bf8:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b4bfa:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b4bfc:	7883      	ldrb	r3, [r0, #2]
   b4bfe:	075a      	lsls	r2, r3, #29
   b4c00:	d523      	bpl.n	b4c4a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b4c02:	2101      	movs	r1, #1
   b4c04:	f7ff fe52 	bl	b48ac <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b4c08:	4605      	mov	r5, r0
   b4c0a:	b928      	cbnz	r0, b4c18 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b4c0c:	7863      	ldrb	r3, [r4, #1]
   b4c0e:	f043 0301 	orr.w	r3, r3, #1
   b4c12:	7063      	strb	r3, [r4, #1]
  return false;
   b4c14:	2000      	movs	r0, #0
   b4c16:	e7f0      	b.n	b4bfa <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b4c18:	7803      	ldrb	r3, [r0, #0]
   b4c1a:	2be5      	cmp	r3, #229	; 0xe5
   b4c1c:	d0f6      	beq.n	b4c0c <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b4c1e:	7823      	ldrb	r3, [r4, #0]
   b4c20:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b4c22:	bf44      	itt	mi
   b4c24:	69e3      	ldrmi	r3, [r4, #28]
   b4c26:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b4c28:	6a23      	ldr	r3, [r4, #32]
   b4c2a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b4c2c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b4c2e:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b4c30:	4b09      	ldr	r3, [pc, #36]	; (b4c58 <_ZN7FatFile4syncEv+0x68>)
   b4c32:	681b      	ldr	r3, [r3, #0]
   b4c34:	b12b      	cbz	r3, b4c42 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b4c36:	f100 0116 	add.w	r1, r0, #22
   b4c3a:	3018      	adds	r0, #24
   b4c3c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b4c3e:	8b2b      	ldrh	r3, [r5, #24]
   b4c40:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b4c42:	78a3      	ldrb	r3, [r4, #2]
   b4c44:	f023 0304 	bic.w	r3, r3, #4
   b4c48:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b4c4a:	68a0      	ldr	r0, [r4, #8]
   b4c4c:	f7ff fdd8 	bl	b4800 <_ZN9FatVolume9cacheSyncEv>
   b4c50:	2800      	cmp	r0, #0
   b4c52:	d0db      	beq.n	b4c0c <_ZN7FatFile4syncEv+0x1c>
   b4c54:	e7d0      	b.n	b4bf8 <_ZN7FatFile4syncEv+0x8>
   b4c56:	bf00      	nop
   b4c58:	2003e674 	.word	0x2003e674

000b4c5c <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b4c5c:	b510      	push	{r4, lr}
   b4c5e:	4604      	mov	r4, r0
  bool rtn = sync();
   b4c60:	f7ff ffc6 	bl	b4bf0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b4c64:	2300      	movs	r3, #0
   b4c66:	7023      	strb	r3, [r4, #0]
}
   b4c68:	bd10      	pop	{r4, pc}

000b4c6a <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b4c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4c6c:	b093      	sub	sp, #76	; 0x4c
   b4c6e:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4c70:	2300      	movs	r3, #0
   b4c72:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b4c74:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b4c76:	9201      	str	r2, [sp, #4]
   b4c78:	4606      	mov	r6, r0
   b4c7a:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b4c7c:	b113      	cbz	r3, b4c84 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b4c7e:	2000      	movs	r0, #0
}
   b4c80:	b013      	add	sp, #76	; 0x4c
   b4c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b4c84:	780b      	ldrb	r3, [r1, #0]
   b4c86:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4c8a:	d0f8      	beq.n	b4c7e <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b4c8c:	7813      	ldrb	r3, [r2, #0]
   b4c8e:	2b2f      	cmp	r3, #47	; 0x2f
   b4c90:	d112      	bne.n	b4cb8 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b4c92:	9a01      	ldr	r2, [sp, #4]
   b4c94:	7813      	ldrb	r3, [r2, #0]
   b4c96:	2b2f      	cmp	r3, #47	; 0x2f
   b4c98:	d102      	bne.n	b4ca0 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b4c9a:	3201      	adds	r2, #1
   b4c9c:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b4c9e:	e7f8      	b.n	b4c92 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b4ca0:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b4ca2:	b91b      	cbnz	r3, b4cac <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b4ca4:	4630      	mov	r0, r6
   b4ca6:	f7ff fe10 	bl	b48ca <_ZN7FatFile8openRootEP9FatVolume>
   b4caa:	e7e9      	b.n	b4c80 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b4cac:	a809      	add	r0, sp, #36	; 0x24
   b4cae:	f7ff fd91 	bl	b47d4 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b4cb2:	2800      	cmp	r0, #0
   b4cb4:	d0e3      	beq.n	b4c7e <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b4cb6:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b4cb8:	9801      	ldr	r0, [sp, #4]
   b4cba:	aa01      	add	r2, sp, #4
   b4cbc:	a903      	add	r1, sp, #12
   b4cbe:	f000 f90b 	bl	b4ed8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b4cc2:	2800      	cmp	r0, #0
   b4cc4:	d0db      	beq.n	b4c7e <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b4cc6:	9b01      	ldr	r3, [sp, #4]
   b4cc8:	781b      	ldrb	r3, [r3, #0]
   b4cca:	b19b      	cbz	r3, b4cf4 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b4ccc:	2300      	movs	r3, #0
   b4cce:	aa03      	add	r2, sp, #12
   b4cd0:	4621      	mov	r1, r4
   b4cd2:	4630      	mov	r0, r6
   b4cd4:	f000 fa32 	bl	b513c <_ZN7FatFile4openEPS_P7fname_ti>
   b4cd8:	2800      	cmp	r0, #0
   b4cda:	d0d0      	beq.n	b4c7e <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b4cdc:	4635      	mov	r5, r6
   b4cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ce0:	ac09      	add	r4, sp, #36	; 0x24
   b4ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4ce8:	682b      	ldr	r3, [r5, #0]
   b4cea:	6023      	str	r3, [r4, #0]
    close();
   b4cec:	4630      	mov	r0, r6
   b4cee:	f7ff ffb5 	bl	b4c5c <_ZN7FatFile5closeEv>
  while (1) {
   b4cf2:	e7e0      	b.n	b4cb6 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b4cf4:	463b      	mov	r3, r7
   b4cf6:	aa03      	add	r2, sp, #12
   b4cf8:	4621      	mov	r1, r4
   b4cfa:	4630      	mov	r0, r6
   b4cfc:	f000 fa1e 	bl	b513c <_ZN7FatFile4openEPS_P7fname_ti>
   b4d00:	e7be      	b.n	b4c80 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b4d04 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b4d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b4d08:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b4d0a:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b4d0c:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b4d0e:	4604      	mov	r4, r0
   b4d10:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b4d12:	d55b      	bpl.n	b4dcc <_ZN7FatFile5writeEPKvj+0xc8>
   b4d14:	7883      	ldrb	r3, [r0, #2]
   b4d16:	079a      	lsls	r2, r3, #30
   b4d18:	d558      	bpl.n	b4dcc <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b4d1a:	071b      	lsls	r3, r3, #28
   b4d1c:	d451      	bmi.n	b4dc2 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b4d1e:	6963      	ldr	r3, [r4, #20]
   b4d20:	43db      	mvns	r3, r3
   b4d22:	42bb      	cmp	r3, r7
   b4d24:	d352      	bcc.n	b4dcc <_ZN7FatFile5writeEPKvj+0xc8>
   b4d26:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4d28:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b4d2c:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b4d2e:	f1b8 0f00 	cmp.w	r8, #0
   b4d32:	f000 8091 	beq.w	b4e58 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b4d36:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b4d38:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b4d3a:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b4d3e:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b4d42:	d10e      	bne.n	b4d62 <_ZN7FatFile5writeEPKvj+0x5e>
   b4d44:	b96d      	cbnz	r5, b4d62 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b4d46:	6921      	ldr	r1, [r4, #16]
   b4d48:	2900      	cmp	r1, #0
   b4d4a:	d046      	beq.n	b4dda <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4d4c:	4652      	mov	r2, sl
   b4d4e:	f000 fc10 	bl	b5572 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b4d52:	2800      	cmp	r0, #0
   b4d54:	db3a      	blt.n	b4dcc <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b4d56:	d104      	bne.n	b4d62 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b4d58:	4620      	mov	r0, r4
   b4d5a:	f7ff fd5e 	bl	b481a <_ZN7FatFile10addClusterEv>
   b4d5e:	2800      	cmp	r0, #0
   b4d60:	d034      	beq.n	b4dcc <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b4d62:	6921      	ldr	r1, [r4, #16]
   b4d64:	68a0      	ldr	r0, [r4, #8]
   b4d66:	f000 fbfe 	bl	b5566 <_ZNK9FatVolume17clusterFirstBlockEm>
   b4d6a:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b4d6c:	68a0      	ldr	r0, [r4, #8]
   b4d6e:	b915      	cbnz	r5, b4d76 <_ZN7FatFile5writeEPKvj+0x72>
   b4d70:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b4d74:	d23f      	bcs.n	b4df6 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b4d76:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b4d7a:	4546      	cmp	r6, r8
   b4d7c:	bf28      	it	cs
   b4d7e:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b4d80:	2d00      	cmp	r5, #0
   b4d82:	d136      	bne.n	b4df2 <_ZN7FatFile5writeEPKvj+0xee>
   b4d84:	6962      	ldr	r2, [r4, #20]
   b4d86:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b4d88:	429a      	cmp	r2, r3
   b4d8a:	bf34      	ite	cc
   b4d8c:	2201      	movcc	r2, #1
   b4d8e:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b4d90:	3024      	adds	r0, #36	; 0x24
   b4d92:	f000 fbc5 	bl	b5520 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b4d96:	b1c8      	cbz	r0, b4dcc <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b4d98:	4428      	add	r0, r5
   b4d9a:	4632      	mov	r2, r6
   b4d9c:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b4d9e:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b4da0:	f003 f9f8 	bl	b8194 <memcpy>
      if (512 == (n + blockOffset)) {
   b4da4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b4da8:	d104      	bne.n	b4db4 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b4daa:	68a0      	ldr	r0, [r4, #8]
   b4dac:	3024      	adds	r0, #36	; 0x24
   b4dae:	f000 fb8f 	bl	b54d0 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b4db2:	b158      	cbz	r0, b4dcc <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b4db4:	6963      	ldr	r3, [r4, #20]
   b4db6:	4433      	add	r3, r6
   b4db8:	6163      	str	r3, [r4, #20]
    src += n;
   b4dba:	44b1      	add	r9, r6
    nToWrite -= n;
   b4dbc:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b4dc0:	e7b4      	b.n	b4d2c <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b4dc2:	69c1      	ldr	r1, [r0, #28]
   b4dc4:	f7ff fe67 	bl	b4a96 <_ZN7FatFile7seekSetEm>
   b4dc8:	2800      	cmp	r0, #0
   b4dca:	d1a8      	bne.n	b4d1e <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b4dcc:	7863      	ldrb	r3, [r4, #1]
   b4dce:	f043 0301 	orr.w	r3, r3, #1
   b4dd2:	7063      	strb	r3, [r4, #1]
  return -1;
   b4dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4dd8:	e050      	b.n	b4e7c <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b4dda:	6a23      	ldr	r3, [r4, #32]
   b4ddc:	b93b      	cbnz	r3, b4dee <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b4dde:	4620      	mov	r0, r4
   b4de0:	f7ff fd1b 	bl	b481a <_ZN7FatFile10addClusterEv>
   b4de4:	2800      	cmp	r0, #0
   b4de6:	d0f1      	beq.n	b4dcc <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b4de8:	6923      	ldr	r3, [r4, #16]
   b4dea:	6223      	str	r3, [r4, #32]
   b4dec:	e7b9      	b.n	b4d62 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b4dee:	6123      	str	r3, [r4, #16]
   b4df0:	e7b7      	b.n	b4d62 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b4df2:	2201      	movs	r2, #1
   b4df4:	e7cc      	b.n	b4d90 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b4df6:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b4dfa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b4dfc:	d31b      	bcc.n	b4e36 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b4dfe:	f890 c004 	ldrb.w	ip, [r0, #4]
   b4e02:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b4e06:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b4e08:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b4e0c:	4573      	cmp	r3, lr
   b4e0e:	bf28      	it	cs
   b4e10:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4e12:	4291      	cmp	r1, r2
      n = 512*nb;
   b4e14:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4e18:	d307      	bcc.n	b4e2a <_ZN7FatFile5writeEPKvj+0x126>
   b4e1a:	441a      	add	r2, r3
   b4e1c:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b4e1e:	bf82      	ittt	hi
   b4e20:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b4e24:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b4e28:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b4e2a:	68a5      	ldr	r5, [r4, #8]
   b4e2c:	464a      	mov	r2, r9
   b4e2e:	6828      	ldr	r0, [r5, #0]
   b4e30:	f000 ff59 	bl	b5ce6 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b4e34:	e7bd      	b.n	b4db2 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b4e36:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b4e38:	bf02      	ittt	eq
   b4e3a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b4e3e:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b4e42:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b4e44:	68a3      	ldr	r3, [r4, #8]
   b4e46:	464a      	mov	r2, r9
   b4e48:	6818      	ldr	r0, [r3, #0]
   b4e4a:	f000 fed6 	bl	b5bfa <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b4e4e:	2800      	cmp	r0, #0
   b4e50:	d0bc      	beq.n	b4dcc <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b4e52:	f44f 7600 	mov.w	r6, #512	; 0x200
   b4e56:	e7ad      	b.n	b4db4 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b4e58:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b4e5a:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b4e5c:	42b2      	cmp	r2, r6
   b4e5e:	d204      	bcs.n	b4e6a <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b4e60:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b4e62:	f043 0304 	orr.w	r3, r3, #4
   b4e66:	70a3      	strb	r3, [r4, #2]
   b4e68:	e003      	b.n	b4e72 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b4e6a:	4a08      	ldr	r2, [pc, #32]	; (b4e8c <_ZN7FatFile5writeEPKvj+0x188>)
   b4e6c:	6812      	ldr	r2, [r2, #0]
   b4e6e:	2a00      	cmp	r2, #0
   b4e70:	d1f7      	bne.n	b4e62 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b4e72:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b4e76:	2b00      	cmp	r3, #0
   b4e78:	db02      	blt.n	b4e80 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b4e7a:	4638      	mov	r0, r7
}
   b4e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b4e80:	4620      	mov	r0, r4
   b4e82:	f7ff feb5 	bl	b4bf0 <_ZN7FatFile4syncEv>
   b4e86:	2800      	cmp	r0, #0
   b4e88:	d1f7      	bne.n	b4e7a <_ZN7FatFile5writeEPKvj+0x176>
   b4e8a:	e79f      	b.n	b4dcc <_ZN7FatFile5writeEPKvj+0xc8>
   b4e8c:	2003e674 	.word	0x2003e674

000b4e90 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b4e90:	2904      	cmp	r1, #4
   b4e92:	d804      	bhi.n	b4e9e <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b4e94:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b4e98:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b4e9c:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b4e9e:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b4ea0:	bf9b      	ittet	ls
   b4ea2:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b4ea6:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b4eaa:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b4eac:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b4eae:	bf84      	itt	hi
   b4eb0:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b4eb4:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b4eb6:	4770      	bx	lr

000b4eb8 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b4eb8:	1e41      	subs	r1, r0, #1
   b4eba:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b4ebe:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b4ec0:	0842      	lsrs	r2, r0, #1
   b4ec2:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b4ec6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b4eca:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b4ece:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b4ed0:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b4ed2:	d1f5      	bne.n	b4ec0 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b4ed4:	4770      	bx	lr
	...

000b4ed8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b4ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4edc:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b4ede:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4ee2:	2b20      	cmp	r3, #32
   b4ee4:	d0fa      	beq.n	b4edc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b4ee6:	4d6a      	ldr	r5, [pc, #424]	; (b5090 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b4ee8:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b4eea:	2400      	movs	r4, #0
    c = path[len];
   b4eec:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b4eee:	b1c3      	cbz	r3, b4f22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b4ef0:	2b2f      	cmp	r3, #47	; 0x2f
   b4ef2:	d016      	beq.n	b4f22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b4ef4:	2b5c      	cmp	r3, #92	; 0x5c
   b4ef6:	d102      	bne.n	b4efe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b4ef8:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b4efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b4efe:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b4f02:	b2c0      	uxtb	r0, r0
   b4f04:	281d      	cmp	r0, #29
   b4f06:	d803      	bhi.n	b4f10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b4f08:	fa25 f000 	lsr.w	r0, r5, r0
   b4f0c:	07c0      	lsls	r0, r0, #31
   b4f0e:	d4f3      	bmi.n	b4ef8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b4f10:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b4f14:	283c      	cmp	r0, #60	; 0x3c
   b4f16:	d0ef      	beq.n	b4ef8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b4f18:	3b20      	subs	r3, #32
   b4f1a:	2b5e      	cmp	r3, #94	; 0x5e
   b4f1c:	d8ec      	bhi.n	b4ef8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b4f1e:	3401      	adds	r4, #1
    c = path[len];
   b4f20:	e7e4      	b.n	b4eec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b4f22:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b4f24:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b4f26:	4607      	mov	r7, r0
   b4f28:	f810 5b01 	ldrb.w	r5, [r0], #1
   b4f2c:	2d20      	cmp	r5, #32
   b4f2e:	d0fa      	beq.n	b4f26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b4f30:	2d2f      	cmp	r5, #47	; 0x2f
   b4f32:	d0f8      	beq.n	b4f26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b4f34:	6017      	str	r7, [r2, #0]
  while (len) {
   b4f36:	b14c      	cbz	r4, b4f4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b4f38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b4f3c:	2a2e      	cmp	r2, #46	; 0x2e
   b4f3e:	d001      	beq.n	b4f44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b4f40:	2a20      	cmp	r2, #32
   b4f42:	d101      	bne.n	b4f48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b4f44:	3c01      	subs	r4, #1
  while (len) {
   b4f46:	e7f6      	b.n	b4f36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b4f48:	2cff      	cmp	r4, #255	; 0xff
   b4f4a:	dcd5      	bgt.n	b4ef8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b4f4c:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b4f50:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b4f54:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b4f56:	f8c1 300d 	str.w	r3, [r1, #13]
   b4f5a:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b4f5c:	f04f 0800 	mov.w	r8, #0
   b4f60:	f816 3008 	ldrb.w	r3, [r6, r8]
   b4f64:	2b2e      	cmp	r3, #46	; 0x2e
   b4f66:	d001      	beq.n	b4f6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b4f68:	2b20      	cmp	r3, #32
   b4f6a:	d102      	bne.n	b4f72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b4f6c:	f108 0801 	add.w	r8, r8, #1
   b4f70:	e7f6      	b.n	b4f60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b4f72:	fab8 f088 	clz	r0, r8
   b4f76:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b4f78:	1e65      	subs	r5, r4, #1
   b4f7a:	1c6b      	adds	r3, r5, #1
   b4f7c:	d002      	beq.n	b4f84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b4f7e:	5d73      	ldrb	r3, [r6, r5]
   b4f80:	2b2e      	cmp	r3, #46	; 0x2e
   b4f82:	d114      	bne.n	b4fae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b4f84:	f04f 0900 	mov.w	r9, #0
   b4f88:	2707      	movs	r7, #7
   b4f8a:	464a      	mov	r2, r9
   b4f8c:	46ca      	mov	sl, r9
   b4f8e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b4f92:	45a0      	cmp	r8, r4
   b4f94:	da68      	bge.n	b5068 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b4f96:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b4f9a:	2b20      	cmp	r3, #32
   b4f9c:	d003      	beq.n	b4fa6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b4f9e:	2b2e      	cmp	r3, #46	; 0x2e
   b4fa0:	d107      	bne.n	b4fb2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b4fa2:	45a8      	cmp	r8, r5
   b4fa4:	d012      	beq.n	b4fcc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b4fa6:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b4fa8:	f108 0801 	add.w	r8, r8, #1
   b4fac:	e7f1      	b.n	b4f92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b4fae:	3d01      	subs	r5, #1
   b4fb0:	e7e3      	b.n	b4f7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b4fb2:	2b22      	cmp	r3, #34	; 0x22
   b4fb4:	d008      	beq.n	b4fc8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b4fb6:	2b7c      	cmp	r3, #124	; 0x7c
   b4fb8:	d006      	beq.n	b4fc8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b4fba:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b4fbe:	f1bc 0f05 	cmp.w	ip, #5
   b4fc2:	d80a      	bhi.n	b4fda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b4fc4:	2b2d      	cmp	r3, #45	; 0x2d
   b4fc6:	d012      	beq.n	b4fee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b4fc8:	45a8      	cmp	r8, r5
   b4fca:	d15b      	bne.n	b5084 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b4fcc:	2f0a      	cmp	r7, #10
   b4fce:	d04a      	beq.n	b5066 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b4fd0:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b4fd2:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b4fd4:	f04f 0e10 	mov.w	lr, #16
   b4fd8:	e7e6      	b.n	b4fa8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b4fda:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b4fde:	f1bc 0f05 	cmp.w	ip, #5
   b4fe2:	d9f1      	bls.n	b4fc8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b4fe4:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b4fe8:	f1bc 0f02 	cmp.w	ip, #2
   b4fec:	d9ec      	bls.n	b4fc8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b4fee:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b4ff2:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b4ff6:	d8e7      	bhi.n	b4fc8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b4ff8:	45a8      	cmp	r8, r5
   b4ffa:	d0e7      	beq.n	b4fcc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b4ffc:	42ba      	cmp	r2, r7
   b4ffe:	d830      	bhi.n	b5062 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b5000:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5004:	f1bc 0f19 	cmp.w	ip, #25
   b5008:	d81a      	bhi.n	b5040 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b500a:	3b20      	subs	r3, #32
        lc |= bit;
   b500c:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b5010:	b2db      	uxtb	r3, r3
        lc |= bit;
   b5012:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b5016:	f102 0c01 	add.w	ip, r2, #1
   b501a:	fa5f fc8c 	uxtb.w	ip, ip
   b501e:	440a      	add	r2, r1
      if (i < 7) {
   b5020:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b5024:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b5026:	d801      	bhi.n	b502c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b5028:	f881 c00c 	strb.w	ip, [r1, #12]
   b502c:	4662      	mov	r2, ip
   b502e:	e7bb      	b.n	b4fa8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b5030:	45a8      	cmp	r8, r5
   b5032:	dc18      	bgt.n	b5066 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b5034:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b5036:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5038:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b503a:	f04f 0e10 	mov.w	lr, #16
   b503e:	e7b2      	b.n	b4fa6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b5040:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b5044:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b5048:	bf98      	it	ls
   b504a:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b504e:	e7e2      	b.n	b5016 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b5050:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b5052:	2001      	movs	r0, #1
   b5054:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b5056:	4419      	add	r1, r3
   b5058:	237e      	movs	r3, #126	; 0x7e
   b505a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b505c:	2331      	movs	r3, #49	; 0x31
   b505e:	738b      	strb	r3, [r1, #14]
   b5060:	e74b      	b.n	b4efa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b5062:	2f0a      	cmp	r7, #10
   b5064:	d1e4      	bne.n	b5030 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b5066:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b5068:	7b4b      	ldrb	r3, [r1, #13]
   b506a:	2b20      	cmp	r3, #32
   b506c:	f43f af44 	beq.w	b4ef8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b5070:	2800      	cmp	r0, #0
   b5072:	d0ed      	beq.n	b5050 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b5074:	ea1a 0f09 	tst.w	sl, r9
   b5078:	bf18      	it	ne
   b507a:	f04f 0902 	movne.w	r9, #2
   b507e:	f881 9000 	strb.w	r9, [r1]
   b5082:	e73a      	b.n	b4efa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b5084:	42ba      	cmp	r2, r7
   b5086:	d8ec      	bhi.n	b5062 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b5088:	2000      	movs	r0, #0
      c = '_';
   b508a:	235f      	movs	r3, #95	; 0x5f
   b508c:	e7c3      	b.n	b5016 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b508e:	bf00      	nop
   b5090:	31000101 	.word	0x31000101

000b5094 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b5098:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b509c:	4606      	mov	r6, r0
   b509e:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b50a0:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b50a2:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b50a4:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b50a8:	6861      	ldr	r1, [r4, #4]
   b50aa:	68a2      	ldr	r2, [r4, #8]
   b50ac:	186b      	adds	r3, r5, r1
   b50ae:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b50b0:	4411      	add	r1, r2
   b50b2:	4291      	cmp	r1, r2
   b50b4:	d006      	beq.n	b50c4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b50b6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b50ba:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b50be:	4043      	eors	r3, r0
   b50c0:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b50c2:	e7f6      	b.n	b50b2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b50c4:	f1b9 0f03 	cmp.w	r9, #3
   b50c8:	bf28      	it	cs
   b50ca:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b50ce:	f109 0204 	add.w	r2, r9, #4
   b50d2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b50d4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b50d8:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b50da:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b50dc:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b50de:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b50e0:	bf94      	ite	ls
   b50e2:	3130      	addls	r1, #48	; 0x30
   b50e4:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b50e6:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b50e8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b50ea:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b50ee:	d1f1      	bne.n	b50d4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b50f0:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b50f4:	2100      	movs	r1, #0
   b50f6:	735f      	strb	r7, [r3, #13]
   b50f8:	4630      	mov	r0, r6
   b50fa:	f7ff fccc 	bl	b4a96 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b50fe:	2101      	movs	r1, #1
   b5100:	4630      	mov	r0, r6
   b5102:	f7ff fca9 	bl	b4a58 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b5106:	4601      	mov	r1, r0
   b5108:	b928      	cbnz	r0, b5116 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b510a:	7870      	ldrb	r0, [r6, #1]
   b510c:	fab0 f080 	clz	r0, r0
   b5110:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b5112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b5116:	7803      	ldrb	r3, [r0, #0]
   b5118:	b16b      	cbz	r3, b5136 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b511a:	7ac3      	ldrb	r3, [r0, #11]
   b511c:	071b      	lsls	r3, r3, #28
   b511e:	d4ee      	bmi.n	b50fe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b5120:	220b      	movs	r2, #11
   b5122:	4640      	mov	r0, r8
   b5124:	f003 f826 	bl	b8174 <memcmp>
   b5128:	2800      	cmp	r0, #0
   b512a:	d1e8      	bne.n	b50fe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b512c:	3501      	adds	r5, #1
   b512e:	b2ad      	uxth	r5, r5
   b5130:	2d64      	cmp	r5, #100	; 0x64
   b5132:	d1b9      	bne.n	b50a8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b5134:	e7ed      	b.n	b5112 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b5136:	2001      	movs	r0, #1
   b5138:	e7eb      	b.n	b5112 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b513c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5140:	ed2d 8b02 	vpush	{d8}
   b5144:	b08b      	sub	sp, #44	; 0x2c
   b5146:	460d      	mov	r5, r1
   b5148:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b514a:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b514c:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b514e:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5152:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b5154:	d105      	bne.n	b5162 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b5156:	2000      	movs	r0, #0
}
   b5158:	b00b      	add	sp, #44	; 0x2c
   b515a:	ecbd 8b02 	vpop	{d8}
   b515e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b5162:	9b07      	ldr	r3, [sp, #28]
   b5164:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b5166:	2b00      	cmp	r3, #0
   b5168:	d1f5      	bne.n	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b516a:	6853      	ldr	r3, [r2, #4]
   b516c:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b516e:	7813      	ldrb	r3, [r2, #0]
   b5170:	079c      	lsls	r4, r3, #30
   b5172:	bf1f      	itttt	ne
   b5174:	9b05      	ldrne	r3, [sp, #20]
   b5176:	330c      	addne	r3, #12
   b5178:	220d      	movne	r2, #13
   b517a:	fbb3 f3f2 	udivne	r3, r3, r2
   b517e:	bf1a      	itte	ne
   b5180:	3301      	addne	r3, #1
   b5182:	b2db      	uxtbne	r3, r3
   b5184:	2301      	moveq	r3, #1
    seekSet(0);
   b5186:	2100      	movs	r1, #0
   b5188:	4628      	mov	r0, r5
   b518a:	9303      	str	r3, [sp, #12]
   b518c:	f7ff fc83 	bl	b4a96 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5190:	f107 030d 	add.w	r3, r7, #13
  }
   b5194:	f04f 0b00 	mov.w	fp, #0
   b5198:	ee08 3a10 	vmov	s16, r3
   b519c:	46da      	mov	sl, fp
   b519e:	465c      	mov	r4, fp
   b51a0:	465e      	mov	r6, fp
   b51a2:	f8cd b010 	str.w	fp, [sp, #16]
   b51a6:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b51a8:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b51aa:	2101      	movs	r1, #1
   b51ac:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b51ae:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b51b2:	f7ff fc51 	bl	b4a58 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b51b6:	4603      	mov	r3, r0
   b51b8:	2800      	cmp	r0, #0
   b51ba:	d171      	bne.n	b52a0 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b51bc:	786b      	ldrb	r3, [r5, #1]
   b51be:	2b00      	cmp	r3, #0
   b51c0:	d1c9      	bne.n	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b51c2:	9b06      	ldr	r3, [sp, #24]
   b51c4:	059a      	lsls	r2, r3, #22
   b51c6:	d5c6      	bpl.n	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b51c8:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b51cc:	3b01      	subs	r3, #1
   b51ce:	2b01      	cmp	r3, #1
   b51d0:	d8c1      	bhi.n	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b51d2:	9b04      	ldr	r3, [sp, #16]
   b51d4:	2c00      	cmp	r4, #0
   b51d6:	bf08      	it	eq
   b51d8:	4643      	moveq	r3, r8
   b51da:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b51dc:	9b03      	ldr	r3, [sp, #12]
   b51de:	429c      	cmp	r4, r3
   b51e0:	f0c0 80f1 	bcc.w	b53c6 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b51e4:	f1b9 0f00 	cmp.w	r9, #0
   b51e8:	f040 810a 	bne.w	b5400 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b51ec:	9b04      	ldr	r3, [sp, #16]
   b51ee:	4628      	mov	r0, r5
   b51f0:	0159      	lsls	r1, r3, #5
   b51f2:	f7ff fc50 	bl	b4a96 <_ZN7FatFile7seekSetEm>
   b51f6:	2800      	cmp	r0, #0
   b51f8:	d0ad      	beq.n	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b51fa:	9b03      	ldr	r3, [sp, #12]
   b51fc:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b5200:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5204:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b5206:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b520a:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b520e:	2e00      	cmp	r6, #0
   b5210:	f000 810d 	beq.w	b542e <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b5214:	2100      	movs	r1, #0
   b5216:	4628      	mov	r0, r5
   b5218:	f7ff fc1e 	bl	b4a58 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b521c:	4604      	mov	r4, r0
   b521e:	2800      	cmp	r0, #0
   b5220:	d099      	beq.n	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b5222:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b5224:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b5228:	454e      	cmp	r6, r9
   b522a:	f043 0301 	orr.w	r3, r3, #1
   b522e:	bf0c      	ite	eq
   b5230:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b5234:	46b3      	movne	fp, r6
   b5236:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b523a:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b523e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b5242:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b5246:	f107 000d 	add.w	r0, r7, #13
   b524a:	f7ff fe35 	bl	b4eb8 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b524e:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b5252:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b5254:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5258:	f00b 031f 	and.w	r3, fp, #31
   b525c:	220d      	movs	r2, #13
   b525e:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b5260:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5264:	4353      	muls	r3, r2
   b5266:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b5268:	9905      	ldr	r1, [sp, #20]
   b526a:	4299      	cmp	r1, r3
   b526c:	f240 80d0 	bls.w	b5410 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b5270:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b5274:	2a04      	cmp	r2, #4
   b5276:	fa5f fe82 	uxtb.w	lr, r2
   b527a:	f102 0001 	add.w	r0, r2, #1
   b527e:	f200 80cd 	bhi.w	b541c <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b5282:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b5286:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b528a:	280d      	cmp	r0, #13
   b528c:	f103 0301 	add.w	r3, r3, #1
   b5290:	4602      	mov	r2, r0
   b5292:	d1e9      	bne.n	b5268 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5294:	3e01      	subs	r6, #1
   b5296:	b2f6      	uxtb	r6, r6
   b5298:	e7b9      	b.n	b520e <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b529a:	f04f 0901 	mov.w	r9, #1
   b529e:	e783      	b.n	b51a8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b52a0:	7802      	ldrb	r2, [r0, #0]
   b52a2:	2ae5      	cmp	r2, #229	; 0xe5
   b52a4:	d000      	beq.n	b52a8 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b52a6:	b97a      	cbnz	r2, b52c8 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b52a8:	9904      	ldr	r1, [sp, #16]
   b52aa:	2c00      	cmp	r4, #0
   b52ac:	bf08      	it	eq
   b52ae:	4641      	moveq	r1, r8
   b52b0:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b52b2:	9903      	ldr	r1, [sp, #12]
   b52b4:	428c      	cmp	r4, r1
        freeFound++;
   b52b6:	bf3c      	itt	cc
   b52b8:	3401      	addcc	r4, #1
   b52ba:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b52bc:	2a00      	cmp	r2, #0
   b52be:	d080      	beq.n	b51c2 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b52c0:	2ae5      	cmp	r2, #229	; 0xe5
   b52c2:	d105      	bne.n	b52d0 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b52c4:	2600      	movs	r6, #0
   b52c6:	e76f      	b.n	b51a8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b52c8:	9903      	ldr	r1, [sp, #12]
   b52ca:	428c      	cmp	r4, r1
   b52cc:	bf38      	it	cc
   b52ce:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b52d0:	2a2e      	cmp	r2, #46	; 0x2e
   b52d2:	d0f7      	beq.n	b52c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b52d4:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b52d6:	290f      	cmp	r1, #15
   b52d8:	d14a      	bne.n	b5370 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b52da:	bb16      	cbnz	r6, b5322 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b52dc:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b52e0:	f43f af62 	beq.w	b51a8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b52e4:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b52e8:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b52ec:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b52ee:	220d      	movs	r2, #13
   b52f0:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b52f4:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b52f8:	9a05      	ldr	r2, [sp, #20]
   b52fa:	4542      	cmp	r2, r8
   b52fc:	d9e2      	bls.n	b52c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b52fe:	eba2 0208 	sub.w	r2, r2, r8
   b5302:	9208      	str	r2, [sp, #32]
   b5304:	2200      	movs	r2, #0
   b5306:	eb02 0108 	add.w	r1, r2, r8
   b530a:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b530c:	4618      	mov	r0, r3
   b530e:	b2d1      	uxtb	r1, r2
   b5310:	f7ff fdbe 	bl	b4e90 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b5314:	9908      	ldr	r1, [sp, #32]
   b5316:	428a      	cmp	r2, r1
   b5318:	d10d      	bne.n	b5336 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b531a:	2800      	cmp	r0, #0
   b531c:	bf18      	it	ne
   b531e:	2600      	movne	r6, #0
   b5320:	e742      	b.n	b51a8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b5322:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b5326:	fa5f fa8a 	uxtb.w	sl, sl
   b532a:	4552      	cmp	r2, sl
   b532c:	d1ca      	bne.n	b52c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b532e:	7b5a      	ldrb	r2, [r3, #13]
   b5330:	455a      	cmp	r2, fp
   b5332:	d0dc      	beq.n	b52ee <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b5334:	e7c6      	b.n	b52c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5336:	28ff      	cmp	r0, #255	; 0xff
   b5338:	d8c4      	bhi.n	b52c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b533a:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b533e:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b5342:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5344:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b5346:	bf9c      	itt	ls
   b5348:	f10e 0020 	addls.w	r0, lr, #32
   b534c:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5350:	4608      	mov	r0, r1
   b5352:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5354:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b5356:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b535a:	f1bc 0f19 	cmp.w	ip, #25
   b535e:	bf9c      	itt	ls
   b5360:	3120      	addls	r1, #32
   b5362:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5364:	4571      	cmp	r1, lr
   b5366:	d1ad      	bne.n	b52c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b5368:	3201      	adds	r2, #1
   b536a:	2a0d      	cmp	r2, #13
   b536c:	d1cb      	bne.n	b5306 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b536e:	e71b      	b.n	b51a8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b5370:	0708      	lsls	r0, r1, #28
   b5372:	d4a7      	bmi.n	b52c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b5374:	b15e      	cbz	r6, b538e <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b5376:	f1ba 0f01 	cmp.w	sl, #1
   b537a:	f47f aeec 	bne.w	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b537e:	4618      	mov	r0, r3
   b5380:	f7ff fd9a 	bl	b4eb8 <_ZN7FatFile11lfnChecksumEPh>
   b5384:	4558      	cmp	r0, fp
   b5386:	f47f aee6 	bne.w	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b538a:	46b1      	mov	r9, r6
   b538c:	e00e      	b.n	b53ac <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b538e:	ee18 1a10 	vmov	r1, s16
   b5392:	220b      	movs	r2, #11
   b5394:	4618      	mov	r0, r3
   b5396:	f002 feed 	bl	b8174 <memcmp>
   b539a:	2800      	cmp	r0, #0
   b539c:	f47f af04 	bne.w	b51a8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b53a0:	f897 9000 	ldrb.w	r9, [r7]
   b53a4:	f019 0901 	ands.w	r9, r9, #1
   b53a8:	f47f af77 	bne.w	b529a <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b53ac:	9b06      	ldr	r3, [sp, #24]
   b53ae:	0519      	lsls	r1, r3, #20
   b53b0:	f53f aed1 	bmi.w	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b53b4:	9b06      	ldr	r3, [sp, #24]
   b53b6:	9807      	ldr	r0, [sp, #28]
   b53b8:	f8cd 9000 	str.w	r9, [sp]
   b53bc:	4642      	mov	r2, r8
   b53be:	4629      	mov	r1, r5
   b53c0:	f7ff fbac 	bl	b4b1c <_ZN7FatFile15openCachedEntryEPS_tih>
   b53c4:	e6c8      	b.n	b5158 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b53c6:	2100      	movs	r1, #0
   b53c8:	4628      	mov	r0, r5
   b53ca:	f7ff fb45 	bl	b4a58 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b53ce:	b9a0      	cbnz	r0, b53fa <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b53d0:	786b      	ldrb	r3, [r5, #1]
   b53d2:	2b00      	cmp	r3, #0
   b53d4:	f47f aebf 	bne.w	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b53d8:	4628      	mov	r0, r5
   b53da:	f7ff fa29 	bl	b4830 <_ZN7FatFile13addDirClusterEv>
   b53de:	2800      	cmp	r0, #0
   b53e0:	f43f aeb9 	beq.w	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b53e4:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b53e6:	791b      	ldrb	r3, [r3, #4]
   b53e8:	2b01      	cmp	r3, #1
   b53ea:	f63f aefb 	bhi.w	b51e4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b53ee:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b53f0:	3410      	adds	r4, #16
   b53f2:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b53f4:	42a3      	cmp	r3, r4
   b53f6:	d8ef      	bhi.n	b53d8 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b53f8:	e6f4      	b.n	b51e4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b53fa:	3401      	adds	r4, #1
   b53fc:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b53fe:	e6ed      	b.n	b51dc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b5400:	4639      	mov	r1, r7
   b5402:	4628      	mov	r0, r5
   b5404:	f7ff fe46 	bl	b5094 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b5408:	2800      	cmp	r0, #0
   b540a:	f47f aeef 	bne.w	b51ec <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b540e:	e6a2      	b.n	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b5410:	bf14      	ite	ne
   b5412:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b5416:	2100      	moveq	r1, #0
   b5418:	b289      	uxth	r1, r1
   b541a:	e72b      	b.n	b5274 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b541c:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b5420:	bf94      	ite	ls
   b5422:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b5426:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b542a:	8091      	strh	r1, [r2, #4]
   b542c:	e72d      	b.n	b528a <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b542e:	4631      	mov	r1, r6
   b5430:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b5432:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b5436:	f7ff fb0f 	bl	b4a58 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b543a:	4604      	mov	r4, r0
   b543c:	2800      	cmp	r0, #0
   b543e:	f43f ae8a 	beq.w	b5156 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b5442:	2220      	movs	r2, #32
   b5444:	4631      	mov	r1, r6
   b5446:	f002 feb3 	bl	b81b0 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b544a:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b544e:	6023      	str	r3, [r4, #0]
   b5450:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b5454:	6063      	str	r3, [r4, #4]
   b5456:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b545a:	8123      	strh	r3, [r4, #8]
   b545c:	7dfb      	ldrb	r3, [r7, #23]
   b545e:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b5460:	783b      	ldrb	r3, [r7, #0]
   b5462:	f003 0318 	and.w	r3, r3, #24
   b5466:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b5468:	4b0f      	ldr	r3, [pc, #60]	; (b54a8 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b546a:	681b      	ldr	r3, [r3, #0]
   b546c:	b19b      	cbz	r3, b5496 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b546e:	f104 010e 	add.w	r1, r4, #14
   b5472:	f104 0010 	add.w	r0, r4, #16
   b5476:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b5478:	8a23      	ldrh	r3, [r4, #16]
   b547a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b547c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b547e:	89e3      	ldrh	r3, [r4, #14]
   b5480:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b5482:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b5484:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b5488:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b548c:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b5490:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b5494:	e78e      	b.n	b53b4 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b5496:	2321      	movs	r3, #33	; 0x21
   b5498:	7423      	strb	r3, [r4, #16]
   b549a:	2328      	movs	r3, #40	; 0x28
   b549c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b549e:	2308      	movs	r3, #8
   b54a0:	73a6      	strb	r6, [r4, #14]
   b54a2:	73e3      	strb	r3, [r4, #15]
   b54a4:	e7e8      	b.n	b5478 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b54a6:	bf00      	nop
   b54a8:	2003e674 	.word	0x2003e674

000b54ac <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b54ac:	b513      	push	{r0, r1, r4, lr}
   b54ae:	4604      	mov	r4, r0
    }
   b54b0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b54b2:	b159      	cbz	r1, b54cc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b54b4:	9101      	str	r1, [sp, #4]
   b54b6:	f002 fece 	bl	b8256 <strlen>
   b54ba:	6823      	ldr	r3, [r4, #0]
   b54bc:	9901      	ldr	r1, [sp, #4]
   b54be:	68db      	ldr	r3, [r3, #12]
   b54c0:	4602      	mov	r2, r0
   b54c2:	4620      	mov	r0, r4
    }
   b54c4:	b002      	add	sp, #8
   b54c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b54ca:	4718      	bx	r3
    }
   b54cc:	b002      	add	sp, #8
   b54ce:	bd10      	pop	{r4, pc}

000b54d0 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b54d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b54d2:	7803      	ldrb	r3, [r0, #0]
   b54d4:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b54d6:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b54d8:	d520      	bpl.n	b551c <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b54da:	6843      	ldr	r3, [r0, #4]
   b54dc:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b54de:	f100 020c 	add.w	r2, r0, #12
   b54e2:	6818      	ldr	r0, [r3, #0]
   b54e4:	9201      	str	r2, [sp, #4]
   b54e6:	f000 fb88 	bl	b5bfa <_ZN9SdSpiCard10writeBlockEmPKh>
   b54ea:	9a01      	ldr	r2, [sp, #4]
   b54ec:	4605      	mov	r5, r0
   b54ee:	b918      	cbnz	r0, b54f8 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b54f0:	2500      	movs	r5, #0
}
   b54f2:	4628      	mov	r0, r5
   b54f4:	b003      	add	sp, #12
   b54f6:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b54f8:	7823      	ldrb	r3, [r4, #0]
   b54fa:	079b      	lsls	r3, r3, #30
   b54fc:	d404      	bmi.n	b5508 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b54fe:	7823      	ldrb	r3, [r4, #0]
   b5500:	f023 0301 	bic.w	r3, r3, #1
   b5504:	7023      	strb	r3, [r4, #0]
   b5506:	e7f4      	b.n	b54f2 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b5508:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b550c:	6919      	ldr	r1, [r3, #16]
   b550e:	4401      	add	r1, r0
   b5510:	6818      	ldr	r0, [r3, #0]
   b5512:	f000 fb72 	bl	b5bfa <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b5516:	2800      	cmp	r0, #0
   b5518:	d1f1      	bne.n	b54fe <_ZN8FatCache4syncEv+0x2e>
   b551a:	e7e9      	b.n	b54f0 <_ZN8FatCache4syncEv+0x20>
  return true;
   b551c:	2501      	movs	r5, #1
   b551e:	e7e8      	b.n	b54f2 <_ZN8FatCache4syncEv+0x22>

000b5520 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b5520:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b5522:	6883      	ldr	r3, [r0, #8]
   b5524:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b5526:	4604      	mov	r4, r0
   b5528:	460e      	mov	r6, r1
   b552a:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b552c:	d009      	beq.n	b5542 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b552e:	f7ff ffcf 	bl	b54d0 <_ZN8FatCache4syncEv>
   b5532:	b908      	cbnz	r0, b5538 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b5534:	2000      	movs	r0, #0
}
   b5536:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b5538:	076b      	lsls	r3, r5, #29
   b553a:	d50a      	bpl.n	b5552 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b553c:	2300      	movs	r3, #0
   b553e:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b5540:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b5542:	7822      	ldrb	r2, [r4, #0]
   b5544:	f005 0503 	and.w	r5, r5, #3
   b5548:	4620      	mov	r0, r4
   b554a:	4315      	orrs	r5, r2
   b554c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b5550:	e7f1      	b.n	b5536 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b5552:	6863      	ldr	r3, [r4, #4]
   b5554:	f104 020c 	add.w	r2, r4, #12
   b5558:	6818      	ldr	r0, [r3, #0]
   b555a:	4631      	mov	r1, r6
   b555c:	f000 fac4 	bl	b5ae8 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b5560:	2800      	cmp	r0, #0
   b5562:	d1eb      	bne.n	b553c <_ZN8FatCache4readEmh+0x1c>
   b5564:	e7e6      	b.n	b5534 <_ZN8FatCache4readEmh+0x14>

000b5566 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b5566:	7983      	ldrb	r3, [r0, #6]
   b5568:	6940      	ldr	r0, [r0, #20]
   b556a:	3902      	subs	r1, #2
   b556c:	4099      	lsls	r1, r3
}
   b556e:	4408      	add	r0, r1
   b5570:	4770      	bx	lr

000b5572 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b5572:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b5574:	b570      	push	{r4, r5, r6, lr}
   b5576:	4605      	mov	r5, r0
   b5578:	460c      	mov	r4, r1
   b557a:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b557c:	d802      	bhi.n	b5584 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b557e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b5582:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b5584:	69c3      	ldr	r3, [r0, #28]
   b5586:	428b      	cmp	r3, r1
   b5588:	d3f9      	bcc.n	b557e <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b558a:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b558c:	2b20      	cmp	r3, #32
   b558e:	d116      	bne.n	b55be <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b5590:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b5592:	2202      	movs	r2, #2
   b5594:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b5598:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b559c:	f7ff ffc0 	bl	b5520 <_ZN8FatCache4readEmh>
    if (!pc) {
   b55a0:	2800      	cmp	r0, #0
   b55a2:	d0ec      	beq.n	b557e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b55a4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b55a8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b55ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b55b0:	69ea      	ldr	r2, [r5, #28]
   b55b2:	429a      	cmp	r2, r3
  *value = next;
   b55b4:	bf26      	itte	cs
   b55b6:	6033      	strcs	r3, [r6, #0]
  return 1;
   b55b8:	2001      	movcs	r0, #1
    return 0;
   b55ba:	2000      	movcc	r0, #0
   b55bc:	e7e1      	b.n	b5582 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b55be:	2b10      	cmp	r3, #16
   b55c0:	d1dd      	bne.n	b557e <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b55c2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b55c6:	6981      	ldr	r1, [r0, #24]
   b55c8:	2202      	movs	r2, #2
   b55ca:	4419      	add	r1, r3
   b55cc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b55d0:	f7ff ffa6 	bl	b5520 <_ZN8FatCache4readEmh>
    if (!pc) {
   b55d4:	2800      	cmp	r0, #0
   b55d6:	d0d2      	beq.n	b557e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b55d8:	b2e4      	uxtb	r4, r4
   b55da:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b55de:	e7e7      	b.n	b55b0 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b55e0 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b55e0:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b55e2:	b538      	push	{r3, r4, r5, lr}
   b55e4:	460c      	mov	r4, r1
   b55e6:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b55e8:	d801      	bhi.n	b55ee <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b55ea:	2000      	movs	r0, #0
}
   b55ec:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b55ee:	69c3      	ldr	r3, [r0, #28]
   b55f0:	428b      	cmp	r3, r1
   b55f2:	d3fa      	bcc.n	b55ea <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b55f4:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b55f6:	2b20      	cmp	r3, #32
   b55f8:	d10f      	bne.n	b561a <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b55fa:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b55fc:	2203      	movs	r2, #3
   b55fe:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b5602:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5606:	f7ff ff8b 	bl	b5520 <_ZN8FatCache4readEmh>
    if (!pc) {
   b560a:	2800      	cmp	r0, #0
   b560c:	d0ed      	beq.n	b55ea <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b560e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b5612:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b5616:	2001      	movs	r0, #1
   b5618:	e7e8      	b.n	b55ec <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b561a:	2b10      	cmp	r3, #16
   b561c:	d1e5      	bne.n	b55ea <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b561e:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b5622:	6981      	ldr	r1, [r0, #24]
   b5624:	2203      	movs	r2, #3
   b5626:	4419      	add	r1, r3
   b5628:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b562c:	f7ff ff78 	bl	b5520 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5630:	2800      	cmp	r0, #0
   b5632:	d0da      	beq.n	b55ea <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b5634:	b2e4      	uxtb	r4, r4
   b5636:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b563a:	e7ec      	b.n	b5616 <_ZN9FatVolume6fatPutEmm+0x36>

000b563c <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b563c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b5640:	68c4      	ldr	r4, [r0, #12]
   b5642:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b5644:	4605      	mov	r5, r0
   b5646:	460e      	mov	r6, r1
   b5648:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b564a:	d301      	bcc.n	b5650 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b564c:	2701      	movs	r7, #1
   b564e:	e001      	b.n	b5654 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b5650:	460c      	mov	r4, r1
    setStart = false;
   b5652:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b5654:	69eb      	ldr	r3, [r5, #28]
    find++;
   b5656:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b5658:	42a3      	cmp	r3, r4
   b565a:	d202      	bcs.n	b5662 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b565c:	b9c7      	cbnz	r7, b5690 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b565e:	68ec      	ldr	r4, [r5, #12]
   b5660:	e7f4      	b.n	b564c <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b5662:	42a6      	cmp	r6, r4
   b5664:	d014      	beq.n	b5690 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b5666:	aa01      	add	r2, sp, #4
   b5668:	4621      	mov	r1, r4
   b566a:	4628      	mov	r0, r5
   b566c:	f7ff ff81 	bl	b5572 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b5670:	2800      	cmp	r0, #0
   b5672:	db0d      	blt.n	b5690 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b5674:	d0ee      	beq.n	b5654 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b5676:	9b01      	ldr	r3, [sp, #4]
   b5678:	2b00      	cmp	r3, #0
   b567a:	d1eb      	bne.n	b5654 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b567c:	b107      	cbz	r7, b5680 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b567e:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b5680:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b5684:	4621      	mov	r1, r4
   b5686:	4628      	mov	r0, r5
   b5688:	f7ff ffaa 	bl	b55e0 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b568c:	4607      	mov	r7, r0
   b568e:	b920      	cbnz	r0, b569a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b5690:	2700      	movs	r7, #0
}
   b5692:	4638      	mov	r0, r7
   b5694:	b002      	add	sp, #8
   b5696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b569a:	b916      	cbnz	r6, b56a2 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b569c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b56a0:	e7f7      	b.n	b5692 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b56a2:	4622      	mov	r2, r4
   b56a4:	4631      	mov	r1, r6
   b56a6:	4628      	mov	r0, r5
   b56a8:	f7ff ff9a 	bl	b55e0 <_ZN9FatVolume6fatPutEmm>
   b56ac:	2800      	cmp	r0, #0
   b56ae:	d1f5      	bne.n	b569c <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b56b0:	e7ee      	b.n	b5690 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b56b2 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b56b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b56b4:	4605      	mov	r5, r0
   b56b6:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b56b8:	aa01      	add	r2, sp, #4
   b56ba:	4621      	mov	r1, r4
   b56bc:	4628      	mov	r0, r5
   b56be:	f7ff ff58 	bl	b5572 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b56c2:	1e06      	subs	r6, r0, #0
   b56c4:	db10      	blt.n	b56e8 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b56c6:	2200      	movs	r2, #0
   b56c8:	4621      	mov	r1, r4
   b56ca:	4628      	mov	r0, r5
   b56cc:	f7ff ff88 	bl	b55e0 <_ZN9FatVolume6fatPutEmm>
   b56d0:	b150      	cbz	r0, b56e8 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b56d2:	68eb      	ldr	r3, [r5, #12]
   b56d4:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b56d6:	bf24      	itt	cs
   b56d8:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b56dc:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b56de:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b56e0:	2e00      	cmp	r6, #0
   b56e2:	d1e9      	bne.n	b56b8 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b56e4:	b002      	add	sp, #8
   b56e6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b56e8:	2000      	movs	r0, #0
   b56ea:	e7fb      	b.n	b56e4 <_ZN9FatVolume9freeChainEm+0x32>

000b56ec <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b56ec:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b56ee:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b56f0:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b56f2:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b56f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b56f8:	4604      	mov	r4, r0
  m_fatType = 0;
   b56fa:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b56fc:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b5700:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b5702:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b5706:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b5708:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b570c:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b5710:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b5714:	460d      	mov	r5, r1
   b5716:	b1b9      	cbz	r1, b5748 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b5718:	2904      	cmp	r1, #4
   b571a:	d901      	bls.n	b5720 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b571c:	2000      	movs	r0, #0
}
   b571e:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b5720:	4611      	mov	r1, r2
   b5722:	4630      	mov	r0, r6
   b5724:	f7ff fefc 	bl	b5520 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5728:	2800      	cmp	r0, #0
   b572a:	d0f7      	beq.n	b571c <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b572c:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b5730:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b5734:	065b      	lsls	r3, r3, #25
   b5736:	d1f1      	bne.n	b571c <_ZN9FatVolume4initEh+0x30>
   b5738:	f105 011b 	add.w	r1, r5, #27
   b573c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b5740:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b5744:	2d00      	cmp	r5, #0
   b5746:	d0e9      	beq.n	b571c <_ZN9FatVolume4initEh+0x30>
   b5748:	2200      	movs	r2, #0
   b574a:	4629      	mov	r1, r5
   b574c:	4630      	mov	r0, r6
   b574e:	f7ff fee7 	bl	b5520 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5752:	2800      	cmp	r0, #0
   b5754:	d0e2      	beq.n	b571c <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b5756:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b575a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b575e:	d1dd      	bne.n	b571c <_ZN9FatVolume4initEh+0x30>
   b5760:	7c03      	ldrb	r3, [r0, #16]
   b5762:	2b02      	cmp	r3, #2
   b5764:	d1da      	bne.n	b571c <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b5766:	89c3      	ldrh	r3, [r0, #14]
   b5768:	2b00      	cmp	r3, #0
   b576a:	d0d7      	beq.n	b571c <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b576c:	7b41      	ldrb	r1, [r0, #13]
   b576e:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b5770:	1e4b      	subs	r3, r1, #1
   b5772:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b5774:	2300      	movs	r3, #0
   b5776:	71a3      	strb	r3, [r4, #6]
   b5778:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b577a:	2301      	movs	r3, #1
   b577c:	4299      	cmp	r1, r3
   b577e:	d007      	beq.n	b5790 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b5780:	3e01      	subs	r6, #1
   b5782:	d0cb      	beq.n	b571c <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b5784:	79a2      	ldrb	r2, [r4, #6]
   b5786:	005b      	lsls	r3, r3, #1
   b5788:	3201      	adds	r2, #1
   b578a:	b2db      	uxtb	r3, r3
   b578c:	71a2      	strb	r2, [r4, #6]
   b578e:	e7f5      	b.n	b577c <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b5790:	8ac1      	ldrh	r1, [r0, #22]
   b5792:	b901      	cbnz	r1, b5796 <_ZN9FatVolume4initEh+0xaa>
   b5794:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b5796:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b5798:	89c3      	ldrh	r3, [r0, #14]
   b579a:	442b      	add	r3, r5
   b579c:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b579e:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b57a2:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b57a4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b57a8:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b57aa:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b57ae:	0149      	lsls	r1, r1, #5
   b57b0:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b57b4:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b57b8:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b57ba:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b57be:	b902      	cbnz	r2, b57c2 <_ZN9FatVolume4initEh+0xd6>
   b57c0:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b57c2:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b57c4:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b57c6:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b57c8:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b57ca:	1c4b      	adds	r3, r1, #1
   b57cc:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b57ce:	f640 73f4 	movw	r3, #4084	; 0xff4
   b57d2:	4299      	cmp	r1, r3
   b57d4:	d802      	bhi.n	b57dc <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b57d6:	230c      	movs	r3, #12
   b57d8:	71e3      	strb	r3, [r4, #7]
   b57da:	e79f      	b.n	b571c <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b57dc:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b57e0:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b57e2:	bf85      	ittet	hi
   b57e4:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b57e6:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b57e8:	2310      	movls	r3, #16
    m_fatType = 32;
   b57ea:	2320      	movhi	r3, #32
   b57ec:	71e3      	strb	r3, [r4, #7]
  return true;
   b57ee:	2001      	movs	r0, #1
   b57f0:	e795      	b.n	b571e <_ZN9FatVolume4initEh+0x32>

000b57f2 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b57f2:	f000 bacb 	b.w	b5d8c <_ZN14SdSpiAltDriver4sendEh>

000b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b57f6:	f000 baae 	b.w	b5d56 <_ZN14SdSpiAltDriver7receiveEv>
	...

000b57fc <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b57fc:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b57fe:	4e0e      	ldr	r6, [pc, #56]	; (b5838 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b5800:	460d      	mov	r5, r1
   b5802:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5804:	f000 faea 	bl	b5ddc <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b5808:	6833      	ldr	r3, [r6, #0]
   b580a:	1ac0      	subs	r0, r0, r3
   b580c:	4b0b      	ldr	r3, [pc, #44]	; (b583c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b580e:	4298      	cmp	r0, r3
   b5810:	d908      	bls.n	b5824 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5812:	f000 faeb 	bl	b5dec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5816:	4b0a      	ldr	r3, [pc, #40]	; (b5840 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b5818:	6018      	str	r0, [r3, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
   b581a:	f000 fccf 	bl	b61bc <spark_process>
   b581e:	f000 fadd 	bl	b5ddc <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b5822:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5824:	f000 fae2 	bl	b5dec <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b5828:	b280      	uxth	r0, r0
   b582a:	1b40      	subs	r0, r0, r5
}
   b582c:	42a0      	cmp	r0, r4
   b582e:	bfd4      	ite	le
   b5830:	2000      	movle	r0, #0
   b5832:	2001      	movgt	r0, #1
   b5834:	bd70      	pop	{r4, r5, r6, pc}
   b5836:	bf00      	nop
   b5838:	2003e67c 	.word	0x2003e67c
   b583c:	000186a0 	.word	0x000186a0
   b5840:	2003e710 	.word	0x2003e710

000b5844 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b5844:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b5846:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b5848:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b584a:	b94d      	cbnz	r5, b5860 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b584c:	6840      	ldr	r0, [r0, #4]
   b584e:	f000 fa6b 	bl	b5d28 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b5852:	6863      	ldr	r3, [r4, #4]
   b5854:	4629      	mov	r1, r5
   b5856:	7d18      	ldrb	r0, [r3, #20]
   b5858:	f001 ff71 	bl	b773e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b585c:	2301      	movs	r3, #1
   b585e:	7223      	strb	r3, [r4, #8]
  }
}
   b5860:	bd38      	pop	{r3, r4, r5, pc}

000b5862 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b5862:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b5864:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b5866:	4604      	mov	r4, r0
  if (m_spiActive) {
   b5868:	b16b      	cbz	r3, b5886 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b586a:	6843      	ldr	r3, [r0, #4]
   b586c:	2101      	movs	r1, #1
   b586e:	7d18      	ldrb	r0, [r3, #20]
   b5870:	f001 ff65 	bl	b773e <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b5874:	6860      	ldr	r0, [r4, #4]
   b5876:	21ff      	movs	r1, #255	; 0xff
   b5878:	f7ff ffbb 	bl	b57f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b587c:	6860      	ldr	r0, [r4, #4]
   b587e:	f000 fa67 	bl	b5d50 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b5882:	2300      	movs	r3, #0
   b5884:	7223      	strb	r3, [r4, #8]
  }
}
   b5886:	bd10      	pop	{r4, pc}

000b5888 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b5888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b588a:	4604      	mov	r4, r0
   b588c:	460d      	mov	r5, r1
   b588e:	4616      	mov	r6, r2
   b5890:	f000 faac 	bl	b5dec <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b5894:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b5896:	6860      	ldr	r0, [r4, #4]
   b5898:	f7ff ffad 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b589c:	28ff      	cmp	r0, #255	; 0xff
   b589e:	7260      	strb	r0, [r4, #9]
   b58a0:	d10e      	bne.n	b58c0 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b58a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b58a6:	4639      	mov	r1, r7
   b58a8:	4620      	mov	r0, r4
   b58aa:	f7ff ffa7 	bl	b57fc <_ZN9SdSpiCard10isTimedOutEtt>
   b58ae:	2800      	cmp	r0, #0
   b58b0:	d0f1      	beq.n	b5896 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b58b2:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b58b4:	4620      	mov	r0, r4
   b58b6:	7023      	strb	r3, [r4, #0]
   b58b8:	f7ff ffd3 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b58bc:	2000      	movs	r0, #0
}
   b58be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b58c0:	28fe      	cmp	r0, #254	; 0xfe
   b58c2:	d001      	beq.n	b58c8 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b58c4:	2350      	movs	r3, #80	; 0x50
   b58c6:	e7f5      	b.n	b58b4 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b58c8:	6860      	ldr	r0, [r4, #4]
   b58ca:	4632      	mov	r2, r6
   b58cc:	4629      	mov	r1, r5
   b58ce:	f000 fa47 	bl	b5d60 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b58d2:	7260      	strb	r0, [r4, #9]
   b58d4:	b108      	cbz	r0, b58da <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b58d6:	2360      	movs	r3, #96	; 0x60
   b58d8:	e7ec      	b.n	b58b4 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b58da:	6860      	ldr	r0, [r4, #4]
   b58dc:	f7ff ff8b 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b58e0:	6860      	ldr	r0, [r4, #4]
   b58e2:	f7ff ff88 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b58e6:	2001      	movs	r0, #1
   b58e8:	e7e9      	b.n	b58be <_ZN9SdSpiCard8readDataEPhj+0x36>

000b58ea <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b58ea:	b570      	push	{r4, r5, r6, lr}
   b58ec:	4604      	mov	r4, r0
   b58ee:	460e      	mov	r6, r1
   b58f0:	f000 fa7c 	bl	b5dec <HAL_Timer_Get_Milli_Seconds>
   b58f4:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b58f6:	4632      	mov	r2, r6
   b58f8:	4629      	mov	r1, r5
   b58fa:	4620      	mov	r0, r4
   b58fc:	f7ff ff7e 	bl	b57fc <_ZN9SdSpiCard10isTimedOutEtt>
   b5900:	b930      	cbnz	r0, b5910 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b5902:	6860      	ldr	r0, [r4, #4]
   b5904:	f7ff ff77 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5908:	28ff      	cmp	r0, #255	; 0xff
   b590a:	d1f4      	bne.n	b58f6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b590c:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b590e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b5910:	2000      	movs	r0, #0
   b5912:	e7fc      	b.n	b590e <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b5914 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b5914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b5916:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b5918:	9201      	str	r2, [sp, #4]
   b591a:	4604      	mov	r4, r0
   b591c:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b591e:	b90b      	cbnz	r3, b5924 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b5920:	f7ff ff90 	bl	b5844 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b5924:	b125      	cbz	r5, b5930 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b5926:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b592a:	4620      	mov	r0, r4
   b592c:	f7ff ffdd 	bl	b58ea <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b5930:	6860      	ldr	r0, [r4, #4]
   b5932:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b5936:	f7ff ff5c 	bl	b57f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b593a:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b593c:	af01      	add	r7, sp, #4
   b593e:	5db9      	ldrb	r1, [r7, r6]
   b5940:	6860      	ldr	r0, [r4, #4]
   b5942:	f7ff ff56 	bl	b57f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b5946:	3e01      	subs	r6, #1
   b5948:	d2f9      	bcs.n	b593e <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b594a:	2d00      	cmp	r5, #0
   b594c:	6860      	ldr	r0, [r4, #4]
   b594e:	bf0c      	ite	eq
   b5950:	2195      	moveq	r1, #149	; 0x95
   b5952:	2187      	movne	r1, #135	; 0x87
   b5954:	f7ff ff4d 	bl	b57f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b5958:	6860      	ldr	r0, [r4, #4]
   b595a:	f7ff ff4c 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b595e:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b5960:	6860      	ldr	r0, [r4, #4]
   b5962:	f7ff ff48 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5966:	0603      	lsls	r3, r0, #24
   b5968:	7260      	strb	r0, [r4, #9]
   b596a:	d503      	bpl.n	b5974 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b596c:	3d01      	subs	r5, #1
   b596e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5972:	d1f5      	bne.n	b5960 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b5974:	b003      	add	sp, #12
   b5976:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5978 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b5978:	b570      	push	{r4, r5, r6, lr}
   b597a:	4604      	mov	r4, r0
   b597c:	460d      	mov	r5, r1
   b597e:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b5980:	2137      	movs	r1, #55	; 0x37
   b5982:	2200      	movs	r2, #0
   b5984:	f7ff ffc6 	bl	b5914 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b5988:	4632      	mov	r2, r6
   b598a:	4629      	mov	r1, r5
   b598c:	4620      	mov	r0, r4
  }
   b598e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b5992:	f7ff bfbf 	b.w	b5914 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b5998 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b5998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b599c:	2500      	movs	r5, #0
   b599e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b59a0:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b59a2:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b59a4:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b59a6:	4604      	mov	r4, r0
   b59a8:	4690      	mov	r8, r2
   b59aa:	461e      	mov	r6, r3
   b59ac:	f000 fa1e 	bl	b5dec <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b59b0:	4641      	mov	r1, r8
   b59b2:	4607      	mov	r7, r0
   b59b4:	6860      	ldr	r0, [r4, #4]
   b59b6:	f000 f9bb 	bl	b5d30 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b59ba:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b59bc:	4a49      	ldr	r2, [pc, #292]	; (b5ae4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b59be:	721d      	strb	r5, [r3, #8]
   b59c0:	2501      	movs	r5, #1
   b59c2:	60da      	str	r2, [r3, #12]
   b59c4:	821d      	strh	r5, [r3, #16]
  spiStart();
   b59c6:	4620      	mov	r0, r4
   b59c8:	f7ff ff3c 	bl	b5844 <_ZN9SdSpiCard8spiStartEv>
   b59cc:	6863      	ldr	r3, [r4, #4]
   b59ce:	4629      	mov	r1, r5
   b59d0:	7d18      	ldrb	r0, [r3, #20]
   b59d2:	f001 feb4 	bl	b773e <digitalWrite>
   b59d6:	250a      	movs	r5, #10
    spiSend(0XFF);
   b59d8:	6860      	ldr	r0, [r4, #4]
   b59da:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b59dc:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b59de:	f7ff ff08 	bl	b57f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b59e2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b59e6:	d1f7      	bne.n	b59d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b59e8:	6863      	ldr	r3, [r4, #4]
   b59ea:	4629      	mov	r1, r5
   b59ec:	7d18      	ldrb	r0, [r3, #20]
   b59ee:	f001 fea6 	bl	b773e <digitalWrite>
  }
   b59f2:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b59f4:	2200      	movs	r2, #0
   b59f6:	4611      	mov	r1, r2
   b59f8:	4620      	mov	r0, r4
   b59fa:	f7ff ff8b 	bl	b5914 <_ZN9SdSpiCard11cardCommandEhm>
   b59fe:	2801      	cmp	r0, #1
   b5a00:	4680      	mov	r8, r0
   b5a02:	d018      	beq.n	b5a36 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b5a04:	3d01      	subs	r5, #1
   b5a06:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5a0a:	d107      	bne.n	b5a1c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b5a0c:	2320      	movs	r3, #32
  spiStop();
   b5a0e:	4620      	mov	r0, r4
   b5a10:	7023      	strb	r3, [r4, #0]
   b5a12:	f7ff ff26 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5a16:	2000      	movs	r0, #0
}
   b5a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b5a1c:	6860      	ldr	r0, [r4, #4]
   b5a1e:	21fd      	movs	r1, #253	; 0xfd
   b5a20:	f7ff fee7 	bl	b57f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b5a24:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b5a28:	6860      	ldr	r0, [r4, #4]
   b5a2a:	f7ff fee4 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b5a2e:	f1b8 0801 	subs.w	r8, r8, #1
   b5a32:	d1f9      	bne.n	b5a28 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b5a34:	e7de      	b.n	b59f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b5a36:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b5a3a:	2108      	movs	r1, #8
   b5a3c:	4620      	mov	r0, r4
   b5a3e:	f7ff ff69 	bl	b5914 <_ZN9SdSpiCard11cardCommandEhm>
   b5a42:	2805      	cmp	r0, #5
   b5a44:	d114      	bne.n	b5a70 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b5a46:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b5a4a:	2500      	movs	r5, #0
   b5a4c:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b5a4e:	462a      	mov	r2, r5
   b5a50:	2129      	movs	r1, #41	; 0x29
   b5a52:	4620      	mov	r0, r4
   b5a54:	f7ff ff90 	bl	b5978 <_ZN9SdSpiCard8cardAcmdEhm>
   b5a58:	4602      	mov	r2, r0
   b5a5a:	b1d8      	cbz	r0, b5a94 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b5a5c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b5a60:	4639      	mov	r1, r7
   b5a62:	4620      	mov	r0, r4
   b5a64:	f7ff feca 	bl	b57fc <_ZN9SdSpiCard10isTimedOutEtt>
   b5a68:	2800      	cmp	r0, #0
   b5a6a:	d0f0      	beq.n	b5a4e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b5a6c:	2343      	movs	r3, #67	; 0x43
   b5a6e:	e7ce      	b.n	b5a0e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b5a70:	2504      	movs	r5, #4
      m_status = spiReceive();
   b5a72:	6860      	ldr	r0, [r4, #4]
   b5a74:	f7ff febf 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b5a78:	3d01      	subs	r5, #1
   b5a7a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b5a7e:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b5a80:	d1f7      	bne.n	b5a72 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b5a82:	28aa      	cmp	r0, #170	; 0xaa
   b5a84:	d104      	bne.n	b5a90 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b5a86:	2302      	movs	r3, #2
   b5a88:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b5a8a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b5a8e:	e7dd      	b.n	b5a4c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b5a90:	2325      	movs	r3, #37	; 0x25
   b5a92:	e7bc      	b.n	b5a0e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b5a94:	7aa3      	ldrb	r3, [r4, #10]
   b5a96:	2b02      	cmp	r3, #2
   b5a98:	d118      	bne.n	b5acc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b5a9a:	213a      	movs	r1, #58	; 0x3a
   b5a9c:	4620      	mov	r0, r4
   b5a9e:	f7ff ff39 	bl	b5914 <_ZN9SdSpiCard11cardCommandEhm>
   b5aa2:	b108      	cbz	r0, b5aa8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b5aa4:	2337      	movs	r3, #55	; 0x37
   b5aa6:	e7b2      	b.n	b5a0e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b5aa8:	6860      	ldr	r0, [r4, #4]
   b5aaa:	f7ff fea4 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5aae:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b5ab2:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b5ab4:	bf04      	itt	eq
   b5ab6:	2303      	moveq	r3, #3
   b5ab8:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b5aba:	6860      	ldr	r0, [r4, #4]
   b5abc:	f7ff fe9b 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5ac0:	6860      	ldr	r0, [r4, #4]
   b5ac2:	f7ff fe98 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5ac6:	6860      	ldr	r0, [r4, #4]
   b5ac8:	f7ff fe95 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b5acc:	4620      	mov	r0, r4
   b5ace:	f7ff fec8 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b5ad2:	6863      	ldr	r3, [r4, #4]
   b5ad4:	7930      	ldrb	r0, [r6, #4]
   b5ad6:	68b1      	ldr	r1, [r6, #8]
   b5ad8:	89b2      	ldrh	r2, [r6, #12]
   b5ada:	821a      	strh	r2, [r3, #16]
   b5adc:	7218      	strb	r0, [r3, #8]
   b5ade:	60d9      	str	r1, [r3, #12]
  return true;
   b5ae0:	2001      	movs	r0, #1
   b5ae2:	e799      	b.n	b5a18 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b5ae4:	0003d090 	.word	0x0003d090

000b5ae8 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5ae8:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5aea:	7a83      	ldrb	r3, [r0, #10]
   b5aec:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b5aee:	bf18      	it	ne
   b5af0:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5af2:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b5af4:	460a      	mov	r2, r1
   b5af6:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5af8:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b5afa:	f7ff ff0b 	bl	b5914 <_ZN9SdSpiCard11cardCommandEhm>
   b5afe:	b130      	cbz	r0, b5b0e <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b5b00:	2330      	movs	r3, #48	; 0x30
   b5b02:	7023      	strb	r3, [r4, #0]
  spiStop();
   b5b04:	4620      	mov	r0, r4
   b5b06:	f7ff feac 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5b0a:	2500      	movs	r5, #0
   b5b0c:	e00b      	b.n	b5b26 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b5b0e:	4629      	mov	r1, r5
   b5b10:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5b14:	4620      	mov	r0, r4
   b5b16:	f7ff feb7 	bl	b5888 <_ZN9SdSpiCard8readDataEPhj>
   b5b1a:	4605      	mov	r5, r0
   b5b1c:	2800      	cmp	r0, #0
   b5b1e:	d0f1      	beq.n	b5b04 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b5b20:	4620      	mov	r0, r4
   b5b22:	f7ff fe9e 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
}
   b5b26:	4628      	mov	r0, r5
   b5b28:	bd38      	pop	{r3, r4, r5, pc}

000b5b2a <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5b2a:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5b2c:	7a83      	ldrb	r3, [r0, #10]
   b5b2e:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5b30:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b5b32:	bf18      	it	ne
   b5b34:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b5b36:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5b38:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b5b3a:	f7ff feeb 	bl	b5914 <_ZN9SdSpiCard11cardCommandEhm>
   b5b3e:	b130      	cbz	r0, b5b4e <_ZN9SdSpiCard9readStartEm+0x24>
   b5b40:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b5b42:	4620      	mov	r0, r4
   b5b44:	7023      	strb	r3, [r4, #0]
   b5b46:	f7ff fe8c 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5b4a:	2000      	movs	r0, #0
}
   b5b4c:	bd10      	pop	{r4, pc}
  return true;
   b5b4e:	2001      	movs	r0, #1
   b5b50:	e7fc      	b.n	b5b4c <_ZN9SdSpiCard9readStartEm+0x22>

000b5b52 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b5b52:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b5b54:	2200      	movs	r2, #0
   b5b56:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b5b58:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b5b5a:	f7ff fedb 	bl	b5914 <_ZN9SdSpiCard11cardCommandEhm>
   b5b5e:	b130      	cbz	r0, b5b6e <_ZN9SdSpiCard8readStopEv+0x1c>
   b5b60:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b5b62:	4620      	mov	r0, r4
   b5b64:	7023      	strb	r3, [r4, #0]
   b5b66:	f7ff fe7c 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5b6a:	2000      	movs	r0, #0
}
   b5b6c:	bd10      	pop	{r4, pc}
  spiStop();
   b5b6e:	4620      	mov	r0, r4
   b5b70:	f7ff fe77 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b5b74:	2001      	movs	r0, #1
   b5b76:	e7f9      	b.n	b5b6c <_ZN9SdSpiCard8readStopEv+0x1a>

000b5b78 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b5b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b7a:	4604      	mov	r4, r0
   b5b7c:	4616      	mov	r6, r2
   b5b7e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b5b80:	f7ff ffd3 	bl	b5b2a <_ZN9SdSpiCard9readStartEm>
   b5b84:	b168      	cbz	r0, b5ba2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b5b86:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b5b88:	b2ab      	uxth	r3, r5
   b5b8a:	429f      	cmp	r7, r3
   b5b8c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b5b90:	d909      	bls.n	b5ba6 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b5b92:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5b96:	4620      	mov	r0, r4
   b5b98:	f7ff fe76 	bl	b5888 <_ZN9SdSpiCard8readDataEPhj>
   b5b9c:	3501      	adds	r5, #1
   b5b9e:	2800      	cmp	r0, #0
   b5ba0:	d1f2      	bne.n	b5b88 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b5ba2:	2000      	movs	r0, #0
   b5ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b5ba6:	4620      	mov	r0, r4
}
   b5ba8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b5bac:	f7ff bfd1 	b.w	b5b52 <_ZN9SdSpiCard8readStopEv>

000b5bb0 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b5bb0:	b538      	push	{r3, r4, r5, lr}
   b5bb2:	4604      	mov	r4, r0
   b5bb4:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b5bb6:	6840      	ldr	r0, [r0, #4]
   b5bb8:	f7ff fe1b 	bl	b57f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b5bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5bc0:	6860      	ldr	r0, [r4, #4]
   b5bc2:	4629      	mov	r1, r5
   b5bc4:	f000 f8e6 	bl	b5d94 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b5bc8:	6860      	ldr	r0, [r4, #4]
   b5bca:	21ff      	movs	r1, #255	; 0xff
   b5bcc:	f7ff fe11 	bl	b57f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b5bd0:	6860      	ldr	r0, [r4, #4]
   b5bd2:	21ff      	movs	r1, #255	; 0xff
   b5bd4:	f7ff fe0d 	bl	b57f2 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b5bd8:	6860      	ldr	r0, [r4, #4]
   b5bda:	f7ff fe0c 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5bde:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b5be0:	f000 001f 	and.w	r0, r0, #31
   b5be4:	2805      	cmp	r0, #5
   b5be6:	d006      	beq.n	b5bf6 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b5be8:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b5bea:	4620      	mov	r0, r4
   b5bec:	7023      	strb	r3, [r4, #0]
   b5bee:	f7ff fe38 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5bf2:	2000      	movs	r0, #0
}
   b5bf4:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b5bf6:	2001      	movs	r0, #1
   b5bf8:	e7fc      	b.n	b5bf4 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b5bfa <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5bfa:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5bfc:	7a83      	ldrb	r3, [r0, #10]
   b5bfe:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b5c00:	bf18      	it	ne
   b5c02:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5c04:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b5c06:	460a      	mov	r2, r1
   b5c08:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5c0a:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b5c0c:	f7ff fe82 	bl	b5914 <_ZN9SdSpiCard11cardCommandEhm>
   b5c10:	4606      	mov	r6, r0
   b5c12:	b130      	cbz	r0, b5c22 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b5c14:	2332      	movs	r3, #50	; 0x32
   b5c16:	7023      	strb	r3, [r4, #0]
  spiStop();
   b5c18:	4620      	mov	r0, r4
   b5c1a:	f7ff fe22 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5c1e:	2500      	movs	r5, #0
   b5c20:	e01f      	b.n	b5c62 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b5c22:	462a      	mov	r2, r5
   b5c24:	21fe      	movs	r1, #254	; 0xfe
   b5c26:	4620      	mov	r0, r4
   b5c28:	f7ff ffc2 	bl	b5bb0 <_ZN9SdSpiCard9writeDataEhPKh>
   b5c2c:	2800      	cmp	r0, #0
   b5c2e:	d0f3      	beq.n	b5c18 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5c30:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b5c34:	4620      	mov	r0, r4
   b5c36:	f7ff fe58 	bl	b58ea <_ZN9SdSpiCard11waitNotBusyEt>
   b5c3a:	4605      	mov	r5, r0
   b5c3c:	b908      	cbnz	r0, b5c42 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b5c3e:	235a      	movs	r3, #90	; 0x5a
   b5c40:	e7e9      	b.n	b5c16 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b5c42:	4632      	mov	r2, r6
   b5c44:	210d      	movs	r1, #13
   b5c46:	4620      	mov	r0, r4
   b5c48:	f7ff fe64 	bl	b5914 <_ZN9SdSpiCard11cardCommandEhm>
   b5c4c:	b108      	cbz	r0, b5c52 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b5c4e:	2329      	movs	r3, #41	; 0x29
   b5c50:	e7e1      	b.n	b5c16 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b5c52:	6860      	ldr	r0, [r4, #4]
   b5c54:	f7ff fdcf 	bl	b57f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5c58:	2800      	cmp	r0, #0
   b5c5a:	d1f8      	bne.n	b5c4e <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b5c5c:	4620      	mov	r0, r4
   b5c5e:	f7ff fe00 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
}
   b5c62:	4628      	mov	r0, r5
   b5c64:	bd70      	pop	{r4, r5, r6, pc}

000b5c66 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b5c66:	b513      	push	{r0, r1, r4, lr}
   b5c68:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5c6a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b5c6e:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5c70:	f7ff fe3b 	bl	b58ea <_ZN9SdSpiCard11waitNotBusyEt>
   b5c74:	9a01      	ldr	r2, [sp, #4]
   b5c76:	b930      	cbnz	r0, b5c86 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b5c78:	235b      	movs	r3, #91	; 0x5b
   b5c7a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b5c7c:	4620      	mov	r0, r4
   b5c7e:	f7ff fdf0 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5c82:	2000      	movs	r0, #0
   b5c84:	e005      	b.n	b5c92 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b5c86:	21fc      	movs	r1, #252	; 0xfc
   b5c88:	4620      	mov	r0, r4
   b5c8a:	f7ff ff91 	bl	b5bb0 <_ZN9SdSpiCard9writeDataEhPKh>
   b5c8e:	2800      	cmp	r0, #0
   b5c90:	d0f4      	beq.n	b5c7c <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b5c92:	b002      	add	sp, #8
   b5c94:	bd10      	pop	{r4, pc}

000b5c96 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b5c96:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b5c98:	7a83      	ldrb	r3, [r0, #10]
   b5c9a:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b5c9c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b5c9e:	bf18      	it	ne
   b5ca0:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b5ca2:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b5ca4:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b5ca6:	f7ff fe35 	bl	b5914 <_ZN9SdSpiCard11cardCommandEhm>
   b5caa:	b130      	cbz	r0, b5cba <_ZN9SdSpiCard10writeStartEm+0x24>
   b5cac:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b5cae:	4620      	mov	r0, r4
   b5cb0:	7023      	strb	r3, [r4, #0]
   b5cb2:	f7ff fdd6 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5cb6:	2000      	movs	r0, #0
}
   b5cb8:	bd10      	pop	{r4, pc}
  return true;
   b5cba:	2001      	movs	r0, #1
   b5cbc:	e7fc      	b.n	b5cb8 <_ZN9SdSpiCard10writeStartEm+0x22>

000b5cbe <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b5cbe:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5cc0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b5cc4:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5cc6:	f7ff fe10 	bl	b58ea <_ZN9SdSpiCard11waitNotBusyEt>
   b5cca:	4605      	mov	r5, r0
   b5ccc:	b930      	cbnz	r0, b5cdc <_ZN9SdSpiCard9writeStopEv+0x1e>
   b5cce:	2356      	movs	r3, #86	; 0x56
   b5cd0:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b5cd2:	4620      	mov	r0, r4
   b5cd4:	f7ff fdc5 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b5cd8:	4628      	mov	r0, r5
   b5cda:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b5cdc:	6860      	ldr	r0, [r4, #4]
   b5cde:	21fd      	movs	r1, #253	; 0xfd
   b5ce0:	f7ff fd87 	bl	b57f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b5ce4:	e7f5      	b.n	b5cd2 <_ZN9SdSpiCard9writeStopEv+0x14>

000b5ce6 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b5ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5ce8:	4604      	mov	r4, r0
   b5cea:	4616      	mov	r6, r2
   b5cec:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b5cee:	f7ff ffd2 	bl	b5c96 <_ZN9SdSpiCard10writeStartEm>
   b5cf2:	b170      	cbz	r0, b5d12 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b5cf4:	2500      	movs	r5, #0
   b5cf6:	42bd      	cmp	r5, r7
   b5cf8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b5cfc:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b5cfe:	d004      	beq.n	b5d0a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b5d00:	f7ff ffb1 	bl	b5c66 <_ZN9SdSpiCard9writeDataEPKh>
   b5d04:	b128      	cbz	r0, b5d12 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b5d06:	3501      	adds	r5, #1
   b5d08:	e7f5      	b.n	b5cf6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b5d0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b5d0e:	f7ff bfd6 	b.w	b5cbe <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b5d12:	4620      	mov	r0, r4
   b5d14:	f7ff fda5 	bl	b5862 <_ZN9SdSpiCard7spiStopEv>
}
   b5d18:	2000      	movs	r0, #0
   b5d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d1c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b5d1c:	4b01      	ldr	r3, [pc, #4]	; (b5d24 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b5d1e:	2201      	movs	r2, #1
   b5d20:	701a      	strb	r2, [r3, #0]
}
   b5d22:	4770      	bx	lr
   b5d24:	2003e680 	.word	0x2003e680

000b5d28 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b5d28:	1d01      	adds	r1, r0, #4
   b5d2a:	6800      	ldr	r0, [r0, #0]
   b5d2c:	f001 b9da 	b.w	b70e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b5d30 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b5d30:	b510      	push	{r4, lr}
   b5d32:	4604      	mov	r4, r0
  m_csPin = csPin;
   b5d34:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b5d36:	6800      	ldr	r0, [r0, #0]
   b5d38:	f001 f9a6 	bl	b7088 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b5d3c:	7d20      	ldrb	r0, [r4, #20]
   b5d3e:	2101      	movs	r1, #1
   b5d40:	f001 fcec 	bl	b771c <pinMode>
  digitalWrite(m_csPin, HIGH);
   b5d44:	7d20      	ldrb	r0, [r4, #20]
   b5d46:	2101      	movs	r1, #1
}
   b5d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b5d4c:	f001 bcf7 	b.w	b773e <digitalWrite>

000b5d50 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b5d50:	6800      	ldr	r0, [r0, #0]
   b5d52:	f001 b9ad 	b.w	b70b0 <_ZN8SPIClass14endTransactionEv>

000b5d56 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b5d56:	6800      	ldr	r0, [r0, #0]
   b5d58:	21ff      	movs	r1, #255	; 0xff
   b5d5a:	f001 ba31 	b.w	b71c0 <_ZN8SPIClass8transferEh>
	...

000b5d60 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b5d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5d62:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b5d64:	4a07      	ldr	r2, [pc, #28]	; (b5d84 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b5d66:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b5d68:	2500      	movs	r5, #0
   b5d6a:	4c07      	ldr	r4, [pc, #28]	; (b5d88 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b5d6c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b5d6e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b5d70:	460a      	mov	r2, r1
   b5d72:	4629      	mov	r1, r5
   b5d74:	f001 fa2a 	bl	b71cc <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b5d78:	7823      	ldrb	r3, [r4, #0]
   b5d7a:	2b00      	cmp	r3, #0
   b5d7c:	d0fc      	beq.n	b5d78 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b5d7e:	2000      	movs	r0, #0
   b5d80:	b003      	add	sp, #12
   b5d82:	bd30      	pop	{r4, r5, pc}
   b5d84:	000b5d1d 	.word	0x000b5d1d
   b5d88:	2003e680 	.word	0x2003e680

000b5d8c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b5d8c:	6800      	ldr	r0, [r0, #0]
   b5d8e:	f001 ba17 	b.w	b71c0 <_ZN8SPIClass8transferEh>
	...

000b5d94 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b5d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5d96:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5d98:	4a06      	ldr	r2, [pc, #24]	; (b5db4 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b5d9a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b5d9c:	2500      	movs	r5, #0
   b5d9e:	4c06      	ldr	r4, [pc, #24]	; (b5db8 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5da0:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b5da2:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5da4:	462a      	mov	r2, r5
   b5da6:	f001 fa11 	bl	b71cc <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b5daa:	7823      	ldrb	r3, [r4, #0]
   b5dac:	2b00      	cmp	r3, #0
   b5dae:	d0fc      	beq.n	b5daa <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b5db0:	b003      	add	sp, #12
   b5db2:	bd30      	pop	{r4, r5, pc}
   b5db4:	000b5d1d 	.word	0x000b5d1d
   b5db8:	2003e680 	.word	0x2003e680

000b5dbc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5dbc:	b508      	push	{r3, lr}
   b5dbe:	4b02      	ldr	r3, [pc, #8]	; (b5dc8 <os_mutex_recursive_create+0xc>)
   b5dc0:	681b      	ldr	r3, [r3, #0]
   b5dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5dc4:	9301      	str	r3, [sp, #4]
   b5dc6:	bd08      	pop	{r3, pc}
   b5dc8:	00030248 	.word	0x00030248

000b5dcc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5dcc:	b508      	push	{r3, lr}
   b5dce:	4b02      	ldr	r3, [pc, #8]	; (b5dd8 <HAL_RNG_GetRandomNumber+0xc>)
   b5dd0:	681b      	ldr	r3, [r3, #0]
   b5dd2:	685b      	ldr	r3, [r3, #4]
   b5dd4:	9301      	str	r3, [sp, #4]
   b5dd6:	bd08      	pop	{r3, pc}
   b5dd8:	00030218 	.word	0x00030218

000b5ddc <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	4b02      	ldr	r3, [pc, #8]	; (b5de8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	691b      	ldr	r3, [r3, #16]
   b5de4:	9301      	str	r3, [sp, #4]
   b5de6:	bd08      	pop	{r3, pc}
   b5de8:	00030218 	.word	0x00030218

000b5dec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5dec:	b508      	push	{r3, lr}
   b5dee:	4b02      	ldr	r3, [pc, #8]	; (b5df8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5df0:	681b      	ldr	r3, [r3, #0]
   b5df2:	695b      	ldr	r3, [r3, #20]
   b5df4:	9301      	str	r3, [sp, #4]
   b5df6:	bd08      	pop	{r3, pc}
   b5df8:	00030218 	.word	0x00030218

000b5dfc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5dfc:	b508      	push	{r3, lr}
   b5dfe:	4b02      	ldr	r3, [pc, #8]	; (b5e08 <hal_rtc_time_is_valid+0xc>)
   b5e00:	681b      	ldr	r3, [r3, #0]
   b5e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5e04:	9301      	str	r3, [sp, #4]
   b5e06:	bd08      	pop	{r3, pc}
   b5e08:	00030218 	.word	0x00030218

000b5e0c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5e0c:	b508      	push	{r3, lr}
   b5e0e:	4b02      	ldr	r3, [pc, #8]	; (b5e18 <hal_rtc_get_time+0xc>)
   b5e10:	681b      	ldr	r3, [r3, #0]
   b5e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5e14:	9301      	str	r3, [sp, #4]
   b5e16:	bd08      	pop	{r3, pc}
   b5e18:	00030218 	.word	0x00030218

000b5e1c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5e1c:	b508      	push	{r3, lr}
   b5e1e:	4b02      	ldr	r3, [pc, #8]	; (b5e28 <HAL_Validate_Pin_Function+0xc>)
   b5e20:	681b      	ldr	r3, [r3, #0]
   b5e22:	685b      	ldr	r3, [r3, #4]
   b5e24:	9301      	str	r3, [sp, #4]
   b5e26:	bd08      	pop	{r3, pc}
   b5e28:	0003022c 	.word	0x0003022c

000b5e2c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5e2c:	b508      	push	{r3, lr}
   b5e2e:	4b02      	ldr	r3, [pc, #8]	; (b5e38 <HAL_Pin_Mode+0xc>)
   b5e30:	681b      	ldr	r3, [r3, #0]
   b5e32:	689b      	ldr	r3, [r3, #8]
   b5e34:	9301      	str	r3, [sp, #4]
   b5e36:	bd08      	pop	{r3, pc}
   b5e38:	0003022c 	.word	0x0003022c

000b5e3c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5e3c:	b508      	push	{r3, lr}
   b5e3e:	4b02      	ldr	r3, [pc, #8]	; (b5e48 <HAL_Get_Pin_Mode+0xc>)
   b5e40:	681b      	ldr	r3, [r3, #0]
   b5e42:	68db      	ldr	r3, [r3, #12]
   b5e44:	9301      	str	r3, [sp, #4]
   b5e46:	bd08      	pop	{r3, pc}
   b5e48:	0003022c 	.word	0x0003022c

000b5e4c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5e4c:	b508      	push	{r3, lr}
   b5e4e:	4b02      	ldr	r3, [pc, #8]	; (b5e58 <HAL_GPIO_Write+0xc>)
   b5e50:	681b      	ldr	r3, [r3, #0]
   b5e52:	691b      	ldr	r3, [r3, #16]
   b5e54:	9301      	str	r3, [sp, #4]
   b5e56:	bd08      	pop	{r3, pc}
   b5e58:	0003022c 	.word	0x0003022c

000b5e5c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5e5c:	b508      	push	{r3, lr}
   b5e5e:	4b02      	ldr	r3, [pc, #8]	; (b5e68 <hal_adc_read+0xc>)
   b5e60:	681b      	ldr	r3, [r3, #0]
   b5e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5e64:	9301      	str	r3, [sp, #4]
   b5e66:	bd08      	pop	{r3, pc}
   b5e68:	0003022c 	.word	0x0003022c

000b5e6c <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5e6c:	b508      	push	{r3, lr}
   b5e6e:	4b02      	ldr	r3, [pc, #8]	; (b5e78 <hal_i2c_begin_transmission+0xc>)
   b5e70:	681b      	ldr	r3, [r3, #0]
   b5e72:	699b      	ldr	r3, [r3, #24]
   b5e74:	9301      	str	r3, [sp, #4]
   b5e76:	bd08      	pop	{r3, pc}
   b5e78:	00030228 	.word	0x00030228

000b5e7c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5e7c:	b508      	push	{r3, lr}
   b5e7e:	4b02      	ldr	r3, [pc, #8]	; (b5e88 <hal_i2c_end_transmission+0xc>)
   b5e80:	681b      	ldr	r3, [r3, #0]
   b5e82:	69db      	ldr	r3, [r3, #28]
   b5e84:	9301      	str	r3, [sp, #4]
   b5e86:	bd08      	pop	{r3, pc}
   b5e88:	00030228 	.word	0x00030228

000b5e8c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5e8c:	b508      	push	{r3, lr}
   b5e8e:	4b02      	ldr	r3, [pc, #8]	; (b5e98 <hal_i2c_write+0xc>)
   b5e90:	681b      	ldr	r3, [r3, #0]
   b5e92:	6a1b      	ldr	r3, [r3, #32]
   b5e94:	9301      	str	r3, [sp, #4]
   b5e96:	bd08      	pop	{r3, pc}
   b5e98:	00030228 	.word	0x00030228

000b5e9c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5e9c:	b508      	push	{r3, lr}
   b5e9e:	4b02      	ldr	r3, [pc, #8]	; (b5ea8 <hal_i2c_available+0xc>)
   b5ea0:	681b      	ldr	r3, [r3, #0]
   b5ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ea4:	9301      	str	r3, [sp, #4]
   b5ea6:	bd08      	pop	{r3, pc}
   b5ea8:	00030228 	.word	0x00030228

000b5eac <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5eac:	b508      	push	{r3, lr}
   b5eae:	4b02      	ldr	r3, [pc, #8]	; (b5eb8 <hal_i2c_read+0xc>)
   b5eb0:	681b      	ldr	r3, [r3, #0]
   b5eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5eb4:	9301      	str	r3, [sp, #4]
   b5eb6:	bd08      	pop	{r3, pc}
   b5eb8:	00030228 	.word	0x00030228

000b5ebc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5ebc:	b508      	push	{r3, lr}
   b5ebe:	4b02      	ldr	r3, [pc, #8]	; (b5ec8 <hal_i2c_peek+0xc>)
   b5ec0:	681b      	ldr	r3, [r3, #0]
   b5ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ec4:	9301      	str	r3, [sp, #4]
   b5ec6:	bd08      	pop	{r3, pc}
   b5ec8:	00030228 	.word	0x00030228

000b5ecc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5ecc:	b508      	push	{r3, lr}
   b5ece:	4b02      	ldr	r3, [pc, #8]	; (b5ed8 <hal_i2c_flush+0xc>)
   b5ed0:	681b      	ldr	r3, [r3, #0]
   b5ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ed4:	9301      	str	r3, [sp, #4]
   b5ed6:	bd08      	pop	{r3, pc}
   b5ed8:	00030228 	.word	0x00030228

000b5edc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5edc:	b508      	push	{r3, lr}
   b5ede:	4b02      	ldr	r3, [pc, #8]	; (b5ee8 <hal_i2c_is_enabled+0xc>)
   b5ee0:	681b      	ldr	r3, [r3, #0]
   b5ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5ee4:	9301      	str	r3, [sp, #4]
   b5ee6:	bd08      	pop	{r3, pc}
   b5ee8:	00030228 	.word	0x00030228

000b5eec <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5eec:	b508      	push	{r3, lr}
   b5eee:	4b02      	ldr	r3, [pc, #8]	; (b5ef8 <hal_i2c_init+0xc>)
   b5ef0:	681b      	ldr	r3, [r3, #0]
   b5ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ef4:	9301      	str	r3, [sp, #4]
   b5ef6:	bd08      	pop	{r3, pc}
   b5ef8:	00030228 	.word	0x00030228

000b5efc <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b5efc:	b508      	push	{r3, lr}
   b5efe:	4b02      	ldr	r3, [pc, #8]	; (b5f08 <hal_i2c_lock+0xc>)
   b5f00:	681b      	ldr	r3, [r3, #0]
   b5f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5f04:	9301      	str	r3, [sp, #4]
   b5f06:	bd08      	pop	{r3, pc}
   b5f08:	00030228 	.word	0x00030228

000b5f0c <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b5f0c:	b508      	push	{r3, lr}
   b5f0e:	4b02      	ldr	r3, [pc, #8]	; (b5f18 <hal_i2c_unlock+0xc>)
   b5f10:	681b      	ldr	r3, [r3, #0]
   b5f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5f14:	9301      	str	r3, [sp, #4]
   b5f16:	bd08      	pop	{r3, pc}
   b5f18:	00030228 	.word	0x00030228

000b5f1c <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5f1c:	b508      	push	{r3, lr}
   b5f1e:	4b02      	ldr	r3, [pc, #8]	; (b5f28 <hal_i2c_request_ex+0xc>)
   b5f20:	681b      	ldr	r3, [r3, #0]
   b5f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5f24:	9301      	str	r3, [sp, #4]
   b5f26:	bd08      	pop	{r3, pc}
   b5f28:	00030228 	.word	0x00030228

000b5f2c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5f2c:	b508      	push	{r3, lr}
   b5f2e:	4b02      	ldr	r3, [pc, #8]	; (b5f38 <inet_inet_ntop+0xc>)
   b5f30:	681b      	ldr	r3, [r3, #0]
   b5f32:	695b      	ldr	r3, [r3, #20]
   b5f34:	9301      	str	r3, [sp, #4]
   b5f36:	bd08      	pop	{r3, pc}
   b5f38:	00030264 	.word	0x00030264

000b5f3c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5f3c:	b508      	push	{r3, lr}
   b5f3e:	4b02      	ldr	r3, [pc, #8]	; (b5f48 <netdb_freeaddrinfo+0xc>)
   b5f40:	681b      	ldr	r3, [r3, #0]
   b5f42:	689b      	ldr	r3, [r3, #8]
   b5f44:	9301      	str	r3, [sp, #4]
   b5f46:	bd08      	pop	{r3, pc}
   b5f48:	00030268 	.word	0x00030268

000b5f4c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5f4c:	b508      	push	{r3, lr}
   b5f4e:	4b02      	ldr	r3, [pc, #8]	; (b5f58 <netdb_getaddrinfo+0xc>)
   b5f50:	681b      	ldr	r3, [r3, #0]
   b5f52:	68db      	ldr	r3, [r3, #12]
   b5f54:	9301      	str	r3, [sp, #4]
   b5f56:	bd08      	pop	{r3, pc}
   b5f58:	00030268 	.word	0x00030268

000b5f5c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5f5c:	b508      	push	{r3, lr}
   b5f5e:	4b02      	ldr	r3, [pc, #8]	; (b5f68 <hal_spi_begin+0xc>)
   b5f60:	681b      	ldr	r3, [r3, #0]
   b5f62:	681b      	ldr	r3, [r3, #0]
   b5f64:	9301      	str	r3, [sp, #4]
   b5f66:	bd08      	pop	{r3, pc}
   b5f68:	00030230 	.word	0x00030230

000b5f6c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5f6c:	b508      	push	{r3, lr}
   b5f6e:	4b02      	ldr	r3, [pc, #8]	; (b5f78 <hal_spi_transfer+0xc>)
   b5f70:	681b      	ldr	r3, [r3, #0]
   b5f72:	695b      	ldr	r3, [r3, #20]
   b5f74:	9301      	str	r3, [sp, #4]
   b5f76:	bd08      	pop	{r3, pc}
   b5f78:	00030230 	.word	0x00030230

000b5f7c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5f7c:	b508      	push	{r3, lr}
   b5f7e:	4b02      	ldr	r3, [pc, #8]	; (b5f88 <hal_spi_init+0xc>)
   b5f80:	681b      	ldr	r3, [r3, #0]
   b5f82:	69db      	ldr	r3, [r3, #28]
   b5f84:	9301      	str	r3, [sp, #4]
   b5f86:	bd08      	pop	{r3, pc}
   b5f88:	00030230 	.word	0x00030230

000b5f8c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5f8c:	b508      	push	{r3, lr}
   b5f8e:	4b02      	ldr	r3, [pc, #8]	; (b5f98 <hal_spi_is_enabled+0xc>)
   b5f90:	681b      	ldr	r3, [r3, #0]
   b5f92:	6a1b      	ldr	r3, [r3, #32]
   b5f94:	9301      	str	r3, [sp, #4]
   b5f96:	bd08      	pop	{r3, pc}
   b5f98:	00030230 	.word	0x00030230

000b5f9c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5f9c:	b508      	push	{r3, lr}
   b5f9e:	4b02      	ldr	r3, [pc, #8]	; (b5fa8 <hal_spi_info+0xc>)
   b5fa0:	681b      	ldr	r3, [r3, #0]
   b5fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5fa4:	9301      	str	r3, [sp, #4]
   b5fa6:	bd08      	pop	{r3, pc}
   b5fa8:	00030230 	.word	0x00030230

000b5fac <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b5fac:	b508      	push	{r3, lr}
   b5fae:	4b02      	ldr	r3, [pc, #8]	; (b5fb8 <hal_spi_transfer_dma+0xc>)
   b5fb0:	681b      	ldr	r3, [r3, #0]
   b5fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5fb4:	9301      	str	r3, [sp, #4]
   b5fb6:	bd08      	pop	{r3, pc}
   b5fb8:	00030230 	.word	0x00030230

000b5fbc <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b5fbc:	b508      	push	{r3, lr}
   b5fbe:	4b02      	ldr	r3, [pc, #8]	; (b5fc8 <hal_spi_transfer_dma_status+0xc>)
   b5fc0:	681b      	ldr	r3, [r3, #0]
   b5fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5fc4:	9301      	str	r3, [sp, #4]
   b5fc6:	bd08      	pop	{r3, pc}
   b5fc8:	00030230 	.word	0x00030230

000b5fcc <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5fcc:	b508      	push	{r3, lr}
   b5fce:	4b02      	ldr	r3, [pc, #8]	; (b5fd8 <hal_spi_set_settings+0xc>)
   b5fd0:	681b      	ldr	r3, [r3, #0]
   b5fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5fd4:	9301      	str	r3, [sp, #4]
   b5fd6:	bd08      	pop	{r3, pc}
   b5fd8:	00030230 	.word	0x00030230

000b5fdc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5fdc:	b508      	push	{r3, lr}
   b5fde:	4b02      	ldr	r3, [pc, #8]	; (b5fe8 <hal_spi_acquire+0xc>)
   b5fe0:	681b      	ldr	r3, [r3, #0]
   b5fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fe4:	9301      	str	r3, [sp, #4]
   b5fe6:	bd08      	pop	{r3, pc}
   b5fe8:	00030230 	.word	0x00030230

000b5fec <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5fec:	b508      	push	{r3, lr}
   b5fee:	4b02      	ldr	r3, [pc, #8]	; (b5ff8 <hal_spi_release+0xc>)
   b5ff0:	681b      	ldr	r3, [r3, #0]
   b5ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ff4:	9301      	str	r3, [sp, #4]
   b5ff6:	bd08      	pop	{r3, pc}
   b5ff8:	00030230 	.word	0x00030230

000b5ffc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5ffc:	b508      	push	{r3, lr}
   b5ffe:	4b02      	ldr	r3, [pc, #8]	; (b6008 <hal_usart_write+0xc>)
   b6000:	681b      	ldr	r3, [r3, #0]
   b6002:	68db      	ldr	r3, [r3, #12]
   b6004:	9301      	str	r3, [sp, #4]
   b6006:	bd08      	pop	{r3, pc}
   b6008:	0003023c 	.word	0x0003023c

000b600c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b600c:	b508      	push	{r3, lr}
   b600e:	4b02      	ldr	r3, [pc, #8]	; (b6018 <hal_usart_available+0xc>)
   b6010:	681b      	ldr	r3, [r3, #0]
   b6012:	691b      	ldr	r3, [r3, #16]
   b6014:	9301      	str	r3, [sp, #4]
   b6016:	bd08      	pop	{r3, pc}
   b6018:	0003023c 	.word	0x0003023c

000b601c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b601c:	b508      	push	{r3, lr}
   b601e:	4b02      	ldr	r3, [pc, #8]	; (b6028 <hal_usart_read+0xc>)
   b6020:	681b      	ldr	r3, [r3, #0]
   b6022:	695b      	ldr	r3, [r3, #20]
   b6024:	9301      	str	r3, [sp, #4]
   b6026:	bd08      	pop	{r3, pc}
   b6028:	0003023c 	.word	0x0003023c

000b602c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b602c:	b508      	push	{r3, lr}
   b602e:	4b02      	ldr	r3, [pc, #8]	; (b6038 <hal_usart_peek+0xc>)
   b6030:	681b      	ldr	r3, [r3, #0]
   b6032:	699b      	ldr	r3, [r3, #24]
   b6034:	9301      	str	r3, [sp, #4]
   b6036:	bd08      	pop	{r3, pc}
   b6038:	0003023c 	.word	0x0003023c

000b603c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b603c:	b508      	push	{r3, lr}
   b603e:	4b02      	ldr	r3, [pc, #8]	; (b6048 <hal_usart_flush+0xc>)
   b6040:	681b      	ldr	r3, [r3, #0]
   b6042:	69db      	ldr	r3, [r3, #28]
   b6044:	9301      	str	r3, [sp, #4]
   b6046:	bd08      	pop	{r3, pc}
   b6048:	0003023c 	.word	0x0003023c

000b604c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b604c:	b508      	push	{r3, lr}
   b604e:	4b02      	ldr	r3, [pc, #8]	; (b6058 <hal_usart_is_enabled+0xc>)
   b6050:	681b      	ldr	r3, [r3, #0]
   b6052:	6a1b      	ldr	r3, [r3, #32]
   b6054:	9301      	str	r3, [sp, #4]
   b6056:	bd08      	pop	{r3, pc}
   b6058:	0003023c 	.word	0x0003023c

000b605c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b605c:	b508      	push	{r3, lr}
   b605e:	4b02      	ldr	r3, [pc, #8]	; (b6068 <hal_usart_available_data_for_write+0xc>)
   b6060:	681b      	ldr	r3, [r3, #0]
   b6062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6064:	9301      	str	r3, [sp, #4]
   b6066:	bd08      	pop	{r3, pc}
   b6068:	0003023c 	.word	0x0003023c

000b606c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b606c:	b508      	push	{r3, lr}
   b606e:	4b02      	ldr	r3, [pc, #8]	; (b6078 <hal_usart_init_ex+0xc>)
   b6070:	681b      	ldr	r3, [r3, #0]
   b6072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6074:	9301      	str	r3, [sp, #4]
   b6076:	bd08      	pop	{r3, pc}
   b6078:	0003023c 	.word	0x0003023c

000b607c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b607c:	b508      	push	{r3, lr}
   b607e:	4b02      	ldr	r3, [pc, #8]	; (b6088 <HAL_USB_USART_Init+0xc>)
   b6080:	681b      	ldr	r3, [r3, #0]
   b6082:	681b      	ldr	r3, [r3, #0]
   b6084:	9301      	str	r3, [sp, #4]
   b6086:	bd08      	pop	{r3, pc}
   b6088:	0003024c 	.word	0x0003024c

000b608c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b608c:	b508      	push	{r3, lr}
   b608e:	4b02      	ldr	r3, [pc, #8]	; (b6098 <HAL_USB_USART_Begin+0xc>)
   b6090:	681b      	ldr	r3, [r3, #0]
   b6092:	685b      	ldr	r3, [r3, #4]
   b6094:	9301      	str	r3, [sp, #4]
   b6096:	bd08      	pop	{r3, pc}
   b6098:	0003024c 	.word	0x0003024c

000b609c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b609c:	b508      	push	{r3, lr}
   b609e:	4b02      	ldr	r3, [pc, #8]	; (b60a8 <HAL_USB_USART_Available_Data+0xc>)
   b60a0:	681b      	ldr	r3, [r3, #0]
   b60a2:	691b      	ldr	r3, [r3, #16]
   b60a4:	9301      	str	r3, [sp, #4]
   b60a6:	bd08      	pop	{r3, pc}
   b60a8:	0003024c 	.word	0x0003024c

000b60ac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b60ac:	b508      	push	{r3, lr}
   b60ae:	4b02      	ldr	r3, [pc, #8]	; (b60b8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b60b0:	681b      	ldr	r3, [r3, #0]
   b60b2:	695b      	ldr	r3, [r3, #20]
   b60b4:	9301      	str	r3, [sp, #4]
   b60b6:	bd08      	pop	{r3, pc}
   b60b8:	0003024c 	.word	0x0003024c

000b60bc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b60bc:	b508      	push	{r3, lr}
   b60be:	4b02      	ldr	r3, [pc, #8]	; (b60c8 <HAL_USB_USART_Receive_Data+0xc>)
   b60c0:	681b      	ldr	r3, [r3, #0]
   b60c2:	699b      	ldr	r3, [r3, #24]
   b60c4:	9301      	str	r3, [sp, #4]
   b60c6:	bd08      	pop	{r3, pc}
   b60c8:	0003024c 	.word	0x0003024c

000b60cc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b60cc:	b508      	push	{r3, lr}
   b60ce:	4b02      	ldr	r3, [pc, #8]	; (b60d8 <HAL_USB_USART_Send_Data+0xc>)
   b60d0:	681b      	ldr	r3, [r3, #0]
   b60d2:	69db      	ldr	r3, [r3, #28]
   b60d4:	9301      	str	r3, [sp, #4]
   b60d6:	bd08      	pop	{r3, pc}
   b60d8:	0003024c 	.word	0x0003024c

000b60dc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b60dc:	b508      	push	{r3, lr}
   b60de:	4b02      	ldr	r3, [pc, #8]	; (b60e8 <HAL_USB_USART_Flush_Data+0xc>)
   b60e0:	681b      	ldr	r3, [r3, #0]
   b60e2:	6a1b      	ldr	r3, [r3, #32]
   b60e4:	9301      	str	r3, [sp, #4]
   b60e6:	bd08      	pop	{r3, pc}
   b60e8:	0003024c 	.word	0x0003024c

000b60ec <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b60ec:	b508      	push	{r3, lr}
   b60ee:	4b02      	ldr	r3, [pc, #8]	; (b60f8 <log_message+0xc>)
   b60f0:	681b      	ldr	r3, [r3, #0]
   b60f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b60f4:	9301      	str	r3, [sp, #4]
   b60f6:	bd08      	pop	{r3, pc}
   b60f8:	00030260 	.word	0x00030260

000b60fc <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b60fc:	b508      	push	{r3, lr}
   b60fe:	4b02      	ldr	r3, [pc, #8]	; (b6108 <system_mode+0xc>)
   b6100:	681b      	ldr	r3, [r3, #0]
   b6102:	681b      	ldr	r3, [r3, #0]
   b6104:	9301      	str	r3, [sp, #4]
   b6106:	bd08      	pop	{r3, pc}
   b6108:	00030220 	.word	0x00030220

000b610c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b610c:	b508      	push	{r3, lr}
   b610e:	4b02      	ldr	r3, [pc, #8]	; (b6118 <set_system_mode+0xc>)
   b6110:	681b      	ldr	r3, [r3, #0]
   b6112:	685b      	ldr	r3, [r3, #4]
   b6114:	9301      	str	r3, [sp, #4]
   b6116:	bd08      	pop	{r3, pc}
   b6118:	00030220 	.word	0x00030220

000b611c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b611c:	b508      	push	{r3, lr}
   b611e:	4b02      	ldr	r3, [pc, #8]	; (b6128 <system_delay_ms+0xc>)
   b6120:	681b      	ldr	r3, [r3, #0]
   b6122:	695b      	ldr	r3, [r3, #20]
   b6124:	9301      	str	r3, [sp, #4]
   b6126:	bd08      	pop	{r3, pc}
   b6128:	00030220 	.word	0x00030220

000b612c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b612c:	b508      	push	{r3, lr}
   b612e:	4b02      	ldr	r3, [pc, #8]	; (b6138 <system_thread_set_state+0xc>)
   b6130:	681b      	ldr	r3, [r3, #0]
   b6132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6134:	9301      	str	r3, [sp, #4]
   b6136:	bd08      	pop	{r3, pc}
   b6138:	00030220 	.word	0x00030220

000b613c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b613c:	b508      	push	{r3, lr}
   b613e:	4b02      	ldr	r3, [pc, #8]	; (b6148 <application_thread_current+0xc>)
   b6140:	681b      	ldr	r3, [r3, #0]
   b6142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6144:	9301      	str	r3, [sp, #4]
   b6146:	bd08      	pop	{r3, pc}
   b6148:	00030220 	.word	0x00030220

000b614c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b614c:	b508      	push	{r3, lr}
   b614e:	4b02      	ldr	r3, [pc, #8]	; (b6158 <application_thread_invoke+0xc>)
   b6150:	681b      	ldr	r3, [r3, #0]
   b6152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6154:	9301      	str	r3, [sp, #4]
   b6156:	bd08      	pop	{r3, pc}
   b6158:	00030220 	.word	0x00030220

000b615c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b615c:	b508      	push	{r3, lr}
   b615e:	4b02      	ldr	r3, [pc, #8]	; (b6168 <system_thread_get_state+0xc>)
   b6160:	681b      	ldr	r3, [r3, #0]
   b6162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6164:	9301      	str	r3, [sp, #4]
   b6166:	bd08      	pop	{r3, pc}
   b6168:	00030220 	.word	0x00030220

000b616c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b616c:	b508      	push	{r3, lr}
   b616e:	4b03      	ldr	r3, [pc, #12]	; (b617c <system_ctrl_set_app_request_handler+0x10>)
   b6170:	681b      	ldr	r3, [r3, #0]
   b6172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6176:	9301      	str	r3, [sp, #4]
   b6178:	bd08      	pop	{r3, pc}
   b617a:	0000      	.short	0x0000
   b617c:	00030220 	.word	0x00030220

000b6180 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6180:	b508      	push	{r3, lr}
   b6182:	4b03      	ldr	r3, [pc, #12]	; (b6190 <system_ctrl_set_result+0x10>)
   b6184:	681b      	ldr	r3, [r3, #0]
   b6186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b618a:	9301      	str	r3, [sp, #4]
   b618c:	bd08      	pop	{r3, pc}
   b618e:	0000      	.short	0x0000
   b6190:	00030220 	.word	0x00030220

000b6194 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b6194:	b508      	push	{r3, lr}
   b6196:	4b03      	ldr	r3, [pc, #12]	; (b61a4 <system_sleep_ext+0x10>)
   b6198:	681b      	ldr	r3, [r3, #0]
   b619a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b619e:	9301      	str	r3, [sp, #4]
   b61a0:	bd08      	pop	{r3, pc}
   b61a2:	0000      	.short	0x0000
   b61a4:	00030220 	.word	0x00030220

000b61a8 <system_power_management_get_config>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
   b61a8:	b508      	push	{r3, lr}
   b61aa:	4b03      	ldr	r3, [pc, #12]	; (b61b8 <system_power_management_get_config+0x10>)
   b61ac:	681b      	ldr	r3, [r3, #0]
   b61ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b61b2:	9301      	str	r3, [sp, #4]
   b61b4:	bd08      	pop	{r3, pc}
   b61b6:	0000      	.short	0x0000
   b61b8:	00030220 	.word	0x00030220

000b61bc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b61bc:	b508      	push	{r3, lr}
   b61be:	4b02      	ldr	r3, [pc, #8]	; (b61c8 <spark_process+0xc>)
   b61c0:	681b      	ldr	r3, [r3, #0]
   b61c2:	689b      	ldr	r3, [r3, #8]
   b61c4:	9301      	str	r3, [sp, #4]
   b61c6:	bd08      	pop	{r3, pc}
   b61c8:	00030244 	.word	0x00030244

000b61cc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b61cc:	b508      	push	{r3, lr}
   b61ce:	4b02      	ldr	r3, [pc, #8]	; (b61d8 <spark_cloud_flag_connect+0xc>)
   b61d0:	681b      	ldr	r3, [r3, #0]
   b61d2:	68db      	ldr	r3, [r3, #12]
   b61d4:	9301      	str	r3, [sp, #4]
   b61d6:	bd08      	pop	{r3, pc}
   b61d8:	00030244 	.word	0x00030244

000b61dc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b61dc:	b508      	push	{r3, lr}
   b61de:	4b02      	ldr	r3, [pc, #8]	; (b61e8 <spark_cloud_flag_connected+0xc>)
   b61e0:	681b      	ldr	r3, [r3, #0]
   b61e2:	695b      	ldr	r3, [r3, #20]
   b61e4:	9301      	str	r3, [sp, #4]
   b61e6:	bd08      	pop	{r3, pc}
   b61e8:	00030244 	.word	0x00030244

000b61ec <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b61ec:	b508      	push	{r3, lr}
   b61ee:	4b02      	ldr	r3, [pc, #8]	; (b61f8 <spark_send_event+0xc>)
   b61f0:	681b      	ldr	r3, [r3, #0]
   b61f2:	6a1b      	ldr	r3, [r3, #32]
   b61f4:	9301      	str	r3, [sp, #4]
   b61f6:	bd08      	pop	{r3, pc}
   b61f8:	00030244 	.word	0x00030244

000b61fc <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b61fc:	b508      	push	{r3, lr}
   b61fe:	4b02      	ldr	r3, [pc, #8]	; (b6208 <spark_sync_time_pending+0xc>)
   b6200:	681b      	ldr	r3, [r3, #0]
   b6202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6204:	9301      	str	r3, [sp, #4]
   b6206:	bd08      	pop	{r3, pc}
   b6208:	00030244 	.word	0x00030244

000b620c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b620c:	b508      	push	{r3, lr}
   b620e:	4b02      	ldr	r3, [pc, #8]	; (b6218 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6210:	681b      	ldr	r3, [r3, #0]
   b6212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6214:	9301      	str	r3, [sp, #4]
   b6216:	bd08      	pop	{r3, pc}
   b6218:	00030244 	.word	0x00030244

000b621c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b621c:	b508      	push	{r3, lr}
   b621e:	4b02      	ldr	r3, [pc, #8]	; (b6228 <network_connect+0xc>)
   b6220:	681b      	ldr	r3, [r3, #0]
   b6222:	685b      	ldr	r3, [r3, #4]
   b6224:	9301      	str	r3, [sp, #4]
   b6226:	bd08      	pop	{r3, pc}
   b6228:	00030240 	.word	0x00030240

000b622c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b622c:	b508      	push	{r3, lr}
   b622e:	4b02      	ldr	r3, [pc, #8]	; (b6238 <network_connecting+0xc>)
   b6230:	681b      	ldr	r3, [r3, #0]
   b6232:	689b      	ldr	r3, [r3, #8]
   b6234:	9301      	str	r3, [sp, #4]
   b6236:	bd08      	pop	{r3, pc}
   b6238:	00030240 	.word	0x00030240

000b623c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b623c:	b508      	push	{r3, lr}
   b623e:	4b02      	ldr	r3, [pc, #8]	; (b6248 <network_disconnect+0xc>)
   b6240:	681b      	ldr	r3, [r3, #0]
   b6242:	68db      	ldr	r3, [r3, #12]
   b6244:	9301      	str	r3, [sp, #4]
   b6246:	bd08      	pop	{r3, pc}
   b6248:	00030240 	.word	0x00030240

000b624c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b624c:	b508      	push	{r3, lr}
   b624e:	4b02      	ldr	r3, [pc, #8]	; (b6258 <network_ready+0xc>)
   b6250:	681b      	ldr	r3, [r3, #0]
   b6252:	691b      	ldr	r3, [r3, #16]
   b6254:	9301      	str	r3, [sp, #4]
   b6256:	bd08      	pop	{r3, pc}
   b6258:	00030240 	.word	0x00030240

000b625c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b625c:	b508      	push	{r3, lr}
   b625e:	4b02      	ldr	r3, [pc, #8]	; (b6268 <network_on+0xc>)
   b6260:	681b      	ldr	r3, [r3, #0]
   b6262:	695b      	ldr	r3, [r3, #20]
   b6264:	9301      	str	r3, [sp, #4]
   b6266:	bd08      	pop	{r3, pc}
   b6268:	00030240 	.word	0x00030240

000b626c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b626c:	b508      	push	{r3, lr}
   b626e:	4b02      	ldr	r3, [pc, #8]	; (b6278 <network_off+0xc>)
   b6270:	681b      	ldr	r3, [r3, #0]
   b6272:	699b      	ldr	r3, [r3, #24]
   b6274:	9301      	str	r3, [sp, #4]
   b6276:	bd08      	pop	{r3, pc}
   b6278:	00030240 	.word	0x00030240

000b627c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b627c:	b508      	push	{r3, lr}
   b627e:	4b02      	ldr	r3, [pc, #8]	; (b6288 <network_listen+0xc>)
   b6280:	681b      	ldr	r3, [r3, #0]
   b6282:	69db      	ldr	r3, [r3, #28]
   b6284:	9301      	str	r3, [sp, #4]
   b6286:	bd08      	pop	{r3, pc}
   b6288:	00030240 	.word	0x00030240

000b628c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b628c:	b508      	push	{r3, lr}
   b628e:	4b02      	ldr	r3, [pc, #8]	; (b6298 <network_listening+0xc>)
   b6290:	681b      	ldr	r3, [r3, #0]
   b6292:	6a1b      	ldr	r3, [r3, #32]
   b6294:	9301      	str	r3, [sp, #4]
   b6296:	bd08      	pop	{r3, pc}
   b6298:	00030240 	.word	0x00030240

000b629c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b629c:	b508      	push	{r3, lr}
   b629e:	4b02      	ldr	r3, [pc, #8]	; (b62a8 <network_set_listen_timeout+0xc>)
   b62a0:	681b      	ldr	r3, [r3, #0]
   b62a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62a4:	9301      	str	r3, [sp, #4]
   b62a6:	bd08      	pop	{r3, pc}
   b62a8:	00030240 	.word	0x00030240

000b62ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b62ac:	b508      	push	{r3, lr}
   b62ae:	4b02      	ldr	r3, [pc, #8]	; (b62b8 <network_get_listen_timeout+0xc>)
   b62b0:	681b      	ldr	r3, [r3, #0]
   b62b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b62b4:	9301      	str	r3, [sp, #4]
   b62b6:	bd08      	pop	{r3, pc}
   b62b8:	00030240 	.word	0x00030240

000b62bc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b62bc:	b508      	push	{r3, lr}
   b62be:	4b02      	ldr	r3, [pc, #8]	; (b62c8 <network_is_on+0xc>)
   b62c0:	681b      	ldr	r3, [r3, #0]
   b62c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62c4:	9301      	str	r3, [sp, #4]
   b62c6:	bd08      	pop	{r3, pc}
   b62c8:	00030240 	.word	0x00030240

000b62cc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b62cc:	b508      	push	{r3, lr}
   b62ce:	4b02      	ldr	r3, [pc, #8]	; (b62d8 <network_is_off+0xc>)
   b62d0:	681b      	ldr	r3, [r3, #0]
   b62d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62d4:	9301      	str	r3, [sp, #4]
   b62d6:	bd08      	pop	{r3, pc}
   b62d8:	00030240 	.word	0x00030240

000b62dc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b62dc:	b508      	push	{r3, lr}
   b62de:	4b02      	ldr	r3, [pc, #8]	; (b62e8 <malloc+0xc>)
   b62e0:	681b      	ldr	r3, [r3, #0]
   b62e2:	681b      	ldr	r3, [r3, #0]
   b62e4:	9301      	str	r3, [sp, #4]
   b62e6:	bd08      	pop	{r3, pc}
   b62e8:	0003021c 	.word	0x0003021c

000b62ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b62ec:	b508      	push	{r3, lr}
   b62ee:	4b02      	ldr	r3, [pc, #8]	; (b62f8 <free+0xc>)
   b62f0:	681b      	ldr	r3, [r3, #0]
   b62f2:	685b      	ldr	r3, [r3, #4]
   b62f4:	9301      	str	r3, [sp, #4]
   b62f6:	bd08      	pop	{r3, pc}
   b62f8:	0003021c 	.word	0x0003021c

000b62fc <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b62fc:	b508      	push	{r3, lr}
   b62fe:	4b02      	ldr	r3, [pc, #8]	; (b6308 <snprintf+0xc>)
   b6300:	681b      	ldr	r3, [r3, #0]
   b6302:	69db      	ldr	r3, [r3, #28]
   b6304:	9301      	str	r3, [sp, #4]
   b6306:	bd08      	pop	{r3, pc}
   b6308:	0003021c 	.word	0x0003021c

000b630c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b630c:	b508      	push	{r3, lr}
   b630e:	4b02      	ldr	r3, [pc, #8]	; (b6318 <vsnprintf+0xc>)
   b6310:	681b      	ldr	r3, [r3, #0]
   b6312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6314:	9301      	str	r3, [sp, #4]
   b6316:	bd08      	pop	{r3, pc}
   b6318:	0003021c 	.word	0x0003021c

000b631c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b631c:	b508      	push	{r3, lr}
   b631e:	4b02      	ldr	r3, [pc, #8]	; (b6328 <abort+0xc>)
   b6320:	681b      	ldr	r3, [r3, #0]
   b6322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6324:	9301      	str	r3, [sp, #4]
   b6326:	bd08      	pop	{r3, pc}
   b6328:	0003021c 	.word	0x0003021c

000b632c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b632c:	b508      	push	{r3, lr}
   b632e:	4b02      	ldr	r3, [pc, #8]	; (b6338 <_malloc_r+0xc>)
   b6330:	681b      	ldr	r3, [r3, #0]
   b6332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6334:	9301      	str	r3, [sp, #4]
   b6336:	bd08      	pop	{r3, pc}
   b6338:	0003021c 	.word	0x0003021c

000b633c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b633c:	b508      	push	{r3, lr}
   b633e:	4b02      	ldr	r3, [pc, #8]	; (b6348 <__assert_func+0xc>)
   b6340:	681b      	ldr	r3, [r3, #0]
   b6342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6344:	9301      	str	r3, [sp, #4]
   b6346:	bd08      	pop	{r3, pc}
   b6348:	0003021c 	.word	0x0003021c

000b634c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b634c:	b508      	push	{r3, lr}
   b634e:	4b02      	ldr	r3, [pc, #8]	; (b6358 <newlib_impure_ptr_callback+0xc>)
   b6350:	681b      	ldr	r3, [r3, #0]
   b6352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6354:	9301      	str	r3, [sp, #4]
   b6356:	bd08      	pop	{r3, pc}
   b6358:	0003021c 	.word	0x0003021c

000b635c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b635c:	2100      	movs	r1, #0
   b635e:	f7ff bedd 	b.w	b611c <system_delay_ms>

000b6362 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6362:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6364:	6883      	ldr	r3, [r0, #8]
   b6366:	4604      	mov	r4, r0
   b6368:	b90b      	cbnz	r3, b636e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b636a:	f001 fadb 	bl	b7924 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b636e:	68c3      	ldr	r3, [r0, #12]
   b6370:	4798      	blx	r3
      if (_M_manager)
   b6372:	68a3      	ldr	r3, [r4, #8]
   b6374:	b11b      	cbz	r3, b637e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6376:	2203      	movs	r2, #3
   b6378:	4621      	mov	r1, r4
   b637a:	4620      	mov	r0, r4
   b637c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b637e:	4620      	mov	r0, r4
   b6380:	2110      	movs	r1, #16
}
   b6382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6386:	f7fd be88 	b.w	b409a <_ZdlPvj>

000b638a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b638a:	b510      	push	{r4, lr}
      if (_M_manager)
   b638c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b638e:	4604      	mov	r4, r0
      if (_M_manager)
   b6390:	b113      	cbz	r3, b6398 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6392:	2203      	movs	r2, #3
   b6394:	4601      	mov	r1, r0
   b6396:	4798      	blx	r3
    }
   b6398:	4620      	mov	r0, r4
   b639a:	bd10      	pop	{r4, pc}

000b639c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b639c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b639e:	6843      	ldr	r3, [r0, #4]
   b63a0:	3b01      	subs	r3, #1
    {
   b63a2:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b63a4:	6043      	str	r3, [r0, #4]
   b63a6:	b963      	cbnz	r3, b63c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b63a8:	6803      	ldr	r3, [r0, #0]
   b63aa:	689b      	ldr	r3, [r3, #8]
   b63ac:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b63ae:	68a3      	ldr	r3, [r4, #8]
   b63b0:	3b01      	subs	r3, #1
   b63b2:	60a3      	str	r3, [r4, #8]
   b63b4:	b92b      	cbnz	r3, b63c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b63b6:	6823      	ldr	r3, [r4, #0]
   b63b8:	4620      	mov	r0, r4
   b63ba:	68db      	ldr	r3, [r3, #12]
    }
   b63bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b63c0:	4718      	bx	r3
    }
   b63c2:	bd10      	pop	{r4, pc}

000b63c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b63c4:	b510      	push	{r4, lr}
   b63c6:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b63c8:	6800      	ldr	r0, [r0, #0]
   b63ca:	b108      	cbz	r0, b63d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b63cc:	f7ff ffe6 	bl	b639c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b63d0:	4620      	mov	r0, r4
   b63d2:	bd10      	pop	{r4, pc}

000b63d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b63d4:	b513      	push	{r0, r1, r4, lr}
   b63d6:	460b      	mov	r3, r1
   b63d8:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b63da:	e9d0 0100 	ldrd	r0, r1, [r0]
   b63de:	466c      	mov	r4, sp
   b63e0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b63e4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b63e8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b63ec:	e894 0003 	ldmia.w	r4, {r0, r1}
   b63f0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b63f4:	b002      	add	sp, #8
   b63f6:	bd10      	pop	{r4, pc}

000b63f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b63f8:	4802      	ldr	r0, [pc, #8]	; (b6404 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b63fa:	2300      	movs	r3, #0
   b63fc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b63fe:	f7ff bcdd 	b.w	b5dbc <os_mutex_recursive_create>
   b6402:	bf00      	nop
   b6404:	2003e684 	.word	0x2003e684

000b6408 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b6408:	2200      	movs	r2, #0
   b640a:	6840      	ldr	r0, [r0, #4]
   b640c:	4611      	mov	r1, r2
   b640e:	f7ff bf1d 	b.w	b624c <network_ready>

000b6412 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b6412:	2200      	movs	r2, #0
   b6414:	6840      	ldr	r0, [r0, #4]
   b6416:	4611      	mov	r1, r2
   b6418:	f7ff bf38 	b.w	b628c <network_listening>

000b641c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b641c:	2200      	movs	r2, #0
   b641e:	6840      	ldr	r0, [r0, #4]
   b6420:	4611      	mov	r1, r2
   b6422:	f7ff bf43 	b.w	b62ac <network_get_listen_timeout>

000b6426 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6426:	6840      	ldr	r0, [r0, #4]
   b6428:	2200      	movs	r2, #0
   b642a:	f7ff bf37 	b.w	b629c <network_set_listen_timeout>

000b642e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b642e:	6840      	ldr	r0, [r0, #4]
   b6430:	2200      	movs	r2, #0
   b6432:	f081 0101 	eor.w	r1, r1, #1
   b6436:	f7ff bf21 	b.w	b627c <network_listen>

000b643a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b643a:	2300      	movs	r3, #0
   b643c:	6840      	ldr	r0, [r0, #4]
   b643e:	461a      	mov	r2, r3
   b6440:	4619      	mov	r1, r3
   b6442:	f7ff bf13 	b.w	b626c <network_off>

000b6446 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6446:	2300      	movs	r3, #0
   b6448:	6840      	ldr	r0, [r0, #4]
   b644a:	461a      	mov	r2, r3
   b644c:	4619      	mov	r1, r3
   b644e:	f7ff bf05 	b.w	b625c <network_on>

000b6452 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6452:	2200      	movs	r2, #0
   b6454:	6840      	ldr	r0, [r0, #4]
   b6456:	4611      	mov	r1, r2
   b6458:	f7ff bee8 	b.w	b622c <network_connecting>

000b645c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b645c:	6840      	ldr	r0, [r0, #4]
   b645e:	2200      	movs	r2, #0
   b6460:	2102      	movs	r1, #2
   b6462:	f7ff beeb 	b.w	b623c <network_disconnect>

000b6466 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6466:	2300      	movs	r3, #0
   b6468:	6840      	ldr	r0, [r0, #4]
   b646a:	461a      	mov	r2, r3
   b646c:	f7ff bed6 	b.w	b621c <network_connect>

000b6470 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b6470:	4b08      	ldr	r3, [pc, #32]	; (b6494 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b6472:	b510      	push	{r4, lr}
   b6474:	2428      	movs	r4, #40	; 0x28
   b6476:	4622      	mov	r2, r4
   b6478:	4618      	mov	r0, r3
   b647a:	2100      	movs	r1, #0
   b647c:	f001 fe98 	bl	b81b0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6480:	4b05      	ldr	r3, [pc, #20]	; (b6498 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b6482:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b6484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6488:	6042      	str	r2, [r0, #4]
   b648a:	2204      	movs	r2, #4
   b648c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b648e:	4a03      	ldr	r2, [pc, #12]	; (b649c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b6490:	601a      	str	r2, [r3, #0]
   b6492:	bd10      	pop	{r4, pc}
   b6494:	2003e690 	.word	0x2003e690
   b6498:	2003e688 	.word	0x2003e688
   b649c:	000b8518 	.word	0x000b8518

000b64a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b64a0:	4770      	bx	lr

000b64a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b64a2:	2000      	movs	r0, #0
   b64a4:	4770      	bx	lr

000b64a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b64a6:	b510      	push	{r4, lr}
   b64a8:	2110      	movs	r1, #16
   b64aa:	4604      	mov	r4, r0
   b64ac:	f7fd fdf5 	bl	b409a <_ZdlPvj>
   b64b0:	4620      	mov	r0, r4
   b64b2:	bd10      	pop	{r4, pc}

000b64b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b64b4:	b508      	push	{r3, lr}
      { delete this; }
   b64b6:	f7ff fff6 	bl	b64a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b64ba:	bd08      	pop	{r3, pc}

000b64bc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b64bc:	b530      	push	{r4, r5, lr}
        type_(type) {
   b64be:	2200      	movs	r2, #0
   b64c0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b64c4:	6002      	str	r2, [r0, #0]
   b64c6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b64c8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b64ca:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b64cc:	680c      	ldr	r4, [r1, #0]
   b64ce:	8085      	strh	r5, [r0, #4]
   b64d0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b64d2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b64d4:	bd30      	pop	{r4, r5, pc}

000b64d6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b64d6:	b510      	push	{r4, lr}
   b64d8:	4604      	mov	r4, r0
    free((void*)msg_);
   b64da:	6800      	ldr	r0, [r0, #0]
   b64dc:	f7ff ff06 	bl	b62ec <free>
}
   b64e0:	4620      	mov	r0, r4
   b64e2:	bd10      	pop	{r4, pc}

000b64e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b64e4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b64e6:	68c4      	ldr	r4, [r0, #12]
   b64e8:	b1f4      	cbz	r4, b6528 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b64ea:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b64ec:	2b02      	cmp	r3, #2
   b64ee:	d103      	bne.n	b64f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b64f0:	f104 000c 	add.w	r0, r4, #12
   b64f4:	f7ff ffef 	bl	b64d6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b64f8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b64fa:	b135      	cbz	r5, b650a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b64fc:	4628      	mov	r0, r5
   b64fe:	f7ff ff44 	bl	b638a <_ZNSt14_Function_baseD1Ev>
   b6502:	2110      	movs	r1, #16
   b6504:	4628      	mov	r0, r5
   b6506:	f7fd fdc8 	bl	b409a <_ZdlPvj>
   b650a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b650c:	b135      	cbz	r5, b651c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b650e:	4628      	mov	r0, r5
   b6510:	f7ff ff3b 	bl	b638a <_ZNSt14_Function_baseD1Ev>
   b6514:	2110      	movs	r1, #16
   b6516:	4628      	mov	r0, r5
   b6518:	f7fd fdbf 	bl	b409a <_ZdlPvj>
   b651c:	4620      	mov	r0, r4
   b651e:	2114      	movs	r1, #20
   b6520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6524:	f7fd bdb9 	b.w	b409a <_ZdlPvj>
   b6528:	bd38      	pop	{r3, r4, r5, pc}

000b652a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b652a:	680b      	ldr	r3, [r1, #0]
   b652c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b652e:	684b      	ldr	r3, [r1, #4]
   b6530:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6532:	b113      	cbz	r3, b653a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6534:	685a      	ldr	r2, [r3, #4]
   b6536:	3201      	adds	r2, #1
   b6538:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b653a:	4770      	bx	lr

000b653c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b653c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b653e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6540:	4668      	mov	r0, sp
   b6542:	460d      	mov	r5, r1
   b6544:	f7ff fff1 	bl	b652a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6548:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b654a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b654c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b654e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6550:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6552:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6554:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b6556:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6558:	f7ff ff34 	bl	b63c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b655c:	b135      	cbz	r5, b656c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b655e:	1d28      	adds	r0, r5, #4
   b6560:	f7ff ff30 	bl	b63c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6564:	2108      	movs	r1, #8
   b6566:	4628      	mov	r0, r5
   b6568:	f7fd fd97 	bl	b409a <_ZdlPvj>
        return p;
    }
   b656c:	4620      	mov	r0, r4
   b656e:	b003      	add	sp, #12
   b6570:	bd30      	pop	{r4, r5, pc}

000b6572 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b6572:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6574:	b510      	push	{r4, lr}
      if (_M_empty())
   b6576:	b90a      	cbnz	r2, b657c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6578:	f001 f9d4 	bl	b7924 <_ZSt25__throw_bad_function_callv>
    }
   b657c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6580:	68c3      	ldr	r3, [r0, #12]
   b6582:	4718      	bx	r3

000b6584 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6584:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6586:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6588:	f100 0110 	add.w	r1, r0, #16
   b658c:	f7ff fff1 	bl	b6572 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6590:	bd08      	pop	{r3, pc}

000b6592 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6592:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6594:	b510      	push	{r4, lr}
      if (_M_empty())
   b6596:	b90a      	cbnz	r2, b659c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6598:	f001 f9c4 	bl	b7924 <_ZSt25__throw_bad_function_callv>
    }
   b659c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b65a0:	68c3      	ldr	r3, [r0, #12]
   b65a2:	4718      	bx	r3

000b65a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b65a4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b65a6:	6800      	ldr	r0, [r0, #0]
   b65a8:	f100 0110 	add.w	r1, r0, #16
   b65ac:	f7ff fff1 	bl	b6592 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b65b0:	bd08      	pop	{r3, pc}
	...

000b65b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b65b4:	b538      	push	{r3, r4, r5, lr}
   b65b6:	2300      	movs	r3, #0
   b65b8:	4604      	mov	r4, r0
   b65ba:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b65bc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b65be:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b65c0:	f7fd fd67 	bl	b4092 <_Znwj>
   b65c4:	b128      	cbz	r0, b65d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b65c6:	2301      	movs	r3, #1
   b65c8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b65cc:	4b02      	ldr	r3, [pc, #8]	; (b65d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b65ce:	6003      	str	r3, [r0, #0]
   b65d0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b65d2:	6020      	str	r0, [r4, #0]
	}
   b65d4:	4620      	mov	r0, r4
   b65d6:	bd38      	pop	{r3, r4, r5, pc}
   b65d8:	000b8554 	.word	0x000b8554

000b65dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b65dc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b65de:	2300      	movs	r3, #0
   b65e0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b65e2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b65e4:	4604      	mov	r4, r0
   b65e6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b65e8:	b12b      	cbz	r3, b65f6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b65ea:	2202      	movs	r2, #2
   b65ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b65ee:	68eb      	ldr	r3, [r5, #12]
   b65f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b65f2:	68ab      	ldr	r3, [r5, #8]
   b65f4:	60a3      	str	r3, [r4, #8]
    }
   b65f6:	4620      	mov	r0, r4
   b65f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b65fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b65fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b65fe:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b6600:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b6602:	4668      	mov	r0, sp
   b6604:	f7ff ff5a 	bl	b64bc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6608:	f04f 0302 	mov.w	r3, #2
   b660c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6610:	2a00      	cmp	r2, #0
   b6612:	d103      	bne.n	b661c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6614:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6618:	2900      	cmp	r1, #0
   b661a:	d1f7      	bne.n	b660c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b661c:	d125      	bne.n	b666a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b661e:	f104 050c 	add.w	r5, r4, #12
   b6622:	4669      	mov	r1, sp
   b6624:	4628      	mov	r0, r5
   b6626:	f7ff ff49 	bl	b64bc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b662a:	f3bf 8f5b 	dmb	ish
   b662e:	2301      	movs	r3, #1
   b6630:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6632:	2000      	movs	r0, #0
   b6634:	f104 0308 	add.w	r3, r4, #8
   b6638:	f3bf 8f5b 	dmb	ish
   b663c:	e853 6f00 	ldrex	r6, [r3]
   b6640:	e843 0200 	strex	r2, r0, [r3]
   b6644:	2a00      	cmp	r2, #0
   b6646:	d1f9      	bne.n	b663c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6648:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b664c:	b16e      	cbz	r6, b666a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b664e:	f7ff fd75 	bl	b613c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6652:	b178      	cbz	r0, b6674 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6654:	4629      	mov	r1, r5
   b6656:	4630      	mov	r0, r6
   b6658:	f7ff ff8b 	bl	b6572 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b665c:	4630      	mov	r0, r6
   b665e:	f7ff fe94 	bl	b638a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6662:	2110      	movs	r1, #16
   b6664:	4630      	mov	r0, r6
   b6666:	f7fd fd18 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b666a:	4668      	mov	r0, sp
   b666c:	f7ff ff33 	bl	b64d6 <_ZN8particle5ErrorD1Ev>
    }
   b6670:	b009      	add	sp, #36	; 0x24
   b6672:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6674:	4631      	mov	r1, r6
   b6676:	a802      	add	r0, sp, #8
   b6678:	f7ff ffb0 	bl	b65dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b667c:	68e0      	ldr	r0, [r4, #12]
   b667e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6682:	b108      	cbz	r0, b6688 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6684:	f001 fdca 	bl	b821c <strdup>
        type_(type) {
   b6688:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b668a:	2010      	movs	r0, #16
   b668c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6690:	f7fd fcff 	bl	b4092 <_Znwj>
   b6694:	4605      	mov	r5, r0
   b6696:	b1e8      	cbz	r0, b66d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6698:	2700      	movs	r7, #0
   b669a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b669c:	2018      	movs	r0, #24
   b669e:	f7fd fcf8 	bl	b4092 <_Znwj>
   b66a2:	4604      	mov	r4, r0
   b66a4:	b188      	cbz	r0, b66ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b66a6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b66a8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b66aa:	a802      	add	r0, sp, #8
   b66ac:	f7ff fe92 	bl	b63d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66b0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b66b2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b66b4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66b6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b66b8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b66ba:	a906      	add	r1, sp, #24
   b66bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b66be:	60e3      	str	r3, [r4, #12]
   b66c0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b66c4:	9205      	str	r2, [sp, #20]
   b66c6:	f7ff fef9 	bl	b64bc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b66ca:	4b08      	ldr	r3, [pc, #32]	; (b66ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b66cc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b66ce:	4b08      	ldr	r3, [pc, #32]	; (b66f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b66d0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b66d2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b66d4:	a806      	add	r0, sp, #24
   b66d6:	f7ff fefe 	bl	b64d6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b66da:	a802      	add	r0, sp, #8
   b66dc:	f7ff fe55 	bl	b638a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b66e0:	2200      	movs	r2, #0
   b66e2:	4629      	mov	r1, r5
   b66e4:	4803      	ldr	r0, [pc, #12]	; (b66f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b66e6:	f7ff fd31 	bl	b614c <application_thread_invoke>
   b66ea:	e7b7      	b.n	b665c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b66ec:	000b6585 	.word	0x000b6585
   b66f0:	000b6809 	.word	0x000b6809
   b66f4:	000b6363 	.word	0x000b6363

000b66f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b66f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b66fc:	b08b      	sub	sp, #44	; 0x2c
   b66fe:	4605      	mov	r5, r0
   b6700:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6704:	460f      	mov	r7, r1
   b6706:	4690      	mov	r8, r2
   b6708:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b670a:	f7ff fd67 	bl	b61dc <spark_cloud_flag_connected>
   b670e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6710:	4683      	mov	fp, r0
   b6712:	bb38      	cbnz	r0, b6764 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6714:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6718:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b671a:	a905      	add	r1, sp, #20
   b671c:	4630      	mov	r0, r6
   b671e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6722:	f7ff fecb 	bl	b64bc <_ZN8particle5ErrorC1EOS0_>
   b6726:	2014      	movs	r0, #20
   b6728:	f7fd fcb3 	bl	b4092 <_Znwj>
   b672c:	4604      	mov	r4, r0
   b672e:	b148      	cbz	r0, b6744 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6730:	2302      	movs	r3, #2
   b6732:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6734:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6736:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b673a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b673c:	4631      	mov	r1, r6
   b673e:	300c      	adds	r0, #12
   b6740:	f7ff febc 	bl	b64bc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6744:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6746:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6748:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b674c:	f7ff ff32 	bl	b65b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6750:	4630      	mov	r0, r6
   b6752:	f7ff fec0 	bl	b64d6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6756:	a805      	add	r0, sp, #20
   b6758:	f7ff febd 	bl	b64d6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b675c:	4628      	mov	r0, r5
   b675e:	b00b      	add	sp, #44	; 0x2c
   b6760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6764:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6766:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6768:	2014      	movs	r0, #20
   b676a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b676e:	9307      	str	r3, [sp, #28]
   b6770:	f7fd fc8f 	bl	b4092 <_Znwj>
   b6774:	4601      	mov	r1, r0
   b6776:	b118      	cbz	r0, b6780 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6778:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b677c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b677e:	7044      	strb	r4, [r0, #1]
   b6780:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6782:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6784:	f7ff ff16 	bl	b65b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6788:	4b1e      	ldr	r3, [pc, #120]	; (b6804 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b678a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b678c:	2008      	movs	r0, #8
   b678e:	f7fd fc80 	bl	b4092 <_Znwj>
   b6792:	4604      	mov	r4, r0
   b6794:	b110      	cbz	r0, b679c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6796:	a903      	add	r1, sp, #12
   b6798:	f7ff fec7 	bl	b652a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b679c:	9600      	str	r6, [sp, #0]
   b679e:	fa5f f38a 	uxtb.w	r3, sl
   b67a2:	464a      	mov	r2, r9
   b67a4:	4641      	mov	r1, r8
   b67a6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b67a8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b67aa:	f7ff fd1f 	bl	b61ec <spark_send_event>
   b67ae:	b9b8      	cbnz	r0, b67e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b67b0:	9b03      	ldr	r3, [sp, #12]
   b67b2:	785b      	ldrb	r3, [r3, #1]
   b67b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b67b8:	b993      	cbnz	r3, b67e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b67ba:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b67be:	a905      	add	r1, sp, #20
   b67c0:	a803      	add	r0, sp, #12
   b67c2:	9205      	str	r2, [sp, #20]
   b67c4:	f8ad 3018 	strh.w	r3, [sp, #24]
   b67c8:	f7ff ff18 	bl	b65fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b67cc:	a805      	add	r0, sp, #20
   b67ce:	f7ff fe82 	bl	b64d6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b67d2:	a805      	add	r0, sp, #20
   b67d4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b67d6:	f7ff feb1 	bl	b653c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b67da:	a806      	add	r0, sp, #24
   b67dc:	f7ff fdf2 	bl	b63c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b67e0:	a903      	add	r1, sp, #12
   b67e2:	a805      	add	r0, sp, #20
   b67e4:	f7ff fea1 	bl	b652a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b67e8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b67ea:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b67ec:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b67ee:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b67f0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b67f2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b67f4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b67f6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b67f8:	f7ff fde4 	bl	b63c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b67fc:	a804      	add	r0, sp, #16
   b67fe:	f7ff fde1 	bl	b63c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6802:	e7ab      	b.n	b675c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6804:	000b6885 	.word	0x000b6885

000b6808 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6808:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b680a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b680c:	4605      	mov	r5, r0
	switch (__op)
   b680e:	d103      	bne.n	b6818 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6810:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6812:	6003      	str	r3, [r0, #0]
      }
   b6814:	2000      	movs	r0, #0
   b6816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6818:	2a02      	cmp	r2, #2
   b681a:	d010      	beq.n	b683e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b681c:	2a03      	cmp	r2, #3
   b681e:	d1f9      	bne.n	b6814 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6820:	6804      	ldr	r4, [r0, #0]
   b6822:	2c00      	cmp	r4, #0
   b6824:	d0f6      	beq.n	b6814 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6826:	f104 0010 	add.w	r0, r4, #16
   b682a:	f7ff fe54 	bl	b64d6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b682e:	4620      	mov	r0, r4
   b6830:	f7ff fdab 	bl	b638a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6834:	2118      	movs	r1, #24
   b6836:	4620      	mov	r0, r4
   b6838:	f7fd fc2f 	bl	b409a <_ZdlPvj>
   b683c:	e7ea      	b.n	b6814 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b683e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6840:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6842:	f7fd fc26 	bl	b4092 <_Znwj>
   b6846:	4604      	mov	r4, r0
   b6848:	b150      	cbz	r0, b6860 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b684a:	4631      	mov	r1, r6
   b684c:	f7ff fec6 	bl	b65dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6850:	6930      	ldr	r0, [r6, #16]
   b6852:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6856:	b108      	cbz	r0, b685c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6858:	f001 fce0 	bl	b821c <strdup>
        type_(type) {
   b685c:	6120      	str	r0, [r4, #16]
   b685e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6860:	602c      	str	r4, [r5, #0]
	}
   b6862:	e7d7      	b.n	b6814 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6864 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6864:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6866:	2300      	movs	r3, #0
   b6868:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b686a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b686c:	4604      	mov	r4, r0
   b686e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6870:	b12b      	cbz	r3, b687e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6872:	2202      	movs	r2, #2
   b6874:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6876:	68eb      	ldr	r3, [r5, #12]
   b6878:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b687a:	68ab      	ldr	r3, [r5, #8]
   b687c:	60a3      	str	r3, [r4, #8]
    }
   b687e:	4620      	mov	r0, r4
   b6880:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6884 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6884:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6886:	b089      	sub	sp, #36	; 0x24
   b6888:	4604      	mov	r4, r0
   b688a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b688c:	a801      	add	r0, sp, #4
   b688e:	4611      	mov	r1, r2
   b6890:	f7ff fe54 	bl	b653c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6894:	b1a4      	cbz	r4, b68c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6896:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6898:	b11d      	cbz	r5, b68a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b689a:	4628      	mov	r0, r5
   b689c:	f001 fcbe 	bl	b821c <strdup>
   b68a0:	4605      	mov	r5, r0
   b68a2:	a801      	add	r0, sp, #4
   b68a4:	a903      	add	r1, sp, #12
        type_(type) {
   b68a6:	9503      	str	r5, [sp, #12]
   b68a8:	f8ad 4010 	strh.w	r4, [sp, #16]
   b68ac:	f7ff fea6 	bl	b65fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b68b0:	a803      	add	r0, sp, #12
   b68b2:	f7ff fe10 	bl	b64d6 <_ZN8particle5ErrorD1Ev>
   b68b6:	a802      	add	r0, sp, #8
   b68b8:	f7ff fd84 	bl	b63c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b68bc:	b009      	add	sp, #36	; 0x24
   b68be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b68c0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b68c2:	2301      	movs	r3, #1
   b68c4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b68c8:	2a00      	cmp	r2, #0
   b68ca:	d103      	bne.n	b68d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b68cc:	e8c5 3f41 	strexb	r1, r3, [r5]
   b68d0:	2900      	cmp	r1, #0
   b68d2:	d1f7      	bne.n	b68c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b68d4:	d1ef      	bne.n	b68b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b68d6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b68d8:	f3bf 8f5b 	dmb	ish
   b68dc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b68de:	1d2b      	adds	r3, r5, #4
   b68e0:	f3bf 8f5b 	dmb	ish
   b68e4:	e853 6f00 	ldrex	r6, [r3]
   b68e8:	e843 4200 	strex	r2, r4, [r3]
   b68ec:	2a00      	cmp	r2, #0
   b68ee:	d1f9      	bne.n	b68e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b68f0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b68f4:	2e00      	cmp	r6, #0
   b68f6:	d0de      	beq.n	b68b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b68f8:	4620      	mov	r0, r4
   b68fa:	f7ff fc1f 	bl	b613c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b68fe:	4607      	mov	r7, r0
   b6900:	b160      	cbz	r0, b691c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6902:	f105 010c 	add.w	r1, r5, #12
   b6906:	4630      	mov	r0, r6
   b6908:	f7ff fe43 	bl	b6592 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b690c:	4630      	mov	r0, r6
   b690e:	f7ff fd3c 	bl	b638a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6912:	2110      	movs	r1, #16
   b6914:	4630      	mov	r0, r6
   b6916:	f7fd fbc0 	bl	b409a <_ZdlPvj>
   b691a:	e7cc      	b.n	b68b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b691c:	4631      	mov	r1, r6
   b691e:	a803      	add	r0, sp, #12
   b6920:	f7ff ffa0 	bl	b6864 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6924:	7b2b      	ldrb	r3, [r5, #12]
   b6926:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b692a:	2010      	movs	r0, #16
   b692c:	f7fd fbb1 	bl	b4092 <_Znwj>
   b6930:	4605      	mov	r5, r0
   b6932:	b1d0      	cbz	r0, b696a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6934:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6936:	2014      	movs	r0, #20
   b6938:	f7fd fbab 	bl	b4092 <_Znwj>
   b693c:	4604      	mov	r4, r0
   b693e:	b178      	cbz	r0, b6960 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6940:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6942:	4601      	mov	r1, r0
   b6944:	a803      	add	r0, sp, #12
   b6946:	f7ff fd45 	bl	b63d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b694a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b694c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b694e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6950:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6952:	9205      	str	r2, [sp, #20]
   b6954:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6956:	60e3      	str	r3, [r4, #12]
   b6958:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b695c:	9206      	str	r2, [sp, #24]
   b695e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6960:	4b06      	ldr	r3, [pc, #24]	; (b697c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6962:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6964:	4b06      	ldr	r3, [pc, #24]	; (b6980 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6966:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6968:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b696a:	a803      	add	r0, sp, #12
   b696c:	f7ff fd0d 	bl	b638a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6970:	2200      	movs	r2, #0
   b6972:	4629      	mov	r1, r5
   b6974:	4803      	ldr	r0, [pc, #12]	; (b6984 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6976:	f7ff fbe9 	bl	b614c <application_thread_invoke>
   b697a:	e7c7      	b.n	b690c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b697c:	000b65a5 	.word	0x000b65a5
   b6980:	000b6989 	.word	0x000b6989
   b6984:	000b6363 	.word	0x000b6363

000b6988 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6988:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b698a:	b570      	push	{r4, r5, r6, lr}
   b698c:	4604      	mov	r4, r0
	switch (__op)
   b698e:	d103      	bne.n	b6998 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6990:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6992:	6003      	str	r3, [r0, #0]
      }
   b6994:	2000      	movs	r0, #0
   b6996:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6998:	2a02      	cmp	r2, #2
   b699a:	d00c      	beq.n	b69b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b699c:	2a03      	cmp	r2, #3
   b699e:	d1f9      	bne.n	b6994 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b69a0:	6804      	ldr	r4, [r0, #0]
   b69a2:	2c00      	cmp	r4, #0
   b69a4:	d0f6      	beq.n	b6994 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b69a6:	4620      	mov	r0, r4
   b69a8:	f7ff fcef 	bl	b638a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b69ac:	2114      	movs	r1, #20
   b69ae:	4620      	mov	r0, r4
   b69b0:	f7fd fb73 	bl	b409a <_ZdlPvj>
   b69b4:	e7ee      	b.n	b6994 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b69b6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b69b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b69ba:	f7fd fb6a 	bl	b4092 <_Znwj>
   b69be:	4605      	mov	r5, r0
   b69c0:	b120      	cbz	r0, b69cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b69c2:	4631      	mov	r1, r6
   b69c4:	f7ff ff4e 	bl	b6864 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b69c8:	7c33      	ldrb	r3, [r6, #16]
   b69ca:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b69cc:	6025      	str	r5, [r4, #0]
	}
   b69ce:	e7e1      	b.n	b6994 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b69d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b69d0:	2200      	movs	r2, #0
   b69d2:	6840      	ldr	r0, [r0, #4]
   b69d4:	4611      	mov	r1, r2
   b69d6:	f7ff bc59 	b.w	b628c <network_listening>

000b69da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b69da:	2200      	movs	r2, #0
   b69dc:	6840      	ldr	r0, [r0, #4]
   b69de:	4611      	mov	r1, r2
   b69e0:	f7ff bc64 	b.w	b62ac <network_get_listen_timeout>

000b69e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b69e4:	6840      	ldr	r0, [r0, #4]
   b69e6:	2200      	movs	r2, #0
   b69e8:	f7ff bc58 	b.w	b629c <network_set_listen_timeout>

000b69ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b69ec:	6840      	ldr	r0, [r0, #4]
   b69ee:	2200      	movs	r2, #0
   b69f0:	f081 0101 	eor.w	r1, r1, #1
   b69f4:	f7ff bc42 	b.w	b627c <network_listen>

000b69f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b69f8:	2300      	movs	r3, #0
   b69fa:	6840      	ldr	r0, [r0, #4]
   b69fc:	461a      	mov	r2, r3
   b69fe:	4619      	mov	r1, r3
   b6a00:	f7ff bc34 	b.w	b626c <network_off>

000b6a04 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6a04:	2300      	movs	r3, #0
   b6a06:	6840      	ldr	r0, [r0, #4]
   b6a08:	461a      	mov	r2, r3
   b6a0a:	4619      	mov	r1, r3
   b6a0c:	f7ff bc26 	b.w	b625c <network_on>

000b6a10 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6a10:	2200      	movs	r2, #0
   b6a12:	6840      	ldr	r0, [r0, #4]
   b6a14:	4611      	mov	r1, r2
   b6a16:	f7ff bc19 	b.w	b624c <network_ready>

000b6a1a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6a1a:	2200      	movs	r2, #0
   b6a1c:	6840      	ldr	r0, [r0, #4]
   b6a1e:	4611      	mov	r1, r2
   b6a20:	f7ff bc04 	b.w	b622c <network_connecting>

000b6a24 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6a24:	6840      	ldr	r0, [r0, #4]
   b6a26:	2200      	movs	r2, #0
   b6a28:	2102      	movs	r1, #2
   b6a2a:	f7ff bc07 	b.w	b623c <network_disconnect>

000b6a2e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6a2e:	2300      	movs	r3, #0
   b6a30:	6840      	ldr	r0, [r0, #4]
   b6a32:	461a      	mov	r2, r3
   b6a34:	f7ff bbf2 	b.w	b621c <network_connect>

000b6a38 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b6a38:	4b02      	ldr	r3, [pc, #8]	; (b6a44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6a3a:	2203      	movs	r2, #3
   b6a3c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6a3e:	4a02      	ldr	r2, [pc, #8]	; (b6a48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6a40:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6a42:	4770      	bx	lr
   b6a44:	2003e6b8 	.word	0x2003e6b8
   b6a48:	000b8570 	.word	0x000b8570

000b6a4c <_ZN8particle6detail9_getVCellEhh>:
namespace particle {
namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   b6a4c:	0909      	lsrs	r1, r1, #4
   b6a4e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   b6a52:	ee07 1a90 	vmov	s15, r1
        return value / 800.0;
    }
   b6a56:	ed9f 0a03 	vldr	s0, [pc, #12]	; b6a64 <_ZN8particle6detail9_getVCellEhh+0x18>
        float value = (float)((MSB << 4) | (LSB >> 4));
   b6a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
   b6a5e:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b6a62:	4770      	bx	lr
   b6a64:	44480000 	.word	0x44480000

000b6a68 <_ZN8particle6detail7_getSoCEhhh>:

        // Maxim ModelGauge doc only mentions 18 and 19 bit
        // MSB is the whole number
        // LSB is the decimal, resolution in units 1/256%
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b6a68:	eb01 2300 	add.w	r3, r1, r0, lsl #8
   b6a6c:	ee00 3a10 	vmov	s0, r3
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
   b6a70:	2a13      	cmp	r2, #19
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b6a72:	bf0c      	ite	eq
   b6a74:	eddf 7a04 	vldreq	s15, [pc, #16]	; b6a88 <_ZN8particle6detail7_getSoCEhhh+0x20>
        } else { // default to 18-bit calculation
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b6a78:	eddf 7a04 	vldrne	s15, [pc, #16]	; b6a8c <_ZN8particle6detail7_getSoCEhhh+0x24>
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b6a7c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b6a80:	ee20 0a27 	vmul.f32	s0, s0, s15
        }
        return soc_percent;

    }
   b6a84:	4770      	bx	lr
   b6a86:	bf00      	nop
   b6a88:	3b000000 	.word	0x3b000000
   b6a8c:	3b800000 	.word	0x3b800000

000b6a90 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b6a90:	6800      	ldr	r0, [r0, #0]
   b6a92:	f000 b91c 	b.w	b6cce <_ZN7TwoWire4lockEv>

000b6a96 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b6a96:	b510      	push	{r4, lr}
   b6a98:	4604      	mov	r4, r0
      lock_(_lock) {
   b6a9a:	6001      	str	r1, [r0, #0]
   b6a9c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b6a9e:	b10a      	cbz	r2, b6aa4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b6aa0:	f7ff fff6 	bl	b6a90 <_ZN9FuelGauge4lockEv>
}
   b6aa4:	4620      	mov	r0, r4
   b6aa6:	bd10      	pop	{r4, pc}

000b6aa8 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b6aa8:	b513      	push	{r0, r1, r4, lr}
   b6aaa:	4604      	mov	r4, r0
   b6aac:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b6aae:	f000 fed1 	bl	b7854 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b6ab2:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b6ab4:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b6ab6:	4620      	mov	r0, r4
   b6ab8:	f7ff ffed 	bl	b6a96 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b6abc:	4620      	mov	r0, r4
   b6abe:	b002      	add	sp, #8
   b6ac0:	bd10      	pop	{r4, pc}

000b6ac2 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b6ac2:	6800      	ldr	r0, [r0, #0]
   b6ac4:	f000 b90c 	b.w	b6ce0 <_ZN7TwoWire6unlockEv>

000b6ac8 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b6ac8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6acc:	4604      	mov	r4, r0
   b6ace:	460d      	mov	r5, r1
   b6ad0:	4617      	mov	r7, r2
   b6ad2:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b6ad4:	f7ff ffdc 	bl	b6a90 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6ad8:	2236      	movs	r2, #54	; 0x36
   b6ada:	2300      	movs	r3, #0
   b6adc:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b6ae0:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b6ae2:	230a      	movs	r3, #10
   b6ae4:	f04f 0801 	mov.w	r8, #1
   b6ae8:	4669      	mov	r1, sp
   b6aea:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b6aee:	f000 f8d2 	bl	b6c96 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b6af2:	6820      	ldr	r0, [r4, #0]
   b6af4:	6803      	ldr	r3, [r0, #0]
   b6af6:	4629      	mov	r1, r5
   b6af8:	689b      	ldr	r3, [r3, #8]
   b6afa:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b6afc:	6820      	ldr	r0, [r4, #0]
   b6afe:	4641      	mov	r1, r8
   b6b00:	f000 f8e1 	bl	b6cc6 <_ZN7TwoWire15endTransmissionEh>
   b6b04:	4605      	mov	r5, r0
   b6b06:	b140      	cbz	r0, b6b1a <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b6b08:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   b6b0c:	4620      	mov	r0, r4
   b6b0e:	f7ff ffd8 	bl	b6ac2 <_ZN9FuelGauge6unlockEv>
}
   b6b12:	4628      	mov	r0, r5
   b6b14:	b004      	add	sp, #16
   b6b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b6b1a:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b6b1c:	6820      	ldr	r0, [r4, #0]
   b6b1e:	9301      	str	r3, [sp, #4]
   b6b20:	4669      	mov	r1, sp
   b6b22:	f000 f8a1 	bl	b6c68 <_ZN7TwoWire11requestFromERK16WireTransmission>
   b6b26:	2802      	cmp	r0, #2
   b6b28:	d1ee      	bne.n	b6b08 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b6b2a:	6820      	ldr	r0, [r4, #0]
   b6b2c:	6803      	ldr	r3, [r0, #0]
   b6b2e:	695b      	ldr	r3, [r3, #20]
   b6b30:	4798      	blx	r3
   b6b32:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b6b34:	6820      	ldr	r0, [r4, #0]
   b6b36:	6803      	ldr	r3, [r0, #0]
   b6b38:	695b      	ldr	r3, [r3, #20]
   b6b3a:	4798      	blx	r3
   b6b3c:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b6b3e:	e7e5      	b.n	b6b0c <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b6b40 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   b6b40:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   b6b42:	2300      	movs	r3, #0
   b6b44:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b6b48:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b6b4c:	f10d 0206 	add.w	r2, sp, #6
   b6b50:	f10d 0307 	add.w	r3, sp, #7
   b6b54:	2102      	movs	r1, #2
   b6b56:	f7ff ffb7 	bl	b6ac8 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b6b5a:	b940      	cbnz	r0, b6b6e <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   b6b5c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b6b60:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b6b64:	b003      	add	sp, #12
   b6b66:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   b6b6a:	f7ff bf6f 	b.w	b6a4c <_ZN8particle6detail9_getVCellEhh>
}
   b6b6e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b6b72:	b003      	add	sp, #12
   b6b74:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b78 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   b6b78:	b510      	push	{r4, lr}
   b6b7a:	b08c      	sub	sp, #48	; 0x30
    byte MSB = 0;
   b6b7c:	2300      	movs	r3, #0
   b6b7e:	f88d 300e 	strb.w	r3, [sp, #14]
    byte LSB = 0;
   b6b82:	f88d 300f 	strb.w	r3, [sp, #15]
    if (readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b6b86:	2104      	movs	r1, #4
   b6b88:	f10d 030f 	add.w	r3, sp, #15
   b6b8c:	f10d 020e 	add.w	r2, sp, #14
   b6b90:	f7ff ff9a 	bl	b6ac8 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b6b94:	4601      	mov	r1, r0
   b6b96:	b9c8      	cbnz	r0, b6bcc <_ZN9FuelGauge6getSoCEv+0x54>
    hal_power_config config = {};
   b6b98:	2420      	movs	r4, #32
   b6b9a:	9001      	str	r0, [sp, #4]
   b6b9c:	4622      	mov	r2, r4
   b6b9e:	a804      	add	r0, sp, #16
   b6ba0:	f001 fb06 	bl	b81b0 <memset>
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b6ba4:	9901      	ldr	r1, [sp, #4]
    config.size = sizeof(config);
   b6ba6:	f88d 4015 	strb.w	r4, [sp, #21]
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b6baa:	a804      	add	r0, sp, #16
   b6bac:	f7ff fafc 	bl	b61a8 <system_power_management_get_config>
   b6bb0:	b950      	cbnz	r0, b6bc8 <_ZN9FuelGauge6getSoCEv+0x50>
        soc_bits = config.soc_bits;
   b6bb2:	f89d 201e 	ldrb.w	r2, [sp, #30]
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b6bb6:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b6bba:	f89d 000e 	ldrb.w	r0, [sp, #14]
}
   b6bbe:	b00c      	add	sp, #48	; 0x30
   b6bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b6bc4:	f7ff bf50 	b.w	b6a68 <_ZN8particle6detail7_getSoCEhhh>
    int soc_bits = particle::power::DEFAULT_SOC_18_BIT_PRECISION;
   b6bc8:	2212      	movs	r2, #18
   b6bca:	e7f4      	b.n	b6bb6 <_ZN9FuelGauge6getSoCEv+0x3e>
}
   b6bcc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b6bd0:	b00c      	add	sp, #48	; 0x30
   b6bd2:	bd10      	pop	{r4, pc}

000b6bd4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6bd4:	4770      	bx	lr

000b6bd6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6bd8:	4606      	mov	r6, r0
   b6bda:	4615      	mov	r5, r2
   b6bdc:	460c      	mov	r4, r1
   b6bde:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6be0:	42bc      	cmp	r4, r7
   b6be2:	d006      	beq.n	b6bf2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6be4:	6833      	ldr	r3, [r6, #0]
   b6be6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6bea:	689b      	ldr	r3, [r3, #8]
   b6bec:	4630      	mov	r0, r6
   b6bee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6bf0:	e7f6      	b.n	b6be0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6bf2:	4628      	mov	r0, r5
   b6bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6bf6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6bf6:	7c00      	ldrb	r0, [r0, #16]
   b6bf8:	2200      	movs	r2, #0
   b6bfa:	f7ff b947 	b.w	b5e8c <hal_i2c_write>

000b6bfe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6bfe:	7c00      	ldrb	r0, [r0, #16]
   b6c00:	2100      	movs	r1, #0
   b6c02:	f7ff b94b 	b.w	b5e9c <hal_i2c_available>

000b6c06 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6c06:	7c00      	ldrb	r0, [r0, #16]
   b6c08:	2100      	movs	r1, #0
   b6c0a:	f7ff b94f 	b.w	b5eac <hal_i2c_read>

000b6c0e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6c0e:	7c00      	ldrb	r0, [r0, #16]
   b6c10:	2100      	movs	r1, #0
   b6c12:	f7ff b953 	b.w	b5ebc <hal_i2c_peek>

000b6c16 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6c16:	7c00      	ldrb	r0, [r0, #16]
   b6c18:	2100      	movs	r1, #0
   b6c1a:	f7ff b957 	b.w	b5ecc <hal_i2c_flush>

000b6c1e <_ZN7TwoWireD0Ev>:
   b6c1e:	b510      	push	{r4, lr}
   b6c20:	2114      	movs	r1, #20
   b6c22:	4604      	mov	r4, r0
   b6c24:	f7fd fa39 	bl	b409a <_ZdlPvj>
   b6c28:	4620      	mov	r0, r4
   b6c2a:	bd10      	pop	{r4, pc}

000b6c2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6c2c:	b538      	push	{r3, r4, r5, lr}
   b6c2e:	4604      	mov	r4, r0
   b6c30:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6c36:	2200      	movs	r2, #0
   b6c38:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6c3c:	4b09      	ldr	r3, [pc, #36]	; (b6c64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6c3e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6c40:	4608      	mov	r0, r1
   b6c42:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6c44:	4629      	mov	r1, r5
   b6c46:	f7ff f951 	bl	b5eec <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6c4a:	30bf      	adds	r0, #191	; 0xbf
   b6c4c:	d108      	bne.n	b6c60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6c4e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6c50:	07db      	lsls	r3, r3, #31
   b6c52:	d505      	bpl.n	b6c60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6c54:	6868      	ldr	r0, [r5, #4]
   b6c56:	f7ff fb49 	bl	b62ec <free>
    free(conf.tx_buffer);
   b6c5a:	68e8      	ldr	r0, [r5, #12]
   b6c5c:	f7ff fb46 	bl	b62ec <free>
}
   b6c60:	4620      	mov	r0, r4
   b6c62:	bd38      	pop	{r3, r4, r5, pc}
   b6c64:	000b85ac 	.word	0x000b85ac

000b6c68 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6c68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6c6a:	2200      	movs	r2, #0
   b6c6c:	2314      	movs	r3, #20
   b6c6e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6c72:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6c76:	780b      	ldrb	r3, [r1, #0]
   b6c78:	f88d 3008 	strb.w	r3, [sp, #8]
   b6c7c:	684b      	ldr	r3, [r1, #4]
   b6c7e:	9303      	str	r3, [sp, #12]
   b6c80:	68cb      	ldr	r3, [r1, #12]
   b6c82:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6c84:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6c86:	7a0b      	ldrb	r3, [r1, #8]
   b6c88:	9305      	str	r3, [sp, #20]
   b6c8a:	a901      	add	r1, sp, #4
   b6c8c:	f7ff f946 	bl	b5f1c <hal_i2c_request_ex>
}
   b6c90:	b007      	add	sp, #28
   b6c92:	f85d fb04 	ldr.w	pc, [sp], #4

000b6c96 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b6c96:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6c98:	2300      	movs	r3, #0
   b6c9a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b6c9e:	684a      	ldr	r2, [r1, #4]
   b6ca0:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b6ca2:	2314      	movs	r3, #20
    };
   b6ca4:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b6ca6:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b6caa:	780b      	ldrb	r3, [r1, #0]
    };
   b6cac:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6cae:	7a0a      	ldrb	r2, [r1, #8]
   b6cb0:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b6cb2:	7c00      	ldrb	r0, [r0, #16]
    };
   b6cb4:	f88d 3008 	strb.w	r3, [sp, #8]
   b6cb8:	aa01      	add	r2, sp, #4
   b6cba:	4619      	mov	r1, r3
   b6cbc:	f7ff f8d6 	bl	b5e6c <hal_i2c_begin_transmission>
}
   b6cc0:	b007      	add	sp, #28
   b6cc2:	f85d fb04 	ldr.w	pc, [sp], #4

000b6cc6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6cc6:	7c00      	ldrb	r0, [r0, #16]
   b6cc8:	2200      	movs	r2, #0
   b6cca:	f7ff b8d7 	b.w	b5e7c <hal_i2c_end_transmission>

000b6cce <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b6cce:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b6cd0:	2100      	movs	r1, #0
   b6cd2:	7c00      	ldrb	r0, [r0, #16]
   b6cd4:	f7ff f912 	bl	b5efc <hal_i2c_lock>
}
   b6cd8:	fab0 f080 	clz	r0, r0
   b6cdc:	0940      	lsrs	r0, r0, #5
   b6cde:	bd08      	pop	{r3, pc}

000b6ce0 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b6ce0:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b6ce2:	2100      	movs	r1, #0
   b6ce4:	7c00      	ldrb	r0, [r0, #16]
   b6ce6:	f7ff f911 	bl	b5f0c <hal_i2c_unlock>
}
   b6cea:	fab0 f080 	clz	r0, r0
   b6cee:	0940      	lsrs	r0, r0, #5
   b6cf0:	bd08      	pop	{r3, pc}

000b6cf2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6cf2:	4770      	bx	lr

000b6cf4 <_ZN9IPAddressD0Ev>:
   b6cf4:	b510      	push	{r4, lr}
   b6cf6:	2118      	movs	r1, #24
   b6cf8:	4604      	mov	r4, r0
   b6cfa:	f7fd f9ce 	bl	b409a <_ZdlPvj>
   b6cfe:	4620      	mov	r0, r4
   b6d00:	bd10      	pop	{r4, pc}

000b6d02 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6d02:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6d04:	7d03      	ldrb	r3, [r0, #20]
   b6d06:	2b06      	cmp	r3, #6
{
   b6d08:	b08d      	sub	sp, #52	; 0x34
   b6d0a:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d0c:	f100 0704 	add.w	r7, r0, #4
   b6d10:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6d14:	d012      	beq.n	b6d3c <_ZNK9IPAddress7printToER5Print+0x3a>
   b6d16:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6d1a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6d1e:	220a      	movs	r2, #10
   b6d20:	4630      	mov	r0, r6
   b6d22:	f000 f94c 	bl	b6fbe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6d26:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6d28:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6d2a:	d019      	beq.n	b6d60 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6d2c:	2c00      	cmp	r4, #0
   b6d2e:	d0f4      	beq.n	b6d1a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6d30:	212e      	movs	r1, #46	; 0x2e
   b6d32:	4630      	mov	r0, r6
   b6d34:	f000 f92a 	bl	b6f8c <_ZN5Print5printEc>
   b6d38:	4404      	add	r4, r0
   b6d3a:	e7ee      	b.n	b6d1a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d3c:	232f      	movs	r3, #47	; 0x2f
   b6d3e:	466a      	mov	r2, sp
   b6d40:	4639      	mov	r1, r7
   b6d42:	200a      	movs	r0, #10
		buf[0] = 0;
   b6d44:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d48:	f7ff f8f0 	bl	b5f2c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6d4c:	4668      	mov	r0, sp
   b6d4e:	f001 fa82 	bl	b8256 <strlen>
   b6d52:	6833      	ldr	r3, [r6, #0]
   b6d54:	4602      	mov	r2, r0
   b6d56:	68db      	ldr	r3, [r3, #12]
   b6d58:	4669      	mov	r1, sp
   b6d5a:	4630      	mov	r0, r6
   b6d5c:	4798      	blx	r3
   b6d5e:	4604      	mov	r4, r0
    }
    return n;
}
   b6d60:	4620      	mov	r0, r4
   b6d62:	b00d      	add	sp, #52	; 0x34
   b6d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b6d68 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6d68:	b510      	push	{r4, lr}
   b6d6a:	4b05      	ldr	r3, [pc, #20]	; (b6d80 <_ZN9IPAddressC1Ev+0x18>)
   b6d6c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6d6e:	2211      	movs	r2, #17
   b6d70:	f840 3b04 	str.w	r3, [r0], #4
   b6d74:	2100      	movs	r1, #0
   b6d76:	f001 fa1b 	bl	b81b0 <memset>
}
   b6d7a:	4620      	mov	r0, r4
   b6d7c:	bd10      	pop	{r4, pc}
   b6d7e:	bf00      	nop
   b6d80:	000b85d4 	.word	0x000b85d4

000b6d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6d84:	4603      	mov	r3, r0
   b6d86:	4a07      	ldr	r2, [pc, #28]	; (b6da4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6d88:	b510      	push	{r4, lr}
   b6d8a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6d8e:	f101 0210 	add.w	r2, r1, #16
   b6d92:	f851 4b04 	ldr.w	r4, [r1], #4
   b6d96:	f843 4b04 	str.w	r4, [r3], #4
   b6d9a:	4291      	cmp	r1, r2
   b6d9c:	d1f9      	bne.n	b6d92 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6d9e:	780a      	ldrb	r2, [r1, #0]
   b6da0:	701a      	strb	r2, [r3, #0]
}
   b6da2:	bd10      	pop	{r4, pc}
   b6da4:	000b85d4 	.word	0x000b85d4

000b6da8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6da8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6daa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6dae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6db2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6db6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6dba:	2304      	movs	r3, #4
   b6dbc:	6041      	str	r1, [r0, #4]
   b6dbe:	7503      	strb	r3, [r0, #20]
}
   b6dc0:	bd10      	pop	{r4, pc}
	...

000b6dc4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6dc4:	b507      	push	{r0, r1, r2, lr}
   b6dc6:	4b06      	ldr	r3, [pc, #24]	; (b6de0 <_ZN9IPAddressC1EPKh+0x1c>)
   b6dc8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6dca:	78cb      	ldrb	r3, [r1, #3]
   b6dcc:	9300      	str	r3, [sp, #0]
   b6dce:	788b      	ldrb	r3, [r1, #2]
   b6dd0:	784a      	ldrb	r2, [r1, #1]
   b6dd2:	7809      	ldrb	r1, [r1, #0]
   b6dd4:	f7ff ffe8 	bl	b6da8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6dd8:	b003      	add	sp, #12
   b6dda:	f85d fb04 	ldr.w	pc, [sp], #4
   b6dde:	bf00      	nop
   b6de0:	000b85d4 	.word	0x000b85d4

000b6de4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6de4:	4b01      	ldr	r3, [pc, #4]	; (b6dec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6de6:	4a02      	ldr	r2, [pc, #8]	; (b6df0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6de8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6dea:	4770      	bx	lr
   b6dec:	2003e6c0 	.word	0x2003e6c0
   b6df0:	000b85e0 	.word	0x000b85e0

000b6df4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6df4:	2300      	movs	r3, #0
   b6df6:	6840      	ldr	r0, [r0, #4]
   b6df8:	461a      	mov	r2, r3
   b6dfa:	f7ff ba0f 	b.w	b621c <network_connect>

000b6dfe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6dfe:	6840      	ldr	r0, [r0, #4]
   b6e00:	2200      	movs	r2, #0
   b6e02:	2102      	movs	r1, #2
   b6e04:	f7ff ba1a 	b.w	b623c <network_disconnect>

000b6e08 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6e08:	2200      	movs	r2, #0
   b6e0a:	6840      	ldr	r0, [r0, #4]
   b6e0c:	4611      	mov	r1, r2
   b6e0e:	f7ff ba0d 	b.w	b622c <network_connecting>

000b6e12 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6e12:	2200      	movs	r2, #0
   b6e14:	6840      	ldr	r0, [r0, #4]
   b6e16:	4611      	mov	r1, r2
   b6e18:	f7ff ba18 	b.w	b624c <network_ready>

000b6e1c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6e1c:	2300      	movs	r3, #0
   b6e1e:	6840      	ldr	r0, [r0, #4]
   b6e20:	461a      	mov	r2, r3
   b6e22:	4619      	mov	r1, r3
   b6e24:	f7ff ba1a 	b.w	b625c <network_on>

000b6e28 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6e28:	2300      	movs	r3, #0
   b6e2a:	6840      	ldr	r0, [r0, #4]
   b6e2c:	461a      	mov	r2, r3
   b6e2e:	4619      	mov	r1, r3
   b6e30:	f7ff ba1c 	b.w	b626c <network_off>

000b6e34 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6e34:	6840      	ldr	r0, [r0, #4]
   b6e36:	2100      	movs	r1, #0
   b6e38:	f7ff ba40 	b.w	b62bc <network_is_on>

000b6e3c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6e3c:	6840      	ldr	r0, [r0, #4]
   b6e3e:	2100      	movs	r1, #0
   b6e40:	f7ff ba44 	b.w	b62cc <network_is_off>

000b6e44 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6e44:	6840      	ldr	r0, [r0, #4]
   b6e46:	2200      	movs	r2, #0
   b6e48:	f081 0101 	eor.w	r1, r1, #1
   b6e4c:	f7ff ba16 	b.w	b627c <network_listen>

000b6e50 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6e50:	6840      	ldr	r0, [r0, #4]
   b6e52:	2200      	movs	r2, #0
   b6e54:	f7ff ba22 	b.w	b629c <network_set_listen_timeout>

000b6e58 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6e58:	2200      	movs	r2, #0
   b6e5a:	6840      	ldr	r0, [r0, #4]
   b6e5c:	4611      	mov	r1, r2
   b6e5e:	f7ff ba25 	b.w	b62ac <network_get_listen_timeout>

000b6e62 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6e62:	2200      	movs	r2, #0
   b6e64:	6840      	ldr	r0, [r0, #4]
   b6e66:	4611      	mov	r1, r2
   b6e68:	f7ff ba10 	b.w	b628c <network_listening>

000b6e6c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6e70:	b095      	sub	sp, #84	; 0x54
   b6e72:	4614      	mov	r4, r2
   b6e74:	460d      	mov	r5, r1
   b6e76:	4607      	mov	r7, r0
    IPAddress addr;
   b6e78:	f7ff ff76 	bl	b6d68 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6e7c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6e7e:	221c      	movs	r2, #28
   b6e80:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6e82:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6e84:	f001 f994 	bl	b81b0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6e88:	2340      	movs	r3, #64	; 0x40
   b6e8a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6e8c:	4620      	mov	r0, r4
   b6e8e:	466b      	mov	r3, sp
   b6e90:	aa0c      	add	r2, sp, #48	; 0x30
   b6e92:	2100      	movs	r1, #0
   b6e94:	f7ff f85a 	bl	b5f4c <netdb_getaddrinfo>
    if (!r) {
   b6e98:	4604      	mov	r4, r0
   b6e9a:	2800      	cmp	r0, #0
   b6e9c:	d14b      	bne.n	b6f36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6e9e:	4602      	mov	r2, r0
   b6ea0:	2101      	movs	r1, #1
   b6ea2:	6868      	ldr	r0, [r5, #4]
   b6ea4:	f7ff f9d2 	bl	b624c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ea8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6eaa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6eac:	4622      	mov	r2, r4
   b6eae:	6868      	ldr	r0, [r5, #4]
   b6eb0:	f7ff f9cc 	bl	b624c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6eb4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6eb6:	4681      	mov	r9, r0
        bool ok = false;
   b6eb8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6eba:	2e00      	cmp	r6, #0
   b6ebc:	d03b      	beq.n	b6f36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6ebe:	2900      	cmp	r1, #0
   b6ec0:	d139      	bne.n	b6f36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6ec2:	6873      	ldr	r3, [r6, #4]
   b6ec4:	2b02      	cmp	r3, #2
   b6ec6:	d003      	beq.n	b6ed0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6ec8:	2b0a      	cmp	r3, #10
   b6eca:	d011      	beq.n	b6ef0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ecc:	69f6      	ldr	r6, [r6, #28]
   b6ece:	e7f4      	b.n	b6eba <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6ed0:	f1b8 0f00 	cmp.w	r8, #0
   b6ed4:	d0fa      	beq.n	b6ecc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6ed6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6ed8:	a806      	add	r0, sp, #24
   b6eda:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6edc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6ede:	f7ff ff71 	bl	b6dc4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ee4:	1d3c      	adds	r4, r7, #4
   b6ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ee8:	682b      	ldr	r3, [r5, #0]
   b6eea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6eec:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6eee:	e7ed      	b.n	b6ecc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6ef0:	f1b9 0f00 	cmp.w	r9, #0
   b6ef4:	d0ea      	beq.n	b6ecc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6ef6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6ef8:	2210      	movs	r2, #16
   b6efa:	a801      	add	r0, sp, #4
   b6efc:	f001 f958 	bl	b81b0 <memset>
                    a.v = 6;
   b6f00:	2306      	movs	r3, #6
   b6f02:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6f06:	ad01      	add	r5, sp, #4
   b6f08:	f104 0308 	add.w	r3, r4, #8
   b6f0c:	3418      	adds	r4, #24
   b6f0e:	6818      	ldr	r0, [r3, #0]
   b6f10:	6859      	ldr	r1, [r3, #4]
   b6f12:	462a      	mov	r2, r5
   b6f14:	c203      	stmia	r2!, {r0, r1}
   b6f16:	3308      	adds	r3, #8
   b6f18:	42a3      	cmp	r3, r4
   b6f1a:	4615      	mov	r5, r2
   b6f1c:	d1f7      	bne.n	b6f0e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6f1e:	a901      	add	r1, sp, #4
   b6f20:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6f22:	ad07      	add	r5, sp, #28
   b6f24:	f7ff ff2e 	bl	b6d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f2a:	1d3c      	adds	r4, r7, #4
   b6f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f2e:	682b      	ldr	r3, [r5, #0]
   b6f30:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6f32:	4649      	mov	r1, r9
   b6f34:	e7ca      	b.n	b6ecc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6f36:	9800      	ldr	r0, [sp, #0]
   b6f38:	f7ff f800 	bl	b5f3c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6f3c:	4638      	mov	r0, r7
   b6f3e:	b015      	add	sp, #84	; 0x54
   b6f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6f44 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6f44:	4b02      	ldr	r3, [pc, #8]	; (b6f50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6f46:	4a03      	ldr	r2, [pc, #12]	; (b6f54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6f48:	601a      	str	r2, [r3, #0]
   b6f4a:	2200      	movs	r2, #0
   b6f4c:	605a      	str	r2, [r3, #4]

} // spark
   b6f4e:	4770      	bx	lr
   b6f50:	2003e6c4 	.word	0x2003e6c4
   b6f54:	000b85ec 	.word	0x000b85ec

000b6f58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f5a:	4606      	mov	r6, r0
   b6f5c:	460d      	mov	r5, r1
  size_t n = 0;
   b6f5e:	188f      	adds	r7, r1, r2
   b6f60:	2400      	movs	r4, #0
  while (size--) {
   b6f62:	42bd      	cmp	r5, r7
   b6f64:	d00c      	beq.n	b6f80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6f66:	6833      	ldr	r3, [r6, #0]
   b6f68:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6f6c:	689b      	ldr	r3, [r3, #8]
   b6f6e:	4630      	mov	r0, r6
   b6f70:	4798      	blx	r3
     if (chunk>=0)
   b6f72:	1e03      	subs	r3, r0, #0
   b6f74:	db01      	blt.n	b6f7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6f76:	441c      	add	r4, r3
  while (size--) {
   b6f78:	e7f3      	b.n	b6f62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6f7a:	2c00      	cmp	r4, #0
   b6f7c:	bf08      	it	eq
   b6f7e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6f80:	4620      	mov	r0, r4
   b6f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f84 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6f84:	b508      	push	{r3, lr}
  return write(str);
   b6f86:	f7fe fa91 	bl	b54ac <_ZN5Print5writeEPKc>
}
   b6f8a:	bd08      	pop	{r3, pc}

000b6f8c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6f8c:	6803      	ldr	r3, [r0, #0]
   b6f8e:	689b      	ldr	r3, [r3, #8]
   b6f90:	4718      	bx	r3

000b6f92 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6f92:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6f94:	210d      	movs	r1, #13
{
   b6f96:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6f98:	f7ff fff8 	bl	b6f8c <_ZN5Print5printEc>
  n += print('\n');
   b6f9c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6f9e:	4604      	mov	r4, r0
  n += print('\n');
   b6fa0:	4628      	mov	r0, r5
   b6fa2:	f7ff fff3 	bl	b6f8c <_ZN5Print5printEc>
  return n;
}
   b6fa6:	4420      	add	r0, r4
   b6fa8:	bd38      	pop	{r3, r4, r5, pc}

000b6faa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6faa:	b538      	push	{r3, r4, r5, lr}
   b6fac:	4605      	mov	r5, r0
  return write(str);
   b6fae:	f7fe fa7d 	bl	b54ac <_ZN5Print5writeEPKc>
   b6fb2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6fb4:	4628      	mov	r0, r5
   b6fb6:	f7ff ffec 	bl	b6f92 <_ZN5Print7printlnEv>
  return n;
}
   b6fba:	4420      	add	r0, r4
   b6fbc:	bd38      	pop	{r3, r4, r5, pc}

000b6fbe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6fbe:	b530      	push	{r4, r5, lr}
   b6fc0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6fc2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6fc4:	2a01      	cmp	r2, #1
  *str = '\0';
   b6fc6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6fca:	bf98      	it	ls
   b6fcc:	220a      	movls	r2, #10
   b6fce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6fd0:	460d      	mov	r5, r1
   b6fd2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6fd6:	fb01 5312 	mls	r3, r1, r2, r5
   b6fda:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6fde:	2b09      	cmp	r3, #9
   b6fe0:	bf94      	ite	ls
   b6fe2:	3330      	addls	r3, #48	; 0x30
   b6fe4:	3337      	addhi	r3, #55	; 0x37
   b6fe6:	b2db      	uxtb	r3, r3
  } while(n);
   b6fe8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6fea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6fee:	d9ef      	bls.n	b6fd0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6ff0:	4621      	mov	r1, r4
   b6ff2:	f7fe fa5b 	bl	b54ac <_ZN5Print5writeEPKc>
}
   b6ff6:	b00b      	add	sp, #44	; 0x2c
   b6ff8:	bd30      	pop	{r4, r5, pc}

000b6ffa <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6ffe:	b086      	sub	sp, #24
   b7000:	af00      	add	r7, sp, #0
   b7002:	4605      	mov	r5, r0
   b7004:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7006:	1d38      	adds	r0, r7, #4
   b7008:	2114      	movs	r1, #20
{
   b700a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b700c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b700e:	f7ff f97d 	bl	b630c <vsnprintf>

    if (n<bufsize)
   b7012:	2813      	cmp	r0, #19
   b7014:	d80e      	bhi.n	b7034 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7016:	1d39      	adds	r1, r7, #4
   b7018:	4628      	mov	r0, r5
   b701a:	f7fe fa47 	bl	b54ac <_ZN5Print5writeEPKc>
   b701e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7020:	b11e      	cbz	r6, b702a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7022:	4628      	mov	r0, r5
   b7024:	f7ff ffb5 	bl	b6f92 <_ZN5Print7printlnEv>
   b7028:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b702a:	4620      	mov	r0, r4
   b702c:	3718      	adds	r7, #24
   b702e:	46bd      	mov	sp, r7
   b7030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7034:	f100 0308 	add.w	r3, r0, #8
   b7038:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b703c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b703e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7042:	4622      	mov	r2, r4
   b7044:	1c41      	adds	r1, r0, #1
   b7046:	683b      	ldr	r3, [r7, #0]
   b7048:	4668      	mov	r0, sp
   b704a:	f7ff f95f 	bl	b630c <vsnprintf>
  return write(str);
   b704e:	4669      	mov	r1, sp
   b7050:	4628      	mov	r0, r5
   b7052:	f7fe fa2b 	bl	b54ac <_ZN5Print5writeEPKc>
   b7056:	4604      	mov	r4, r0
   b7058:	46c5      	mov	sp, r8
   b705a:	e7e1      	b.n	b7020 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b705c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b705c:	4b01      	ldr	r3, [pc, #4]	; (b7064 <_GLOBAL__sub_I_RGB+0x8>)
   b705e:	2200      	movs	r2, #0
   b7060:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7062:	4770      	bx	lr
   b7064:	2003e6cc 	.word	0x2003e6cc

000b7068 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7068:	2100      	movs	r1, #0
   b706a:	f7fe bfbf 	b.w	b5fec <hal_spi_release>

000b706e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b706e:	2100      	movs	r1, #0
   b7070:	f7fe bfb4 	b.w	b5fdc <hal_spi_acquire>

000b7074 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7074:	b510      	push	{r4, lr}
   b7076:	4604      	mov	r4, r0
   b7078:	4608      	mov	r0, r1
{
    _spi = spi;
   b707a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b707c:	f7fe ff7e 	bl	b5f7c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7080:	2300      	movs	r3, #0
   b7082:	6063      	str	r3, [r4, #4]
}
   b7084:	4620      	mov	r0, r4
   b7086:	bd10      	pop	{r4, pc}

000b7088 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7088:	b513      	push	{r0, r1, r4, lr}
   b708a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b708c:	7800      	ldrb	r0, [r0, #0]
   b708e:	f7ff ffee 	bl	b706e <_ZN8SPIClass4lockEv.isra.0>
   b7092:	b958      	cbnz	r0, b70ac <_ZN8SPIClass5beginEv+0x24>
   b7094:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7096:	9001      	str	r0, [sp, #4]
   b7098:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b709c:	f7fe ff5e 	bl	b5f5c <hal_spi_begin>
        unlock();
   b70a0:	9801      	ldr	r0, [sp, #4]
    }
}
   b70a2:	b002      	add	sp, #8
   b70a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b70a8:	f7ff bfde 	b.w	b7068 <_ZN8SPIClass6unlockEv.isra.0>
   b70ac:	b002      	add	sp, #8
   b70ae:	bd10      	pop	{r4, pc}

000b70b0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b70b0:	7800      	ldrb	r0, [r0, #0]
   b70b2:	f7ff bfd9 	b.w	b7068 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b70b8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b70b8:	0840      	lsrs	r0, r0, #1
{
   b70ba:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b70bc:	6018      	str	r0, [r3, #0]
   b70be:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b70c0:	6818      	ldr	r0, [r3, #0]
   b70c2:	4288      	cmp	r0, r1
   b70c4:	b2e5      	uxtb	r5, r4
   b70c6:	d906      	bls.n	b70d6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b70c8:	3401      	adds	r4, #1
   b70ca:	2c08      	cmp	r4, #8
   b70cc:	d002      	beq.n	b70d4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b70ce:	0840      	lsrs	r0, r0, #1
   b70d0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b70d2:	e7f5      	b.n	b70c0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b70d4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b70d6:	4b02      	ldr	r3, [pc, #8]	; (b70e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b70d8:	5d5b      	ldrb	r3, [r3, r5]
   b70da:	7013      	strb	r3, [r2, #0]
}
   b70dc:	bd30      	pop	{r4, r5, pc}
   b70de:	bf00      	nop
   b70e0:	000b8620 	.word	0x000b8620

000b70e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b70e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b70e8:	4606      	mov	r6, r0
   b70ea:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b70ec:	7800      	ldrb	r0, [r0, #0]
{
   b70ee:	460c      	mov	r4, r1
    CHECK(lock());
   b70f0:	f7ff ffbd 	bl	b706e <_ZN8SPIClass4lockEv.isra.0>
   b70f4:	2800      	cmp	r0, #0
   b70f6:	db1b      	blt.n	b7130 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b70f8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b70fa:	2214      	movs	r2, #20
   b70fc:	2100      	movs	r1, #0
   b70fe:	a809      	add	r0, sp, #36	; 0x24
   b7100:	f001 f856 	bl	b81b0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7104:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7106:	2200      	movs	r2, #0
   b7108:	a909      	add	r1, sp, #36	; 0x24
   b710a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b710c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7110:	f7fe ff44 	bl	b5f9c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7114:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7118:	b113      	cbz	r3, b7120 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b711a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b711e:	b155      	cbz	r5, b7136 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7120:	2700      	movs	r7, #0
   b7122:	46b9      	mov	r9, r7
   b7124:	46b8      	mov	r8, r7
   b7126:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7128:	7923      	ldrb	r3, [r4, #4]
   b712a:	b15d      	cbz	r5, b7144 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b712c:	b1c3      	cbz	r3, b7160 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b712e:	2000      	movs	r0, #0
}
   b7130:	b00f      	add	sp, #60	; 0x3c
   b7132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7136:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b713a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b713e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7142:	e7f1      	b.n	b7128 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7144:	2b00      	cmp	r3, #0
   b7146:	d135      	bne.n	b71b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7148:	68a3      	ldr	r3, [r4, #8]
   b714a:	4543      	cmp	r3, r8
   b714c:	d108      	bne.n	b7160 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b714e:	f88d 9020 	strb.w	r9, [sp, #32]
   b7152:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7156:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b715a:	89a3      	ldrh	r3, [r4, #12]
   b715c:	429a      	cmp	r2, r3
   b715e:	d0e6      	beq.n	b712e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7160:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7162:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7164:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7168:	980a      	ldr	r0, [sp, #40]	; 0x28
   b716a:	ab04      	add	r3, sp, #16
   b716c:	f10d 020f 	add.w	r2, sp, #15
   b7170:	f7ff ffa2 	bl	b70b8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7174:	7921      	ldrb	r1, [r4, #4]
   b7176:	b985      	cbnz	r5, b719a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7178:	b989      	cbnz	r1, b719e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b717a:	68a3      	ldr	r3, [r4, #8]
   b717c:	4543      	cmp	r3, r8
   b717e:	d30e      	bcc.n	b719e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7180:	f88d 9020 	strb.w	r9, [sp, #32]
   b7184:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7188:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b718c:	89a3      	ldrh	r3, [r4, #12]
   b718e:	429a      	cmp	r2, r3
   b7190:	d105      	bne.n	b719e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7192:	9b04      	ldr	r3, [sp, #16]
   b7194:	4543      	cmp	r3, r8
   b7196:	d102      	bne.n	b719e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7198:	e7c9      	b.n	b712e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b719a:	2900      	cmp	r1, #0
   b719c:	d1f9      	bne.n	b7192 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b719e:	2300      	movs	r3, #0
   b71a0:	9301      	str	r3, [sp, #4]
   b71a2:	7b63      	ldrb	r3, [r4, #13]
   b71a4:	9300      	str	r3, [sp, #0]
   b71a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b71aa:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b71ac:	7830      	ldrb	r0, [r6, #0]
   b71ae:	f7fe ff0d 	bl	b5fcc <hal_spi_set_settings>
   b71b2:	e7bc      	b.n	b712e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b71b4:	e9cd 5500 	strd	r5, r5, [sp]
   b71b8:	462b      	mov	r3, r5
   b71ba:	462a      	mov	r2, r5
   b71bc:	2101      	movs	r1, #1
   b71be:	e7f5      	b.n	b71ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b71c0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b71c0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b71c2:	7800      	ldrb	r0, [r0, #0]
   b71c4:	f7fe fed2 	bl	b5f6c <hal_spi_transfer>
}
   b71c8:	b2c0      	uxtb	r0, r0
   b71ca:	bd08      	pop	{r3, pc}

000b71cc <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b71cc:	b530      	push	{r4, r5, lr}
   b71ce:	b087      	sub	sp, #28
   b71d0:	4604      	mov	r4, r0
   b71d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b71d4:	9500      	str	r5, [sp, #0]
   b71d6:	7800      	ldrb	r0, [r0, #0]
   b71d8:	f7fe fee8 	bl	b5fac <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b71dc:	b93d      	cbnz	r5, b71ee <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b71de:	7820      	ldrb	r0, [r4, #0]
   b71e0:	a902      	add	r1, sp, #8
   b71e2:	f7fe feeb 	bl	b5fbc <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b71e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b71ea:	07db      	lsls	r3, r3, #31
   b71ec:	d4f7      	bmi.n	b71de <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b71ee:	b007      	add	sp, #28
   b71f0:	bd30      	pop	{r4, r5, pc}

000b71f2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b71f2:	b510      	push	{r4, lr}
   b71f4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b71f6:	6800      	ldr	r0, [r0, #0]
   b71f8:	b118      	cbz	r0, b7202 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b71fa:	f7ff f877 	bl	b62ec <free>
            wakeupSource_ = nullptr;
   b71fe:	2300      	movs	r3, #0
   b7200:	6023      	str	r3, [r4, #0]
        }
    }
   b7202:	bd10      	pop	{r4, pc}

000b7204 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b7204:	b538      	push	{r3, r4, r5, lr}
   b7206:	460c      	mov	r4, r1
   b7208:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b720a:	f7ff fff2 	bl	b71f2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b720e:	b154      	cbz	r4, b7226 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b7210:	8820      	ldrh	r0, [r4, #0]
   b7212:	f7ff f863 	bl	b62dc <malloc>
   b7216:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b7218:	b128      	cbz	r0, b7226 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b721a:	8822      	ldrh	r2, [r4, #0]
   b721c:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b721e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b7222:	f000 bfb7 	b.w	b8194 <memcpy>
    }
   b7226:	bd38      	pop	{r3, r4, r5, pc}

000b7228 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b7228:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b722a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b722e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b7230:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b7234:	f8c0 3006 	str.w	r3, [r0, #6]
   b7238:	894b      	ldrh	r3, [r1, #10]
   b723a:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b723c:	460c      	mov	r4, r1
   b723e:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b7240:	f7ff ffd7 	bl	b71f2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b7244:	6823      	ldr	r3, [r4, #0]
   b7246:	b113      	cbz	r3, b724e <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b7248:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b724a:	2300      	movs	r3, #0
   b724c:	6023      	str	r3, [r4, #0]
    }
   b724e:	bd38      	pop	{r3, r4, r5, pc}

000b7250 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b7250:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7252:	4d2b      	ldr	r5, [pc, #172]	; (b7300 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b7254:	7d0b      	ldrb	r3, [r1, #20]
   b7256:	4604      	mov	r4, r0
   b7258:	b08b      	sub	sp, #44	; 0x2c
   b725a:	4608      	mov	r0, r1
   b725c:	1daf      	adds	r7, r5, #6
   b725e:	2b00      	cmp	r3, #0
   b7260:	d036      	beq.n	b72d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b7262:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b7264:	791b      	ldrb	r3, [r3, #4]
   b7266:	2b00      	cmp	r3, #0
   b7268:	d032      	beq.n	b72d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b726a:	4b26      	ldr	r3, [pc, #152]	; (b7304 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b726c:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b726e:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b7270:	a902      	add	r1, sp, #8
   b7272:	3004      	adds	r0, #4
   b7274:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b7278:	f7fe ff8c 	bl	b6194 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b727c:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b7280:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b7284:	b200      	sxth	r0, r0
   b7286:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b728a:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b728e:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b7290:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b7292:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b7294:	4628      	mov	r0, r5
   b7296:	f7ff ffb5 	bl	b7204 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b729a:	a802      	add	r0, sp, #8
   b729c:	f7ff ffa9 	bl	b71f2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b72a0:	2300      	movs	r3, #0
   b72a2:	6023      	str	r3, [r4, #0]
   b72a4:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b72a6:	71a3      	strb	r3, [r4, #6]
   b72a8:	8123      	strh	r3, [r4, #8]
   b72aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b72ae:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b72b0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b72b4:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b72b6:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b72ba:	f8c4 3006 	str.w	r3, [r4, #6]
   b72be:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b72c0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b72c2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b72c4:	4620      	mov	r0, r4
   b72c6:	f7ff ff9d 	bl	b7204 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b72ca:	4620      	mov	r0, r4
   b72cc:	b00b      	add	sp, #44	; 0x2c
   b72ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b72d0:	2600      	movs	r6, #0
   b72d2:	2320      	movs	r3, #32
   b72d4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b72d8:	4b0b      	ldr	r3, [pc, #44]	; (b7308 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b72da:	9300      	str	r3, [sp, #0]
   b72dc:	aa02      	add	r2, sp, #8
   b72de:	4633      	mov	r3, r6
   b72e0:	490a      	ldr	r1, [pc, #40]	; (b730c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b72e2:	2032      	movs	r0, #50	; 0x32
   b72e4:	f7fe ff02 	bl	b60ec <log_message>
            : wakeupSource_(nullptr),
   b72e8:	4b06      	ldr	r3, [pc, #24]	; (b7304 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b72ea:	4805      	ldr	r0, [pc, #20]	; (b7300 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b72ec:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b72ee:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b72f2:	a902      	add	r1, sp, #8
   b72f4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b72f8:	f7ff ff96 	bl	b7228 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b72fc:	e7cd      	b.n	b729a <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b72fe:	bf00      	nop
   b7300:	2003e6dc 	.word	0x2003e6dc
   b7304:	ffff0000 	.word	0xffff0000
   b7308:	000b862f 	.word	0x000b862f
   b730c:	000b8628 	.word	0x000b8628

000b7310 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7310:	4b05      	ldr	r3, [pc, #20]	; (b7328 <_GLOBAL__sub_I_System+0x18>)
   b7312:	2202      	movs	r2, #2
   b7314:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b7316:	4b05      	ldr	r3, [pc, #20]	; (b732c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7318:	4a05      	ldr	r2, [pc, #20]	; (b7330 <_GLOBAL__sub_I_System+0x20>)
   b731a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b731c:	2000      	movs	r0, #0
   b731e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7322:	f7fe bef3 	b.w	b610c <set_system_mode>
   b7326:	bf00      	nop
   b7328:	2003e6e8 	.word	0x2003e6e8
   b732c:	2003e6dc 	.word	0x2003e6dc
   b7330:	ffff0000 	.word	0xffff0000

000b7334 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b7334:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7336:	2000      	movs	r0, #0
   b7338:	f7fe ff60 	bl	b61fc <spark_sync_time_pending>
   b733c:	b128      	cbz	r0, b734a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b733e:	f7fe ff4d 	bl	b61dc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7342:	f080 0001 	eor.w	r0, r0, #1
   b7346:	b2c0      	uxtb	r0, r0
    }
   b7348:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b734a:	2001      	movs	r0, #1
   b734c:	e7fc      	b.n	b7348 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b734e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b734e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b7350:	2000      	movs	r0, #0
   b7352:	f7fe fd53 	bl	b5dfc <hal_rtc_time_is_valid>
    if (rtcstate)
   b7356:	4604      	mov	r4, r0
   b7358:	b9a0      	cbnz	r0, b7384 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b735a:	f7fe fecf 	bl	b60fc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b735e:	2801      	cmp	r0, #1
   b7360:	d110      	bne.n	b7384 <_ZN9TimeClass7isValidEv+0x36>
   b7362:	4620      	mov	r0, r4
   b7364:	f7fe fefa 	bl	b615c <system_thread_get_state>
   b7368:	b960      	cbnz	r0, b7384 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b736a:	f7ff ffe3 	bl	b7334 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b736e:	b910      	cbnz	r0, b7376 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b7370:	f7fe ff24 	bl	b61bc <spark_process>
        while (_while() && !_condition()) {
   b7374:	e7f9      	b.n	b736a <_ZN9TimeClass7isValidEv+0x1c>
   b7376:	f7ff ffdd 	bl	b7334 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b737a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b737e:	2000      	movs	r0, #0
   b7380:	f7fe bd3c 	b.w	b5dfc <hal_rtc_time_is_valid>
}
   b7384:	4620      	mov	r0, r4
   b7386:	bd10      	pop	{r4, pc}

000b7388 <_ZN9TimeClass3nowEv>:
{
   b7388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b738a:	f7ff ffe0 	bl	b734e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b738e:	2210      	movs	r2, #16
   b7390:	2100      	movs	r1, #0
   b7392:	4668      	mov	r0, sp
   b7394:	f000 ff0c 	bl	b81b0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b7398:	2100      	movs	r1, #0
   b739a:	4668      	mov	r0, sp
   b739c:	f7fe fd36 	bl	b5e0c <hal_rtc_get_time>
}
   b73a0:	9800      	ldr	r0, [sp, #0]
   b73a2:	b005      	add	sp, #20
   b73a4:	f85d fb04 	ldr.w	pc, [sp], #4

000b73a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b73a8:	4b02      	ldr	r3, [pc, #8]	; (b73b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b73aa:	681a      	ldr	r2, [r3, #0]
   b73ac:	4b02      	ldr	r3, [pc, #8]	; (b73b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b73ae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b73b0:	4770      	bx	lr
   b73b2:	bf00      	nop
   b73b4:	2003dd98 	.word	0x2003dd98
   b73b8:	2003e6ec 	.word	0x2003e6ec

000b73bc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b73bc:	4770      	bx	lr

000b73be <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b73be:	7441      	strb	r1, [r0, #17]
}
   b73c0:	4770      	bx	lr

000b73c2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b73c2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b73c4:	7c00      	ldrb	r0, [r0, #16]
   b73c6:	f7fe fe49 	bl	b605c <hal_usart_available_data_for_write>
}
   b73ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b73ce:	bd08      	pop	{r3, pc}

000b73d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b73d0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b73d2:	7c00      	ldrb	r0, [r0, #16]
   b73d4:	f7fe fe1a 	bl	b600c <hal_usart_available>
}
   b73d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b73dc:	bd08      	pop	{r3, pc}

000b73de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b73de:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b73e0:	7c00      	ldrb	r0, [r0, #16]
   b73e2:	f7fe fe23 	bl	b602c <hal_usart_peek>
}
   b73e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b73ea:	bd08      	pop	{r3, pc}

000b73ec <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b73ec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b73ee:	7c00      	ldrb	r0, [r0, #16]
   b73f0:	f7fe fe14 	bl	b601c <hal_usart_read>
}
   b73f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b73f8:	bd08      	pop	{r3, pc}

000b73fa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b73fa:	7c00      	ldrb	r0, [r0, #16]
   b73fc:	f7fe be1e 	b.w	b603c <hal_usart_flush>

000b7400 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7400:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7402:	7c45      	ldrb	r5, [r0, #17]
{
   b7404:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7406:	b12d      	cbz	r5, b7414 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7408:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b740a:	b003      	add	sp, #12
   b740c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7410:	f7fe bdf4 	b.w	b5ffc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7414:	7c00      	ldrb	r0, [r0, #16]
   b7416:	9101      	str	r1, [sp, #4]
   b7418:	f7fe fe20 	bl	b605c <hal_usart_available_data_for_write>
   b741c:	2800      	cmp	r0, #0
   b741e:	9901      	ldr	r1, [sp, #4]
   b7420:	dcf2      	bgt.n	b7408 <_ZN11USARTSerial5writeEh+0x8>
}
   b7422:	4628      	mov	r0, r5
   b7424:	b003      	add	sp, #12
   b7426:	bd30      	pop	{r4, r5, pc}

000b7428 <_ZN11USARTSerialD0Ev>:
   b7428:	b510      	push	{r4, lr}
   b742a:	2114      	movs	r1, #20
   b742c:	4604      	mov	r4, r0
   b742e:	f7fc fe34 	bl	b409a <_ZdlPvj>
   b7432:	4620      	mov	r0, r4
   b7434:	bd10      	pop	{r4, pc}
	...

000b7438 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7438:	b510      	push	{r4, lr}
   b743a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b743e:	4604      	mov	r4, r0
   b7440:	4608      	mov	r0, r1
   b7442:	4611      	mov	r1, r2
   b7444:	2200      	movs	r2, #0
   b7446:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b744a:	4b04      	ldr	r3, [pc, #16]	; (b745c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b744c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b744e:	2301      	movs	r3, #1
  _serial = serial;
   b7450:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7452:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7454:	f7fe fe0a 	bl	b606c <hal_usart_init_ex>
}
   b7458:	4620      	mov	r0, r4
   b745a:	bd10      	pop	{r4, pc}
   b745c:	000b867c 	.word	0x000b867c

000b7460 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7460:	7441      	strb	r1, [r0, #17]
}
   b7462:	4770      	bx	lr

000b7464 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7464:	4770      	bx	lr

000b7466 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7466:	4770      	bx	lr

000b7468 <_ZN9USBSerial4readEv>:
{
   b7468:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b746a:	2100      	movs	r1, #0
   b746c:	7c00      	ldrb	r0, [r0, #16]
   b746e:	f7fe fe25 	bl	b60bc <HAL_USB_USART_Receive_Data>
}
   b7472:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7476:	bd08      	pop	{r3, pc}

000b7478 <_ZN9USBSerial4peekEv>:
{
   b7478:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b747a:	2101      	movs	r1, #1
   b747c:	7c00      	ldrb	r0, [r0, #16]
   b747e:	f7fe fe1d 	bl	b60bc <HAL_USB_USART_Receive_Data>
}
   b7482:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7486:	bd08      	pop	{r3, pc}

000b7488 <_ZN9USBSerial17availableForWriteEv>:
{
   b7488:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b748a:	7c00      	ldrb	r0, [r0, #16]
   b748c:	f7fe fe0e 	bl	b60ac <HAL_USB_USART_Available_Data_For_Write>
}
   b7490:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7494:	bd08      	pop	{r3, pc}

000b7496 <_ZN9USBSerial9availableEv>:
{
   b7496:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7498:	7c00      	ldrb	r0, [r0, #16]
   b749a:	f7fe fdff 	bl	b609c <HAL_USB_USART_Available_Data>
}
   b749e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b74a2:	bd08      	pop	{r3, pc}

000b74a4 <_ZN9USBSerial5writeEh>:
{
   b74a4:	b513      	push	{r0, r1, r4, lr}
   b74a6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b74a8:	7c00      	ldrb	r0, [r0, #16]
{
   b74aa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b74ac:	f7fe fdfe 	bl	b60ac <HAL_USB_USART_Available_Data_For_Write>
   b74b0:	2800      	cmp	r0, #0
   b74b2:	9901      	ldr	r1, [sp, #4]
   b74b4:	dc01      	bgt.n	b74ba <_ZN9USBSerial5writeEh+0x16>
   b74b6:	7c60      	ldrb	r0, [r4, #17]
   b74b8:	b120      	cbz	r0, b74c4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b74ba:	7c20      	ldrb	r0, [r4, #16]
   b74bc:	f7fe fe06 	bl	b60cc <HAL_USB_USART_Send_Data>
   b74c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b74c4:	b002      	add	sp, #8
   b74c6:	bd10      	pop	{r4, pc}

000b74c8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b74c8:	7c00      	ldrb	r0, [r0, #16]
   b74ca:	f7fe be07 	b.w	b60dc <HAL_USB_USART_Flush_Data>

000b74ce <_ZN9USBSerialD0Ev>:
   b74ce:	b510      	push	{r4, lr}
   b74d0:	2114      	movs	r1, #20
   b74d2:	4604      	mov	r4, r0
   b74d4:	f7fc fde1 	bl	b409a <_ZdlPvj>
   b74d8:	4620      	mov	r0, r4
   b74da:	bd10      	pop	{r4, pc}

000b74dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b74dc:	b510      	push	{r4, lr}
   b74de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b74e2:	4604      	mov	r4, r0
   b74e4:	4608      	mov	r0, r1
   b74e6:	2100      	movs	r1, #0
   b74e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b74ec:	4b04      	ldr	r3, [pc, #16]	; (b7500 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b74ee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b74f0:	2301      	movs	r3, #1
  _serial = serial;
   b74f2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b74f4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b74f6:	4611      	mov	r1, r2
   b74f8:	f7fe fdc0 	bl	b607c <HAL_USB_USART_Init>
}
   b74fc:	4620      	mov	r0, r4
   b74fe:	bd10      	pop	{r4, pc}
   b7500:	000b86ac 	.word	0x000b86ac

000b7504 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7504:	7c00      	ldrb	r0, [r0, #16]
   b7506:	2200      	movs	r2, #0
   b7508:	f7fe bdc0 	b.w	b608c <HAL_USB_USART_Begin>

000b750c <_Z19acquireSerialBufferv>:
{
   b750c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b750e:	2214      	movs	r2, #20
{
   b7510:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7512:	2100      	movs	r1, #0
   b7514:	f000 fe4c 	bl	b81b0 <memset>
}
   b7518:	4620      	mov	r0, r4
   b751a:	bd10      	pop	{r4, pc}

000b751c <_Z16_fetch_usbserialv>:
{
   b751c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b751e:	4c0f      	ldr	r4, [pc, #60]	; (b755c <_Z16_fetch_usbserialv+0x40>)
{
   b7520:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7522:	a803      	add	r0, sp, #12
   b7524:	f7ff fff2 	bl	b750c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7528:	7821      	ldrb	r1, [r4, #0]
   b752a:	f3bf 8f5b 	dmb	ish
   b752e:	f011 0101 	ands.w	r1, r1, #1
   b7532:	d10f      	bne.n	b7554 <_Z16_fetch_usbserialv+0x38>
   b7534:	4620      	mov	r0, r4
   b7536:	9101      	str	r1, [sp, #4]
   b7538:	f7fc fdb1 	bl	b409e <__cxa_guard_acquire>
   b753c:	9901      	ldr	r1, [sp, #4]
   b753e:	b148      	cbz	r0, b7554 <_Z16_fetch_usbserialv+0x38>
   b7540:	aa03      	add	r2, sp, #12
   b7542:	4807      	ldr	r0, [pc, #28]	; (b7560 <_Z16_fetch_usbserialv+0x44>)
   b7544:	f7ff ffca 	bl	b74dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7548:	4620      	mov	r0, r4
   b754a:	f7fc fdad 	bl	b40a8 <__cxa_guard_release>
   b754e:	4805      	ldr	r0, [pc, #20]	; (b7564 <_Z16_fetch_usbserialv+0x48>)
   b7550:	f000 fe0a 	bl	b8168 <atexit>
	return _usbserial;
}
   b7554:	4802      	ldr	r0, [pc, #8]	; (b7560 <_Z16_fetch_usbserialv+0x44>)
   b7556:	b008      	add	sp, #32
   b7558:	bd10      	pop	{r4, pc}
   b755a:	bf00      	nop
   b755c:	2003e6f0 	.word	0x2003e6f0
   b7560:	2003e6f4 	.word	0x2003e6f4
   b7564:	000b7465 	.word	0x000b7465

000b7568 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7568:	4b01      	ldr	r3, [pc, #4]	; (b7570 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b756a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b756c:	4770      	bx	lr
   b756e:	bf00      	nop
   b7570:	2003dd9c 	.word	0x2003dd9c

000b7574 <serialEventRun>:
{
   b7574:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7576:	4b0b      	ldr	r3, [pc, #44]	; (b75a4 <serialEventRun+0x30>)
   b7578:	b143      	cbz	r3, b758c <serialEventRun+0x18>
   b757a:	f7ff ffcf 	bl	b751c <_Z16_fetch_usbserialv>
   b757e:	6803      	ldr	r3, [r0, #0]
   b7580:	691b      	ldr	r3, [r3, #16]
   b7582:	4798      	blx	r3
   b7584:	2800      	cmp	r0, #0
   b7586:	dd01      	ble.n	b758c <serialEventRun+0x18>
        serialEvent();
   b7588:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b758c:	4b06      	ldr	r3, [pc, #24]	; (b75a8 <serialEventRun+0x34>)
   b758e:	b143      	cbz	r3, b75a2 <serialEventRun+0x2e>
   b7590:	f000 f9a0 	bl	b78d4 <_Z22__fetch_global_Serial1v>
   b7594:	6803      	ldr	r3, [r0, #0]
   b7596:	691b      	ldr	r3, [r3, #16]
   b7598:	4798      	blx	r3
   b759a:	2800      	cmp	r0, #0
   b759c:	dd01      	ble.n	b75a2 <serialEventRun+0x2e>
        serialEvent1();
   b759e:	f3af 8000 	nop.w
}
   b75a2:	bd08      	pop	{r3, pc}
	...

000b75ac <_post_loop>:
{
   b75ac:	b508      	push	{r3, lr}
	serialEventRun();
   b75ae:	f7ff ffe1 	bl	b7574 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b75b2:	f7fe fc1b 	bl	b5dec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b75b6:	4b01      	ldr	r3, [pc, #4]	; (b75bc <_post_loop+0x10>)
   b75b8:	6018      	str	r0, [r3, #0]
}
   b75ba:	bd08      	pop	{r3, pc}
   b75bc:	2003e710 	.word	0x2003e710

000b75c0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b75c0:	4805      	ldr	r0, [pc, #20]	; (b75d8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b75c2:	4a06      	ldr	r2, [pc, #24]	; (b75dc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b75c4:	4906      	ldr	r1, [pc, #24]	; (b75e0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b75c6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b75c8:	1a12      	subs	r2, r2, r0
   b75ca:	f000 fde3 	bl	b8194 <memcpy>
    __backup_sram_signature = signature;
   b75ce:	4b05      	ldr	r3, [pc, #20]	; (b75e4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b75d0:	4a05      	ldr	r2, [pc, #20]	; (b75e8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b75d2:	601a      	str	r2, [r3, #0]
}
   b75d4:	bd08      	pop	{r3, pc}
   b75d6:	bf00      	nop
   b75d8:	2003f400 	.word	0x2003f400
   b75dc:	2003f404 	.word	0x2003f404
   b75e0:	000b8794 	.word	0x000b8794
   b75e4:	2003f400 	.word	0x2003f400
   b75e8:	9a271c1e 	.word	0x9a271c1e

000b75ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b75ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b75ee:	2300      	movs	r3, #0
   b75f0:	9300      	str	r3, [sp, #0]
   b75f2:	461a      	mov	r2, r3
   b75f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b75f8:	f7fe fdc2 	bl	b6180 <system_ctrl_set_result>
}
   b75fc:	b003      	add	sp, #12
   b75fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7604 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7604:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7606:	8843      	ldrh	r3, [r0, #2]
   b7608:	2b0a      	cmp	r3, #10
   b760a:	d008      	beq.n	b761e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b760c:	2b50      	cmp	r3, #80	; 0x50
   b760e:	d10b      	bne.n	b7628 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7610:	4b09      	ldr	r3, [pc, #36]	; (b7638 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7612:	681b      	ldr	r3, [r3, #0]
   b7614:	b14b      	cbz	r3, b762a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7616:	b003      	add	sp, #12
   b7618:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b761c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b761e:	f7ff ffe5 	bl	b75ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7622:	b003      	add	sp, #12
   b7624:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7628:	2300      	movs	r3, #0
   b762a:	9300      	str	r3, [sp, #0]
   b762c:	461a      	mov	r2, r3
   b762e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7632:	f7fe fda5 	bl	b6180 <system_ctrl_set_result>
}
   b7636:	e7f4      	b.n	b7622 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7638:	2003e70c 	.word	0x2003e70c

000b763c <module_user_init_hook>:
{
   b763c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b763e:	4812      	ldr	r0, [pc, #72]	; (b7688 <module_user_init_hook+0x4c>)
   b7640:	2100      	movs	r1, #0
   b7642:	f7fe fe83 	bl	b634c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7646:	4b11      	ldr	r3, [pc, #68]	; (b768c <module_user_init_hook+0x50>)
   b7648:	681a      	ldr	r2, [r3, #0]
   b764a:	4b11      	ldr	r3, [pc, #68]	; (b7690 <module_user_init_hook+0x54>)
   b764c:	429a      	cmp	r2, r3
   b764e:	4b11      	ldr	r3, [pc, #68]	; (b7694 <module_user_init_hook+0x58>)
   b7650:	bf0c      	ite	eq
   b7652:	2201      	moveq	r2, #1
   b7654:	2200      	movne	r2, #0
   b7656:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7658:	d001      	beq.n	b765e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b765a:	f7ff ffb1 	bl	b75c0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b765e:	f7fe fbb5 	bl	b5dcc <HAL_RNG_GetRandomNumber>
   b7662:	4604      	mov	r4, r0
    srand(seed);
   b7664:	f000 fdac 	bl	b81c0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7668:	4b0b      	ldr	r3, [pc, #44]	; (b7698 <module_user_init_hook+0x5c>)
   b766a:	b113      	cbz	r3, b7672 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b766c:	4620      	mov	r0, r4
   b766e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7672:	2100      	movs	r1, #0
   b7674:	4808      	ldr	r0, [pc, #32]	; (b7698 <module_user_init_hook+0x5c>)
   b7676:	f7fe fdc9 	bl	b620c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b767a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b767e:	4807      	ldr	r0, [pc, #28]	; (b769c <module_user_init_hook+0x60>)
   b7680:	2100      	movs	r1, #0
   b7682:	f7fe bd73 	b.w	b616c <system_ctrl_set_app_request_handler>
   b7686:	bf00      	nop
   b7688:	000b7569 	.word	0x000b7569
   b768c:	2003f400 	.word	0x2003f400
   b7690:	9a271c1e 	.word	0x9a271c1e
   b7694:	2003e708 	.word	0x2003e708
   b7698:	00000000 	.word	0x00000000
   b769c:	000b7605 	.word	0x000b7605

000b76a0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b76a0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b76a2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b76a4:	d902      	bls.n	b76ac <pinAvailable+0xc>
    return false;
   b76a6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b76a8:	b002      	add	sp, #8
   b76aa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b76ac:	f1a0 030b 	sub.w	r3, r0, #11
   b76b0:	2b02      	cmp	r3, #2
   b76b2:	d81a      	bhi.n	b76ea <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b76b4:	4c17      	ldr	r4, [pc, #92]	; (b7714 <pinAvailable+0x74>)
   b76b6:	7821      	ldrb	r1, [r4, #0]
   b76b8:	f3bf 8f5b 	dmb	ish
   b76bc:	f011 0101 	ands.w	r1, r1, #1
   b76c0:	d10b      	bne.n	b76da <pinAvailable+0x3a>
   b76c2:	4620      	mov	r0, r4
   b76c4:	9101      	str	r1, [sp, #4]
   b76c6:	f7fc fcea 	bl	b409e <__cxa_guard_acquire>
   b76ca:	9901      	ldr	r1, [sp, #4]
   b76cc:	b128      	cbz	r0, b76da <pinAvailable+0x3a>
   b76ce:	4812      	ldr	r0, [pc, #72]	; (b7718 <pinAvailable+0x78>)
   b76d0:	f7ff fcd0 	bl	b7074 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b76d4:	4620      	mov	r0, r4
   b76d6:	f7fc fce7 	bl	b40a8 <__cxa_guard_release>
   b76da:	4b0f      	ldr	r3, [pc, #60]	; (b7718 <pinAvailable+0x78>)
   b76dc:	7818      	ldrb	r0, [r3, #0]
   b76de:	f7fe fc55 	bl	b5f8c <hal_spi_is_enabled>
   b76e2:	2800      	cmp	r0, #0
   b76e4:	d1df      	bne.n	b76a6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b76e6:	2001      	movs	r0, #1
   b76e8:	e7de      	b.n	b76a8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b76ea:	2801      	cmp	r0, #1
   b76ec:	d809      	bhi.n	b7702 <pinAvailable+0x62>
   b76ee:	f000 f88d 	bl	b780c <_Z19__fetch_global_Wirev>
   b76f2:	2100      	movs	r1, #0
   b76f4:	7c00      	ldrb	r0, [r0, #16]
   b76f6:	f7fe fbf1 	bl	b5edc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b76fa:	f080 0001 	eor.w	r0, r0, #1
   b76fe:	b2c0      	uxtb	r0, r0
   b7700:	e7d2      	b.n	b76a8 <pinAvailable+0x8>
   b7702:	3809      	subs	r0, #9
   b7704:	2801      	cmp	r0, #1
   b7706:	d8ee      	bhi.n	b76e6 <pinAvailable+0x46>
   b7708:	f000 f8e4 	bl	b78d4 <_Z22__fetch_global_Serial1v>
   b770c:	7c00      	ldrb	r0, [r0, #16]
   b770e:	f7fe fc9d 	bl	b604c <hal_usart_is_enabled>
   b7712:	e7f2      	b.n	b76fa <pinAvailable+0x5a>
   b7714:	2003de04 	.word	0x2003de04
   b7718:	2003de08 	.word	0x2003de08

000b771c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b771c:	2823      	cmp	r0, #35	; 0x23
{
   b771e:	b538      	push	{r3, r4, r5, lr}
   b7720:	4604      	mov	r4, r0
   b7722:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7724:	d80a      	bhi.n	b773c <pinMode+0x20>
   b7726:	29ff      	cmp	r1, #255	; 0xff
   b7728:	d008      	beq.n	b773c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b772a:	f7ff ffb9 	bl	b76a0 <pinAvailable>
   b772e:	b128      	cbz	r0, b773c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7730:	4629      	mov	r1, r5
   b7732:	4620      	mov	r0, r4
}
   b7734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7738:	f7fe bb78 	b.w	b5e2c <HAL_Pin_Mode>
}
   b773c:	bd38      	pop	{r3, r4, r5, pc}

000b773e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b773e:	b538      	push	{r3, r4, r5, lr}
   b7740:	4604      	mov	r4, r0
   b7742:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7744:	f7fe fb7a 	bl	b5e3c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7748:	28ff      	cmp	r0, #255	; 0xff
   b774a:	d010      	beq.n	b776e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b774c:	2806      	cmp	r0, #6
   b774e:	d804      	bhi.n	b775a <digitalWrite+0x1c>
   b7750:	234d      	movs	r3, #77	; 0x4d
   b7752:	fa23 f000 	lsr.w	r0, r3, r0
   b7756:	07c3      	lsls	r3, r0, #31
   b7758:	d409      	bmi.n	b776e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b775a:	4620      	mov	r0, r4
   b775c:	f7ff ffa0 	bl	b76a0 <pinAvailable>
   b7760:	b128      	cbz	r0, b776e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7762:	4629      	mov	r1, r5
   b7764:	4620      	mov	r0, r4
}
   b7766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b776a:	f7fe bb6f 	b.w	b5e4c <HAL_GPIO_Write>
}
   b776e:	bd38      	pop	{r3, r4, r5, pc}

000b7770 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7770:	280d      	cmp	r0, #13
{
   b7772:	b510      	push	{r4, lr}
   b7774:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7776:	bf9c      	itt	ls
   b7778:	340e      	addls	r4, #14
   b777a:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b777c:	4620      	mov	r0, r4
   b777e:	f7ff ff8f 	bl	b76a0 <pinAvailable>
   b7782:	b150      	cbz	r0, b779a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b7784:	2103      	movs	r1, #3
   b7786:	4620      	mov	r0, r4
   b7788:	f7fe fb48 	bl	b5e1c <HAL_Validate_Pin_Function>
   b778c:	2803      	cmp	r0, #3
   b778e:	d104      	bne.n	b779a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7790:	4620      	mov	r0, r4
}
   b7792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7796:	f7fe bb61 	b.w	b5e5c <hal_adc_read>
}
   b779a:	2000      	movs	r0, #0
   b779c:	bd10      	pop	{r4, pc}

000b779e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b779e:	4770      	bx	lr

000b77a0 <__tcf_1>:
   b77a0:	4770      	bx	lr
	...

000b77a4 <_Z17acquireWireBufferv>:
{
   b77a4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b77a6:	4b0a      	ldr	r3, [pc, #40]	; (b77d0 <_Z17acquireWireBufferv+0x2c>)
   b77a8:	6003      	str	r3, [r0, #0]
   b77aa:	2301      	movs	r3, #1
{
   b77ac:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b77ae:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b77b0:	4908      	ldr	r1, [pc, #32]	; (b77d4 <_Z17acquireWireBufferv+0x30>)
   b77b2:	2020      	movs	r0, #32
   b77b4:	f000 f8b4 	bl	b7920 <_ZnajRKSt9nothrow_t>
	};
   b77b8:	2520      	movs	r5, #32
   b77ba:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b77bc:	4905      	ldr	r1, [pc, #20]	; (b77d4 <_Z17acquireWireBufferv+0x30>)
	};
   b77be:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b77c0:	4628      	mov	r0, r5
   b77c2:	f000 f8ad 	bl	b7920 <_ZnajRKSt9nothrow_t>
	};
   b77c6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b77ca:	4620      	mov	r0, r4
   b77cc:	bd38      	pop	{r3, r4, r5, pc}
   b77ce:	bf00      	nop
   b77d0:	00010018 	.word	0x00010018
   b77d4:	000b86d4 	.word	0x000b86d4

000b77d8 <_Z18acquireWire1Bufferv>:
{
   b77d8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b77da:	4b0a      	ldr	r3, [pc, #40]	; (b7804 <_Z18acquireWire1Bufferv+0x2c>)
   b77dc:	6003      	str	r3, [r0, #0]
   b77de:	2301      	movs	r3, #1
{
   b77e0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b77e2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b77e4:	4908      	ldr	r1, [pc, #32]	; (b7808 <_Z18acquireWire1Bufferv+0x30>)
   b77e6:	2020      	movs	r0, #32
   b77e8:	f000 f89a 	bl	b7920 <_ZnajRKSt9nothrow_t>
	};
   b77ec:	2520      	movs	r5, #32
   b77ee:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b77f0:	4905      	ldr	r1, [pc, #20]	; (b7808 <_Z18acquireWire1Bufferv+0x30>)
	};
   b77f2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b77f4:	4628      	mov	r0, r5
   b77f6:	f000 f893 	bl	b7920 <_ZnajRKSt9nothrow_t>
	};
   b77fa:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b77fe:	4620      	mov	r0, r4
   b7800:	bd38      	pop	{r3, r4, r5, pc}
   b7802:	bf00      	nop
   b7804:	00010018 	.word	0x00010018
   b7808:	000b86d4 	.word	0x000b86d4

000b780c <_Z19__fetch_global_Wirev>:
{
   b780c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b780e:	4d0e      	ldr	r5, [pc, #56]	; (b7848 <_Z19__fetch_global_Wirev+0x3c>)
   b7810:	7829      	ldrb	r1, [r5, #0]
   b7812:	f3bf 8f5b 	dmb	ish
   b7816:	f011 0401 	ands.w	r4, r1, #1
{
   b781a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b781c:	d111      	bne.n	b7842 <_Z19__fetch_global_Wirev+0x36>
   b781e:	4628      	mov	r0, r5
   b7820:	f7fc fc3d 	bl	b409e <__cxa_guard_acquire>
   b7824:	b168      	cbz	r0, b7842 <_Z19__fetch_global_Wirev+0x36>
   b7826:	4668      	mov	r0, sp
   b7828:	f7ff ffbc 	bl	b77a4 <_Z17acquireWireBufferv>
   b782c:	466a      	mov	r2, sp
   b782e:	4621      	mov	r1, r4
   b7830:	4806      	ldr	r0, [pc, #24]	; (b784c <_Z19__fetch_global_Wirev+0x40>)
   b7832:	f7ff f9fb 	bl	b6c2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7836:	4628      	mov	r0, r5
   b7838:	f7fc fc36 	bl	b40a8 <__cxa_guard_release>
   b783c:	4804      	ldr	r0, [pc, #16]	; (b7850 <_Z19__fetch_global_Wirev+0x44>)
   b783e:	f000 fc93 	bl	b8168 <atexit>
	return wire;
}
   b7842:	4802      	ldr	r0, [pc, #8]	; (b784c <_Z19__fetch_global_Wirev+0x40>)
   b7844:	b007      	add	sp, #28
   b7846:	bd30      	pop	{r4, r5, pc}
   b7848:	2003e714 	.word	0x2003e714
   b784c:	2003e71c 	.word	0x2003e71c
   b7850:	000b779f 	.word	0x000b779f

000b7854 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b7854:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b7856:	4c0e      	ldr	r4, [pc, #56]	; (b7890 <_Z20__fetch_global_Wire1v+0x3c>)
   b7858:	7823      	ldrb	r3, [r4, #0]
   b785a:	f3bf 8f5b 	dmb	ish
   b785e:	07db      	lsls	r3, r3, #31
{
   b7860:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b7862:	d411      	bmi.n	b7888 <_Z20__fetch_global_Wire1v+0x34>
   b7864:	4620      	mov	r0, r4
   b7866:	f7fc fc1a 	bl	b409e <__cxa_guard_acquire>
   b786a:	b168      	cbz	r0, b7888 <_Z20__fetch_global_Wire1v+0x34>
   b786c:	4668      	mov	r0, sp
   b786e:	f7ff ffb3 	bl	b77d8 <_Z18acquireWire1Bufferv>
   b7872:	466a      	mov	r2, sp
   b7874:	2101      	movs	r1, #1
   b7876:	4807      	ldr	r0, [pc, #28]	; (b7894 <_Z20__fetch_global_Wire1v+0x40>)
   b7878:	f7ff f9d8 	bl	b6c2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b787c:	4620      	mov	r0, r4
   b787e:	f7fc fc13 	bl	b40a8 <__cxa_guard_release>
   b7882:	4805      	ldr	r0, [pc, #20]	; (b7898 <_Z20__fetch_global_Wire1v+0x44>)
   b7884:	f000 fc70 	bl	b8168 <atexit>
	return wire;
}
   b7888:	4802      	ldr	r0, [pc, #8]	; (b7894 <_Z20__fetch_global_Wire1v+0x40>)
   b788a:	b006      	add	sp, #24
   b788c:	bd10      	pop	{r4, pc}
   b788e:	bf00      	nop
   b7890:	2003e718 	.word	0x2003e718
   b7894:	2003e730 	.word	0x2003e730
   b7898:	000b77a1 	.word	0x000b77a1

000b789c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b789c:	4770      	bx	lr
	...

000b78a0 <_Z20acquireSerial1Bufferv>:
{
   b78a0:	b538      	push	{r3, r4, r5, lr}
   b78a2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b78a4:	2514      	movs	r5, #20
   b78a6:	462a      	mov	r2, r5
   b78a8:	2100      	movs	r1, #0
   b78aa:	f000 fc81 	bl	b81b0 <memset>
   b78ae:	8025      	strh	r5, [r4, #0]
   b78b0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78b2:	4907      	ldr	r1, [pc, #28]	; (b78d0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b78b4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78b6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b78b8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78ba:	f000 f831 	bl	b7920 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78be:	4904      	ldr	r1, [pc, #16]	; (b78d0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b78c0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78c2:	4628      	mov	r0, r5
   b78c4:	f000 f82c 	bl	b7920 <_ZnajRKSt9nothrow_t>
    };
   b78c8:	60e0      	str	r0, [r4, #12]
}
   b78ca:	4620      	mov	r0, r4
   b78cc:	bd38      	pop	{r3, r4, r5, pc}
   b78ce:	bf00      	nop
   b78d0:	000b86d4 	.word	0x000b86d4

000b78d4 <_Z22__fetch_global_Serial1v>:
{
   b78d4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b78d6:	4d0e      	ldr	r5, [pc, #56]	; (b7910 <_Z22__fetch_global_Serial1v+0x3c>)
   b78d8:	7829      	ldrb	r1, [r5, #0]
   b78da:	f3bf 8f5b 	dmb	ish
   b78de:	f011 0401 	ands.w	r4, r1, #1
{
   b78e2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b78e4:	d111      	bne.n	b790a <_Z22__fetch_global_Serial1v+0x36>
   b78e6:	4628      	mov	r0, r5
   b78e8:	f7fc fbd9 	bl	b409e <__cxa_guard_acquire>
   b78ec:	b168      	cbz	r0, b790a <_Z22__fetch_global_Serial1v+0x36>
   b78ee:	a801      	add	r0, sp, #4
   b78f0:	f7ff ffd6 	bl	b78a0 <_Z20acquireSerial1Bufferv>
   b78f4:	aa01      	add	r2, sp, #4
   b78f6:	4621      	mov	r1, r4
   b78f8:	4806      	ldr	r0, [pc, #24]	; (b7914 <_Z22__fetch_global_Serial1v+0x40>)
   b78fa:	f7ff fd9d 	bl	b7438 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b78fe:	4628      	mov	r0, r5
   b7900:	f7fc fbd2 	bl	b40a8 <__cxa_guard_release>
   b7904:	4804      	ldr	r0, [pc, #16]	; (b7918 <_Z22__fetch_global_Serial1v+0x44>)
   b7906:	f000 fc2f 	bl	b8168 <atexit>
    return serial1;
}
   b790a:	4802      	ldr	r0, [pc, #8]	; (b7914 <_Z22__fetch_global_Serial1v+0x40>)
   b790c:	b007      	add	sp, #28
   b790e:	bd30      	pop	{r4, r5, pc}
   b7910:	2003e744 	.word	0x2003e744
   b7914:	2003e748 	.word	0x2003e748
   b7918:	000b789d 	.word	0x000b789d

000b791c <_ZnwjRKSt9nothrow_t>:
   b791c:	f7fc bbb9 	b.w	b4092 <_Znwj>

000b7920 <_ZnajRKSt9nothrow_t>:
   b7920:	f7fc bbb9 	b.w	b4096 <_Znaj>

000b7924 <_ZSt25__throw_bad_function_callv>:
   b7924:	b508      	push	{r3, lr}
   b7926:	f7fe fcf9 	bl	b631c <abort>
	...

000b792c <__aeabi_drsub>:
   b792c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7930:	e002      	b.n	b7938 <__adddf3>
   b7932:	bf00      	nop

000b7934 <__aeabi_dsub>:
   b7934:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7938 <__adddf3>:
   b7938:	b530      	push	{r4, r5, lr}
   b793a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b793e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7942:	ea94 0f05 	teq	r4, r5
   b7946:	bf08      	it	eq
   b7948:	ea90 0f02 	teqeq	r0, r2
   b794c:	bf1f      	itttt	ne
   b794e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7952:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7956:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b795a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b795e:	f000 80e2 	beq.w	b7b26 <__adddf3+0x1ee>
   b7962:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7966:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b796a:	bfb8      	it	lt
   b796c:	426d      	neglt	r5, r5
   b796e:	dd0c      	ble.n	b798a <__adddf3+0x52>
   b7970:	442c      	add	r4, r5
   b7972:	ea80 0202 	eor.w	r2, r0, r2
   b7976:	ea81 0303 	eor.w	r3, r1, r3
   b797a:	ea82 0000 	eor.w	r0, r2, r0
   b797e:	ea83 0101 	eor.w	r1, r3, r1
   b7982:	ea80 0202 	eor.w	r2, r0, r2
   b7986:	ea81 0303 	eor.w	r3, r1, r3
   b798a:	2d36      	cmp	r5, #54	; 0x36
   b798c:	bf88      	it	hi
   b798e:	bd30      	pophi	{r4, r5, pc}
   b7990:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7994:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7998:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b799c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b79a0:	d002      	beq.n	b79a8 <__adddf3+0x70>
   b79a2:	4240      	negs	r0, r0
   b79a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b79a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b79ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b79b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b79b4:	d002      	beq.n	b79bc <__adddf3+0x84>
   b79b6:	4252      	negs	r2, r2
   b79b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b79bc:	ea94 0f05 	teq	r4, r5
   b79c0:	f000 80a7 	beq.w	b7b12 <__adddf3+0x1da>
   b79c4:	f1a4 0401 	sub.w	r4, r4, #1
   b79c8:	f1d5 0e20 	rsbs	lr, r5, #32
   b79cc:	db0d      	blt.n	b79ea <__adddf3+0xb2>
   b79ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   b79d2:	fa22 f205 	lsr.w	r2, r2, r5
   b79d6:	1880      	adds	r0, r0, r2
   b79d8:	f141 0100 	adc.w	r1, r1, #0
   b79dc:	fa03 f20e 	lsl.w	r2, r3, lr
   b79e0:	1880      	adds	r0, r0, r2
   b79e2:	fa43 f305 	asr.w	r3, r3, r5
   b79e6:	4159      	adcs	r1, r3
   b79e8:	e00e      	b.n	b7a08 <__adddf3+0xd0>
   b79ea:	f1a5 0520 	sub.w	r5, r5, #32
   b79ee:	f10e 0e20 	add.w	lr, lr, #32
   b79f2:	2a01      	cmp	r2, #1
   b79f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b79f8:	bf28      	it	cs
   b79fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   b79fe:	fa43 f305 	asr.w	r3, r3, r5
   b7a02:	18c0      	adds	r0, r0, r3
   b7a04:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7a08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7a0c:	d507      	bpl.n	b7a1e <__adddf3+0xe6>
   b7a0e:	f04f 0e00 	mov.w	lr, #0
   b7a12:	f1dc 0c00 	rsbs	ip, ip, #0
   b7a16:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7a1a:	eb6e 0101 	sbc.w	r1, lr, r1
   b7a1e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7a22:	d31b      	bcc.n	b7a5c <__adddf3+0x124>
   b7a24:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7a28:	d30c      	bcc.n	b7a44 <__adddf3+0x10c>
   b7a2a:	0849      	lsrs	r1, r1, #1
   b7a2c:	ea5f 0030 	movs.w	r0, r0, rrx
   b7a30:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7a34:	f104 0401 	add.w	r4, r4, #1
   b7a38:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7a3c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7a40:	f080 809a 	bcs.w	b7b78 <__adddf3+0x240>
   b7a44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7a48:	bf08      	it	eq
   b7a4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7a4e:	f150 0000 	adcs.w	r0, r0, #0
   b7a52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7a56:	ea41 0105 	orr.w	r1, r1, r5
   b7a5a:	bd30      	pop	{r4, r5, pc}
   b7a5c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7a60:	4140      	adcs	r0, r0
   b7a62:	eb41 0101 	adc.w	r1, r1, r1
   b7a66:	3c01      	subs	r4, #1
   b7a68:	bf28      	it	cs
   b7a6a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7a6e:	d2e9      	bcs.n	b7a44 <__adddf3+0x10c>
   b7a70:	f091 0f00 	teq	r1, #0
   b7a74:	bf04      	itt	eq
   b7a76:	4601      	moveq	r1, r0
   b7a78:	2000      	moveq	r0, #0
   b7a7a:	fab1 f381 	clz	r3, r1
   b7a7e:	bf08      	it	eq
   b7a80:	3320      	addeq	r3, #32
   b7a82:	f1a3 030b 	sub.w	r3, r3, #11
   b7a86:	f1b3 0220 	subs.w	r2, r3, #32
   b7a8a:	da0c      	bge.n	b7aa6 <__adddf3+0x16e>
   b7a8c:	320c      	adds	r2, #12
   b7a8e:	dd08      	ble.n	b7aa2 <__adddf3+0x16a>
   b7a90:	f102 0c14 	add.w	ip, r2, #20
   b7a94:	f1c2 020c 	rsb	r2, r2, #12
   b7a98:	fa01 f00c 	lsl.w	r0, r1, ip
   b7a9c:	fa21 f102 	lsr.w	r1, r1, r2
   b7aa0:	e00c      	b.n	b7abc <__adddf3+0x184>
   b7aa2:	f102 0214 	add.w	r2, r2, #20
   b7aa6:	bfd8      	it	le
   b7aa8:	f1c2 0c20 	rsble	ip, r2, #32
   b7aac:	fa01 f102 	lsl.w	r1, r1, r2
   b7ab0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7ab4:	bfdc      	itt	le
   b7ab6:	ea41 010c 	orrle.w	r1, r1, ip
   b7aba:	4090      	lslle	r0, r2
   b7abc:	1ae4      	subs	r4, r4, r3
   b7abe:	bfa2      	ittt	ge
   b7ac0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7ac4:	4329      	orrge	r1, r5
   b7ac6:	bd30      	popge	{r4, r5, pc}
   b7ac8:	ea6f 0404 	mvn.w	r4, r4
   b7acc:	3c1f      	subs	r4, #31
   b7ace:	da1c      	bge.n	b7b0a <__adddf3+0x1d2>
   b7ad0:	340c      	adds	r4, #12
   b7ad2:	dc0e      	bgt.n	b7af2 <__adddf3+0x1ba>
   b7ad4:	f104 0414 	add.w	r4, r4, #20
   b7ad8:	f1c4 0220 	rsb	r2, r4, #32
   b7adc:	fa20 f004 	lsr.w	r0, r0, r4
   b7ae0:	fa01 f302 	lsl.w	r3, r1, r2
   b7ae4:	ea40 0003 	orr.w	r0, r0, r3
   b7ae8:	fa21 f304 	lsr.w	r3, r1, r4
   b7aec:	ea45 0103 	orr.w	r1, r5, r3
   b7af0:	bd30      	pop	{r4, r5, pc}
   b7af2:	f1c4 040c 	rsb	r4, r4, #12
   b7af6:	f1c4 0220 	rsb	r2, r4, #32
   b7afa:	fa20 f002 	lsr.w	r0, r0, r2
   b7afe:	fa01 f304 	lsl.w	r3, r1, r4
   b7b02:	ea40 0003 	orr.w	r0, r0, r3
   b7b06:	4629      	mov	r1, r5
   b7b08:	bd30      	pop	{r4, r5, pc}
   b7b0a:	fa21 f004 	lsr.w	r0, r1, r4
   b7b0e:	4629      	mov	r1, r5
   b7b10:	bd30      	pop	{r4, r5, pc}
   b7b12:	f094 0f00 	teq	r4, #0
   b7b16:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7b1a:	bf06      	itte	eq
   b7b1c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7b20:	3401      	addeq	r4, #1
   b7b22:	3d01      	subne	r5, #1
   b7b24:	e74e      	b.n	b79c4 <__adddf3+0x8c>
   b7b26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7b2a:	bf18      	it	ne
   b7b2c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7b30:	d029      	beq.n	b7b86 <__adddf3+0x24e>
   b7b32:	ea94 0f05 	teq	r4, r5
   b7b36:	bf08      	it	eq
   b7b38:	ea90 0f02 	teqeq	r0, r2
   b7b3c:	d005      	beq.n	b7b4a <__adddf3+0x212>
   b7b3e:	ea54 0c00 	orrs.w	ip, r4, r0
   b7b42:	bf04      	itt	eq
   b7b44:	4619      	moveq	r1, r3
   b7b46:	4610      	moveq	r0, r2
   b7b48:	bd30      	pop	{r4, r5, pc}
   b7b4a:	ea91 0f03 	teq	r1, r3
   b7b4e:	bf1e      	ittt	ne
   b7b50:	2100      	movne	r1, #0
   b7b52:	2000      	movne	r0, #0
   b7b54:	bd30      	popne	{r4, r5, pc}
   b7b56:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7b5a:	d105      	bne.n	b7b68 <__adddf3+0x230>
   b7b5c:	0040      	lsls	r0, r0, #1
   b7b5e:	4149      	adcs	r1, r1
   b7b60:	bf28      	it	cs
   b7b62:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7b66:	bd30      	pop	{r4, r5, pc}
   b7b68:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7b6c:	bf3c      	itt	cc
   b7b6e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7b72:	bd30      	popcc	{r4, r5, pc}
   b7b74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7b78:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7b7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7b80:	f04f 0000 	mov.w	r0, #0
   b7b84:	bd30      	pop	{r4, r5, pc}
   b7b86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7b8a:	bf1a      	itte	ne
   b7b8c:	4619      	movne	r1, r3
   b7b8e:	4610      	movne	r0, r2
   b7b90:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7b94:	bf1c      	itt	ne
   b7b96:	460b      	movne	r3, r1
   b7b98:	4602      	movne	r2, r0
   b7b9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7b9e:	bf06      	itte	eq
   b7ba0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7ba4:	ea91 0f03 	teqeq	r1, r3
   b7ba8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7bac:	bd30      	pop	{r4, r5, pc}
   b7bae:	bf00      	nop

000b7bb0 <__aeabi_ui2d>:
   b7bb0:	f090 0f00 	teq	r0, #0
   b7bb4:	bf04      	itt	eq
   b7bb6:	2100      	moveq	r1, #0
   b7bb8:	4770      	bxeq	lr
   b7bba:	b530      	push	{r4, r5, lr}
   b7bbc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7bc0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7bc4:	f04f 0500 	mov.w	r5, #0
   b7bc8:	f04f 0100 	mov.w	r1, #0
   b7bcc:	e750      	b.n	b7a70 <__adddf3+0x138>
   b7bce:	bf00      	nop

000b7bd0 <__aeabi_i2d>:
   b7bd0:	f090 0f00 	teq	r0, #0
   b7bd4:	bf04      	itt	eq
   b7bd6:	2100      	moveq	r1, #0
   b7bd8:	4770      	bxeq	lr
   b7bda:	b530      	push	{r4, r5, lr}
   b7bdc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7be0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7be4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7be8:	bf48      	it	mi
   b7bea:	4240      	negmi	r0, r0
   b7bec:	f04f 0100 	mov.w	r1, #0
   b7bf0:	e73e      	b.n	b7a70 <__adddf3+0x138>
   b7bf2:	bf00      	nop

000b7bf4 <__aeabi_f2d>:
   b7bf4:	0042      	lsls	r2, r0, #1
   b7bf6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7bfa:	ea4f 0131 	mov.w	r1, r1, rrx
   b7bfe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7c02:	bf1f      	itttt	ne
   b7c04:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7c08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7c0c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7c10:	4770      	bxne	lr
   b7c12:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7c16:	bf08      	it	eq
   b7c18:	4770      	bxeq	lr
   b7c1a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7c1e:	bf04      	itt	eq
   b7c20:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7c24:	4770      	bxeq	lr
   b7c26:	b530      	push	{r4, r5, lr}
   b7c28:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7c2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7c30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7c34:	e71c      	b.n	b7a70 <__adddf3+0x138>
   b7c36:	bf00      	nop

000b7c38 <__aeabi_ul2d>:
   b7c38:	ea50 0201 	orrs.w	r2, r0, r1
   b7c3c:	bf08      	it	eq
   b7c3e:	4770      	bxeq	lr
   b7c40:	b530      	push	{r4, r5, lr}
   b7c42:	f04f 0500 	mov.w	r5, #0
   b7c46:	e00a      	b.n	b7c5e <__aeabi_l2d+0x16>

000b7c48 <__aeabi_l2d>:
   b7c48:	ea50 0201 	orrs.w	r2, r0, r1
   b7c4c:	bf08      	it	eq
   b7c4e:	4770      	bxeq	lr
   b7c50:	b530      	push	{r4, r5, lr}
   b7c52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7c56:	d502      	bpl.n	b7c5e <__aeabi_l2d+0x16>
   b7c58:	4240      	negs	r0, r0
   b7c5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7c5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7c62:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7c66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7c6a:	f43f aed8 	beq.w	b7a1e <__adddf3+0xe6>
   b7c6e:	f04f 0203 	mov.w	r2, #3
   b7c72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7c76:	bf18      	it	ne
   b7c78:	3203      	addne	r2, #3
   b7c7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7c7e:	bf18      	it	ne
   b7c80:	3203      	addne	r2, #3
   b7c82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7c86:	f1c2 0320 	rsb	r3, r2, #32
   b7c8a:	fa00 fc03 	lsl.w	ip, r0, r3
   b7c8e:	fa20 f002 	lsr.w	r0, r0, r2
   b7c92:	fa01 fe03 	lsl.w	lr, r1, r3
   b7c96:	ea40 000e 	orr.w	r0, r0, lr
   b7c9a:	fa21 f102 	lsr.w	r1, r1, r2
   b7c9e:	4414      	add	r4, r2
   b7ca0:	e6bd      	b.n	b7a1e <__adddf3+0xe6>
   b7ca2:	bf00      	nop

000b7ca4 <__aeabi_dmul>:
   b7ca4:	b570      	push	{r4, r5, r6, lr}
   b7ca6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7caa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7cae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7cb2:	bf1d      	ittte	ne
   b7cb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7cb8:	ea94 0f0c 	teqne	r4, ip
   b7cbc:	ea95 0f0c 	teqne	r5, ip
   b7cc0:	f000 f8de 	bleq	b7e80 <__aeabi_dmul+0x1dc>
   b7cc4:	442c      	add	r4, r5
   b7cc6:	ea81 0603 	eor.w	r6, r1, r3
   b7cca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7cce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7cd2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7cd6:	bf18      	it	ne
   b7cd8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7cdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7ce4:	d038      	beq.n	b7d58 <__aeabi_dmul+0xb4>
   b7ce6:	fba0 ce02 	umull	ip, lr, r0, r2
   b7cea:	f04f 0500 	mov.w	r5, #0
   b7cee:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7cf2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7cf6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7cfa:	f04f 0600 	mov.w	r6, #0
   b7cfe:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7d02:	f09c 0f00 	teq	ip, #0
   b7d06:	bf18      	it	ne
   b7d08:	f04e 0e01 	orrne.w	lr, lr, #1
   b7d0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7d10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7d14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7d18:	d204      	bcs.n	b7d24 <__aeabi_dmul+0x80>
   b7d1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7d1e:	416d      	adcs	r5, r5
   b7d20:	eb46 0606 	adc.w	r6, r6, r6
   b7d24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7d28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7d2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7d30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7d34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7d38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7d3c:	bf88      	it	hi
   b7d3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7d42:	d81e      	bhi.n	b7d82 <__aeabi_dmul+0xde>
   b7d44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7d48:	bf08      	it	eq
   b7d4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7d4e:	f150 0000 	adcs.w	r0, r0, #0
   b7d52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7d56:	bd70      	pop	{r4, r5, r6, pc}
   b7d58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7d5c:	ea46 0101 	orr.w	r1, r6, r1
   b7d60:	ea40 0002 	orr.w	r0, r0, r2
   b7d64:	ea81 0103 	eor.w	r1, r1, r3
   b7d68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7d6c:	bfc2      	ittt	gt
   b7d6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7d72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7d76:	bd70      	popgt	{r4, r5, r6, pc}
   b7d78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7d7c:	f04f 0e00 	mov.w	lr, #0
   b7d80:	3c01      	subs	r4, #1
   b7d82:	f300 80ab 	bgt.w	b7edc <__aeabi_dmul+0x238>
   b7d86:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7d8a:	bfde      	ittt	le
   b7d8c:	2000      	movle	r0, #0
   b7d8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7d92:	bd70      	pople	{r4, r5, r6, pc}
   b7d94:	f1c4 0400 	rsb	r4, r4, #0
   b7d98:	3c20      	subs	r4, #32
   b7d9a:	da35      	bge.n	b7e08 <__aeabi_dmul+0x164>
   b7d9c:	340c      	adds	r4, #12
   b7d9e:	dc1b      	bgt.n	b7dd8 <__aeabi_dmul+0x134>
   b7da0:	f104 0414 	add.w	r4, r4, #20
   b7da4:	f1c4 0520 	rsb	r5, r4, #32
   b7da8:	fa00 f305 	lsl.w	r3, r0, r5
   b7dac:	fa20 f004 	lsr.w	r0, r0, r4
   b7db0:	fa01 f205 	lsl.w	r2, r1, r5
   b7db4:	ea40 0002 	orr.w	r0, r0, r2
   b7db8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7dbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7dc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7dc4:	fa21 f604 	lsr.w	r6, r1, r4
   b7dc8:	eb42 0106 	adc.w	r1, r2, r6
   b7dcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7dd0:	bf08      	it	eq
   b7dd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7dd6:	bd70      	pop	{r4, r5, r6, pc}
   b7dd8:	f1c4 040c 	rsb	r4, r4, #12
   b7ddc:	f1c4 0520 	rsb	r5, r4, #32
   b7de0:	fa00 f304 	lsl.w	r3, r0, r4
   b7de4:	fa20 f005 	lsr.w	r0, r0, r5
   b7de8:	fa01 f204 	lsl.w	r2, r1, r4
   b7dec:	ea40 0002 	orr.w	r0, r0, r2
   b7df0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7df4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7df8:	f141 0100 	adc.w	r1, r1, #0
   b7dfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7e00:	bf08      	it	eq
   b7e02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7e06:	bd70      	pop	{r4, r5, r6, pc}
   b7e08:	f1c4 0520 	rsb	r5, r4, #32
   b7e0c:	fa00 f205 	lsl.w	r2, r0, r5
   b7e10:	ea4e 0e02 	orr.w	lr, lr, r2
   b7e14:	fa20 f304 	lsr.w	r3, r0, r4
   b7e18:	fa01 f205 	lsl.w	r2, r1, r5
   b7e1c:	ea43 0302 	orr.w	r3, r3, r2
   b7e20:	fa21 f004 	lsr.w	r0, r1, r4
   b7e24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7e28:	fa21 f204 	lsr.w	r2, r1, r4
   b7e2c:	ea20 0002 	bic.w	r0, r0, r2
   b7e30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7e34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7e38:	bf08      	it	eq
   b7e3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7e3e:	bd70      	pop	{r4, r5, r6, pc}
   b7e40:	f094 0f00 	teq	r4, #0
   b7e44:	d10f      	bne.n	b7e66 <__aeabi_dmul+0x1c2>
   b7e46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7e4a:	0040      	lsls	r0, r0, #1
   b7e4c:	eb41 0101 	adc.w	r1, r1, r1
   b7e50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7e54:	bf08      	it	eq
   b7e56:	3c01      	subeq	r4, #1
   b7e58:	d0f7      	beq.n	b7e4a <__aeabi_dmul+0x1a6>
   b7e5a:	ea41 0106 	orr.w	r1, r1, r6
   b7e5e:	f095 0f00 	teq	r5, #0
   b7e62:	bf18      	it	ne
   b7e64:	4770      	bxne	lr
   b7e66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7e6a:	0052      	lsls	r2, r2, #1
   b7e6c:	eb43 0303 	adc.w	r3, r3, r3
   b7e70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7e74:	bf08      	it	eq
   b7e76:	3d01      	subeq	r5, #1
   b7e78:	d0f7      	beq.n	b7e6a <__aeabi_dmul+0x1c6>
   b7e7a:	ea43 0306 	orr.w	r3, r3, r6
   b7e7e:	4770      	bx	lr
   b7e80:	ea94 0f0c 	teq	r4, ip
   b7e84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7e88:	bf18      	it	ne
   b7e8a:	ea95 0f0c 	teqne	r5, ip
   b7e8e:	d00c      	beq.n	b7eaa <__aeabi_dmul+0x206>
   b7e90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7e94:	bf18      	it	ne
   b7e96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7e9a:	d1d1      	bne.n	b7e40 <__aeabi_dmul+0x19c>
   b7e9c:	ea81 0103 	eor.w	r1, r1, r3
   b7ea0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7ea4:	f04f 0000 	mov.w	r0, #0
   b7ea8:	bd70      	pop	{r4, r5, r6, pc}
   b7eaa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7eae:	bf06      	itte	eq
   b7eb0:	4610      	moveq	r0, r2
   b7eb2:	4619      	moveq	r1, r3
   b7eb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7eb8:	d019      	beq.n	b7eee <__aeabi_dmul+0x24a>
   b7eba:	ea94 0f0c 	teq	r4, ip
   b7ebe:	d102      	bne.n	b7ec6 <__aeabi_dmul+0x222>
   b7ec0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7ec4:	d113      	bne.n	b7eee <__aeabi_dmul+0x24a>
   b7ec6:	ea95 0f0c 	teq	r5, ip
   b7eca:	d105      	bne.n	b7ed8 <__aeabi_dmul+0x234>
   b7ecc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7ed0:	bf1c      	itt	ne
   b7ed2:	4610      	movne	r0, r2
   b7ed4:	4619      	movne	r1, r3
   b7ed6:	d10a      	bne.n	b7eee <__aeabi_dmul+0x24a>
   b7ed8:	ea81 0103 	eor.w	r1, r1, r3
   b7edc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7ee0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7ee4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7ee8:	f04f 0000 	mov.w	r0, #0
   b7eec:	bd70      	pop	{r4, r5, r6, pc}
   b7eee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7ef2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7ef6:	bd70      	pop	{r4, r5, r6, pc}

000b7ef8 <__aeabi_ddiv>:
   b7ef8:	b570      	push	{r4, r5, r6, lr}
   b7efa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7efe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7f02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7f06:	bf1d      	ittte	ne
   b7f08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7f0c:	ea94 0f0c 	teqne	r4, ip
   b7f10:	ea95 0f0c 	teqne	r5, ip
   b7f14:	f000 f8a7 	bleq	b8066 <__aeabi_ddiv+0x16e>
   b7f18:	eba4 0405 	sub.w	r4, r4, r5
   b7f1c:	ea81 0e03 	eor.w	lr, r1, r3
   b7f20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7f24:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7f28:	f000 8088 	beq.w	b803c <__aeabi_ddiv+0x144>
   b7f2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7f30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7f34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7f38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7f3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7f40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7f44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7f48:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7f4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7f50:	429d      	cmp	r5, r3
   b7f52:	bf08      	it	eq
   b7f54:	4296      	cmpeq	r6, r2
   b7f56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7f5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7f5e:	d202      	bcs.n	b7f66 <__aeabi_ddiv+0x6e>
   b7f60:	085b      	lsrs	r3, r3, #1
   b7f62:	ea4f 0232 	mov.w	r2, r2, rrx
   b7f66:	1ab6      	subs	r6, r6, r2
   b7f68:	eb65 0503 	sbc.w	r5, r5, r3
   b7f6c:	085b      	lsrs	r3, r3, #1
   b7f6e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7f72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7f76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b7f7a:	ebb6 0e02 	subs.w	lr, r6, r2
   b7f7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7f82:	bf22      	ittt	cs
   b7f84:	1ab6      	subcs	r6, r6, r2
   b7f86:	4675      	movcs	r5, lr
   b7f88:	ea40 000c 	orrcs.w	r0, r0, ip
   b7f8c:	085b      	lsrs	r3, r3, #1
   b7f8e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7f92:	ebb6 0e02 	subs.w	lr, r6, r2
   b7f96:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7f9a:	bf22      	ittt	cs
   b7f9c:	1ab6      	subcs	r6, r6, r2
   b7f9e:	4675      	movcs	r5, lr
   b7fa0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7fa4:	085b      	lsrs	r3, r3, #1
   b7fa6:	ea4f 0232 	mov.w	r2, r2, rrx
   b7faa:	ebb6 0e02 	subs.w	lr, r6, r2
   b7fae:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7fb2:	bf22      	ittt	cs
   b7fb4:	1ab6      	subcs	r6, r6, r2
   b7fb6:	4675      	movcs	r5, lr
   b7fb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7fbc:	085b      	lsrs	r3, r3, #1
   b7fbe:	ea4f 0232 	mov.w	r2, r2, rrx
   b7fc2:	ebb6 0e02 	subs.w	lr, r6, r2
   b7fc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7fca:	bf22      	ittt	cs
   b7fcc:	1ab6      	subcs	r6, r6, r2
   b7fce:	4675      	movcs	r5, lr
   b7fd0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7fd4:	ea55 0e06 	orrs.w	lr, r5, r6
   b7fd8:	d018      	beq.n	b800c <__aeabi_ddiv+0x114>
   b7fda:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7fde:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7fe2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7fe6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b7fea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7fee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7ff2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7ff6:	d1c0      	bne.n	b7f7a <__aeabi_ddiv+0x82>
   b7ff8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7ffc:	d10b      	bne.n	b8016 <__aeabi_ddiv+0x11e>
   b7ffe:	ea41 0100 	orr.w	r1, r1, r0
   b8002:	f04f 0000 	mov.w	r0, #0
   b8006:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b800a:	e7b6      	b.n	b7f7a <__aeabi_ddiv+0x82>
   b800c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8010:	bf04      	itt	eq
   b8012:	4301      	orreq	r1, r0
   b8014:	2000      	moveq	r0, #0
   b8016:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b801a:	bf88      	it	hi
   b801c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8020:	f63f aeaf 	bhi.w	b7d82 <__aeabi_dmul+0xde>
   b8024:	ebb5 0c03 	subs.w	ip, r5, r3
   b8028:	bf04      	itt	eq
   b802a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b802e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8032:	f150 0000 	adcs.w	r0, r0, #0
   b8036:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b803a:	bd70      	pop	{r4, r5, r6, pc}
   b803c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8040:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8044:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8048:	bfc2      	ittt	gt
   b804a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b804e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8052:	bd70      	popgt	{r4, r5, r6, pc}
   b8054:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8058:	f04f 0e00 	mov.w	lr, #0
   b805c:	3c01      	subs	r4, #1
   b805e:	e690      	b.n	b7d82 <__aeabi_dmul+0xde>
   b8060:	ea45 0e06 	orr.w	lr, r5, r6
   b8064:	e68d      	b.n	b7d82 <__aeabi_dmul+0xde>
   b8066:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b806a:	ea94 0f0c 	teq	r4, ip
   b806e:	bf08      	it	eq
   b8070:	ea95 0f0c 	teqeq	r5, ip
   b8074:	f43f af3b 	beq.w	b7eee <__aeabi_dmul+0x24a>
   b8078:	ea94 0f0c 	teq	r4, ip
   b807c:	d10a      	bne.n	b8094 <__aeabi_ddiv+0x19c>
   b807e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8082:	f47f af34 	bne.w	b7eee <__aeabi_dmul+0x24a>
   b8086:	ea95 0f0c 	teq	r5, ip
   b808a:	f47f af25 	bne.w	b7ed8 <__aeabi_dmul+0x234>
   b808e:	4610      	mov	r0, r2
   b8090:	4619      	mov	r1, r3
   b8092:	e72c      	b.n	b7eee <__aeabi_dmul+0x24a>
   b8094:	ea95 0f0c 	teq	r5, ip
   b8098:	d106      	bne.n	b80a8 <__aeabi_ddiv+0x1b0>
   b809a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b809e:	f43f aefd 	beq.w	b7e9c <__aeabi_dmul+0x1f8>
   b80a2:	4610      	mov	r0, r2
   b80a4:	4619      	mov	r1, r3
   b80a6:	e722      	b.n	b7eee <__aeabi_dmul+0x24a>
   b80a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b80ac:	bf18      	it	ne
   b80ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b80b2:	f47f aec5 	bne.w	b7e40 <__aeabi_dmul+0x19c>
   b80b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b80ba:	f47f af0d 	bne.w	b7ed8 <__aeabi_dmul+0x234>
   b80be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b80c2:	f47f aeeb 	bne.w	b7e9c <__aeabi_dmul+0x1f8>
   b80c6:	e712      	b.n	b7eee <__aeabi_dmul+0x24a>

000b80c8 <__aeabi_d2f>:
   b80c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b80cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b80d0:	bf24      	itt	cs
   b80d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b80d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b80da:	d90d      	bls.n	b80f8 <__aeabi_d2f+0x30>
   b80dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b80e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b80e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b80e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b80ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b80f0:	bf08      	it	eq
   b80f2:	f020 0001 	biceq.w	r0, r0, #1
   b80f6:	4770      	bx	lr
   b80f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b80fc:	d121      	bne.n	b8142 <__aeabi_d2f+0x7a>
   b80fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b8102:	bfbc      	itt	lt
   b8104:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b8108:	4770      	bxlt	lr
   b810a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b810e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b8112:	f1c2 0218 	rsb	r2, r2, #24
   b8116:	f1c2 0c20 	rsb	ip, r2, #32
   b811a:	fa10 f30c 	lsls.w	r3, r0, ip
   b811e:	fa20 f002 	lsr.w	r0, r0, r2
   b8122:	bf18      	it	ne
   b8124:	f040 0001 	orrne.w	r0, r0, #1
   b8128:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b812c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b8130:	fa03 fc0c 	lsl.w	ip, r3, ip
   b8134:	ea40 000c 	orr.w	r0, r0, ip
   b8138:	fa23 f302 	lsr.w	r3, r3, r2
   b813c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b8140:	e7cc      	b.n	b80dc <__aeabi_d2f+0x14>
   b8142:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b8146:	d107      	bne.n	b8158 <__aeabi_d2f+0x90>
   b8148:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b814c:	bf1e      	ittt	ne
   b814e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b8152:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b8156:	4770      	bxne	lr
   b8158:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b815c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b8160:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8164:	4770      	bx	lr
   b8166:	bf00      	nop

000b8168 <atexit>:
   b8168:	2300      	movs	r3, #0
   b816a:	4601      	mov	r1, r0
   b816c:	461a      	mov	r2, r3
   b816e:	4618      	mov	r0, r3
   b8170:	f000 b87a 	b.w	b8268 <__register_exitproc>

000b8174 <memcmp>:
   b8174:	b510      	push	{r4, lr}
   b8176:	3901      	subs	r1, #1
   b8178:	4402      	add	r2, r0
   b817a:	4290      	cmp	r0, r2
   b817c:	d101      	bne.n	b8182 <memcmp+0xe>
   b817e:	2000      	movs	r0, #0
   b8180:	e005      	b.n	b818e <memcmp+0x1a>
   b8182:	7803      	ldrb	r3, [r0, #0]
   b8184:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8188:	42a3      	cmp	r3, r4
   b818a:	d001      	beq.n	b8190 <memcmp+0x1c>
   b818c:	1b18      	subs	r0, r3, r4
   b818e:	bd10      	pop	{r4, pc}
   b8190:	3001      	adds	r0, #1
   b8192:	e7f2      	b.n	b817a <memcmp+0x6>

000b8194 <memcpy>:
   b8194:	440a      	add	r2, r1
   b8196:	4291      	cmp	r1, r2
   b8198:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b819c:	d100      	bne.n	b81a0 <memcpy+0xc>
   b819e:	4770      	bx	lr
   b81a0:	b510      	push	{r4, lr}
   b81a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b81a6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b81aa:	4291      	cmp	r1, r2
   b81ac:	d1f9      	bne.n	b81a2 <memcpy+0xe>
   b81ae:	bd10      	pop	{r4, pc}

000b81b0 <memset>:
   b81b0:	4402      	add	r2, r0
   b81b2:	4603      	mov	r3, r0
   b81b4:	4293      	cmp	r3, r2
   b81b6:	d100      	bne.n	b81ba <memset+0xa>
   b81b8:	4770      	bx	lr
   b81ba:	f803 1b01 	strb.w	r1, [r3], #1
   b81be:	e7f9      	b.n	b81b4 <memset+0x4>

000b81c0 <srand>:
   b81c0:	b538      	push	{r3, r4, r5, lr}
   b81c2:	4b10      	ldr	r3, [pc, #64]	; (b8204 <srand+0x44>)
   b81c4:	681d      	ldr	r5, [r3, #0]
   b81c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b81c8:	4604      	mov	r4, r0
   b81ca:	b9b3      	cbnz	r3, b81fa <srand+0x3a>
   b81cc:	2018      	movs	r0, #24
   b81ce:	f7fe f885 	bl	b62dc <malloc>
   b81d2:	4602      	mov	r2, r0
   b81d4:	63a8      	str	r0, [r5, #56]	; 0x38
   b81d6:	b920      	cbnz	r0, b81e2 <srand+0x22>
   b81d8:	4b0b      	ldr	r3, [pc, #44]	; (b8208 <srand+0x48>)
   b81da:	480c      	ldr	r0, [pc, #48]	; (b820c <srand+0x4c>)
   b81dc:	2142      	movs	r1, #66	; 0x42
   b81de:	f7fe f8ad 	bl	b633c <__assert_func>
   b81e2:	490b      	ldr	r1, [pc, #44]	; (b8210 <srand+0x50>)
   b81e4:	4b0b      	ldr	r3, [pc, #44]	; (b8214 <srand+0x54>)
   b81e6:	e9c0 1300 	strd	r1, r3, [r0]
   b81ea:	4b0b      	ldr	r3, [pc, #44]	; (b8218 <srand+0x58>)
   b81ec:	6083      	str	r3, [r0, #8]
   b81ee:	230b      	movs	r3, #11
   b81f0:	8183      	strh	r3, [r0, #12]
   b81f2:	2100      	movs	r1, #0
   b81f4:	2001      	movs	r0, #1
   b81f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b81fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b81fc:	2200      	movs	r2, #0
   b81fe:	611c      	str	r4, [r3, #16]
   b8200:	615a      	str	r2, [r3, #20]
   b8202:	bd38      	pop	{r3, r4, r5, pc}
   b8204:	2003dd9c 	.word	0x2003dd9c
   b8208:	000b86d5 	.word	0x000b86d5
   b820c:	000b86ec 	.word	0x000b86ec
   b8210:	abcd330e 	.word	0xabcd330e
   b8214:	e66d1234 	.word	0xe66d1234
   b8218:	0005deec 	.word	0x0005deec

000b821c <strdup>:
   b821c:	4b02      	ldr	r3, [pc, #8]	; (b8228 <strdup+0xc>)
   b821e:	4601      	mov	r1, r0
   b8220:	6818      	ldr	r0, [r3, #0]
   b8222:	f000 b803 	b.w	b822c <_strdup_r>
   b8226:	bf00      	nop
   b8228:	2003dd9c 	.word	0x2003dd9c

000b822c <_strdup_r>:
   b822c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b822e:	4604      	mov	r4, r0
   b8230:	4608      	mov	r0, r1
   b8232:	460d      	mov	r5, r1
   b8234:	f000 f80f 	bl	b8256 <strlen>
   b8238:	1c42      	adds	r2, r0, #1
   b823a:	4611      	mov	r1, r2
   b823c:	4620      	mov	r0, r4
   b823e:	9201      	str	r2, [sp, #4]
   b8240:	f7fe f874 	bl	b632c <_malloc_r>
   b8244:	4604      	mov	r4, r0
   b8246:	b118      	cbz	r0, b8250 <_strdup_r+0x24>
   b8248:	9a01      	ldr	r2, [sp, #4]
   b824a:	4629      	mov	r1, r5
   b824c:	f7ff ffa2 	bl	b8194 <memcpy>
   b8250:	4620      	mov	r0, r4
   b8252:	b003      	add	sp, #12
   b8254:	bd30      	pop	{r4, r5, pc}

000b8256 <strlen>:
   b8256:	4603      	mov	r3, r0
   b8258:	f813 2b01 	ldrb.w	r2, [r3], #1
   b825c:	2a00      	cmp	r2, #0
   b825e:	d1fb      	bne.n	b8258 <strlen+0x2>
   b8260:	1a18      	subs	r0, r3, r0
   b8262:	3801      	subs	r0, #1
   b8264:	4770      	bx	lr
	...

000b8268 <__register_exitproc>:
   b8268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b826c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8328 <__register_exitproc+0xc0>
   b8270:	4606      	mov	r6, r0
   b8272:	f8d8 0000 	ldr.w	r0, [r8]
   b8276:	461f      	mov	r7, r3
   b8278:	460d      	mov	r5, r1
   b827a:	4691      	mov	r9, r2
   b827c:	f000 f856 	bl	b832c <__retarget_lock_acquire_recursive>
   b8280:	4b25      	ldr	r3, [pc, #148]	; (b8318 <__register_exitproc+0xb0>)
   b8282:	681c      	ldr	r4, [r3, #0]
   b8284:	b934      	cbnz	r4, b8294 <__register_exitproc+0x2c>
   b8286:	4c25      	ldr	r4, [pc, #148]	; (b831c <__register_exitproc+0xb4>)
   b8288:	601c      	str	r4, [r3, #0]
   b828a:	4b25      	ldr	r3, [pc, #148]	; (b8320 <__register_exitproc+0xb8>)
   b828c:	b113      	cbz	r3, b8294 <__register_exitproc+0x2c>
   b828e:	681b      	ldr	r3, [r3, #0]
   b8290:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8294:	6863      	ldr	r3, [r4, #4]
   b8296:	2b1f      	cmp	r3, #31
   b8298:	dd07      	ble.n	b82aa <__register_exitproc+0x42>
   b829a:	f8d8 0000 	ldr.w	r0, [r8]
   b829e:	f000 f847 	bl	b8330 <__retarget_lock_release_recursive>
   b82a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b82a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b82aa:	b34e      	cbz	r6, b8300 <__register_exitproc+0x98>
   b82ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b82b0:	b988      	cbnz	r0, b82d6 <__register_exitproc+0x6e>
   b82b2:	4b1c      	ldr	r3, [pc, #112]	; (b8324 <__register_exitproc+0xbc>)
   b82b4:	b923      	cbnz	r3, b82c0 <__register_exitproc+0x58>
   b82b6:	f8d8 0000 	ldr.w	r0, [r8]
   b82ba:	f000 f838 	bl	b832e <__retarget_lock_release>
   b82be:	e7f0      	b.n	b82a2 <__register_exitproc+0x3a>
   b82c0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b82c4:	f7fe f80a 	bl	b62dc <malloc>
   b82c8:	2800      	cmp	r0, #0
   b82ca:	d0f4      	beq.n	b82b6 <__register_exitproc+0x4e>
   b82cc:	2300      	movs	r3, #0
   b82ce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b82d2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b82d6:	6863      	ldr	r3, [r4, #4]
   b82d8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b82dc:	2201      	movs	r2, #1
   b82de:	409a      	lsls	r2, r3
   b82e0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b82e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b82e8:	4313      	orrs	r3, r2
   b82ea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b82ee:	2e02      	cmp	r6, #2
   b82f0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b82f4:	bf02      	ittt	eq
   b82f6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b82fa:	4313      	orreq	r3, r2
   b82fc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8300:	6863      	ldr	r3, [r4, #4]
   b8302:	f8d8 0000 	ldr.w	r0, [r8]
   b8306:	1c5a      	adds	r2, r3, #1
   b8308:	3302      	adds	r3, #2
   b830a:	6062      	str	r2, [r4, #4]
   b830c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8310:	f000 f80e 	bl	b8330 <__retarget_lock_release_recursive>
   b8314:	2000      	movs	r0, #0
   b8316:	e7c6      	b.n	b82a6 <__register_exitproc+0x3e>
   b8318:	2003e7e8 	.word	0x2003e7e8
   b831c:	2003e75c 	.word	0x2003e75c
   b8320:	00000000 	.word	0x00000000
   b8324:	000b62dd 	.word	0x000b62dd
   b8328:	2003de00 	.word	0x2003de00

000b832c <__retarget_lock_acquire_recursive>:
   b832c:	4770      	bx	lr

000b832e <__retarget_lock_release>:
   b832e:	4770      	bx	lr

000b8330 <__retarget_lock_release_recursive>:
   b8330:	4770      	bx	lr

000b8332 <link_code_end>:
	...

000b8334 <dynalib_user>:
   b8334:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b8344:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   b8354:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   b8364:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   b8374:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   b8384:	4f4d 4544 7525 003e 614d 6278 746f 7869     MODE%u>.Maxbotix
   b8394:	5420 7365 0074 6c53 6565 6970 676e 6620      Test.Sleeping f
   b83a4:	726f 0020 6c25 2c69 2e25 6635 252c 302e     or .%li,%.5f,%.0
   b83b4:	6632 252c 302e 6632 6600 6961 656c 2064     2f,%.02f.failed 
   b83c4:	6f74 6f20 6570 206e 6163 6472 6400 7369     to open card.dis
   b83d4:	6174 636e 2e65 7363 0076 706f 6e65 6e69     tance.csv.openin
   b83e4:	2067 6964 7473 6e61 6563 632e 7673 6620     g distance.csv f
   b83f4:	726f 7720 6972 6574 6620 6961 656c 0064     or write failed.
   b8404:	000a 7254 6979 676e 7420 206f 6f63 6e6e     ..Trying to conn
   b8414:	6365 0074 7570 6c62 7369 6968 676e 6420     ect.publishing d
   b8424:	7461 0061 7570 6c62 7369 2068 6572 7573     ata.publish resu
   b8434:	746c 2520 0064 616d 2078 6974 656d 6620     lt %d.max time f
   b8444:	726f 7020 6275 696c 6873 6e69 2067 6572     or publishing re
   b8454:	6361 6568 2064 6977 6874 756f 2074 7573     ached without su
   b8464:	6363 7365 3b73 6720 206f 6f74 7320 656c     ccess; go to sle
   b8474:	7065 4e00 746f 6d20 7861 7420 6d69 2c65     ep.Not max time,
   b8484:	7420 7972 6120 6167 6e69 7420 206f 6f63      try again to co
   b8494:	6e6e 6365 2074 6e61 2064 7570 6c62 7369     nnect and publis
   b84a4:	0068 6f67 6e69 2067 6f74 7320 656c 7065     h.going to sleep
   b84b4:	4600 6565 696c 676e 7220 7365 6c74 7365     .Feeling restles
   b84c4:	0073 0000                                   s...

000b84c8 <_ZTVN8particle11SPISettingsE>:
	...
   b84d0:	4161 000b 40af 000b 4117 000b               aA...@...A..

000b84dc <_ZTV4File>:
	...
   b84e4:	40cb 000b 4125 000b 40ff 000b 40f9 000b     .@..%A...@...@..
   b84f4:	40b1 000b 40d9 000b 40d3 000b 40cd 000b     .@...@...@...@..
   b8504:	6177 6574 4c72 7665 6c65 0000               waterLevel..

000b8510 <_ZTVN5spark13CellularClassE>:
	...
   b8518:	6467 000b 645d 000b 6453 000b 6409 000b     gd..]d..Sd...d..
   b8528:	6447 000b 643b 000b 6e35 000b 6e3d 000b     Gd..;d..5n..=n..
   b8538:	642f 000b 6427 000b 641d 000b 6413 000b     /d..'d...d...d..
   b8548:	6e6d 000b                                   mn..

000b854c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8554:	64a1 000b 64a7 000b 64e5 000b 64b5 000b     .d...d...d...d..
   b8564:	64a3 000b                                   .d..

000b8568 <_ZTVN5spark13EthernetClassE>:
	...
   b8570:	6a2f 000b 6a25 000b 6a1b 000b 6a11 000b     /j..%j...j...j..
   b8580:	6a05 000b 69f9 000b 6e35 000b 6e3d 000b     .j...i..5n..=n..
   b8590:	69ed 000b 69e5 000b 69db 000b 69d1 000b     .i...i...i...i..
   b85a0:	6e6d 000b                                   mn..

000b85a4 <_ZTV7TwoWire>:
	...
   b85ac:	6bd5 000b 6c1f 000b 6bf7 000b 6bd7 000b     .k...l...k...k..
   b85bc:	6bff 000b 6c07 000b 6c0f 000b 6c17 000b     .k...l...l...l..

000b85cc <_ZTV9IPAddress>:
	...
   b85d4:	6d03 000b 6cf3 000b 6cf5 000b 7061 0070     .m...l...l..app.

000b85e4 <_ZTVN5spark12NetworkClassE>:
	...
   b85ec:	6df5 000b 6dff 000b 6e09 000b 6e13 000b     .m...m...n...n..
   b85fc:	6e1d 000b 6e29 000b 6e35 000b 6e3d 000b     .n..)n..5n..=n..
   b860c:	6e45 000b 6e51 000b 6e59 000b 6e63 000b     En..Qn..Yn..cn..
   b861c:	6e6d 000b                                   mn..

000b8620 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8620:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   b8630:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   b8640:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   b8650:	6c61 6469 002e 5925 252d 2d6d 6425 2554     alid..%Y-%m-%dT%
   b8660:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   b8670:	0065 0000                                   e...

000b8674 <_ZTV11USARTSerial>:
	...
   b867c:	73bd 000b 7429 000b 7401 000b 6f59 000b     .s..)t...t..Yo..
   b868c:	73d1 000b 73ed 000b 73df 000b 73fb 000b     .s...s...s...s..
   b869c:	73bf 000b 73c3 000b                         .s...s..

000b86a4 <_ZTV9USBSerial>:
	...
   b86ac:	7467 000b 74cf 000b 74a5 000b 6f59 000b     gt...t...t..Yo..
   b86bc:	7497 000b 7469 000b 7479 000b 74c9 000b     .t..it..yt...t..
   b86cc:	7489 000b 7461 000b                         .t..at..

000b86d4 <_ZSt7nothrow>:
   b86d4:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b86e4:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b86f4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8704:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8714:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b8724:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8734:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b8745 <link_const_variable_data_end>:
   b8745:	00          	.byte	0x00
	...

000b8748 <link_constructors_location>:
   b8748:	000b4711 	.word	0x000b4711
   b874c:	000b63f9 	.word	0x000b63f9
   b8750:	000b6471 	.word	0x000b6471
   b8754:	000b6a39 	.word	0x000b6a39
   b8758:	000b6de5 	.word	0x000b6de5
   b875c:	000b6f45 	.word	0x000b6f45
   b8760:	000b705d 	.word	0x000b705d
   b8764:	000b7311 	.word	0x000b7311
   b8768:	000b73a9 	.word	0x000b73a9

000b876c <link_constructors_end>:
   b876c:	00000000 	.word	0x00000000
