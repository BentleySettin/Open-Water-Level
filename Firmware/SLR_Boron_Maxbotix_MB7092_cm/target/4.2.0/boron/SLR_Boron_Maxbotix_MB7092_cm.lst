
c:/Users/ppita/Documents/Particle/Open-Water-Level/Firmware/SLR_Boron_Maxbotix_MB7092_cm/target/4.2.0/boron/SLR_Boron_Maxbotix_MB7092_cm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000061a4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba1c0  000ba1c0  0000a1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba1e4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003dd34  000ba1e8  0001dd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a44  2003ddac  2003ddac  0002ddac  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000ba260  000ba260  0002a260  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba288  000ba288  0002a288  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001932e2  00000000  00000000  0002a28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001a504  00000000  00000000  001bd56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000495fc  00000000  00000000  001d7a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000033c0  00000000  00000000  0022106e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c8d0  00000000  00000000  0022442e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000444c8  00000000  00000000  00230cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005725d  00000000  00000000  002751c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014352c  00000000  00000000  002cc423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000097c4  00000000  00000000  0040f950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f005 fbbb 	bl	b97a8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f005 fbdd 	bl	b97f8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003dd34 	.word	0x2003dd34
   b4048:	000ba1e8 	.word	0x000ba1e8
   b404c:	2003ddac 	.word	0x2003ddac
   b4050:	2003ddac 	.word	0x2003ddac
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fe83 	bl	b7d68 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000ba19c 	.word	0x000ba19c
   b407c:	000ba1c0 	.word	0x000ba1c0

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b91c 	b.w	b42bc <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f975 	bl	b4374 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 be23 	b.w	b7cd8 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 ba2d 	b.w	b64f0 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 ba2b 	b.w	b64f0 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 ba31 	b.w	b6500 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f002 f90a 	bl	b62c0 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5fa1 	.word	0x000b5fa1
   b40b4:	000b9b4c 	.word	0x000b9b4c

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40c8:	4770      	bx	lr

000b40ca <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40cc:	6a00      	ldr	r0, [r0, #32]
   b40ce:	6803      	ldr	r3, [r0, #0]
   b40d0:	68db      	ldr	r3, [r3, #12]
   b40d2:	4718      	bx	r3

000b40d4 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40d4:	7c03      	ldrb	r3, [r0, #16]
   b40d6:	f013 0308 	ands.w	r3, r3, #8
   b40da:	bf1e      	ittt	ne
   b40dc:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40de:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40e0:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40e2:	2b00      	cmp	r3, #0
  }
   b40e4:	bfac      	ite	ge
   b40e6:	4618      	movge	r0, r3
   b40e8:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40ec:	4770      	bx	lr

000b40ee <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40ee:	4770      	bx	lr

000b40f0 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b40f0:	3010      	adds	r0, #16
   b40f2:	f001 b93d 	b.w	b5370 <_ZN7FatFile4syncEv>

000b40f6 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b40f6:	3010      	adds	r0, #16
   b40f8:	f001 b85b 	b.w	b51b2 <_ZN7FatFile4peekEv>

000b40fc <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b40fc:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b40fe:	2201      	movs	r2, #1
   b4100:	f10d 0107 	add.w	r1, sp, #7
   b4104:	3010      	adds	r0, #16
   b4106:	f000 ffa6 	bl	b5056 <_ZN7FatFile4readEPvj>
   b410a:	2801      	cmp	r0, #1
   b410c:	bf0c      	ite	eq
   b410e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4112:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   b4116:	b003      	add	sp, #12
   b4118:	f85d fb04 	ldr.w	pc, [sp], #4

000b411c <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b411c:	3010      	adds	r0, #16
   b411e:	f001 b9b1 	b.w	b5484 <_ZN7FatFile5writeEPKvj>

000b4122 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4122:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4124:	2201      	movs	r2, #1
   b4126:	f88d 1007 	strb.w	r1, [sp, #7]
   b412a:	3010      	adds	r0, #16
   b412c:	f10d 0107 	add.w	r1, sp, #7
   b4130:	f001 f9a8 	bl	b5484 <_ZN7FatFile5writeEPKvj>
  }
   b4134:	b003      	add	sp, #12
   b4136:	f85d fb04 	ldr.w	pc, [sp], #4

000b413a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b413a:	b510      	push	{r4, lr}
  }
   b413c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b413e:	4604      	mov	r4, r0
  }
   b4140:	f7ff ffab 	bl	b409a <_ZdlPvj>
   b4144:	4620      	mov	r0, r4
   b4146:	bd10      	pop	{r4, pc}

000b4148 <_ZN4FileD0Ev>:
class File : public FatFile, public Stream {
   b4148:	b510      	push	{r4, lr}
   b414a:	2134      	movs	r1, #52	; 0x34
   b414c:	4604      	mov	r4, r0
   b414e:	f7ff ffa4 	bl	b409a <_ZdlPvj>
   b4152:	4620      	mov	r0, r4
   b4154:	bd10      	pop	{r4, pc}
	...

000b4158 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4158:	4b0a      	ldr	r3, [pc, #40]	; (b4184 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b415a:	b510      	push	{r4, lr}
   b415c:	4604      	mov	r4, r0
   b415e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4160:	f002 fe6e 	bl	b6e40 <_ZN5spark10LogManager8instanceEv>
   b4164:	4621      	mov	r1, r4
   b4166:	f003 f8a6 	bl	b72b6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b416a:	f004 f9a1 	bl	b84b0 <_Z16_fetch_usbserialv>
   b416e:	f004 f993 	bl	b8498 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4172:	4620      	mov	r0, r4
   b4174:	4b04      	ldr	r3, [pc, #16]	; (b4188 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4176:	f840 3b04 	str.w	r3, [r0], #4
   b417a:	f002 ff37 	bl	b6fec <_ZN5spark6detail9LogFilterD1Ev>
    }
   b417e:	4620      	mov	r0, r4
   b4180:	bd10      	pop	{r4, pc}
   b4182:	bf00      	nop
   b4184:	000b9d14 	.word	0x000b9d14
   b4188:	000b9cfc 	.word	0x000b9cfc

000b418c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b418c:	b510      	push	{r4, lr}
   b418e:	4604      	mov	r4, r0
    }
   b4190:	f7ff ffe2 	bl	b4158 <_ZN5spark16SerialLogHandlerD1Ev>
   b4194:	4620      	mov	r0, r4
   b4196:	2124      	movs	r1, #36	; 0x24
   b4198:	f7ff ff7f 	bl	b409a <_ZdlPvj>
   b419c:	4620      	mov	r0, r4
   b419e:	bd10      	pop	{r4, pc}

000b41a0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41a0:	b40e      	push	{r1, r2, r3}
   b41a2:	b503      	push	{r0, r1, lr}
   b41a4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b41a6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41a8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b41ac:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b41ae:	f002 fcba 	bl	b6b26 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b41b2:	b002      	add	sp, #8
   b41b4:	f85d eb04 	ldr.w	lr, [sp], #4
   b41b8:	b003      	add	sp, #12
   b41ba:	4770      	bx	lr

000b41bc <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b41bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b41be:	4604      	mov	r4, r0
   b41c0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b41c2:	7922      	ldrb	r2, [r4, #4]
   b41c4:	68a3      	ldr	r3, [r4, #8]
   b41c6:	b132      	cbz	r2, b41d6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b41c8:	b9a3      	cbnz	r3, b41f4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b41ca:	490b      	ldr	r1, [pc, #44]	; (b41f8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b41cc:	b002      	add	sp, #8
   b41ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b41d2:	f002 bc77 	b.w	b6ac4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b41d6:	4a09      	ldr	r2, [pc, #36]	; (b41fc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b41d8:	7b26      	ldrb	r6, [r4, #12]
   b41da:	4d09      	ldr	r5, [pc, #36]	; (b4200 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b41dc:	4909      	ldr	r1, [pc, #36]	; (b4204 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b41de:	7b64      	ldrb	r4, [r4, #13]
   b41e0:	2e01      	cmp	r6, #1
   b41e2:	bf18      	it	ne
   b41e4:	4629      	movne	r1, r5
   b41e6:	e9cd 1400 	strd	r1, r4, [sp]
   b41ea:	4907      	ldr	r1, [pc, #28]	; (b4208 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b41ec:	f7ff ffd8 	bl	b41a0 <_ZN5Print6printfEPKcz>
  }
   b41f0:	b002      	add	sp, #8
   b41f2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b41f4:	4a05      	ldr	r2, [pc, #20]	; (b420c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b41f6:	e7ef      	b.n	b41d8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b41f8:	000b9b72 	.word	0x000b9b72
   b41fc:	000b9e21 	.word	0x000b9e21
   b4200:	000b9b6e 	.word	0x000b9b6e
   b4204:	000b9b6a 	.word	0x000b9b6a
   b4208:	000b9b88 	.word	0x000b9b88
   b420c:	000b9b61 	.word	0x000b9b61

000b4210 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4210:	b40e      	push	{r1, r2, r3}
   b4212:	b500      	push	{lr}
   b4214:	b08c      	sub	sp, #48	; 0x30
   b4216:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4218:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b421c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4220:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4222:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4226:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4228:	6801      	ldr	r1, [r0, #0]
   b422a:	aa04      	add	r2, sp, #16
   b422c:	201e      	movs	r0, #30
    attr.flags = 0;
   b422e:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4232:	f002 f855 	bl	b62e0 <log_message_v>
}
   b4236:	b00c      	add	sp, #48	; 0x30
   b4238:	f85d eb04 	ldr.w	lr, [sp], #4
   b423c:	b003      	add	sp, #12
   b423e:	4770      	bx	lr

000b4240 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4240:	b530      	push	{r4, r5, lr}
   b4242:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4244:	4b1b      	ldr	r3, [pc, #108]	; (b42b4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b4246:	9300      	str	r3, [sp, #0]
   b4248:	7913      	ldrb	r3, [r2, #4]
   b424a:	f88d 3004 	strb.w	r3, [sp, #4]
   b424e:	6893      	ldr	r3, [r2, #8]
   b4250:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4252:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b4256:	8993      	ldrh	r3, [r2, #12]
   b4258:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b425c:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b425e:	460a      	mov	r2, r1
   b4260:	466b      	mov	r3, sp
   b4262:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b4266:	4628      	mov	r0, r5
   b4268:	f001 fc48 	bl	b5afc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b426c:	b910      	cbnz	r0, b4274 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b426e:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4270:	b005      	add	sp, #20
   b4272:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b4274:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b4276:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b427a:	4628      	mov	r0, r5
   b427c:	f001 f8ae 	bl	b53dc <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4280:	2101      	movs	r1, #1
   b4282:	4620      	mov	r0, r4
   b4284:	f001 fae4 	bl	b5850 <_ZN9FatVolume4initEh>
   b4288:	4601      	mov	r1, r0
   b428a:	b168      	cbz	r0, b42a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b428c:	4621      	mov	r1, r4
   b428e:	4628      	mov	r0, r5
   b4290:	f000 fedb 	bl	b504a <_ZN7FatFile8openRootEP9FatVolume>
   b4294:	2800      	cmp	r0, #0
   b4296:	d0ea      	beq.n	b426e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4298:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b429c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b42a0:	d0e5      	beq.n	b426e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b42a2:	4b05      	ldr	r3, [pc, #20]	; (b42b8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b42a4:	601d      	str	r5, [r3, #0]
    return true;
   b42a6:	e7e3      	b.n	b4270 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b42a8:	4620      	mov	r0, r4
   b42aa:	f001 fad1 	bl	b5850 <_ZN9FatVolume4initEh>
   b42ae:	2800      	cmp	r0, #0
   b42b0:	d1ec      	bne.n	b428c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b42b2:	e7dc      	b.n	b426e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b42b4:	000b9ce8 	.word	0x000b9ce8
   b42b8:	2003e644 	.word	0x2003e644

000b42bc <setup>:
// in sleep configuration to avoid reconnection penalty
const unsigned long SECONDS_BETWEEN_MEASUREMENTS = 3600; // What should sampling period be?
// ***** IMPORTANT!!! See note above this const.


void setup(void) {
   b42bc:	b508      	push	{r3, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b42be:	f002 f8ef 	bl	b64a0 <spark_cloud_flag_connect>
    Cellular.off(); // turn off cellular for prelim testing (uncomment)
  }

  // delay(5000); // to see response from begin command

  Serial.begin(9600);
   b42c2:	f004 f8f5 	bl	b84b0 <_Z16_fetch_usbserialv>
   b42c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b42ca:	f004 f8e1 	bl	b8490 <_ZN9USBSerial5beginEl>
  Log.info("Maxbotix Test");
   b42ce:	4902      	ldr	r1, [pc, #8]	; (b42d8 <setup+0x1c>)
   b42d0:	4802      	ldr	r0, [pc, #8]	; (b42dc <setup+0x20>)
   b42d2:	f7ff ff9d 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>

}
   b42d6:	bd08      	pop	{r3, pc}
   b42d8:	000b9ba5 	.word	0x000b9ba5
   b42dc:	2003e678 	.word	0x2003e678

000b42e0 <_Z21secondsUntilNextEventv>:
  }
  break;
  }
}

int secondsUntilNextEvent() {
   b42e0:	b510      	push	{r4, lr}

  int current_seconds = Time.now();
   b42e2:	f003 fbef 	bl	b7ac4 <_ZN9TimeClass3nowEv>
  int seconds_to_sleep = SECONDS_BETWEEN_MEASUREMENTS - (current_seconds % SECONDS_BETWEEN_MEASUREMENTS);
   b42e6:	f44f 6461 	mov.w	r4, #3600	; 0xe10
   b42ea:	fbb0 f2f4 	udiv	r2, r0, r4
   b42ee:	fb02 0014 	mls	r0, r2, r4, r0
   b42f2:	1a24      	subs	r4, r4, r0

  Log.info("Sleeping for %i", seconds_to_sleep);
   b42f4:	4903      	ldr	r1, [pc, #12]	; (b4304 <_Z21secondsUntilNextEventv+0x24>)
   b42f6:	4804      	ldr	r0, [pc, #16]	; (b4308 <_Z21secondsUntilNextEventv+0x28>)
   b42f8:	4622      	mov	r2, r4
   b42fa:	f7ff ff89 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>

  return seconds_to_sleep;
   b42fe:	4620      	mov	r0, r4
   b4300:	bd10      	pop	{r4, pc}
   b4302:	bf00      	nop
   b4304:	000b9bb3 	.word	0x000b9bb3
   b4308:	2003e678 	.word	0x2003e678

000b430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b430c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b430e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4312:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4314:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4316:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b431a:	42ae      	cmp	r6, r5
   b431c:	d004      	beq.n	b4328 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b431e:	4628      	mov	r0, r5
   b4320:	f002 fada 	bl	b68d8 <_ZN6StringD1Ev>
   b4324:	3514      	adds	r5, #20
   b4326:	e7f8      	b.n	b431a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4328:	6820      	ldr	r0, [r4, #0]
   b432a:	f002 f8e9 	bl	b6500 <free>
    AllocatorT::free(data_);
}
   b432e:	4620      	mov	r0, r4
   b4330:	bd70      	pop	{r4, r5, r6, pc}

000b4332 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>:
    // Constructs succeeded future
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
   b4332:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4334:	6804      	ldr	r4, [r0, #0]
        return (application_thread_current(nullptr) != 0);
   b4336:	2000      	movs	r0, #0
   b4338:	f002 f80a 	bl	b6350 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b433c:	b120      	cbz	r0, b4348 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b433e:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4340:	b913      	cbnz	r3, b4348 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
        spark_process();
   b4342:	f002 f8a5 	bl	b6490 <spark_process>
    }
   b4346:	e7fa      	b.n	b433e <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0xc>
   b4348:	7863      	ldrb	r3, [r4, #1]
   b434a:	f3bf 8f5b 	dmb	ish
   b434e:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b4350:	b90b      	cbnz	r3, b4356 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x24>
        return std::move(defaultValue);
   b4352:	2000      	movs	r0, #0
        return this->p_->result();
    }
   b4354:	bd38      	pop	{r3, r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b4356:	2000      	movs	r0, #0
   b4358:	f001 fffa 	bl	b6350 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b435c:	b120      	cbz	r0, b4368 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
   b435e:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4360:	b913      	cbnz	r3, b4368 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
        spark_process();
   b4362:	f002 f895 	bl	b6490 <spark_process>
    }
   b4366:	e7fa      	b.n	b435e <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x2c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4368:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b436a:	2b01      	cmp	r3, #1
   b436c:	d1f1      	bne.n	b4352 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x20>
            return result_;
   b436e:	7b20      	ldrb	r0, [r4, #12]
   b4370:	e7f0      	b.n	b4354 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x22>
	...

000b4374 <loop>:
void loop(void) {
   b4374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch (state) {
   b4378:	4ea8      	ldr	r6, [pc, #672]	; (b461c <loop+0x2a8>)
   b437a:	7835      	ldrb	r5, [r6, #0]
   b437c:	2d01      	cmp	r5, #1
void loop(void) {
   b437e:	b099      	sub	sp, #100	; 0x64
  switch (state) {
   b4380:	f000 80b8 	beq.w	b44f4 <loop+0x180>
   b4384:	2d02      	cmp	r5, #2
   b4386:	f000 8115 	beq.w	b45b4 <loop+0x240>
   b438a:	2d00      	cmp	r5, #0
   b438c:	f040 80a3 	bne.w	b44d6 <loop+0x162>
   b4390:	4da3      	ldr	r5, [pc, #652]	; (b4620 <loop+0x2ac>)
   b4392:	24c8      	movs	r4, #200	; 0xc8
   b4394:	462f      	mov	r7, r5
      filterArray[sample] = (analogRead(A1));
   b4396:	2012      	movs	r0, #18
   b4398:	f004 fcee 	bl	b8d78 <analogRead>
   b439c:	ee07 0a90 	vmov	s15, r0
   b43a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      delay(50); // to avoid untrasonic interfering
   b43a4:	2032      	movs	r0, #50	; 0x32
      filterArray[sample] = (analogRead(A1));
   b43a6:	ece7 7a01 	vstmia	r7!, {s15}
      delay(50); // to avoid untrasonic interfering
   b43aa:	f003 fba5 	bl	b7af8 <delay>
    for (int sample = 0; sample < 200; sample++) {
   b43ae:	3c01      	subs	r4, #1
   b43b0:	d1f1      	bne.n	b4396 <loop+0x22>
      for (int j = i + 1; j < 200; j++) {
   b43b2:	3401      	adds	r4, #1
   b43b4:	4629      	mov	r1, r5
   b43b6:	3504      	adds	r5, #4
   b43b8:	462a      	mov	r2, r5
   b43ba:	4623      	mov	r3, r4
        if (filterArray[i] > filterArray[j]) {
   b43bc:	edd1 7a00 	vldr	s15, [r1]
   b43c0:	ecb2 7a01 	vldmia	r2!, {s14}
   b43c4:	eef4 7ac7 	vcmpe.f32	s15, s14
   b43c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      for (int j = i + 1; j < 200; j++) {
   b43cc:	f103 0301 	add.w	r3, r3, #1
          filterArray[i] = filterArray[j];
   b43d0:	bfc4      	itt	gt
   b43d2:	ed81 7a00 	vstrgt	s14, [r1]
          filterArray[j] = swap;
   b43d6:	ed42 7a01 	vstrgt	s15, [r2, #-4]
      for (int j = i + 1; j < 200; j++) {
   b43da:	2bc8      	cmp	r3, #200	; 0xc8
   b43dc:	d1ee      	bne.n	b43bc <loop+0x48>
    for (int i = 0; i < 199; i++) {
   b43de:	2cc7      	cmp	r4, #199	; 0xc7
   b43e0:	d1e7      	bne.n	b43b2 <loop+0x3e>
   b43e2:	4d90      	ldr	r5, [pc, #576]	; (b4624 <loop+0x2b0>)
   b43e4:	24b4      	movs	r4, #180	; 0xb4
    double sum = 0;
   b43e6:	f04f 0800 	mov.w	r8, #0
   b43ea:	f04f 0900 	mov.w	r9, #0
      sum += filterArray[sample];
   b43ee:	f855 0b04 	ldr.w	r0, [r5], #4
   b43f2:	f004 ff01 	bl	b91f8 <__aeabi_f2d>
   b43f6:	4602      	mov	r2, r0
   b43f8:	460b      	mov	r3, r1
   b43fa:	4640      	mov	r0, r8
   b43fc:	4649      	mov	r1, r9
   b43fe:	f004 fd9d 	bl	b8f3c <__adddf3>
    for (int sample = 10; sample < 190; sample++) {
   b4402:	3c01      	subs	r4, #1
      sum += filterArray[sample];
   b4404:	4680      	mov	r8, r0
   b4406:	4689      	mov	r9, r1
    for (int sample = 10; sample < 190; sample++) {
   b4408:	d1f1      	bne.n	b43ee <loop+0x7a>
    distance_unconverted = sum / 180;
   b440a:	2200      	movs	r2, #0
   b440c:	4b86      	ldr	r3, [pc, #536]	; (b4628 <loop+0x2b4>)
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b440e:	f8df 8280 	ldr.w	r8, [pc, #640]	; b4690 <loop+0x31c>
    real_time = Time.now(); // "Real" time and current millis for logging
   b4412:	4f86      	ldr	r7, [pc, #536]	; (b462c <loop+0x2b8>)
    distance_unconverted = sum / 180;
   b4414:	f005 f872 	bl	b94fc <__aeabi_ddiv>
   b4418:	f005 f958 	bl	b96cc <__aeabi_d2f>
   b441c:	ee07 0a90 	vmov	s15, r0
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b4420:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   b4424:	ee67 7a87 	vmul.f32	s15, s15, s14
    distance_unconverted = sum / 180;
   b4428:	4b81      	ldr	r3, [pc, #516]	; (b4630 <loop+0x2bc>)
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b442a:	edc8 7a00 	vstr	s15, [r8]
    distance_unconverted = sum / 180;
   b442e:	6018      	str	r0, [r3, #0]
    real_time = Time.now(); // "Real" time and current millis for logging
   b4430:	f003 fb48 	bl	b7ac4 <_ZN9TimeClass3nowEv>
   b4434:	6038      	str	r0, [r7, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4436:	f001 fdc3 	bl	b5fc0 <HAL_Timer_Get_Milli_Seconds>
    millis_now = millis();
   b443a:	4b7e      	ldr	r3, [pc, #504]	; (b4634 <loop+0x2c0>)
   b443c:	6018      	str	r0, [r3, #0]
    float cellVoltage = batteryMonitor.getVCell();
   b443e:	487e      	ldr	r0, [pc, #504]	; (b4638 <loop+0x2c4>)
   b4440:	f003 fbde 	bl	b7c00 <_ZN9FuelGauge8getVCellEv>
    float stateOfCharge = batteryMonitor.getSoC();
   b4444:	487c      	ldr	r0, [pc, #496]	; (b4638 <loop+0x2c4>)
    float cellVoltage = batteryMonitor.getVCell();
   b4446:	ee10 5a10 	vmov	r5, s0
    float stateOfCharge = batteryMonitor.getSoC();
   b444a:	f003 fbf5 	bl	b7c38 <_ZN9FuelGauge6getSoCEv>
   b444e:	ee10 0a10 	vmov	r0, s0
    snprintf(data, sizeof(data), "%li,%.5f,%.02f,%.02f", //,%.5f,%.5f,%.5f,%.5f,%.5f,%.02f,%.02f",
   b4452:	f004 fed1 	bl	b91f8 <__aeabi_f2d>
   b4456:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b445a:	4628      	mov	r0, r5
   b445c:	f004 fecc 	bl	b91f8 <__aeabi_f2d>
   b4460:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4464:	f8d8 0000 	ldr.w	r0, [r8]
   b4468:	f004 fec6 	bl	b91f8 <__aeabi_f2d>
   b446c:	e9cd 0100 	strd	r0, r1, [sp]
   b4470:	683b      	ldr	r3, [r7, #0]
   b4472:	4a72      	ldr	r2, [pc, #456]	; (b463c <loop+0x2c8>)
   b4474:	4872      	ldr	r0, [pc, #456]	; (b4640 <loop+0x2cc>)
   b4476:	2178      	movs	r1, #120	; 0x78
   b4478:	f002 f852 	bl	b6520 <snprintf>
    Log.info(data);
   b447c:	4970      	ldr	r1, [pc, #448]	; (b4640 <loop+0x2cc>)
   b447e:	4871      	ldr	r0, [pc, #452]	; (b4644 <loop+0x2d0>)
   b4480:	f7ff fec6 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4488:	930d      	str	r3, [sp, #52]	; 0x34
  File() {}
   b448a:	4b6f      	ldr	r3, [pc, #444]	; (b4648 <loop+0x2d4>)
   b448c:	930b      	str	r3, [sp, #44]	; 0x2c
      dataMode_{dataMode}
   b448e:	4b6f      	ldr	r3, [pc, #444]	; (b464c <loop+0x2d8>)
   b4490:	9307      	str	r3, [sp, #28]
   b4492:	4b6f      	ldr	r3, [pc, #444]	; (b4650 <loop+0x2dc>)
   b4494:	9309      	str	r3, [sp, #36]	; 0x24
    if (!sd.begin(SD_CHIP_SELECT, SPI_FULL_SPEED)) {
   b4496:	486f      	ldr	r0, [pc, #444]	; (b4654 <loop+0x2e0>)
    Print() : write_error(0) {}
   b4498:	940c      	str	r4, [sp, #48]	; 0x30
   b449a:	2301      	movs	r3, #1
   b449c:	aa07      	add	r2, sp, #28
   b449e:	2105      	movs	r1, #5
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b44a0:	940f      	str	r4, [sp, #60]	; 0x3c
   b44a2:	f88d 4020 	strb.w	r4, [sp, #32]
   b44a6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   b44aa:	f7ff fec9 	bl	b4240 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b44ae:	b918      	cbnz	r0, b44b8 <loop+0x144>
      Log.info("failed to open card");
   b44b0:	4969      	ldr	r1, [pc, #420]	; (b4658 <loop+0x2e4>)
   b44b2:	4864      	ldr	r0, [pc, #400]	; (b4644 <loop+0x2d0>)
   b44b4:	f7ff feac 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    return open(m_cwd, path, oflag);
   b44b8:	4968      	ldr	r1, [pc, #416]	; (b465c <loop+0x2e8>)
   b44ba:	4a69      	ldr	r2, [pc, #420]	; (b4660 <loop+0x2ec>)
   b44bc:	6809      	ldr	r1, [r1, #0]
   b44be:	f244 2302 	movw	r3, #16898	; 0x4202
   b44c2:	a80f      	add	r0, sp, #60	; 0x3c
   b44c4:	f000 ff91 	bl	b53ea <_ZN7FatFile4openEPS_PKci>
    if (!myFile.open("distance.csv", O_RDWR | O_CREAT | O_AT_END)) {
   b44c8:	b940      	cbnz	r0, b44dc <loop+0x168>
      Log.info("opening distance.csv for write failed");
   b44ca:	4966      	ldr	r1, [pc, #408]	; (b4664 <loop+0x2f0>)
   b44cc:	485d      	ldr	r0, [pc, #372]	; (b4644 <loop+0x2d0>)
   b44ce:	f7ff fe9f 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
      state = PUBLISH_STATE;
   b44d2:	2301      	movs	r3, #1
        state = SLEEP_STATE;
   b44d4:	7033      	strb	r3, [r6, #0]
}
   b44d6:	b019      	add	sp, #100	; 0x64
   b44d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      myFile.print(data);
   b44dc:	4958      	ldr	r1, [pc, #352]	; (b4640 <loop+0x2cc>)
   b44de:	a80b      	add	r0, sp, #44	; 0x2c
   b44e0:	f002 faf0 	bl	b6ac4 <_ZN5Print5printEPKc>
      myFile.print("\n"); // put next data on new line
   b44e4:	4960      	ldr	r1, [pc, #384]	; (b4668 <loop+0x2f4>)
   b44e6:	a80b      	add	r0, sp, #44	; 0x2c
   b44e8:	f002 faec 	bl	b6ac4 <_ZN5Print5printEPKc>
      myFile.close();
   b44ec:	a80f      	add	r0, sp, #60	; 0x3c
   b44ee:	f000 ff75 	bl	b53dc <_ZN7FatFile5closeEv>
   b44f2:	e7ee      	b.n	b44d2 <loop+0x15e>
   b44f4:	f001 fd64 	bl	b5fc0 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b44f8:	4f5c      	ldr	r7, [pc, #368]	; (b466c <loop+0x2f8>)
        Log.info("Trying to connect");
   b44fa:	f8df 8198 	ldr.w	r8, [pc, #408]	; b4694 <loop+0x320>
   b44fe:	4d51      	ldr	r5, [pc, #324]	; (b4644 <loop+0x2d0>)
          Log.info("max time for publishing reached without success; go to sleep");
   b4500:	f8df 9194 	ldr.w	r9, [pc, #404]	; b4698 <loop+0x324>
    stateTime = millis();
   b4504:	6038      	str	r0, [r7, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4506:	f001 ffd3 	bl	b64b0 <spark_cloud_flag_connected>
      if (Particle.connected() == false) {
   b450a:	b928      	cbnz	r0, b4518 <loop+0x1a4>
        spark_cloud_flag_connect();
   b450c:	f001 ffc8 	bl	b64a0 <spark_cloud_flag_connect>
        Log.info("Trying to connect");
   b4510:	4641      	mov	r1, r8
   b4512:	4628      	mov	r0, r5
   b4514:	f7ff fe7c 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4518:	f001 ffca 	bl	b64b0 <spark_cloud_flag_connected>
      if (Particle.connected()) {
   b451c:	4604      	mov	r4, r0
   b451e:	2800      	cmp	r0, #0
   b4520:	d02e      	beq.n	b4580 <loop+0x20c>
        Log.info("publishing data");
   b4522:	4953      	ldr	r1, [pc, #332]	; (b4670 <loop+0x2fc>)
   b4524:	4847      	ldr	r0, [pc, #284]	; (b4644 <loop+0x2d0>)
   b4526:	f7ff fe73 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b452a:	4b52      	ldr	r3, [pc, #328]	; (b4674 <loop+0x300>)
   b452c:	4a52      	ldr	r2, [pc, #328]	; (b4678 <loop+0x304>)
   b452e:	781b      	ldrb	r3, [r3, #0]
   b4530:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4532:	4952      	ldr	r1, [pc, #328]	; (b467c <loop+0x308>)
   b4534:	4313      	orrs	r3, r2
   b4536:	f88d 3000 	strb.w	r3, [sp]
   b453a:	4a41      	ldr	r2, [pc, #260]	; (b4640 <loop+0x2cc>)
   b453c:	6809      	ldr	r1, [r1, #0]
   b453e:	233c      	movs	r3, #60	; 0x3c
   b4540:	a80b      	add	r0, sp, #44	; 0x2c
   b4542:	f003 fd6f 	bl	b8024 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    ResultT result(ResultT defaultValue) const {
        return this->p_->result(std::move(defaultValue));
    }

    operator ResultT() const {
        return result();
   b4546:	a80b      	add	r0, sp, #44	; 0x2c
   b4548:	f7ff fef3 	bl	b4332 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
	if (_M_pi != nullptr)
   b454c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b454e:	4605      	mov	r5, r0
   b4550:	b17c      	cbz	r4, b4572 <loop+0x1fe>
      if (--_M_use_count == 0)
   b4552:	6863      	ldr	r3, [r4, #4]
   b4554:	3b01      	subs	r3, #1
   b4556:	6063      	str	r3, [r4, #4]
   b4558:	b95b      	cbnz	r3, b4572 <loop+0x1fe>
          _M_dispose();
   b455a:	6823      	ldr	r3, [r4, #0]
   b455c:	4620      	mov	r0, r4
   b455e:	689b      	ldr	r3, [r3, #8]
   b4560:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4562:	68a3      	ldr	r3, [r4, #8]
   b4564:	3b01      	subs	r3, #1
   b4566:	60a3      	str	r3, [r4, #8]
   b4568:	b91b      	cbnz	r3, b4572 <loop+0x1fe>
            _M_destroy();
   b456a:	6823      	ldr	r3, [r4, #0]
   b456c:	4620      	mov	r0, r4
   b456e:	68db      	ldr	r3, [r3, #12]
   b4570:	4798      	blx	r3
        Log.info("publish result %d", success); 
   b4572:	4943      	ldr	r1, [pc, #268]	; (b4680 <loop+0x30c>)
   b4574:	4833      	ldr	r0, [pc, #204]	; (b4644 <loop+0x2d0>)
   b4576:	462a      	mov	r2, r5
   b4578:	f7ff fe4a 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
        state = SLEEP_STATE;
   b457c:	2302      	movs	r3, #2
   b457e:	e7a9      	b.n	b44d4 <loop+0x160>
   b4580:	f001 fd1e 	bl	b5fc0 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS) {
   b4584:	683b      	ldr	r3, [r7, #0]
   b4586:	1ac0      	subs	r0, r0, r3
   b4588:	f644 631f 	movw	r3, #19999	; 0x4e1f
   b458c:	4298      	cmp	r0, r3
   b458e:	d906      	bls.n	b459e <loop+0x22a>
          state = SLEEP_STATE;
   b4590:	2302      	movs	r3, #2
          Log.info("max time for publishing reached without success; go to sleep");
   b4592:	4649      	mov	r1, r9
   b4594:	4628      	mov	r0, r5
          state = SLEEP_STATE;
   b4596:	7033      	strb	r3, [r6, #0]
          Log.info("max time for publishing reached without success; go to sleep");
   b4598:	f7ff fe3a 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
          isMaxTime = true;
   b459c:	2401      	movs	r4, #1
        Log.info("Not max time, try again to connect and publish");
   b459e:	4628      	mov	r0, r5
   b45a0:	4938      	ldr	r1, [pc, #224]	; (b4684 <loop+0x310>)
   b45a2:	f7ff fe35 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
        delay(500);
   b45a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b45aa:	f003 faa5 	bl	b7af8 <delay>
    while (!isMaxTime) {
   b45ae:	2c00      	cmp	r4, #0
   b45b0:	d0a9      	beq.n	b4506 <loop+0x192>
   b45b2:	e790      	b.n	b44d6 <loop+0x162>
    Log.info("going to sleep");
   b45b4:	4934      	ldr	r1, [pc, #208]	; (b4688 <loop+0x314>)
   b45b6:	4823      	ldr	r0, [pc, #140]	; (b4644 <loop+0x2d0>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b45b8:	4c34      	ldr	r4, [pc, #208]	; (b468c <loop+0x318>)
   b45ba:	f7ff fe29 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    delay(500);
   b45be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b45c2:	f003 fa99 	bl	b7af8 <delay>
    int wakeInSeconds = secondsUntilNextEvent(); // Calculate how long to sleep 
   b45c6:	f7ff fe8b 	bl	b42e0 <_Z21secondsUntilNextEventv>
   b45ca:	7d23      	ldrb	r3, [r4, #20]
   b45cc:	4607      	mov	r7, r0
   b45ce:	2b00      	cmp	r3, #0
   b45d0:	f000 808c 	beq.w	b46ec <loop+0x378>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b45d4:	6823      	ldr	r3, [r4, #0]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b45d6:	7225      	strb	r5, [r4, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b45d8:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b45da:	2b00      	cmp	r3, #0
   b45dc:	d05e      	beq.n	b469c <loop+0x328>
            if (start->type == type) {
   b45de:	889a      	ldrh	r2, [r3, #4]
   b45e0:	2a01      	cmp	r2, #1
   b45e2:	d007      	beq.n	b45f4 <loop+0x280>
            start = start->next;
   b45e4:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b45e6:	e7f8      	b.n	b45da <loop+0x266>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b45e8:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b45ea:	2b00      	cmp	r3, #0
   b45ec:	d056      	beq.n	b469c <loop+0x328>
            if (start->type == type) {
   b45ee:	889a      	ldrh	r2, [r3, #4]
   b45f0:	2a01      	cmp	r2, #1
   b45f2:	d1f9      	bne.n	b45e8 <loop+0x274>
                if (gpioWakeup->pin == pin) {
   b45f4:	899a      	ldrh	r2, [r3, #12]
   b45f6:	2a02      	cmp	r2, #2
   b45f8:	d1f6      	bne.n	b45e8 <loop+0x274>
                    gpioWakeup->mode = mode;
   b45fa:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b45fc:	7d23      	ldrb	r3, [r4, #20]
   b45fe:	2b00      	cmp	r3, #0
   b4600:	d074      	beq.n	b46ec <loop+0x378>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4602:	6823      	ldr	r3, [r4, #0]
      .duration(wakeInSeconds* 1000L); // Set seconds until wake
   b4604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4608:	68db      	ldr	r3, [r3, #12]
   b460a:	4347      	muls	r7, r0
        if (!start) {
   b460c:	2b00      	cmp	r3, #0
   b460e:	d05b      	beq.n	b46c8 <loop+0x354>
            if (start->type == type) {
   b4610:	889a      	ldrh	r2, [r3, #4]
   b4612:	2a04      	cmp	r2, #4
   b4614:	d07f      	beq.n	b4716 <loop+0x3a2>
            start = start->next;
   b4616:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4618:	e7f8      	b.n	b460c <loop+0x298>
   b461a:	bf00      	nop
   b461c:	2003e638 	.word	0x2003e638
   b4620:	2003de64 	.word	0x2003de64
   b4624:	2003de8c 	.word	0x2003de8c
   b4628:	40668000 	.word	0x40668000
   b462c:	2003e1b0 	.word	0x2003e1b0
   b4630:	2003de60 	.word	0x2003de60
   b4634:	2003e1a8 	.word	0x2003e1a8
   b4638:	2003ddc8 	.word	0x2003ddc8
   b463c:	000b9bc3 	.word	0x000b9bc3
   b4640:	2003dde8 	.word	0x2003dde8
   b4644:	2003e678 	.word	0x2003e678
   b4648:	000b9d2c 	.word	0x000b9d2c
   b464c:	000b9ce8 	.word	0x000b9ce8
   b4650:	02faf080 	.word	0x02faf080
   b4654:	2003e1b4 	.word	0x2003e1b4
   b4658:	000b9bd8 	.word	0x000b9bd8
   b465c:	2003e644 	.word	0x2003e644
   b4660:	000b9bec 	.word	0x000b9bec
   b4664:	000b9bf9 	.word	0x000b9bf9
   b4668:	000b9e20 	.word	0x000b9e20
   b466c:	2003e63c 	.word	0x2003e63c
   b4670:	000b9c31 	.word	0x000b9c31
   b4674:	2003ddc5 	.word	0x2003ddc5
   b4678:	2003ddc4 	.word	0x2003ddc4
   b467c:	2003dd34 	.word	0x2003dd34
   b4680:	000b9c41 	.word	0x000b9c41
   b4684:	000b9c90 	.word	0x000b9c90
   b4688:	000b9cbf 	.word	0x000b9cbf
   b468c:	2003ddd0 	.word	0x2003ddd0
   b4690:	2003e1ac 	.word	0x2003e1ac
   b4694:	000b9c1f 	.word	0x000b9c1f
   b4698:	000b9c53 	.word	0x000b9c53
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b469c:	4920      	ldr	r1, [pc, #128]	; (b4720 <loop+0x3ac>)
   b469e:	2010      	movs	r0, #16
   b46a0:	f004 fc3e 	bl	b8f20 <_ZnwjRKSt9nothrow_t>
   b46a4:	4605      	mov	r5, r0
   b46a6:	2800      	cmp	r0, #0
   b46a8:	d037      	beq.n	b471a <loop+0x3a6>
   b46aa:	2210      	movs	r2, #16
   b46ac:	2100      	movs	r1, #0
   b46ae:	f005 f8a3 	bl	b97f8 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b46b2:	4b1c      	ldr	r3, [pc, #112]	; (b4724 <loop+0x3b0>)
   b46b4:	602b      	str	r3, [r5, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b46b6:	2301      	movs	r3, #1
   b46b8:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b46ba:	6923      	ldr	r3, [r4, #16]
   b46bc:	60ab      	str	r3, [r5, #8]
            wakeupSource->pin = pin;
   b46be:	2302      	movs	r3, #2
   b46c0:	81ab      	strh	r3, [r5, #12]
            wakeupSource->mode = mode;
   b46c2:	73ab      	strb	r3, [r5, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b46c4:	6125      	str	r5, [r4, #16]
   b46c6:	e799      	b.n	b45fc <loop+0x288>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b46c8:	4915      	ldr	r1, [pc, #84]	; (b4720 <loop+0x3ac>)
   b46ca:	2010      	movs	r0, #16
   b46cc:	f004 fc28 	bl	b8f20 <_ZnwjRKSt9nothrow_t>
   b46d0:	4605      	mov	r5, r0
   b46d2:	b310      	cbz	r0, b471a <loop+0x3a6>
   b46d4:	2210      	movs	r2, #16
   b46d6:	2100      	movs	r1, #0
   b46d8:	f005 f88e 	bl	b97f8 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b46dc:	4b11      	ldr	r3, [pc, #68]	; (b4724 <loop+0x3b0>)
   b46de:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b46e0:	2304      	movs	r3, #4
   b46e2:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b46e4:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b46e6:	6125      	str	r5, [r4, #16]
            wakeupSource->ms = ms;
   b46e8:	e9c5 3702 	strd	r3, r7, [r5, #8]
    SystemSleepResult result = System.sleep(config); // Device sleeps here
   b46ec:	490e      	ldr	r1, [pc, #56]	; (b4728 <loop+0x3b4>)
   b46ee:	a80b      	add	r0, sp, #44	; 0x2c
   b46f0:	f002 f880 	bl	b67f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    Log.info("Feeling restless");
   b46f4:	490d      	ldr	r1, [pc, #52]	; (b472c <loop+0x3b8>)
   b46f6:	480e      	ldr	r0, [pc, #56]	; (b4730 <loop+0x3bc>)
   b46f8:	f7ff fd8a 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b46fc:	f001 fc60 	bl	b5fc0 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b4700:	4b0c      	ldr	r3, [pc, #48]	; (b4734 <loop+0x3c0>)
   b4702:	6018      	str	r0, [r3, #0]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   b4704:	980b      	ldr	r0, [sp, #44]	; 0x2c
    state = DATALOG_STATE;
   b4706:	2300      	movs	r3, #0
   b4708:	7033      	strb	r3, [r6, #0]
   b470a:	2800      	cmp	r0, #0
   b470c:	f43f aee3 	beq.w	b44d6 <loop+0x162>
            free(wakeupSource_);
   b4710:	f001 fef6 	bl	b6500 <free>
}
   b4714:	e6df      	b.n	b44d6 <loop+0x162>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4716:	60df      	str	r7, [r3, #12]
                return *this;
   b4718:	e7e8      	b.n	b46ec <loop+0x378>
                valid_ = false;
   b471a:	7525      	strb	r5, [r4, #20]
                return *this;
   b471c:	e7e6      	b.n	b46ec <loop+0x378>
   b471e:	bf00      	nop
   b4720:	000ba005 	.word	0x000ba005
   b4724:	00030010 	.word	0x00030010
   b4728:	2003ddd0 	.word	0x2003ddd0
   b472c:	000b9cce 	.word	0x000b9cce
   b4730:	2003e678 	.word	0x2003e678
   b4734:	2003e63c 	.word	0x2003e63c

000b4738 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4738:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b473a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b473c:	4604      	mov	r4, r0
   b473e:	460d      	mov	r5, r1
   b4740:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4742:	d916      	bls.n	b4772 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4744:	4290      	cmp	r0, r2
   b4746:	d215      	bcs.n	b4774 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4748:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b474c:	1a75      	subs	r5, r6, r1
   b474e:	f1a1 0714 	sub.w	r7, r1, #20
   b4752:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4754:	42b7      	cmp	r7, r6
   b4756:	d01c      	beq.n	b4792 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4758:	b12c      	cbz	r4, b4766 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b475a:	4631      	mov	r1, r6
   b475c:	4620      	mov	r0, r4
   b475e:	f002 f924 	bl	b69aa <_ZN6StringC1EOS_>
   b4762:	7c33      	ldrb	r3, [r6, #16]
   b4764:	7423      	strb	r3, [r4, #16]
   b4766:	4630      	mov	r0, r6
   b4768:	f002 f8b6 	bl	b68d8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b476c:	3e14      	subs	r6, #20
   b476e:	3c14      	subs	r4, #20
   b4770:	e7f0      	b.n	b4754 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4772:	d00e      	beq.n	b4792 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4774:	42b5      	cmp	r5, r6
   b4776:	d00c      	beq.n	b4792 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4778:	b12c      	cbz	r4, b4786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b477a:	4629      	mov	r1, r5
   b477c:	4620      	mov	r0, r4
   b477e:	f002 f914 	bl	b69aa <_ZN6StringC1EOS_>
   b4782:	7c2b      	ldrb	r3, [r5, #16]
   b4784:	7423      	strb	r3, [r4, #16]
   b4786:	4628      	mov	r0, r5
   b4788:	f002 f8a6 	bl	b68d8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b478c:	3514      	adds	r5, #20
   b478e:	3414      	adds	r4, #20
   b4790:	e7f0      	b.n	b4774 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4794 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4798:	2300      	movs	r3, #0
   b479a:	e9c0 3300 	strd	r3, r3, [r0]
   b479e:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b47a0:	684f      	ldr	r7, [r1, #4]
   b47a2:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b47a4:	4604      	mov	r4, r0
   b47a6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b47a8:	dd23      	ble.n	b47f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b47aa:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b47ae:	fb08 f007 	mul.w	r0, r8, r7
   b47b2:	f001 fe9d 	bl	b64f0 <malloc>
            if (!d) {
   b47b6:	4605      	mov	r5, r0
   b47b8:	b1d8      	cbz	r0, b47f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b47ba:	e9d4 1200 	ldrd	r1, r2, [r4]
   b47be:	fb08 1202 	mla	r2, r8, r2, r1
   b47c2:	f7ff ffb9 	bl	b4738 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b47c6:	6820      	ldr	r0, [r4, #0]
   b47c8:	f001 fe9a 	bl	b6500 <free>
        data_ = d;
   b47cc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b47ce:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b47d0:	e9d6 7300 	ldrd	r7, r3, [r6]
   b47d4:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b47d8:	45b8      	cmp	r8, r7
   b47da:	d008      	beq.n	b47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b47dc:	4639      	mov	r1, r7
   b47de:	4628      	mov	r0, r5
   b47e0:	f002 f8fd 	bl	b69de <_ZN6StringC1ERKS_>
   b47e4:	7c3b      	ldrb	r3, [r7, #16]
   b47e6:	742b      	strb	r3, [r5, #16]
   b47e8:	3714      	adds	r7, #20
   b47ea:	3514      	adds	r5, #20
   b47ec:	e7f4      	b.n	b47d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b47ee:	6873      	ldr	r3, [r6, #4]
   b47f0:	6063      	str	r3, [r4, #4]
}
   b47f2:	4620      	mov	r0, r4
   b47f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b47f8 <_GLOBAL__sub_I_sd>:
        val_(val) {
   b47f8:	4b41      	ldr	r3, [pc, #260]	; (b4900 <_GLOBAL__sub_I_sd+0x108>)
   b47fa:	2201      	movs	r2, #1
   b47fc:	b570      	push	{r4, r5, r6, lr}
   b47fe:	701a      	strb	r2, [r3, #0]
   b4800:	4b40      	ldr	r3, [pc, #256]	; (b4904 <_GLOBAL__sub_I_sd+0x10c>)
  SdFat() {
   b4802:	4c41      	ldr	r4, [pc, #260]	; (b4908 <_GLOBAL__sub_I_sd+0x110>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4804:	4d41      	ldr	r5, [pc, #260]	; (b490c <_GLOBAL__sub_I_sd+0x114>)
  {
   b4806:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
   b480a:	2108      	movs	r1, #8
   b480c:	7019      	strb	r1, [r3, #0]
   b480e:	2164      	movs	r1, #100	; 0x64
   b4810:	2300      	movs	r3, #0
   b4812:	f8c4 1460 	str.w	r1, [r4, #1120]	; 0x460
   b4816:	493e      	ldr	r1, [pc, #248]	; (b4910 <_GLOBAL__sub_I_sd+0x118>)
   b4818:	6063      	str	r3, [r4, #4]
   b481a:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   b481e:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
   b4822:	f8c4 1470 	str.w	r1, [r4, #1136]	; 0x470
   b4826:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
   b482a:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   b482e:	7829      	ldrb	r1, [r5, #0]
   b4830:	f3bf 8f5b 	dmb	ish
   b4834:	4011      	ands	r1, r2
   b4836:	b08e      	sub	sp, #56	; 0x38
   b4838:	d10b      	bne.n	b4852 <_GLOBAL__sub_I_sd+0x5a>
   b483a:	4628      	mov	r0, r5
   b483c:	9101      	str	r1, [sp, #4]
   b483e:	f7ff fc3b 	bl	b40b8 <__cxa_guard_acquire>
   b4842:	9901      	ldr	r1, [sp, #4]
   b4844:	b128      	cbz	r0, b4852 <_GLOBAL__sub_I_sd+0x5a>
   b4846:	4833      	ldr	r0, [pc, #204]	; (b4914 <_GLOBAL__sub_I_sd+0x11c>)
   b4848:	f001 fee6 	bl	b6618 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b484c:	4628      	mov	r0, r5
   b484e:	f7ff fc38 	bl	b40c2 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b4852:	4b30      	ldr	r3, [pc, #192]	; (b4914 <_GLOBAL__sub_I_sd+0x11c>)
   b4854:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
              error_(SYSTEM_ERROR_NONE) {
   b4858:	4b2f      	ldr	r3, [pc, #188]	; (b4918 <_GLOBAL__sub_I_sd+0x120>)
    SleepResult() {}
   b485a:	4a30      	ldr	r2, [pc, #192]	; (b491c <_GLOBAL__sub_I_sd+0x124>)
   b485c:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b485e:	2400      	movs	r4, #0
   b4860:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4864:	2002      	movs	r0, #2
   b4866:	f001 fd5b 	bl	b6320 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b486a:	4621      	mov	r1, r4
   b486c:	2001      	movs	r0, #1
   b486e:	f001 fd67 	bl	b6340 <system_thread_set_state>
FuelGauge batteryMonitor;
   b4872:	4621      	mov	r1, r4
   b4874:	482a      	ldr	r0, [pc, #168]	; (b4920 <_GLOBAL__sub_I_sd+0x128>)
        filter_(level, filters) {
   b4876:	4d2b      	ldr	r5, [pc, #172]	; (b4924 <_GLOBAL__sub_I_sd+0x12c>)
   b4878:	f003 f976 	bl	b7b68 <_ZN9FuelGaugeC1Eb>
        capacity_(0) {
   b487c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b4880:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b4882:	f003 fe15 	bl	b84b0 <_Z16_fetch_usbserialv>
   b4886:	a902      	add	r1, sp, #8
   b4888:	4606      	mov	r6, r0
   b488a:	a805      	add	r0, sp, #20
   b488c:	f7ff ff82 	bl	b4794 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b4890:	a905      	add	r1, sp, #20
   b4892:	a808      	add	r0, sp, #32
   b4894:	f7ff ff7e 	bl	b4794 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4898:	4b23      	ldr	r3, [pc, #140]	; (b4928 <_GLOBAL__sub_I_sd+0x130>)
   b489a:	602b      	str	r3, [r5, #0]
   b489c:	a908      	add	r1, sp, #32
   b489e:	a80b      	add	r0, sp, #44	; 0x2c
   b48a0:	f7ff ff78 	bl	b4794 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b48a4:	aa0b      	add	r2, sp, #44	; 0x2c
   b48a6:	211e      	movs	r1, #30
   b48a8:	1d28      	adds	r0, r5, #4
   b48aa:	f002 fde7 	bl	b747c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b48ae:	a80b      	add	r0, sp, #44	; 0x2c
   b48b0:	f7ff fd2c 	bl	b430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b48b4:	a808      	add	r0, sp, #32
   b48b6:	f7ff fd29 	bl	b430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b48ba:	4b1c      	ldr	r3, [pc, #112]	; (b492c <_GLOBAL__sub_I_sd+0x134>)
   b48bc:	602b      	str	r3, [r5, #0]
   b48be:	622e      	str	r6, [r5, #32]
   b48c0:	a805      	add	r0, sp, #20
   b48c2:	f7ff fd23 	bl	b430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b48c6:	4b1a      	ldr	r3, [pc, #104]	; (b4930 <_GLOBAL__sub_I_sd+0x138>)
   b48c8:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b48ca:	f003 fdf1 	bl	b84b0 <_Z16_fetch_usbserialv>
   b48ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b48d2:	f003 fddd 	bl	b8490 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b48d6:	f002 fab3 	bl	b6e40 <_ZN5spark10LogManager8instanceEv>
   b48da:	4629      	mov	r1, r5
   b48dc:	f002 fca4 	bl	b7228 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b48e0:	a802      	add	r0, sp, #8
   b48e2:	f7ff fd13 	bl	b430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        : config_(config) {
   b48e6:	4b13      	ldr	r3, [pc, #76]	; (b4934 <_GLOBAL__sub_I_sd+0x13c>)
   b48e8:	1d1a      	adds	r2, r3, #4
   b48ea:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b48ec:	4a12      	ldr	r2, [pc, #72]	; (b4938 <_GLOBAL__sub_I_sd+0x140>)
   b48ee:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b48f0:	2201      	movs	r2, #1
   b48f2:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b48f6:	611c      	str	r4, [r3, #16]
   b48f8:	751a      	strb	r2, [r3, #20]
   b48fa:	b00e      	add	sp, #56	; 0x38
   b48fc:	bd70      	pop	{r4, r5, r6, pc}
   b48fe:	bf00      	nop
   b4900:	2003ddc4 	.word	0x2003ddc4
   b4904:	2003ddc5 	.word	0x2003ddc5
   b4908:	2003e1b4 	.word	0x2003e1b4
   b490c:	2003ddac 	.word	0x2003ddac
   b4910:	000b9ce8 	.word	0x000b9ce8
   b4914:	2003ddb0 	.word	0x2003ddb0
   b4918:	2003ddb8 	.word	0x2003ddb8
   b491c:	ffff0000 	.word	0xffff0000
   b4920:	2003ddc8 	.word	0x2003ddc8
   b4924:	2003e184 	.word	0x2003e184
   b4928:	000b9cfc 	.word	0x000b9cfc
   b492c:	000b9e58 	.word	0x000b9e58
   b4930:	000b9d14 	.word	0x000b9d14
   b4934:	2003ddd0 	.word	0x2003ddd0
   b4938:	00030010 	.word	0x00030010

000b493c <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b493c:	2904      	cmp	r1, #4
   b493e:	d804      	bhi.n	b494a <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b4940:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b4944:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b4948:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b494a:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b494c:	bf9b      	ittet	ls
   b494e:	f101 31ff 	addls.w	r1, r1, #4294967295
   b4952:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b4956:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b4958:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b495a:	bf84      	itt	hi
   b495c:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b4960:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b4962:	4770      	bx	lr

000b4964 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b4964:	b510      	push	{r4, lr}
   b4966:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b4968:	3024      	adds	r0, #36	; 0x24
   b496a:	f000 fe63 	bl	b5634 <_ZN8FatCache4syncEv>
   b496e:	b128      	cbz	r0, b497c <_ZN9FatVolume9cacheSyncEv+0x18>
   b4970:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b4974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b4978:	f000 be5c 	b.w	b5634 <_ZN8FatCache4syncEv>
  }
   b497c:	bd10      	pop	{r4, pc}

000b497e <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b497e:	1e41      	subs	r1, r0, #1
   b4980:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b4984:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b4986:	0842      	lsrs	r2, r0, #1
   b4988:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b498c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b4990:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b4994:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b4996:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b4998:	d1f5      	bne.n	b4986 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b499a:	4770      	bx	lr

000b499c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b49a0:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b49a2:	f810 3b01 	ldrb.w	r3, [r0], #1
   b49a6:	2b20      	cmp	r3, #32
   b49a8:	d0fa      	beq.n	b49a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b49aa:	4d6a      	ldr	r5, [pc, #424]	; (b4b54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b49ac:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b49ae:	2400      	movs	r4, #0
    c = path[len];
   b49b0:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b49b2:	b1c3      	cbz	r3, b49e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b49b4:	2b2f      	cmp	r3, #47	; 0x2f
   b49b6:	d016      	beq.n	b49e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b49b8:	2b5c      	cmp	r3, #92	; 0x5c
   b49ba:	d102      	bne.n	b49c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b49bc:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b49be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b49c2:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b49c6:	b2c0      	uxtb	r0, r0
   b49c8:	281d      	cmp	r0, #29
   b49ca:	d803      	bhi.n	b49d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b49cc:	fa25 f000 	lsr.w	r0, r5, r0
   b49d0:	07c0      	lsls	r0, r0, #31
   b49d2:	d4f3      	bmi.n	b49bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b49d4:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b49d8:	283c      	cmp	r0, #60	; 0x3c
   b49da:	d0ef      	beq.n	b49bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b49dc:	3b20      	subs	r3, #32
   b49de:	2b5e      	cmp	r3, #94	; 0x5e
   b49e0:	d8ec      	bhi.n	b49bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b49e2:	3401      	adds	r4, #1
    c = path[len];
   b49e4:	e7e4      	b.n	b49b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b49e6:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b49e8:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b49ea:	4607      	mov	r7, r0
   b49ec:	f810 5b01 	ldrb.w	r5, [r0], #1
   b49f0:	2d20      	cmp	r5, #32
   b49f2:	d0fa      	beq.n	b49ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b49f4:	2d2f      	cmp	r5, #47	; 0x2f
   b49f6:	d0f8      	beq.n	b49ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b49f8:	6017      	str	r7, [r2, #0]
  while (len) {
   b49fa:	b14c      	cbz	r4, b4a10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b49fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b4a00:	2a2e      	cmp	r2, #46	; 0x2e
   b4a02:	d001      	beq.n	b4a08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b4a04:	2a20      	cmp	r2, #32
   b4a06:	d101      	bne.n	b4a0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b4a08:	3c01      	subs	r4, #1
  while (len) {
   b4a0a:	e7f6      	b.n	b49fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b4a0c:	2cff      	cmp	r4, #255	; 0xff
   b4a0e:	dcd5      	bgt.n	b49bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b4a10:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b4a14:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b4a18:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b4a1a:	f8c1 300d 	str.w	r3, [r1, #13]
   b4a1e:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b4a20:	f04f 0800 	mov.w	r8, #0
   b4a24:	f816 3008 	ldrb.w	r3, [r6, r8]
   b4a28:	2b2e      	cmp	r3, #46	; 0x2e
   b4a2a:	d001      	beq.n	b4a30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b4a2c:	2b20      	cmp	r3, #32
   b4a2e:	d102      	bne.n	b4a36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b4a30:	f108 0801 	add.w	r8, r8, #1
   b4a34:	e7f6      	b.n	b4a24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b4a36:	fab8 f088 	clz	r0, r8
   b4a3a:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b4a3c:	1e65      	subs	r5, r4, #1
   b4a3e:	1c6b      	adds	r3, r5, #1
   b4a40:	d002      	beq.n	b4a48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b4a42:	5d73      	ldrb	r3, [r6, r5]
   b4a44:	2b2e      	cmp	r3, #46	; 0x2e
   b4a46:	d114      	bne.n	b4a72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b4a48:	f04f 0900 	mov.w	r9, #0
   b4a4c:	2707      	movs	r7, #7
   b4a4e:	464a      	mov	r2, r9
   b4a50:	46ca      	mov	sl, r9
   b4a52:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b4a56:	45a0      	cmp	r8, r4
   b4a58:	da68      	bge.n	b4b2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b4a5a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b4a5e:	2b20      	cmp	r3, #32
   b4a60:	d003      	beq.n	b4a6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b4a62:	2b2e      	cmp	r3, #46	; 0x2e
   b4a64:	d107      	bne.n	b4a76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b4a66:	45a8      	cmp	r8, r5
   b4a68:	d012      	beq.n	b4a90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b4a6a:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b4a6c:	f108 0801 	add.w	r8, r8, #1
   b4a70:	e7f1      	b.n	b4a56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b4a72:	3d01      	subs	r5, #1
   b4a74:	e7e3      	b.n	b4a3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b4a76:	2b22      	cmp	r3, #34	; 0x22
   b4a78:	d008      	beq.n	b4a8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b4a7a:	2b7c      	cmp	r3, #124	; 0x7c
   b4a7c:	d006      	beq.n	b4a8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b4a7e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b4a82:	f1bc 0f05 	cmp.w	ip, #5
   b4a86:	d80a      	bhi.n	b4a9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b4a88:	2b2d      	cmp	r3, #45	; 0x2d
   b4a8a:	d012      	beq.n	b4ab2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b4a8c:	45a8      	cmp	r8, r5
   b4a8e:	d15b      	bne.n	b4b48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b4a90:	2f0a      	cmp	r7, #10
   b4a92:	d04a      	beq.n	b4b2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b4a94:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b4a96:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b4a98:	f04f 0e10 	mov.w	lr, #16
   b4a9c:	e7e6      	b.n	b4a6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b4a9e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b4aa2:	f1bc 0f05 	cmp.w	ip, #5
   b4aa6:	d9f1      	bls.n	b4a8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b4aa8:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b4aac:	f1bc 0f02 	cmp.w	ip, #2
   b4ab0:	d9ec      	bls.n	b4a8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b4ab2:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b4ab6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b4aba:	d8e7      	bhi.n	b4a8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b4abc:	45a8      	cmp	r8, r5
   b4abe:	d0e7      	beq.n	b4a90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b4ac0:	42ba      	cmp	r2, r7
   b4ac2:	d830      	bhi.n	b4b26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b4ac4:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b4ac8:	f1bc 0f19 	cmp.w	ip, #25
   b4acc:	d81a      	bhi.n	b4b04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b4ace:	3b20      	subs	r3, #32
        lc |= bit;
   b4ad0:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b4ad4:	b2db      	uxtb	r3, r3
        lc |= bit;
   b4ad6:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b4ada:	f102 0c01 	add.w	ip, r2, #1
   b4ade:	fa5f fc8c 	uxtb.w	ip, ip
   b4ae2:	440a      	add	r2, r1
      if (i < 7) {
   b4ae4:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b4ae8:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b4aea:	d801      	bhi.n	b4af0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b4aec:	f881 c00c 	strb.w	ip, [r1, #12]
   b4af0:	4662      	mov	r2, ip
   b4af2:	e7bb      	b.n	b4a6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b4af4:	45a8      	cmp	r8, r5
   b4af6:	dc18      	bgt.n	b4b2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b4af8:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b4afa:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b4afc:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b4afe:	f04f 0e10 	mov.w	lr, #16
   b4b02:	e7b2      	b.n	b4a6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b4b04:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b4b08:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b4b0c:	bf98      	it	ls
   b4b0e:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b4b12:	e7e2      	b.n	b4ada <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b4b14:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b4b16:	2001      	movs	r0, #1
   b4b18:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b4b1a:	4419      	add	r1, r3
   b4b1c:	237e      	movs	r3, #126	; 0x7e
   b4b1e:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b4b20:	2331      	movs	r3, #49	; 0x31
   b4b22:	738b      	strb	r3, [r1, #14]
   b4b24:	e74b      	b.n	b49be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b4b26:	2f0a      	cmp	r7, #10
   b4b28:	d1e4      	bne.n	b4af4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b4b2a:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b4b2c:	7b4b      	ldrb	r3, [r1, #13]
   b4b2e:	2b20      	cmp	r3, #32
   b4b30:	f43f af44 	beq.w	b49bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b4b34:	2800      	cmp	r0, #0
   b4b36:	d0ed      	beq.n	b4b14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b4b38:	ea1a 0f09 	tst.w	sl, r9
   b4b3c:	bf18      	it	ne
   b4b3e:	f04f 0902 	movne.w	r9, #2
   b4b42:	f881 9000 	strb.w	r9, [r1]
   b4b46:	e73a      	b.n	b49be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b4b48:	42ba      	cmp	r2, r7
   b4b4a:	d8ec      	bhi.n	b4b26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b4b4c:	2000      	movs	r0, #0
      c = '_';
   b4b4e:	235f      	movs	r3, #95	; 0x5f
   b4b50:	e7c3      	b.n	b4ada <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b4b52:	bf00      	nop
   b4b54:	31000101 	.word	0x31000101

000b4b58 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b4b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b4b5c:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b4b60:	4606      	mov	r6, r0
   b4b62:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b4b64:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b4b66:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b4b68:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b4b6c:	6861      	ldr	r1, [r4, #4]
   b4b6e:	68a2      	ldr	r2, [r4, #8]
   b4b70:	186b      	adds	r3, r5, r1
   b4b72:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b4b74:	4411      	add	r1, r2
   b4b76:	4291      	cmp	r1, r2
   b4b78:	d006      	beq.n	b4b88 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b4b7a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4b7e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b4b82:	4043      	eors	r3, r0
   b4b84:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b4b86:	e7f6      	b.n	b4b76 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b4b88:	f1b9 0f03 	cmp.w	r9, #3
   b4b8c:	bf28      	it	cs
   b4b8e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b4b92:	f109 0204 	add.w	r2, r9, #4
   b4b96:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b4b98:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b4b9c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b4b9e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b4ba0:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b4ba2:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b4ba4:	bf94      	ite	ls
   b4ba6:	3130      	addls	r1, #48	; 0x30
   b4ba8:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b4baa:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b4bac:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b4bae:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b4bb2:	d1f1      	bne.n	b4b98 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b4bb4:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b4bb8:	2100      	movs	r1, #0
   b4bba:	735f      	strb	r7, [r3, #13]
   b4bbc:	4630      	mov	r0, r6
   b4bbe:	f000 fb2a 	bl	b5216 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b4bc2:	2101      	movs	r1, #1
   b4bc4:	4630      	mov	r0, r6
   b4bc6:	f000 fb07 	bl	b51d8 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b4bca:	4601      	mov	r1, r0
   b4bcc:	b928      	cbnz	r0, b4bda <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b4bce:	7870      	ldrb	r0, [r6, #1]
   b4bd0:	fab0 f080 	clz	r0, r0
   b4bd4:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b4bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b4bda:	7803      	ldrb	r3, [r0, #0]
   b4bdc:	b16b      	cbz	r3, b4bfa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b4bde:	7ac3      	ldrb	r3, [r0, #11]
   b4be0:	071b      	lsls	r3, r3, #28
   b4be2:	d4ee      	bmi.n	b4bc2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b4be4:	220b      	movs	r2, #11
   b4be6:	4640      	mov	r0, r8
   b4be8:	f004 fdce 	bl	b9788 <memcmp>
   b4bec:	2800      	cmp	r0, #0
   b4bee:	d1e8      	bne.n	b4bc2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b4bf0:	3501      	adds	r5, #1
   b4bf2:	b2ad      	uxth	r5, r5
   b4bf4:	2d64      	cmp	r5, #100	; 0x64
   b4bf6:	d1b9      	bne.n	b4b6c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b4bf8:	e7ed      	b.n	b4bd6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b4bfa:	2001      	movs	r0, #1
   b4bfc:	e7eb      	b.n	b4bd6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b4c00 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b4c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c04:	ed2d 8b02 	vpush	{d8}
   b4c08:	b08b      	sub	sp, #44	; 0x2c
   b4c0a:	460d      	mov	r5, r1
   b4c0c:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b4c0e:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b4c10:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b4c12:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b4c16:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b4c18:	d105      	bne.n	b4c26 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b4c1a:	2000      	movs	r0, #0
}
   b4c1c:	b00b      	add	sp, #44	; 0x2c
   b4c1e:	ecbd 8b02 	vpop	{d8}
   b4c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b4c26:	9b07      	ldr	r3, [sp, #28]
   b4c28:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b4c2a:	2b00      	cmp	r3, #0
   b4c2c:	d1f5      	bne.n	b4c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b4c2e:	6853      	ldr	r3, [r2, #4]
   b4c30:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b4c32:	7813      	ldrb	r3, [r2, #0]
   b4c34:	079c      	lsls	r4, r3, #30
   b4c36:	bf1f      	itttt	ne
   b4c38:	9b05      	ldrne	r3, [sp, #20]
   b4c3a:	330c      	addne	r3, #12
   b4c3c:	220d      	movne	r2, #13
   b4c3e:	fbb3 f3f2 	udivne	r3, r3, r2
   b4c42:	bf1a      	itte	ne
   b4c44:	3301      	addne	r3, #1
   b4c46:	b2db      	uxtbne	r3, r3
   b4c48:	2301      	moveq	r3, #1
    seekSet(0);
   b4c4a:	2100      	movs	r1, #0
   b4c4c:	4628      	mov	r0, r5
   b4c4e:	9303      	str	r3, [sp, #12]
   b4c50:	f000 fae1 	bl	b5216 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b4c54:	f107 030d 	add.w	r3, r7, #13
  }
   b4c58:	f04f 0b00 	mov.w	fp, #0
   b4c5c:	ee08 3a10 	vmov	s16, r3
   b4c60:	46da      	mov	sl, fp
   b4c62:	465c      	mov	r4, fp
   b4c64:	465e      	mov	r6, fp
   b4c66:	f8cd b010 	str.w	fp, [sp, #16]
   b4c6a:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b4c6c:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b4c6e:	2101      	movs	r1, #1
   b4c70:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b4c72:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b4c76:	f000 faaf 	bl	b51d8 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b4c7a:	4603      	mov	r3, r0
   b4c7c:	2800      	cmp	r0, #0
   b4c7e:	d171      	bne.n	b4d64 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b4c80:	786b      	ldrb	r3, [r5, #1]
   b4c82:	2b00      	cmp	r3, #0
   b4c84:	d1c9      	bne.n	b4c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b4c86:	9b06      	ldr	r3, [sp, #24]
   b4c88:	059a      	lsls	r2, r3, #22
   b4c8a:	d5c6      	bpl.n	b4c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b4c8c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b4c90:	3b01      	subs	r3, #1
   b4c92:	2b01      	cmp	r3, #1
   b4c94:	d8c1      	bhi.n	b4c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b4c96:	9b04      	ldr	r3, [sp, #16]
   b4c98:	2c00      	cmp	r4, #0
   b4c9a:	bf08      	it	eq
   b4c9c:	4643      	moveq	r3, r8
   b4c9e:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b4ca0:	9b03      	ldr	r3, [sp, #12]
   b4ca2:	429c      	cmp	r4, r3
   b4ca4:	f0c0 80f1 	bcc.w	b4e8a <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b4ca8:	f1b9 0f00 	cmp.w	r9, #0
   b4cac:	f040 810a 	bne.w	b4ec4 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b4cb0:	9b04      	ldr	r3, [sp, #16]
   b4cb2:	4628      	mov	r0, r5
   b4cb4:	0159      	lsls	r1, r3, #5
   b4cb6:	f000 faae 	bl	b5216 <_ZN7FatFile7seekSetEm>
   b4cba:	2800      	cmp	r0, #0
   b4cbc:	d0ad      	beq.n	b4c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b4cbe:	9b03      	ldr	r3, [sp, #12]
   b4cc0:	f103 39ff 	add.w	r9, r3, #4294967295
   b4cc4:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b4cc8:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b4cca:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b4cce:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b4cd2:	2e00      	cmp	r6, #0
   b4cd4:	f000 810d 	beq.w	b4ef2 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b4cd8:	2100      	movs	r1, #0
   b4cda:	4628      	mov	r0, r5
   b4cdc:	f000 fa7c 	bl	b51d8 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b4ce0:	4604      	mov	r4, r0
   b4ce2:	2800      	cmp	r0, #0
   b4ce4:	d099      	beq.n	b4c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b4ce6:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b4ce8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b4cec:	454e      	cmp	r6, r9
   b4cee:	f043 0301 	orr.w	r3, r3, #1
   b4cf2:	bf0c      	ite	eq
   b4cf4:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b4cf8:	46b3      	movne	fp, r6
   b4cfa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b4cfe:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b4d02:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b4d06:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b4d0a:	f107 000d 	add.w	r0, r7, #13
   b4d0e:	f7ff fe36 	bl	b497e <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b4d12:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b4d16:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b4d18:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b4d1c:	f00b 031f 	and.w	r3, fp, #31
   b4d20:	220d      	movs	r2, #13
   b4d22:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b4d24:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b4d28:	4353      	muls	r3, r2
   b4d2a:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b4d2c:	9905      	ldr	r1, [sp, #20]
   b4d2e:	4299      	cmp	r1, r3
   b4d30:	f240 80d0 	bls.w	b4ed4 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b4d34:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b4d38:	2a04      	cmp	r2, #4
   b4d3a:	fa5f fe82 	uxtb.w	lr, r2
   b4d3e:	f102 0001 	add.w	r0, r2, #1
   b4d42:	f200 80cd 	bhi.w	b4ee0 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b4d46:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b4d4a:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b4d4e:	280d      	cmp	r0, #13
   b4d50:	f103 0301 	add.w	r3, r3, #1
   b4d54:	4602      	mov	r2, r0
   b4d56:	d1e9      	bne.n	b4d2c <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b4d58:	3e01      	subs	r6, #1
   b4d5a:	b2f6      	uxtb	r6, r6
   b4d5c:	e7b9      	b.n	b4cd2 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b4d5e:	f04f 0901 	mov.w	r9, #1
   b4d62:	e783      	b.n	b4c6c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b4d64:	7802      	ldrb	r2, [r0, #0]
   b4d66:	2ae5      	cmp	r2, #229	; 0xe5
   b4d68:	d000      	beq.n	b4d6c <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b4d6a:	b97a      	cbnz	r2, b4d8c <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b4d6c:	9904      	ldr	r1, [sp, #16]
   b4d6e:	2c00      	cmp	r4, #0
   b4d70:	bf08      	it	eq
   b4d72:	4641      	moveq	r1, r8
   b4d74:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b4d76:	9903      	ldr	r1, [sp, #12]
   b4d78:	428c      	cmp	r4, r1
        freeFound++;
   b4d7a:	bf3c      	itt	cc
   b4d7c:	3401      	addcc	r4, #1
   b4d7e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b4d80:	2a00      	cmp	r2, #0
   b4d82:	d080      	beq.n	b4c86 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b4d84:	2ae5      	cmp	r2, #229	; 0xe5
   b4d86:	d105      	bne.n	b4d94 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b4d88:	2600      	movs	r6, #0
   b4d8a:	e76f      	b.n	b4c6c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b4d8c:	9903      	ldr	r1, [sp, #12]
   b4d8e:	428c      	cmp	r4, r1
   b4d90:	bf38      	it	cc
   b4d92:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b4d94:	2a2e      	cmp	r2, #46	; 0x2e
   b4d96:	d0f7      	beq.n	b4d88 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b4d98:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b4d9a:	290f      	cmp	r1, #15
   b4d9c:	d14a      	bne.n	b4e34 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b4d9e:	bb16      	cbnz	r6, b4de6 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b4da0:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b4da4:	f43f af62 	beq.w	b4c6c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b4da8:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b4dac:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b4db0:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b4db2:	220d      	movs	r2, #13
   b4db4:	f10a 38ff 	add.w	r8, sl, #4294967295
   b4db8:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b4dbc:	9a05      	ldr	r2, [sp, #20]
   b4dbe:	4542      	cmp	r2, r8
   b4dc0:	d9e2      	bls.n	b4d88 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b4dc2:	eba2 0208 	sub.w	r2, r2, r8
   b4dc6:	9208      	str	r2, [sp, #32]
   b4dc8:	2200      	movs	r2, #0
   b4dca:	eb02 0108 	add.w	r1, r2, r8
   b4dce:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b4dd0:	4618      	mov	r0, r3
   b4dd2:	b2d1      	uxtb	r1, r2
   b4dd4:	f7ff fdb2 	bl	b493c <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b4dd8:	9908      	ldr	r1, [sp, #32]
   b4dda:	428a      	cmp	r2, r1
   b4ddc:	d10d      	bne.n	b4dfa <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b4dde:	2800      	cmp	r0, #0
   b4de0:	bf18      	it	ne
   b4de2:	2600      	movne	r6, #0
   b4de4:	e742      	b.n	b4c6c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b4de6:	f10a 3aff 	add.w	sl, sl, #4294967295
   b4dea:	fa5f fa8a 	uxtb.w	sl, sl
   b4dee:	4552      	cmp	r2, sl
   b4df0:	d1ca      	bne.n	b4d88 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b4df2:	7b5a      	ldrb	r2, [r3, #13]
   b4df4:	455a      	cmp	r2, fp
   b4df6:	d0dc      	beq.n	b4db2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b4df8:	e7c6      	b.n	b4d88 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b4dfa:	28ff      	cmp	r0, #255	; 0xff
   b4dfc:	d8c4      	bhi.n	b4d88 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b4dfe:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b4e02:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b4e06:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b4e08:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b4e0a:	bf9c      	itt	ls
   b4e0c:	f10e 0020 	addls.w	r0, lr, #32
   b4e10:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b4e14:	4608      	mov	r0, r1
   b4e16:	9909      	ldr	r1, [sp, #36]	; 0x24
   b4e18:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b4e1a:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b4e1e:	f1bc 0f19 	cmp.w	ip, #25
   b4e22:	bf9c      	itt	ls
   b4e24:	3120      	addls	r1, #32
   b4e26:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b4e28:	4571      	cmp	r1, lr
   b4e2a:	d1ad      	bne.n	b4d88 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b4e2c:	3201      	adds	r2, #1
   b4e2e:	2a0d      	cmp	r2, #13
   b4e30:	d1cb      	bne.n	b4dca <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b4e32:	e71b      	b.n	b4c6c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b4e34:	0708      	lsls	r0, r1, #28
   b4e36:	d4a7      	bmi.n	b4d88 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b4e38:	b15e      	cbz	r6, b4e52 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b4e3a:	f1ba 0f01 	cmp.w	sl, #1
   b4e3e:	f47f aeec 	bne.w	b4c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b4e42:	4618      	mov	r0, r3
   b4e44:	f7ff fd9b 	bl	b497e <_ZN7FatFile11lfnChecksumEPh>
   b4e48:	4558      	cmp	r0, fp
   b4e4a:	f47f aee6 	bne.w	b4c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b4e4e:	46b1      	mov	r9, r6
   b4e50:	e00e      	b.n	b4e70 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b4e52:	ee18 1a10 	vmov	r1, s16
   b4e56:	220b      	movs	r2, #11
   b4e58:	4618      	mov	r0, r3
   b4e5a:	f004 fc95 	bl	b9788 <memcmp>
   b4e5e:	2800      	cmp	r0, #0
   b4e60:	f47f af04 	bne.w	b4c6c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b4e64:	f897 9000 	ldrb.w	r9, [r7]
   b4e68:	f019 0901 	ands.w	r9, r9, #1
   b4e6c:	f47f af77 	bne.w	b4d5e <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b4e70:	9b06      	ldr	r3, [sp, #24]
   b4e72:	0519      	lsls	r1, r3, #20
   b4e74:	f53f aed1 	bmi.w	b4c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b4e78:	9b06      	ldr	r3, [sp, #24]
   b4e7a:	9807      	ldr	r0, [sp, #28]
   b4e7c:	f8cd 9000 	str.w	r9, [sp]
   b4e80:	4642      	mov	r2, r8
   b4e82:	4629      	mov	r1, r5
   b4e84:	f000 fa0a 	bl	b529c <_ZN7FatFile15openCachedEntryEPS_tih>
   b4e88:	e6c8      	b.n	b4c1c <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b4e8a:	2100      	movs	r1, #0
   b4e8c:	4628      	mov	r0, r5
   b4e8e:	f000 f9a3 	bl	b51d8 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b4e92:	b9a0      	cbnz	r0, b4ebe <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b4e94:	786b      	ldrb	r3, [r5, #1]
   b4e96:	2b00      	cmp	r3, #0
   b4e98:	f47f aebf 	bne.w	b4c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b4e9c:	4628      	mov	r0, r5
   b4e9e:	f000 f887 	bl	b4fb0 <_ZN7FatFile13addDirClusterEv>
   b4ea2:	2800      	cmp	r0, #0
   b4ea4:	f43f aeb9 	beq.w	b4c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b4ea8:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b4eaa:	791b      	ldrb	r3, [r3, #4]
   b4eac:	2b01      	cmp	r3, #1
   b4eae:	f63f aefb 	bhi.w	b4ca8 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b4eb2:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b4eb4:	3410      	adds	r4, #16
   b4eb6:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b4eb8:	42a3      	cmp	r3, r4
   b4eba:	d8ef      	bhi.n	b4e9c <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b4ebc:	e6f4      	b.n	b4ca8 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b4ebe:	3401      	adds	r4, #1
   b4ec0:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b4ec2:	e6ed      	b.n	b4ca0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b4ec4:	4639      	mov	r1, r7
   b4ec6:	4628      	mov	r0, r5
   b4ec8:	f7ff fe46 	bl	b4b58 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b4ecc:	2800      	cmp	r0, #0
   b4ece:	f47f aeef 	bne.w	b4cb0 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b4ed2:	e6a2      	b.n	b4c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b4ed4:	bf14      	ite	ne
   b4ed6:	f04f 31ff 	movne.w	r1, #4294967295
   b4eda:	2100      	moveq	r1, #0
   b4edc:	b289      	uxth	r1, r1
   b4ede:	e72b      	b.n	b4d38 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b4ee0:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b4ee4:	bf94      	ite	ls
   b4ee6:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b4eea:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b4eee:	8091      	strh	r1, [r2, #4]
   b4ef0:	e72d      	b.n	b4d4e <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b4ef2:	4631      	mov	r1, r6
   b4ef4:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b4ef6:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b4efa:	f000 f96d 	bl	b51d8 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b4efe:	4604      	mov	r4, r0
   b4f00:	2800      	cmp	r0, #0
   b4f02:	f43f ae8a 	beq.w	b4c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b4f06:	2220      	movs	r2, #32
   b4f08:	4631      	mov	r1, r6
   b4f0a:	f004 fc75 	bl	b97f8 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b4f0e:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b4f12:	6023      	str	r3, [r4, #0]
   b4f14:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b4f18:	6063      	str	r3, [r4, #4]
   b4f1a:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b4f1e:	8123      	strh	r3, [r4, #8]
   b4f20:	7dfb      	ldrb	r3, [r7, #23]
   b4f22:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b4f24:	783b      	ldrb	r3, [r7, #0]
   b4f26:	f003 0318 	and.w	r3, r3, #24
   b4f2a:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b4f2c:	4b0f      	ldr	r3, [pc, #60]	; (b4f6c <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b4f2e:	681b      	ldr	r3, [r3, #0]
   b4f30:	b19b      	cbz	r3, b4f5a <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b4f32:	f104 010e 	add.w	r1, r4, #14
   b4f36:	f104 0010 	add.w	r0, r4, #16
   b4f3a:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b4f3c:	8a23      	ldrh	r3, [r4, #16]
   b4f3e:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b4f40:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b4f42:	89e3      	ldrh	r3, [r4, #14]
   b4f44:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b4f46:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b4f48:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b4f4c:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b4f50:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b4f54:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b4f58:	e78e      	b.n	b4e78 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b4f5a:	2321      	movs	r3, #33	; 0x21
   b4f5c:	7423      	strb	r3, [r4, #16]
   b4f5e:	2328      	movs	r3, #40	; 0x28
   b4f60:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b4f62:	2308      	movs	r3, #8
   b4f64:	73a6      	strb	r6, [r4, #14]
   b4f66:	73e3      	strb	r3, [r4, #15]
   b4f68:	e7e8      	b.n	b4f3c <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b4f6a:	bf00      	nop
   b4f6c:	2003e640 	.word	0x2003e640

000b4f70 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b4f70:	b538      	push	{r3, r4, r5, lr}
   b4f72:	4604      	mov	r4, r0
   b4f74:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b4f76:	2224      	movs	r2, #36	; 0x24
   b4f78:	2100      	movs	r1, #0
   b4f7a:	f004 fc3d 	bl	b97f8 <memset>

  m_vol = vol;
   b4f7e:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b4f80:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b4f82:	2b10      	cmp	r3, #16
   b4f84:	d003      	beq.n	b4f8e <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b4f86:	2b20      	cmp	r3, #32
   b4f88:	d006      	beq.n	b4f98 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b4f8a:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b4f8c:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b4f8e:	2320      	movs	r3, #32
  m_flags = F_READ;
   b4f90:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b4f92:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b4f94:	70a0      	strb	r0, [r4, #2]
  return true;
   b4f96:	e7f9      	b.n	b4f8c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b4f98:	2340      	movs	r3, #64	; 0x40
   b4f9a:	e7f9      	b.n	b4f90 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b4f9c <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b4f9c:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b4f9e:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b4fa0:	f043 0304 	orr.w	r3, r3, #4
   b4fa4:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b4fa6:	f100 0210 	add.w	r2, r0, #16
   b4faa:	6880      	ldr	r0, [r0, #8]
   b4fac:	f000 bbf8 	b.w	b57a0 <_ZN9FatVolume15allocateClusterEmPm>

000b4fb0 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b4fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b4fb4:	7801      	ldrb	r1, [r0, #0]
   b4fb6:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b4fba:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b4fbc:	d003      	beq.n	b4fc6 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b4fbe:	2600      	movs	r6, #0
}
   b4fc0:	4630      	mov	r0, r6
   b4fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b4fc6:	6942      	ldr	r2, [r0, #20]
   b4fc8:	4b17      	ldr	r3, [pc, #92]	; (b5028 <_ZN7FatFile13addDirClusterEv+0x78>)
   b4fca:	429a      	cmp	r2, r3
   b4fcc:	d2f7      	bcs.n	b4fbe <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b4fce:	f7ff ffe5 	bl	b4f9c <_ZN7FatFile10addClusterEv>
   b4fd2:	4606      	mov	r6, r0
   b4fd4:	2800      	cmp	r0, #0
   b4fd6:	d0f2      	beq.n	b4fbe <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b4fd8:	6921      	ldr	r1, [r4, #16]
   b4fda:	68a0      	ldr	r0, [r4, #8]
   b4fdc:	f000 fb75 	bl	b56ca <_ZNK9FatVolume17clusterFirstBlockEm>
   b4fe0:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b4fe2:	68a0      	ldr	r0, [r4, #8]
   b4fe4:	2205      	movs	r2, #5
   b4fe6:	4639      	mov	r1, r7
   b4fe8:	3024      	adds	r0, #36	; 0x24
   b4fea:	f000 fb4b 	bl	b5684 <_ZN8FatCache4readEmh>
  if (!pc) {
   b4fee:	4680      	mov	r8, r0
   b4ff0:	2800      	cmp	r0, #0
   b4ff2:	d0e4      	beq.n	b4fbe <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b4ff4:	4629      	mov	r1, r5
   b4ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
   b4ffa:	f004 fbfd 	bl	b97f8 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b4ffe:	2501      	movs	r5, #1
   b5000:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b5002:	791a      	ldrb	r2, [r3, #4]
   b5004:	42aa      	cmp	r2, r5
   b5006:	d909      	bls.n	b501c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b5008:	6818      	ldr	r0, [r3, #0]
   b500a:	4642      	mov	r2, r8
   b500c:	19e9      	adds	r1, r5, r7
   b500e:	f000 fea6 	bl	b5d5e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b5012:	2800      	cmp	r0, #0
   b5014:	d0d3      	beq.n	b4fbe <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5016:	3501      	adds	r5, #1
   b5018:	b2ed      	uxtb	r5, r5
   b501a:	e7f1      	b.n	b5000 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b501c:	6963      	ldr	r3, [r4, #20]
   b501e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b5022:	6163      	str	r3, [r4, #20]
  return true;
   b5024:	e7cc      	b.n	b4fc0 <_ZN7FatFile13addDirClusterEv+0x10>
   b5026:	bf00      	nop
   b5028:	001ffe00 	.word	0x001ffe00

000b502c <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b502c:	b510      	push	{r4, lr}
   b502e:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b5030:	6880      	ldr	r0, [r0, #8]
   b5032:	460a      	mov	r2, r1
   b5034:	3024      	adds	r0, #36	; 0x24
   b5036:	69a1      	ldr	r1, [r4, #24]
   b5038:	f000 fb24 	bl	b5684 <_ZN8FatCache4readEmh>
  if (!pc) {
   b503c:	b120      	cbz	r0, b5048 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b503e:	88a3      	ldrh	r3, [r4, #4]
   b5040:	f003 030f 	and.w	r3, r3, #15
   b5044:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b5048:	bd10      	pop	{r4, pc}

000b504a <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b504a:	7803      	ldrb	r3, [r0, #0]
   b504c:	b90b      	cbnz	r3, b5052 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b504e:	f7ff bf8f 	b.w	b4f70 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b5052:	2000      	movs	r0, #0
   b5054:	4770      	bx	lr

000b5056 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b5056:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b505a:	7803      	ldrb	r3, [r0, #0]
   b505c:	4604      	mov	r4, r0
   b505e:	4688      	mov	r8, r1
   b5060:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b5062:	2b00      	cmp	r3, #0
   b5064:	d05d      	beq.n	b5122 <_ZN7FatFile4readEPvj+0xcc>
   b5066:	7882      	ldrb	r2, [r0, #2]
   b5068:	07d1      	lsls	r1, r2, #31
   b506a:	d55a      	bpl.n	b5122 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b506c:	071a      	lsls	r2, r3, #28
   b506e:	d52d      	bpl.n	b50cc <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b5070:	69c3      	ldr	r3, [r0, #28]
   b5072:	6942      	ldr	r2, [r0, #20]
   b5074:	1a9b      	subs	r3, r3, r2
   b5076:	429d      	cmp	r5, r3
   b5078:	bf28      	it	cs
   b507a:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b507c:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b507e:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5082:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b5086:	2e00      	cmp	r6, #0
   b5088:	f000 808f 	beq.w	b51aa <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b508c:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b508e:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5090:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b5092:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b5094:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5098:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b509c:	d51f      	bpl.n	b50de <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b509e:	6a00      	ldr	r0, [r0, #32]
   b50a0:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b50a2:	68a0      	ldr	r0, [r4, #8]
   b50a4:	f1ba 0f00 	cmp.w	sl, #0
   b50a8:	d142      	bne.n	b5130 <_ZN7FatFile4readEPvj+0xda>
   b50aa:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b50ae:	d33f      	bcc.n	b5130 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b50b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b50b2:	4299      	cmp	r1, r3
   b50b4:	d03c      	beq.n	b5130 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b50b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b50ba:	d252      	bcs.n	b5162 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b50bc:	6800      	ldr	r0, [r0, #0]
   b50be:	4642      	mov	r2, r8
   b50c0:	f000 fdc4 	bl	b5c4c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b50c4:	b368      	cbz	r0, b5122 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b50c6:	f44f 7700 	mov.w	r7, #512	; 0x200
   b50ca:	e044      	b.n	b5156 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b50cc:	069b      	lsls	r3, r3, #26
   b50ce:	d5d5      	bpl.n	b507c <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b50d0:	6883      	ldr	r3, [r0, #8]
   b50d2:	891a      	ldrh	r2, [r3, #8]
   b50d4:	6943      	ldr	r3, [r0, #20]
   b50d6:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b50da:	b29b      	uxth	r3, r3
   b50dc:	e7cb      	b.n	b5076 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b50de:	f890 9005 	ldrb.w	r9, [r0, #5]
   b50e2:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b50e6:	f1ba 0f00 	cmp.w	sl, #0
   b50ea:	d108      	bne.n	b50fe <_ZN7FatFile4readEPvj+0xa8>
   b50ec:	f1b9 0f00 	cmp.w	r9, #0
   b50f0:	d105      	bne.n	b50fe <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b50f2:	b95b      	cbnz	r3, b510c <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b50f4:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b50f6:	bf4c      	ite	mi
   b50f8:	6a03      	ldrmi	r3, [r0, #32]
   b50fa:	6a23      	ldrpl	r3, [r4, #32]
   b50fc:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b50fe:	6921      	ldr	r1, [r4, #16]
   b5100:	68a0      	ldr	r0, [r4, #8]
   b5102:	f000 fae2 	bl	b56ca <_ZNK9FatVolume17clusterFirstBlockEm>
   b5106:	eb09 0100 	add.w	r1, r9, r0
   b510a:	e7ca      	b.n	b50a2 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b510c:	6921      	ldr	r1, [r4, #16]
   b510e:	465a      	mov	r2, fp
   b5110:	f000 fae1 	bl	b56d6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b5114:	2800      	cmp	r0, #0
   b5116:	db04      	blt.n	b5122 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b5118:	d1f1      	bne.n	b50fe <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b511a:	7823      	ldrb	r3, [r4, #0]
   b511c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5120:	d143      	bne.n	b51aa <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b5122:	7863      	ldrb	r3, [r4, #1]
   b5124:	f043 0302 	orr.w	r3, r3, #2
   b5128:	7063      	strb	r3, [r4, #1]
  return -1;
   b512a:	f04f 30ff 	mov.w	r0, #4294967295
   b512e:	e03d      	b.n	b51ac <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b5130:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b5134:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b5136:	f04f 0200 	mov.w	r2, #0
   b513a:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b513e:	bf28      	it	cs
   b5140:	4637      	movcs	r7, r6
   b5142:	f000 fa9f 	bl	b5684 <_ZN8FatCache4readEmh>
      if (!pc) {
   b5146:	2800      	cmp	r0, #0
   b5148:	d0eb      	beq.n	b5122 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b514a:	eb00 010a 	add.w	r1, r0, sl
   b514e:	463a      	mov	r2, r7
   b5150:	4640      	mov	r0, r8
   b5152:	f004 fb29 	bl	b97a8 <memcpy>
    m_curPosition += n;
   b5156:	6963      	ldr	r3, [r4, #20]
   b5158:	443b      	add	r3, r7
    dst += n;
   b515a:	44b8      	add	r8, r7
    m_curPosition += n;
   b515c:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b515e:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b5160:	e791      	b.n	b5086 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b5162:	7822      	ldrb	r2, [r4, #0]
   b5164:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b5166:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b516a:	d406      	bmi.n	b517a <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b516c:	7902      	ldrb	r2, [r0, #4]
   b516e:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b5172:	b2d2      	uxtb	r2, r2
   b5174:	4592      	cmp	sl, r2
   b5176:	bf28      	it	cs
   b5178:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b517a:	4299      	cmp	r1, r3
      n = 512*nb;
   b517c:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5180:	d208      	bcs.n	b5194 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b5182:	68a0      	ldr	r0, [r4, #8]
   b5184:	4653      	mov	r3, sl
   b5186:	6800      	ldr	r0, [r0, #0]
   b5188:	4642      	mov	r2, r8
   b518a:	f000 fda7 	bl	b5cdc <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b518e:	2800      	cmp	r0, #0
   b5190:	d1e1      	bne.n	b5156 <_ZN7FatFile4readEPvj+0x100>
   b5192:	e7c6      	b.n	b5122 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5194:	4453      	add	r3, sl
   b5196:	428b      	cmp	r3, r1
   b5198:	d9f3      	bls.n	b5182 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b519a:	3024      	adds	r0, #36	; 0x24
   b519c:	9101      	str	r1, [sp, #4]
   b519e:	f000 fa49 	bl	b5634 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b51a2:	9901      	ldr	r1, [sp, #4]
   b51a4:	2800      	cmp	r0, #0
   b51a6:	d1ec      	bne.n	b5182 <_ZN7FatFile4readEPvj+0x12c>
   b51a8:	e7bb      	b.n	b5122 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b51aa:	1ba8      	subs	r0, r5, r6
}
   b51ac:	b003      	add	sp, #12
   b51ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b51b2 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b51b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b51b4:	2201      	movs	r2, #1
   b51b6:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b51ba:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b51be:	4604      	mov	r4, r0
   b51c0:	f7ff ff49 	bl	b5056 <_ZN7FatFile4readEPvj>
   b51c4:	2801      	cmp	r0, #1
   b51c6:	bf0a      	itet	eq
   b51c8:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b51cc:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b51d0:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b51d4:	b002      	add	sp, #8
   b51d6:	bd70      	pop	{r4, r5, r6, pc}

000b51d8 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b51d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b51da:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b51dc:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b51e0:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b51e2:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b51e6:	d000      	beq.n	b51ea <_ZN7FatFile12readDirCacheEb+0x12>
   b51e8:	b999      	cbnz	r1, b5212 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b51ea:	2201      	movs	r2, #1
   b51ec:	f10d 0107 	add.w	r1, sp, #7
   b51f0:	4620      	mov	r0, r4
   b51f2:	f7ff ff30 	bl	b5056 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b51f6:	b240      	sxtb	r0, r0
   b51f8:	2801      	cmp	r0, #1
   b51fa:	d002      	beq.n	b5202 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b51fc:	2000      	movs	r0, #0
}
   b51fe:	b003      	add	sp, #12
   b5200:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b5202:	6963      	ldr	r3, [r4, #20]
   b5204:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b5206:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b5208:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b520a:	3030      	adds	r0, #48	; 0x30
   b520c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b5210:	e7f5      	b.n	b51fe <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b5212:	3320      	adds	r3, #32
   b5214:	e7f7      	b.n	b5206 <_ZN7FatFile12readDirCacheEb+0x2e>

000b5216 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b5216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b521a:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b521c:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b521e:	4604      	mov	r4, r0
   b5220:	460d      	mov	r5, r1
  if (!isOpen()) {
   b5222:	b162      	cbz	r2, b523e <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b5224:	6940      	ldr	r0, [r0, #20]
   b5226:	4288      	cmp	r0, r1
   b5228:	d002      	beq.n	b5230 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b522a:	b919      	cbnz	r1, b5234 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b522c:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b522e:	6165      	str	r5, [r4, #20]
    return true;
   b5230:	2001      	movs	r0, #1
   b5232:	e006      	b.n	b5242 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b5234:	0716      	lsls	r6, r2, #28
   b5236:	d506      	bpl.n	b5246 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b5238:	69e3      	ldr	r3, [r4, #28]
   b523a:	428b      	cmp	r3, r1
   b523c:	d20b      	bcs.n	b5256 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b523e:	6127      	str	r7, [r4, #16]
  return false;
   b5240:	2000      	movs	r0, #0
}
   b5242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b5246:	0691      	lsls	r1, r2, #26
   b5248:	d505      	bpl.n	b5256 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b524a:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b524c:	891b      	ldrh	r3, [r3, #8]
   b524e:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b5252:	d9ec      	bls.n	b522e <_ZN7FatFile7seekSetEm+0x18>
   b5254:	e7f3      	b.n	b523e <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b5256:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b525a:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b525e:	1e43      	subs	r3, r0, #1
   b5260:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b5264:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b5266:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b5268:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b526a:	42b3      	cmp	r3, r6
   b526c:	d800      	bhi.n	b5270 <_ZN7FatFile7seekSetEm+0x5a>
   b526e:	b998      	cbnz	r0, b5298 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b5270:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b5272:	bf4c      	ite	mi
   b5274:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b5278:	6a23      	ldrpl	r3, [r4, #32]
   b527a:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b527c:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b5280:	2e00      	cmp	r6, #0
   b5282:	d0d4      	beq.n	b522e <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b5284:	6921      	ldr	r1, [r4, #16]
   b5286:	68a0      	ldr	r0, [r4, #8]
   b5288:	4642      	mov	r2, r8
   b528a:	f000 fa24 	bl	b56d6 <_ZN9FatVolume6fatGetEmPm>
   b528e:	2800      	cmp	r0, #0
   b5290:	f106 36ff 	add.w	r6, r6, #4294967295
   b5294:	dcf4      	bgt.n	b5280 <_ZN7FatFile7seekSetEm+0x6a>
   b5296:	e7d2      	b.n	b523e <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b5298:	1af6      	subs	r6, r6, r3
   b529a:	e7ef      	b.n	b527c <_ZN7FatFile7seekSetEm+0x66>

000b529c <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b529e:	460f      	mov	r7, r1
   b52a0:	4604      	mov	r4, r0
   b52a2:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b52a4:	2100      	movs	r1, #0
   b52a6:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b52a8:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b52aa:	f004 faa5 	bl	b97f8 <memset>
  m_vol = dirFile->m_vol;
   b52ae:	68b8      	ldr	r0, [r7, #8]
   b52b0:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b52b2:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b52b4:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b52b8:	6a3b      	ldr	r3, [r7, #32]
   b52ba:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b52bc:	016a      	lsls	r2, r5, #5
   b52be:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b52c2:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b52c6:	071f      	lsls	r7, r3, #28
   b52c8:	d444      	bmi.n	b5354 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b52ca:	f003 0317 	and.w	r3, r3, #23
   b52ce:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b52d0:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b52d4:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b52d8:	bf04      	itt	eq
   b52da:	f043 0308 	orreq.w	r3, r3, #8
   b52de:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b52e0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b52e4:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b52e6:	f006 0303 	and.w	r3, r6, #3
   b52ea:	2b01      	cmp	r3, #1
   b52ec:	d02c      	beq.n	b5348 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b52ee:	2b02      	cmp	r3, #2
   b52f0:	d028      	beq.n	b5344 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b52f2:	bb7b      	cbnz	r3, b5354 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b52f4:	0571      	lsls	r1, r6, #21
   b52f6:	d42d      	bmi.n	b5354 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b52f8:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b52fa:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b52fc:	78a1      	ldrb	r1, [r4, #2]
   b52fe:	078b      	lsls	r3, r1, #30
   b5300:	d504      	bpl.n	b530c <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b5302:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b5304:	06df      	lsls	r7, r3, #27
   b5306:	d425      	bmi.n	b5354 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b5308:	07dd      	lsls	r5, r3, #31
   b530a:	d423      	bmi.n	b5354 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b530c:	11b3      	asrs	r3, r6, #6
   b530e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b5312:	f006 0508 	and.w	r5, r6, #8
   b5316:	432b      	orrs	r3, r5
   b5318:	430b      	orrs	r3, r1
   b531a:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b531c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b531e:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b5320:	1883      	adds	r3, r0, r2
   b5322:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b5326:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b532a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b532e:	0572      	lsls	r2, r6, #21
   b5330:	d513      	bpl.n	b535a <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b5332:	b959      	cbnz	r1, b534c <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b5334:	78a3      	ldrb	r3, [r4, #2]
   b5336:	f043 0304 	orr.w	r3, r3, #4
   b533a:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b533c:	0473      	lsls	r3, r6, #17
   b533e:	d410      	bmi.n	b5362 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b5340:	2001      	movs	r0, #1
}
   b5342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b5344:	2303      	movs	r3, #3
   b5346:	e7d8      	b.n	b52fa <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b5348:	2302      	movs	r3, #2
   b534a:	e7d6      	b.n	b52fa <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b534c:	f000 fa63 	bl	b5816 <_ZN9FatVolume9freeChainEm>
   b5350:	2800      	cmp	r0, #0
   b5352:	d1ef      	bne.n	b5334 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b5354:	2000      	movs	r0, #0
   b5356:	7020      	strb	r0, [r4, #0]
  return false;
   b5358:	e7f3      	b.n	b5342 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b535a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b535c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b535e:	61e3      	str	r3, [r4, #28]
   b5360:	e7ec      	b.n	b533c <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b5362:	69e1      	ldr	r1, [r4, #28]
   b5364:	4620      	mov	r0, r4
   b5366:	f7ff ff56 	bl	b5216 <_ZN7FatFile7seekSetEm>
   b536a:	2800      	cmp	r0, #0
   b536c:	d1e8      	bne.n	b5340 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b536e:	e7f1      	b.n	b5354 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b5370 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b5370:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b5372:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b5374:	4604      	mov	r4, r0
  if (!isOpen()) {
   b5376:	b90b      	cbnz	r3, b537c <_ZN7FatFile4syncEv+0xc>
    return true;
   b5378:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b537a:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b537c:	7883      	ldrb	r3, [r0, #2]
   b537e:	075a      	lsls	r2, r3, #29
   b5380:	d523      	bpl.n	b53ca <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b5382:	2101      	movs	r1, #1
   b5384:	f7ff fe52 	bl	b502c <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5388:	4605      	mov	r5, r0
   b538a:	b928      	cbnz	r0, b5398 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b538c:	7863      	ldrb	r3, [r4, #1]
   b538e:	f043 0301 	orr.w	r3, r3, #1
   b5392:	7063      	strb	r3, [r4, #1]
  return false;
   b5394:	2000      	movs	r0, #0
   b5396:	e7f0      	b.n	b537a <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5398:	7803      	ldrb	r3, [r0, #0]
   b539a:	2be5      	cmp	r3, #229	; 0xe5
   b539c:	d0f6      	beq.n	b538c <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b539e:	7823      	ldrb	r3, [r4, #0]
   b53a0:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b53a2:	bf44      	itt	mi
   b53a4:	69e3      	ldrmi	r3, [r4, #28]
   b53a6:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b53a8:	6a23      	ldr	r3, [r4, #32]
   b53aa:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b53ac:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b53ae:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b53b0:	4b09      	ldr	r3, [pc, #36]	; (b53d8 <_ZN7FatFile4syncEv+0x68>)
   b53b2:	681b      	ldr	r3, [r3, #0]
   b53b4:	b12b      	cbz	r3, b53c2 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b53b6:	f100 0116 	add.w	r1, r0, #22
   b53ba:	3018      	adds	r0, #24
   b53bc:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b53be:	8b2b      	ldrh	r3, [r5, #24]
   b53c0:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b53c2:	78a3      	ldrb	r3, [r4, #2]
   b53c4:	f023 0304 	bic.w	r3, r3, #4
   b53c8:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b53ca:	68a0      	ldr	r0, [r4, #8]
   b53cc:	f7ff faca 	bl	b4964 <_ZN9FatVolume9cacheSyncEv>
   b53d0:	2800      	cmp	r0, #0
   b53d2:	d0db      	beq.n	b538c <_ZN7FatFile4syncEv+0x1c>
   b53d4:	e7d0      	b.n	b5378 <_ZN7FatFile4syncEv+0x8>
   b53d6:	bf00      	nop
   b53d8:	2003e640 	.word	0x2003e640

000b53dc <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b53dc:	b510      	push	{r4, lr}
   b53de:	4604      	mov	r4, r0
  bool rtn = sync();
   b53e0:	f7ff ffc6 	bl	b5370 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b53e4:	2300      	movs	r3, #0
   b53e6:	7023      	strb	r3, [r4, #0]
}
   b53e8:	bd10      	pop	{r4, pc}

000b53ea <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b53ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   b53ec:	b093      	sub	sp, #76	; 0x4c
   b53ee:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b53f0:	2300      	movs	r3, #0
   b53f2:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b53f4:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b53f6:	9201      	str	r2, [sp, #4]
   b53f8:	4606      	mov	r6, r0
   b53fa:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b53fc:	b113      	cbz	r3, b5404 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b53fe:	2000      	movs	r0, #0
}
   b5400:	b013      	add	sp, #76	; 0x4c
   b5402:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b5404:	780b      	ldrb	r3, [r1, #0]
   b5406:	f013 0f70 	tst.w	r3, #112	; 0x70
   b540a:	d0f8      	beq.n	b53fe <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b540c:	7813      	ldrb	r3, [r2, #0]
   b540e:	2b2f      	cmp	r3, #47	; 0x2f
   b5410:	d112      	bne.n	b5438 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b5412:	9a01      	ldr	r2, [sp, #4]
   b5414:	7813      	ldrb	r3, [r2, #0]
   b5416:	2b2f      	cmp	r3, #47	; 0x2f
   b5418:	d102      	bne.n	b5420 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b541a:	3201      	adds	r2, #1
   b541c:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b541e:	e7f8      	b.n	b5412 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b5420:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b5422:	b91b      	cbnz	r3, b542c <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b5424:	4630      	mov	r0, r6
   b5426:	f7ff fe10 	bl	b504a <_ZN7FatFile8openRootEP9FatVolume>
   b542a:	e7e9      	b.n	b5400 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b542c:	a809      	add	r0, sp, #36	; 0x24
   b542e:	f7ff fd9f 	bl	b4f70 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b5432:	2800      	cmp	r0, #0
   b5434:	d0e3      	beq.n	b53fe <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b5436:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b5438:	9801      	ldr	r0, [sp, #4]
   b543a:	aa01      	add	r2, sp, #4
   b543c:	a903      	add	r1, sp, #12
   b543e:	f7ff faad 	bl	b499c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b5442:	2800      	cmp	r0, #0
   b5444:	d0db      	beq.n	b53fe <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b5446:	9b01      	ldr	r3, [sp, #4]
   b5448:	781b      	ldrb	r3, [r3, #0]
   b544a:	b19b      	cbz	r3, b5474 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b544c:	2300      	movs	r3, #0
   b544e:	aa03      	add	r2, sp, #12
   b5450:	4621      	mov	r1, r4
   b5452:	4630      	mov	r0, r6
   b5454:	f7ff fbd4 	bl	b4c00 <_ZN7FatFile4openEPS_P7fname_ti>
   b5458:	2800      	cmp	r0, #0
   b545a:	d0d0      	beq.n	b53fe <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b545c:	4635      	mov	r5, r6
   b545e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5460:	ac09      	add	r4, sp, #36	; 0x24
   b5462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5468:	682b      	ldr	r3, [r5, #0]
   b546a:	6023      	str	r3, [r4, #0]
    close();
   b546c:	4630      	mov	r0, r6
   b546e:	f7ff ffb5 	bl	b53dc <_ZN7FatFile5closeEv>
  while (1) {
   b5472:	e7e0      	b.n	b5436 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b5474:	463b      	mov	r3, r7
   b5476:	aa03      	add	r2, sp, #12
   b5478:	4621      	mov	r1, r4
   b547a:	4630      	mov	r0, r6
   b547c:	f7ff fbc0 	bl	b4c00 <_ZN7FatFile4openEPS_P7fname_ti>
   b5480:	e7be      	b.n	b5400 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b5484 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b5484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5488:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b548a:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b548c:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b548e:	4604      	mov	r4, r0
   b5490:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5492:	d55b      	bpl.n	b554c <_ZN7FatFile5writeEPKvj+0xc8>
   b5494:	7883      	ldrb	r3, [r0, #2]
   b5496:	079a      	lsls	r2, r3, #30
   b5498:	d558      	bpl.n	b554c <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b549a:	071b      	lsls	r3, r3, #28
   b549c:	d451      	bmi.n	b5542 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b549e:	6963      	ldr	r3, [r4, #20]
   b54a0:	43db      	mvns	r3, r3
   b54a2:	42bb      	cmp	r3, r7
   b54a4:	d352      	bcc.n	b554c <_ZN7FatFile5writeEPKvj+0xc8>
   b54a6:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b54a8:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b54ac:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b54ae:	f1b8 0f00 	cmp.w	r8, #0
   b54b2:	f000 8091 	beq.w	b55d8 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b54b6:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b54b8:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b54ba:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b54be:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b54c2:	d10e      	bne.n	b54e2 <_ZN7FatFile5writeEPKvj+0x5e>
   b54c4:	b96d      	cbnz	r5, b54e2 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b54c6:	6921      	ldr	r1, [r4, #16]
   b54c8:	2900      	cmp	r1, #0
   b54ca:	d046      	beq.n	b555a <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b54cc:	4652      	mov	r2, sl
   b54ce:	f000 f902 	bl	b56d6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b54d2:	2800      	cmp	r0, #0
   b54d4:	db3a      	blt.n	b554c <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b54d6:	d104      	bne.n	b54e2 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b54d8:	4620      	mov	r0, r4
   b54da:	f7ff fd5f 	bl	b4f9c <_ZN7FatFile10addClusterEv>
   b54de:	2800      	cmp	r0, #0
   b54e0:	d034      	beq.n	b554c <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b54e2:	6921      	ldr	r1, [r4, #16]
   b54e4:	68a0      	ldr	r0, [r4, #8]
   b54e6:	f000 f8f0 	bl	b56ca <_ZNK9FatVolume17clusterFirstBlockEm>
   b54ea:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b54ec:	68a0      	ldr	r0, [r4, #8]
   b54ee:	b915      	cbnz	r5, b54f6 <_ZN7FatFile5writeEPKvj+0x72>
   b54f0:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b54f4:	d23f      	bcs.n	b5576 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b54f6:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b54fa:	4546      	cmp	r6, r8
   b54fc:	bf28      	it	cs
   b54fe:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b5500:	2d00      	cmp	r5, #0
   b5502:	d136      	bne.n	b5572 <_ZN7FatFile5writeEPKvj+0xee>
   b5504:	6962      	ldr	r2, [r4, #20]
   b5506:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b5508:	429a      	cmp	r2, r3
   b550a:	bf34      	ite	cc
   b550c:	2201      	movcc	r2, #1
   b550e:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b5510:	3024      	adds	r0, #36	; 0x24
   b5512:	f000 f8b7 	bl	b5684 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b5516:	b1c8      	cbz	r0, b554c <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b5518:	4428      	add	r0, r5
   b551a:	4632      	mov	r2, r6
   b551c:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b551e:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b5520:	f004 f942 	bl	b97a8 <memcpy>
      if (512 == (n + blockOffset)) {
   b5524:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b5528:	d104      	bne.n	b5534 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b552a:	68a0      	ldr	r0, [r4, #8]
   b552c:	3024      	adds	r0, #36	; 0x24
   b552e:	f000 f881 	bl	b5634 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b5532:	b158      	cbz	r0, b554c <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b5534:	6963      	ldr	r3, [r4, #20]
   b5536:	4433      	add	r3, r6
   b5538:	6163      	str	r3, [r4, #20]
    src += n;
   b553a:	44b1      	add	r9, r6
    nToWrite -= n;
   b553c:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b5540:	e7b4      	b.n	b54ac <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b5542:	69c1      	ldr	r1, [r0, #28]
   b5544:	f7ff fe67 	bl	b5216 <_ZN7FatFile7seekSetEm>
   b5548:	2800      	cmp	r0, #0
   b554a:	d1a8      	bne.n	b549e <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b554c:	7863      	ldrb	r3, [r4, #1]
   b554e:	f043 0301 	orr.w	r3, r3, #1
   b5552:	7063      	strb	r3, [r4, #1]
  return -1;
   b5554:	f04f 30ff 	mov.w	r0, #4294967295
   b5558:	e050      	b.n	b55fc <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b555a:	6a23      	ldr	r3, [r4, #32]
   b555c:	b93b      	cbnz	r3, b556e <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b555e:	4620      	mov	r0, r4
   b5560:	f7ff fd1c 	bl	b4f9c <_ZN7FatFile10addClusterEv>
   b5564:	2800      	cmp	r0, #0
   b5566:	d0f1      	beq.n	b554c <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b5568:	6923      	ldr	r3, [r4, #16]
   b556a:	6223      	str	r3, [r4, #32]
   b556c:	e7b9      	b.n	b54e2 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b556e:	6123      	str	r3, [r4, #16]
   b5570:	e7b7      	b.n	b54e2 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b5572:	2201      	movs	r2, #1
   b5574:	e7cc      	b.n	b5510 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b5576:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b557a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b557c:	d31b      	bcc.n	b55b6 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b557e:	f890 c004 	ldrb.w	ip, [r0, #4]
   b5582:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b5586:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b5588:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b558c:	4573      	cmp	r3, lr
   b558e:	bf28      	it	cs
   b5590:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5592:	4291      	cmp	r1, r2
      n = 512*nb;
   b5594:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5598:	d307      	bcc.n	b55aa <_ZN7FatFile5writeEPKvj+0x126>
   b559a:	441a      	add	r2, r3
   b559c:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b559e:	bf82      	ittt	hi
   b55a0:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b55a4:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b55a8:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b55aa:	68a5      	ldr	r5, [r4, #8]
   b55ac:	464a      	mov	r2, r9
   b55ae:	6828      	ldr	r0, [r5, #0]
   b55b0:	f000 fc4b 	bl	b5e4a <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b55b4:	e7bd      	b.n	b5532 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b55b6:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b55b8:	bf02      	ittt	eq
   b55ba:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b55be:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b55c2:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b55c4:	68a3      	ldr	r3, [r4, #8]
   b55c6:	464a      	mov	r2, r9
   b55c8:	6818      	ldr	r0, [r3, #0]
   b55ca:	f000 fbc8 	bl	b5d5e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b55ce:	2800      	cmp	r0, #0
   b55d0:	d0bc      	beq.n	b554c <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b55d2:	f44f 7600 	mov.w	r6, #512	; 0x200
   b55d6:	e7ad      	b.n	b5534 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b55d8:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b55da:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b55dc:	42b2      	cmp	r2, r6
   b55de:	d204      	bcs.n	b55ea <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b55e0:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b55e2:	f043 0304 	orr.w	r3, r3, #4
   b55e6:	70a3      	strb	r3, [r4, #2]
   b55e8:	e003      	b.n	b55f2 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b55ea:	4a08      	ldr	r2, [pc, #32]	; (b560c <_ZN7FatFile5writeEPKvj+0x188>)
   b55ec:	6812      	ldr	r2, [r2, #0]
   b55ee:	2a00      	cmp	r2, #0
   b55f0:	d1f7      	bne.n	b55e2 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b55f2:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b55f6:	2b00      	cmp	r3, #0
   b55f8:	db02      	blt.n	b5600 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b55fa:	4638      	mov	r0, r7
}
   b55fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b5600:	4620      	mov	r0, r4
   b5602:	f7ff feb5 	bl	b5370 <_ZN7FatFile4syncEv>
   b5606:	2800      	cmp	r0, #0
   b5608:	d1f7      	bne.n	b55fa <_ZN7FatFile5writeEPKvj+0x176>
   b560a:	e79f      	b.n	b554c <_ZN7FatFile5writeEPKvj+0xc8>
   b560c:	2003e640 	.word	0x2003e640

000b5610 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5610:	b513      	push	{r0, r1, r4, lr}
   b5612:	4604      	mov	r4, r0
    }
   b5614:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5616:	b159      	cbz	r1, b5630 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5618:	9101      	str	r1, [sp, #4]
   b561a:	f004 f96a 	bl	b98f2 <strlen>
   b561e:	6823      	ldr	r3, [r4, #0]
   b5620:	9901      	ldr	r1, [sp, #4]
   b5622:	68db      	ldr	r3, [r3, #12]
   b5624:	4602      	mov	r2, r0
   b5626:	4620      	mov	r0, r4
    }
   b5628:	b002      	add	sp, #8
   b562a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b562e:	4718      	bx	r3
    }
   b5630:	b002      	add	sp, #8
   b5632:	bd10      	pop	{r4, pc}

000b5634 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b5634:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b5636:	7803      	ldrb	r3, [r0, #0]
   b5638:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b563a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b563c:	d520      	bpl.n	b5680 <_ZN8FatCache4syncEv+0x4c>
   b563e:	6843      	ldr	r3, [r0, #4]
   b5640:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b5642:	f100 020c 	add.w	r2, r0, #12
   b5646:	6818      	ldr	r0, [r3, #0]
   b5648:	9201      	str	r2, [sp, #4]
   b564a:	f000 fb88 	bl	b5d5e <_ZN9SdSpiCard10writeBlockEmPKh>
   b564e:	9a01      	ldr	r2, [sp, #4]
   b5650:	4605      	mov	r5, r0
   b5652:	b918      	cbnz	r0, b565c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b5654:	2500      	movs	r5, #0
}
   b5656:	4628      	mov	r0, r5
   b5658:	b003      	add	sp, #12
   b565a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b565c:	7823      	ldrb	r3, [r4, #0]
   b565e:	079b      	lsls	r3, r3, #30
   b5660:	d404      	bmi.n	b566c <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b5662:	7823      	ldrb	r3, [r4, #0]
   b5664:	f023 0301 	bic.w	r3, r3, #1
   b5668:	7023      	strb	r3, [r4, #0]
   b566a:	e7f4      	b.n	b5656 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b566c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b5670:	6919      	ldr	r1, [r3, #16]
   b5672:	4401      	add	r1, r0
   b5674:	6818      	ldr	r0, [r3, #0]
   b5676:	f000 fb72 	bl	b5d5e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b567a:	2800      	cmp	r0, #0
   b567c:	d1f1      	bne.n	b5662 <_ZN8FatCache4syncEv+0x2e>
   b567e:	e7e9      	b.n	b5654 <_ZN8FatCache4syncEv+0x20>
  return true;
   b5680:	2501      	movs	r5, #1
   b5682:	e7e8      	b.n	b5656 <_ZN8FatCache4syncEv+0x22>

000b5684 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b5684:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b5686:	6883      	ldr	r3, [r0, #8]
   b5688:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b568a:	4604      	mov	r4, r0
   b568c:	460e      	mov	r6, r1
   b568e:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b5690:	d009      	beq.n	b56a6 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b5692:	f7ff ffcf 	bl	b5634 <_ZN8FatCache4syncEv>
   b5696:	b908      	cbnz	r0, b569c <_ZN8FatCache4readEmh+0x18>
  return 0;
   b5698:	2000      	movs	r0, #0
}
   b569a:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b569c:	076b      	lsls	r3, r5, #29
   b569e:	d50a      	bpl.n	b56b6 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b56a0:	2300      	movs	r3, #0
   b56a2:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b56a4:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b56a6:	7822      	ldrb	r2, [r4, #0]
   b56a8:	f005 0503 	and.w	r5, r5, #3
   b56ac:	4620      	mov	r0, r4
   b56ae:	4315      	orrs	r5, r2
   b56b0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b56b4:	e7f1      	b.n	b569a <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b56b6:	6863      	ldr	r3, [r4, #4]
   b56b8:	f104 020c 	add.w	r2, r4, #12
   b56bc:	6818      	ldr	r0, [r3, #0]
   b56be:	4631      	mov	r1, r6
   b56c0:	f000 fac4 	bl	b5c4c <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b56c4:	2800      	cmp	r0, #0
   b56c6:	d1eb      	bne.n	b56a0 <_ZN8FatCache4readEmh+0x1c>
   b56c8:	e7e6      	b.n	b5698 <_ZN8FatCache4readEmh+0x14>

000b56ca <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b56ca:	7983      	ldrb	r3, [r0, #6]
   b56cc:	6940      	ldr	r0, [r0, #20]
   b56ce:	3902      	subs	r1, #2
   b56d0:	4099      	lsls	r1, r3
}
   b56d2:	4408      	add	r0, r1
   b56d4:	4770      	bx	lr

000b56d6 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b56d6:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b56d8:	b570      	push	{r4, r5, r6, lr}
   b56da:	4605      	mov	r5, r0
   b56dc:	460c      	mov	r4, r1
   b56de:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b56e0:	d802      	bhi.n	b56e8 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b56e2:	f04f 30ff 	mov.w	r0, #4294967295
}
   b56e6:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b56e8:	69c3      	ldr	r3, [r0, #28]
   b56ea:	428b      	cmp	r3, r1
   b56ec:	d3f9      	bcc.n	b56e2 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b56ee:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b56f0:	2b20      	cmp	r3, #32
   b56f2:	d116      	bne.n	b5722 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b56f4:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b56f6:	2202      	movs	r2, #2
   b56f8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b56fc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5700:	f7ff ffc0 	bl	b5684 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5704:	2800      	cmp	r0, #0
   b5706:	d0ec      	beq.n	b56e2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b5708:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b570c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b5710:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b5714:	69ea      	ldr	r2, [r5, #28]
   b5716:	429a      	cmp	r2, r3
  *value = next;
   b5718:	bf26      	itte	cs
   b571a:	6033      	strcs	r3, [r6, #0]
  return 1;
   b571c:	2001      	movcs	r0, #1
    return 0;
   b571e:	2000      	movcc	r0, #0
   b5720:	e7e1      	b.n	b56e6 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b5722:	2b10      	cmp	r3, #16
   b5724:	d1dd      	bne.n	b56e2 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b5726:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b572a:	6981      	ldr	r1, [r0, #24]
   b572c:	2202      	movs	r2, #2
   b572e:	4419      	add	r1, r3
   b5730:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5734:	f7ff ffa6 	bl	b5684 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5738:	2800      	cmp	r0, #0
   b573a:	d0d2      	beq.n	b56e2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b573c:	b2e4      	uxtb	r4, r4
   b573e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b5742:	e7e7      	b.n	b5714 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b5744 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b5744:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b5746:	b538      	push	{r3, r4, r5, lr}
   b5748:	460c      	mov	r4, r1
   b574a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b574c:	d801      	bhi.n	b5752 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b574e:	2000      	movs	r0, #0
}
   b5750:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b5752:	69c3      	ldr	r3, [r0, #28]
   b5754:	428b      	cmp	r3, r1
   b5756:	d3fa      	bcc.n	b574e <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b5758:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b575a:	2b20      	cmp	r3, #32
   b575c:	d10f      	bne.n	b577e <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b575e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b5760:	2203      	movs	r2, #3
   b5762:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b5766:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b576a:	f7ff ff8b 	bl	b5684 <_ZN8FatCache4readEmh>
    if (!pc) {
   b576e:	2800      	cmp	r0, #0
   b5770:	d0ed      	beq.n	b574e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b5772:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b5776:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b577a:	2001      	movs	r0, #1
   b577c:	e7e8      	b.n	b5750 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b577e:	2b10      	cmp	r3, #16
   b5780:	d1e5      	bne.n	b574e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b5782:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b5786:	6981      	ldr	r1, [r0, #24]
   b5788:	2203      	movs	r2, #3
   b578a:	4419      	add	r1, r3
   b578c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5790:	f7ff ff78 	bl	b5684 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5794:	2800      	cmp	r0, #0
   b5796:	d0da      	beq.n	b574e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b5798:	b2e4      	uxtb	r4, r4
   b579a:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b579e:	e7ec      	b.n	b577a <_ZN9FatVolume6fatPutEmm+0x36>

000b57a0 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b57a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b57a4:	68c4      	ldr	r4, [r0, #12]
   b57a6:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b57a8:	4605      	mov	r5, r0
   b57aa:	460e      	mov	r6, r1
   b57ac:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b57ae:	d301      	bcc.n	b57b4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b57b0:	2701      	movs	r7, #1
   b57b2:	e001      	b.n	b57b8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b57b4:	460c      	mov	r4, r1
    setStart = false;
   b57b6:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b57b8:	69eb      	ldr	r3, [r5, #28]
    find++;
   b57ba:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b57bc:	42a3      	cmp	r3, r4
   b57be:	d202      	bcs.n	b57c6 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b57c0:	b9c7      	cbnz	r7, b57f4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b57c2:	68ec      	ldr	r4, [r5, #12]
   b57c4:	e7f4      	b.n	b57b0 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b57c6:	42a6      	cmp	r6, r4
   b57c8:	d014      	beq.n	b57f4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b57ca:	aa01      	add	r2, sp, #4
   b57cc:	4621      	mov	r1, r4
   b57ce:	4628      	mov	r0, r5
   b57d0:	f7ff ff81 	bl	b56d6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b57d4:	2800      	cmp	r0, #0
   b57d6:	db0d      	blt.n	b57f4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b57d8:	d0ee      	beq.n	b57b8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b57da:	9b01      	ldr	r3, [sp, #4]
   b57dc:	2b00      	cmp	r3, #0
   b57de:	d1eb      	bne.n	b57b8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b57e0:	b107      	cbz	r7, b57e4 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b57e2:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b57e4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b57e8:	4621      	mov	r1, r4
   b57ea:	4628      	mov	r0, r5
   b57ec:	f7ff ffaa 	bl	b5744 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b57f0:	4607      	mov	r7, r0
   b57f2:	b920      	cbnz	r0, b57fe <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b57f4:	2700      	movs	r7, #0
}
   b57f6:	4638      	mov	r0, r7
   b57f8:	b002      	add	sp, #8
   b57fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b57fe:	b916      	cbnz	r6, b5806 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b5800:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b5804:	e7f7      	b.n	b57f6 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b5806:	4622      	mov	r2, r4
   b5808:	4631      	mov	r1, r6
   b580a:	4628      	mov	r0, r5
   b580c:	f7ff ff9a 	bl	b5744 <_ZN9FatVolume6fatPutEmm>
   b5810:	2800      	cmp	r0, #0
   b5812:	d1f5      	bne.n	b5800 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b5814:	e7ee      	b.n	b57f4 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b5816 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b5816:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5818:	4605      	mov	r5, r0
   b581a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b581c:	aa01      	add	r2, sp, #4
   b581e:	4621      	mov	r1, r4
   b5820:	4628      	mov	r0, r5
   b5822:	f7ff ff58 	bl	b56d6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b5826:	1e06      	subs	r6, r0, #0
   b5828:	db10      	blt.n	b584c <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b582a:	2200      	movs	r2, #0
   b582c:	4621      	mov	r1, r4
   b582e:	4628      	mov	r0, r5
   b5830:	f7ff ff88 	bl	b5744 <_ZN9FatVolume6fatPutEmm>
   b5834:	b150      	cbz	r0, b584c <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b5836:	68eb      	ldr	r3, [r5, #12]
   b5838:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b583a:	bf24      	itt	cs
   b583c:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b5840:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b5842:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b5844:	2e00      	cmp	r6, #0
   b5846:	d1e9      	bne.n	b581c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b5848:	b002      	add	sp, #8
   b584a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b584c:	2000      	movs	r0, #0
   b584e:	e7fb      	b.n	b5848 <_ZN9FatVolume9freeChainEm+0x32>

000b5850 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b5850:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b5852:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b5854:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b5856:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b5858:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b585c:	4604      	mov	r4, r0
  m_fatType = 0;
   b585e:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b5860:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b5864:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b5866:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b586a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b586c:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b5870:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b5874:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b5878:	460d      	mov	r5, r1
   b587a:	b1b9      	cbz	r1, b58ac <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b587c:	2904      	cmp	r1, #4
   b587e:	d901      	bls.n	b5884 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b5880:	2000      	movs	r0, #0
}
   b5882:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b5884:	4611      	mov	r1, r2
   b5886:	4630      	mov	r0, r6
   b5888:	f7ff fefc 	bl	b5684 <_ZN8FatCache4readEmh>
    if (!pc) {
   b588c:	2800      	cmp	r0, #0
   b588e:	d0f7      	beq.n	b5880 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b5890:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b5894:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b5898:	065b      	lsls	r3, r3, #25
   b589a:	d1f1      	bne.n	b5880 <_ZN9FatVolume4initEh+0x30>
   b589c:	f105 011b 	add.w	r1, r5, #27
   b58a0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b58a4:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b58a8:	2d00      	cmp	r5, #0
   b58aa:	d0e9      	beq.n	b5880 <_ZN9FatVolume4initEh+0x30>
   b58ac:	2200      	movs	r2, #0
   b58ae:	4629      	mov	r1, r5
   b58b0:	4630      	mov	r0, r6
   b58b2:	f7ff fee7 	bl	b5684 <_ZN8FatCache4readEmh>
  if (!pc) {
   b58b6:	2800      	cmp	r0, #0
   b58b8:	d0e2      	beq.n	b5880 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b58ba:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b58be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b58c2:	d1dd      	bne.n	b5880 <_ZN9FatVolume4initEh+0x30>
   b58c4:	7c03      	ldrb	r3, [r0, #16]
   b58c6:	2b02      	cmp	r3, #2
   b58c8:	d1da      	bne.n	b5880 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b58ca:	89c3      	ldrh	r3, [r0, #14]
   b58cc:	2b00      	cmp	r3, #0
   b58ce:	d0d7      	beq.n	b5880 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b58d0:	7b41      	ldrb	r1, [r0, #13]
   b58d2:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b58d4:	1e4b      	subs	r3, r1, #1
   b58d6:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b58d8:	2300      	movs	r3, #0
   b58da:	71a3      	strb	r3, [r4, #6]
   b58dc:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b58de:	2301      	movs	r3, #1
   b58e0:	4299      	cmp	r1, r3
   b58e2:	d007      	beq.n	b58f4 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b58e4:	3e01      	subs	r6, #1
   b58e6:	d0cb      	beq.n	b5880 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b58e8:	79a2      	ldrb	r2, [r4, #6]
   b58ea:	005b      	lsls	r3, r3, #1
   b58ec:	3201      	adds	r2, #1
   b58ee:	b2db      	uxtb	r3, r3
   b58f0:	71a2      	strb	r2, [r4, #6]
   b58f2:	e7f5      	b.n	b58e0 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b58f4:	8ac1      	ldrh	r1, [r0, #22]
   b58f6:	b901      	cbnz	r1, b58fa <_ZN9FatVolume4initEh+0xaa>
   b58f8:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b58fa:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b58fc:	89c3      	ldrh	r3, [r0, #14]
   b58fe:	442b      	add	r3, r5
   b5900:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b5902:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b5906:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b5908:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b590c:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b590e:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b5912:	0149      	lsls	r1, r1, #5
   b5914:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b5918:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b591c:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b591e:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b5922:	b902      	cbnz	r2, b5926 <_ZN9FatVolume4initEh+0xd6>
   b5924:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b5926:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b5928:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b592a:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b592c:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b592e:	1c4b      	adds	r3, r1, #1
   b5930:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b5932:	f640 73f4 	movw	r3, #4084	; 0xff4
   b5936:	4299      	cmp	r1, r3
   b5938:	d802      	bhi.n	b5940 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b593a:	230c      	movs	r3, #12
   b593c:	71e3      	strb	r3, [r4, #7]
   b593e:	e79f      	b.n	b5880 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b5940:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b5944:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b5946:	bf85      	ittet	hi
   b5948:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b594a:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b594c:	2310      	movls	r3, #16
    m_fatType = 32;
   b594e:	2320      	movhi	r3, #32
   b5950:	71e3      	strb	r3, [r4, #7]
  return true;
   b5952:	2001      	movs	r0, #1
   b5954:	e795      	b.n	b5882 <_ZN9FatVolume4initEh+0x32>

000b5956 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b5956:	f000 bacb 	b.w	b5ef0 <_ZN14SdSpiAltDriver4sendEh>

000b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b595a:	f000 baae 	b.w	b5eba <_ZN14SdSpiAltDriver7receiveEv>
	...

000b5960 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b5960:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b5962:	4e0e      	ldr	r6, [pc, #56]	; (b599c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b5964:	460d      	mov	r5, r1
   b5966:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5968:	f000 fb22 	bl	b5fb0 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b596c:	6833      	ldr	r3, [r6, #0]
   b596e:	1ac0      	subs	r0, r0, r3
   b5970:	4b0b      	ldr	r3, [pc, #44]	; (b59a0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b5972:	4298      	cmp	r0, r3
   b5974:	d908      	bls.n	b5988 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5976:	f000 fb23 	bl	b5fc0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b597a:	4b0a      	ldr	r3, [pc, #40]	; (b59a4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b597c:	6018      	str	r0, [r3, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
   b597e:	f000 fd87 	bl	b6490 <spark_process>
   b5982:	f000 fb15 	bl	b5fb0 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b5986:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5988:	f000 fb1a 	bl	b5fc0 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b598c:	b280      	uxth	r0, r0
   b598e:	1b40      	subs	r0, r0, r5
}
   b5990:	42a0      	cmp	r0, r4
   b5992:	bfd4      	ite	le
   b5994:	2000      	movle	r0, #0
   b5996:	2001      	movgt	r0, #1
   b5998:	bd70      	pop	{r4, r5, r6, pc}
   b599a:	bf00      	nop
   b599c:	2003e648 	.word	0x2003e648
   b59a0:	000186a0 	.word	0x000186a0
   b59a4:	2003e728 	.word	0x2003e728

000b59a8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b59a8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b59aa:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b59ac:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b59ae:	b94d      	cbnz	r5, b59c4 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b59b0:	6840      	ldr	r0, [r0, #4]
   b59b2:	f000 fa6b 	bl	b5e8c <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b59b6:	6863      	ldr	r3, [r4, #4]
   b59b8:	4629      	mov	r1, r5
   b59ba:	7d18      	ldrb	r0, [r3, #20]
   b59bc:	f003 f9c3 	bl	b8d46 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b59c0:	2301      	movs	r3, #1
   b59c2:	7223      	strb	r3, [r4, #8]
  }
}
   b59c4:	bd38      	pop	{r3, r4, r5, pc}

000b59c6 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b59c6:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b59c8:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b59ca:	4604      	mov	r4, r0
  if (m_spiActive) {
   b59cc:	b16b      	cbz	r3, b59ea <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b59ce:	6843      	ldr	r3, [r0, #4]
   b59d0:	2101      	movs	r1, #1
   b59d2:	7d18      	ldrb	r0, [r3, #20]
   b59d4:	f003 f9b7 	bl	b8d46 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b59d8:	6860      	ldr	r0, [r4, #4]
   b59da:	21ff      	movs	r1, #255	; 0xff
   b59dc:	f7ff ffbb 	bl	b5956 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b59e0:	6860      	ldr	r0, [r4, #4]
   b59e2:	f000 fa67 	bl	b5eb4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b59e6:	2300      	movs	r3, #0
   b59e8:	7223      	strb	r3, [r4, #8]
  }
}
   b59ea:	bd10      	pop	{r4, pc}

000b59ec <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b59ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59ee:	4604      	mov	r4, r0
   b59f0:	460d      	mov	r5, r1
   b59f2:	4616      	mov	r6, r2
   b59f4:	f000 fae4 	bl	b5fc0 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b59f8:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b59fa:	6860      	ldr	r0, [r4, #4]
   b59fc:	f7ff ffad 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5a00:	28ff      	cmp	r0, #255	; 0xff
   b5a02:	7260      	strb	r0, [r4, #9]
   b5a04:	d10e      	bne.n	b5a24 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b5a06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5a0a:	4639      	mov	r1, r7
   b5a0c:	4620      	mov	r0, r4
   b5a0e:	f7ff ffa7 	bl	b5960 <_ZN9SdSpiCard10isTimedOutEtt>
   b5a12:	2800      	cmp	r0, #0
   b5a14:	d0f1      	beq.n	b59fa <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b5a16:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b5a18:	4620      	mov	r0, r4
   b5a1a:	7023      	strb	r3, [r4, #0]
   b5a1c:	f7ff ffd3 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5a20:	2000      	movs	r0, #0
}
   b5a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b5a24:	28fe      	cmp	r0, #254	; 0xfe
   b5a26:	d001      	beq.n	b5a2c <_ZN9SdSpiCard8readDataEPhj+0x40>
   b5a28:	2350      	movs	r3, #80	; 0x50
   b5a2a:	e7f5      	b.n	b5a18 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b5a2c:	6860      	ldr	r0, [r4, #4]
   b5a2e:	4632      	mov	r2, r6
   b5a30:	4629      	mov	r1, r5
   b5a32:	f000 fa47 	bl	b5ec4 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b5a36:	7260      	strb	r0, [r4, #9]
   b5a38:	b108      	cbz	r0, b5a3e <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b5a3a:	2360      	movs	r3, #96	; 0x60
   b5a3c:	e7ec      	b.n	b5a18 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b5a3e:	6860      	ldr	r0, [r4, #4]
   b5a40:	f7ff ff8b 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b5a44:	6860      	ldr	r0, [r4, #4]
   b5a46:	f7ff ff88 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b5a4a:	2001      	movs	r0, #1
   b5a4c:	e7e9      	b.n	b5a22 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b5a4e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b5a4e:	b570      	push	{r4, r5, r6, lr}
   b5a50:	4604      	mov	r4, r0
   b5a52:	460e      	mov	r6, r1
   b5a54:	f000 fab4 	bl	b5fc0 <HAL_Timer_Get_Milli_Seconds>
   b5a58:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b5a5a:	4632      	mov	r2, r6
   b5a5c:	4629      	mov	r1, r5
   b5a5e:	4620      	mov	r0, r4
   b5a60:	f7ff ff7e 	bl	b5960 <_ZN9SdSpiCard10isTimedOutEtt>
   b5a64:	b930      	cbnz	r0, b5a74 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b5a66:	6860      	ldr	r0, [r4, #4]
   b5a68:	f7ff ff77 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5a6c:	28ff      	cmp	r0, #255	; 0xff
   b5a6e:	d1f4      	bne.n	b5a5a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b5a70:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b5a72:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b5a74:	2000      	movs	r0, #0
   b5a76:	e7fc      	b.n	b5a72 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b5a78 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b5a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b5a7a:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b5a7c:	9201      	str	r2, [sp, #4]
   b5a7e:	4604      	mov	r4, r0
   b5a80:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b5a82:	b90b      	cbnz	r3, b5a88 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b5a84:	f7ff ff90 	bl	b59a8 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b5a88:	b125      	cbz	r5, b5a94 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b5a8a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b5a8e:	4620      	mov	r0, r4
   b5a90:	f7ff ffdd 	bl	b5a4e <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b5a94:	6860      	ldr	r0, [r4, #4]
   b5a96:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b5a9a:	f7ff ff5c 	bl	b5956 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b5a9e:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b5aa0:	af01      	add	r7, sp, #4
   b5aa2:	5db9      	ldrb	r1, [r7, r6]
   b5aa4:	6860      	ldr	r0, [r4, #4]
   b5aa6:	f7ff ff56 	bl	b5956 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b5aaa:	3e01      	subs	r6, #1
   b5aac:	d2f9      	bcs.n	b5aa2 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b5aae:	2d00      	cmp	r5, #0
   b5ab0:	6860      	ldr	r0, [r4, #4]
   b5ab2:	bf0c      	ite	eq
   b5ab4:	2195      	moveq	r1, #149	; 0x95
   b5ab6:	2187      	movne	r1, #135	; 0x87
   b5ab8:	f7ff ff4d 	bl	b5956 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b5abc:	6860      	ldr	r0, [r4, #4]
   b5abe:	f7ff ff4c 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5ac2:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b5ac4:	6860      	ldr	r0, [r4, #4]
   b5ac6:	f7ff ff48 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5aca:	0603      	lsls	r3, r0, #24
   b5acc:	7260      	strb	r0, [r4, #9]
   b5ace:	d503      	bpl.n	b5ad8 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b5ad0:	3d01      	subs	r5, #1
   b5ad2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5ad6:	d1f5      	bne.n	b5ac4 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b5ad8:	b003      	add	sp, #12
   b5ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5adc <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b5adc:	b570      	push	{r4, r5, r6, lr}
   b5ade:	4604      	mov	r4, r0
   b5ae0:	460d      	mov	r5, r1
   b5ae2:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b5ae4:	2137      	movs	r1, #55	; 0x37
   b5ae6:	2200      	movs	r2, #0
   b5ae8:	f7ff ffc6 	bl	b5a78 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b5aec:	4632      	mov	r2, r6
   b5aee:	4629      	mov	r1, r5
   b5af0:	4620      	mov	r0, r4
  }
   b5af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b5af6:	f7ff bfbf 	b.w	b5a78 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b5afc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b5afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b5b00:	2500      	movs	r5, #0
   b5b02:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b5b04:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b5b06:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b5b08:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b5b0a:	4604      	mov	r4, r0
   b5b0c:	4690      	mov	r8, r2
   b5b0e:	461e      	mov	r6, r3
   b5b10:	f000 fa56 	bl	b5fc0 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b5b14:	4641      	mov	r1, r8
   b5b16:	4607      	mov	r7, r0
   b5b18:	6860      	ldr	r0, [r4, #4]
   b5b1a:	f000 f9bb 	bl	b5e94 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b5b1e:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b5b20:	4a49      	ldr	r2, [pc, #292]	; (b5c48 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b5b22:	721d      	strb	r5, [r3, #8]
   b5b24:	2501      	movs	r5, #1
   b5b26:	60da      	str	r2, [r3, #12]
   b5b28:	821d      	strh	r5, [r3, #16]
  spiStart();
   b5b2a:	4620      	mov	r0, r4
   b5b2c:	f7ff ff3c 	bl	b59a8 <_ZN9SdSpiCard8spiStartEv>
   b5b30:	6863      	ldr	r3, [r4, #4]
   b5b32:	4629      	mov	r1, r5
   b5b34:	7d18      	ldrb	r0, [r3, #20]
   b5b36:	f003 f906 	bl	b8d46 <digitalWrite>
   b5b3a:	250a      	movs	r5, #10
    spiSend(0XFF);
   b5b3c:	6860      	ldr	r0, [r4, #4]
   b5b3e:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b5b40:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b5b42:	f7ff ff08 	bl	b5956 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b5b46:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5b4a:	d1f7      	bne.n	b5b3c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b5b4c:	6863      	ldr	r3, [r4, #4]
   b5b4e:	4629      	mov	r1, r5
   b5b50:	7d18      	ldrb	r0, [r3, #20]
   b5b52:	f003 f8f8 	bl	b8d46 <digitalWrite>
  }
   b5b56:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b5b58:	2200      	movs	r2, #0
   b5b5a:	4611      	mov	r1, r2
   b5b5c:	4620      	mov	r0, r4
   b5b5e:	f7ff ff8b 	bl	b5a78 <_ZN9SdSpiCard11cardCommandEhm>
   b5b62:	2801      	cmp	r0, #1
   b5b64:	4680      	mov	r8, r0
   b5b66:	d018      	beq.n	b5b9a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b5b68:	3d01      	subs	r5, #1
   b5b6a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5b6e:	d107      	bne.n	b5b80 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b5b70:	2320      	movs	r3, #32
  spiStop();
   b5b72:	4620      	mov	r0, r4
   b5b74:	7023      	strb	r3, [r4, #0]
   b5b76:	f7ff ff26 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5b7a:	2000      	movs	r0, #0
}
   b5b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b5b80:	6860      	ldr	r0, [r4, #4]
   b5b82:	21fd      	movs	r1, #253	; 0xfd
   b5b84:	f7ff fee7 	bl	b5956 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b5b88:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b5b8c:	6860      	ldr	r0, [r4, #4]
   b5b8e:	f7ff fee4 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b5b92:	f1b8 0801 	subs.w	r8, r8, #1
   b5b96:	d1f9      	bne.n	b5b8c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b5b98:	e7de      	b.n	b5b58 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b5b9a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b5b9e:	2108      	movs	r1, #8
   b5ba0:	4620      	mov	r0, r4
   b5ba2:	f7ff ff69 	bl	b5a78 <_ZN9SdSpiCard11cardCommandEhm>
   b5ba6:	2805      	cmp	r0, #5
   b5ba8:	d114      	bne.n	b5bd4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b5baa:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b5bae:	2500      	movs	r5, #0
   b5bb0:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b5bb2:	462a      	mov	r2, r5
   b5bb4:	2129      	movs	r1, #41	; 0x29
   b5bb6:	4620      	mov	r0, r4
   b5bb8:	f7ff ff90 	bl	b5adc <_ZN9SdSpiCard8cardAcmdEhm>
   b5bbc:	4602      	mov	r2, r0
   b5bbe:	b1d8      	cbz	r0, b5bf8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b5bc0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b5bc4:	4639      	mov	r1, r7
   b5bc6:	4620      	mov	r0, r4
   b5bc8:	f7ff feca 	bl	b5960 <_ZN9SdSpiCard10isTimedOutEtt>
   b5bcc:	2800      	cmp	r0, #0
   b5bce:	d0f0      	beq.n	b5bb2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b5bd0:	2343      	movs	r3, #67	; 0x43
   b5bd2:	e7ce      	b.n	b5b72 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b5bd4:	2504      	movs	r5, #4
      m_status = spiReceive();
   b5bd6:	6860      	ldr	r0, [r4, #4]
   b5bd8:	f7ff febf 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b5bdc:	3d01      	subs	r5, #1
   b5bde:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b5be2:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b5be4:	d1f7      	bne.n	b5bd6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b5be6:	28aa      	cmp	r0, #170	; 0xaa
   b5be8:	d104      	bne.n	b5bf4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b5bea:	2302      	movs	r3, #2
   b5bec:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b5bee:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b5bf2:	e7dd      	b.n	b5bb0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b5bf4:	2325      	movs	r3, #37	; 0x25
   b5bf6:	e7bc      	b.n	b5b72 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b5bf8:	7aa3      	ldrb	r3, [r4, #10]
   b5bfa:	2b02      	cmp	r3, #2
   b5bfc:	d118      	bne.n	b5c30 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b5bfe:	213a      	movs	r1, #58	; 0x3a
   b5c00:	4620      	mov	r0, r4
   b5c02:	f7ff ff39 	bl	b5a78 <_ZN9SdSpiCard11cardCommandEhm>
   b5c06:	b108      	cbz	r0, b5c0c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b5c08:	2337      	movs	r3, #55	; 0x37
   b5c0a:	e7b2      	b.n	b5b72 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b5c0c:	6860      	ldr	r0, [r4, #4]
   b5c0e:	f7ff fea4 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5c12:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b5c16:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b5c18:	bf04      	itt	eq
   b5c1a:	2303      	moveq	r3, #3
   b5c1c:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b5c1e:	6860      	ldr	r0, [r4, #4]
   b5c20:	f7ff fe9b 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5c24:	6860      	ldr	r0, [r4, #4]
   b5c26:	f7ff fe98 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5c2a:	6860      	ldr	r0, [r4, #4]
   b5c2c:	f7ff fe95 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b5c30:	4620      	mov	r0, r4
   b5c32:	f7ff fec8 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b5c36:	6863      	ldr	r3, [r4, #4]
   b5c38:	7930      	ldrb	r0, [r6, #4]
   b5c3a:	68b1      	ldr	r1, [r6, #8]
   b5c3c:	89b2      	ldrh	r2, [r6, #12]
   b5c3e:	821a      	strh	r2, [r3, #16]
   b5c40:	7218      	strb	r0, [r3, #8]
   b5c42:	60d9      	str	r1, [r3, #12]
  return true;
   b5c44:	2001      	movs	r0, #1
   b5c46:	e799      	b.n	b5b7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b5c48:	0003d090 	.word	0x0003d090

000b5c4c <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5c4c:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5c4e:	7a83      	ldrb	r3, [r0, #10]
   b5c50:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b5c52:	bf18      	it	ne
   b5c54:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5c56:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b5c58:	460a      	mov	r2, r1
   b5c5a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5c5c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b5c5e:	f7ff ff0b 	bl	b5a78 <_ZN9SdSpiCard11cardCommandEhm>
   b5c62:	b130      	cbz	r0, b5c72 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b5c64:	2330      	movs	r3, #48	; 0x30
   b5c66:	7023      	strb	r3, [r4, #0]
  spiStop();
   b5c68:	4620      	mov	r0, r4
   b5c6a:	f7ff feac 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5c6e:	2500      	movs	r5, #0
   b5c70:	e00b      	b.n	b5c8a <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b5c72:	4629      	mov	r1, r5
   b5c74:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5c78:	4620      	mov	r0, r4
   b5c7a:	f7ff feb7 	bl	b59ec <_ZN9SdSpiCard8readDataEPhj>
   b5c7e:	4605      	mov	r5, r0
   b5c80:	2800      	cmp	r0, #0
   b5c82:	d0f1      	beq.n	b5c68 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b5c84:	4620      	mov	r0, r4
   b5c86:	f7ff fe9e 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
}
   b5c8a:	4628      	mov	r0, r5
   b5c8c:	bd38      	pop	{r3, r4, r5, pc}

000b5c8e <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5c8e:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5c90:	7a83      	ldrb	r3, [r0, #10]
   b5c92:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5c94:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b5c96:	bf18      	it	ne
   b5c98:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b5c9a:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5c9c:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b5c9e:	f7ff feeb 	bl	b5a78 <_ZN9SdSpiCard11cardCommandEhm>
   b5ca2:	b130      	cbz	r0, b5cb2 <_ZN9SdSpiCard9readStartEm+0x24>
   b5ca4:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b5ca6:	4620      	mov	r0, r4
   b5ca8:	7023      	strb	r3, [r4, #0]
   b5caa:	f7ff fe8c 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5cae:	2000      	movs	r0, #0
}
   b5cb0:	bd10      	pop	{r4, pc}
  return true;
   b5cb2:	2001      	movs	r0, #1
   b5cb4:	e7fc      	b.n	b5cb0 <_ZN9SdSpiCard9readStartEm+0x22>

000b5cb6 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b5cb6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b5cb8:	2200      	movs	r2, #0
   b5cba:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b5cbc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b5cbe:	f7ff fedb 	bl	b5a78 <_ZN9SdSpiCard11cardCommandEhm>
   b5cc2:	b130      	cbz	r0, b5cd2 <_ZN9SdSpiCard8readStopEv+0x1c>
   b5cc4:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b5cc6:	4620      	mov	r0, r4
   b5cc8:	7023      	strb	r3, [r4, #0]
   b5cca:	f7ff fe7c 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5cce:	2000      	movs	r0, #0
}
   b5cd0:	bd10      	pop	{r4, pc}
  spiStop();
   b5cd2:	4620      	mov	r0, r4
   b5cd4:	f7ff fe77 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b5cd8:	2001      	movs	r0, #1
   b5cda:	e7f9      	b.n	b5cd0 <_ZN9SdSpiCard8readStopEv+0x1a>

000b5cdc <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b5cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5cde:	4604      	mov	r4, r0
   b5ce0:	4616      	mov	r6, r2
   b5ce2:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b5ce4:	f7ff ffd3 	bl	b5c8e <_ZN9SdSpiCard9readStartEm>
   b5ce8:	b168      	cbz	r0, b5d06 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b5cea:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b5cec:	b2ab      	uxth	r3, r5
   b5cee:	429f      	cmp	r7, r3
   b5cf0:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b5cf4:	d909      	bls.n	b5d0a <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b5cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5cfa:	4620      	mov	r0, r4
   b5cfc:	f7ff fe76 	bl	b59ec <_ZN9SdSpiCard8readDataEPhj>
   b5d00:	3501      	adds	r5, #1
   b5d02:	2800      	cmp	r0, #0
   b5d04:	d1f2      	bne.n	b5cec <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b5d06:	2000      	movs	r0, #0
   b5d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b5d0a:	4620      	mov	r0, r4
}
   b5d0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b5d10:	f7ff bfd1 	b.w	b5cb6 <_ZN9SdSpiCard8readStopEv>

000b5d14 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b5d14:	b538      	push	{r3, r4, r5, lr}
   b5d16:	4604      	mov	r4, r0
   b5d18:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b5d1a:	6840      	ldr	r0, [r0, #4]
   b5d1c:	f7ff fe1b 	bl	b5956 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b5d20:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5d24:	6860      	ldr	r0, [r4, #4]
   b5d26:	4629      	mov	r1, r5
   b5d28:	f000 f8e6 	bl	b5ef8 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b5d2c:	6860      	ldr	r0, [r4, #4]
   b5d2e:	21ff      	movs	r1, #255	; 0xff
   b5d30:	f7ff fe11 	bl	b5956 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b5d34:	6860      	ldr	r0, [r4, #4]
   b5d36:	21ff      	movs	r1, #255	; 0xff
   b5d38:	f7ff fe0d 	bl	b5956 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b5d3c:	6860      	ldr	r0, [r4, #4]
   b5d3e:	f7ff fe0c 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5d42:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b5d44:	f000 001f 	and.w	r0, r0, #31
   b5d48:	2805      	cmp	r0, #5
   b5d4a:	d006      	beq.n	b5d5a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b5d4c:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b5d4e:	4620      	mov	r0, r4
   b5d50:	7023      	strb	r3, [r4, #0]
   b5d52:	f7ff fe38 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5d56:	2000      	movs	r0, #0
}
   b5d58:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b5d5a:	2001      	movs	r0, #1
   b5d5c:	e7fc      	b.n	b5d58 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b5d5e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5d5e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5d60:	7a83      	ldrb	r3, [r0, #10]
   b5d62:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b5d64:	bf18      	it	ne
   b5d66:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5d68:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b5d6a:	460a      	mov	r2, r1
   b5d6c:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5d6e:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b5d70:	f7ff fe82 	bl	b5a78 <_ZN9SdSpiCard11cardCommandEhm>
   b5d74:	4606      	mov	r6, r0
   b5d76:	b130      	cbz	r0, b5d86 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b5d78:	2332      	movs	r3, #50	; 0x32
   b5d7a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b5d7c:	4620      	mov	r0, r4
   b5d7e:	f7ff fe22 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5d82:	2500      	movs	r5, #0
   b5d84:	e01f      	b.n	b5dc6 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b5d86:	462a      	mov	r2, r5
   b5d88:	21fe      	movs	r1, #254	; 0xfe
   b5d8a:	4620      	mov	r0, r4
   b5d8c:	f7ff ffc2 	bl	b5d14 <_ZN9SdSpiCard9writeDataEhPKh>
   b5d90:	2800      	cmp	r0, #0
   b5d92:	d0f3      	beq.n	b5d7c <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5d94:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b5d98:	4620      	mov	r0, r4
   b5d9a:	f7ff fe58 	bl	b5a4e <_ZN9SdSpiCard11waitNotBusyEt>
   b5d9e:	4605      	mov	r5, r0
   b5da0:	b908      	cbnz	r0, b5da6 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b5da2:	235a      	movs	r3, #90	; 0x5a
   b5da4:	e7e9      	b.n	b5d7a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b5da6:	4632      	mov	r2, r6
   b5da8:	210d      	movs	r1, #13
   b5daa:	4620      	mov	r0, r4
   b5dac:	f7ff fe64 	bl	b5a78 <_ZN9SdSpiCard11cardCommandEhm>
   b5db0:	b108      	cbz	r0, b5db6 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b5db2:	2329      	movs	r3, #41	; 0x29
   b5db4:	e7e1      	b.n	b5d7a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b5db6:	6860      	ldr	r0, [r4, #4]
   b5db8:	f7ff fdcf 	bl	b595a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5dbc:	2800      	cmp	r0, #0
   b5dbe:	d1f8      	bne.n	b5db2 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b5dc0:	4620      	mov	r0, r4
   b5dc2:	f7ff fe00 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
}
   b5dc6:	4628      	mov	r0, r5
   b5dc8:	bd70      	pop	{r4, r5, r6, pc}

000b5dca <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b5dca:	b513      	push	{r0, r1, r4, lr}
   b5dcc:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5dce:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b5dd2:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5dd4:	f7ff fe3b 	bl	b5a4e <_ZN9SdSpiCard11waitNotBusyEt>
   b5dd8:	9a01      	ldr	r2, [sp, #4]
   b5dda:	b930      	cbnz	r0, b5dea <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b5ddc:	235b      	movs	r3, #91	; 0x5b
   b5dde:	7023      	strb	r3, [r4, #0]
  spiStop();
   b5de0:	4620      	mov	r0, r4
   b5de2:	f7ff fdf0 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5de6:	2000      	movs	r0, #0
   b5de8:	e005      	b.n	b5df6 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b5dea:	21fc      	movs	r1, #252	; 0xfc
   b5dec:	4620      	mov	r0, r4
   b5dee:	f7ff ff91 	bl	b5d14 <_ZN9SdSpiCard9writeDataEhPKh>
   b5df2:	2800      	cmp	r0, #0
   b5df4:	d0f4      	beq.n	b5de0 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b5df6:	b002      	add	sp, #8
   b5df8:	bd10      	pop	{r4, pc}

000b5dfa <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b5dfa:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b5dfc:	7a83      	ldrb	r3, [r0, #10]
   b5dfe:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b5e00:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b5e02:	bf18      	it	ne
   b5e04:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b5e06:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b5e08:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b5e0a:	f7ff fe35 	bl	b5a78 <_ZN9SdSpiCard11cardCommandEhm>
   b5e0e:	b130      	cbz	r0, b5e1e <_ZN9SdSpiCard10writeStartEm+0x24>
   b5e10:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b5e12:	4620      	mov	r0, r4
   b5e14:	7023      	strb	r3, [r4, #0]
   b5e16:	f7ff fdd6 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5e1a:	2000      	movs	r0, #0
}
   b5e1c:	bd10      	pop	{r4, pc}
  return true;
   b5e1e:	2001      	movs	r0, #1
   b5e20:	e7fc      	b.n	b5e1c <_ZN9SdSpiCard10writeStartEm+0x22>

000b5e22 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b5e22:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5e24:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b5e28:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5e2a:	f7ff fe10 	bl	b5a4e <_ZN9SdSpiCard11waitNotBusyEt>
   b5e2e:	4605      	mov	r5, r0
   b5e30:	b930      	cbnz	r0, b5e40 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b5e32:	2356      	movs	r3, #86	; 0x56
   b5e34:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b5e36:	4620      	mov	r0, r4
   b5e38:	f7ff fdc5 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b5e3c:	4628      	mov	r0, r5
   b5e3e:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b5e40:	6860      	ldr	r0, [r4, #4]
   b5e42:	21fd      	movs	r1, #253	; 0xfd
   b5e44:	f7ff fd87 	bl	b5956 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b5e48:	e7f5      	b.n	b5e36 <_ZN9SdSpiCard9writeStopEv+0x14>

000b5e4a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b5e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e4c:	4604      	mov	r4, r0
   b5e4e:	4616      	mov	r6, r2
   b5e50:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b5e52:	f7ff ffd2 	bl	b5dfa <_ZN9SdSpiCard10writeStartEm>
   b5e56:	b170      	cbz	r0, b5e76 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b5e58:	2500      	movs	r5, #0
   b5e5a:	42bd      	cmp	r5, r7
   b5e5c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b5e60:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b5e62:	d004      	beq.n	b5e6e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b5e64:	f7ff ffb1 	bl	b5dca <_ZN9SdSpiCard9writeDataEPKh>
   b5e68:	b128      	cbz	r0, b5e76 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b5e6a:	3501      	adds	r5, #1
   b5e6c:	e7f5      	b.n	b5e5a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b5e6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b5e72:	f7ff bfd6 	b.w	b5e22 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b5e76:	4620      	mov	r0, r4
   b5e78:	f7ff fda5 	bl	b59c6 <_ZN9SdSpiCard7spiStopEv>
}
   b5e7c:	2000      	movs	r0, #0
   b5e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e80 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b5e80:	4b01      	ldr	r3, [pc, #4]	; (b5e88 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b5e82:	2201      	movs	r2, #1
   b5e84:	701a      	strb	r2, [r3, #0]
}
   b5e86:	4770      	bx	lr
   b5e88:	2003e64c 	.word	0x2003e64c

000b5e8c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b5e8c:	1d01      	adds	r1, r0, #4
   b5e8e:	6800      	ldr	r0, [r0, #0]
   b5e90:	f000 bbfa 	b.w	b6688 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b5e94 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b5e94:	b510      	push	{r4, lr}
   b5e96:	4604      	mov	r4, r0
  m_csPin = csPin;
   b5e98:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b5e9a:	6800      	ldr	r0, [r0, #0]
   b5e9c:	f000 fbc6 	bl	b662c <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b5ea0:	7d20      	ldrb	r0, [r4, #20]
   b5ea2:	2101      	movs	r1, #1
   b5ea4:	f002 ff3e 	bl	b8d24 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b5ea8:	7d20      	ldrb	r0, [r4, #20]
   b5eaa:	2101      	movs	r1, #1
}
   b5eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b5eb0:	f002 bf49 	b.w	b8d46 <digitalWrite>

000b5eb4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b5eb4:	6800      	ldr	r0, [r0, #0]
   b5eb6:	f000 bbcd 	b.w	b6654 <_ZN8SPIClass14endTransactionEv>

000b5eba <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b5eba:	6800      	ldr	r0, [r0, #0]
   b5ebc:	21ff      	movs	r1, #255	; 0xff
   b5ebe:	f000 bc51 	b.w	b6764 <_ZN8SPIClass8transferEh>
	...

000b5ec4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b5ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5ec6:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b5ec8:	4a07      	ldr	r2, [pc, #28]	; (b5ee8 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b5eca:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b5ecc:	2500      	movs	r5, #0
   b5ece:	4c07      	ldr	r4, [pc, #28]	; (b5eec <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b5ed0:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b5ed2:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b5ed4:	460a      	mov	r2, r1
   b5ed6:	4629      	mov	r1, r5
   b5ed8:	f000 fc4a 	bl	b6770 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b5edc:	7823      	ldrb	r3, [r4, #0]
   b5ede:	2b00      	cmp	r3, #0
   b5ee0:	d0fc      	beq.n	b5edc <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b5ee2:	2000      	movs	r0, #0
   b5ee4:	b003      	add	sp, #12
   b5ee6:	bd30      	pop	{r4, r5, pc}
   b5ee8:	000b5e81 	.word	0x000b5e81
   b5eec:	2003e64c 	.word	0x2003e64c

000b5ef0 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b5ef0:	6800      	ldr	r0, [r0, #0]
   b5ef2:	f000 bc37 	b.w	b6764 <_ZN8SPIClass8transferEh>
	...

000b5ef8 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b5ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5efa:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5efc:	4a06      	ldr	r2, [pc, #24]	; (b5f18 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b5efe:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b5f00:	2500      	movs	r5, #0
   b5f02:	4c06      	ldr	r4, [pc, #24]	; (b5f1c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5f04:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b5f06:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5f08:	462a      	mov	r2, r5
   b5f0a:	f000 fc31 	bl	b6770 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b5f0e:	7823      	ldrb	r3, [r4, #0]
   b5f10:	2b00      	cmp	r3, #0
   b5f12:	d0fc      	beq.n	b5f0e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b5f14:	b003      	add	sp, #12
   b5f16:	bd30      	pop	{r4, r5, pc}
   b5f18:	000b5e81 	.word	0x000b5e81
   b5f1c:	2003e64c 	.word	0x2003e64c

000b5f20 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5f20:	b508      	push	{r3, lr}
   b5f22:	4b02      	ldr	r3, [pc, #8]	; (b5f2c <netdb_freeaddrinfo+0xc>)
   b5f24:	681b      	ldr	r3, [r3, #0]
   b5f26:	689b      	ldr	r3, [r3, #8]
   b5f28:	9301      	str	r3, [sp, #4]
   b5f2a:	bd08      	pop	{r3, pc}
   b5f2c:	00030268 	.word	0x00030268

000b5f30 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5f30:	b508      	push	{r3, lr}
   b5f32:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <netdb_getaddrinfo+0xc>)
   b5f34:	681b      	ldr	r3, [r3, #0]
   b5f36:	68db      	ldr	r3, [r3, #12]
   b5f38:	9301      	str	r3, [sp, #4]
   b5f3a:	bd08      	pop	{r3, pc}
   b5f3c:	00030268 	.word	0x00030268

000b5f40 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5f40:	b508      	push	{r3, lr}
   b5f42:	4b02      	ldr	r3, [pc, #8]	; (b5f4c <HAL_Validate_Pin_Function+0xc>)
   b5f44:	681b      	ldr	r3, [r3, #0]
   b5f46:	685b      	ldr	r3, [r3, #4]
   b5f48:	9301      	str	r3, [sp, #4]
   b5f4a:	bd08      	pop	{r3, pc}
   b5f4c:	0003022c 	.word	0x0003022c

000b5f50 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5f50:	b508      	push	{r3, lr}
   b5f52:	4b02      	ldr	r3, [pc, #8]	; (b5f5c <HAL_Pin_Mode+0xc>)
   b5f54:	681b      	ldr	r3, [r3, #0]
   b5f56:	689b      	ldr	r3, [r3, #8]
   b5f58:	9301      	str	r3, [sp, #4]
   b5f5a:	bd08      	pop	{r3, pc}
   b5f5c:	0003022c 	.word	0x0003022c

000b5f60 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5f60:	b508      	push	{r3, lr}
   b5f62:	4b02      	ldr	r3, [pc, #8]	; (b5f6c <HAL_Get_Pin_Mode+0xc>)
   b5f64:	681b      	ldr	r3, [r3, #0]
   b5f66:	68db      	ldr	r3, [r3, #12]
   b5f68:	9301      	str	r3, [sp, #4]
   b5f6a:	bd08      	pop	{r3, pc}
   b5f6c:	0003022c 	.word	0x0003022c

000b5f70 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5f70:	b508      	push	{r3, lr}
   b5f72:	4b02      	ldr	r3, [pc, #8]	; (b5f7c <HAL_GPIO_Write+0xc>)
   b5f74:	681b      	ldr	r3, [r3, #0]
   b5f76:	691b      	ldr	r3, [r3, #16]
   b5f78:	9301      	str	r3, [sp, #4]
   b5f7a:	bd08      	pop	{r3, pc}
   b5f7c:	0003022c 	.word	0x0003022c

000b5f80 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5f80:	b508      	push	{r3, lr}
   b5f82:	4b02      	ldr	r3, [pc, #8]	; (b5f8c <hal_adc_read+0xc>)
   b5f84:	681b      	ldr	r3, [r3, #0]
   b5f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f88:	9301      	str	r3, [sp, #4]
   b5f8a:	bd08      	pop	{r3, pc}
   b5f8c:	0003022c 	.word	0x0003022c

000b5f90 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5f90:	b508      	push	{r3, lr}
   b5f92:	4b02      	ldr	r3, [pc, #8]	; (b5f9c <HAL_RNG_GetRandomNumber+0xc>)
   b5f94:	681b      	ldr	r3, [r3, #0]
   b5f96:	685b      	ldr	r3, [r3, #4]
   b5f98:	9301      	str	r3, [sp, #4]
   b5f9a:	bd08      	pop	{r3, pc}
   b5f9c:	00030218 	.word	0x00030218

000b5fa0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5fa0:	b508      	push	{r3, lr}
   b5fa2:	4b02      	ldr	r3, [pc, #8]	; (b5fac <HAL_Delay_Microseconds+0xc>)
   b5fa4:	681b      	ldr	r3, [r3, #0]
   b5fa6:	68db      	ldr	r3, [r3, #12]
   b5fa8:	9301      	str	r3, [sp, #4]
   b5faa:	bd08      	pop	{r3, pc}
   b5fac:	00030218 	.word	0x00030218

000b5fb0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5fb0:	b508      	push	{r3, lr}
   b5fb2:	4b02      	ldr	r3, [pc, #8]	; (b5fbc <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5fb4:	681b      	ldr	r3, [r3, #0]
   b5fb6:	691b      	ldr	r3, [r3, #16]
   b5fb8:	9301      	str	r3, [sp, #4]
   b5fba:	bd08      	pop	{r3, pc}
   b5fbc:	00030218 	.word	0x00030218

000b5fc0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5fc0:	b508      	push	{r3, lr}
   b5fc2:	4b02      	ldr	r3, [pc, #8]	; (b5fcc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5fc4:	681b      	ldr	r3, [r3, #0]
   b5fc6:	695b      	ldr	r3, [r3, #20]
   b5fc8:	9301      	str	r3, [sp, #4]
   b5fca:	bd08      	pop	{r3, pc}
   b5fcc:	00030218 	.word	0x00030218

000b5fd0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5fd0:	b508      	push	{r3, lr}
   b5fd2:	4b02      	ldr	r3, [pc, #8]	; (b5fdc <hal_rtc_time_is_valid+0xc>)
   b5fd4:	681b      	ldr	r3, [r3, #0]
   b5fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5fd8:	9301      	str	r3, [sp, #4]
   b5fda:	bd08      	pop	{r3, pc}
   b5fdc:	00030218 	.word	0x00030218

000b5fe0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5fe0:	b508      	push	{r3, lr}
   b5fe2:	4b02      	ldr	r3, [pc, #8]	; (b5fec <hal_rtc_get_time+0xc>)
   b5fe4:	681b      	ldr	r3, [r3, #0]
   b5fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5fe8:	9301      	str	r3, [sp, #4]
   b5fea:	bd08      	pop	{r3, pc}
   b5fec:	00030218 	.word	0x00030218

000b5ff0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5ff0:	b508      	push	{r3, lr}
   b5ff2:	4b02      	ldr	r3, [pc, #8]	; (b5ffc <os_mutex_recursive_create+0xc>)
   b5ff4:	681b      	ldr	r3, [r3, #0]
   b5ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ff8:	9301      	str	r3, [sp, #4]
   b5ffa:	bd08      	pop	{r3, pc}
   b5ffc:	00030248 	.word	0x00030248

000b6000 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b6000:	b508      	push	{r3, lr}
   b6002:	4b02      	ldr	r3, [pc, #8]	; (b600c <os_mutex_recursive_destroy+0xc>)
   b6004:	681b      	ldr	r3, [r3, #0]
   b6006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6008:	9301      	str	r3, [sp, #4]
   b600a:	bd08      	pop	{r3, pc}
   b600c:	00030248 	.word	0x00030248

000b6010 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6010:	b508      	push	{r3, lr}
   b6012:	4b02      	ldr	r3, [pc, #8]	; (b601c <os_mutex_recursive_lock+0xc>)
   b6014:	681b      	ldr	r3, [r3, #0]
   b6016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6018:	9301      	str	r3, [sp, #4]
   b601a:	bd08      	pop	{r3, pc}
   b601c:	00030248 	.word	0x00030248

000b6020 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6020:	b508      	push	{r3, lr}
   b6022:	4b02      	ldr	r3, [pc, #8]	; (b602c <os_mutex_recursive_unlock+0xc>)
   b6024:	681b      	ldr	r3, [r3, #0]
   b6026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6028:	9301      	str	r3, [sp, #4]
   b602a:	bd08      	pop	{r3, pc}
   b602c:	00030248 	.word	0x00030248

000b6030 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6030:	b508      	push	{r3, lr}
   b6032:	4b02      	ldr	r3, [pc, #8]	; (b603c <inet_inet_ntop+0xc>)
   b6034:	681b      	ldr	r3, [r3, #0]
   b6036:	695b      	ldr	r3, [r3, #20]
   b6038:	9301      	str	r3, [sp, #4]
   b603a:	bd08      	pop	{r3, pc}
   b603c:	00030264 	.word	0x00030264

000b6040 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b6040:	b508      	push	{r3, lr}
   b6042:	4b02      	ldr	r3, [pc, #8]	; (b604c <hal_usart_end+0xc>)
   b6044:	681b      	ldr	r3, [r3, #0]
   b6046:	689b      	ldr	r3, [r3, #8]
   b6048:	9301      	str	r3, [sp, #4]
   b604a:	bd08      	pop	{r3, pc}
   b604c:	0003023c 	.word	0x0003023c

000b6050 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6050:	b508      	push	{r3, lr}
   b6052:	4b02      	ldr	r3, [pc, #8]	; (b605c <hal_usart_write+0xc>)
   b6054:	681b      	ldr	r3, [r3, #0]
   b6056:	68db      	ldr	r3, [r3, #12]
   b6058:	9301      	str	r3, [sp, #4]
   b605a:	bd08      	pop	{r3, pc}
   b605c:	0003023c 	.word	0x0003023c

000b6060 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <hal_usart_available+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	691b      	ldr	r3, [r3, #16]
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	0003023c 	.word	0x0003023c

000b6070 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <hal_usart_read+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	695b      	ldr	r3, [r3, #20]
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	0003023c 	.word	0x0003023c

000b6080 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <hal_usart_peek+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	699b      	ldr	r3, [r3, #24]
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	0003023c 	.word	0x0003023c

000b6090 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <hal_usart_flush+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	69db      	ldr	r3, [r3, #28]
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	0003023c 	.word	0x0003023c

000b60a0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b02      	ldr	r3, [pc, #8]	; (b60ac <hal_usart_is_enabled+0xc>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	6a1b      	ldr	r3, [r3, #32]
   b60a8:	9301      	str	r3, [sp, #4]
   b60aa:	bd08      	pop	{r3, pc}
   b60ac:	0003023c 	.word	0x0003023c

000b60b0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b60b0:	b508      	push	{r3, lr}
   b60b2:	4b02      	ldr	r3, [pc, #8]	; (b60bc <hal_usart_available_data_for_write+0xc>)
   b60b4:	681b      	ldr	r3, [r3, #0]
   b60b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	bd08      	pop	{r3, pc}
   b60bc:	0003023c 	.word	0x0003023c

000b60c0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b60c0:	b508      	push	{r3, lr}
   b60c2:	4b02      	ldr	r3, [pc, #8]	; (b60cc <hal_usart_begin_config+0xc>)
   b60c4:	681b      	ldr	r3, [r3, #0]
   b60c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b60c8:	9301      	str	r3, [sp, #4]
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	0003023c 	.word	0x0003023c

000b60d0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b60d0:	b508      	push	{r3, lr}
   b60d2:	4b02      	ldr	r3, [pc, #8]	; (b60dc <hal_usart_init_ex+0xc>)
   b60d4:	681b      	ldr	r3, [r3, #0]
   b60d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b60d8:	9301      	str	r3, [sp, #4]
   b60da:	bd08      	pop	{r3, pc}
   b60dc:	0003023c 	.word	0x0003023c

000b60e0 <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b60e0:	b508      	push	{r3, lr}
   b60e2:	4b02      	ldr	r3, [pc, #8]	; (b60ec <hal_i2c_begin_transmission+0xc>)
   b60e4:	681b      	ldr	r3, [r3, #0]
   b60e6:	699b      	ldr	r3, [r3, #24]
   b60e8:	9301      	str	r3, [sp, #4]
   b60ea:	bd08      	pop	{r3, pc}
   b60ec:	00030228 	.word	0x00030228

000b60f0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b02      	ldr	r3, [pc, #8]	; (b60fc <hal_i2c_end_transmission+0xc>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	69db      	ldr	r3, [r3, #28]
   b60f8:	9301      	str	r3, [sp, #4]
   b60fa:	bd08      	pop	{r3, pc}
   b60fc:	00030228 	.word	0x00030228

000b6100 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6100:	b508      	push	{r3, lr}
   b6102:	4b02      	ldr	r3, [pc, #8]	; (b610c <hal_i2c_write+0xc>)
   b6104:	681b      	ldr	r3, [r3, #0]
   b6106:	6a1b      	ldr	r3, [r3, #32]
   b6108:	9301      	str	r3, [sp, #4]
   b610a:	bd08      	pop	{r3, pc}
   b610c:	00030228 	.word	0x00030228

000b6110 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6110:	b508      	push	{r3, lr}
   b6112:	4b02      	ldr	r3, [pc, #8]	; (b611c <hal_i2c_available+0xc>)
   b6114:	681b      	ldr	r3, [r3, #0]
   b6116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6118:	9301      	str	r3, [sp, #4]
   b611a:	bd08      	pop	{r3, pc}
   b611c:	00030228 	.word	0x00030228

000b6120 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6120:	b508      	push	{r3, lr}
   b6122:	4b02      	ldr	r3, [pc, #8]	; (b612c <hal_i2c_read+0xc>)
   b6124:	681b      	ldr	r3, [r3, #0]
   b6126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6128:	9301      	str	r3, [sp, #4]
   b612a:	bd08      	pop	{r3, pc}
   b612c:	00030228 	.word	0x00030228

000b6130 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6130:	b508      	push	{r3, lr}
   b6132:	4b02      	ldr	r3, [pc, #8]	; (b613c <hal_i2c_peek+0xc>)
   b6134:	681b      	ldr	r3, [r3, #0]
   b6136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6138:	9301      	str	r3, [sp, #4]
   b613a:	bd08      	pop	{r3, pc}
   b613c:	00030228 	.word	0x00030228

000b6140 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6140:	b508      	push	{r3, lr}
   b6142:	4b02      	ldr	r3, [pc, #8]	; (b614c <hal_i2c_flush+0xc>)
   b6144:	681b      	ldr	r3, [r3, #0]
   b6146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6148:	9301      	str	r3, [sp, #4]
   b614a:	bd08      	pop	{r3, pc}
   b614c:	00030228 	.word	0x00030228

000b6150 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6150:	b508      	push	{r3, lr}
   b6152:	4b02      	ldr	r3, [pc, #8]	; (b615c <hal_i2c_is_enabled+0xc>)
   b6154:	681b      	ldr	r3, [r3, #0]
   b6156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6158:	9301      	str	r3, [sp, #4]
   b615a:	bd08      	pop	{r3, pc}
   b615c:	00030228 	.word	0x00030228

000b6160 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6160:	b508      	push	{r3, lr}
   b6162:	4b02      	ldr	r3, [pc, #8]	; (b616c <hal_i2c_init+0xc>)
   b6164:	681b      	ldr	r3, [r3, #0]
   b6166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6168:	9301      	str	r3, [sp, #4]
   b616a:	bd08      	pop	{r3, pc}
   b616c:	00030228 	.word	0x00030228

000b6170 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b6170:	b508      	push	{r3, lr}
   b6172:	4b02      	ldr	r3, [pc, #8]	; (b617c <hal_i2c_lock+0xc>)
   b6174:	681b      	ldr	r3, [r3, #0]
   b6176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6178:	9301      	str	r3, [sp, #4]
   b617a:	bd08      	pop	{r3, pc}
   b617c:	00030228 	.word	0x00030228

000b6180 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b6180:	b508      	push	{r3, lr}
   b6182:	4b02      	ldr	r3, [pc, #8]	; (b618c <hal_i2c_unlock+0xc>)
   b6184:	681b      	ldr	r3, [r3, #0]
   b6186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6188:	9301      	str	r3, [sp, #4]
   b618a:	bd08      	pop	{r3, pc}
   b618c:	00030228 	.word	0x00030228

000b6190 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6190:	b508      	push	{r3, lr}
   b6192:	4b02      	ldr	r3, [pc, #8]	; (b619c <hal_i2c_request_ex+0xc>)
   b6194:	681b      	ldr	r3, [r3, #0]
   b6196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6198:	9301      	str	r3, [sp, #4]
   b619a:	bd08      	pop	{r3, pc}
   b619c:	00030228 	.word	0x00030228

000b61a0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b02      	ldr	r3, [pc, #8]	; (b61ac <hal_spi_begin+0xc>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	681b      	ldr	r3, [r3, #0]
   b61a8:	9301      	str	r3, [sp, #4]
   b61aa:	bd08      	pop	{r3, pc}
   b61ac:	00030230 	.word	0x00030230

000b61b0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b61b0:	b508      	push	{r3, lr}
   b61b2:	4b02      	ldr	r3, [pc, #8]	; (b61bc <hal_spi_transfer+0xc>)
   b61b4:	681b      	ldr	r3, [r3, #0]
   b61b6:	695b      	ldr	r3, [r3, #20]
   b61b8:	9301      	str	r3, [sp, #4]
   b61ba:	bd08      	pop	{r3, pc}
   b61bc:	00030230 	.word	0x00030230

000b61c0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b61c0:	b508      	push	{r3, lr}
   b61c2:	4b02      	ldr	r3, [pc, #8]	; (b61cc <hal_spi_init+0xc>)
   b61c4:	681b      	ldr	r3, [r3, #0]
   b61c6:	69db      	ldr	r3, [r3, #28]
   b61c8:	9301      	str	r3, [sp, #4]
   b61ca:	bd08      	pop	{r3, pc}
   b61cc:	00030230 	.word	0x00030230

000b61d0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b61d0:	b508      	push	{r3, lr}
   b61d2:	4b02      	ldr	r3, [pc, #8]	; (b61dc <hal_spi_is_enabled+0xc>)
   b61d4:	681b      	ldr	r3, [r3, #0]
   b61d6:	6a1b      	ldr	r3, [r3, #32]
   b61d8:	9301      	str	r3, [sp, #4]
   b61da:	bd08      	pop	{r3, pc}
   b61dc:	00030230 	.word	0x00030230

000b61e0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b61e0:	b508      	push	{r3, lr}
   b61e2:	4b02      	ldr	r3, [pc, #8]	; (b61ec <hal_spi_info+0xc>)
   b61e4:	681b      	ldr	r3, [r3, #0]
   b61e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b61e8:	9301      	str	r3, [sp, #4]
   b61ea:	bd08      	pop	{r3, pc}
   b61ec:	00030230 	.word	0x00030230

000b61f0 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b61f0:	b508      	push	{r3, lr}
   b61f2:	4b02      	ldr	r3, [pc, #8]	; (b61fc <hal_spi_transfer_dma+0xc>)
   b61f4:	681b      	ldr	r3, [r3, #0]
   b61f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b61f8:	9301      	str	r3, [sp, #4]
   b61fa:	bd08      	pop	{r3, pc}
   b61fc:	00030230 	.word	0x00030230

000b6200 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b6200:	b508      	push	{r3, lr}
   b6202:	4b02      	ldr	r3, [pc, #8]	; (b620c <hal_spi_transfer_dma_status+0xc>)
   b6204:	681b      	ldr	r3, [r3, #0]
   b6206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6208:	9301      	str	r3, [sp, #4]
   b620a:	bd08      	pop	{r3, pc}
   b620c:	00030230 	.word	0x00030230

000b6210 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6210:	b508      	push	{r3, lr}
   b6212:	4b02      	ldr	r3, [pc, #8]	; (b621c <hal_spi_set_settings+0xc>)
   b6214:	681b      	ldr	r3, [r3, #0]
   b6216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6218:	9301      	str	r3, [sp, #4]
   b621a:	bd08      	pop	{r3, pc}
   b621c:	00030230 	.word	0x00030230

000b6220 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b02      	ldr	r3, [pc, #8]	; (b622c <hal_spi_acquire+0xc>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6228:	9301      	str	r3, [sp, #4]
   b622a:	bd08      	pop	{r3, pc}
   b622c:	00030230 	.word	0x00030230

000b6230 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6230:	b508      	push	{r3, lr}
   b6232:	4b02      	ldr	r3, [pc, #8]	; (b623c <hal_spi_release+0xc>)
   b6234:	681b      	ldr	r3, [r3, #0]
   b6236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6238:	9301      	str	r3, [sp, #4]
   b623a:	bd08      	pop	{r3, pc}
   b623c:	00030230 	.word	0x00030230

000b6240 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6240:	b508      	push	{r3, lr}
   b6242:	4b02      	ldr	r3, [pc, #8]	; (b624c <HAL_USB_USART_Init+0xc>)
   b6244:	681b      	ldr	r3, [r3, #0]
   b6246:	681b      	ldr	r3, [r3, #0]
   b6248:	9301      	str	r3, [sp, #4]
   b624a:	bd08      	pop	{r3, pc}
   b624c:	0003024c 	.word	0x0003024c

000b6250 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6250:	b508      	push	{r3, lr}
   b6252:	4b02      	ldr	r3, [pc, #8]	; (b625c <HAL_USB_USART_Begin+0xc>)
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	685b      	ldr	r3, [r3, #4]
   b6258:	9301      	str	r3, [sp, #4]
   b625a:	bd08      	pop	{r3, pc}
   b625c:	0003024c 	.word	0x0003024c

000b6260 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b6260:	b508      	push	{r3, lr}
   b6262:	4b02      	ldr	r3, [pc, #8]	; (b626c <HAL_USB_USART_End+0xc>)
   b6264:	681b      	ldr	r3, [r3, #0]
   b6266:	689b      	ldr	r3, [r3, #8]
   b6268:	9301      	str	r3, [sp, #4]
   b626a:	bd08      	pop	{r3, pc}
   b626c:	0003024c 	.word	0x0003024c

000b6270 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6270:	b508      	push	{r3, lr}
   b6272:	4b02      	ldr	r3, [pc, #8]	; (b627c <HAL_USB_USART_Available_Data+0xc>)
   b6274:	681b      	ldr	r3, [r3, #0]
   b6276:	691b      	ldr	r3, [r3, #16]
   b6278:	9301      	str	r3, [sp, #4]
   b627a:	bd08      	pop	{r3, pc}
   b627c:	0003024c 	.word	0x0003024c

000b6280 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6280:	b508      	push	{r3, lr}
   b6282:	4b02      	ldr	r3, [pc, #8]	; (b628c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6284:	681b      	ldr	r3, [r3, #0]
   b6286:	695b      	ldr	r3, [r3, #20]
   b6288:	9301      	str	r3, [sp, #4]
   b628a:	bd08      	pop	{r3, pc}
   b628c:	0003024c 	.word	0x0003024c

000b6290 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6290:	b508      	push	{r3, lr}
   b6292:	4b02      	ldr	r3, [pc, #8]	; (b629c <HAL_USB_USART_Receive_Data+0xc>)
   b6294:	681b      	ldr	r3, [r3, #0]
   b6296:	699b      	ldr	r3, [r3, #24]
   b6298:	9301      	str	r3, [sp, #4]
   b629a:	bd08      	pop	{r3, pc}
   b629c:	0003024c 	.word	0x0003024c

000b62a0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <HAL_USB_USART_Send_Data+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	69db      	ldr	r3, [r3, #28]
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	0003024c 	.word	0x0003024c

000b62b0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b02      	ldr	r3, [pc, #8]	; (b62bc <HAL_USB_USART_Flush_Data+0xc>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	6a1b      	ldr	r3, [r3, #32]
   b62b8:	9301      	str	r3, [sp, #4]
   b62ba:	bd08      	pop	{r3, pc}
   b62bc:	0003024c 	.word	0x0003024c

000b62c0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b62c0:	b508      	push	{r3, lr}
   b62c2:	4b02      	ldr	r3, [pc, #8]	; (b62cc <panic_+0xc>)
   b62c4:	681b      	ldr	r3, [r3, #0]
   b62c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b62c8:	9301      	str	r3, [sp, #4]
   b62ca:	bd08      	pop	{r3, pc}
   b62cc:	00030260 	.word	0x00030260

000b62d0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b62d0:	b508      	push	{r3, lr}
   b62d2:	4b02      	ldr	r3, [pc, #8]	; (b62dc <log_message+0xc>)
   b62d4:	681b      	ldr	r3, [r3, #0]
   b62d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b62d8:	9301      	str	r3, [sp, #4]
   b62da:	bd08      	pop	{r3, pc}
   b62dc:	00030260 	.word	0x00030260

000b62e0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b62e0:	b508      	push	{r3, lr}
   b62e2:	4b02      	ldr	r3, [pc, #8]	; (b62ec <log_message_v+0xc>)
   b62e4:	681b      	ldr	r3, [r3, #0]
   b62e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b62e8:	9301      	str	r3, [sp, #4]
   b62ea:	bd08      	pop	{r3, pc}
   b62ec:	00030260 	.word	0x00030260

000b62f0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b62f0:	b508      	push	{r3, lr}
   b62f2:	4b02      	ldr	r3, [pc, #8]	; (b62fc <log_level_name+0xc>)
   b62f4:	681b      	ldr	r3, [r3, #0]
   b62f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b62f8:	9301      	str	r3, [sp, #4]
   b62fa:	bd08      	pop	{r3, pc}
   b62fc:	00030260 	.word	0x00030260

000b6300 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b6300:	b508      	push	{r3, lr}
   b6302:	4b02      	ldr	r3, [pc, #8]	; (b630c <log_set_callbacks+0xc>)
   b6304:	681b      	ldr	r3, [r3, #0]
   b6306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6308:	9301      	str	r3, [sp, #4]
   b630a:	bd08      	pop	{r3, pc}
   b630c:	00030260 	.word	0x00030260

000b6310 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6310:	b508      	push	{r3, lr}
   b6312:	4b02      	ldr	r3, [pc, #8]	; (b631c <system_mode+0xc>)
   b6314:	681b      	ldr	r3, [r3, #0]
   b6316:	681b      	ldr	r3, [r3, #0]
   b6318:	9301      	str	r3, [sp, #4]
   b631a:	bd08      	pop	{r3, pc}
   b631c:	00030220 	.word	0x00030220

000b6320 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6320:	b508      	push	{r3, lr}
   b6322:	4b02      	ldr	r3, [pc, #8]	; (b632c <set_system_mode+0xc>)
   b6324:	681b      	ldr	r3, [r3, #0]
   b6326:	685b      	ldr	r3, [r3, #4]
   b6328:	9301      	str	r3, [sp, #4]
   b632a:	bd08      	pop	{r3, pc}
   b632c:	00030220 	.word	0x00030220

000b6330 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6330:	b508      	push	{r3, lr}
   b6332:	4b02      	ldr	r3, [pc, #8]	; (b633c <system_delay_ms+0xc>)
   b6334:	681b      	ldr	r3, [r3, #0]
   b6336:	695b      	ldr	r3, [r3, #20]
   b6338:	9301      	str	r3, [sp, #4]
   b633a:	bd08      	pop	{r3, pc}
   b633c:	00030220 	.word	0x00030220

000b6340 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6340:	b508      	push	{r3, lr}
   b6342:	4b02      	ldr	r3, [pc, #8]	; (b634c <system_thread_set_state+0xc>)
   b6344:	681b      	ldr	r3, [r3, #0]
   b6346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6348:	9301      	str	r3, [sp, #4]
   b634a:	bd08      	pop	{r3, pc}
   b634c:	00030220 	.word	0x00030220

000b6350 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6350:	b508      	push	{r3, lr}
   b6352:	4b02      	ldr	r3, [pc, #8]	; (b635c <application_thread_current+0xc>)
   b6354:	681b      	ldr	r3, [r3, #0]
   b6356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6358:	9301      	str	r3, [sp, #4]
   b635a:	bd08      	pop	{r3, pc}
   b635c:	00030220 	.word	0x00030220

000b6360 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6360:	b508      	push	{r3, lr}
   b6362:	4b02      	ldr	r3, [pc, #8]	; (b636c <application_thread_invoke+0xc>)
   b6364:	681b      	ldr	r3, [r3, #0]
   b6366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6368:	9301      	str	r3, [sp, #4]
   b636a:	bd08      	pop	{r3, pc}
   b636c:	00030220 	.word	0x00030220

000b6370 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6370:	b508      	push	{r3, lr}
   b6372:	4b02      	ldr	r3, [pc, #8]	; (b637c <system_thread_get_state+0xc>)
   b6374:	681b      	ldr	r3, [r3, #0]
   b6376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6378:	9301      	str	r3, [sp, #4]
   b637a:	bd08      	pop	{r3, pc}
   b637c:	00030220 	.word	0x00030220

000b6380 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6380:	b508      	push	{r3, lr}
   b6382:	4b03      	ldr	r3, [pc, #12]	; (b6390 <system_ctrl_set_app_request_handler+0x10>)
   b6384:	681b      	ldr	r3, [r3, #0]
   b6386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b638a:	9301      	str	r3, [sp, #4]
   b638c:	bd08      	pop	{r3, pc}
   b638e:	0000      	.short	0x0000
   b6390:	00030220 	.word	0x00030220

000b6394 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6394:	b508      	push	{r3, lr}
   b6396:	4b03      	ldr	r3, [pc, #12]	; (b63a4 <system_ctrl_set_result+0x10>)
   b6398:	681b      	ldr	r3, [r3, #0]
   b639a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b639e:	9301      	str	r3, [sp, #4]
   b63a0:	bd08      	pop	{r3, pc}
   b63a2:	0000      	.short	0x0000
   b63a4:	00030220 	.word	0x00030220

000b63a8 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b63a8:	b508      	push	{r3, lr}
   b63aa:	4b03      	ldr	r3, [pc, #12]	; (b63b8 <system_sleep_ext+0x10>)
   b63ac:	681b      	ldr	r3, [r3, #0]
   b63ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b63b2:	9301      	str	r3, [sp, #4]
   b63b4:	bd08      	pop	{r3, pc}
   b63b6:	0000      	.short	0x0000
   b63b8:	00030220 	.word	0x00030220

000b63bc <system_power_management_get_config>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
   b63bc:	b508      	push	{r3, lr}
   b63be:	4b03      	ldr	r3, [pc, #12]	; (b63cc <system_power_management_get_config+0x10>)
   b63c0:	681b      	ldr	r3, [r3, #0]
   b63c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b63c6:	9301      	str	r3, [sp, #4]
   b63c8:	bd08      	pop	{r3, pc}
   b63ca:	0000      	.short	0x0000
   b63cc:	00030220 	.word	0x00030220

000b63d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b63d0:	b508      	push	{r3, lr}
   b63d2:	4b02      	ldr	r3, [pc, #8]	; (b63dc <network_connect+0xc>)
   b63d4:	681b      	ldr	r3, [r3, #0]
   b63d6:	685b      	ldr	r3, [r3, #4]
   b63d8:	9301      	str	r3, [sp, #4]
   b63da:	bd08      	pop	{r3, pc}
   b63dc:	00030240 	.word	0x00030240

000b63e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b63e0:	b508      	push	{r3, lr}
   b63e2:	4b02      	ldr	r3, [pc, #8]	; (b63ec <network_connecting+0xc>)
   b63e4:	681b      	ldr	r3, [r3, #0]
   b63e6:	689b      	ldr	r3, [r3, #8]
   b63e8:	9301      	str	r3, [sp, #4]
   b63ea:	bd08      	pop	{r3, pc}
   b63ec:	00030240 	.word	0x00030240

000b63f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b63f0:	b508      	push	{r3, lr}
   b63f2:	4b02      	ldr	r3, [pc, #8]	; (b63fc <network_disconnect+0xc>)
   b63f4:	681b      	ldr	r3, [r3, #0]
   b63f6:	68db      	ldr	r3, [r3, #12]
   b63f8:	9301      	str	r3, [sp, #4]
   b63fa:	bd08      	pop	{r3, pc}
   b63fc:	00030240 	.word	0x00030240

000b6400 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6400:	b508      	push	{r3, lr}
   b6402:	4b02      	ldr	r3, [pc, #8]	; (b640c <network_ready+0xc>)
   b6404:	681b      	ldr	r3, [r3, #0]
   b6406:	691b      	ldr	r3, [r3, #16]
   b6408:	9301      	str	r3, [sp, #4]
   b640a:	bd08      	pop	{r3, pc}
   b640c:	00030240 	.word	0x00030240

000b6410 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6410:	b508      	push	{r3, lr}
   b6412:	4b02      	ldr	r3, [pc, #8]	; (b641c <network_on+0xc>)
   b6414:	681b      	ldr	r3, [r3, #0]
   b6416:	695b      	ldr	r3, [r3, #20]
   b6418:	9301      	str	r3, [sp, #4]
   b641a:	bd08      	pop	{r3, pc}
   b641c:	00030240 	.word	0x00030240

000b6420 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6420:	b508      	push	{r3, lr}
   b6422:	4b02      	ldr	r3, [pc, #8]	; (b642c <network_off+0xc>)
   b6424:	681b      	ldr	r3, [r3, #0]
   b6426:	699b      	ldr	r3, [r3, #24]
   b6428:	9301      	str	r3, [sp, #4]
   b642a:	bd08      	pop	{r3, pc}
   b642c:	00030240 	.word	0x00030240

000b6430 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6430:	b508      	push	{r3, lr}
   b6432:	4b02      	ldr	r3, [pc, #8]	; (b643c <network_listen+0xc>)
   b6434:	681b      	ldr	r3, [r3, #0]
   b6436:	69db      	ldr	r3, [r3, #28]
   b6438:	9301      	str	r3, [sp, #4]
   b643a:	bd08      	pop	{r3, pc}
   b643c:	00030240 	.word	0x00030240

000b6440 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6440:	b508      	push	{r3, lr}
   b6442:	4b02      	ldr	r3, [pc, #8]	; (b644c <network_listening+0xc>)
   b6444:	681b      	ldr	r3, [r3, #0]
   b6446:	6a1b      	ldr	r3, [r3, #32]
   b6448:	9301      	str	r3, [sp, #4]
   b644a:	bd08      	pop	{r3, pc}
   b644c:	00030240 	.word	0x00030240

000b6450 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6450:	b508      	push	{r3, lr}
   b6452:	4b02      	ldr	r3, [pc, #8]	; (b645c <network_set_listen_timeout+0xc>)
   b6454:	681b      	ldr	r3, [r3, #0]
   b6456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6458:	9301      	str	r3, [sp, #4]
   b645a:	bd08      	pop	{r3, pc}
   b645c:	00030240 	.word	0x00030240

000b6460 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6460:	b508      	push	{r3, lr}
   b6462:	4b02      	ldr	r3, [pc, #8]	; (b646c <network_get_listen_timeout+0xc>)
   b6464:	681b      	ldr	r3, [r3, #0]
   b6466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6468:	9301      	str	r3, [sp, #4]
   b646a:	bd08      	pop	{r3, pc}
   b646c:	00030240 	.word	0x00030240

000b6470 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6470:	b508      	push	{r3, lr}
   b6472:	4b02      	ldr	r3, [pc, #8]	; (b647c <network_is_on+0xc>)
   b6474:	681b      	ldr	r3, [r3, #0]
   b6476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6478:	9301      	str	r3, [sp, #4]
   b647a:	bd08      	pop	{r3, pc}
   b647c:	00030240 	.word	0x00030240

000b6480 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6480:	b508      	push	{r3, lr}
   b6482:	4b02      	ldr	r3, [pc, #8]	; (b648c <network_is_off+0xc>)
   b6484:	681b      	ldr	r3, [r3, #0]
   b6486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6488:	9301      	str	r3, [sp, #4]
   b648a:	bd08      	pop	{r3, pc}
   b648c:	00030240 	.word	0x00030240

000b6490 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b6490:	b508      	push	{r3, lr}
   b6492:	4b02      	ldr	r3, [pc, #8]	; (b649c <spark_process+0xc>)
   b6494:	681b      	ldr	r3, [r3, #0]
   b6496:	689b      	ldr	r3, [r3, #8]
   b6498:	9301      	str	r3, [sp, #4]
   b649a:	bd08      	pop	{r3, pc}
   b649c:	00030244 	.word	0x00030244

000b64a0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b64a0:	b508      	push	{r3, lr}
   b64a2:	4b02      	ldr	r3, [pc, #8]	; (b64ac <spark_cloud_flag_connect+0xc>)
   b64a4:	681b      	ldr	r3, [r3, #0]
   b64a6:	68db      	ldr	r3, [r3, #12]
   b64a8:	9301      	str	r3, [sp, #4]
   b64aa:	bd08      	pop	{r3, pc}
   b64ac:	00030244 	.word	0x00030244

000b64b0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b64b0:	b508      	push	{r3, lr}
   b64b2:	4b02      	ldr	r3, [pc, #8]	; (b64bc <spark_cloud_flag_connected+0xc>)
   b64b4:	681b      	ldr	r3, [r3, #0]
   b64b6:	695b      	ldr	r3, [r3, #20]
   b64b8:	9301      	str	r3, [sp, #4]
   b64ba:	bd08      	pop	{r3, pc}
   b64bc:	00030244 	.word	0x00030244

000b64c0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b64c0:	b508      	push	{r3, lr}
   b64c2:	4b02      	ldr	r3, [pc, #8]	; (b64cc <spark_send_event+0xc>)
   b64c4:	681b      	ldr	r3, [r3, #0]
   b64c6:	6a1b      	ldr	r3, [r3, #32]
   b64c8:	9301      	str	r3, [sp, #4]
   b64ca:	bd08      	pop	{r3, pc}
   b64cc:	00030244 	.word	0x00030244

000b64d0 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b64d0:	b508      	push	{r3, lr}
   b64d2:	4b02      	ldr	r3, [pc, #8]	; (b64dc <spark_sync_time_pending+0xc>)
   b64d4:	681b      	ldr	r3, [r3, #0]
   b64d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b64d8:	9301      	str	r3, [sp, #4]
   b64da:	bd08      	pop	{r3, pc}
   b64dc:	00030244 	.word	0x00030244

000b64e0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b64e0:	b508      	push	{r3, lr}
   b64e2:	4b02      	ldr	r3, [pc, #8]	; (b64ec <spark_set_random_seed_from_cloud_handler+0xc>)
   b64e4:	681b      	ldr	r3, [r3, #0]
   b64e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b64e8:	9301      	str	r3, [sp, #4]
   b64ea:	bd08      	pop	{r3, pc}
   b64ec:	00030244 	.word	0x00030244

000b64f0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b64f0:	b508      	push	{r3, lr}
   b64f2:	4b02      	ldr	r3, [pc, #8]	; (b64fc <malloc+0xc>)
   b64f4:	681b      	ldr	r3, [r3, #0]
   b64f6:	681b      	ldr	r3, [r3, #0]
   b64f8:	9301      	str	r3, [sp, #4]
   b64fa:	bd08      	pop	{r3, pc}
   b64fc:	0003021c 	.word	0x0003021c

000b6500 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6500:	b508      	push	{r3, lr}
   b6502:	4b02      	ldr	r3, [pc, #8]	; (b650c <free+0xc>)
   b6504:	681b      	ldr	r3, [r3, #0]
   b6506:	685b      	ldr	r3, [r3, #4]
   b6508:	9301      	str	r3, [sp, #4]
   b650a:	bd08      	pop	{r3, pc}
   b650c:	0003021c 	.word	0x0003021c

000b6510 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6510:	b508      	push	{r3, lr}
   b6512:	4b02      	ldr	r3, [pc, #8]	; (b651c <realloc+0xc>)
   b6514:	681b      	ldr	r3, [r3, #0]
   b6516:	689b      	ldr	r3, [r3, #8]
   b6518:	9301      	str	r3, [sp, #4]
   b651a:	bd08      	pop	{r3, pc}
   b651c:	0003021c 	.word	0x0003021c

000b6520 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6520:	b508      	push	{r3, lr}
   b6522:	4b02      	ldr	r3, [pc, #8]	; (b652c <snprintf+0xc>)
   b6524:	681b      	ldr	r3, [r3, #0]
   b6526:	69db      	ldr	r3, [r3, #28]
   b6528:	9301      	str	r3, [sp, #4]
   b652a:	bd08      	pop	{r3, pc}
   b652c:	0003021c 	.word	0x0003021c

000b6530 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6530:	b508      	push	{r3, lr}
   b6532:	4b02      	ldr	r3, [pc, #8]	; (b653c <vsnprintf+0xc>)
   b6534:	681b      	ldr	r3, [r3, #0]
   b6536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6538:	9301      	str	r3, [sp, #4]
   b653a:	bd08      	pop	{r3, pc}
   b653c:	0003021c 	.word	0x0003021c

000b6540 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6540:	b508      	push	{r3, lr}
   b6542:	4b02      	ldr	r3, [pc, #8]	; (b654c <abort+0xc>)
   b6544:	681b      	ldr	r3, [r3, #0]
   b6546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6548:	9301      	str	r3, [sp, #4]
   b654a:	bd08      	pop	{r3, pc}
   b654c:	0003021c 	.word	0x0003021c

000b6550 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6550:	b508      	push	{r3, lr}
   b6552:	4b02      	ldr	r3, [pc, #8]	; (b655c <_malloc_r+0xc>)
   b6554:	681b      	ldr	r3, [r3, #0]
   b6556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6558:	9301      	str	r3, [sp, #4]
   b655a:	bd08      	pop	{r3, pc}
   b655c:	0003021c 	.word	0x0003021c

000b6560 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6560:	b508      	push	{r3, lr}
   b6562:	4b02      	ldr	r3, [pc, #8]	; (b656c <__errno+0xc>)
   b6564:	681b      	ldr	r3, [r3, #0]
   b6566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6568:	9301      	str	r3, [sp, #4]
   b656a:	bd08      	pop	{r3, pc}
   b656c:	0003021c 	.word	0x0003021c

000b6570 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6570:	b508      	push	{r3, lr}
   b6572:	4b02      	ldr	r3, [pc, #8]	; (b657c <__assert_func+0xc>)
   b6574:	681b      	ldr	r3, [r3, #0]
   b6576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6578:	9301      	str	r3, [sp, #4]
   b657a:	bd08      	pop	{r3, pc}
   b657c:	0003021c 	.word	0x0003021c

000b6580 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6580:	b508      	push	{r3, lr}
   b6582:	4b02      	ldr	r3, [pc, #8]	; (b658c <newlib_impure_ptr_callback+0xc>)
   b6584:	681b      	ldr	r3, [r3, #0]
   b6586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6588:	9301      	str	r3, [sp, #4]
   b658a:	bd08      	pop	{r3, pc}
   b658c:	0003021c 	.word	0x0003021c

000b6590 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6590:	2200      	movs	r2, #0
   b6592:	6840      	ldr	r0, [r0, #4]
   b6594:	4611      	mov	r1, r2
   b6596:	f7ff bf53 	b.w	b6440 <network_listening>

000b659a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b659a:	2200      	movs	r2, #0
   b659c:	6840      	ldr	r0, [r0, #4]
   b659e:	4611      	mov	r1, r2
   b65a0:	f7ff bf5e 	b.w	b6460 <network_get_listen_timeout>

000b65a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b65a4:	6840      	ldr	r0, [r0, #4]
   b65a6:	2200      	movs	r2, #0
   b65a8:	f7ff bf52 	b.w	b6450 <network_set_listen_timeout>

000b65ac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b65ac:	6840      	ldr	r0, [r0, #4]
   b65ae:	2200      	movs	r2, #0
   b65b0:	f081 0101 	eor.w	r1, r1, #1
   b65b4:	f7ff bf3c 	b.w	b6430 <network_listen>

000b65b8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b65b8:	2300      	movs	r3, #0
   b65ba:	6840      	ldr	r0, [r0, #4]
   b65bc:	461a      	mov	r2, r3
   b65be:	4619      	mov	r1, r3
   b65c0:	f7ff bf2e 	b.w	b6420 <network_off>

000b65c4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b65c4:	2300      	movs	r3, #0
   b65c6:	6840      	ldr	r0, [r0, #4]
   b65c8:	461a      	mov	r2, r3
   b65ca:	4619      	mov	r1, r3
   b65cc:	f7ff bf20 	b.w	b6410 <network_on>

000b65d0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b65d0:	2200      	movs	r2, #0
   b65d2:	6840      	ldr	r0, [r0, #4]
   b65d4:	4611      	mov	r1, r2
   b65d6:	f7ff bf13 	b.w	b6400 <network_ready>

000b65da <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b65da:	2200      	movs	r2, #0
   b65dc:	6840      	ldr	r0, [r0, #4]
   b65de:	4611      	mov	r1, r2
   b65e0:	f7ff befe 	b.w	b63e0 <network_connecting>

000b65e4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b65e4:	6840      	ldr	r0, [r0, #4]
   b65e6:	2200      	movs	r2, #0
   b65e8:	2102      	movs	r1, #2
   b65ea:	f7ff bf01 	b.w	b63f0 <network_disconnect>

000b65ee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b65ee:	2300      	movs	r3, #0
   b65f0:	6840      	ldr	r0, [r0, #4]
   b65f2:	461a      	mov	r2, r3
   b65f4:	f7ff beec 	b.w	b63d0 <network_connect>

000b65f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b65f8:	4b02      	ldr	r3, [pc, #8]	; (b6604 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b65fa:	2203      	movs	r2, #3
   b65fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b65fe:	4a02      	ldr	r2, [pc, #8]	; (b6608 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6600:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6602:	4770      	bx	lr
   b6604:	2003e650 	.word	0x2003e650
   b6608:	000b9d60 	.word	0x000b9d60

000b660c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b660c:	2100      	movs	r1, #0
   b660e:	f7ff be0f 	b.w	b6230 <hal_spi_release>

000b6612 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6612:	2100      	movs	r1, #0
   b6614:	f7ff be04 	b.w	b6220 <hal_spi_acquire>

000b6618 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6618:	b510      	push	{r4, lr}
   b661a:	4604      	mov	r4, r0
   b661c:	4608      	mov	r0, r1
{
    _spi = spi;
   b661e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6620:	f7ff fdce 	bl	b61c0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6624:	2300      	movs	r3, #0
   b6626:	6063      	str	r3, [r4, #4]
}
   b6628:	4620      	mov	r0, r4
   b662a:	bd10      	pop	{r4, pc}

000b662c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b662c:	b513      	push	{r0, r1, r4, lr}
   b662e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6630:	7800      	ldrb	r0, [r0, #0]
   b6632:	f7ff ffee 	bl	b6612 <_ZN8SPIClass4lockEv.isra.0>
   b6636:	b958      	cbnz	r0, b6650 <_ZN8SPIClass5beginEv+0x24>
   b6638:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b663a:	9001      	str	r0, [sp, #4]
   b663c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6640:	f7ff fdae 	bl	b61a0 <hal_spi_begin>
        unlock();
   b6644:	9801      	ldr	r0, [sp, #4]
    }
}
   b6646:	b002      	add	sp, #8
   b6648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b664c:	f7ff bfde 	b.w	b660c <_ZN8SPIClass6unlockEv.isra.0>
   b6650:	b002      	add	sp, #8
   b6652:	bd10      	pop	{r4, pc}

000b6654 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6654:	7800      	ldrb	r0, [r0, #0]
   b6656:	f7ff bfd9 	b.w	b660c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b665c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b665c:	0840      	lsrs	r0, r0, #1
{
   b665e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6660:	6018      	str	r0, [r3, #0]
   b6662:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6664:	6818      	ldr	r0, [r3, #0]
   b6666:	4288      	cmp	r0, r1
   b6668:	b2e5      	uxtb	r5, r4
   b666a:	d906      	bls.n	b667a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b666c:	3401      	adds	r4, #1
   b666e:	2c08      	cmp	r4, #8
   b6670:	d002      	beq.n	b6678 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6672:	0840      	lsrs	r0, r0, #1
   b6674:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6676:	e7f5      	b.n	b6664 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6678:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b667a:	4b02      	ldr	r3, [pc, #8]	; (b6684 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b667c:	5d5b      	ldrb	r3, [r3, r5]
   b667e:	7013      	strb	r3, [r2, #0]
}
   b6680:	bd30      	pop	{r4, r5, pc}
   b6682:	bf00      	nop
   b6684:	000b9d94 	.word	0x000b9d94

000b6688 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b668c:	4606      	mov	r6, r0
   b668e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6690:	7800      	ldrb	r0, [r0, #0]
{
   b6692:	460c      	mov	r4, r1
    CHECK(lock());
   b6694:	f7ff ffbd 	bl	b6612 <_ZN8SPIClass4lockEv.isra.0>
   b6698:	2800      	cmp	r0, #0
   b669a:	db1b      	blt.n	b66d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b669c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b669e:	2214      	movs	r2, #20
   b66a0:	2100      	movs	r1, #0
   b66a2:	a809      	add	r0, sp, #36	; 0x24
   b66a4:	f003 f8a8 	bl	b97f8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b66a8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b66aa:	2200      	movs	r2, #0
   b66ac:	a909      	add	r1, sp, #36	; 0x24
   b66ae:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b66b0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b66b4:	f7ff fd94 	bl	b61e0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b66b8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b66bc:	b113      	cbz	r3, b66c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b66be:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b66c2:	b155      	cbz	r5, b66da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b66c4:	2700      	movs	r7, #0
   b66c6:	46b9      	mov	r9, r7
   b66c8:	46b8      	mov	r8, r7
   b66ca:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b66cc:	7923      	ldrb	r3, [r4, #4]
   b66ce:	b15d      	cbz	r5, b66e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b66d0:	b1c3      	cbz	r3, b6704 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b66d2:	2000      	movs	r0, #0
}
   b66d4:	b00f      	add	sp, #60	; 0x3c
   b66d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b66da:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b66de:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b66e2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b66e6:	e7f1      	b.n	b66cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b66e8:	2b00      	cmp	r3, #0
   b66ea:	d135      	bne.n	b6758 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b66ec:	68a3      	ldr	r3, [r4, #8]
   b66ee:	4543      	cmp	r3, r8
   b66f0:	d108      	bne.n	b6704 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b66f2:	f88d 9020 	strb.w	r9, [sp, #32]
   b66f6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b66fa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b66fe:	89a3      	ldrh	r3, [r4, #12]
   b6700:	429a      	cmp	r2, r3
   b6702:	d0e6      	beq.n	b66d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6704:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6706:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6708:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b670c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b670e:	ab04      	add	r3, sp, #16
   b6710:	f10d 020f 	add.w	r2, sp, #15
   b6714:	f7ff ffa2 	bl	b665c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6718:	7921      	ldrb	r1, [r4, #4]
   b671a:	b985      	cbnz	r5, b673e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b671c:	b989      	cbnz	r1, b6742 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b671e:	68a3      	ldr	r3, [r4, #8]
   b6720:	4543      	cmp	r3, r8
   b6722:	d30e      	bcc.n	b6742 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6724:	f88d 9020 	strb.w	r9, [sp, #32]
   b6728:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b672c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6730:	89a3      	ldrh	r3, [r4, #12]
   b6732:	429a      	cmp	r2, r3
   b6734:	d105      	bne.n	b6742 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6736:	9b04      	ldr	r3, [sp, #16]
   b6738:	4543      	cmp	r3, r8
   b673a:	d102      	bne.n	b6742 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b673c:	e7c9      	b.n	b66d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b673e:	2900      	cmp	r1, #0
   b6740:	d1f9      	bne.n	b6736 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6742:	2300      	movs	r3, #0
   b6744:	9301      	str	r3, [sp, #4]
   b6746:	7b63      	ldrb	r3, [r4, #13]
   b6748:	9300      	str	r3, [sp, #0]
   b674a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b674e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6750:	7830      	ldrb	r0, [r6, #0]
   b6752:	f7ff fd5d 	bl	b6210 <hal_spi_set_settings>
   b6756:	e7bc      	b.n	b66d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6758:	e9cd 5500 	strd	r5, r5, [sp]
   b675c:	462b      	mov	r3, r5
   b675e:	462a      	mov	r2, r5
   b6760:	2101      	movs	r1, #1
   b6762:	e7f5      	b.n	b6750 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6764 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6764:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6766:	7800      	ldrb	r0, [r0, #0]
   b6768:	f7ff fd22 	bl	b61b0 <hal_spi_transfer>
}
   b676c:	b2c0      	uxtb	r0, r0
   b676e:	bd08      	pop	{r3, pc}

000b6770 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b6770:	b530      	push	{r4, r5, lr}
   b6772:	b087      	sub	sp, #28
   b6774:	4604      	mov	r4, r0
   b6776:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b6778:	9500      	str	r5, [sp, #0]
   b677a:	7800      	ldrb	r0, [r0, #0]
   b677c:	f7ff fd38 	bl	b61f0 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b6780:	b93d      	cbnz	r5, b6792 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b6782:	7820      	ldrb	r0, [r4, #0]
   b6784:	a902      	add	r1, sp, #8
   b6786:	f7ff fd3b 	bl	b6200 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b678a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b678e:	07db      	lsls	r3, r3, #31
   b6790:	d4f7      	bmi.n	b6782 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b6792:	b007      	add	sp, #28
   b6794:	bd30      	pop	{r4, r5, pc}

000b6796 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b6796:	b510      	push	{r4, lr}
   b6798:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b679a:	6800      	ldr	r0, [r0, #0]
   b679c:	b118      	cbz	r0, b67a6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b679e:	f7ff feaf 	bl	b6500 <free>
            wakeupSource_ = nullptr;
   b67a2:	2300      	movs	r3, #0
   b67a4:	6023      	str	r3, [r4, #0]
        }
    }
   b67a6:	bd10      	pop	{r4, pc}

000b67a8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b67a8:	b538      	push	{r3, r4, r5, lr}
   b67aa:	460c      	mov	r4, r1
   b67ac:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b67ae:	f7ff fff2 	bl	b6796 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b67b2:	b154      	cbz	r4, b67ca <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b67b4:	8820      	ldrh	r0, [r4, #0]
   b67b6:	f7ff fe9b 	bl	b64f0 <malloc>
   b67ba:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b67bc:	b128      	cbz	r0, b67ca <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b67be:	8822      	ldrh	r2, [r4, #0]
   b67c0:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b67c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b67c6:	f002 bfef 	b.w	b97a8 <memcpy>
    }
   b67ca:	bd38      	pop	{r3, r4, r5, pc}

000b67cc <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b67cc:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b67ce:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b67d2:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b67d4:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b67d8:	f8c0 3006 	str.w	r3, [r0, #6]
   b67dc:	894b      	ldrh	r3, [r1, #10]
   b67de:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b67e0:	460c      	mov	r4, r1
   b67e2:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b67e4:	f7ff ffd7 	bl	b6796 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b67e8:	6823      	ldr	r3, [r4, #0]
   b67ea:	b113      	cbz	r3, b67f2 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b67ec:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b67ee:	2300      	movs	r3, #0
   b67f0:	6023      	str	r3, [r4, #0]
    }
   b67f2:	bd38      	pop	{r3, r4, r5, pc}

000b67f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b67f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b67f6:	4d2b      	ldr	r5, [pc, #172]	; (b68a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b67f8:	7d0b      	ldrb	r3, [r1, #20]
   b67fa:	4604      	mov	r4, r0
   b67fc:	b08b      	sub	sp, #44	; 0x2c
   b67fe:	4608      	mov	r0, r1
   b6800:	1daf      	adds	r7, r5, #6
   b6802:	2b00      	cmp	r3, #0
   b6804:	d036      	beq.n	b6874 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b6806:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b6808:	791b      	ldrb	r3, [r3, #4]
   b680a:	2b00      	cmp	r3, #0
   b680c:	d032      	beq.n	b6874 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b680e:	4b26      	ldr	r3, [pc, #152]	; (b68a8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b6810:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b6812:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b6814:	a902      	add	r1, sp, #8
   b6816:	3004      	adds	r0, #4
   b6818:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b681c:	f7ff fdc4 	bl	b63a8 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b6820:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b6824:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b6828:	b200      	sxth	r0, r0
   b682a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b682e:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b6832:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b6834:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b6836:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b6838:	4628      	mov	r0, r5
   b683a:	f7ff ffb5 	bl	b67a8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b683e:	a802      	add	r0, sp, #8
   b6840:	f7ff ffa9 	bl	b6796 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b6844:	2300      	movs	r3, #0
   b6846:	6023      	str	r3, [r4, #0]
   b6848:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b684a:	71a3      	strb	r3, [r4, #6]
   b684c:	8123      	strh	r3, [r4, #8]
   b684e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6852:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b6854:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b6858:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b685a:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b685e:	f8c4 3006 	str.w	r3, [r4, #6]
   b6862:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b6864:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b6866:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b6868:	4620      	mov	r0, r4
   b686a:	f7ff ff9d 	bl	b67a8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b686e:	4620      	mov	r0, r4
   b6870:	b00b      	add	sp, #44	; 0x2c
   b6872:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b6874:	2600      	movs	r6, #0
   b6876:	2320      	movs	r3, #32
   b6878:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b687c:	4b0b      	ldr	r3, [pc, #44]	; (b68ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b687e:	9300      	str	r3, [sp, #0]
   b6880:	aa02      	add	r2, sp, #8
   b6882:	4633      	mov	r3, r6
   b6884:	490a      	ldr	r1, [pc, #40]	; (b68b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b6886:	2032      	movs	r0, #50	; 0x32
   b6888:	f7ff fd22 	bl	b62d0 <log_message>
            : wakeupSource_(nullptr),
   b688c:	4b06      	ldr	r3, [pc, #24]	; (b68a8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b688e:	4805      	ldr	r0, [pc, #20]	; (b68a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b6890:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b6892:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b6896:	a902      	add	r1, sp, #8
   b6898:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b689c:	f7ff ff96 	bl	b67cc <_ZN17SystemSleepResultaSEOS_.isra.0>
   b68a0:	e7cd      	b.n	b683e <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b68a2:	bf00      	nop
   b68a4:	2003e658 	.word	0x2003e658
   b68a8:	ffff0000 	.word	0xffff0000
   b68ac:	000b9da3 	.word	0x000b9da3
   b68b0:	000b9d9c 	.word	0x000b9d9c

000b68b4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b68b4:	4b05      	ldr	r3, [pc, #20]	; (b68cc <_GLOBAL__sub_I_System+0x18>)
   b68b6:	2202      	movs	r2, #2
   b68b8:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b68ba:	4b05      	ldr	r3, [pc, #20]	; (b68d0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b68bc:	4a05      	ldr	r2, [pc, #20]	; (b68d4 <_GLOBAL__sub_I_System+0x20>)
   b68be:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b68c0:	2000      	movs	r0, #0
   b68c2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b68c6:	f7ff bd2b 	b.w	b6320 <set_system_mode>
   b68ca:	bf00      	nop
   b68cc:	2003e664 	.word	0x2003e664
   b68d0:	2003e658 	.word	0x2003e658
   b68d4:	ffff0000 	.word	0xffff0000

000b68d8 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b68d8:	b510      	push	{r4, lr}
   b68da:	4604      	mov	r4, r0
{
    free(buffer);
   b68dc:	6800      	ldr	r0, [r0, #0]
   b68de:	f7ff fe0f 	bl	b6500 <free>
}
   b68e2:	4620      	mov	r0, r4
   b68e4:	bd10      	pop	{r4, pc}

000b68e6 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b68e6:	b510      	push	{r4, lr}
   b68e8:	4604      	mov	r4, r0
    if (buffer) {
   b68ea:	6800      	ldr	r0, [r0, #0]
   b68ec:	b108      	cbz	r0, b68f2 <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b68ee:	f7ff fe07 	bl	b6500 <free>
    }
    buffer = nullptr;
   b68f2:	2300      	movs	r3, #0
    capacity = len = 0;
   b68f4:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b68f8:	6023      	str	r3, [r4, #0]
}
   b68fa:	bd10      	pop	{r4, pc}

000b68fc <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b68fc:	b538      	push	{r3, r4, r5, lr}
   b68fe:	4604      	mov	r4, r0
   b6900:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6902:	6800      	ldr	r0, [r0, #0]
   b6904:	3101      	adds	r1, #1
   b6906:	f7ff fe03 	bl	b6510 <realloc>
    if (newbuffer) {
   b690a:	b110      	cbz	r0, b6912 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   b690c:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b6910:	2001      	movs	r0, #1
    }
    return 0;
}
   b6912:	bd38      	pop	{r3, r4, r5, pc}

000b6914 <_ZN6String7reserveEj>:
{
   b6914:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b6916:	6803      	ldr	r3, [r0, #0]
{
   b6918:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b691a:	b123      	cbz	r3, b6926 <_ZN6String7reserveEj+0x12>
   b691c:	6843      	ldr	r3, [r0, #4]
   b691e:	428b      	cmp	r3, r1
   b6920:	d301      	bcc.n	b6926 <_ZN6String7reserveEj+0x12>
   b6922:	2001      	movs	r0, #1
}
   b6924:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b6926:	4620      	mov	r0, r4
   b6928:	f7ff ffe8 	bl	b68fc <_ZN6String12changeBufferEj>
   b692c:	2800      	cmp	r0, #0
   b692e:	d0f9      	beq.n	b6924 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b6930:	68a3      	ldr	r3, [r4, #8]
   b6932:	2b00      	cmp	r3, #0
   b6934:	d1f5      	bne.n	b6922 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b6936:	6822      	ldr	r2, [r4, #0]
   b6938:	7013      	strb	r3, [r2, #0]
   b693a:	e7f2      	b.n	b6922 <_ZN6String7reserveEj+0xe>

000b693c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b693c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b693e:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b6940:	4611      	mov	r1, r2
   b6942:	9201      	str	r2, [sp, #4]
{
   b6944:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b6946:	f7ff ffe5 	bl	b6914 <_ZN6String7reserveEj>
   b694a:	9a01      	ldr	r2, [sp, #4]
   b694c:	b928      	cbnz	r0, b695a <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b694e:	4620      	mov	r0, r4
   b6950:	f7ff ffc9 	bl	b68e6 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b6954:	4620      	mov	r0, r4
   b6956:	b003      	add	sp, #12
   b6958:	bd30      	pop	{r4, r5, pc}
    len = length;
   b695a:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b695c:	4629      	mov	r1, r5
   b695e:	6820      	ldr	r0, [r4, #0]
   b6960:	f002 ff22 	bl	b97a8 <memcpy>
    buffer[len] = 0;
   b6964:	6822      	ldr	r2, [r4, #0]
   b6966:	68a3      	ldr	r3, [r4, #8]
   b6968:	2100      	movs	r1, #0
   b696a:	54d1      	strb	r1, [r2, r3]
    return *this;
   b696c:	e7f2      	b.n	b6954 <_ZN6String4copyEPKcj+0x18>

000b696e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b696e:	b538      	push	{r3, r4, r5, lr}
   b6970:	4605      	mov	r5, r0
    if (buffer) {
   b6972:	6800      	ldr	r0, [r0, #0]
{
   b6974:	460c      	mov	r4, r1
    if (buffer) {
   b6976:	b170      	cbz	r0, b6996 <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
   b6978:	686a      	ldr	r2, [r5, #4]
   b697a:	688b      	ldr	r3, [r1, #8]
   b697c:	429a      	cmp	r2, r3
   b697e:	d308      	bcc.n	b6992 <_ZN6String4moveERS_+0x24>
   b6980:	6809      	ldr	r1, [r1, #0]
   b6982:	b131      	cbz	r1, b6992 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b6984:	f002 ff8f 	bl	b98a6 <strcpy>
            len = rhs.len;
   b6988:	68a3      	ldr	r3, [r4, #8]
   b698a:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b698c:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
   b698e:	60a3      	str	r3, [r4, #8]
}
   b6990:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b6992:	f7ff fdb5 	bl	b6500 <free>
    buffer = rhs.buffer;
   b6996:	6823      	ldr	r3, [r4, #0]
   b6998:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
   b699a:	6863      	ldr	r3, [r4, #4]
   b699c:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b699e:	68a3      	ldr	r3, [r4, #8]
   b69a0:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b69a2:	2300      	movs	r3, #0
    rhs.capacity = 0;
   b69a4:	e9c4 3300 	strd	r3, r3, [r4]
   b69a8:	e7f1      	b.n	b698e <_ZN6String4moveERS_+0x20>

000b69aa <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b69aa:	b510      	push	{r4, lr}
    buffer = nullptr;
   b69ac:	2300      	movs	r3, #0
    capacity = 0;
   b69ae:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b69b2:	4604      	mov	r4, r0
    len = 0;
   b69b4:	6083      	str	r3, [r0, #8]
    flags = 0;
   b69b6:	7303      	strb	r3, [r0, #12]
    move(rval);
   b69b8:	f7ff ffd9 	bl	b696e <_ZN6String4moveERS_>
}
   b69bc:	4620      	mov	r0, r4
   b69be:	bd10      	pop	{r4, pc}

000b69c0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b69c0:	4288      	cmp	r0, r1
{
   b69c2:	b510      	push	{r4, lr}
   b69c4:	4604      	mov	r4, r0
    if (this == &rhs) {
   b69c6:	d005      	beq.n	b69d4 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b69c8:	680b      	ldr	r3, [r1, #0]
   b69ca:	b12b      	cbz	r3, b69d8 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b69cc:	688a      	ldr	r2, [r1, #8]
   b69ce:	4619      	mov	r1, r3
   b69d0:	f7ff ffb4 	bl	b693c <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b69d4:	4620      	mov	r0, r4
   b69d6:	bd10      	pop	{r4, pc}
        invalidate();
   b69d8:	f7ff ff85 	bl	b68e6 <_ZN6String10invalidateEv>
   b69dc:	e7fa      	b.n	b69d4 <_ZN6StringaSERKS_+0x14>

000b69de <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b69de:	b510      	push	{r4, lr}
    buffer = nullptr;
   b69e0:	2300      	movs	r3, #0
String::String(const String &value)
   b69e2:	4604      	mov	r4, r0
    capacity = 0;
   b69e4:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b69e8:	6083      	str	r3, [r0, #8]
    flags = 0;
   b69ea:	7303      	strb	r3, [r0, #12]
    *this = value;
   b69ec:	f7ff ffe8 	bl	b69c0 <_ZN6StringaSERKS_>
}
   b69f0:	4620      	mov	r0, r4
   b69f2:	bd10      	pop	{r4, pc}

000b69f4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b69f4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b69f6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b69f8:	4604      	mov	r4, r0
      if (_M_manager)
   b69fa:	b113      	cbz	r3, b6a02 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b69fc:	2203      	movs	r2, #3
   b69fe:	4601      	mov	r1, r0
   b6a00:	4798      	blx	r3
    }
   b6a02:	4620      	mov	r0, r4
   b6a04:	bd10      	pop	{r4, pc}

000b6a06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6a06:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6a08:	6843      	ldr	r3, [r0, #4]
   b6a0a:	3b01      	subs	r3, #1
    {
   b6a0c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6a0e:	6043      	str	r3, [r0, #4]
   b6a10:	b963      	cbnz	r3, b6a2c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6a12:	6803      	ldr	r3, [r0, #0]
   b6a14:	689b      	ldr	r3, [r3, #8]
   b6a16:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6a18:	68a3      	ldr	r3, [r4, #8]
   b6a1a:	3b01      	subs	r3, #1
   b6a1c:	60a3      	str	r3, [r4, #8]
   b6a1e:	b92b      	cbnz	r3, b6a2c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6a20:	6823      	ldr	r3, [r4, #0]
   b6a22:	4620      	mov	r0, r4
   b6a24:	68db      	ldr	r3, [r3, #12]
    }
   b6a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6a2a:	4718      	bx	r3
    }
   b6a2c:	bd10      	pop	{r4, pc}

000b6a2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6a2e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6a30:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6a34:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6a36:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b6a3a:	42ae      	cmp	r6, r5
   b6a3c:	d004      	beq.n	b6a48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b6a3e:	4628      	mov	r0, r5
   b6a40:	f7ff ff4a 	bl	b68d8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b6a44:	3510      	adds	r5, #16
   b6a46:	e7f8      	b.n	b6a3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6a48:	6820      	ldr	r0, [r4, #0]
   b6a4a:	f7ff fd59 	bl	b6500 <free>
    AllocatorT::free(data_);
}
   b6a4e:	4620      	mov	r0, r4
   b6a50:	bd70      	pop	{r4, r5, r6, pc}

000b6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6a52:	b510      	push	{r4, lr}
   b6a54:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b6a56:	6800      	ldr	r0, [r0, #0]
   b6a58:	b108      	cbz	r0, b6a5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b6a5a:	f7ff ffd4 	bl	b6a06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b6a5e:	4620      	mov	r0, r4
   b6a60:	bd10      	pop	{r4, pc}

000b6a62 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6a62:	b513      	push	{r0, r1, r4, lr}
   b6a64:	460b      	mov	r3, r1
   b6a66:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a68:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6a6c:	466c      	mov	r4, sp
   b6a6e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6a72:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6a76:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6a7a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6a7e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6a82:	b002      	add	sp, #8
   b6a84:	bd10      	pop	{r4, pc}
	...

000b6a88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6a88:	4802      	ldr	r0, [pc, #8]	; (b6a94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6a8a:	2300      	movs	r3, #0
   b6a8c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6a8e:	f7ff baaf 	b.w	b5ff0 <os_mutex_recursive_create>
   b6a92:	bf00      	nop
   b6a94:	2003e668 	.word	0x2003e668

000b6a98 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a9a:	4606      	mov	r6, r0
   b6a9c:	460d      	mov	r5, r1
  size_t n = 0;
   b6a9e:	188f      	adds	r7, r1, r2
   b6aa0:	2400      	movs	r4, #0
  while (size--) {
   b6aa2:	42bd      	cmp	r5, r7
   b6aa4:	d00c      	beq.n	b6ac0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6aa6:	6833      	ldr	r3, [r6, #0]
   b6aa8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6aac:	689b      	ldr	r3, [r3, #8]
   b6aae:	4630      	mov	r0, r6
   b6ab0:	4798      	blx	r3
     if (chunk>=0)
   b6ab2:	1e03      	subs	r3, r0, #0
   b6ab4:	db01      	blt.n	b6aba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6ab6:	441c      	add	r4, r3
  while (size--) {
   b6ab8:	e7f3      	b.n	b6aa2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6aba:	2c00      	cmp	r4, #0
   b6abc:	bf08      	it	eq
   b6abe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6ac0:	4620      	mov	r0, r4
   b6ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ac4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6ac4:	b508      	push	{r3, lr}
  return write(str);
   b6ac6:	f7fe fda3 	bl	b5610 <_ZN5Print5writeEPKc>
}
   b6aca:	bd08      	pop	{r3, pc}

000b6acc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6acc:	6803      	ldr	r3, [r0, #0]
   b6ace:	689b      	ldr	r3, [r3, #8]
   b6ad0:	4718      	bx	r3

000b6ad2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6ad2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6ad4:	210d      	movs	r1, #13
{
   b6ad6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6ad8:	f7ff fff8 	bl	b6acc <_ZN5Print5printEc>
  n += print('\n');
   b6adc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6ade:	4604      	mov	r4, r0
  n += print('\n');
   b6ae0:	4628      	mov	r0, r5
   b6ae2:	f7ff fff3 	bl	b6acc <_ZN5Print5printEc>
  return n;
}
   b6ae6:	4420      	add	r0, r4
   b6ae8:	bd38      	pop	{r3, r4, r5, pc}

000b6aea <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6aea:	b530      	push	{r4, r5, lr}
   b6aec:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6aee:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6af0:	2a01      	cmp	r2, #1
  *str = '\0';
   b6af2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6af6:	bf98      	it	ls
   b6af8:	220a      	movls	r2, #10
   b6afa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6afc:	460d      	mov	r5, r1
   b6afe:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6b02:	fb01 5312 	mls	r3, r1, r2, r5
   b6b06:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6b0a:	2b09      	cmp	r3, #9
   b6b0c:	bf94      	ite	ls
   b6b0e:	3330      	addls	r3, #48	; 0x30
   b6b10:	3337      	addhi	r3, #55	; 0x37
   b6b12:	b2db      	uxtb	r3, r3
  } while(n);
   b6b14:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6b16:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6b1a:	d9ef      	bls.n	b6afc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6b1c:	4621      	mov	r1, r4
   b6b1e:	f7fe fd77 	bl	b5610 <_ZN5Print5writeEPKc>
}
   b6b22:	b00b      	add	sp, #44	; 0x2c
   b6b24:	bd30      	pop	{r4, r5, pc}

000b6b26 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6b2a:	b086      	sub	sp, #24
   b6b2c:	af00      	add	r7, sp, #0
   b6b2e:	4605      	mov	r5, r0
   b6b30:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b32:	1d38      	adds	r0, r7, #4
   b6b34:	2114      	movs	r1, #20
{
   b6b36:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6b38:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b3a:	f7ff fcf9 	bl	b6530 <vsnprintf>

    if (n<bufsize)
   b6b3e:	2813      	cmp	r0, #19
   b6b40:	d80e      	bhi.n	b6b60 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6b42:	1d39      	adds	r1, r7, #4
   b6b44:	4628      	mov	r0, r5
   b6b46:	f7fe fd63 	bl	b5610 <_ZN5Print5writeEPKc>
   b6b4a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6b4c:	b11e      	cbz	r6, b6b56 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6b4e:	4628      	mov	r0, r5
   b6b50:	f7ff ffbf 	bl	b6ad2 <_ZN5Print7printlnEv>
   b6b54:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6b56:	4620      	mov	r0, r4
   b6b58:	3718      	adds	r7, #24
   b6b5a:	46bd      	mov	sp, r7
   b6b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6b60:	f100 0308 	add.w	r3, r0, #8
   b6b64:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6b68:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6b6a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6b6e:	4622      	mov	r2, r4
   b6b70:	1c41      	adds	r1, r0, #1
   b6b72:	683b      	ldr	r3, [r7, #0]
   b6b74:	4668      	mov	r0, sp
   b6b76:	f7ff fcdb 	bl	b6530 <vsnprintf>
  return write(str);
   b6b7a:	4669      	mov	r1, sp
   b6b7c:	4628      	mov	r0, r5
   b6b7e:	f7fe fd47 	bl	b5610 <_ZN5Print5writeEPKc>
   b6b82:	4604      	mov	r4, r0
   b6b84:	46c5      	mov	sp, r8
   b6b86:	e7e1      	b.n	b6b4c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6b88 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b6b88:	6880      	ldr	r0, [r0, #8]
   b6b8a:	6803      	ldr	r3, [r0, #0]
   b6b8c:	68db      	ldr	r3, [r3, #12]
   b6b8e:	4718      	bx	r3

000b6b90 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b6b90:	4770      	bx	lr

000b6b92 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b6b92:	4608      	mov	r0, r1
   b6b94:	b111      	cbz	r1, b6b9c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b6b96:	680b      	ldr	r3, [r1, #0]
   b6b98:	685b      	ldr	r3, [r3, #4]
   b6b9a:	4718      	bx	r3
}
   b6b9c:	4770      	bx	lr

000b6b9e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b6b9e:	4770      	bx	lr

000b6ba0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b6ba0:	4770      	bx	lr

000b6ba2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b6ba2:	4770      	bx	lr

000b6ba4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b6ba4:	4770      	bx	lr

000b6ba6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b6ba6:	b538      	push	{r3, r4, r5, lr}
   b6ba8:	4604      	mov	r4, r0
   b6baa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b6bac:	6800      	ldr	r0, [r0, #0]
   b6bae:	212e      	movs	r1, #46	; 0x2e
   b6bb0:	f002 fe65 	bl	b987e <strchrnul>
    size = s - category;
   b6bb4:	6823      	ldr	r3, [r4, #0]
   b6bb6:	1ac3      	subs	r3, r0, r3
   b6bb8:	602b      	str	r3, [r5, #0]
    if (size) {
   b6bba:	b123      	cbz	r3, b6bc6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b6bbc:	7803      	ldrb	r3, [r0, #0]
   b6bbe:	b103      	cbz	r3, b6bc2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b6bc0:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b6bc2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6bc4:	6020      	str	r0, [r4, #0]
}
   b6bc6:	4618      	mov	r0, r3
   b6bc8:	bd38      	pop	{r3, r4, r5, pc}

000b6bca <_ZN5spark16JSONStreamWriterD0Ev>:
   b6bca:	b510      	push	{r4, lr}
   b6bcc:	210c      	movs	r1, #12
   b6bce:	4604      	mov	r4, r0
   b6bd0:	f7fd fa63 	bl	b409a <_ZdlPvj>
   b6bd4:	4620      	mov	r0, r4
   b6bd6:	bd10      	pop	{r4, pc}

000b6bd8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b6bd8:	b510      	push	{r4, lr}
   b6bda:	2104      	movs	r1, #4
   b6bdc:	4604      	mov	r4, r0
   b6bde:	f7fd fa5c 	bl	b409a <_ZdlPvj>
   b6be2:	4620      	mov	r0, r4
   b6be4:	bd10      	pop	{r4, pc}

000b6be6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b6be6:	b510      	push	{r4, lr}
   b6be8:	2104      	movs	r1, #4
   b6bea:	4604      	mov	r4, r0
   b6bec:	f7fd fa55 	bl	b409a <_ZdlPvj>
   b6bf0:	4620      	mov	r0, r4
   b6bf2:	bd10      	pop	{r4, pc}

000b6bf4 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6bf4:	f7ff ba0c 	b.w	b6010 <os_mutex_recursive_lock>

000b6bf8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b6bf8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b6bfa:	f002 fe4a 	bl	b9892 <strcmp>
}
   b6bfe:	fab0 f080 	clz	r0, r0
   b6c02:	0940      	lsrs	r0, r0, #5
   b6c04:	bd08      	pop	{r3, pc}

000b6c06 <__tcf_1>:
   b6c06:	4770      	bx	lr

000b6c08 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b6c08:	b510      	push	{r4, lr}
   b6c0a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b6c0c:	f001 fc50 	bl	b84b0 <_Z16_fetch_usbserialv>
   b6c10:	4284      	cmp	r4, r0
   b6c12:	d010      	beq.n	b6c36 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b6c14:	f002 f8e2 	bl	b8ddc <_Z22__fetch_global_Serial1v>
   b6c18:	4284      	cmp	r4, r0
   b6c1a:	d105      	bne.n	b6c28 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b6c1c:	f002 f8de 	bl	b8ddc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b6c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b6c24:	f001 bd0f 	b.w	b8646 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b6c28:	b12c      	cbz	r4, b6c36 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b6c2a:	6823      	ldr	r3, [r4, #0]
   b6c2c:	4620      	mov	r0, r4
   b6c2e:	685b      	ldr	r3, [r3, #4]
}
   b6c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6c34:	4718      	bx	r3
   b6c36:	bd10      	pop	{r4, pc}

000b6c38 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6c38:	680b      	ldr	r3, [r1, #0]
   b6c3a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6c3c:	684b      	ldr	r3, [r1, #4]
   b6c3e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6c40:	b113      	cbz	r3, b6c48 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b6c42:	685a      	ldr	r2, [r3, #4]
   b6c44:	3201      	adds	r2, #1
   b6c46:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6c48:	4770      	bx	lr

000b6c4a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b6c4a:	b513      	push	{r0, r1, r4, lr}
   b6c4c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b6c4e:	4608      	mov	r0, r1
   b6c50:	9101      	str	r1, [sp, #4]
   b6c52:	f002 fe4e 	bl	b98f2 <strlen>
   b6c56:	9901      	ldr	r1, [sp, #4]
   b6c58:	4602      	mov	r2, r0
   b6c5a:	4620      	mov	r0, r4
}
   b6c5c:	b002      	add	sp, #8
   b6c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b6c62:	f002 b811 	b.w	b8c88 <_ZN5spark10JSONWriter5valueEPKcj>

000b6c66 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b6c66:	b513      	push	{r0, r1, r4, lr}
   b6c68:	4604      	mov	r4, r0
    write(str, strlen(str));
   b6c6a:	4608      	mov	r0, r1
   b6c6c:	9101      	str	r1, [sp, #4]
   b6c6e:	f002 fe40 	bl	b98f2 <strlen>
   b6c72:	6823      	ldr	r3, [r4, #0]
   b6c74:	9901      	ldr	r1, [sp, #4]
   b6c76:	68db      	ldr	r3, [r3, #12]
   b6c78:	4602      	mov	r2, r0
   b6c7a:	4620      	mov	r0, r4
}
   b6c7c:	b002      	add	sp, #8
   b6c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b6c82:	4718      	bx	r3

000b6c84 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b6c84:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6c86:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b6c88:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6c8c:	68db      	ldr	r3, [r3, #12]
   b6c8e:	2201      	movs	r2, #1
   b6c90:	f10d 0107 	add.w	r1, sp, #7
   b6c94:	4798      	blx	r3
}
   b6c96:	b003      	add	sp, #12
   b6c98:	f85d fb04 	ldr.w	pc, [sp], #4

000b6c9c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b6c9c:	b40e      	push	{r1, r2, r3}
   b6c9e:	b503      	push	{r0, r1, lr}
   b6ca0:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b6ca2:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b6ca4:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b6ca8:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b6caa:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b6cac:	f7ff ff3b 	bl	b6b26 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b6cb0:	b002      	add	sp, #8
   b6cb2:	f85d eb04 	ldr.w	lr, [sp], #4
   b6cb6:	b003      	add	sp, #12
   b6cb8:	4770      	bx	lr

000b6cba <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b6cba:	680a      	ldr	r2, [r1, #0]
   b6cbc:	6002      	str	r2, [r0, #0]
   b6cbe:	684a      	ldr	r2, [r1, #4]
   b6cc0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b6cc2:	2200      	movs	r2, #0
   b6cc4:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b6cc8:	b510      	push	{r4, lr}
   b6cca:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6ccc:	688c      	ldr	r4, [r1, #8]
   b6cce:	6084      	str	r4, [r0, #8]
   b6cd0:	68cc      	ldr	r4, [r1, #12]
   b6cd2:	60c4      	str	r4, [r0, #12]
   b6cd4:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b6cd6:	608a      	str	r2, [r1, #8]
   b6cd8:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6cda:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b6cdc:	610a      	str	r2, [r1, #16]
   b6cde:	bd10      	pop	{r4, pc}

000b6ce0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b6ce4:	e9d0 8400 	ldrd	r8, r4, [r0]
   b6ce8:	f04f 0a14 	mov.w	sl, #20
   b6cec:	9300      	str	r3, [sp, #0]
   b6cee:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b6cf2:	4b18      	ldr	r3, [pc, #96]	; (b6d54 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b6cf4:	10a4      	asrs	r4, r4, #2
   b6cf6:	4617      	mov	r7, r2
   b6cf8:	435c      	muls	r4, r3
   b6cfa:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b6cfc:	2c00      	cmp	r4, #0
   b6cfe:	dd21      	ble.n	b6d44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b6d00:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b6d02:	fb0a f006 	mul.w	r0, sl, r6
   b6d06:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b6d0a:	463a      	mov	r2, r7
   b6d0c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b6d10:	5828      	ldr	r0, [r5, r0]
   b6d12:	9101      	str	r1, [sp, #4]
   b6d14:	455f      	cmp	r7, fp
   b6d16:	bf28      	it	cs
   b6d18:	465a      	movcs	r2, fp
   b6d1a:	f002 fdf2 	bl	b9902 <strncmp>
                if (cmp == 0) {
   b6d1e:	2800      	cmp	r0, #0
   b6d20:	9901      	ldr	r1, [sp, #4]
   b6d22:	f04f 0301 	mov.w	r3, #1
   b6d26:	d10b      	bne.n	b6d40 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b6d28:	455f      	cmp	r7, fp
   b6d2a:	d103      	bne.n	b6d34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b6d2c:	9a00      	ldr	r2, [sp, #0]
   b6d2e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6d30:	4634      	mov	r4, r6
   b6d32:	e7e3      	b.n	b6cfc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b6d34:	d9fc      	bls.n	b6d30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b6d36:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b6d38:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b6d3c:	3e01      	subs	r6, #1
   b6d3e:	e7f7      	b.n	b6d30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b6d40:	dbf9      	blt.n	b6d36 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b6d42:	e7f5      	b.n	b6d30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b6d44:	eba5 0508 	sub.w	r5, r5, r8
}
   b6d48:	4802      	ldr	r0, [pc, #8]	; (b6d54 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b6d4a:	10ad      	asrs	r5, r5, #2
   b6d4c:	4368      	muls	r0, r5
   b6d4e:	b003      	add	sp, #12
   b6d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6d54:	cccccccd 	.word	0xcccccccd

000b6d58 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6d58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b6d5a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b6d5c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6d5e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b6d60:	b303      	cbz	r3, b6da4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b6d62:	b1f9      	cbz	r1, b6da4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b6d64:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b6d66:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b6d6a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b6d6c:	a903      	add	r1, sp, #12
   b6d6e:	a801      	add	r0, sp, #4
   b6d70:	f7ff ff19 	bl	b6ba6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6d74:	4601      	mov	r1, r0
   b6d76:	b1a8      	cbz	r0, b6da4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b6d78:	f10d 030b 	add.w	r3, sp, #11
   b6d7c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b6d7e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6d82:	4620      	mov	r0, r4
   b6d84:	f7ff ffac 	bl	b6ce0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b6d88:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b6d8c:	b153      	cbz	r3, b6da4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b6d8e:	6823      	ldr	r3, [r4, #0]
   b6d90:	2414      	movs	r4, #20
   b6d92:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b6d96:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b6d98:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b6d9c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b6d9e:	bfa8      	it	ge
   b6da0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b6da2:	e7e3      	b.n	b6d6c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b6da4:	4628      	mov	r0, r5
   b6da6:	b004      	add	sp, #16
   b6da8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6dac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b6dac:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b6dae:	4c09      	ldr	r4, [pc, #36]	; (b6dd4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b6db0:	7823      	ldrb	r3, [r4, #0]
   b6db2:	f3bf 8f5b 	dmb	ish
   b6db6:	07db      	lsls	r3, r3, #31
   b6db8:	d409      	bmi.n	b6dce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6dba:	4620      	mov	r0, r4
   b6dbc:	f7fd f97c 	bl	b40b8 <__cxa_guard_acquire>
   b6dc0:	b128      	cbz	r0, b6dce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6dc2:	4620      	mov	r0, r4
   b6dc4:	f7fd f97d 	bl	b40c2 <__cxa_guard_release>
   b6dc8:	4803      	ldr	r0, [pc, #12]	; (b6dd8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b6dca:	f002 fccf 	bl	b976c <atexit>
}
   b6dce:	4803      	ldr	r0, [pc, #12]	; (b6ddc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b6dd0:	bd10      	pop	{r4, pc}
   b6dd2:	bf00      	nop
   b6dd4:	2003e670 	.word	0x2003e670
   b6dd8:	000b6b9f 	.word	0x000b6b9f
   b6ddc:	2003dd38 	.word	0x2003dd38

000b6de0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b6de0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b6de2:	4c09      	ldr	r4, [pc, #36]	; (b6e08 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b6de4:	7823      	ldrb	r3, [r4, #0]
   b6de6:	f3bf 8f5b 	dmb	ish
   b6dea:	07db      	lsls	r3, r3, #31
   b6dec:	d409      	bmi.n	b6e02 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6dee:	4620      	mov	r0, r4
   b6df0:	f7fd f962 	bl	b40b8 <__cxa_guard_acquire>
   b6df4:	b128      	cbz	r0, b6e02 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6df6:	4620      	mov	r0, r4
   b6df8:	f7fd f963 	bl	b40c2 <__cxa_guard_release>
   b6dfc:	4803      	ldr	r0, [pc, #12]	; (b6e0c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b6dfe:	f002 fcb5 	bl	b976c <atexit>
    return &factory;
}
   b6e02:	4803      	ldr	r0, [pc, #12]	; (b6e10 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b6e04:	bd10      	pop	{r4, pc}
   b6e06:	bf00      	nop
   b6e08:	2003e674 	.word	0x2003e674
   b6e0c:	000b6c07 	.word	0x000b6c07
   b6e10:	2003dd3c 	.word	0x2003dd3c

000b6e14 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b6e14:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b6e16:	2500      	movs	r5, #0
   b6e18:	4604      	mov	r4, r0
   b6e1a:	e9c0 5500 	strd	r5, r5, [r0]
   b6e1e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b6e22:	6085      	str	r5, [r0, #8]
   b6e24:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b6e26:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b6e2a:	f7ff f8e1 	bl	b5ff0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b6e2e:	f7ff ffbd 	bl	b6dac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b6e32:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b6e34:	f7ff ffd4 	bl	b6de0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b6e38:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b6e3a:	6220      	str	r0, [r4, #32]
}
   b6e3c:	4620      	mov	r0, r4
   b6e3e:	bd38      	pop	{r3, r4, r5, pc}

000b6e40 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b6e40:	b510      	push	{r4, lr}
    static LogManager mgr;
   b6e42:	4c0a      	ldr	r4, [pc, #40]	; (b6e6c <_ZN5spark10LogManager8instanceEv+0x2c>)
   b6e44:	7823      	ldrb	r3, [r4, #0]
   b6e46:	f3bf 8f5b 	dmb	ish
   b6e4a:	07db      	lsls	r3, r3, #31
   b6e4c:	d40c      	bmi.n	b6e68 <_ZN5spark10LogManager8instanceEv+0x28>
   b6e4e:	4620      	mov	r0, r4
   b6e50:	f7fd f932 	bl	b40b8 <__cxa_guard_acquire>
   b6e54:	b140      	cbz	r0, b6e68 <_ZN5spark10LogManager8instanceEv+0x28>
   b6e56:	4806      	ldr	r0, [pc, #24]	; (b6e70 <_ZN5spark10LogManager8instanceEv+0x30>)
   b6e58:	f7ff ffdc 	bl	b6e14 <_ZN5spark10LogManagerC1Ev>
   b6e5c:	4620      	mov	r0, r4
   b6e5e:	f7fd f930 	bl	b40c2 <__cxa_guard_release>
   b6e62:	4804      	ldr	r0, [pc, #16]	; (b6e74 <_ZN5spark10LogManager8instanceEv+0x34>)
   b6e64:	f002 fc82 	bl	b976c <atexit>
    return &mgr;
}
   b6e68:	4801      	ldr	r0, [pc, #4]	; (b6e70 <_ZN5spark10LogManager8instanceEv+0x30>)
   b6e6a:	bd10      	pop	{r4, pc}
   b6e6c:	2003e66c 	.word	0x2003e66c
   b6e70:	2003e67c 	.word	0x2003e67c
   b6e74:	000b7395 	.word	0x000b7395

000b6e78 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b6e78:	4a02      	ldr	r2, [pc, #8]	; (b6e84 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b6e7a:	4903      	ldr	r1, [pc, #12]	; (b6e88 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b6e7c:	4803      	ldr	r0, [pc, #12]	; (b6e8c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b6e7e:	2300      	movs	r3, #0
   b6e80:	f7ff ba3e 	b.w	b6300 <log_set_callbacks>
   b6e84:	000b7179 	.word	0x000b7179
   b6e88:	000b7105 	.word	0x000b7105
   b6e8c:	000b7085 	.word	0x000b7085

000b6e90 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b6e90:	2300      	movs	r3, #0
   b6e92:	461a      	mov	r2, r3
   b6e94:	4619      	mov	r1, r3
   b6e96:	4618      	mov	r0, r3
   b6e98:	f7ff ba32 	b.w	b6300 <log_set_callbacks>

000b6e9c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b6e9e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6ea0:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6ea2:	4668      	mov	r0, sp
   b6ea4:	f7ff fec8 	bl	b6c38 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b6ea8:	466a      	mov	r2, sp
   b6eaa:	4629      	mov	r1, r5
   b6eac:	4620      	mov	r0, r4
   b6eae:	f001 fe0b 	bl	b8ac8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b6eb2:	a801      	add	r0, sp, #4
   b6eb4:	f7ff fdcd 	bl	b6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6eb8:	4620      	mov	r0, r4
   b6eba:	b003      	add	sp, #12
   b6ebc:	bd30      	pop	{r4, r5, pc}

000b6ebe <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6ebe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b6ec0:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6ec2:	4604      	mov	r4, r0
   b6ec4:	4668      	mov	r0, sp
   b6ec6:	f7ff feb7 	bl	b6c38 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b6eca:	466a      	mov	r2, sp
   b6ecc:	4629      	mov	r1, r5
   b6ece:	4620      	mov	r0, r4
   b6ed0:	f001 fdd6 	bl	b8a80 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b6ed4:	a801      	add	r0, sp, #4
   b6ed6:	f7ff fdbc 	bl	b6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6eda:	4620      	mov	r0, r4
   b6edc:	b003      	add	sp, #12
   b6ede:	bd30      	pop	{r4, r5, pc}

000b6ee0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b6ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b6ee2:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b6ee4:	4604      	mov	r4, r0
   b6ee6:	4668      	mov	r0, sp
   b6ee8:	f7ff fea6 	bl	b6c38 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b6eec:	466a      	mov	r2, sp
   b6eee:	4629      	mov	r1, r5
   b6ef0:	4620      	mov	r0, r4
   b6ef2:	f001 fd6e 	bl	b89d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b6ef6:	a801      	add	r0, sp, #4
   b6ef8:	f7ff fdab 	bl	b6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6efc:	4620      	mov	r0, r4
   b6efe:	b003      	add	sp, #12
   b6f00:	bd30      	pop	{r4, r5, pc}
	...

000b6f04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b6f04:	b570      	push	{r4, r5, r6, lr}
   b6f06:	b08a      	sub	sp, #40	; 0x28
   b6f08:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b6f0a:	4601      	mov	r1, r0
   b6f0c:	a804      	add	r0, sp, #16
   b6f0e:	f7ff ffc5 	bl	b6e9c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b6f12:	4e14      	ldr	r6, [pc, #80]	; (b6f64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b6f14:	a804      	add	r0, sp, #16
   b6f16:	f001 fdef 	bl	b8af8 <_ZN5spark18JSONObjectIterator4nextEv>
   b6f1a:	b1e8      	cbz	r0, b6f58 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b6f1c:	a904      	add	r1, sp, #16
   b6f1e:	4668      	mov	r0, sp
   b6f20:	f7ff ffcd 	bl	b6ebe <_ZNK5spark18JSONObjectIterator4nameEv>
   b6f24:	9802      	ldr	r0, [sp, #8]
   b6f26:	4631      	mov	r1, r6
   b6f28:	f7ff fe66 	bl	b6bf8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b6f2c:	4604      	mov	r4, r0
   b6f2e:	b110      	cbz	r0, b6f36 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b6f30:	1e2c      	subs	r4, r5, #0
   b6f32:	bf18      	it	ne
   b6f34:	2401      	movne	r4, #1
   b6f36:	a801      	add	r0, sp, #4
   b6f38:	f7ff fd8b 	bl	b6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6f3c:	2c00      	cmp	r4, #0
   b6f3e:	d0e9      	beq.n	b6f14 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b6f40:	a904      	add	r1, sp, #16
   b6f42:	4668      	mov	r0, sp
   b6f44:	f7ff ffcc 	bl	b6ee0 <_ZNK5spark18JSONObjectIterator5valueEv>
   b6f48:	4668      	mov	r0, sp
   b6f4a:	f001 fd78 	bl	b8a3e <_ZNK5spark9JSONValue5toIntEv>
   b6f4e:	6028      	str	r0, [r5, #0]
   b6f50:	a801      	add	r0, sp, #4
   b6f52:	f7ff fd7e 	bl	b6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6f56:	e7dd      	b.n	b6f14 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b6f58:	a805      	add	r0, sp, #20
   b6f5a:	f7ff fd7a 	bl	b6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6f5e:	b00a      	add	sp, #40	; 0x28
   b6f60:	bd70      	pop	{r4, r5, r6, pc}
   b6f62:	bf00      	nop
   b6f64:	000b9dca 	.word	0x000b9dca

000b6f68 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6f6a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b6f6c:	4620      	mov	r0, r4
   b6f6e:	4913      	ldr	r1, [pc, #76]	; (b6fbc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6f70:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b6f72:	f002 fc8e 	bl	b9892 <strcmp>
   b6f76:	b950      	cbnz	r0, b6f8e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b6f78:	f001 fa9a 	bl	b84b0 <_Z16_fetch_usbserialv>
   b6f7c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6f80:	f001 fa86 	bl	b8490 <_ZN9USBSerial5beginEl>
}
   b6f84:	b003      	add	sp, #12
   b6f86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b6f8a:	f001 ba91 	b.w	b84b0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b6f8e:	490c      	ldr	r1, [pc, #48]	; (b6fc0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b6f90:	4620      	mov	r0, r4
   b6f92:	f002 fc7e 	bl	b9892 <strcmp>
   b6f96:	b978      	cbnz	r0, b6fb8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b6f98:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b6f9c:	a901      	add	r1, sp, #4
   b6f9e:	4628      	mov	r0, r5
        int baud = 9600;
   b6fa0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b6fa2:	f7ff ffaf 	bl	b6f04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b6fa6:	f001 ff19 	bl	b8ddc <_Z22__fetch_global_Serial1v>
   b6faa:	9901      	ldr	r1, [sp, #4]
   b6fac:	f001 fb48 	bl	b8640 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b6fb0:	f001 ff14 	bl	b8ddc <_Z22__fetch_global_Serial1v>
}
   b6fb4:	b003      	add	sp, #12
   b6fb6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b6fb8:	2000      	movs	r0, #0
   b6fba:	e7fb      	b.n	b6fb4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b6fbc:	000b9dcf 	.word	0x000b9dcf
   b6fc0:	000b9dd6 	.word	0x000b9dd6

000b6fc4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6fc4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6fc6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b6fca:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6fcc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6fce:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6fd2:	42ae      	cmp	r6, r5
   b6fd4:	d005      	beq.n	b6fe2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b6fd6:	f105 0008 	add.w	r0, r5, #8
   b6fda:	f7ff fff3 	bl	b6fc4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6fde:	3514      	adds	r5, #20
   b6fe0:	e7f7      	b.n	b6fd2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6fe2:	6820      	ldr	r0, [r4, #0]
   b6fe4:	f7ff fa8c 	bl	b6500 <free>
}
   b6fe8:	4620      	mov	r0, r4
   b6fea:	bd70      	pop	{r4, r5, r6, pc}

000b6fec <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b6fec:	b510      	push	{r4, lr}
   b6fee:	4604      	mov	r4, r0
   b6ff0:	300c      	adds	r0, #12
   b6ff2:	f7ff ffe7 	bl	b6fc4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6ff6:	4620      	mov	r0, r4
   b6ff8:	f7ff fd19 	bl	b6a2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6ffc:	4620      	mov	r0, r4
   b6ffe:	bd10      	pop	{r4, pc}

000b7000 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b7000:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b7002:	4b04      	ldr	r3, [pc, #16]	; (b7014 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b7004:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b7006:	f840 3b04 	str.w	r3, [r0], #4
   b700a:	f7ff ffef 	bl	b6fec <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b700e:	4620      	mov	r0, r4
   b7010:	bd10      	pop	{r4, pc}
   b7012:	bf00      	nop
   b7014:	000b9cfc 	.word	0x000b9cfc

000b7018 <_ZN5spark16StreamLogHandlerD0Ev>:
   b7018:	b510      	push	{r4, lr}
   b701a:	4604      	mov	r4, r0
   b701c:	f7ff fff0 	bl	b7000 <_ZN5spark16StreamLogHandlerD1Ev>
   b7020:	4620      	mov	r0, r4
   b7022:	2124      	movs	r1, #36	; 0x24
   b7024:	f7fd f839 	bl	b409a <_ZdlPvj>
   b7028:	4620      	mov	r0, r4
   b702a:	bd10      	pop	{r4, pc}

000b702c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b702c:	b510      	push	{r4, lr}
   b702e:	4b03      	ldr	r3, [pc, #12]	; (b703c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b7030:	6003      	str	r3, [r0, #0]
   b7032:	4604      	mov	r4, r0
   b7034:	f7ff ffe4 	bl	b7000 <_ZN5spark16StreamLogHandlerD1Ev>
   b7038:	4620      	mov	r0, r4
   b703a:	bd10      	pop	{r4, pc}
   b703c:	000b9e70 	.word	0x000b9e70

000b7040 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b7040:	b510      	push	{r4, lr}
   b7042:	4604      	mov	r4, r0
   b7044:	f7ff fff2 	bl	b702c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b7048:	4620      	mov	r0, r4
   b704a:	2124      	movs	r1, #36	; 0x24
   b704c:	f7fd f825 	bl	b409a <_ZdlPvj>
   b7050:	4620      	mov	r0, r4
   b7052:	bd10      	pop	{r4, pc}

000b7054 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b7054:	2200      	movs	r2, #0
   b7056:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b705a:	b510      	push	{r4, lr}
        capacity_(0) {
   b705c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b705e:	680c      	ldr	r4, [r1, #0]
   b7060:	6004      	str	r4, [r0, #0]
   b7062:	684c      	ldr	r4, [r1, #4]
   b7064:	6044      	str	r4, [r0, #4]
   b7066:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7068:	600a      	str	r2, [r1, #0]
   b706a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b706c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b706e:	608a      	str	r2, [r1, #8]
}
   b7070:	bd10      	pop	{r4, pc}

000b7072 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b7072:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7074:	6803      	ldr	r3, [r0, #0]
   b7076:	4604      	mov	r4, r0
   b7078:	6818      	ldr	r0, [r3, #0]
   b707a:	f7fe ffd1 	bl	b6020 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b707e:	4620      	mov	r0, r4
   b7080:	bd10      	pop	{r4, pc}
	...

000b7084 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b7084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7088:	b087      	sub	sp, #28
   b708a:	4680      	mov	r8, r0
   b708c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b708e:	4b1c      	ldr	r3, [pc, #112]	; (b7100 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b7090:	685b      	ldr	r3, [r3, #4]
   b7092:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7096:	4689      	mov	r9, r1
   b7098:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b709a:	b96b      	cbnz	r3, b70b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b709c:	f7ff fed0 	bl	b6e40 <_ZN5spark10LogManager8instanceEv>
   b70a0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b70a2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b70a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b70a8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b70aa:	f7ff fda3 	bl	b6bf4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b70ae:	7b23      	ldrb	r3, [r4, #12]
   b70b0:	b12b      	cbz	r3, b70be <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b70b2:	a805      	add	r0, sp, #20
   b70b4:	f7ff ffdd 	bl	b7072 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b70b8:	b007      	add	sp, #28
   b70ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b70be:	2301      	movs	r3, #1
   b70c0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b70c2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b70c6:	fa5f f989 	uxtb.w	r9, r9
   b70ca:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b70ce:	45aa      	cmp	sl, r5
   b70d0:	d012      	beq.n	b70f8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b70d2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b70d6:	4631      	mov	r1, r6
   b70d8:	1d38      	adds	r0, r7, #4
   b70da:	f7ff fe3d 	bl	b6d58 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b70de:	4581      	cmp	r9, r0
   b70e0:	d3f5      	bcc.n	b70ce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b70e2:	683b      	ldr	r3, [r7, #0]
   b70e4:	9a03      	ldr	r2, [sp, #12]
   b70e6:	9200      	str	r2, [sp, #0]
   b70e8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b70ec:	464a      	mov	r2, r9
   b70ee:	4633      	mov	r3, r6
   b70f0:	4641      	mov	r1, r8
   b70f2:	4638      	mov	r0, r7
   b70f4:	47d8      	blx	fp
   b70f6:	e7ea      	b.n	b70ce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b70f8:	2300      	movs	r3, #0
   b70fa:	7323      	strb	r3, [r4, #12]
   b70fc:	e7d9      	b.n	b70b2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b70fe:	bf00      	nop
   b7100:	e000ed00 	.word	0xe000ed00

000b7104 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b7104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7108:	469b      	mov	fp, r3
   b710a:	4b1a      	ldr	r3, [pc, #104]	; (b7174 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b710c:	685b      	ldr	r3, [r3, #4]
   b710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7112:	4680      	mov	r8, r0
   b7114:	4689      	mov	r9, r1
   b7116:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b7118:	b96b      	cbnz	r3, b7136 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b711a:	f7ff fe91 	bl	b6e40 <_ZN5spark10LogManager8instanceEv>
   b711e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b7120:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b7124:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7126:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7128:	f7ff fd64 	bl	b6bf4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b712c:	7b23      	ldrb	r3, [r4, #12]
   b712e:	b12b      	cbz	r3, b713c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b7130:	a801      	add	r0, sp, #4
   b7132:	f7ff ff9e 	bl	b7072 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b7136:	b003      	add	sp, #12
   b7138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b713c:	2301      	movs	r3, #1
   b713e:	7323      	strb	r3, [r4, #12]
   b7140:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b7144:	b2f6      	uxtb	r6, r6
   b7146:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b714a:	4555      	cmp	r5, sl
   b714c:	d00e      	beq.n	b716c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b714e:	f855 7b04 	ldr.w	r7, [r5], #4
   b7152:	4659      	mov	r1, fp
   b7154:	1d38      	adds	r0, r7, #4
   b7156:	f7ff fdff 	bl	b6d58 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b715a:	4286      	cmp	r6, r0
   b715c:	d3f5      	bcc.n	b714a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b715e:	683b      	ldr	r3, [r7, #0]
   b7160:	464a      	mov	r2, r9
   b7162:	68db      	ldr	r3, [r3, #12]
   b7164:	4641      	mov	r1, r8
   b7166:	4638      	mov	r0, r7
   b7168:	4798      	blx	r3
   b716a:	e7ee      	b.n	b714a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b716c:	2300      	movs	r3, #0
   b716e:	7323      	strb	r3, [r4, #12]
   b7170:	e7de      	b.n	b7130 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b7172:	bf00      	nop
   b7174:	e000ed00 	.word	0xe000ed00

000b7178 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b7178:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b717c:	4b16      	ldr	r3, [pc, #88]	; (b71d8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b717e:	685b      	ldr	r3, [r3, #4]
   b7180:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7184:	4605      	mov	r5, r0
   b7186:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b7188:	bb1b      	cbnz	r3, b71d2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b718a:	f7ff fe59 	bl	b6e40 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b718e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b7192:	4604      	mov	r4, r0
   b7194:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7196:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7198:	f7ff fd2c 	bl	b6bf4 <_ZN14RecursiveMutex4lockEv.isra.0>
   b719c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b71a0:	2446      	movs	r4, #70	; 0x46
   b71a2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b71a6:	45b0      	cmp	r8, r6
   b71a8:	d109      	bne.n	b71be <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b71aa:	a801      	add	r0, sp, #4
   b71ac:	f7ff ff61 	bl	b7072 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b71b0:	42a5      	cmp	r5, r4
   b71b2:	bfb4      	ite	lt
   b71b4:	2000      	movlt	r0, #0
   b71b6:	2001      	movge	r0, #1
}
   b71b8:	b002      	add	sp, #8
   b71ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b71be:	f856 0b04 	ldr.w	r0, [r6], #4
   b71c2:	4639      	mov	r1, r7
   b71c4:	3004      	adds	r0, #4
   b71c6:	f7ff fdc7 	bl	b6d58 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b71ca:	4284      	cmp	r4, r0
   b71cc:	bfa8      	it	ge
   b71ce:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b71d0:	e7e9      	b.n	b71a6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b71d2:	2000      	movs	r0, #0
   b71d4:	e7f0      	b.n	b71b8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b71d6:	bf00      	nop
   b71d8:	e000ed00 	.word	0xe000ed00

000b71dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b71dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b71de:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b71e2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b71e4:	4604      	mov	r4, r0
   b71e6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b71e8:	db0d      	blt.n	b7206 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b71ea:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b71ec:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b71ee:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b71f0:	dd04      	ble.n	b71fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b71f2:	00b9      	lsls	r1, r7, #2
   b71f4:	f7ff f98c 	bl	b6510 <realloc>
            if (!d) {
   b71f8:	b918      	cbnz	r0, b7202 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b71fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b71fc:	f7ff f980 	bl	b6500 <free>
        T* d = nullptr;
   b7200:	2000      	movs	r0, #0
        data_ = d;
   b7202:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7204:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7206:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7208:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b720a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b720e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7210:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b7214:	1d08      	adds	r0, r1, #4
   b7216:	f002 fad5 	bl	b97c4 <memmove>
    new(p) T(std::move(value));
   b721a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b721e:	6863      	ldr	r3, [r4, #4]
   b7220:	3301      	adds	r3, #1
   b7222:	6063      	str	r3, [r4, #4]
    return true;
   b7224:	2001      	movs	r0, #1
   b7226:	e7e8      	b.n	b71fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b7228 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b7228:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b722a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b722e:	4604      	mov	r4, r0
   b7230:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7232:	9301      	str	r3, [sp, #4]
   b7234:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b7236:	f7ff fcdd 	bl	b6bf4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b723a:	e9d4 3200 	ldrd	r3, r2, [r4]
   b723e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b7242:	4293      	cmp	r3, r2
   b7244:	4619      	mov	r1, r3
   b7246:	d00b      	beq.n	b7260 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b7248:	6809      	ldr	r1, [r1, #0]
   b724a:	42a9      	cmp	r1, r5
   b724c:	f103 0304 	add.w	r3, r3, #4
   b7250:	d1f7      	bne.n	b7242 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b7252:	a801      	add	r0, sp, #4
   b7254:	f7ff ff0d 	bl	b7072 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b7258:	2500      	movs	r5, #0
}
   b725a:	4628      	mov	r0, r5
   b725c:	b003      	add	sp, #12
   b725e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b7260:	4629      	mov	r1, r5
   b7262:	4620      	mov	r0, r4
   b7264:	f7ff ffba 	bl	b71dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b7268:	4605      	mov	r5, r0
   b726a:	2800      	cmp	r0, #0
   b726c:	d0f1      	beq.n	b7252 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b726e:	6863      	ldr	r3, [r4, #4]
   b7270:	2b01      	cmp	r3, #1
   b7272:	d101      	bne.n	b7278 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b7274:	f7ff fe00 	bl	b6e78 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7278:	a801      	add	r0, sp, #4
   b727a:	f7ff fefa 	bl	b7072 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b727e:	e7ec      	b.n	b725a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b7280 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7280:	b570      	push	{r4, r5, r6, lr}
   b7282:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b7284:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7288:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b728a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b728e:	4282      	cmp	r2, r0
   b7290:	d00f      	beq.n	b72b2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b7292:	4601      	mov	r1, r0
            if (*p == value) {
   b7294:	681d      	ldr	r5, [r3, #0]
   b7296:	f851 6b04 	ldr.w	r6, [r1], #4
   b729a:	42ae      	cmp	r6, r5
   b729c:	d107      	bne.n	b72ae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b729e:	1a52      	subs	r2, r2, r1
   b72a0:	f002 fa90 	bl	b97c4 <memmove>
    --size_;
   b72a4:	6863      	ldr	r3, [r4, #4]
   b72a6:	3b01      	subs	r3, #1
   b72a8:	6063      	str	r3, [r4, #4]
    return true;
   b72aa:	2001      	movs	r0, #1
}
   b72ac:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b72ae:	4608      	mov	r0, r1
   b72b0:	e7ed      	b.n	b728e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b72b2:	2000      	movs	r0, #0
   b72b4:	e7fa      	b.n	b72ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b72b6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b72b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b72b8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b72bc:	4604      	mov	r4, r0
   b72be:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b72c0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b72c2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b72c4:	f7ff fc96 	bl	b6bf4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b72c8:	a901      	add	r1, sp, #4
   b72ca:	4620      	mov	r0, r4
   b72cc:	f7ff ffd8 	bl	b7280 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b72d0:	b118      	cbz	r0, b72da <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b72d2:	6863      	ldr	r3, [r4, #4]
   b72d4:	b90b      	cbnz	r3, b72da <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b72d6:	f7ff fddb 	bl	b6e90 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b72da:	a803      	add	r0, sp, #12
   b72dc:	f7ff fec9 	bl	b7072 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b72e0:	b004      	add	sp, #16
   b72e2:	bd10      	pop	{r4, pc}

000b72e4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b72e4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b72e6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b72ea:	2318      	movs	r3, #24
   b72ec:	4604      	mov	r4, r0
   b72ee:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b72f2:	42ae      	cmp	r6, r5
   b72f4:	d015      	beq.n	b7322 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b72f6:	f105 0110 	add.w	r1, r5, #16
   b72fa:	4620      	mov	r0, r4
   b72fc:	f7ff ffc0 	bl	b7280 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b7300:	6863      	ldr	r3, [r4, #4]
   b7302:	b90b      	cbnz	r3, b7308 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b7304:	f7ff fdc4 	bl	b6e90 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b7308:	69e0      	ldr	r0, [r4, #28]
   b730a:	6929      	ldr	r1, [r5, #16]
   b730c:	6803      	ldr	r3, [r0, #0]
   b730e:	68db      	ldr	r3, [r3, #12]
   b7310:	4798      	blx	r3
        if (h.stream) {
   b7312:	6969      	ldr	r1, [r5, #20]
   b7314:	b119      	cbz	r1, b731e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b7316:	6a20      	ldr	r0, [r4, #32]
   b7318:	6803      	ldr	r3, [r0, #0]
   b731a:	68db      	ldr	r3, [r3, #12]
   b731c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b731e:	3518      	adds	r5, #24
   b7320:	e7e7      	b.n	b72f2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b7322:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b7326:	2618      	movs	r6, #24
   b7328:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b732c:	42ae      	cmp	r6, r5
   b732e:	d004      	beq.n	b733a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b7330:	4628      	mov	r0, r5
   b7332:	f7ff fad1 	bl	b68d8 <_ZN6StringD1Ev>
   b7336:	3518      	adds	r5, #24
   b7338:	e7f8      	b.n	b732c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b733a:	2300      	movs	r3, #0
   b733c:	6163      	str	r3, [r4, #20]
}
   b733e:	bd70      	pop	{r4, r5, r6, pc}

000b7340 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b7340:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7342:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b7344:	f7ff fda4 	bl	b6e90 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7348:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b734c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b734e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7350:	f7ff fc50 	bl	b6bf4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b7354:	4620      	mov	r0, r4
   b7356:	f7ff ffc5 	bl	b72e4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b735a:	a801      	add	r0, sp, #4
   b735c:	f7ff fe89 	bl	b7072 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b7360:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7362:	b108      	cbz	r0, b7368 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b7364:	f7fe fe4c 	bl	b6000 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b7368:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b736c:	2618      	movs	r6, #24
   b736e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7372:	42ae      	cmp	r6, r5
   b7374:	d004      	beq.n	b7380 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b7376:	4628      	mov	r0, r5
   b7378:	f7ff faae 	bl	b68d8 <_ZN6StringD1Ev>
   b737c:	3518      	adds	r5, #24
   b737e:	e7f8      	b.n	b7372 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b7380:	6920      	ldr	r0, [r4, #16]
   b7382:	f7ff f8bd 	bl	b6500 <free>
   b7386:	6820      	ldr	r0, [r4, #0]
   b7388:	f7ff f8ba 	bl	b6500 <free>
}
   b738c:	4620      	mov	r0, r4
   b738e:	b002      	add	sp, #8
   b7390:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7394 <__tcf_2>:
    static LogManager mgr;
   b7394:	4801      	ldr	r0, [pc, #4]	; (b739c <__tcf_2+0x8>)
   b7396:	f7ff bfd3 	b.w	b7340 <_ZN5spark10LogManagerD1Ev>
   b739a:	bf00      	nop
   b739c:	2003e67c 	.word	0x2003e67c

000b73a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b73a0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b73a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b73a4:	4604      	mov	r4, r0
   b73a6:	460d      	mov	r5, r1
   b73a8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b73aa:	d915      	bls.n	b73d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b73ac:	4290      	cmp	r0, r2
   b73ae:	d214      	bcs.n	b73da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b73b0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b73b4:	1a75      	subs	r5, r6, r1
   b73b6:	f1a1 0714 	sub.w	r7, r1, #20
   b73ba:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b73bc:	42b7      	cmp	r7, r6
   b73be:	d01a      	beq.n	b73f6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b73c0:	b11c      	cbz	r4, b73ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b73c2:	4631      	mov	r1, r6
   b73c4:	4620      	mov	r0, r4
   b73c6:	f7ff fc78 	bl	b6cba <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b73ca:	f106 0008 	add.w	r0, r6, #8
   b73ce:	f7ff fdf9 	bl	b6fc4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b73d2:	3e14      	subs	r6, #20
   b73d4:	3c14      	subs	r4, #20
   b73d6:	e7f1      	b.n	b73bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b73d8:	d00d      	beq.n	b73f6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b73da:	42b5      	cmp	r5, r6
   b73dc:	d00b      	beq.n	b73f6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b73de:	b11c      	cbz	r4, b73e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b73e0:	4629      	mov	r1, r5
   b73e2:	4620      	mov	r0, r4
   b73e4:	f7ff fc69 	bl	b6cba <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b73e8:	f105 0008 	add.w	r0, r5, #8
   b73ec:	f7ff fdea 	bl	b6fc4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b73f0:	3514      	adds	r5, #20
   b73f2:	3414      	adds	r4, #20
   b73f4:	e7f1      	b.n	b73da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b73f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b73f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b73f8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b73fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b73fc:	4604      	mov	r4, r0
   b73fe:	460d      	mov	r5, r1
   b7400:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7402:	d914      	bls.n	b742e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b7404:	4290      	cmp	r0, r2
   b7406:	d213      	bcs.n	b7430 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b7408:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b740c:	1a75      	subs	r5, r6, r1
   b740e:	f1a1 0710 	sub.w	r7, r1, #16
   b7412:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7414:	42b7      	cmp	r7, r6
   b7416:	d018      	beq.n	b744a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b7418:	b11c      	cbz	r4, b7422 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b741a:	4631      	mov	r1, r6
   b741c:	4620      	mov	r0, r4
   b741e:	f7ff fac4 	bl	b69aa <_ZN6StringC1EOS_>
                end->~T();
   b7422:	4630      	mov	r0, r6
   b7424:	f7ff fa58 	bl	b68d8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b7428:	3e10      	subs	r6, #16
   b742a:	3c10      	subs	r4, #16
   b742c:	e7f2      	b.n	b7414 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b742e:	d00c      	beq.n	b744a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b7430:	42b5      	cmp	r5, r6
   b7432:	d00a      	beq.n	b744a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b7434:	b11c      	cbz	r4, b743e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b7436:	4629      	mov	r1, r5
   b7438:	4620      	mov	r0, r4
   b743a:	f7ff fab6 	bl	b69aa <_ZN6StringC1EOS_>
                p->~T();
   b743e:	4628      	mov	r0, r5
   b7440:	f7ff fa4a 	bl	b68d8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b7444:	3510      	adds	r5, #16
   b7446:	3410      	adds	r4, #16
   b7448:	e7f2      	b.n	b7430 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b744c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b744c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b744e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7450:	4605      	mov	r5, r0
        if (n > 0) {
   b7452:	dd11      	ble.n	b7478 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7454:	0130      	lsls	r0, r6, #4
   b7456:	f7ff f84b 	bl	b64f0 <malloc>
            if (!d) {
   b745a:	4604      	mov	r4, r0
   b745c:	b158      	cbz	r0, b7476 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b745e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7462:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b7466:	f7ff ffc7 	bl	b73f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b746a:	6828      	ldr	r0, [r5, #0]
   b746c:	f7ff f848 	bl	b6500 <free>
        data_ = d;
   b7470:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7472:	60ae      	str	r6, [r5, #8]
        return true;
   b7474:	2001      	movs	r0, #1
    }
   b7476:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7478:	2400      	movs	r4, #0
   b747a:	e7f6      	b.n	b746a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b747c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7480:	4690      	mov	r8, r2
   b7482:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b7484:	2300      	movs	r3, #0
   b7486:	9103      	str	r1, [sp, #12]
    return size_;
   b7488:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b748c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b748e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b7490:	4299      	cmp	r1, r3
        capacity_(0) {
   b7492:	e9c0 3300 	strd	r3, r3, [r0]
   b7496:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b749a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b749e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b74a2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b74a4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b74a6:	dc23      	bgt.n	b74f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b74a8:	e9d8 5700 	ldrd	r5, r7, [r8]
   b74ac:	2314      	movs	r3, #20
   b74ae:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b74b2:	42af      	cmp	r7, r5
   b74b4:	d03b      	beq.n	b752e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b74b6:	4629      	mov	r1, r5
   b74b8:	a80b      	add	r0, sp, #44	; 0x2c
   b74ba:	f7ff fa76 	bl	b69aa <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b74be:	a90b      	add	r1, sp, #44	; 0x2c
   b74c0:	a80f      	add	r0, sp, #60	; 0x3c
   b74c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b74c4:	f7ff fa71 	bl	b69aa <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b74c8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b74cc:	4299      	cmp	r1, r3
   b74ce:	da1b      	bge.n	b7508 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b74d0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b74d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b74d4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b74d8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b74dc:	4631      	mov	r1, r6
   b74de:	f106 0010 	add.w	r0, r6, #16
   b74e2:	f7ff ff89 	bl	b73f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b74e6:	b9ee      	cbnz	r6, b7524 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b74e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b74ea:	3301      	adds	r3, #1
   b74ec:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b74ee:	e011      	b.n	b7514 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b74f0:	a808      	add	r0, sp, #32
   b74f2:	f7ff ffab 	bl	b744c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b74f6:	2800      	cmp	r0, #0
   b74f8:	d1d6      	bne.n	b74a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b74fa:	a808      	add	r0, sp, #32
   b74fc:	f7ff fa97 	bl	b6a2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b7500:	4620      	mov	r0, r4
   b7502:	b015      	add	sp, #84	; 0x54
   b7504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7508:	3101      	adds	r1, #1
   b750a:	a808      	add	r0, sp, #32
   b750c:	f7ff ff9e 	bl	b744c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b7510:	2800      	cmp	r0, #0
   b7512:	d1dd      	bne.n	b74d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b7514:	a80f      	add	r0, sp, #60	; 0x3c
   b7516:	f7ff f9df 	bl	b68d8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b751a:	a80b      	add	r0, sp, #44	; 0x2c
   b751c:	f7ff f9dc 	bl	b68d8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b7520:	3514      	adds	r5, #20
   b7522:	e7c6      	b.n	b74b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b7524:	a90f      	add	r1, sp, #60	; 0x3c
   b7526:	4630      	mov	r0, r6
   b7528:	f7ff fa3f 	bl	b69aa <_ZN6StringC1EOS_>
   b752c:	e7dc      	b.n	b74e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b752e:	2600      	movs	r6, #0
   b7530:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b7534:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b7536:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b753a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b753e:	429e      	cmp	r6, r3
   b7540:	da7c      	bge.n	b763c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b7542:	0133      	lsls	r3, r6, #4
   b7544:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b7546:	9306      	str	r3, [sp, #24]
        if (!category) {
   b7548:	b90b      	cbnz	r3, b754e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b754a:	3601      	adds	r6, #1
   b754c:	e7f5      	b.n	b753a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b754e:	2300      	movs	r3, #0
   b7550:	9307      	str	r3, [sp, #28]
   b7552:	fb09 f306 	mul.w	r3, r9, r6
   b7556:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b7558:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b755a:	a907      	add	r1, sp, #28
   b755c:	a806      	add	r0, sp, #24
   b755e:	f7ff fb22 	bl	b6ba6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b7562:	4682      	mov	sl, r0
   b7564:	2800      	cmp	r0, #0
   b7566:	d0f0      	beq.n	b754a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b7568:	f04f 0300 	mov.w	r3, #0
   b756c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b7570:	4601      	mov	r1, r0
   b7572:	9a07      	ldr	r2, [sp, #28]
   b7574:	f10d 0317 	add.w	r3, sp, #23
   b7578:	4628      	mov	r0, r5
   b757a:	f7ff fbb1 	bl	b6ce0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b757e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b7582:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7584:	2f00      	cmp	r7, #0
   b7586:	d14a      	bne.n	b761e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b7588:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b758c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b7590:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b7594:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7598:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b759c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b75a0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b75a2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b75a6:	4293      	cmp	r3, r2
   b75a8:	db17      	blt.n	b75da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b75aa:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b75ae:	f1ba 0f00 	cmp.w	sl, #0
   b75b2:	dd30      	ble.n	b7616 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b75b4:	fb09 f00a 	mul.w	r0, r9, sl
   b75b8:	f7fe ff9a 	bl	b64f0 <malloc>
            if (!d) {
   b75bc:	4683      	mov	fp, r0
   b75be:	b360      	cbz	r0, b761a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b75c0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b75c4:	fb09 1202 	mla	r2, r9, r2, r1
   b75c8:	f7ff feea 	bl	b73a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b75cc:	6828      	ldr	r0, [r5, #0]
   b75ce:	f7fe ff97 	bl	b6500 <free>
        data_ = d;
   b75d2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b75d6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b75da:	682b      	ldr	r3, [r5, #0]
   b75dc:	9a01      	ldr	r2, [sp, #4]
   b75de:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b75e2:	686a      	ldr	r2, [r5, #4]
   b75e4:	4651      	mov	r1, sl
   b75e6:	fb09 3202 	mla	r2, r9, r2, r3
   b75ea:	f10a 0014 	add.w	r0, sl, #20
   b75ee:	f7ff fed7 	bl	b73a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b75f2:	f1ba 0f00 	cmp.w	sl, #0
   b75f6:	d003      	beq.n	b7600 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b75f8:	a90f      	add	r1, sp, #60	; 0x3c
   b75fa:	4650      	mov	r0, sl
   b75fc:	f7ff fb5d 	bl	b6cba <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b7600:	686b      	ldr	r3, [r5, #4]
   b7602:	3301      	adds	r3, #1
   b7604:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b7606:	a811      	add	r0, sp, #68	; 0x44
   b7608:	f7ff fcdc 	bl	b6fc4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b760c:	b13f      	cbz	r7, b761e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b760e:	a80b      	add	r0, sp, #44	; 0x2c
   b7610:	f7ff fcd8 	bl	b6fc4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b7614:	e771      	b.n	b74fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b7616:	46bb      	mov	fp, r7
   b7618:	e7d8      	b.n	b75cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b761a:	2701      	movs	r7, #1
   b761c:	e7f3      	b.n	b7606 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b761e:	9b01      	ldr	r3, [sp, #4]
   b7620:	682d      	ldr	r5, [r5, #0]
   b7622:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b7626:	9b06      	ldr	r3, [sp, #24]
   b7628:	781b      	ldrb	r3, [r3, #0]
   b762a:	b92b      	cbnz	r3, b7638 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b762c:	f8d8 3000 	ldr.w	r3, [r8]
   b7630:	9a02      	ldr	r2, [sp, #8]
   b7632:	4413      	add	r3, r2
   b7634:	7c1b      	ldrb	r3, [r3, #16]
   b7636:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b7638:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b763a:	e78e      	b.n	b755a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b763c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b763e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7640:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7642:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7644:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7646:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b7648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b764a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b764c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b764e:	60a2      	str	r2, [r4, #8]
   b7650:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b7652:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7654:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7656:	60e2      	str	r2, [r4, #12]
   b7658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b765a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b765c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b765e:	6122      	str	r2, [r4, #16]
   b7660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b7662:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b7664:	9b03      	ldr	r3, [sp, #12]
   b7666:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b7668:	6162      	str	r2, [r4, #20]
   b766a:	7623      	strb	r3, [r4, #24]
   b766c:	e7cf      	b.n	b760e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b7670 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b7670:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7672:	4604      	mov	r4, r0
   b7674:	b087      	sub	sp, #28
   b7676:	460d      	mov	r5, r1
        filter_(level, filters) {
   b7678:	4626      	mov	r6, r4
        stream_(&stream) {
   b767a:	4619      	mov	r1, r3
   b767c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b767e:	4617      	mov	r7, r2
        stream_(&stream) {
   b7680:	f7fd f888 	bl	b4794 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b7684:	4b0b      	ldr	r3, [pc, #44]	; (b76b4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b7686:	f846 3b04 	str.w	r3, [r6], #4
   b768a:	4669      	mov	r1, sp
   b768c:	a803      	add	r0, sp, #12
   b768e:	f7fd f881 	bl	b4794 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b7692:	aa03      	add	r2, sp, #12
   b7694:	4639      	mov	r1, r7
   b7696:	4630      	mov	r0, r6
   b7698:	f7ff fef0 	bl	b747c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b769c:	a803      	add	r0, sp, #12
   b769e:	f7fc fe35 	bl	b430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b76a2:	4668      	mov	r0, sp
   b76a4:	f7fc fe32 	bl	b430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b76a8:	4b03      	ldr	r3, [pc, #12]	; (b76b8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b76aa:	6023      	str	r3, [r4, #0]
}
   b76ac:	4620      	mov	r0, r4
        stream_(&stream) {
   b76ae:	6225      	str	r5, [r4, #32]
}
   b76b0:	b007      	add	sp, #28
   b76b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b76b4:	000b9cfc 	.word	0x000b9cfc
   b76b8:	000b9e58 	.word	0x000b9e58

000b76bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b76bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b76be:	460f      	mov	r7, r1
   b76c0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b76c2:	491d      	ldr	r1, [pc, #116]	; (b7738 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b76c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b76c6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b76c8:	4616      	mov	r6, r2
   b76ca:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b76cc:	f002 f8e1 	bl	b9892 <strcmp>
   b76d0:	b9c0      	cbnz	r0, b7704 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b76d2:	b1a4      	cbz	r4, b76fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b76d4:	4629      	mov	r1, r5
   b76d6:	a801      	add	r0, sp, #4
   b76d8:	f7ff fcbc 	bl	b7054 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b76dc:	4917      	ldr	r1, [pc, #92]	; (b773c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b76de:	2024      	movs	r0, #36	; 0x24
   b76e0:	f001 fc1e 	bl	b8f20 <_ZnwjRKSt9nothrow_t>
   b76e4:	4605      	mov	r5, r0
   b76e6:	b130      	cbz	r0, b76f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b76e8:	ab01      	add	r3, sp, #4
   b76ea:	4632      	mov	r2, r6
   b76ec:	4621      	mov	r1, r4
   b76ee:	f7ff ffbf 	bl	b7670 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b76f2:	4b13      	ldr	r3, [pc, #76]	; (b7740 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b76f4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b76f6:	a801      	add	r0, sp, #4
   b76f8:	f7fc fe08 	bl	b430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b76fc:	462c      	mov	r4, r5
}
   b76fe:	4620      	mov	r0, r4
   b7700:	b005      	add	sp, #20
   b7702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b7704:	490f      	ldr	r1, [pc, #60]	; (b7744 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b7706:	4638      	mov	r0, r7
   b7708:	f002 f8c3 	bl	b9892 <strcmp>
   b770c:	b990      	cbnz	r0, b7734 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b770e:	2c00      	cmp	r4, #0
   b7710:	d0f5      	beq.n	b76fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b7712:	4629      	mov	r1, r5
   b7714:	a801      	add	r0, sp, #4
   b7716:	f7ff fc9d 	bl	b7054 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b771a:	4908      	ldr	r1, [pc, #32]	; (b773c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b771c:	2024      	movs	r0, #36	; 0x24
   b771e:	f001 fbff 	bl	b8f20 <_ZnwjRKSt9nothrow_t>
   b7722:	4605      	mov	r5, r0
   b7724:	2800      	cmp	r0, #0
   b7726:	d0e6      	beq.n	b76f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b7728:	ab01      	add	r3, sp, #4
   b772a:	4632      	mov	r2, r6
   b772c:	4621      	mov	r1, r4
   b772e:	f7ff ff9f 	bl	b7670 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7732:	e7e0      	b.n	b76f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b7734:	2400      	movs	r4, #0
   b7736:	e7e2      	b.n	b76fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b7738:	000b9dde 	.word	0x000b9dde
   b773c:	000ba005 	.word	0x000ba005
   b7740:	000b9e70 	.word	0x000b9e70
   b7744:	000b9de2 	.word	0x000b9de2

000b7748 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b7748:	4b01      	ldr	r3, [pc, #4]	; (b7750 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b774a:	4a02      	ldr	r2, [pc, #8]	; (b7754 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b774c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b774e:	4770      	bx	lr
   b7750:	2003e678 	.word	0x2003e678
   b7754:	000b9df3 	.word	0x000b9df3

000b7758 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b775c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b775e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7762:	4604      	mov	r4, r0
   b7764:	460e      	mov	r6, r1
   b7766:	4617      	mov	r7, r2
   b7768:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b776a:	f000 fea1 	bl	b84b0 <_Z16_fetch_usbserialv>
   b776e:	4581      	cmp	r9, r0
   b7770:	d04c      	beq.n	b780c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b7772:	792b      	ldrb	r3, [r5, #4]
   b7774:	0719      	lsls	r1, r3, #28
   b7776:	d504      	bpl.n	b7782 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b7778:	696a      	ldr	r2, [r5, #20]
   b777a:	4954      	ldr	r1, [pc, #336]	; (b78cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b777c:	4620      	mov	r0, r4
   b777e:	f7ff fa8d 	bl	b6c9c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b7782:	f1b8 0f00 	cmp.w	r8, #0
   b7786:	d00d      	beq.n	b77a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b7788:	215b      	movs	r1, #91	; 0x5b
   b778a:	4620      	mov	r0, r4
   b778c:	f7ff fa7a 	bl	b6c84 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b7790:	4641      	mov	r1, r8
   b7792:	4620      	mov	r0, r4
   b7794:	f7ff fa67 	bl	b6c66 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b7798:	6823      	ldr	r3, [r4, #0]
   b779a:	494d      	ldr	r1, [pc, #308]	; (b78d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b779c:	68db      	ldr	r3, [r3, #12]
   b779e:	2202      	movs	r2, #2
   b77a0:	4620      	mov	r0, r4
   b77a2:	4798      	blx	r3
    if (attr.has_file) {
   b77a4:	792b      	ldrb	r3, [r5, #4]
   b77a6:	07da      	lsls	r2, r3, #31
   b77a8:	d523      	bpl.n	b77f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b77aa:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b77ae:	212f      	movs	r1, #47	; 0x2f
   b77b0:	4640      	mov	r0, r8
   b77b2:	f002 f8ba 	bl	b992a <strrchr>
    if (s1) {
   b77b6:	b108      	cbz	r0, b77bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b77b8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b77bc:	4641      	mov	r1, r8
   b77be:	4620      	mov	r0, r4
   b77c0:	f7ff fa51 	bl	b6c66 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b77c4:	792b      	ldrb	r3, [r5, #4]
   b77c6:	079b      	lsls	r3, r3, #30
   b77c8:	d508      	bpl.n	b77dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b77ca:	213a      	movs	r1, #58	; 0x3a
   b77cc:	4620      	mov	r0, r4
   b77ce:	f7ff fa59 	bl	b6c84 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b77d2:	68ea      	ldr	r2, [r5, #12]
   b77d4:	493f      	ldr	r1, [pc, #252]	; (b78d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b77d6:	4620      	mov	r0, r4
   b77d8:	f7ff fa60 	bl	b6c9c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b77dc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b77de:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b77e0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b77e4:	68db      	ldr	r3, [r3, #12]
   b77e6:	bf14      	ite	ne
   b77e8:	493b      	ldrne	r1, [pc, #236]	; (b78d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b77ea:	493c      	ldreq	r1, [pc, #240]	; (b78dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b77ec:	2202      	movs	r2, #2
            write(": ", 2);
   b77ee:	4620      	mov	r0, r4
   b77f0:	4798      	blx	r3
    if (attr.has_function) {
   b77f2:	792b      	ldrb	r3, [r5, #4]
   b77f4:	0758      	lsls	r0, r3, #29
   b77f6:	d51d      	bpl.n	b7834 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b77f8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b77fa:	460b      	mov	r3, r1
   b77fc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b77fe:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7802:	b160      	cbz	r0, b781e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b7804:	2820      	cmp	r0, #32
   b7806:	d108      	bne.n	b781a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b7808:	4619      	mov	r1, r3
   b780a:	e7f7      	b.n	b77fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b780c:	4834      	ldr	r0, [pc, #208]	; (b78e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b780e:	f000 fff7 	bl	b8800 <_ZN5spark12NetworkClass9listeningEv>
   b7812:	2800      	cmp	r0, #0
   b7814:	d0ad      	beq.n	b7772 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b7816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b781a:	2828      	cmp	r0, #40	; 0x28
   b781c:	d1ee      	bne.n	b77fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b781e:	6823      	ldr	r3, [r4, #0]
   b7820:	1a52      	subs	r2, r2, r1
   b7822:	68db      	ldr	r3, [r3, #12]
   b7824:	4620      	mov	r0, r4
   b7826:	4798      	blx	r3
        write("(): ", 4);
   b7828:	6823      	ldr	r3, [r4, #0]
   b782a:	492e      	ldr	r1, [pc, #184]	; (b78e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b782c:	68db      	ldr	r3, [r3, #12]
   b782e:	2204      	movs	r2, #4
   b7830:	4620      	mov	r0, r4
   b7832:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b7834:	2100      	movs	r1, #0
   b7836:	4638      	mov	r0, r7
   b7838:	f7fe fd5a 	bl	b62f0 <log_level_name>
   b783c:	4601      	mov	r1, r0
    write(s);
   b783e:	4620      	mov	r0, r4
   b7840:	f7ff fa11 	bl	b6c66 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b7844:	6823      	ldr	r3, [r4, #0]
   b7846:	4925      	ldr	r1, [pc, #148]	; (b78dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b7848:	68db      	ldr	r3, [r3, #12]
   b784a:	2202      	movs	r2, #2
   b784c:	4620      	mov	r0, r4
   b784e:	4798      	blx	r3
    if (msg) {
   b7850:	b11e      	cbz	r6, b785a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b7852:	4631      	mov	r1, r6
   b7854:	4620      	mov	r0, r4
   b7856:	f7ff fa06 	bl	b6c66 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b785a:	792b      	ldrb	r3, [r5, #4]
   b785c:	f013 0f30 	tst.w	r3, #48	; 0x30
   b7860:	d02c      	beq.n	b78bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b7862:	6823      	ldr	r3, [r4, #0]
   b7864:	4920      	ldr	r1, [pc, #128]	; (b78e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b7866:	68db      	ldr	r3, [r3, #12]
   b7868:	2202      	movs	r2, #2
   b786a:	4620      	mov	r0, r4
   b786c:	4798      	blx	r3
        if (attr.has_code) {
   b786e:	792b      	ldrb	r3, [r5, #4]
   b7870:	06d9      	lsls	r1, r3, #27
   b7872:	d50a      	bpl.n	b788a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b7874:	6823      	ldr	r3, [r4, #0]
   b7876:	491d      	ldr	r1, [pc, #116]	; (b78ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b7878:	68db      	ldr	r3, [r3, #12]
   b787a:	2207      	movs	r2, #7
   b787c:	4620      	mov	r0, r4
   b787e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b7880:	69aa      	ldr	r2, [r5, #24]
   b7882:	491b      	ldr	r1, [pc, #108]	; (b78f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b7884:	4620      	mov	r0, r4
   b7886:	f7ff fa09 	bl	b6c9c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b788a:	792b      	ldrb	r3, [r5, #4]
   b788c:	069a      	lsls	r2, r3, #26
   b788e:	d511      	bpl.n	b78b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b7890:	06db      	lsls	r3, r3, #27
   b7892:	d505      	bpl.n	b78a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b7894:	6823      	ldr	r3, [r4, #0]
   b7896:	4910      	ldr	r1, [pc, #64]	; (b78d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b7898:	68db      	ldr	r3, [r3, #12]
   b789a:	2202      	movs	r2, #2
   b789c:	4620      	mov	r0, r4
   b789e:	4798      	blx	r3
            write("details = ", 10);
   b78a0:	6823      	ldr	r3, [r4, #0]
   b78a2:	4914      	ldr	r1, [pc, #80]	; (b78f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b78a4:	68db      	ldr	r3, [r3, #12]
   b78a6:	4620      	mov	r0, r4
   b78a8:	220a      	movs	r2, #10
   b78aa:	4798      	blx	r3
            write(attr.details);
   b78ac:	69e9      	ldr	r1, [r5, #28]
   b78ae:	4620      	mov	r0, r4
   b78b0:	f7ff f9d9 	bl	b6c66 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b78b4:	215d      	movs	r1, #93	; 0x5d
   b78b6:	4620      	mov	r0, r4
   b78b8:	f7ff f9e4 	bl	b6c84 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b78bc:	6823      	ldr	r3, [r4, #0]
   b78be:	490e      	ldr	r1, [pc, #56]	; (b78f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b78c0:	68db      	ldr	r3, [r3, #12]
   b78c2:	4620      	mov	r0, r4
   b78c4:	2202      	movs	r2, #2
}
   b78c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b78ca:	4718      	bx	r3
   b78cc:	000b9df7 	.word	0x000b9df7
   b78d0:	000b9dfe 	.word	0x000b9dfe
   b78d4:	000b9c50 	.word	0x000b9c50
   b78d8:	000b9e01 	.word	0x000b9e01
   b78dc:	000b9e06 	.word	0x000b9e06
   b78e0:	2003e708 	.word	0x2003e708
   b78e4:	000b9e04 	.word	0x000b9e04
   b78e8:	000b9e09 	.word	0x000b9e09
   b78ec:	000b9e0c 	.word	0x000b9e0c
   b78f0:	000b9bc0 	.word	0x000b9bc0
   b78f4:	000b9e14 	.word	0x000b9e14
   b78f8:	000b9e1f 	.word	0x000b9e1f

000b78fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b78fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7900:	b085      	sub	sp, #20
    return stream_;
   b7902:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b7906:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b7908:	4605      	mov	r5, r0
   b790a:	460f      	mov	r7, r1
   b790c:	4690      	mov	r8, r2
   b790e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b7910:	f000 fdce 	bl	b84b0 <_Z16_fetch_usbserialv>
   b7914:	4581      	cmp	r9, r0
   b7916:	d105      	bne.n	b7924 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b7918:	4849      	ldr	r0, [pc, #292]	; (b7a40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b791a:	f000 ff71 	bl	b8800 <_ZN5spark12NetworkClass9listeningEv>
   b791e:	2800      	cmp	r0, #0
   b7920:	f040 808a 	bne.w	b7a38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b7924:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b7926:	4a47      	ldr	r2, [pc, #284]	; (b7a44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b7928:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b792a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b792e:	a801      	add	r0, sp, #4
        strm_(stream) {
   b7930:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b7932:	f88d 9008 	strb.w	r9, [sp, #8]
   b7936:	f001 f908 	bl	b8b4a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b793a:	4649      	mov	r1, r9
   b793c:	4640      	mov	r0, r8
   b793e:	f7fe fcd7 	bl	b62f0 <log_level_name>
    json.name("l", 1).value(s);
   b7942:	4941      	ldr	r1, [pc, #260]	; (b7a48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b7944:	4680      	mov	r8, r0
   b7946:	2201      	movs	r2, #1
   b7948:	a801      	add	r0, sp, #4
   b794a:	f001 f98d 	bl	b8c68 <_ZN5spark10JSONWriter4nameEPKcj>
   b794e:	4641      	mov	r1, r8
   b7950:	f7ff f97b 	bl	b6c4a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b7954:	b13f      	cbz	r7, b7966 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b7956:	493d      	ldr	r1, [pc, #244]	; (b7a4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b7958:	2201      	movs	r2, #1
   b795a:	a801      	add	r0, sp, #4
   b795c:	f001 f984 	bl	b8c68 <_ZN5spark10JSONWriter4nameEPKcj>
   b7960:	4639      	mov	r1, r7
   b7962:	f7ff f972 	bl	b6c4a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b7966:	b13e      	cbz	r6, b7978 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b7968:	4939      	ldr	r1, [pc, #228]	; (b7a50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b796a:	2201      	movs	r2, #1
   b796c:	a801      	add	r0, sp, #4
   b796e:	f001 f97b 	bl	b8c68 <_ZN5spark10JSONWriter4nameEPKcj>
   b7972:	4631      	mov	r1, r6
   b7974:	f7ff f969 	bl	b6c4a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b7978:	7923      	ldrb	r3, [r4, #4]
   b797a:	07df      	lsls	r7, r3, #31
   b797c:	d50e      	bpl.n	b799c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b797e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b7980:	212f      	movs	r1, #47	; 0x2f
   b7982:	4630      	mov	r0, r6
   b7984:	f001 ffd1 	bl	b992a <strrchr>
    if (s1) {
   b7988:	b100      	cbz	r0, b798c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b798a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b798c:	4931      	ldr	r1, [pc, #196]	; (b7a54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b798e:	2201      	movs	r2, #1
   b7990:	a801      	add	r0, sp, #4
   b7992:	f001 f969 	bl	b8c68 <_ZN5spark10JSONWriter4nameEPKcj>
   b7996:	4631      	mov	r1, r6
   b7998:	f7ff f957 	bl	b6c4a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b799c:	7923      	ldrb	r3, [r4, #4]
   b799e:	079e      	lsls	r6, r3, #30
   b79a0:	d507      	bpl.n	b79b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b79a2:	492d      	ldr	r1, [pc, #180]	; (b7a58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b79a4:	2202      	movs	r2, #2
   b79a6:	a801      	add	r0, sp, #4
   b79a8:	f001 f95e 	bl	b8c68 <_ZN5spark10JSONWriter4nameEPKcj>
   b79ac:	68e1      	ldr	r1, [r4, #12]
   b79ae:	f001 f8d9 	bl	b8b64 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b79b2:	7923      	ldrb	r3, [r4, #4]
   b79b4:	0758      	lsls	r0, r3, #29
   b79b6:	d514      	bpl.n	b79e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b79b8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b79ba:	4633      	mov	r3, r6
   b79bc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b79be:	f813 2b01 	ldrb.w	r2, [r3], #1
   b79c2:	b12a      	cbz	r2, b79d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b79c4:	2a20      	cmp	r2, #32
   b79c6:	d101      	bne.n	b79cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b79c8:	461e      	mov	r6, r3
   b79ca:	e7f7      	b.n	b79bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b79cc:	2a28      	cmp	r2, #40	; 0x28
   b79ce:	d1f5      	bne.n	b79bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b79d0:	4922      	ldr	r1, [pc, #136]	; (b7a5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b79d2:	2202      	movs	r2, #2
   b79d4:	a801      	add	r0, sp, #4
   b79d6:	f001 f947 	bl	b8c68 <_ZN5spark10JSONWriter4nameEPKcj>
   b79da:	1bba      	subs	r2, r7, r6
   b79dc:	4631      	mov	r1, r6
   b79de:	f001 f953 	bl	b8c88 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b79e2:	7923      	ldrb	r3, [r4, #4]
   b79e4:	0719      	lsls	r1, r3, #28
   b79e6:	d507      	bpl.n	b79f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b79e8:	491d      	ldr	r1, [pc, #116]	; (b7a60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b79ea:	2201      	movs	r2, #1
   b79ec:	a801      	add	r0, sp, #4
   b79ee:	f001 f93b 	bl	b8c68 <_ZN5spark10JSONWriter4nameEPKcj>
   b79f2:	6961      	ldr	r1, [r4, #20]
   b79f4:	f001 f8c8 	bl	b8b88 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b79f8:	7923      	ldrb	r3, [r4, #4]
   b79fa:	06da      	lsls	r2, r3, #27
   b79fc:	d508      	bpl.n	b7a10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b79fe:	2204      	movs	r2, #4
   b7a00:	4918      	ldr	r1, [pc, #96]	; (b7a64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b7a02:	eb0d 0002 	add.w	r0, sp, r2
   b7a06:	f001 f92f 	bl	b8c68 <_ZN5spark10JSONWriter4nameEPKcj>
   b7a0a:	69a1      	ldr	r1, [r4, #24]
   b7a0c:	f001 f8aa 	bl	b8b64 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b7a10:	7923      	ldrb	r3, [r4, #4]
   b7a12:	069b      	lsls	r3, r3, #26
   b7a14:	d507      	bpl.n	b7a26 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b7a16:	4914      	ldr	r1, [pc, #80]	; (b7a68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b7a18:	2206      	movs	r2, #6
   b7a1a:	a801      	add	r0, sp, #4
   b7a1c:	f001 f924 	bl	b8c68 <_ZN5spark10JSONWriter4nameEPKcj>
   b7a20:	69e1      	ldr	r1, [r4, #28]
   b7a22:	f7ff f912 	bl	b6c4a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b7a26:	a801      	add	r0, sp, #4
   b7a28:	f001 f879 	bl	b8b1e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b7a2c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b7a2e:	490f      	ldr	r1, [pc, #60]	; (b7a6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b7a30:	6803      	ldr	r3, [r0, #0]
   b7a32:	2202      	movs	r2, #2
   b7a34:	68db      	ldr	r3, [r3, #12]
   b7a36:	4798      	blx	r3
}
   b7a38:	b005      	add	sp, #20
   b7a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7a3e:	bf00      	nop
   b7a40:	2003e708 	.word	0x2003e708
   b7a44:	000b9e40 	.word	0x000b9e40
   b7a48:	000b9dd4 	.word	0x000b9dd4
   b7a4c:	000b9e22 	.word	0x000b9e22
   b7a50:	000ba098 	.word	0x000ba098
   b7a54:	000b9bd6 	.word	0x000b9bd6
   b7a58:	000b9e24 	.word	0x000b9e24
   b7a5c:	000b9e27 	.word	0x000b9e27
   b7a60:	000b9c2f 	.word	0x000b9c2f
   b7a64:	000b9e2a 	.word	0x000b9e2a
   b7a68:	000b9e2f 	.word	0x000b9e2f
   b7a6c:	000b9e1f 	.word	0x000b9e1f

000b7a70 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b7a70:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7a72:	2000      	movs	r0, #0
   b7a74:	f7fe fd2c 	bl	b64d0 <spark_sync_time_pending>
   b7a78:	b128      	cbz	r0, b7a86 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7a7a:	f7fe fd19 	bl	b64b0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7a7e:	f080 0001 	eor.w	r0, r0, #1
   b7a82:	b2c0      	uxtb	r0, r0
    }
   b7a84:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7a86:	2001      	movs	r0, #1
   b7a88:	e7fc      	b.n	b7a84 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b7a8a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b7a8a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b7a8c:	2000      	movs	r0, #0
   b7a8e:	f7fe fa9f 	bl	b5fd0 <hal_rtc_time_is_valid>
    if (rtcstate)
   b7a92:	4604      	mov	r4, r0
   b7a94:	b9a0      	cbnz	r0, b7ac0 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b7a96:	f7fe fc3b 	bl	b6310 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b7a9a:	2801      	cmp	r0, #1
   b7a9c:	d110      	bne.n	b7ac0 <_ZN9TimeClass7isValidEv+0x36>
   b7a9e:	4620      	mov	r0, r4
   b7aa0:	f7fe fc66 	bl	b6370 <system_thread_get_state>
   b7aa4:	b960      	cbnz	r0, b7ac0 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b7aa6:	f7ff ffe3 	bl	b7a70 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b7aaa:	b910      	cbnz	r0, b7ab2 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b7aac:	f7fe fcf0 	bl	b6490 <spark_process>
        while (_while() && !_condition()) {
   b7ab0:	e7f9      	b.n	b7aa6 <_ZN9TimeClass7isValidEv+0x1c>
   b7ab2:	f7ff ffdd 	bl	b7a70 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b7ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b7aba:	2000      	movs	r0, #0
   b7abc:	f7fe ba88 	b.w	b5fd0 <hal_rtc_time_is_valid>
}
   b7ac0:	4620      	mov	r0, r4
   b7ac2:	bd10      	pop	{r4, pc}

000b7ac4 <_ZN9TimeClass3nowEv>:
{
   b7ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b7ac6:	f7ff ffe0 	bl	b7a8a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b7aca:	2210      	movs	r2, #16
   b7acc:	2100      	movs	r1, #0
   b7ace:	4668      	mov	r0, sp
   b7ad0:	f001 fe92 	bl	b97f8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b7ad4:	2100      	movs	r1, #0
   b7ad6:	4668      	mov	r0, sp
   b7ad8:	f7fe fa82 	bl	b5fe0 <hal_rtc_get_time>
}
   b7adc:	9800      	ldr	r0, [sp, #0]
   b7ade:	b005      	add	sp, #20
   b7ae0:	f85d fb04 	ldr.w	pc, [sp], #4

000b7ae4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7ae4:	4b02      	ldr	r3, [pc, #8]	; (b7af0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7ae6:	681a      	ldr	r2, [r3, #0]
   b7ae8:	4b02      	ldr	r3, [pc, #8]	; (b7af4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7aea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7aec:	4770      	bx	lr
   b7aee:	bf00      	nop
   b7af0:	2003dd40 	.word	0x2003dd40
   b7af4:	2003e6a4 	.word	0x2003e6a4

000b7af8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7af8:	2100      	movs	r1, #0
   b7afa:	f7fe bc19 	b.w	b6330 <system_delay_ms>
	...

000b7b00 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7b00:	4b01      	ldr	r3, [pc, #4]	; (b7b08 <_GLOBAL__sub_I_RGB+0x8>)
   b7b02:	2200      	movs	r2, #0
   b7b04:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7b06:	4770      	bx	lr
   b7b08:	2003e6a8 	.word	0x2003e6a8

000b7b0c <_ZN8particle6detail9_getVCellEhh>:
namespace particle {
namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   b7b0c:	0909      	lsrs	r1, r1, #4
   b7b0e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   b7b12:	ee07 1a90 	vmov	s15, r1
        return value / 800.0;
    }
   b7b16:	ed9f 0a03 	vldr	s0, [pc, #12]	; b7b24 <_ZN8particle6detail9_getVCellEhh+0x18>
        float value = (float)((MSB << 4) | (LSB >> 4));
   b7b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
   b7b1e:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b7b22:	4770      	bx	lr
   b7b24:	44480000 	.word	0x44480000

000b7b28 <_ZN8particle6detail7_getSoCEhhh>:

        // Maxim ModelGauge doc only mentions 18 and 19 bit
        // MSB is the whole number
        // LSB is the decimal, resolution in units 1/256%
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b7b28:	eb01 2300 	add.w	r3, r1, r0, lsl #8
   b7b2c:	ee00 3a10 	vmov	s0, r3
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
   b7b30:	2a13      	cmp	r2, #19
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b7b32:	bf0c      	ite	eq
   b7b34:	eddf 7a04 	vldreq	s15, [pc, #16]	; b7b48 <_ZN8particle6detail7_getSoCEhhh+0x20>
        } else { // default to 18-bit calculation
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b7b38:	eddf 7a04 	vldrne	s15, [pc, #16]	; b7b4c <_ZN8particle6detail7_getSoCEhhh+0x24>
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b7b3c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b7b40:	ee20 0a27 	vmul.f32	s0, s0, s15
        }
        return soc_percent;

    }
   b7b44:	4770      	bx	lr
   b7b46:	bf00      	nop
   b7b48:	3b000000 	.word	0x3b000000
   b7b4c:	3b800000 	.word	0x3b800000

000b7b50 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b7b50:	6800      	ldr	r0, [r0, #0]
   b7b52:	f000 be0c 	b.w	b876e <_ZN7TwoWire4lockEv>

000b7b56 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b7b56:	b510      	push	{r4, lr}
   b7b58:	4604      	mov	r4, r0
      lock_(_lock) {
   b7b5a:	6001      	str	r1, [r0, #0]
   b7b5c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b7b5e:	b10a      	cbz	r2, b7b64 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b7b60:	f7ff fff6 	bl	b7b50 <_ZN9FuelGauge4lockEv>
}
   b7b64:	4620      	mov	r0, r4
   b7b66:	bd10      	pop	{r4, pc}

000b7b68 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b7b68:	b513      	push	{r0, r1, r4, lr}
   b7b6a:	4604      	mov	r4, r0
   b7b6c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b7b6e:	f001 f9b3 	bl	b8ed8 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b7b72:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b7b74:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b7b76:	4620      	mov	r0, r4
   b7b78:	f7ff ffed 	bl	b7b56 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b7b7c:	4620      	mov	r0, r4
   b7b7e:	b002      	add	sp, #8
   b7b80:	bd10      	pop	{r4, pc}

000b7b82 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b7b82:	6800      	ldr	r0, [r0, #0]
   b7b84:	f000 bdfc 	b.w	b8780 <_ZN7TwoWire6unlockEv>

000b7b88 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b7b88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7b8c:	4604      	mov	r4, r0
   b7b8e:	460d      	mov	r5, r1
   b7b90:	4617      	mov	r7, r2
   b7b92:	461e      	mov	r6, r3
   b7b94:	f7ff ffdc 	bl	b7b50 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7b98:	2236      	movs	r2, #54	; 0x36
   b7b9a:	2300      	movs	r3, #0
   b7b9c:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b7ba0:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b7ba2:	230a      	movs	r3, #10
   b7ba4:	f04f 0801 	mov.w	r8, #1
   b7ba8:	4669      	mov	r1, sp
   b7baa:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b7bae:	f000 fdc2 	bl	b8736 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b7bb2:	6820      	ldr	r0, [r4, #0]
   b7bb4:	6803      	ldr	r3, [r0, #0]
   b7bb6:	4629      	mov	r1, r5
   b7bb8:	689b      	ldr	r3, [r3, #8]
   b7bba:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b7bbc:	6820      	ldr	r0, [r4, #0]
   b7bbe:	4641      	mov	r1, r8
   b7bc0:	f000 fdd1 	bl	b8766 <_ZN7TwoWire15endTransmissionEh>
   b7bc4:	4605      	mov	r5, r0
   b7bc6:	b140      	cbz	r0, b7bda <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b7bc8:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   b7bcc:	4620      	mov	r0, r4
   b7bce:	f7ff ffd8 	bl	b7b82 <_ZN9FuelGauge6unlockEv>
}
   b7bd2:	4628      	mov	r0, r5
   b7bd4:	b004      	add	sp, #16
   b7bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b7bda:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b7bdc:	6820      	ldr	r0, [r4, #0]
   b7bde:	9301      	str	r3, [sp, #4]
   b7be0:	4669      	mov	r1, sp
   b7be2:	f000 fd91 	bl	b8708 <_ZN7TwoWire11requestFromERK16WireTransmission>
   b7be6:	2802      	cmp	r0, #2
   b7be8:	d1ee      	bne.n	b7bc8 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b7bea:	6820      	ldr	r0, [r4, #0]
   b7bec:	6803      	ldr	r3, [r0, #0]
   b7bee:	695b      	ldr	r3, [r3, #20]
   b7bf0:	4798      	blx	r3
   b7bf2:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b7bf4:	6820      	ldr	r0, [r4, #0]
   b7bf6:	6803      	ldr	r3, [r0, #0]
   b7bf8:	695b      	ldr	r3, [r3, #20]
   b7bfa:	4798      	blx	r3
   b7bfc:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b7bfe:	e7e5      	b.n	b7bcc <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b7c00 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   b7c00:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   b7c02:	2300      	movs	r3, #0
   b7c04:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b7c08:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b7c0c:	f10d 0206 	add.w	r2, sp, #6
   b7c10:	f10d 0307 	add.w	r3, sp, #7
   b7c14:	2102      	movs	r1, #2
   b7c16:	f7ff ffb7 	bl	b7b88 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b7c1a:	b940      	cbnz	r0, b7c2e <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   b7c1c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b7c20:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b7c24:	b003      	add	sp, #12
   b7c26:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   b7c2a:	f7ff bf6f 	b.w	b7b0c <_ZN8particle6detail9_getVCellEhh>
}
   b7c2e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b7c32:	b003      	add	sp, #12
   b7c34:	f85d fb04 	ldr.w	pc, [sp], #4

000b7c38 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   b7c38:	b510      	push	{r4, lr}
   b7c3a:	b08c      	sub	sp, #48	; 0x30
    byte MSB = 0;
   b7c3c:	2300      	movs	r3, #0
   b7c3e:	f88d 300e 	strb.w	r3, [sp, #14]
    byte LSB = 0;
   b7c42:	f88d 300f 	strb.w	r3, [sp, #15]
    if (readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b7c46:	2104      	movs	r1, #4
   b7c48:	f10d 030f 	add.w	r3, sp, #15
   b7c4c:	f10d 020e 	add.w	r2, sp, #14
   b7c50:	f7ff ff9a 	bl	b7b88 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b7c54:	4601      	mov	r1, r0
   b7c56:	b9c8      	cbnz	r0, b7c8c <_ZN9FuelGauge6getSoCEv+0x54>
    hal_power_config config = {};
   b7c58:	2420      	movs	r4, #32
   b7c5a:	9001      	str	r0, [sp, #4]
   b7c5c:	4622      	mov	r2, r4
   b7c5e:	a804      	add	r0, sp, #16
   b7c60:	f001 fdca 	bl	b97f8 <memset>
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b7c64:	9901      	ldr	r1, [sp, #4]
    config.size = sizeof(config);
   b7c66:	f88d 4015 	strb.w	r4, [sp, #21]
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b7c6a:	a804      	add	r0, sp, #16
   b7c6c:	f7fe fba6 	bl	b63bc <system_power_management_get_config>
   b7c70:	b950      	cbnz	r0, b7c88 <_ZN9FuelGauge6getSoCEv+0x50>
        soc_bits = config.soc_bits;
   b7c72:	f89d 201e 	ldrb.w	r2, [sp, #30]
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b7c76:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b7c7a:	f89d 000e 	ldrb.w	r0, [sp, #14]
}
   b7c7e:	b00c      	add	sp, #48	; 0x30
   b7c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b7c84:	f7ff bf50 	b.w	b7b28 <_ZN8particle6detail7_getSoCEhhh>
    int soc_bits = particle::power::DEFAULT_SOC_18_BIT_PRECISION;
   b7c88:	2212      	movs	r2, #18
   b7c8a:	e7f4      	b.n	b7c76 <_ZN9FuelGauge6getSoCEv+0x3e>
}
   b7c8c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b7c90:	b00c      	add	sp, #48	; 0x30
   b7c92:	bd10      	pop	{r4, pc}

000b7c94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7c94:	4b01      	ldr	r3, [pc, #4]	; (b7c9c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7c96:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7c98:	4770      	bx	lr
   b7c9a:	bf00      	nop
   b7c9c:	2003dd44 	.word	0x2003dd44

000b7ca0 <serialEventRun>:
{
   b7ca0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7ca2:	4b0b      	ldr	r3, [pc, #44]	; (b7cd0 <serialEventRun+0x30>)
   b7ca4:	b143      	cbz	r3, b7cb8 <serialEventRun+0x18>
   b7ca6:	f000 fc03 	bl	b84b0 <_Z16_fetch_usbserialv>
   b7caa:	6803      	ldr	r3, [r0, #0]
   b7cac:	691b      	ldr	r3, [r3, #16]
   b7cae:	4798      	blx	r3
   b7cb0:	2800      	cmp	r0, #0
   b7cb2:	dd01      	ble.n	b7cb8 <serialEventRun+0x18>
        serialEvent();
   b7cb4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7cb8:	4b06      	ldr	r3, [pc, #24]	; (b7cd4 <serialEventRun+0x34>)
   b7cba:	b143      	cbz	r3, b7cce <serialEventRun+0x2e>
   b7cbc:	f001 f88e 	bl	b8ddc <_Z22__fetch_global_Serial1v>
   b7cc0:	6803      	ldr	r3, [r0, #0]
   b7cc2:	691b      	ldr	r3, [r3, #16]
   b7cc4:	4798      	blx	r3
   b7cc6:	2800      	cmp	r0, #0
   b7cc8:	dd01      	ble.n	b7cce <serialEventRun+0x2e>
        serialEvent1();
   b7cca:	f3af 8000 	nop.w
}
   b7cce:	bd08      	pop	{r3, pc}
	...

000b7cd8 <_post_loop>:
{
   b7cd8:	b508      	push	{r3, lr}
	serialEventRun();
   b7cda:	f7ff ffe1 	bl	b7ca0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7cde:	f7fe f96f 	bl	b5fc0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7ce2:	4b01      	ldr	r3, [pc, #4]	; (b7ce8 <_post_loop+0x10>)
   b7ce4:	6018      	str	r0, [r3, #0]
}
   b7ce6:	bd08      	pop	{r3, pc}
   b7ce8:	2003e728 	.word	0x2003e728

000b7cec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7cec:	4805      	ldr	r0, [pc, #20]	; (b7d04 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7cee:	4a06      	ldr	r2, [pc, #24]	; (b7d08 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7cf0:	4906      	ldr	r1, [pc, #24]	; (b7d0c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7cf2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7cf4:	1a12      	subs	r2, r2, r0
   b7cf6:	f001 fd57 	bl	b97a8 <memcpy>
    __backup_sram_signature = signature;
   b7cfa:	4b05      	ldr	r3, [pc, #20]	; (b7d10 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7cfc:	4a05      	ldr	r2, [pc, #20]	; (b7d14 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7cfe:	601a      	str	r2, [r3, #0]
}
   b7d00:	bd08      	pop	{r3, pc}
   b7d02:	bf00      	nop
   b7d04:	2003f400 	.word	0x2003f400
   b7d08:	2003f404 	.word	0x2003f404
   b7d0c:	000ba1e4 	.word	0x000ba1e4
   b7d10:	2003f400 	.word	0x2003f400
   b7d14:	9a271c1e 	.word	0x9a271c1e

000b7d18 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7d18:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7d1a:	2300      	movs	r3, #0
   b7d1c:	9300      	str	r3, [sp, #0]
   b7d1e:	461a      	mov	r2, r3
   b7d20:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7d24:	f7fe fb36 	bl	b6394 <system_ctrl_set_result>
}
   b7d28:	b003      	add	sp, #12
   b7d2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7d30 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7d30:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7d32:	8843      	ldrh	r3, [r0, #2]
   b7d34:	2b0a      	cmp	r3, #10
   b7d36:	d008      	beq.n	b7d4a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7d38:	2b50      	cmp	r3, #80	; 0x50
   b7d3a:	d10b      	bne.n	b7d54 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7d3c:	4b09      	ldr	r3, [pc, #36]	; (b7d64 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7d3e:	681b      	ldr	r3, [r3, #0]
   b7d40:	b14b      	cbz	r3, b7d56 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7d42:	b003      	add	sp, #12
   b7d44:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7d48:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7d4a:	f7ff ffe5 	bl	b7d18 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7d4e:	b003      	add	sp, #12
   b7d50:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7d54:	2300      	movs	r3, #0
   b7d56:	9300      	str	r3, [sp, #0]
   b7d58:	461a      	mov	r2, r3
   b7d5a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7d5e:	f7fe fb19 	bl	b6394 <system_ctrl_set_result>
}
   b7d62:	e7f4      	b.n	b7d4e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7d64:	2003e6bc 	.word	0x2003e6bc

000b7d68 <module_user_init_hook>:
{
   b7d68:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7d6a:	4812      	ldr	r0, [pc, #72]	; (b7db4 <module_user_init_hook+0x4c>)
   b7d6c:	2100      	movs	r1, #0
   b7d6e:	f7fe fc07 	bl	b6580 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7d72:	4b11      	ldr	r3, [pc, #68]	; (b7db8 <module_user_init_hook+0x50>)
   b7d74:	681a      	ldr	r2, [r3, #0]
   b7d76:	4b11      	ldr	r3, [pc, #68]	; (b7dbc <module_user_init_hook+0x54>)
   b7d78:	429a      	cmp	r2, r3
   b7d7a:	4b11      	ldr	r3, [pc, #68]	; (b7dc0 <module_user_init_hook+0x58>)
   b7d7c:	bf0c      	ite	eq
   b7d7e:	2201      	moveq	r2, #1
   b7d80:	2200      	movne	r2, #0
   b7d82:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7d84:	d001      	beq.n	b7d8a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7d86:	f7ff ffb1 	bl	b7cec <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7d8a:	f7fe f901 	bl	b5f90 <HAL_RNG_GetRandomNumber>
   b7d8e:	4604      	mov	r4, r0
    srand(seed);
   b7d90:	f001 fd3a 	bl	b9808 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7d94:	4b0b      	ldr	r3, [pc, #44]	; (b7dc4 <module_user_init_hook+0x5c>)
   b7d96:	b113      	cbz	r3, b7d9e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7d98:	4620      	mov	r0, r4
   b7d9a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7d9e:	2100      	movs	r1, #0
   b7da0:	4808      	ldr	r0, [pc, #32]	; (b7dc4 <module_user_init_hook+0x5c>)
   b7da2:	f7fe fb9d 	bl	b64e0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7daa:	4807      	ldr	r0, [pc, #28]	; (b7dc8 <module_user_init_hook+0x60>)
   b7dac:	2100      	movs	r1, #0
   b7dae:	f7fe bae7 	b.w	b6380 <system_ctrl_set_app_request_handler>
   b7db2:	bf00      	nop
   b7db4:	000b7c95 	.word	0x000b7c95
   b7db8:	2003f400 	.word	0x2003f400
   b7dbc:	9a271c1e 	.word	0x9a271c1e
   b7dc0:	2003e6b8 	.word	0x2003e6b8
   b7dc4:	00000000 	.word	0x00000000
   b7dc8:	000b7d31 	.word	0x000b7d31

000b7dcc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7dcc:	4770      	bx	lr

000b7dce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b7dce:	2000      	movs	r0, #0
   b7dd0:	4770      	bx	lr

000b7dd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7dd2:	b510      	push	{r4, lr}
   b7dd4:	2110      	movs	r1, #16
   b7dd6:	4604      	mov	r4, r0
   b7dd8:	f7fc f95f 	bl	b409a <_ZdlPvj>
   b7ddc:	4620      	mov	r0, r4
   b7dde:	bd10      	pop	{r4, pc}

000b7de0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7de0:	b508      	push	{r3, lr}
      { delete this; }
   b7de2:	f7ff fff6 	bl	b7dd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7de6:	bd08      	pop	{r3, pc}

000b7de8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7de8:	b530      	push	{r4, r5, lr}
        type_(type) {
   b7dea:	2200      	movs	r2, #0
   b7dec:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b7df0:	6002      	str	r2, [r0, #0]
   b7df2:	8084      	strh	r4, [r0, #4]
   b7df4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b7df6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7df8:	680c      	ldr	r4, [r1, #0]
   b7dfa:	8085      	strh	r5, [r0, #4]
   b7dfc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7dfe:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7e00:	bd30      	pop	{r4, r5, pc}

000b7e02 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7e02:	b510      	push	{r4, lr}
   b7e04:	4604      	mov	r4, r0
    free((void*)msg_);
   b7e06:	6800      	ldr	r0, [r0, #0]
   b7e08:	f7fe fb7a 	bl	b6500 <free>
}
   b7e0c:	4620      	mov	r0, r4
   b7e0e:	bd10      	pop	{r4, pc}

000b7e10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7e10:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b7e12:	68c4      	ldr	r4, [r0, #12]
   b7e14:	b1f4      	cbz	r4, b7e54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b7e16:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b7e18:	2b02      	cmp	r3, #2
   b7e1a:	d103      	bne.n	b7e24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b7e1c:	f104 000c 	add.w	r0, r4, #12
   b7e20:	f7ff ffef 	bl	b7e02 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7e24:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7e26:	b135      	cbz	r5, b7e36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b7e28:	4628      	mov	r0, r5
   b7e2a:	f7fe fde3 	bl	b69f4 <_ZNSt14_Function_baseD1Ev>
   b7e2e:	2110      	movs	r1, #16
   b7e30:	4628      	mov	r0, r5
   b7e32:	f7fc f932 	bl	b409a <_ZdlPvj>
   b7e36:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7e38:	b135      	cbz	r5, b7e48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b7e3a:	4628      	mov	r0, r5
   b7e3c:	f7fe fdda 	bl	b69f4 <_ZNSt14_Function_baseD1Ev>
   b7e40:	2110      	movs	r1, #16
   b7e42:	4628      	mov	r0, r5
   b7e44:	f7fc f929 	bl	b409a <_ZdlPvj>
   b7e48:	4620      	mov	r0, r4
   b7e4a:	2114      	movs	r1, #20
   b7e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7e50:	f7fc b923 	b.w	b409a <_ZdlPvj>
   b7e54:	bd38      	pop	{r3, r4, r5, pc}

000b7e56 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7e56:	680b      	ldr	r3, [r1, #0]
   b7e58:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7e5a:	684b      	ldr	r3, [r1, #4]
   b7e5c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7e5e:	b113      	cbz	r3, b7e66 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b7e60:	685a      	ldr	r2, [r3, #4]
   b7e62:	3201      	adds	r2, #1
   b7e64:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7e66:	4770      	bx	lr

000b7e68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b7e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7e6a:	4604      	mov	r4, r0
   b7e6c:	4668      	mov	r0, sp
   b7e6e:	460d      	mov	r5, r1
   b7e70:	f7ff fff1 	bl	b7e56 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7e74:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7e76:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7e78:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b7e7a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b7e7c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b7e7e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b7e80:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b7e82:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b7e84:	f7fe fde5 	bl	b6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b7e88:	b135      	cbz	r5, b7e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b7e8a:	1d28      	adds	r0, r5, #4
   b7e8c:	f7fe fde1 	bl	b6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e90:	2108      	movs	r1, #8
   b7e92:	4628      	mov	r0, r5
   b7e94:	f7fc f901 	bl	b409a <_ZdlPvj>
        return p;
    }
   b7e98:	4620      	mov	r0, r4
   b7e9a:	b003      	add	sp, #12
   b7e9c:	bd30      	pop	{r4, r5, pc}

000b7e9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b7e9e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7ea0:	b510      	push	{r4, lr}
      if (_M_empty())
   b7ea2:	b90a      	cbnz	r2, b7ea8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b7ea4:	f001 f840 	bl	b8f28 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b7ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7eac:	68c3      	ldr	r3, [r0, #12]
   b7eae:	4718      	bx	r3

000b7eb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7eb0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7eb2:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b7eb4:	f100 0110 	add.w	r1, r0, #16
   b7eb8:	f7ff fff1 	bl	b7e9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b7ebc:	bd08      	pop	{r3, pc}

000b7ebe <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b7ebe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7ec0:	b510      	push	{r4, lr}
      if (_M_empty())
   b7ec2:	b90a      	cbnz	r2, b7ec8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b7ec4:	f001 f830 	bl	b8f28 <_ZSt25__throw_bad_function_callv>
    }
   b7ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7ecc:	68c3      	ldr	r3, [r0, #12]
   b7ece:	4718      	bx	r3

000b7ed0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7ed0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7ed2:	6800      	ldr	r0, [r0, #0]
   b7ed4:	f100 0110 	add.w	r1, r0, #16
   b7ed8:	f7ff fff1 	bl	b7ebe <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b7edc:	bd08      	pop	{r3, pc}
	...

000b7ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b7ee0:	b538      	push	{r3, r4, r5, lr}
   b7ee2:	2300      	movs	r3, #0
   b7ee4:	4604      	mov	r4, r0
   b7ee6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7ee8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b7eea:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7eec:	f7fc f8d1 	bl	b4092 <_Znwj>
   b7ef0:	b128      	cbz	r0, b7efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b7ef2:	2301      	movs	r3, #1
   b7ef4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b7ef8:	4b02      	ldr	r3, [pc, #8]	; (b7f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b7efa:	6003      	str	r3, [r0, #0]
   b7efc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7efe:	6020      	str	r0, [r4, #0]
	}
   b7f00:	4620      	mov	r0, r4
   b7f02:	bd38      	pop	{r3, r4, r5, pc}
   b7f04:	000b9ed4 	.word	0x000b9ed4

000b7f08 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b7f08:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7f0a:	2300      	movs	r3, #0
   b7f0c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7f0e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7f10:	4604      	mov	r4, r0
   b7f12:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7f14:	b12b      	cbz	r3, b7f22 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7f16:	2202      	movs	r2, #2
   b7f18:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7f1a:	68eb      	ldr	r3, [r5, #12]
   b7f1c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7f1e:	68ab      	ldr	r3, [r5, #8]
   b7f20:	60a3      	str	r3, [r4, #8]
    }
   b7f22:	4620      	mov	r0, r4
   b7f24:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7f28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b7f28:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7f2a:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b7f2c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b7f2e:	4668      	mov	r0, sp
   b7f30:	f7ff ff5a 	bl	b7de8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7f34:	f04f 0302 	mov.w	r3, #2
   b7f38:	e8d4 2f4f 	ldrexb	r2, [r4]
   b7f3c:	2a00      	cmp	r2, #0
   b7f3e:	d103      	bne.n	b7f48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b7f40:	e8c4 3f41 	strexb	r1, r3, [r4]
   b7f44:	2900      	cmp	r1, #0
   b7f46:	d1f7      	bne.n	b7f38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b7f48:	d125      	bne.n	b7f96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b7f4a:	f104 050c 	add.w	r5, r4, #12
   b7f4e:	4669      	mov	r1, sp
   b7f50:	4628      	mov	r0, r5
   b7f52:	f7ff ff49 	bl	b7de8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b7f56:	f3bf 8f5b 	dmb	ish
   b7f5a:	2301      	movs	r3, #1
   b7f5c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7f5e:	2000      	movs	r0, #0
   b7f60:	f104 0308 	add.w	r3, r4, #8
   b7f64:	f3bf 8f5b 	dmb	ish
   b7f68:	e853 6f00 	ldrex	r6, [r3]
   b7f6c:	e843 0200 	strex	r2, r0, [r3]
   b7f70:	2a00      	cmp	r2, #0
   b7f72:	d1f9      	bne.n	b7f68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b7f74:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7f78:	b16e      	cbz	r6, b7f96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b7f7a:	f7fe f9e9 	bl	b6350 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7f7e:	b178      	cbz	r0, b7fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7f80:	4629      	mov	r1, r5
   b7f82:	4630      	mov	r0, r6
   b7f84:	f7ff ff8b 	bl	b7e9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b7f88:	4630      	mov	r0, r6
   b7f8a:	f7fe fd33 	bl	b69f4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7f8e:	2110      	movs	r1, #16
   b7f90:	4630      	mov	r0, r6
   b7f92:	f7fc f882 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b7f96:	4668      	mov	r0, sp
   b7f98:	f7ff ff33 	bl	b7e02 <_ZN8particle5ErrorD1Ev>
    }
   b7f9c:	b009      	add	sp, #36	; 0x24
   b7f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7fa0:	4631      	mov	r1, r6
   b7fa2:	a802      	add	r0, sp, #8
   b7fa4:	f7ff ffb0 	bl	b7f08 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7fa8:	68e0      	ldr	r0, [r4, #12]
   b7faa:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7fae:	b108      	cbz	r0, b7fb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b7fb0:	f001 fc82 	bl	b98b8 <strdup>
        type_(type) {
   b7fb4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7fb6:	2010      	movs	r0, #16
   b7fb8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7fbc:	f7fc f869 	bl	b4092 <_Znwj>
   b7fc0:	4605      	mov	r5, r0
   b7fc2:	b1e8      	cbz	r0, b8000 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7fc4:	2700      	movs	r7, #0
   b7fc6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7fc8:	2018      	movs	r0, #24
   b7fca:	f7fc f862 	bl	b4092 <_Znwj>
   b7fce:	4604      	mov	r4, r0
   b7fd0:	b188      	cbz	r0, b7ff6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b7fd2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7fd4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7fd6:	a802      	add	r0, sp, #8
   b7fd8:	f7fe fd43 	bl	b6a62 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7fdc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7fde:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7fe0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7fe2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7fe4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7fe6:	a906      	add	r1, sp, #24
   b7fe8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7fea:	60e3      	str	r3, [r4, #12]
   b7fec:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b7ff0:	9205      	str	r2, [sp, #20]
   b7ff2:	f7ff fef9 	bl	b7de8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b7ff6:	4b08      	ldr	r3, [pc, #32]	; (b8018 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b7ff8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7ffa:	4b08      	ldr	r3, [pc, #32]	; (b801c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7ffc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7ffe:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b8000:	a806      	add	r0, sp, #24
   b8002:	f7ff fefe 	bl	b7e02 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8006:	a802      	add	r0, sp, #8
   b8008:	f7fe fcf4 	bl	b69f4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b800c:	2200      	movs	r2, #0
   b800e:	4629      	mov	r1, r5
   b8010:	4803      	ldr	r0, [pc, #12]	; (b8020 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b8012:	f7fe f9a5 	bl	b6360 <application_thread_invoke>
   b8016:	e7b7      	b.n	b7f88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b8018:	000b7eb1 	.word	0x000b7eb1
   b801c:	000b8135 	.word	0x000b8135
   b8020:	000b864d 	.word	0x000b864d

000b8024 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b8024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8028:	b08b      	sub	sp, #44	; 0x2c
   b802a:	4605      	mov	r5, r0
   b802c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b8030:	460f      	mov	r7, r1
   b8032:	4690      	mov	r8, r2
   b8034:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8036:	f7fe fa3b 	bl	b64b0 <spark_cloud_flag_connected>
   b803a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b803c:	4683      	mov	fp, r0
   b803e:	bb38      	cbnz	r0, b8090 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b8040:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b8044:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8046:	a905      	add	r1, sp, #20
   b8048:	4630      	mov	r0, r6
   b804a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b804e:	f7ff fecb 	bl	b7de8 <_ZN8particle5ErrorC1EOS0_>
   b8052:	2014      	movs	r0, #20
   b8054:	f7fc f81d 	bl	b4092 <_Znwj>
   b8058:	4604      	mov	r4, r0
   b805a:	b148      	cbz	r0, b8070 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b805c:	2302      	movs	r3, #2
   b805e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8060:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8062:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8066:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b8068:	4631      	mov	r1, r6
   b806a:	300c      	adds	r0, #12
   b806c:	f7ff febc 	bl	b7de8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8070:	4628      	mov	r0, r5
	: __shared_count(__p)
   b8072:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8074:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b8078:	f7ff ff32 	bl	b7ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b807c:	4630      	mov	r0, r6
   b807e:	f7ff fec0 	bl	b7e02 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b8082:	a805      	add	r0, sp, #20
   b8084:	f7ff febd 	bl	b7e02 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b8088:	4628      	mov	r0, r5
   b808a:	b00b      	add	sp, #44	; 0x2c
   b808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b8090:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b8092:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b8094:	2014      	movs	r0, #20
   b8096:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b809a:	9307      	str	r3, [sp, #28]
   b809c:	f7fb fff9 	bl	b4092 <_Znwj>
   b80a0:	4601      	mov	r1, r0
   b80a2:	b118      	cbz	r0, b80ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b80a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b80a8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b80aa:	7044      	strb	r4, [r0, #1]
   b80ac:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b80ae:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b80b0:	f7ff ff16 	bl	b7ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b80b4:	4b1e      	ldr	r3, [pc, #120]	; (b8130 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b80b6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b80b8:	2008      	movs	r0, #8
   b80ba:	f7fb ffea 	bl	b4092 <_Znwj>
   b80be:	4604      	mov	r4, r0
   b80c0:	b110      	cbz	r0, b80c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b80c2:	a903      	add	r1, sp, #12
   b80c4:	f7ff fec7 	bl	b7e56 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b80c8:	9600      	str	r6, [sp, #0]
   b80ca:	fa5f f38a 	uxtb.w	r3, sl
   b80ce:	464a      	mov	r2, r9
   b80d0:	4641      	mov	r1, r8
   b80d2:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b80d4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b80d6:	f7fe f9f3 	bl	b64c0 <spark_send_event>
   b80da:	b9b8      	cbnz	r0, b810c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b80dc:	9b03      	ldr	r3, [sp, #12]
   b80de:	785b      	ldrb	r3, [r3, #1]
   b80e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b80e4:	b993      	cbnz	r3, b810c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b80e6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b80ea:	a905      	add	r1, sp, #20
   b80ec:	a803      	add	r0, sp, #12
   b80ee:	9205      	str	r2, [sp, #20]
   b80f0:	f8ad 3018 	strh.w	r3, [sp, #24]
   b80f4:	f7ff ff18 	bl	b7f28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b80f8:	a805      	add	r0, sp, #20
   b80fa:	f7ff fe82 	bl	b7e02 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b80fe:	a805      	add	r0, sp, #20
   b8100:	9909      	ldr	r1, [sp, #36]	; 0x24
   b8102:	f7ff feb1 	bl	b7e68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8106:	a806      	add	r0, sp, #24
   b8108:	f7fe fca3 	bl	b6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b810c:	a903      	add	r1, sp, #12
   b810e:	a805      	add	r0, sp, #20
   b8110:	f7ff fea1 	bl	b7e56 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8114:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8116:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8118:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b811a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b811c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b811e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b8120:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b8122:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8124:	f7fe fc95 	bl	b6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8128:	a804      	add	r0, sp, #16
   b812a:	f7fe fc92 	bl	b6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b812e:	e7ab      	b.n	b8088 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b8130:	000b81b1 	.word	0x000b81b1

000b8134 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8134:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8138:	4605      	mov	r5, r0
	switch (__op)
   b813a:	d103      	bne.n	b8144 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b813c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b813e:	6003      	str	r3, [r0, #0]
      }
   b8140:	2000      	movs	r0, #0
   b8142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b8144:	2a02      	cmp	r2, #2
   b8146:	d010      	beq.n	b816a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b8148:	2a03      	cmp	r2, #3
   b814a:	d1f9      	bne.n	b8140 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b814c:	6804      	ldr	r4, [r0, #0]
   b814e:	2c00      	cmp	r4, #0
   b8150:	d0f6      	beq.n	b8140 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b8152:	f104 0010 	add.w	r0, r4, #16
   b8156:	f7ff fe54 	bl	b7e02 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b815a:	4620      	mov	r0, r4
   b815c:	f7fe fc4a 	bl	b69f4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8160:	2118      	movs	r1, #24
   b8162:	4620      	mov	r0, r4
   b8164:	f7fb ff99 	bl	b409a <_ZdlPvj>
   b8168:	e7ea      	b.n	b8140 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b816a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b816c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b816e:	f7fb ff90 	bl	b4092 <_Znwj>
   b8172:	4604      	mov	r4, r0
   b8174:	b150      	cbz	r0, b818c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b8176:	4631      	mov	r1, r6
   b8178:	f7ff fec6 	bl	b7f08 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b817c:	6930      	ldr	r0, [r6, #16]
   b817e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8182:	b108      	cbz	r0, b8188 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b8184:	f001 fb98 	bl	b98b8 <strdup>
        type_(type) {
   b8188:	6120      	str	r0, [r4, #16]
   b818a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b818c:	602c      	str	r4, [r5, #0]
	}
   b818e:	e7d7      	b.n	b8140 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b8190 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b8190:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8192:	2300      	movs	r3, #0
   b8194:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b8196:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8198:	4604      	mov	r4, r0
   b819a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b819c:	b12b      	cbz	r3, b81aa <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b819e:	2202      	movs	r2, #2
   b81a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b81a2:	68eb      	ldr	r3, [r5, #12]
   b81a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b81a6:	68ab      	ldr	r3, [r5, #8]
   b81a8:	60a3      	str	r3, [r4, #8]
    }
   b81aa:	4620      	mov	r0, r4
   b81ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000b81b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b81b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b81b2:	b089      	sub	sp, #36	; 0x24
   b81b4:	4604      	mov	r4, r0
   b81b6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b81b8:	a801      	add	r0, sp, #4
   b81ba:	4611      	mov	r1, r2
   b81bc:	f7ff fe54 	bl	b7e68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b81c0:	b1a4      	cbz	r4, b81ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b81c2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b81c4:	b11d      	cbz	r5, b81ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b81c6:	4628      	mov	r0, r5
   b81c8:	f001 fb76 	bl	b98b8 <strdup>
   b81cc:	4605      	mov	r5, r0
   b81ce:	a801      	add	r0, sp, #4
   b81d0:	a903      	add	r1, sp, #12
        type_(type) {
   b81d2:	9503      	str	r5, [sp, #12]
   b81d4:	f8ad 4010 	strh.w	r4, [sp, #16]
   b81d8:	f7ff fea6 	bl	b7f28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b81dc:	a803      	add	r0, sp, #12
   b81de:	f7ff fe10 	bl	b7e02 <_ZN8particle5ErrorD1Ev>
   b81e2:	a802      	add	r0, sp, #8
   b81e4:	f7fe fc35 	bl	b6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b81e8:	b009      	add	sp, #36	; 0x24
   b81ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b81ec:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b81ee:	2301      	movs	r3, #1
   b81f0:	e8d5 2f4f 	ldrexb	r2, [r5]
   b81f4:	2a00      	cmp	r2, #0
   b81f6:	d103      	bne.n	b8200 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b81f8:	e8c5 3f41 	strexb	r1, r3, [r5]
   b81fc:	2900      	cmp	r1, #0
   b81fe:	d1f7      	bne.n	b81f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b8200:	d1ef      	bne.n	b81e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b8202:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b8204:	f3bf 8f5b 	dmb	ish
   b8208:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b820a:	1d2b      	adds	r3, r5, #4
   b820c:	f3bf 8f5b 	dmb	ish
   b8210:	e853 6f00 	ldrex	r6, [r3]
   b8214:	e843 4200 	strex	r2, r4, [r3]
   b8218:	2a00      	cmp	r2, #0
   b821a:	d1f9      	bne.n	b8210 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b821c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8220:	2e00      	cmp	r6, #0
   b8222:	d0de      	beq.n	b81e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8224:	4620      	mov	r0, r4
   b8226:	f7fe f893 	bl	b6350 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b822a:	4607      	mov	r7, r0
   b822c:	b160      	cbz	r0, b8248 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b822e:	f105 010c 	add.w	r1, r5, #12
   b8232:	4630      	mov	r0, r6
   b8234:	f7ff fe43 	bl	b7ebe <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b8238:	4630      	mov	r0, r6
   b823a:	f7fe fbdb 	bl	b69f4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b823e:	2110      	movs	r1, #16
   b8240:	4630      	mov	r0, r6
   b8242:	f7fb ff2a 	bl	b409a <_ZdlPvj>
   b8246:	e7cc      	b.n	b81e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8248:	4631      	mov	r1, r6
   b824a:	a803      	add	r0, sp, #12
   b824c:	f7ff ffa0 	bl	b8190 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8250:	7b2b      	ldrb	r3, [r5, #12]
   b8252:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8256:	2010      	movs	r0, #16
   b8258:	f7fb ff1b 	bl	b4092 <_Znwj>
   b825c:	4605      	mov	r5, r0
   b825e:	b1d0      	cbz	r0, b8296 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b8260:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8262:	2014      	movs	r0, #20
   b8264:	f7fb ff15 	bl	b4092 <_Znwj>
   b8268:	4604      	mov	r4, r0
   b826a:	b178      	cbz	r0, b828c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b826c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b826e:	4601      	mov	r1, r0
   b8270:	a803      	add	r0, sp, #12
   b8272:	f7fe fbf6 	bl	b6a62 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8276:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8278:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b827a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b827c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b827e:	9205      	str	r2, [sp, #20]
   b8280:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8282:	60e3      	str	r3, [r4, #12]
   b8284:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b8288:	9206      	str	r2, [sp, #24]
   b828a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b828c:	4b06      	ldr	r3, [pc, #24]	; (b82a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b828e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8290:	4b06      	ldr	r3, [pc, #24]	; (b82ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8292:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8294:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b8296:	a803      	add	r0, sp, #12
   b8298:	f7fe fbac 	bl	b69f4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b829c:	2200      	movs	r2, #0
   b829e:	4629      	mov	r1, r5
   b82a0:	4803      	ldr	r0, [pc, #12]	; (b82b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b82a2:	f7fe f85d 	bl	b6360 <application_thread_invoke>
   b82a6:	e7c7      	b.n	b8238 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b82a8:	000b7ed1 	.word	0x000b7ed1
   b82ac:	000b82b5 	.word	0x000b82b5
   b82b0:	000b864d 	.word	0x000b864d

000b82b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b82b4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b82b6:	b570      	push	{r4, r5, r6, lr}
   b82b8:	4604      	mov	r4, r0
	switch (__op)
   b82ba:	d103      	bne.n	b82c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b82bc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b82be:	6003      	str	r3, [r0, #0]
      }
   b82c0:	2000      	movs	r0, #0
   b82c2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b82c4:	2a02      	cmp	r2, #2
   b82c6:	d00c      	beq.n	b82e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b82c8:	2a03      	cmp	r2, #3
   b82ca:	d1f9      	bne.n	b82c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b82cc:	6804      	ldr	r4, [r0, #0]
   b82ce:	2c00      	cmp	r4, #0
   b82d0:	d0f6      	beq.n	b82c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b82d2:	4620      	mov	r0, r4
   b82d4:	f7fe fb8e 	bl	b69f4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b82d8:	2114      	movs	r1, #20
   b82da:	4620      	mov	r0, r4
   b82dc:	f7fb fedd 	bl	b409a <_ZdlPvj>
   b82e0:	e7ee      	b.n	b82c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b82e2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b82e4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b82e6:	f7fb fed4 	bl	b4092 <_Znwj>
   b82ea:	4605      	mov	r5, r0
   b82ec:	b120      	cbz	r0, b82f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b82ee:	4631      	mov	r1, r6
   b82f0:	f7ff ff4e 	bl	b8190 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b82f4:	7c33      	ldrb	r3, [r6, #16]
   b82f6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b82f8:	6025      	str	r5, [r4, #0]
	}
   b82fa:	e7e1      	b.n	b82c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b82fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b82fc:	4770      	bx	lr

000b82fe <_ZN9IPAddressD0Ev>:
   b82fe:	b510      	push	{r4, lr}
   b8300:	2118      	movs	r1, #24
   b8302:	4604      	mov	r4, r0
   b8304:	f7fb fec9 	bl	b409a <_ZdlPvj>
   b8308:	4620      	mov	r0, r4
   b830a:	bd10      	pop	{r4, pc}

000b830c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b830c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b830e:	7d03      	ldrb	r3, [r0, #20]
   b8310:	2b06      	cmp	r3, #6
{
   b8312:	b08d      	sub	sp, #52	; 0x34
   b8314:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8316:	f100 0704 	add.w	r7, r0, #4
   b831a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b831e:	d012      	beq.n	b8346 <_ZNK9IPAddress7printToER5Print+0x3a>
   b8320:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8324:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8328:	220a      	movs	r2, #10
   b832a:	4630      	mov	r0, r6
   b832c:	f7fe fbdd 	bl	b6aea <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8330:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8332:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8334:	d019      	beq.n	b836a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8336:	2c00      	cmp	r4, #0
   b8338:	d0f4      	beq.n	b8324 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b833a:	212e      	movs	r1, #46	; 0x2e
   b833c:	4630      	mov	r0, r6
   b833e:	f7fe fbc5 	bl	b6acc <_ZN5Print5printEc>
   b8342:	4404      	add	r4, r0
   b8344:	e7ee      	b.n	b8324 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8346:	232f      	movs	r3, #47	; 0x2f
   b8348:	466a      	mov	r2, sp
   b834a:	4639      	mov	r1, r7
   b834c:	200a      	movs	r0, #10
		buf[0] = 0;
   b834e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8352:	f7fd fe6d 	bl	b6030 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8356:	4668      	mov	r0, sp
   b8358:	f001 facb 	bl	b98f2 <strlen>
   b835c:	6833      	ldr	r3, [r6, #0]
   b835e:	4602      	mov	r2, r0
   b8360:	68db      	ldr	r3, [r3, #12]
   b8362:	4669      	mov	r1, sp
   b8364:	4630      	mov	r0, r6
   b8366:	4798      	blx	r3
   b8368:	4604      	mov	r4, r0
    }
    return n;
}
   b836a:	4620      	mov	r0, r4
   b836c:	b00d      	add	sp, #52	; 0x34
   b836e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8370 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8370:	b510      	push	{r4, lr}
   b8372:	4b05      	ldr	r3, [pc, #20]	; (b8388 <_ZN9IPAddressC1Ev+0x18>)
   b8374:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8376:	2211      	movs	r2, #17
   b8378:	f840 3b04 	str.w	r3, [r0], #4
   b837c:	2100      	movs	r1, #0
   b837e:	f001 fa3b 	bl	b97f8 <memset>
}
   b8382:	4620      	mov	r0, r4
   b8384:	bd10      	pop	{r4, pc}
   b8386:	bf00      	nop
   b8388:	000b9ef0 	.word	0x000b9ef0

000b838c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b838c:	4603      	mov	r3, r0
   b838e:	4a07      	ldr	r2, [pc, #28]	; (b83ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8390:	b510      	push	{r4, lr}
   b8392:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8396:	f101 0210 	add.w	r2, r1, #16
   b839a:	f851 4b04 	ldr.w	r4, [r1], #4
   b839e:	f843 4b04 	str.w	r4, [r3], #4
   b83a2:	4291      	cmp	r1, r2
   b83a4:	d1f9      	bne.n	b839a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b83a6:	780a      	ldrb	r2, [r1, #0]
   b83a8:	701a      	strb	r2, [r3, #0]
}
   b83aa:	bd10      	pop	{r4, pc}
   b83ac:	000b9ef0 	.word	0x000b9ef0

000b83b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b83b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b83b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b83b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b83ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b83be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b83c2:	2304      	movs	r3, #4
   b83c4:	6041      	str	r1, [r0, #4]
   b83c6:	7503      	strb	r3, [r0, #20]
}
   b83c8:	bd10      	pop	{r4, pc}
	...

000b83cc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b83cc:	b507      	push	{r0, r1, r2, lr}
   b83ce:	4b06      	ldr	r3, [pc, #24]	; (b83e8 <_ZN9IPAddressC1EPKh+0x1c>)
   b83d0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b83d2:	78cb      	ldrb	r3, [r1, #3]
   b83d4:	9300      	str	r3, [sp, #0]
   b83d6:	788b      	ldrb	r3, [r1, #2]
   b83d8:	784a      	ldrb	r2, [r1, #1]
   b83da:	7809      	ldrb	r1, [r1, #0]
   b83dc:	f7ff ffe8 	bl	b83b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b83e0:	b003      	add	sp, #12
   b83e2:	f85d fb04 	ldr.w	pc, [sp], #4
   b83e6:	bf00      	nop
   b83e8:	000b9ef0 	.word	0x000b9ef0

000b83ec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b83ec:	7441      	strb	r1, [r0, #17]
}
   b83ee:	4770      	bx	lr

000b83f0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b83f0:	4770      	bx	lr

000b83f2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b83f2:	4770      	bx	lr

000b83f4 <_ZN9USBSerial4readEv>:
{
   b83f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b83f6:	2100      	movs	r1, #0
   b83f8:	7c00      	ldrb	r0, [r0, #16]
   b83fa:	f7fd ff49 	bl	b6290 <HAL_USB_USART_Receive_Data>
}
   b83fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8402:	bd08      	pop	{r3, pc}

000b8404 <_ZN9USBSerial4peekEv>:
{
   b8404:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8406:	2101      	movs	r1, #1
   b8408:	7c00      	ldrb	r0, [r0, #16]
   b840a:	f7fd ff41 	bl	b6290 <HAL_USB_USART_Receive_Data>
}
   b840e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8412:	bd08      	pop	{r3, pc}

000b8414 <_ZN9USBSerial17availableForWriteEv>:
{
   b8414:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8416:	7c00      	ldrb	r0, [r0, #16]
   b8418:	f7fd ff32 	bl	b6280 <HAL_USB_USART_Available_Data_For_Write>
}
   b841c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8420:	bd08      	pop	{r3, pc}

000b8422 <_ZN9USBSerial9availableEv>:
{
   b8422:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8424:	7c00      	ldrb	r0, [r0, #16]
   b8426:	f7fd ff23 	bl	b6270 <HAL_USB_USART_Available_Data>
}
   b842a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b842e:	bd08      	pop	{r3, pc}

000b8430 <_ZN9USBSerial5writeEh>:
{
   b8430:	b513      	push	{r0, r1, r4, lr}
   b8432:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8434:	7c00      	ldrb	r0, [r0, #16]
{
   b8436:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8438:	f7fd ff22 	bl	b6280 <HAL_USB_USART_Available_Data_For_Write>
   b843c:	2800      	cmp	r0, #0
   b843e:	9901      	ldr	r1, [sp, #4]
   b8440:	dc01      	bgt.n	b8446 <_ZN9USBSerial5writeEh+0x16>
   b8442:	7c60      	ldrb	r0, [r4, #17]
   b8444:	b120      	cbz	r0, b8450 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8446:	7c20      	ldrb	r0, [r4, #16]
   b8448:	f7fd ff2a 	bl	b62a0 <HAL_USB_USART_Send_Data>
   b844c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8450:	b002      	add	sp, #8
   b8452:	bd10      	pop	{r4, pc}

000b8454 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8454:	7c00      	ldrb	r0, [r0, #16]
   b8456:	f7fd bf2b 	b.w	b62b0 <HAL_USB_USART_Flush_Data>

000b845a <_ZN9USBSerialD0Ev>:
   b845a:	b510      	push	{r4, lr}
   b845c:	2114      	movs	r1, #20
   b845e:	4604      	mov	r4, r0
   b8460:	f7fb fe1b 	bl	b409a <_ZdlPvj>
   b8464:	4620      	mov	r0, r4
   b8466:	bd10      	pop	{r4, pc}

000b8468 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8468:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b846a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b846e:	4604      	mov	r4, r0
   b8470:	4608      	mov	r0, r1
   b8472:	2100      	movs	r1, #0
   b8474:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8478:	4b04      	ldr	r3, [pc, #16]	; (b848c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b847a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b847c:	2301      	movs	r3, #1
  _serial = serial;
   b847e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8480:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8482:	4611      	mov	r1, r2
   b8484:	f7fd fedc 	bl	b6240 <HAL_USB_USART_Init>
}
   b8488:	4620      	mov	r0, r4
   b848a:	bd10      	pop	{r4, pc}
   b848c:	000b9f04 	.word	0x000b9f04

000b8490 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8490:	7c00      	ldrb	r0, [r0, #16]
   b8492:	2200      	movs	r2, #0
   b8494:	f7fd bedc 	b.w	b6250 <HAL_USB_USART_Begin>

000b8498 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b8498:	7c00      	ldrb	r0, [r0, #16]
   b849a:	f7fd bee1 	b.w	b6260 <HAL_USB_USART_End>

000b849e <_Z19acquireSerialBufferv>:
{
   b849e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b84a0:	2214      	movs	r2, #20
{
   b84a2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b84a4:	2100      	movs	r1, #0
   b84a6:	f001 f9a7 	bl	b97f8 <memset>
}
   b84aa:	4620      	mov	r0, r4
   b84ac:	bd10      	pop	{r4, pc}
	...

000b84b0 <_Z16_fetch_usbserialv>:
{
   b84b0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84b2:	4c0f      	ldr	r4, [pc, #60]	; (b84f0 <_Z16_fetch_usbserialv+0x40>)
{
   b84b4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b84b6:	a803      	add	r0, sp, #12
   b84b8:	f7ff fff1 	bl	b849e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84bc:	7821      	ldrb	r1, [r4, #0]
   b84be:	f3bf 8f5b 	dmb	ish
   b84c2:	f011 0101 	ands.w	r1, r1, #1
   b84c6:	d10f      	bne.n	b84e8 <_Z16_fetch_usbserialv+0x38>
   b84c8:	4620      	mov	r0, r4
   b84ca:	9101      	str	r1, [sp, #4]
   b84cc:	f7fb fdf4 	bl	b40b8 <__cxa_guard_acquire>
   b84d0:	9901      	ldr	r1, [sp, #4]
   b84d2:	b148      	cbz	r0, b84e8 <_Z16_fetch_usbserialv+0x38>
   b84d4:	aa03      	add	r2, sp, #12
   b84d6:	4807      	ldr	r0, [pc, #28]	; (b84f4 <_Z16_fetch_usbserialv+0x44>)
   b84d8:	f7ff ffc6 	bl	b8468 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b84dc:	4620      	mov	r0, r4
   b84de:	f7fb fdf0 	bl	b40c2 <__cxa_guard_release>
   b84e2:	4805      	ldr	r0, [pc, #20]	; (b84f8 <_Z16_fetch_usbserialv+0x48>)
   b84e4:	f001 f942 	bl	b976c <atexit>
	return _usbserial;
}
   b84e8:	4802      	ldr	r0, [pc, #8]	; (b84f4 <_Z16_fetch_usbserialv+0x44>)
   b84ea:	b008      	add	sp, #32
   b84ec:	bd10      	pop	{r4, pc}
   b84ee:	bf00      	nop
   b84f0:	2003e6c0 	.word	0x2003e6c0
   b84f4:	2003e6c4 	.word	0x2003e6c4
   b84f8:	000b83f1 	.word	0x000b83f1

000b84fc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b84fc:	2200      	movs	r2, #0
   b84fe:	6840      	ldr	r0, [r0, #4]
   b8500:	4611      	mov	r1, r2
   b8502:	f7fd bf7d 	b.w	b6400 <network_ready>

000b8506 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b8506:	2200      	movs	r2, #0
   b8508:	6840      	ldr	r0, [r0, #4]
   b850a:	4611      	mov	r1, r2
   b850c:	f7fd bf98 	b.w	b6440 <network_listening>

000b8510 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8510:	2200      	movs	r2, #0
   b8512:	6840      	ldr	r0, [r0, #4]
   b8514:	4611      	mov	r1, r2
   b8516:	f7fd bfa3 	b.w	b6460 <network_get_listen_timeout>

000b851a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b851a:	6840      	ldr	r0, [r0, #4]
   b851c:	2200      	movs	r2, #0
   b851e:	f7fd bf97 	b.w	b6450 <network_set_listen_timeout>

000b8522 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8522:	6840      	ldr	r0, [r0, #4]
   b8524:	2200      	movs	r2, #0
   b8526:	f081 0101 	eor.w	r1, r1, #1
   b852a:	f7fd bf81 	b.w	b6430 <network_listen>

000b852e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b852e:	2300      	movs	r3, #0
   b8530:	6840      	ldr	r0, [r0, #4]
   b8532:	461a      	mov	r2, r3
   b8534:	4619      	mov	r1, r3
   b8536:	f7fd bf73 	b.w	b6420 <network_off>

000b853a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b853a:	2300      	movs	r3, #0
   b853c:	6840      	ldr	r0, [r0, #4]
   b853e:	461a      	mov	r2, r3
   b8540:	4619      	mov	r1, r3
   b8542:	f7fd bf65 	b.w	b6410 <network_on>

000b8546 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8546:	2200      	movs	r2, #0
   b8548:	6840      	ldr	r0, [r0, #4]
   b854a:	4611      	mov	r1, r2
   b854c:	f7fd bf48 	b.w	b63e0 <network_connecting>

000b8550 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8550:	6840      	ldr	r0, [r0, #4]
   b8552:	2200      	movs	r2, #0
   b8554:	2102      	movs	r1, #2
   b8556:	f7fd bf4b 	b.w	b63f0 <network_disconnect>

000b855a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b855a:	2300      	movs	r3, #0
   b855c:	6840      	ldr	r0, [r0, #4]
   b855e:	461a      	mov	r2, r3
   b8560:	f7fd bf36 	b.w	b63d0 <network_connect>

000b8564 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b8564:	4b08      	ldr	r3, [pc, #32]	; (b8588 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b8566:	b510      	push	{r4, lr}
   b8568:	2428      	movs	r4, #40	; 0x28
   b856a:	4622      	mov	r2, r4
   b856c:	4618      	mov	r0, r3
   b856e:	2100      	movs	r1, #0
   b8570:	f001 f942 	bl	b97f8 <memset>
   b8574:	4b05      	ldr	r3, [pc, #20]	; (b858c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b8576:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b8578:	f04f 32ff 	mov.w	r2, #4294967295
   b857c:	6042      	str	r2, [r0, #4]
   b857e:	2204      	movs	r2, #4
   b8580:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b8582:	4a03      	ldr	r2, [pc, #12]	; (b8590 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b8584:	601a      	str	r2, [r3, #0]
   b8586:	bd10      	pop	{r4, pc}
   b8588:	2003e6e0 	.word	0x2003e6e0
   b858c:	2003e6d8 	.word	0x2003e6d8
   b8590:	000b9f34 	.word	0x000b9f34

000b8594 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8594:	4770      	bx	lr

000b8596 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8596:	7441      	strb	r1, [r0, #17]
}
   b8598:	4770      	bx	lr

000b859a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b859a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b859c:	7c00      	ldrb	r0, [r0, #16]
   b859e:	f7fd fd87 	bl	b60b0 <hal_usart_available_data_for_write>
}
   b85a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b85a6:	bd08      	pop	{r3, pc}

000b85a8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b85a8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b85aa:	7c00      	ldrb	r0, [r0, #16]
   b85ac:	f7fd fd58 	bl	b6060 <hal_usart_available>
}
   b85b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b85b4:	bd08      	pop	{r3, pc}

000b85b6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b85b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b85b8:	7c00      	ldrb	r0, [r0, #16]
   b85ba:	f7fd fd61 	bl	b6080 <hal_usart_peek>
}
   b85be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b85c2:	bd08      	pop	{r3, pc}

000b85c4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b85c4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b85c6:	7c00      	ldrb	r0, [r0, #16]
   b85c8:	f7fd fd52 	bl	b6070 <hal_usart_read>
}
   b85cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b85d0:	bd08      	pop	{r3, pc}

000b85d2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b85d2:	7c00      	ldrb	r0, [r0, #16]
   b85d4:	f7fd bd5c 	b.w	b6090 <hal_usart_flush>

000b85d8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b85d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b85da:	7c45      	ldrb	r5, [r0, #17]
{
   b85dc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b85de:	b12d      	cbz	r5, b85ec <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b85e0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b85e2:	b003      	add	sp, #12
   b85e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b85e8:	f7fd bd32 	b.w	b6050 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b85ec:	7c00      	ldrb	r0, [r0, #16]
   b85ee:	9101      	str	r1, [sp, #4]
   b85f0:	f7fd fd5e 	bl	b60b0 <hal_usart_available_data_for_write>
   b85f4:	2800      	cmp	r0, #0
   b85f6:	9901      	ldr	r1, [sp, #4]
   b85f8:	dcf2      	bgt.n	b85e0 <_ZN11USARTSerial5writeEh+0x8>
}
   b85fa:	4628      	mov	r0, r5
   b85fc:	b003      	add	sp, #12
   b85fe:	bd30      	pop	{r4, r5, pc}

000b8600 <_ZN11USARTSerialD0Ev>:
   b8600:	b510      	push	{r4, lr}
   b8602:	2114      	movs	r1, #20
   b8604:	4604      	mov	r4, r0
   b8606:	f7fb fd48 	bl	b409a <_ZdlPvj>
   b860a:	4620      	mov	r0, r4
   b860c:	bd10      	pop	{r4, pc}
	...

000b8610 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8610:	b510      	push	{r4, lr}
   b8612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8616:	4604      	mov	r4, r0
   b8618:	4608      	mov	r0, r1
   b861a:	4611      	mov	r1, r2
   b861c:	2200      	movs	r2, #0
   b861e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8622:	4b04      	ldr	r3, [pc, #16]	; (b8634 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8624:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8626:	2301      	movs	r3, #1
  _serial = serial;
   b8628:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b862a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b862c:	f7fd fd50 	bl	b60d0 <hal_usart_init_ex>
}
   b8630:	4620      	mov	r0, r4
   b8632:	bd10      	pop	{r4, pc}
   b8634:	000b9f70 	.word	0x000b9f70

000b8638 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b8638:	7c00      	ldrb	r0, [r0, #16]
   b863a:	2300      	movs	r3, #0
   b863c:	f7fd bd40 	b.w	b60c0 <hal_usart_begin_config>

000b8640 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b8640:	2200      	movs	r2, #0
   b8642:	f7ff bff9 	b.w	b8638 <_ZN11USARTSerial5beginEmm>

000b8646 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b8646:	7c00      	ldrb	r0, [r0, #16]
   b8648:	f7fd bcfa 	b.w	b6040 <hal_usart_end>

000b864c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b864c:	b510      	push	{r4, lr}
      if (_M_empty())
   b864e:	6883      	ldr	r3, [r0, #8]
   b8650:	4604      	mov	r4, r0
   b8652:	b90b      	cbnz	r3, b8658 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b8654:	f000 fc68 	bl	b8f28 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8658:	68c3      	ldr	r3, [r0, #12]
   b865a:	4798      	blx	r3
      if (_M_manager)
   b865c:	68a3      	ldr	r3, [r4, #8]
   b865e:	b11b      	cbz	r3, b8668 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8660:	2203      	movs	r2, #3
   b8662:	4621      	mov	r1, r4
   b8664:	4620      	mov	r0, r4
   b8666:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b8668:	4620      	mov	r0, r4
   b866a:	2110      	movs	r1, #16
}
   b866c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b8670:	f7fb bd13 	b.w	b409a <_ZdlPvj>

000b8674 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8674:	4770      	bx	lr

000b8676 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8678:	4606      	mov	r6, r0
   b867a:	4615      	mov	r5, r2
   b867c:	460c      	mov	r4, r1
   b867e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8680:	42bc      	cmp	r4, r7
   b8682:	d006      	beq.n	b8692 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8684:	6833      	ldr	r3, [r6, #0]
   b8686:	f814 1b01 	ldrb.w	r1, [r4], #1
   b868a:	689b      	ldr	r3, [r3, #8]
   b868c:	4630      	mov	r0, r6
   b868e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8690:	e7f6      	b.n	b8680 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8692:	4628      	mov	r0, r5
   b8694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8696 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8696:	7c00      	ldrb	r0, [r0, #16]
   b8698:	2200      	movs	r2, #0
   b869a:	f7fd bd31 	b.w	b6100 <hal_i2c_write>

000b869e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b869e:	7c00      	ldrb	r0, [r0, #16]
   b86a0:	2100      	movs	r1, #0
   b86a2:	f7fd bd35 	b.w	b6110 <hal_i2c_available>

000b86a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b86a6:	7c00      	ldrb	r0, [r0, #16]
   b86a8:	2100      	movs	r1, #0
   b86aa:	f7fd bd39 	b.w	b6120 <hal_i2c_read>

000b86ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b86ae:	7c00      	ldrb	r0, [r0, #16]
   b86b0:	2100      	movs	r1, #0
   b86b2:	f7fd bd3d 	b.w	b6130 <hal_i2c_peek>

000b86b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b86b6:	7c00      	ldrb	r0, [r0, #16]
   b86b8:	2100      	movs	r1, #0
   b86ba:	f7fd bd41 	b.w	b6140 <hal_i2c_flush>

000b86be <_ZN7TwoWireD0Ev>:
   b86be:	b510      	push	{r4, lr}
   b86c0:	2114      	movs	r1, #20
   b86c2:	4604      	mov	r4, r0
   b86c4:	f7fb fce9 	bl	b409a <_ZdlPvj>
   b86c8:	4620      	mov	r0, r4
   b86ca:	bd10      	pop	{r4, pc}

000b86cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b86cc:	b538      	push	{r3, r4, r5, lr}
   b86ce:	4604      	mov	r4, r0
   b86d0:	4615      	mov	r5, r2
   b86d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b86d6:	2200      	movs	r2, #0
   b86d8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b86dc:	4b09      	ldr	r3, [pc, #36]	; (b8704 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b86de:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b86e0:	4608      	mov	r0, r1
   b86e2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b86e4:	4629      	mov	r1, r5
   b86e6:	f7fd fd3b 	bl	b6160 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b86ea:	30bf      	adds	r0, #191	; 0xbf
   b86ec:	d108      	bne.n	b8700 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b86ee:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b86f0:	07db      	lsls	r3, r3, #31
   b86f2:	d505      	bpl.n	b8700 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b86f4:	6868      	ldr	r0, [r5, #4]
   b86f6:	f7fd ff03 	bl	b6500 <free>
    free(conf.tx_buffer);
   b86fa:	68e8      	ldr	r0, [r5, #12]
   b86fc:	f7fd ff00 	bl	b6500 <free>
}
   b8700:	4620      	mov	r0, r4
   b8702:	bd38      	pop	{r3, r4, r5, pc}
   b8704:	000b9fa0 	.word	0x000b9fa0

000b8708 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8708:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b870a:	2200      	movs	r2, #0
   b870c:	2314      	movs	r3, #20
   b870e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8712:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8716:	780b      	ldrb	r3, [r1, #0]
   b8718:	f88d 3008 	strb.w	r3, [sp, #8]
   b871c:	684b      	ldr	r3, [r1, #4]
   b871e:	9303      	str	r3, [sp, #12]
   b8720:	68cb      	ldr	r3, [r1, #12]
   b8722:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8724:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8726:	7a0b      	ldrb	r3, [r1, #8]
   b8728:	9305      	str	r3, [sp, #20]
   b872a:	a901      	add	r1, sp, #4
   b872c:	f7fd fd30 	bl	b6190 <hal_i2c_request_ex>
}
   b8730:	b007      	add	sp, #28
   b8732:	f85d fb04 	ldr.w	pc, [sp], #4

000b8736 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b8736:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8738:	2300      	movs	r3, #0
   b873a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b873e:	684a      	ldr	r2, [r1, #4]
   b8740:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b8742:	2314      	movs	r3, #20
    };
   b8744:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b8746:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b874a:	780b      	ldrb	r3, [r1, #0]
    };
   b874c:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b874e:	7a0a      	ldrb	r2, [r1, #8]
   b8750:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b8752:	7c00      	ldrb	r0, [r0, #16]
    };
   b8754:	f88d 3008 	strb.w	r3, [sp, #8]
   b8758:	aa01      	add	r2, sp, #4
   b875a:	4619      	mov	r1, r3
   b875c:	f7fd fcc0 	bl	b60e0 <hal_i2c_begin_transmission>
}
   b8760:	b007      	add	sp, #28
   b8762:	f85d fb04 	ldr.w	pc, [sp], #4

000b8766 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8766:	7c00      	ldrb	r0, [r0, #16]
   b8768:	2200      	movs	r2, #0
   b876a:	f7fd bcc1 	b.w	b60f0 <hal_i2c_end_transmission>

000b876e <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b876e:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b8770:	2100      	movs	r1, #0
   b8772:	7c00      	ldrb	r0, [r0, #16]
   b8774:	f7fd fcfc 	bl	b6170 <hal_i2c_lock>
}
   b8778:	fab0 f080 	clz	r0, r0
   b877c:	0940      	lsrs	r0, r0, #5
   b877e:	bd08      	pop	{r3, pc}

000b8780 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b8780:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b8782:	2100      	movs	r1, #0
   b8784:	7c00      	ldrb	r0, [r0, #16]
   b8786:	f7fd fcfb 	bl	b6180 <hal_i2c_unlock>
}
   b878a:	fab0 f080 	clz	r0, r0
   b878e:	0940      	lsrs	r0, r0, #5
   b8790:	bd08      	pop	{r3, pc}

000b8792 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8792:	2300      	movs	r3, #0
   b8794:	6840      	ldr	r0, [r0, #4]
   b8796:	461a      	mov	r2, r3
   b8798:	f7fd be1a 	b.w	b63d0 <network_connect>

000b879c <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b879c:	6840      	ldr	r0, [r0, #4]
   b879e:	2200      	movs	r2, #0
   b87a0:	2102      	movs	r1, #2
   b87a2:	f7fd be25 	b.w	b63f0 <network_disconnect>

000b87a6 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b87a6:	2200      	movs	r2, #0
   b87a8:	6840      	ldr	r0, [r0, #4]
   b87aa:	4611      	mov	r1, r2
   b87ac:	f7fd be18 	b.w	b63e0 <network_connecting>

000b87b0 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b87b0:	2200      	movs	r2, #0
   b87b2:	6840      	ldr	r0, [r0, #4]
   b87b4:	4611      	mov	r1, r2
   b87b6:	f7fd be23 	b.w	b6400 <network_ready>

000b87ba <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b87ba:	2300      	movs	r3, #0
   b87bc:	6840      	ldr	r0, [r0, #4]
   b87be:	461a      	mov	r2, r3
   b87c0:	4619      	mov	r1, r3
   b87c2:	f7fd be25 	b.w	b6410 <network_on>

000b87c6 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b87c6:	2300      	movs	r3, #0
   b87c8:	6840      	ldr	r0, [r0, #4]
   b87ca:	461a      	mov	r2, r3
   b87cc:	4619      	mov	r1, r3
   b87ce:	f7fd be27 	b.w	b6420 <network_off>

000b87d2 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b87d2:	6840      	ldr	r0, [r0, #4]
   b87d4:	2100      	movs	r1, #0
   b87d6:	f7fd be4b 	b.w	b6470 <network_is_on>

000b87da <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b87da:	6840      	ldr	r0, [r0, #4]
   b87dc:	2100      	movs	r1, #0
   b87de:	f7fd be4f 	b.w	b6480 <network_is_off>

000b87e2 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b87e2:	6840      	ldr	r0, [r0, #4]
   b87e4:	2200      	movs	r2, #0
   b87e6:	f081 0101 	eor.w	r1, r1, #1
   b87ea:	f7fd be21 	b.w	b6430 <network_listen>

000b87ee <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b87ee:	6840      	ldr	r0, [r0, #4]
   b87f0:	2200      	movs	r2, #0
   b87f2:	f7fd be2d 	b.w	b6450 <network_set_listen_timeout>

000b87f6 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b87f6:	2200      	movs	r2, #0
   b87f8:	6840      	ldr	r0, [r0, #4]
   b87fa:	4611      	mov	r1, r2
   b87fc:	f7fd be30 	b.w	b6460 <network_get_listen_timeout>

000b8800 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8800:	2200      	movs	r2, #0
   b8802:	6840      	ldr	r0, [r0, #4]
   b8804:	4611      	mov	r1, r2
   b8806:	f7fd be1b 	b.w	b6440 <network_listening>

000b880a <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b880a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b880e:	b095      	sub	sp, #84	; 0x54
   b8810:	4614      	mov	r4, r2
   b8812:	460d      	mov	r5, r1
   b8814:	4607      	mov	r7, r0
    IPAddress addr;
   b8816:	f7ff fdab 	bl	b8370 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b881a:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b881c:	221c      	movs	r2, #28
   b881e:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8820:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8822:	f000 ffe9 	bl	b97f8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8826:	2340      	movs	r3, #64	; 0x40
   b8828:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b882a:	4620      	mov	r0, r4
   b882c:	466b      	mov	r3, sp
   b882e:	aa0c      	add	r2, sp, #48	; 0x30
   b8830:	2100      	movs	r1, #0
   b8832:	f7fd fb7d 	bl	b5f30 <netdb_getaddrinfo>
    if (!r) {
   b8836:	4604      	mov	r4, r0
   b8838:	2800      	cmp	r0, #0
   b883a:	d14b      	bne.n	b88d4 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b883c:	4602      	mov	r2, r0
   b883e:	2101      	movs	r1, #1
   b8840:	6868      	ldr	r0, [r5, #4]
   b8842:	f7fd fddd 	bl	b6400 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8846:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8848:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b884a:	4622      	mov	r2, r4
   b884c:	6868      	ldr	r0, [r5, #4]
   b884e:	f7fd fdd7 	bl	b6400 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8852:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8854:	4681      	mov	r9, r0
        bool ok = false;
   b8856:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8858:	2e00      	cmp	r6, #0
   b885a:	d03b      	beq.n	b88d4 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b885c:	2900      	cmp	r1, #0
   b885e:	d139      	bne.n	b88d4 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8860:	6873      	ldr	r3, [r6, #4]
   b8862:	2b02      	cmp	r3, #2
   b8864:	d003      	beq.n	b886e <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8866:	2b0a      	cmp	r3, #10
   b8868:	d011      	beq.n	b888e <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b886a:	69f6      	ldr	r6, [r6, #28]
   b886c:	e7f4      	b.n	b8858 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b886e:	f1b8 0f00 	cmp.w	r8, #0
   b8872:	d0fa      	beq.n	b886a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8874:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8876:	a806      	add	r0, sp, #24
   b8878:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b887a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b887c:	f7ff fda6 	bl	b83cc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8882:	1d3c      	adds	r4, r7, #4
   b8884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8886:	682b      	ldr	r3, [r5, #0]
   b8888:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b888a:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b888c:	e7ed      	b.n	b886a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b888e:	f1b9 0f00 	cmp.w	r9, #0
   b8892:	d0ea      	beq.n	b886a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8894:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8896:	2210      	movs	r2, #16
   b8898:	a801      	add	r0, sp, #4
   b889a:	f000 ffad 	bl	b97f8 <memset>
                    a.v = 6;
   b889e:	2306      	movs	r3, #6
   b88a0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b88a4:	ad01      	add	r5, sp, #4
   b88a6:	f104 0308 	add.w	r3, r4, #8
   b88aa:	3418      	adds	r4, #24
   b88ac:	6818      	ldr	r0, [r3, #0]
   b88ae:	6859      	ldr	r1, [r3, #4]
   b88b0:	462a      	mov	r2, r5
   b88b2:	c203      	stmia	r2!, {r0, r1}
   b88b4:	3308      	adds	r3, #8
   b88b6:	42a3      	cmp	r3, r4
   b88b8:	4615      	mov	r5, r2
   b88ba:	d1f7      	bne.n	b88ac <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b88bc:	a901      	add	r1, sp, #4
   b88be:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b88c0:	ad07      	add	r5, sp, #28
   b88c2:	f7ff fd63 	bl	b838c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b88c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b88c8:	1d3c      	adds	r4, r7, #4
   b88ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b88cc:	682b      	ldr	r3, [r5, #0]
   b88ce:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b88d0:	4649      	mov	r1, r9
   b88d2:	e7ca      	b.n	b886a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b88d4:	9800      	ldr	r0, [sp, #0]
   b88d6:	f7fd fb23 	bl	b5f20 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b88da:	4638      	mov	r0, r7
   b88dc:	b015      	add	sp, #84	; 0x54
   b88de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000b88e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b88e4:	4b02      	ldr	r3, [pc, #8]	; (b88f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b88e6:	4a03      	ldr	r2, [pc, #12]	; (b88f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b88e8:	601a      	str	r2, [r3, #0]
   b88ea:	2200      	movs	r2, #0
   b88ec:	605a      	str	r2, [r3, #4]

} // spark
   b88ee:	4770      	bx	lr
   b88f0:	2003e708 	.word	0x2003e708
   b88f4:	000b9fc8 	.word	0x000b9fc8

000b88f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b88f8:	f100 0310 	add.w	r3, r0, #16
   b88fc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b88fe:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b8902:	2901      	cmp	r1, #1
   b8904:	4618      	mov	r0, r3
   b8906:	d108      	bne.n	b891a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b8908:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b890c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b8910:	3a01      	subs	r2, #1
   b8912:	f103 0310 	add.w	r3, r3, #16
   b8916:	d1f2      	bne.n	b88fe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b8918:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b891a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b891c:	bf04      	itt	eq
   b891e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b8922:	1852      	addeq	r2, r2, r1
   b8924:	e7f4      	b.n	b8910 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b8926 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b8926:	b40e      	push	{r1, r2, r3}
   b8928:	b5f0      	push	{r4, r5, r6, r7, lr}
   b892a:	b088      	sub	sp, #32
   b892c:	af00      	add	r7, sp, #0
   b892e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8932:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b8934:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8938:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b893a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b893c:	462b      	mov	r3, r5
   b893e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b8940:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8942:	f7fd fdf5 	bl	b6530 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b8946:	280f      	cmp	r0, #15
   b8948:	687a      	ldr	r2, [r7, #4]
   b894a:	d91a      	bls.n	b8982 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b894c:	f100 0308 	add.w	r3, r0, #8
   b8950:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b8954:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b8956:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b895a:	1c41      	adds	r1, r0, #1
   b895c:	462b      	mov	r3, r5
   b895e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b8960:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8962:	f7fd fde5 	bl	b6530 <vsnprintf>
        if (n > 0) {
   b8966:	1e02      	subs	r2, r0, #0
   b8968:	dd04      	ble.n	b8974 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b896a:	6823      	ldr	r3, [r4, #0]
   b896c:	4669      	mov	r1, sp
   b896e:	689b      	ldr	r3, [r3, #8]
   b8970:	4620      	mov	r0, r4
   b8972:	4798      	blx	r3
   b8974:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b8976:	3720      	adds	r7, #32
   b8978:	46bd      	mov	sp, r7
   b897a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b897e:	b003      	add	sp, #12
   b8980:	4770      	bx	lr
    } else if (n > 0) {
   b8982:	2800      	cmp	r0, #0
   b8984:	d0f7      	beq.n	b8976 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b8986:	6823      	ldr	r3, [r4, #0]
   b8988:	4602      	mov	r2, r0
   b898a:	689b      	ldr	r3, [r3, #8]
   b898c:	f107 0110 	add.w	r1, r7, #16
   b8990:	4620      	mov	r0, r4
   b8992:	4798      	blx	r3
}
   b8994:	e7ef      	b.n	b8976 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b8996 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b8996:	b538      	push	{r3, r4, r5, lr}
   b8998:	680b      	ldr	r3, [r1, #0]
   b899a:	6003      	str	r3, [r0, #0]
   b899c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b899e:	6843      	ldr	r3, [r0, #4]
   b89a0:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b89a2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b89a4:	d008      	beq.n	b89b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b89a6:	b115      	cbz	r5, b89ae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b89a8:	686b      	ldr	r3, [r5, #4]
   b89aa:	3301      	adds	r3, #1
   b89ac:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b89ae:	6860      	ldr	r0, [r4, #4]
   b89b0:	b108      	cbz	r0, b89b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b89b2:	f7fe f828 	bl	b6a06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b89b6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b89b8:	bd38      	pop	{r3, r4, r5, pc}

000b89ba <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b89ba:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b89bc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b89be:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b89c2:	689b      	ldr	r3, [r3, #8]
   b89c4:	2201      	movs	r2, #1
   b89c6:	f10d 0107 	add.w	r1, sp, #7
   b89ca:	4798      	blx	r3
}
   b89cc:	b003      	add	sp, #12
   b89ce:	f85d fb04 	ldr.w	pc, [sp], #4

000b89d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b89d2:	460b      	mov	r3, r1
   b89d4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b89d6:	2200      	movs	r2, #0
   b89d8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b89da:	e9c0 2200 	strd	r2, r2, [r0]
   b89de:	4604      	mov	r4, r0
        t_ = t;
   b89e0:	6083      	str	r3, [r0, #8]
    if (t) {
   b89e2:	b90b      	cbnz	r3, b89e8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b89e4:	4620      	mov	r0, r4
   b89e6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b89e8:	f7ff ffd5 	bl	b8996 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b89ec:	e7fa      	b.n	b89e4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b89ee <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b89ee:	6883      	ldr	r3, [r0, #8]
   b89f0:	b1eb      	cbz	r3, b8a2e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b89f2:	781a      	ldrb	r2, [r3, #0]
   b89f4:	2a03      	cmp	r2, #3
   b89f6:	d81a      	bhi.n	b8a2e <_ZNK5spark9JSONValue4typeEv+0x40>
   b89f8:	e8df f002 	tbb	[pc, r2]
   b89fc:	1b021704 	.word	0x1b021704
   b8a00:	2005      	movs	r0, #5
   b8a02:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b8a04:	6802      	ldr	r2, [r0, #0]
   b8a06:	685b      	ldr	r3, [r3, #4]
   b8a08:	6852      	ldr	r2, [r2, #4]
   b8a0a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b8a0c:	282d      	cmp	r0, #45	; 0x2d
   b8a0e:	d012      	beq.n	b8a36 <_ZNK5spark9JSONValue4typeEv+0x48>
   b8a10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8a14:	2b09      	cmp	r3, #9
   b8a16:	d90e      	bls.n	b8a36 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b8a18:	2874      	cmp	r0, #116	; 0x74
   b8a1a:	d00e      	beq.n	b8a3a <_ZNK5spark9JSONValue4typeEv+0x4c>
   b8a1c:	2866      	cmp	r0, #102	; 0x66
   b8a1e:	d00c      	beq.n	b8a3a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b8a20:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b8a24:	4258      	negs	r0, r3
   b8a26:	4158      	adcs	r0, r3
   b8a28:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b8a2a:	2006      	movs	r0, #6
   b8a2c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b8a2e:	2000      	movs	r0, #0
   b8a30:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b8a32:	2004      	movs	r0, #4
   b8a34:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b8a36:	2003      	movs	r0, #3
   b8a38:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b8a3a:	2002      	movs	r0, #2
}
   b8a3c:	4770      	bx	lr

000b8a3e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b8a3e:	b510      	push	{r4, lr}
   b8a40:	4604      	mov	r4, r0
    switch (type()) {
   b8a42:	f7ff ffd4 	bl	b89ee <_ZNK5spark9JSONValue4typeEv>
   b8a46:	2802      	cmp	r0, #2
   b8a48:	d00e      	beq.n	b8a68 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b8a4a:	1ec3      	subs	r3, r0, #3
   b8a4c:	b2db      	uxtb	r3, r3
   b8a4e:	2b01      	cmp	r3, #1
   b8a50:	d814      	bhi.n	b8a7c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b8a52:	6822      	ldr	r2, [r4, #0]
   b8a54:	68a3      	ldr	r3, [r4, #8]
   b8a56:	6850      	ldr	r0, [r2, #4]
   b8a58:	685b      	ldr	r3, [r3, #4]
}
   b8a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b8a5e:	220a      	movs	r2, #10
   b8a60:	2100      	movs	r1, #0
   b8a62:	4418      	add	r0, r3
   b8a64:	f000 bff8 	b.w	b9a58 <strtol>
        const char* const s = d_->json + t_->start;
   b8a68:	6822      	ldr	r2, [r4, #0]
   b8a6a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b8a6c:	6852      	ldr	r2, [r2, #4]
   b8a6e:	685b      	ldr	r3, [r3, #4]
   b8a70:	5cd0      	ldrb	r0, [r2, r3]
   b8a72:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b8a76:	4258      	negs	r0, r3
   b8a78:	4158      	adcs	r0, r3
}
   b8a7a:	bd10      	pop	{r4, pc}
    switch (type()) {
   b8a7c:	2000      	movs	r0, #0
   b8a7e:	e7fc      	b.n	b8a7a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b8a80 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b8a80:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b8a82:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b8a84:	e9c0 3300 	strd	r3, r3, [r0]
   b8a88:	4604      	mov	r4, r0
        n_(0) {
   b8a8a:	480e      	ldr	r0, [pc, #56]	; (b8ac4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b8a8c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b8a90:	b1a9      	cbz	r1, b8abe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b8a92:	780b      	ldrb	r3, [r1, #0]
   b8a94:	2b03      	cmp	r3, #3
   b8a96:	d006      	beq.n	b8aa6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b8a98:	b98b      	cbnz	r3, b8abe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b8a9a:	6813      	ldr	r3, [r2, #0]
   b8a9c:	6858      	ldr	r0, [r3, #4]
   b8a9e:	684b      	ldr	r3, [r1, #4]
   b8aa0:	5cc3      	ldrb	r3, [r0, r3]
   b8aa2:	2b6e      	cmp	r3, #110	; 0x6e
   b8aa4:	d007      	beq.n	b8ab6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b8aa6:	6813      	ldr	r3, [r2, #0]
   b8aa8:	684d      	ldr	r5, [r1, #4]
   b8aaa:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b8aac:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b8aae:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b8ab0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b8ab2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b8ab4:	60e3      	str	r3, [r4, #12]
   b8ab6:	4611      	mov	r1, r2
   b8ab8:	4620      	mov	r0, r4
   b8aba:	f7ff ff6c 	bl	b8996 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b8abe:	4620      	mov	r0, r4
   b8ac0:	bd38      	pop	{r3, r4, r5, pc}
   b8ac2:	bf00      	nop
   b8ac4:	000b9e21 	.word	0x000b9e21

000b8ac8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b8ac8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b8aca:	2500      	movs	r5, #0
   b8acc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b8ace:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b8ad2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b8ad6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b8ada:	4604      	mov	r4, r0
   b8adc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b8ade:	b14b      	cbz	r3, b8af4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b8ae0:	781a      	ldrb	r2, [r3, #0]
   b8ae2:	2a01      	cmp	r2, #1
   b8ae4:	d106      	bne.n	b8af4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b8ae6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b8aea:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b8aec:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b8aee:	6143      	str	r3, [r0, #20]
   b8af0:	f7ff ff51 	bl	b8996 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b8af4:	4620      	mov	r0, r4
   b8af6:	bd38      	pop	{r3, r4, r5, pc}

000b8af8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b8af8:	b510      	push	{r4, lr}
    if (!n_) {
   b8afa:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b8afc:	4604      	mov	r4, r0
    if (!n_) {
   b8afe:	b163      	cbz	r3, b8b1a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b8b00:	6880      	ldr	r0, [r0, #8]
   b8b02:	60e0      	str	r0, [r4, #12]
    --n_;
   b8b04:	3b01      	subs	r3, #1
    ++t_;
   b8b06:	3010      	adds	r0, #16
   b8b08:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b8b0a:	6120      	str	r0, [r4, #16]
    --n_;
   b8b0c:	6163      	str	r3, [r4, #20]
    if (n_) {
   b8b0e:	b113      	cbz	r3, b8b16 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b8b10:	f7ff fef2 	bl	b88f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b8b14:	60a0      	str	r0, [r4, #8]
    return true;
   b8b16:	2001      	movs	r0, #1
   b8b18:	e000      	b.n	b8b1c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b8b1a:	4618      	mov	r0, r3
}
   b8b1c:	bd10      	pop	{r4, pc}

000b8b1e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b8b1e:	b510      	push	{r4, lr}
    write('}');
   b8b20:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b8b22:	4604      	mov	r4, r0
    write('}');
   b8b24:	f7ff ff49 	bl	b89ba <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b8b28:	2301      	movs	r3, #1
   b8b2a:	7123      	strb	r3, [r4, #4]
}
   b8b2c:	4620      	mov	r0, r4
   b8b2e:	bd10      	pop	{r4, pc}

000b8b30 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b8b30:	b508      	push	{r3, lr}
    switch (state_) {
   b8b32:	7903      	ldrb	r3, [r0, #4]
   b8b34:	2b01      	cmp	r3, #1
   b8b36:	d002      	beq.n	b8b3e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b8b38:	2b02      	cmp	r3, #2
   b8b3a:	d004      	beq.n	b8b46 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b8b3c:	bd08      	pop	{r3, pc}
        write(',');
   b8b3e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b8b40:	f7ff ff3b 	bl	b89ba <_ZN5spark10JSONWriter5writeEc>
}
   b8b44:	e7fa      	b.n	b8b3c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b8b46:	213a      	movs	r1, #58	; 0x3a
   b8b48:	e7fa      	b.n	b8b40 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b8b4a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b8b4a:	b510      	push	{r4, lr}
   b8b4c:	4604      	mov	r4, r0
    writeSeparator();
   b8b4e:	f7ff ffef 	bl	b8b30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b8b52:	4620      	mov	r0, r4
   b8b54:	217b      	movs	r1, #123	; 0x7b
   b8b56:	f7ff ff30 	bl	b89ba <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b8b5a:	2300      	movs	r3, #0
   b8b5c:	7123      	strb	r3, [r4, #4]
}
   b8b5e:	4620      	mov	r0, r4
   b8b60:	bd10      	pop	{r4, pc}
	...

000b8b64 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b8b64:	b513      	push	{r0, r1, r4, lr}
   b8b66:	4604      	mov	r4, r0
   b8b68:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b8b6a:	f7ff ffe1 	bl	b8b30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b8b6e:	6823      	ldr	r3, [r4, #0]
   b8b70:	9a01      	ldr	r2, [sp, #4]
   b8b72:	68db      	ldr	r3, [r3, #12]
   b8b74:	4903      	ldr	r1, [pc, #12]	; (b8b84 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b8b76:	4620      	mov	r0, r4
   b8b78:	4798      	blx	r3
    state_ = NEXT;
   b8b7a:	2301      	movs	r3, #1
}
   b8b7c:	4620      	mov	r0, r4
    state_ = NEXT;
   b8b7e:	7123      	strb	r3, [r4, #4]
}
   b8b80:	b002      	add	sp, #8
   b8b82:	bd10      	pop	{r4, pc}
   b8b84:	000b9c50 	.word	0x000b9c50

000b8b88 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b8b88:	b513      	push	{r0, r1, r4, lr}
   b8b8a:	4604      	mov	r4, r0
   b8b8c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b8b8e:	f7ff ffcf 	bl	b8b30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b8b92:	6823      	ldr	r3, [r4, #0]
   b8b94:	9a01      	ldr	r2, [sp, #4]
   b8b96:	68db      	ldr	r3, [r3, #12]
   b8b98:	4903      	ldr	r1, [pc, #12]	; (b8ba8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b8b9a:	4620      	mov	r0, r4
   b8b9c:	4798      	blx	r3
    state_ = NEXT;
   b8b9e:	2301      	movs	r3, #1
}
   b8ba0:	4620      	mov	r0, r4
    state_ = NEXT;
   b8ba2:	7123      	strb	r3, [r4, #4]
}
   b8ba4:	b002      	add	sp, #8
   b8ba6:	bd10      	pop	{r4, pc}
   b8ba8:	000b9ffc 	.word	0x000b9ffc

000b8bac <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b8bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8bb0:	460d      	mov	r5, r1
    write('"');
   b8bb2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b8bb4:	4690      	mov	r8, r2
   b8bb6:	4604      	mov	r4, r0
    write('"');
   b8bb8:	f7ff feff 	bl	b89ba <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b8bbc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b8c64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b8bc0:	44a8      	add	r8, r5
    const char *s = str;
   b8bc2:	462f      	mov	r7, r5
    while (s != end) {
   b8bc4:	4547      	cmp	r7, r8
   b8bc6:	46ba      	mov	sl, r7
   b8bc8:	d03d      	beq.n	b8c46 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b8bca:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b8bce:	2e22      	cmp	r6, #34	; 0x22
   b8bd0:	d006      	beq.n	b8be0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b8bd2:	2e5c      	cmp	r6, #92	; 0x5c
   b8bd4:	d004      	beq.n	b8be0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b8bd6:	4630      	mov	r0, r6
   b8bd8:	f000 fdce 	bl	b9778 <isprint>
   b8bdc:	2800      	cmp	r0, #0
   b8bde:	d1f1      	bne.n	b8bc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b8be0:	6823      	ldr	r3, [r4, #0]
   b8be2:	ebaa 0205 	sub.w	r2, sl, r5
   b8be6:	689b      	ldr	r3, [r3, #8]
   b8be8:	4629      	mov	r1, r5
   b8bea:	4620      	mov	r0, r4
   b8bec:	4798      	blx	r3
            write('\\');
   b8bee:	215c      	movs	r1, #92	; 0x5c
   b8bf0:	4620      	mov	r0, r4
   b8bf2:	f7ff fee2 	bl	b89ba <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b8bf6:	2e0d      	cmp	r6, #13
   b8bf8:	d80a      	bhi.n	b8c10 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b8bfa:	2e07      	cmp	r6, #7
   b8bfc:	d91c      	bls.n	b8c38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b8bfe:	f1a6 0308 	sub.w	r3, r6, #8
   b8c02:	2b05      	cmp	r3, #5
   b8c04:	d818      	bhi.n	b8c38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b8c06:	e8df f003 	tbb	[pc, r3]
   b8c0a:	0f0d      	.short	0x0f0d
   b8c0c:	15131711 	.word	0x15131711
   b8c10:	2e22      	cmp	r6, #34	; 0x22
   b8c12:	d001      	beq.n	b8c18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b8c14:	2e5c      	cmp	r6, #92	; 0x5c
   b8c16:	d10f      	bne.n	b8c38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b8c18:	4631      	mov	r1, r6
                write('b');
   b8c1a:	4620      	mov	r0, r4
   b8c1c:	f7ff fecd 	bl	b89ba <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b8c20:	463d      	mov	r5, r7
    while (s != end) {
   b8c22:	e7cf      	b.n	b8bc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b8c24:	2162      	movs	r1, #98	; 0x62
   b8c26:	e7f8      	b.n	b8c1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b8c28:	2174      	movs	r1, #116	; 0x74
   b8c2a:	e7f6      	b.n	b8c1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b8c2c:	216e      	movs	r1, #110	; 0x6e
   b8c2e:	e7f4      	b.n	b8c1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b8c30:	2166      	movs	r1, #102	; 0x66
   b8c32:	e7f2      	b.n	b8c1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b8c34:	2172      	movs	r1, #114	; 0x72
   b8c36:	e7f0      	b.n	b8c1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b8c38:	6823      	ldr	r3, [r4, #0]
   b8c3a:	4632      	mov	r2, r6
   b8c3c:	68db      	ldr	r3, [r3, #12]
   b8c3e:	4649      	mov	r1, r9
   b8c40:	4620      	mov	r0, r4
   b8c42:	4798      	blx	r3
                break;
   b8c44:	e7ec      	b.n	b8c20 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b8c46:	42bd      	cmp	r5, r7
   b8c48:	d005      	beq.n	b8c56 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b8c4a:	6823      	ldr	r3, [r4, #0]
   b8c4c:	1b7a      	subs	r2, r7, r5
   b8c4e:	689b      	ldr	r3, [r3, #8]
   b8c50:	4629      	mov	r1, r5
   b8c52:	4620      	mov	r0, r4
   b8c54:	4798      	blx	r3
    }
    write('"');
   b8c56:	2122      	movs	r1, #34	; 0x22
   b8c58:	4620      	mov	r0, r4
   b8c5a:	f7ff feae 	bl	b89ba <_ZN5spark10JSONWriter5writeEc>
}
   b8c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8c62:	bf00      	nop
   b8c64:	000b9fff 	.word	0x000b9fff

000b8c68 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b8c68:	b513      	push	{r0, r1, r4, lr}
   b8c6a:	4604      	mov	r4, r0
   b8c6c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b8c70:	f7ff ff5e 	bl	b8b30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b8c74:	4620      	mov	r0, r4
   b8c76:	e9dd 2100 	ldrd	r2, r1, [sp]
   b8c7a:	f7ff ff97 	bl	b8bac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b8c7e:	2302      	movs	r3, #2
}
   b8c80:	4620      	mov	r0, r4
    state_ = VALUE;
   b8c82:	7123      	strb	r3, [r4, #4]
}
   b8c84:	b002      	add	sp, #8
   b8c86:	bd10      	pop	{r4, pc}

000b8c88 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b8c88:	b513      	push	{r0, r1, r4, lr}
   b8c8a:	4604      	mov	r4, r0
   b8c8c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b8c90:	f7ff ff4e 	bl	b8b30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b8c94:	4620      	mov	r0, r4
   b8c96:	e9dd 2100 	ldrd	r2, r1, [sp]
   b8c9a:	f7ff ff87 	bl	b8bac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b8c9e:	2301      	movs	r3, #1
}
   b8ca0:	4620      	mov	r0, r4
    state_ = NEXT;
   b8ca2:	7123      	strb	r3, [r4, #4]
}
   b8ca4:	b002      	add	sp, #8
   b8ca6:	bd10      	pop	{r4, pc}

000b8ca8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8ca8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8caa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8cac:	d902      	bls.n	b8cb4 <pinAvailable+0xc>
    return false;
   b8cae:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8cb0:	b002      	add	sp, #8
   b8cb2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8cb4:	f1a0 030b 	sub.w	r3, r0, #11
   b8cb8:	2b02      	cmp	r3, #2
   b8cba:	d81a      	bhi.n	b8cf2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8cbc:	4c17      	ldr	r4, [pc, #92]	; (b8d1c <pinAvailable+0x74>)
   b8cbe:	7821      	ldrb	r1, [r4, #0]
   b8cc0:	f3bf 8f5b 	dmb	ish
   b8cc4:	f011 0101 	ands.w	r1, r1, #1
   b8cc8:	d10b      	bne.n	b8ce2 <pinAvailable+0x3a>
   b8cca:	4620      	mov	r0, r4
   b8ccc:	9101      	str	r1, [sp, #4]
   b8cce:	f7fb f9f3 	bl	b40b8 <__cxa_guard_acquire>
   b8cd2:	9901      	ldr	r1, [sp, #4]
   b8cd4:	b128      	cbz	r0, b8ce2 <pinAvailable+0x3a>
   b8cd6:	4812      	ldr	r0, [pc, #72]	; (b8d20 <pinAvailable+0x78>)
   b8cd8:	f7fd fc9e 	bl	b6618 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8cdc:	4620      	mov	r0, r4
   b8cde:	f7fb f9f0 	bl	b40c2 <__cxa_guard_release>
   b8ce2:	4b0f      	ldr	r3, [pc, #60]	; (b8d20 <pinAvailable+0x78>)
   b8ce4:	7818      	ldrb	r0, [r3, #0]
   b8ce6:	f7fd fa73 	bl	b61d0 <hal_spi_is_enabled>
   b8cea:	2800      	cmp	r0, #0
   b8cec:	d1df      	bne.n	b8cae <pinAvailable+0x6>
  return true; // 'pin' is available
   b8cee:	2001      	movs	r0, #1
   b8cf0:	e7de      	b.n	b8cb0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8cf2:	2801      	cmp	r0, #1
   b8cf4:	d809      	bhi.n	b8d0a <pinAvailable+0x62>
   b8cf6:	f000 f8cb 	bl	b8e90 <_Z19__fetch_global_Wirev>
   b8cfa:	2100      	movs	r1, #0
   b8cfc:	7c00      	ldrb	r0, [r0, #16]
   b8cfe:	f7fd fa27 	bl	b6150 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8d02:	f080 0001 	eor.w	r0, r0, #1
   b8d06:	b2c0      	uxtb	r0, r0
   b8d08:	e7d2      	b.n	b8cb0 <pinAvailable+0x8>
   b8d0a:	3809      	subs	r0, #9
   b8d0c:	2801      	cmp	r0, #1
   b8d0e:	d8ee      	bhi.n	b8cee <pinAvailable+0x46>
   b8d10:	f000 f864 	bl	b8ddc <_Z22__fetch_global_Serial1v>
   b8d14:	7c00      	ldrb	r0, [r0, #16]
   b8d16:	f7fd f9c3 	bl	b60a0 <hal_usart_is_enabled>
   b8d1a:	e7f2      	b.n	b8d02 <pinAvailable+0x5a>
   b8d1c:	2003ddac 	.word	0x2003ddac
   b8d20:	2003ddb0 	.word	0x2003ddb0

000b8d24 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8d24:	2823      	cmp	r0, #35	; 0x23
{
   b8d26:	b538      	push	{r3, r4, r5, lr}
   b8d28:	4604      	mov	r4, r0
   b8d2a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8d2c:	d80a      	bhi.n	b8d44 <pinMode+0x20>
   b8d2e:	29ff      	cmp	r1, #255	; 0xff
   b8d30:	d008      	beq.n	b8d44 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8d32:	f7ff ffb9 	bl	b8ca8 <pinAvailable>
   b8d36:	b128      	cbz	r0, b8d44 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b8d38:	4629      	mov	r1, r5
   b8d3a:	4620      	mov	r0, r4
}
   b8d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8d40:	f7fd b906 	b.w	b5f50 <HAL_Pin_Mode>
}
   b8d44:	bd38      	pop	{r3, r4, r5, pc}

000b8d46 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b8d46:	b538      	push	{r3, r4, r5, lr}
   b8d48:	4604      	mov	r4, r0
   b8d4a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8d4c:	f7fd f908 	bl	b5f60 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8d50:	28ff      	cmp	r0, #255	; 0xff
   b8d52:	d010      	beq.n	b8d76 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8d54:	2806      	cmp	r0, #6
   b8d56:	d804      	bhi.n	b8d62 <digitalWrite+0x1c>
   b8d58:	234d      	movs	r3, #77	; 0x4d
   b8d5a:	fa23 f000 	lsr.w	r0, r3, r0
   b8d5e:	07c3      	lsls	r3, r0, #31
   b8d60:	d409      	bmi.n	b8d76 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8d62:	4620      	mov	r0, r4
   b8d64:	f7ff ffa0 	bl	b8ca8 <pinAvailable>
   b8d68:	b128      	cbz	r0, b8d76 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b8d6a:	4629      	mov	r1, r5
   b8d6c:	4620      	mov	r0, r4
}
   b8d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8d72:	f7fd b8fd 	b.w	b5f70 <HAL_GPIO_Write>
}
   b8d76:	bd38      	pop	{r3, r4, r5, pc}

000b8d78 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8d78:	280d      	cmp	r0, #13
{
   b8d7a:	b510      	push	{r4, lr}
   b8d7c:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8d7e:	bf9c      	itt	ls
   b8d80:	340e      	addls	r4, #14
   b8d82:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b8d84:	4620      	mov	r0, r4
   b8d86:	f7ff ff8f 	bl	b8ca8 <pinAvailable>
   b8d8a:	b150      	cbz	r0, b8da2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b8d8c:	2103      	movs	r1, #3
   b8d8e:	4620      	mov	r0, r4
   b8d90:	f7fd f8d6 	bl	b5f40 <HAL_Validate_Pin_Function>
   b8d94:	2803      	cmp	r0, #3
   b8d96:	d104      	bne.n	b8da2 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8d98:	4620      	mov	r0, r4
}
   b8d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8d9e:	f7fd b8ef 	b.w	b5f80 <hal_adc_read>
}
   b8da2:	2000      	movs	r0, #0
   b8da4:	bd10      	pop	{r4, pc}

000b8da6 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8da6:	4770      	bx	lr

000b8da8 <_Z20acquireSerial1Bufferv>:
{
   b8da8:	b538      	push	{r3, r4, r5, lr}
   b8daa:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8dac:	2514      	movs	r5, #20
   b8dae:	462a      	mov	r2, r5
   b8db0:	2100      	movs	r1, #0
   b8db2:	f000 fd21 	bl	b97f8 <memset>
   b8db6:	8025      	strh	r5, [r4, #0]
   b8db8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8dba:	4907      	ldr	r1, [pc, #28]	; (b8dd8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8dbc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8dbe:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8dc0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8dc2:	f000 f8af 	bl	b8f24 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8dc6:	4904      	ldr	r1, [pc, #16]	; (b8dd8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8dc8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8dca:	4628      	mov	r0, r5
   b8dcc:	f000 f8aa 	bl	b8f24 <_ZnajRKSt9nothrow_t>
    };
   b8dd0:	60e0      	str	r0, [r4, #12]
}
   b8dd2:	4620      	mov	r0, r4
   b8dd4:	bd38      	pop	{r3, r4, r5, pc}
   b8dd6:	bf00      	nop
   b8dd8:	000ba005 	.word	0x000ba005

000b8ddc <_Z22__fetch_global_Serial1v>:
{
   b8ddc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8dde:	4d0e      	ldr	r5, [pc, #56]	; (b8e18 <_Z22__fetch_global_Serial1v+0x3c>)
   b8de0:	7829      	ldrb	r1, [r5, #0]
   b8de2:	f3bf 8f5b 	dmb	ish
   b8de6:	f011 0401 	ands.w	r4, r1, #1
{
   b8dea:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8dec:	d111      	bne.n	b8e12 <_Z22__fetch_global_Serial1v+0x36>
   b8dee:	4628      	mov	r0, r5
   b8df0:	f7fb f962 	bl	b40b8 <__cxa_guard_acquire>
   b8df4:	b168      	cbz	r0, b8e12 <_Z22__fetch_global_Serial1v+0x36>
   b8df6:	a801      	add	r0, sp, #4
   b8df8:	f7ff ffd6 	bl	b8da8 <_Z20acquireSerial1Bufferv>
   b8dfc:	aa01      	add	r2, sp, #4
   b8dfe:	4621      	mov	r1, r4
   b8e00:	4806      	ldr	r0, [pc, #24]	; (b8e1c <_Z22__fetch_global_Serial1v+0x40>)
   b8e02:	f7ff fc05 	bl	b8610 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8e06:	4628      	mov	r0, r5
   b8e08:	f7fb f95b 	bl	b40c2 <__cxa_guard_release>
   b8e0c:	4804      	ldr	r0, [pc, #16]	; (b8e20 <_Z22__fetch_global_Serial1v+0x44>)
   b8e0e:	f000 fcad 	bl	b976c <atexit>
    return serial1;
}
   b8e12:	4802      	ldr	r0, [pc, #8]	; (b8e1c <_Z22__fetch_global_Serial1v+0x40>)
   b8e14:	b007      	add	sp, #28
   b8e16:	bd30      	pop	{r4, r5, pc}
   b8e18:	2003e710 	.word	0x2003e710
   b8e1c:	2003e714 	.word	0x2003e714
   b8e20:	000b8da7 	.word	0x000b8da7

000b8e24 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8e24:	4770      	bx	lr

000b8e26 <__tcf_1>:
   b8e26:	4770      	bx	lr

000b8e28 <_Z17acquireWireBufferv>:
{
   b8e28:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8e2a:	4b0a      	ldr	r3, [pc, #40]	; (b8e54 <_Z17acquireWireBufferv+0x2c>)
   b8e2c:	6003      	str	r3, [r0, #0]
   b8e2e:	2301      	movs	r3, #1
{
   b8e30:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8e32:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8e34:	4908      	ldr	r1, [pc, #32]	; (b8e58 <_Z17acquireWireBufferv+0x30>)
   b8e36:	2020      	movs	r0, #32
   b8e38:	f000 f874 	bl	b8f24 <_ZnajRKSt9nothrow_t>
	};
   b8e3c:	2520      	movs	r5, #32
   b8e3e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8e40:	4905      	ldr	r1, [pc, #20]	; (b8e58 <_Z17acquireWireBufferv+0x30>)
	};
   b8e42:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8e44:	4628      	mov	r0, r5
   b8e46:	f000 f86d 	bl	b8f24 <_ZnajRKSt9nothrow_t>
	};
   b8e4a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8e4e:	4620      	mov	r0, r4
   b8e50:	bd38      	pop	{r3, r4, r5, pc}
   b8e52:	bf00      	nop
   b8e54:	00010018 	.word	0x00010018
   b8e58:	000ba005 	.word	0x000ba005

000b8e5c <_Z18acquireWire1Bufferv>:
{
   b8e5c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8e5e:	4b0a      	ldr	r3, [pc, #40]	; (b8e88 <_Z18acquireWire1Bufferv+0x2c>)
   b8e60:	6003      	str	r3, [r0, #0]
   b8e62:	2301      	movs	r3, #1
{
   b8e64:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8e66:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8e68:	4908      	ldr	r1, [pc, #32]	; (b8e8c <_Z18acquireWire1Bufferv+0x30>)
   b8e6a:	2020      	movs	r0, #32
   b8e6c:	f000 f85a 	bl	b8f24 <_ZnajRKSt9nothrow_t>
	};
   b8e70:	2520      	movs	r5, #32
   b8e72:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8e74:	4905      	ldr	r1, [pc, #20]	; (b8e8c <_Z18acquireWire1Bufferv+0x30>)
	};
   b8e76:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8e78:	4628      	mov	r0, r5
   b8e7a:	f000 f853 	bl	b8f24 <_ZnajRKSt9nothrow_t>
	};
   b8e7e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8e82:	4620      	mov	r0, r4
   b8e84:	bd38      	pop	{r3, r4, r5, pc}
   b8e86:	bf00      	nop
   b8e88:	00010018 	.word	0x00010018
   b8e8c:	000ba005 	.word	0x000ba005

000b8e90 <_Z19__fetch_global_Wirev>:
{
   b8e90:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8e92:	4d0e      	ldr	r5, [pc, #56]	; (b8ecc <_Z19__fetch_global_Wirev+0x3c>)
   b8e94:	7829      	ldrb	r1, [r5, #0]
   b8e96:	f3bf 8f5b 	dmb	ish
   b8e9a:	f011 0401 	ands.w	r4, r1, #1
{
   b8e9e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8ea0:	d111      	bne.n	b8ec6 <_Z19__fetch_global_Wirev+0x36>
   b8ea2:	4628      	mov	r0, r5
   b8ea4:	f7fb f908 	bl	b40b8 <__cxa_guard_acquire>
   b8ea8:	b168      	cbz	r0, b8ec6 <_Z19__fetch_global_Wirev+0x36>
   b8eaa:	4668      	mov	r0, sp
   b8eac:	f7ff ffbc 	bl	b8e28 <_Z17acquireWireBufferv>
   b8eb0:	466a      	mov	r2, sp
   b8eb2:	4621      	mov	r1, r4
   b8eb4:	4806      	ldr	r0, [pc, #24]	; (b8ed0 <_Z19__fetch_global_Wirev+0x40>)
   b8eb6:	f7ff fc09 	bl	b86cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8eba:	4628      	mov	r0, r5
   b8ebc:	f7fb f901 	bl	b40c2 <__cxa_guard_release>
   b8ec0:	4804      	ldr	r0, [pc, #16]	; (b8ed4 <_Z19__fetch_global_Wirev+0x44>)
   b8ec2:	f000 fc53 	bl	b976c <atexit>
	return wire;
}
   b8ec6:	4802      	ldr	r0, [pc, #8]	; (b8ed0 <_Z19__fetch_global_Wirev+0x40>)
   b8ec8:	b007      	add	sp, #28
   b8eca:	bd30      	pop	{r4, r5, pc}
   b8ecc:	2003e72c 	.word	0x2003e72c
   b8ed0:	2003e734 	.word	0x2003e734
   b8ed4:	000b8e25 	.word	0x000b8e25

000b8ed8 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b8ed8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b8eda:	4c0e      	ldr	r4, [pc, #56]	; (b8f14 <_Z20__fetch_global_Wire1v+0x3c>)
   b8edc:	7823      	ldrb	r3, [r4, #0]
   b8ede:	f3bf 8f5b 	dmb	ish
   b8ee2:	07db      	lsls	r3, r3, #31
{
   b8ee4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b8ee6:	d411      	bmi.n	b8f0c <_Z20__fetch_global_Wire1v+0x34>
   b8ee8:	4620      	mov	r0, r4
   b8eea:	f7fb f8e5 	bl	b40b8 <__cxa_guard_acquire>
   b8eee:	b168      	cbz	r0, b8f0c <_Z20__fetch_global_Wire1v+0x34>
   b8ef0:	4668      	mov	r0, sp
   b8ef2:	f7ff ffb3 	bl	b8e5c <_Z18acquireWire1Bufferv>
   b8ef6:	466a      	mov	r2, sp
   b8ef8:	2101      	movs	r1, #1
   b8efa:	4807      	ldr	r0, [pc, #28]	; (b8f18 <_Z20__fetch_global_Wire1v+0x40>)
   b8efc:	f7ff fbe6 	bl	b86cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8f00:	4620      	mov	r0, r4
   b8f02:	f7fb f8de 	bl	b40c2 <__cxa_guard_release>
   b8f06:	4805      	ldr	r0, [pc, #20]	; (b8f1c <_Z20__fetch_global_Wire1v+0x44>)
   b8f08:	f000 fc30 	bl	b976c <atexit>
	return wire;
}
   b8f0c:	4802      	ldr	r0, [pc, #8]	; (b8f18 <_Z20__fetch_global_Wire1v+0x40>)
   b8f0e:	b006      	add	sp, #24
   b8f10:	bd10      	pop	{r4, pc}
   b8f12:	bf00      	nop
   b8f14:	2003e730 	.word	0x2003e730
   b8f18:	2003e748 	.word	0x2003e748
   b8f1c:	000b8e27 	.word	0x000b8e27

000b8f20 <_ZnwjRKSt9nothrow_t>:
   b8f20:	f7fb b8b7 	b.w	b4092 <_Znwj>

000b8f24 <_ZnajRKSt9nothrow_t>:
   b8f24:	f7fb b8b7 	b.w	b4096 <_Znaj>

000b8f28 <_ZSt25__throw_bad_function_callv>:
   b8f28:	b508      	push	{r3, lr}
   b8f2a:	f7fd fb09 	bl	b6540 <abort>
	...

000b8f30 <__aeabi_drsub>:
   b8f30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8f34:	e002      	b.n	b8f3c <__adddf3>
   b8f36:	bf00      	nop

000b8f38 <__aeabi_dsub>:
   b8f38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8f3c <__adddf3>:
   b8f3c:	b530      	push	{r4, r5, lr}
   b8f3e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8f42:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8f46:	ea94 0f05 	teq	r4, r5
   b8f4a:	bf08      	it	eq
   b8f4c:	ea90 0f02 	teqeq	r0, r2
   b8f50:	bf1f      	itttt	ne
   b8f52:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8f56:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8f5a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8f5e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8f62:	f000 80e2 	beq.w	b912a <__adddf3+0x1ee>
   b8f66:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8f6a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8f6e:	bfb8      	it	lt
   b8f70:	426d      	neglt	r5, r5
   b8f72:	dd0c      	ble.n	b8f8e <__adddf3+0x52>
   b8f74:	442c      	add	r4, r5
   b8f76:	ea80 0202 	eor.w	r2, r0, r2
   b8f7a:	ea81 0303 	eor.w	r3, r1, r3
   b8f7e:	ea82 0000 	eor.w	r0, r2, r0
   b8f82:	ea83 0101 	eor.w	r1, r3, r1
   b8f86:	ea80 0202 	eor.w	r2, r0, r2
   b8f8a:	ea81 0303 	eor.w	r3, r1, r3
   b8f8e:	2d36      	cmp	r5, #54	; 0x36
   b8f90:	bf88      	it	hi
   b8f92:	bd30      	pophi	{r4, r5, pc}
   b8f94:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8f98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8f9c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8fa0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8fa4:	d002      	beq.n	b8fac <__adddf3+0x70>
   b8fa6:	4240      	negs	r0, r0
   b8fa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8fac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8fb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8fb4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8fb8:	d002      	beq.n	b8fc0 <__adddf3+0x84>
   b8fba:	4252      	negs	r2, r2
   b8fbc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8fc0:	ea94 0f05 	teq	r4, r5
   b8fc4:	f000 80a7 	beq.w	b9116 <__adddf3+0x1da>
   b8fc8:	f1a4 0401 	sub.w	r4, r4, #1
   b8fcc:	f1d5 0e20 	rsbs	lr, r5, #32
   b8fd0:	db0d      	blt.n	b8fee <__adddf3+0xb2>
   b8fd2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8fd6:	fa22 f205 	lsr.w	r2, r2, r5
   b8fda:	1880      	adds	r0, r0, r2
   b8fdc:	f141 0100 	adc.w	r1, r1, #0
   b8fe0:	fa03 f20e 	lsl.w	r2, r3, lr
   b8fe4:	1880      	adds	r0, r0, r2
   b8fe6:	fa43 f305 	asr.w	r3, r3, r5
   b8fea:	4159      	adcs	r1, r3
   b8fec:	e00e      	b.n	b900c <__adddf3+0xd0>
   b8fee:	f1a5 0520 	sub.w	r5, r5, #32
   b8ff2:	f10e 0e20 	add.w	lr, lr, #32
   b8ff6:	2a01      	cmp	r2, #1
   b8ff8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8ffc:	bf28      	it	cs
   b8ffe:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9002:	fa43 f305 	asr.w	r3, r3, r5
   b9006:	18c0      	adds	r0, r0, r3
   b9008:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b900c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9010:	d507      	bpl.n	b9022 <__adddf3+0xe6>
   b9012:	f04f 0e00 	mov.w	lr, #0
   b9016:	f1dc 0c00 	rsbs	ip, ip, #0
   b901a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b901e:	eb6e 0101 	sbc.w	r1, lr, r1
   b9022:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9026:	d31b      	bcc.n	b9060 <__adddf3+0x124>
   b9028:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b902c:	d30c      	bcc.n	b9048 <__adddf3+0x10c>
   b902e:	0849      	lsrs	r1, r1, #1
   b9030:	ea5f 0030 	movs.w	r0, r0, rrx
   b9034:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9038:	f104 0401 	add.w	r4, r4, #1
   b903c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9040:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9044:	f080 809a 	bcs.w	b917c <__adddf3+0x240>
   b9048:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b904c:	bf08      	it	eq
   b904e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9052:	f150 0000 	adcs.w	r0, r0, #0
   b9056:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b905a:	ea41 0105 	orr.w	r1, r1, r5
   b905e:	bd30      	pop	{r4, r5, pc}
   b9060:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9064:	4140      	adcs	r0, r0
   b9066:	eb41 0101 	adc.w	r1, r1, r1
   b906a:	3c01      	subs	r4, #1
   b906c:	bf28      	it	cs
   b906e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9072:	d2e9      	bcs.n	b9048 <__adddf3+0x10c>
   b9074:	f091 0f00 	teq	r1, #0
   b9078:	bf04      	itt	eq
   b907a:	4601      	moveq	r1, r0
   b907c:	2000      	moveq	r0, #0
   b907e:	fab1 f381 	clz	r3, r1
   b9082:	bf08      	it	eq
   b9084:	3320      	addeq	r3, #32
   b9086:	f1a3 030b 	sub.w	r3, r3, #11
   b908a:	f1b3 0220 	subs.w	r2, r3, #32
   b908e:	da0c      	bge.n	b90aa <__adddf3+0x16e>
   b9090:	320c      	adds	r2, #12
   b9092:	dd08      	ble.n	b90a6 <__adddf3+0x16a>
   b9094:	f102 0c14 	add.w	ip, r2, #20
   b9098:	f1c2 020c 	rsb	r2, r2, #12
   b909c:	fa01 f00c 	lsl.w	r0, r1, ip
   b90a0:	fa21 f102 	lsr.w	r1, r1, r2
   b90a4:	e00c      	b.n	b90c0 <__adddf3+0x184>
   b90a6:	f102 0214 	add.w	r2, r2, #20
   b90aa:	bfd8      	it	le
   b90ac:	f1c2 0c20 	rsble	ip, r2, #32
   b90b0:	fa01 f102 	lsl.w	r1, r1, r2
   b90b4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b90b8:	bfdc      	itt	le
   b90ba:	ea41 010c 	orrle.w	r1, r1, ip
   b90be:	4090      	lslle	r0, r2
   b90c0:	1ae4      	subs	r4, r4, r3
   b90c2:	bfa2      	ittt	ge
   b90c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b90c8:	4329      	orrge	r1, r5
   b90ca:	bd30      	popge	{r4, r5, pc}
   b90cc:	ea6f 0404 	mvn.w	r4, r4
   b90d0:	3c1f      	subs	r4, #31
   b90d2:	da1c      	bge.n	b910e <__adddf3+0x1d2>
   b90d4:	340c      	adds	r4, #12
   b90d6:	dc0e      	bgt.n	b90f6 <__adddf3+0x1ba>
   b90d8:	f104 0414 	add.w	r4, r4, #20
   b90dc:	f1c4 0220 	rsb	r2, r4, #32
   b90e0:	fa20 f004 	lsr.w	r0, r0, r4
   b90e4:	fa01 f302 	lsl.w	r3, r1, r2
   b90e8:	ea40 0003 	orr.w	r0, r0, r3
   b90ec:	fa21 f304 	lsr.w	r3, r1, r4
   b90f0:	ea45 0103 	orr.w	r1, r5, r3
   b90f4:	bd30      	pop	{r4, r5, pc}
   b90f6:	f1c4 040c 	rsb	r4, r4, #12
   b90fa:	f1c4 0220 	rsb	r2, r4, #32
   b90fe:	fa20 f002 	lsr.w	r0, r0, r2
   b9102:	fa01 f304 	lsl.w	r3, r1, r4
   b9106:	ea40 0003 	orr.w	r0, r0, r3
   b910a:	4629      	mov	r1, r5
   b910c:	bd30      	pop	{r4, r5, pc}
   b910e:	fa21 f004 	lsr.w	r0, r1, r4
   b9112:	4629      	mov	r1, r5
   b9114:	bd30      	pop	{r4, r5, pc}
   b9116:	f094 0f00 	teq	r4, #0
   b911a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b911e:	bf06      	itte	eq
   b9120:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9124:	3401      	addeq	r4, #1
   b9126:	3d01      	subne	r5, #1
   b9128:	e74e      	b.n	b8fc8 <__adddf3+0x8c>
   b912a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b912e:	bf18      	it	ne
   b9130:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9134:	d029      	beq.n	b918a <__adddf3+0x24e>
   b9136:	ea94 0f05 	teq	r4, r5
   b913a:	bf08      	it	eq
   b913c:	ea90 0f02 	teqeq	r0, r2
   b9140:	d005      	beq.n	b914e <__adddf3+0x212>
   b9142:	ea54 0c00 	orrs.w	ip, r4, r0
   b9146:	bf04      	itt	eq
   b9148:	4619      	moveq	r1, r3
   b914a:	4610      	moveq	r0, r2
   b914c:	bd30      	pop	{r4, r5, pc}
   b914e:	ea91 0f03 	teq	r1, r3
   b9152:	bf1e      	ittt	ne
   b9154:	2100      	movne	r1, #0
   b9156:	2000      	movne	r0, #0
   b9158:	bd30      	popne	{r4, r5, pc}
   b915a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b915e:	d105      	bne.n	b916c <__adddf3+0x230>
   b9160:	0040      	lsls	r0, r0, #1
   b9162:	4149      	adcs	r1, r1
   b9164:	bf28      	it	cs
   b9166:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b916a:	bd30      	pop	{r4, r5, pc}
   b916c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9170:	bf3c      	itt	cc
   b9172:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9176:	bd30      	popcc	{r4, r5, pc}
   b9178:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b917c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9180:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9184:	f04f 0000 	mov.w	r0, #0
   b9188:	bd30      	pop	{r4, r5, pc}
   b918a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b918e:	bf1a      	itte	ne
   b9190:	4619      	movne	r1, r3
   b9192:	4610      	movne	r0, r2
   b9194:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9198:	bf1c      	itt	ne
   b919a:	460b      	movne	r3, r1
   b919c:	4602      	movne	r2, r0
   b919e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b91a2:	bf06      	itte	eq
   b91a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b91a8:	ea91 0f03 	teqeq	r1, r3
   b91ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b91b0:	bd30      	pop	{r4, r5, pc}
   b91b2:	bf00      	nop

000b91b4 <__aeabi_ui2d>:
   b91b4:	f090 0f00 	teq	r0, #0
   b91b8:	bf04      	itt	eq
   b91ba:	2100      	moveq	r1, #0
   b91bc:	4770      	bxeq	lr
   b91be:	b530      	push	{r4, r5, lr}
   b91c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b91c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b91c8:	f04f 0500 	mov.w	r5, #0
   b91cc:	f04f 0100 	mov.w	r1, #0
   b91d0:	e750      	b.n	b9074 <__adddf3+0x138>
   b91d2:	bf00      	nop

000b91d4 <__aeabi_i2d>:
   b91d4:	f090 0f00 	teq	r0, #0
   b91d8:	bf04      	itt	eq
   b91da:	2100      	moveq	r1, #0
   b91dc:	4770      	bxeq	lr
   b91de:	b530      	push	{r4, r5, lr}
   b91e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b91e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b91e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b91ec:	bf48      	it	mi
   b91ee:	4240      	negmi	r0, r0
   b91f0:	f04f 0100 	mov.w	r1, #0
   b91f4:	e73e      	b.n	b9074 <__adddf3+0x138>
   b91f6:	bf00      	nop

000b91f8 <__aeabi_f2d>:
   b91f8:	0042      	lsls	r2, r0, #1
   b91fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b91fe:	ea4f 0131 	mov.w	r1, r1, rrx
   b9202:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9206:	bf1f      	itttt	ne
   b9208:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b920c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9210:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9214:	4770      	bxne	lr
   b9216:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b921a:	bf08      	it	eq
   b921c:	4770      	bxeq	lr
   b921e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9222:	bf04      	itt	eq
   b9224:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9228:	4770      	bxeq	lr
   b922a:	b530      	push	{r4, r5, lr}
   b922c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9230:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9234:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9238:	e71c      	b.n	b9074 <__adddf3+0x138>
   b923a:	bf00      	nop

000b923c <__aeabi_ul2d>:
   b923c:	ea50 0201 	orrs.w	r2, r0, r1
   b9240:	bf08      	it	eq
   b9242:	4770      	bxeq	lr
   b9244:	b530      	push	{r4, r5, lr}
   b9246:	f04f 0500 	mov.w	r5, #0
   b924a:	e00a      	b.n	b9262 <__aeabi_l2d+0x16>

000b924c <__aeabi_l2d>:
   b924c:	ea50 0201 	orrs.w	r2, r0, r1
   b9250:	bf08      	it	eq
   b9252:	4770      	bxeq	lr
   b9254:	b530      	push	{r4, r5, lr}
   b9256:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b925a:	d502      	bpl.n	b9262 <__aeabi_l2d+0x16>
   b925c:	4240      	negs	r0, r0
   b925e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9262:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9266:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b926a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b926e:	f43f aed8 	beq.w	b9022 <__adddf3+0xe6>
   b9272:	f04f 0203 	mov.w	r2, #3
   b9276:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b927a:	bf18      	it	ne
   b927c:	3203      	addne	r2, #3
   b927e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9282:	bf18      	it	ne
   b9284:	3203      	addne	r2, #3
   b9286:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b928a:	f1c2 0320 	rsb	r3, r2, #32
   b928e:	fa00 fc03 	lsl.w	ip, r0, r3
   b9292:	fa20 f002 	lsr.w	r0, r0, r2
   b9296:	fa01 fe03 	lsl.w	lr, r1, r3
   b929a:	ea40 000e 	orr.w	r0, r0, lr
   b929e:	fa21 f102 	lsr.w	r1, r1, r2
   b92a2:	4414      	add	r4, r2
   b92a4:	e6bd      	b.n	b9022 <__adddf3+0xe6>
   b92a6:	bf00      	nop

000b92a8 <__aeabi_dmul>:
   b92a8:	b570      	push	{r4, r5, r6, lr}
   b92aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b92ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b92b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b92b6:	bf1d      	ittte	ne
   b92b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b92bc:	ea94 0f0c 	teqne	r4, ip
   b92c0:	ea95 0f0c 	teqne	r5, ip
   b92c4:	f000 f8de 	bleq	b9484 <__aeabi_dmul+0x1dc>
   b92c8:	442c      	add	r4, r5
   b92ca:	ea81 0603 	eor.w	r6, r1, r3
   b92ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b92d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b92d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b92da:	bf18      	it	ne
   b92dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b92e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b92e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b92e8:	d038      	beq.n	b935c <__aeabi_dmul+0xb4>
   b92ea:	fba0 ce02 	umull	ip, lr, r0, r2
   b92ee:	f04f 0500 	mov.w	r5, #0
   b92f2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b92f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b92fa:	fbe0 e503 	umlal	lr, r5, r0, r3
   b92fe:	f04f 0600 	mov.w	r6, #0
   b9302:	fbe1 5603 	umlal	r5, r6, r1, r3
   b9306:	f09c 0f00 	teq	ip, #0
   b930a:	bf18      	it	ne
   b930c:	f04e 0e01 	orrne.w	lr, lr, #1
   b9310:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b9314:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9318:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b931c:	d204      	bcs.n	b9328 <__aeabi_dmul+0x80>
   b931e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b9322:	416d      	adcs	r5, r5
   b9324:	eb46 0606 	adc.w	r6, r6, r6
   b9328:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b932c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b9330:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b9334:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9338:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b933c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9340:	bf88      	it	hi
   b9342:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9346:	d81e      	bhi.n	b9386 <__aeabi_dmul+0xde>
   b9348:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b934c:	bf08      	it	eq
   b934e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b9352:	f150 0000 	adcs.w	r0, r0, #0
   b9356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b935a:	bd70      	pop	{r4, r5, r6, pc}
   b935c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9360:	ea46 0101 	orr.w	r1, r6, r1
   b9364:	ea40 0002 	orr.w	r0, r0, r2
   b9368:	ea81 0103 	eor.w	r1, r1, r3
   b936c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b9370:	bfc2      	ittt	gt
   b9372:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9376:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b937a:	bd70      	popgt	{r4, r5, r6, pc}
   b937c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9380:	f04f 0e00 	mov.w	lr, #0
   b9384:	3c01      	subs	r4, #1
   b9386:	f300 80ab 	bgt.w	b94e0 <__aeabi_dmul+0x238>
   b938a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b938e:	bfde      	ittt	le
   b9390:	2000      	movle	r0, #0
   b9392:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b9396:	bd70      	pople	{r4, r5, r6, pc}
   b9398:	f1c4 0400 	rsb	r4, r4, #0
   b939c:	3c20      	subs	r4, #32
   b939e:	da35      	bge.n	b940c <__aeabi_dmul+0x164>
   b93a0:	340c      	adds	r4, #12
   b93a2:	dc1b      	bgt.n	b93dc <__aeabi_dmul+0x134>
   b93a4:	f104 0414 	add.w	r4, r4, #20
   b93a8:	f1c4 0520 	rsb	r5, r4, #32
   b93ac:	fa00 f305 	lsl.w	r3, r0, r5
   b93b0:	fa20 f004 	lsr.w	r0, r0, r4
   b93b4:	fa01 f205 	lsl.w	r2, r1, r5
   b93b8:	ea40 0002 	orr.w	r0, r0, r2
   b93bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b93c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b93c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b93c8:	fa21 f604 	lsr.w	r6, r1, r4
   b93cc:	eb42 0106 	adc.w	r1, r2, r6
   b93d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b93d4:	bf08      	it	eq
   b93d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b93da:	bd70      	pop	{r4, r5, r6, pc}
   b93dc:	f1c4 040c 	rsb	r4, r4, #12
   b93e0:	f1c4 0520 	rsb	r5, r4, #32
   b93e4:	fa00 f304 	lsl.w	r3, r0, r4
   b93e8:	fa20 f005 	lsr.w	r0, r0, r5
   b93ec:	fa01 f204 	lsl.w	r2, r1, r4
   b93f0:	ea40 0002 	orr.w	r0, r0, r2
   b93f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b93f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b93fc:	f141 0100 	adc.w	r1, r1, #0
   b9400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9404:	bf08      	it	eq
   b9406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b940a:	bd70      	pop	{r4, r5, r6, pc}
   b940c:	f1c4 0520 	rsb	r5, r4, #32
   b9410:	fa00 f205 	lsl.w	r2, r0, r5
   b9414:	ea4e 0e02 	orr.w	lr, lr, r2
   b9418:	fa20 f304 	lsr.w	r3, r0, r4
   b941c:	fa01 f205 	lsl.w	r2, r1, r5
   b9420:	ea43 0302 	orr.w	r3, r3, r2
   b9424:	fa21 f004 	lsr.w	r0, r1, r4
   b9428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b942c:	fa21 f204 	lsr.w	r2, r1, r4
   b9430:	ea20 0002 	bic.w	r0, r0, r2
   b9434:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b943c:	bf08      	it	eq
   b943e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9442:	bd70      	pop	{r4, r5, r6, pc}
   b9444:	f094 0f00 	teq	r4, #0
   b9448:	d10f      	bne.n	b946a <__aeabi_dmul+0x1c2>
   b944a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b944e:	0040      	lsls	r0, r0, #1
   b9450:	eb41 0101 	adc.w	r1, r1, r1
   b9454:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9458:	bf08      	it	eq
   b945a:	3c01      	subeq	r4, #1
   b945c:	d0f7      	beq.n	b944e <__aeabi_dmul+0x1a6>
   b945e:	ea41 0106 	orr.w	r1, r1, r6
   b9462:	f095 0f00 	teq	r5, #0
   b9466:	bf18      	it	ne
   b9468:	4770      	bxne	lr
   b946a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b946e:	0052      	lsls	r2, r2, #1
   b9470:	eb43 0303 	adc.w	r3, r3, r3
   b9474:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b9478:	bf08      	it	eq
   b947a:	3d01      	subeq	r5, #1
   b947c:	d0f7      	beq.n	b946e <__aeabi_dmul+0x1c6>
   b947e:	ea43 0306 	orr.w	r3, r3, r6
   b9482:	4770      	bx	lr
   b9484:	ea94 0f0c 	teq	r4, ip
   b9488:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b948c:	bf18      	it	ne
   b948e:	ea95 0f0c 	teqne	r5, ip
   b9492:	d00c      	beq.n	b94ae <__aeabi_dmul+0x206>
   b9494:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9498:	bf18      	it	ne
   b949a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b949e:	d1d1      	bne.n	b9444 <__aeabi_dmul+0x19c>
   b94a0:	ea81 0103 	eor.w	r1, r1, r3
   b94a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b94a8:	f04f 0000 	mov.w	r0, #0
   b94ac:	bd70      	pop	{r4, r5, r6, pc}
   b94ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b94b2:	bf06      	itte	eq
   b94b4:	4610      	moveq	r0, r2
   b94b6:	4619      	moveq	r1, r3
   b94b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b94bc:	d019      	beq.n	b94f2 <__aeabi_dmul+0x24a>
   b94be:	ea94 0f0c 	teq	r4, ip
   b94c2:	d102      	bne.n	b94ca <__aeabi_dmul+0x222>
   b94c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b94c8:	d113      	bne.n	b94f2 <__aeabi_dmul+0x24a>
   b94ca:	ea95 0f0c 	teq	r5, ip
   b94ce:	d105      	bne.n	b94dc <__aeabi_dmul+0x234>
   b94d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b94d4:	bf1c      	itt	ne
   b94d6:	4610      	movne	r0, r2
   b94d8:	4619      	movne	r1, r3
   b94da:	d10a      	bne.n	b94f2 <__aeabi_dmul+0x24a>
   b94dc:	ea81 0103 	eor.w	r1, r1, r3
   b94e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b94e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b94e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b94ec:	f04f 0000 	mov.w	r0, #0
   b94f0:	bd70      	pop	{r4, r5, r6, pc}
   b94f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b94f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b94fa:	bd70      	pop	{r4, r5, r6, pc}

000b94fc <__aeabi_ddiv>:
   b94fc:	b570      	push	{r4, r5, r6, lr}
   b94fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9502:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9506:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b950a:	bf1d      	ittte	ne
   b950c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9510:	ea94 0f0c 	teqne	r4, ip
   b9514:	ea95 0f0c 	teqne	r5, ip
   b9518:	f000 f8a7 	bleq	b966a <__aeabi_ddiv+0x16e>
   b951c:	eba4 0405 	sub.w	r4, r4, r5
   b9520:	ea81 0e03 	eor.w	lr, r1, r3
   b9524:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9528:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b952c:	f000 8088 	beq.w	b9640 <__aeabi_ddiv+0x144>
   b9530:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9534:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9538:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b953c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9540:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9544:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9548:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b954c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9550:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9554:	429d      	cmp	r5, r3
   b9556:	bf08      	it	eq
   b9558:	4296      	cmpeq	r6, r2
   b955a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b955e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9562:	d202      	bcs.n	b956a <__aeabi_ddiv+0x6e>
   b9564:	085b      	lsrs	r3, r3, #1
   b9566:	ea4f 0232 	mov.w	r2, r2, rrx
   b956a:	1ab6      	subs	r6, r6, r2
   b956c:	eb65 0503 	sbc.w	r5, r5, r3
   b9570:	085b      	lsrs	r3, r3, #1
   b9572:	ea4f 0232 	mov.w	r2, r2, rrx
   b9576:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b957a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b957e:	ebb6 0e02 	subs.w	lr, r6, r2
   b9582:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9586:	bf22      	ittt	cs
   b9588:	1ab6      	subcs	r6, r6, r2
   b958a:	4675      	movcs	r5, lr
   b958c:	ea40 000c 	orrcs.w	r0, r0, ip
   b9590:	085b      	lsrs	r3, r3, #1
   b9592:	ea4f 0232 	mov.w	r2, r2, rrx
   b9596:	ebb6 0e02 	subs.w	lr, r6, r2
   b959a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b959e:	bf22      	ittt	cs
   b95a0:	1ab6      	subcs	r6, r6, r2
   b95a2:	4675      	movcs	r5, lr
   b95a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b95a8:	085b      	lsrs	r3, r3, #1
   b95aa:	ea4f 0232 	mov.w	r2, r2, rrx
   b95ae:	ebb6 0e02 	subs.w	lr, r6, r2
   b95b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b95b6:	bf22      	ittt	cs
   b95b8:	1ab6      	subcs	r6, r6, r2
   b95ba:	4675      	movcs	r5, lr
   b95bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b95c0:	085b      	lsrs	r3, r3, #1
   b95c2:	ea4f 0232 	mov.w	r2, r2, rrx
   b95c6:	ebb6 0e02 	subs.w	lr, r6, r2
   b95ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   b95ce:	bf22      	ittt	cs
   b95d0:	1ab6      	subcs	r6, r6, r2
   b95d2:	4675      	movcs	r5, lr
   b95d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b95d8:	ea55 0e06 	orrs.w	lr, r5, r6
   b95dc:	d018      	beq.n	b9610 <__aeabi_ddiv+0x114>
   b95de:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b95e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b95e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b95ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b95ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b95f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b95f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b95fa:	d1c0      	bne.n	b957e <__aeabi_ddiv+0x82>
   b95fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9600:	d10b      	bne.n	b961a <__aeabi_ddiv+0x11e>
   b9602:	ea41 0100 	orr.w	r1, r1, r0
   b9606:	f04f 0000 	mov.w	r0, #0
   b960a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b960e:	e7b6      	b.n	b957e <__aeabi_ddiv+0x82>
   b9610:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9614:	bf04      	itt	eq
   b9616:	4301      	orreq	r1, r0
   b9618:	2000      	moveq	r0, #0
   b961a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b961e:	bf88      	it	hi
   b9620:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9624:	f63f aeaf 	bhi.w	b9386 <__aeabi_dmul+0xde>
   b9628:	ebb5 0c03 	subs.w	ip, r5, r3
   b962c:	bf04      	itt	eq
   b962e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b9632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9636:	f150 0000 	adcs.w	r0, r0, #0
   b963a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b963e:	bd70      	pop	{r4, r5, r6, pc}
   b9640:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9644:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9648:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b964c:	bfc2      	ittt	gt
   b964e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9652:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9656:	bd70      	popgt	{r4, r5, r6, pc}
   b9658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b965c:	f04f 0e00 	mov.w	lr, #0
   b9660:	3c01      	subs	r4, #1
   b9662:	e690      	b.n	b9386 <__aeabi_dmul+0xde>
   b9664:	ea45 0e06 	orr.w	lr, r5, r6
   b9668:	e68d      	b.n	b9386 <__aeabi_dmul+0xde>
   b966a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b966e:	ea94 0f0c 	teq	r4, ip
   b9672:	bf08      	it	eq
   b9674:	ea95 0f0c 	teqeq	r5, ip
   b9678:	f43f af3b 	beq.w	b94f2 <__aeabi_dmul+0x24a>
   b967c:	ea94 0f0c 	teq	r4, ip
   b9680:	d10a      	bne.n	b9698 <__aeabi_ddiv+0x19c>
   b9682:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9686:	f47f af34 	bne.w	b94f2 <__aeabi_dmul+0x24a>
   b968a:	ea95 0f0c 	teq	r5, ip
   b968e:	f47f af25 	bne.w	b94dc <__aeabi_dmul+0x234>
   b9692:	4610      	mov	r0, r2
   b9694:	4619      	mov	r1, r3
   b9696:	e72c      	b.n	b94f2 <__aeabi_dmul+0x24a>
   b9698:	ea95 0f0c 	teq	r5, ip
   b969c:	d106      	bne.n	b96ac <__aeabi_ddiv+0x1b0>
   b969e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b96a2:	f43f aefd 	beq.w	b94a0 <__aeabi_dmul+0x1f8>
   b96a6:	4610      	mov	r0, r2
   b96a8:	4619      	mov	r1, r3
   b96aa:	e722      	b.n	b94f2 <__aeabi_dmul+0x24a>
   b96ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b96b0:	bf18      	it	ne
   b96b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b96b6:	f47f aec5 	bne.w	b9444 <__aeabi_dmul+0x19c>
   b96ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b96be:	f47f af0d 	bne.w	b94dc <__aeabi_dmul+0x234>
   b96c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b96c6:	f47f aeeb 	bne.w	b94a0 <__aeabi_dmul+0x1f8>
   b96ca:	e712      	b.n	b94f2 <__aeabi_dmul+0x24a>

000b96cc <__aeabi_d2f>:
   b96cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b96d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b96d4:	bf24      	itt	cs
   b96d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b96da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b96de:	d90d      	bls.n	b96fc <__aeabi_d2f+0x30>
   b96e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b96e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b96e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b96ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b96f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b96f4:	bf08      	it	eq
   b96f6:	f020 0001 	biceq.w	r0, r0, #1
   b96fa:	4770      	bx	lr
   b96fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b9700:	d121      	bne.n	b9746 <__aeabi_d2f+0x7a>
   b9702:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b9706:	bfbc      	itt	lt
   b9708:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b970c:	4770      	bxlt	lr
   b970e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9712:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b9716:	f1c2 0218 	rsb	r2, r2, #24
   b971a:	f1c2 0c20 	rsb	ip, r2, #32
   b971e:	fa10 f30c 	lsls.w	r3, r0, ip
   b9722:	fa20 f002 	lsr.w	r0, r0, r2
   b9726:	bf18      	it	ne
   b9728:	f040 0001 	orrne.w	r0, r0, #1
   b972c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9730:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b9734:	fa03 fc0c 	lsl.w	ip, r3, ip
   b9738:	ea40 000c 	orr.w	r0, r0, ip
   b973c:	fa23 f302 	lsr.w	r3, r3, r2
   b9740:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b9744:	e7cc      	b.n	b96e0 <__aeabi_d2f+0x14>
   b9746:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b974a:	d107      	bne.n	b975c <__aeabi_d2f+0x90>
   b974c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b9750:	bf1e      	ittt	ne
   b9752:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b9756:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b975a:	4770      	bxne	lr
   b975c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b9760:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b9764:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9768:	4770      	bx	lr
   b976a:	bf00      	nop

000b976c <atexit>:
   b976c:	2300      	movs	r3, #0
   b976e:	4601      	mov	r1, r0
   b9770:	461a      	mov	r2, r3
   b9772:	4618      	mov	r0, r3
   b9774:	f000 b97a 	b.w	b9a6c <__register_exitproc>

000b9778 <isprint>:
   b9778:	4b02      	ldr	r3, [pc, #8]	; (b9784 <isprint+0xc>)
   b977a:	4418      	add	r0, r3
   b977c:	7840      	ldrb	r0, [r0, #1]
   b977e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b9782:	4770      	bx	lr
   b9784:	000ba09a 	.word	0x000ba09a

000b9788 <memcmp>:
   b9788:	b510      	push	{r4, lr}
   b978a:	3901      	subs	r1, #1
   b978c:	4402      	add	r2, r0
   b978e:	4290      	cmp	r0, r2
   b9790:	d101      	bne.n	b9796 <memcmp+0xe>
   b9792:	2000      	movs	r0, #0
   b9794:	e005      	b.n	b97a2 <memcmp+0x1a>
   b9796:	7803      	ldrb	r3, [r0, #0]
   b9798:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b979c:	42a3      	cmp	r3, r4
   b979e:	d001      	beq.n	b97a4 <memcmp+0x1c>
   b97a0:	1b18      	subs	r0, r3, r4
   b97a2:	bd10      	pop	{r4, pc}
   b97a4:	3001      	adds	r0, #1
   b97a6:	e7f2      	b.n	b978e <memcmp+0x6>

000b97a8 <memcpy>:
   b97a8:	440a      	add	r2, r1
   b97aa:	4291      	cmp	r1, r2
   b97ac:	f100 33ff 	add.w	r3, r0, #4294967295
   b97b0:	d100      	bne.n	b97b4 <memcpy+0xc>
   b97b2:	4770      	bx	lr
   b97b4:	b510      	push	{r4, lr}
   b97b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b97ba:	f803 4f01 	strb.w	r4, [r3, #1]!
   b97be:	4291      	cmp	r1, r2
   b97c0:	d1f9      	bne.n	b97b6 <memcpy+0xe>
   b97c2:	bd10      	pop	{r4, pc}

000b97c4 <memmove>:
   b97c4:	4288      	cmp	r0, r1
   b97c6:	b510      	push	{r4, lr}
   b97c8:	eb01 0402 	add.w	r4, r1, r2
   b97cc:	d902      	bls.n	b97d4 <memmove+0x10>
   b97ce:	4284      	cmp	r4, r0
   b97d0:	4623      	mov	r3, r4
   b97d2:	d807      	bhi.n	b97e4 <memmove+0x20>
   b97d4:	1e43      	subs	r3, r0, #1
   b97d6:	42a1      	cmp	r1, r4
   b97d8:	d008      	beq.n	b97ec <memmove+0x28>
   b97da:	f811 2b01 	ldrb.w	r2, [r1], #1
   b97de:	f803 2f01 	strb.w	r2, [r3, #1]!
   b97e2:	e7f8      	b.n	b97d6 <memmove+0x12>
   b97e4:	4402      	add	r2, r0
   b97e6:	4601      	mov	r1, r0
   b97e8:	428a      	cmp	r2, r1
   b97ea:	d100      	bne.n	b97ee <memmove+0x2a>
   b97ec:	bd10      	pop	{r4, pc}
   b97ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b97f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b97f6:	e7f7      	b.n	b97e8 <memmove+0x24>

000b97f8 <memset>:
   b97f8:	4402      	add	r2, r0
   b97fa:	4603      	mov	r3, r0
   b97fc:	4293      	cmp	r3, r2
   b97fe:	d100      	bne.n	b9802 <memset+0xa>
   b9800:	4770      	bx	lr
   b9802:	f803 1b01 	strb.w	r1, [r3], #1
   b9806:	e7f9      	b.n	b97fc <memset+0x4>

000b9808 <srand>:
   b9808:	b538      	push	{r3, r4, r5, lr}
   b980a:	4b10      	ldr	r3, [pc, #64]	; (b984c <srand+0x44>)
   b980c:	681d      	ldr	r5, [r3, #0]
   b980e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9810:	4604      	mov	r4, r0
   b9812:	b9b3      	cbnz	r3, b9842 <srand+0x3a>
   b9814:	2018      	movs	r0, #24
   b9816:	f7fc fe6b 	bl	b64f0 <malloc>
   b981a:	4602      	mov	r2, r0
   b981c:	63a8      	str	r0, [r5, #56]	; 0x38
   b981e:	b920      	cbnz	r0, b982a <srand+0x22>
   b9820:	4b0b      	ldr	r3, [pc, #44]	; (b9850 <srand+0x48>)
   b9822:	480c      	ldr	r0, [pc, #48]	; (b9854 <srand+0x4c>)
   b9824:	2142      	movs	r1, #66	; 0x42
   b9826:	f7fc fea3 	bl	b6570 <__assert_func>
   b982a:	490b      	ldr	r1, [pc, #44]	; (b9858 <srand+0x50>)
   b982c:	4b0b      	ldr	r3, [pc, #44]	; (b985c <srand+0x54>)
   b982e:	e9c0 1300 	strd	r1, r3, [r0]
   b9832:	4b0b      	ldr	r3, [pc, #44]	; (b9860 <srand+0x58>)
   b9834:	6083      	str	r3, [r0, #8]
   b9836:	230b      	movs	r3, #11
   b9838:	8183      	strh	r3, [r0, #12]
   b983a:	2100      	movs	r1, #0
   b983c:	2001      	movs	r0, #1
   b983e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9842:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9844:	2200      	movs	r2, #0
   b9846:	611c      	str	r4, [r3, #16]
   b9848:	615a      	str	r2, [r3, #20]
   b984a:	bd38      	pop	{r3, r4, r5, pc}
   b984c:	2003dd44 	.word	0x2003dd44
   b9850:	000ba006 	.word	0x000ba006
   b9854:	000ba01d 	.word	0x000ba01d
   b9858:	abcd330e 	.word	0xabcd330e
   b985c:	e66d1234 	.word	0xe66d1234
   b9860:	0005deec 	.word	0x0005deec

000b9864 <strchr>:
   b9864:	b2c9      	uxtb	r1, r1
   b9866:	4603      	mov	r3, r0
   b9868:	f810 2b01 	ldrb.w	r2, [r0], #1
   b986c:	b11a      	cbz	r2, b9876 <strchr+0x12>
   b986e:	428a      	cmp	r2, r1
   b9870:	d1f9      	bne.n	b9866 <strchr+0x2>
   b9872:	4618      	mov	r0, r3
   b9874:	4770      	bx	lr
   b9876:	2900      	cmp	r1, #0
   b9878:	bf18      	it	ne
   b987a:	2300      	movne	r3, #0
   b987c:	e7f9      	b.n	b9872 <strchr+0xe>

000b987e <strchrnul>:
   b987e:	b510      	push	{r4, lr}
   b9880:	4604      	mov	r4, r0
   b9882:	f7ff ffef 	bl	b9864 <strchr>
   b9886:	b918      	cbnz	r0, b9890 <strchrnul+0x12>
   b9888:	4620      	mov	r0, r4
   b988a:	f000 f832 	bl	b98f2 <strlen>
   b988e:	4420      	add	r0, r4
   b9890:	bd10      	pop	{r4, pc}

000b9892 <strcmp>:
   b9892:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9896:	f811 3b01 	ldrb.w	r3, [r1], #1
   b989a:	2a01      	cmp	r2, #1
   b989c:	bf28      	it	cs
   b989e:	429a      	cmpcs	r2, r3
   b98a0:	d0f7      	beq.n	b9892 <strcmp>
   b98a2:	1ad0      	subs	r0, r2, r3
   b98a4:	4770      	bx	lr

000b98a6 <strcpy>:
   b98a6:	4603      	mov	r3, r0
   b98a8:	f811 2b01 	ldrb.w	r2, [r1], #1
   b98ac:	f803 2b01 	strb.w	r2, [r3], #1
   b98b0:	2a00      	cmp	r2, #0
   b98b2:	d1f9      	bne.n	b98a8 <strcpy+0x2>
   b98b4:	4770      	bx	lr
	...

000b98b8 <strdup>:
   b98b8:	4b02      	ldr	r3, [pc, #8]	; (b98c4 <strdup+0xc>)
   b98ba:	4601      	mov	r1, r0
   b98bc:	6818      	ldr	r0, [r3, #0]
   b98be:	f000 b803 	b.w	b98c8 <_strdup_r>
   b98c2:	bf00      	nop
   b98c4:	2003dd44 	.word	0x2003dd44

000b98c8 <_strdup_r>:
   b98c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b98ca:	4604      	mov	r4, r0
   b98cc:	4608      	mov	r0, r1
   b98ce:	460d      	mov	r5, r1
   b98d0:	f000 f80f 	bl	b98f2 <strlen>
   b98d4:	1c42      	adds	r2, r0, #1
   b98d6:	4611      	mov	r1, r2
   b98d8:	4620      	mov	r0, r4
   b98da:	9201      	str	r2, [sp, #4]
   b98dc:	f7fc fe38 	bl	b6550 <_malloc_r>
   b98e0:	4604      	mov	r4, r0
   b98e2:	b118      	cbz	r0, b98ec <_strdup_r+0x24>
   b98e4:	9a01      	ldr	r2, [sp, #4]
   b98e6:	4629      	mov	r1, r5
   b98e8:	f7ff ff5e 	bl	b97a8 <memcpy>
   b98ec:	4620      	mov	r0, r4
   b98ee:	b003      	add	sp, #12
   b98f0:	bd30      	pop	{r4, r5, pc}

000b98f2 <strlen>:
   b98f2:	4603      	mov	r3, r0
   b98f4:	f813 2b01 	ldrb.w	r2, [r3], #1
   b98f8:	2a00      	cmp	r2, #0
   b98fa:	d1fb      	bne.n	b98f4 <strlen+0x2>
   b98fc:	1a18      	subs	r0, r3, r0
   b98fe:	3801      	subs	r0, #1
   b9900:	4770      	bx	lr

000b9902 <strncmp>:
   b9902:	b510      	push	{r4, lr}
   b9904:	b17a      	cbz	r2, b9926 <strncmp+0x24>
   b9906:	4603      	mov	r3, r0
   b9908:	3901      	subs	r1, #1
   b990a:	1884      	adds	r4, r0, r2
   b990c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9910:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9914:	4290      	cmp	r0, r2
   b9916:	d101      	bne.n	b991c <strncmp+0x1a>
   b9918:	42a3      	cmp	r3, r4
   b991a:	d101      	bne.n	b9920 <strncmp+0x1e>
   b991c:	1a80      	subs	r0, r0, r2
   b991e:	bd10      	pop	{r4, pc}
   b9920:	2800      	cmp	r0, #0
   b9922:	d1f3      	bne.n	b990c <strncmp+0xa>
   b9924:	e7fa      	b.n	b991c <strncmp+0x1a>
   b9926:	4610      	mov	r0, r2
   b9928:	e7f9      	b.n	b991e <strncmp+0x1c>

000b992a <strrchr>:
   b992a:	b538      	push	{r3, r4, r5, lr}
   b992c:	4603      	mov	r3, r0
   b992e:	460c      	mov	r4, r1
   b9930:	b969      	cbnz	r1, b994e <strrchr+0x24>
   b9932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9936:	f7ff bf95 	b.w	b9864 <strchr>
   b993a:	1c43      	adds	r3, r0, #1
   b993c:	4605      	mov	r5, r0
   b993e:	4621      	mov	r1, r4
   b9940:	4618      	mov	r0, r3
   b9942:	f7ff ff8f 	bl	b9864 <strchr>
   b9946:	2800      	cmp	r0, #0
   b9948:	d1f7      	bne.n	b993a <strrchr+0x10>
   b994a:	4628      	mov	r0, r5
   b994c:	bd38      	pop	{r3, r4, r5, pc}
   b994e:	2500      	movs	r5, #0
   b9950:	e7f5      	b.n	b993e <strrchr+0x14>
	...

000b9954 <_strtol_l.constprop.0>:
   b9954:	2b01      	cmp	r3, #1
   b9956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b995a:	d001      	beq.n	b9960 <_strtol_l.constprop.0+0xc>
   b995c:	2b24      	cmp	r3, #36	; 0x24
   b995e:	d906      	bls.n	b996e <_strtol_l.constprop.0+0x1a>
   b9960:	f7fc fdfe 	bl	b6560 <__errno>
   b9964:	2316      	movs	r3, #22
   b9966:	6003      	str	r3, [r0, #0]
   b9968:	2000      	movs	r0, #0
   b996a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b996e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9a54 <_strtol_l.constprop.0+0x100>
   b9972:	460d      	mov	r5, r1
   b9974:	462e      	mov	r6, r5
   b9976:	f815 4b01 	ldrb.w	r4, [r5], #1
   b997a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b997e:	f017 0708 	ands.w	r7, r7, #8
   b9982:	d1f7      	bne.n	b9974 <_strtol_l.constprop.0+0x20>
   b9984:	2c2d      	cmp	r4, #45	; 0x2d
   b9986:	d132      	bne.n	b99ee <_strtol_l.constprop.0+0x9a>
   b9988:	782c      	ldrb	r4, [r5, #0]
   b998a:	2701      	movs	r7, #1
   b998c:	1cb5      	adds	r5, r6, #2
   b998e:	2b00      	cmp	r3, #0
   b9990:	d05b      	beq.n	b9a4a <_strtol_l.constprop.0+0xf6>
   b9992:	2b10      	cmp	r3, #16
   b9994:	d109      	bne.n	b99aa <_strtol_l.constprop.0+0x56>
   b9996:	2c30      	cmp	r4, #48	; 0x30
   b9998:	d107      	bne.n	b99aa <_strtol_l.constprop.0+0x56>
   b999a:	782c      	ldrb	r4, [r5, #0]
   b999c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b99a0:	2c58      	cmp	r4, #88	; 0x58
   b99a2:	d14d      	bne.n	b9a40 <_strtol_l.constprop.0+0xec>
   b99a4:	786c      	ldrb	r4, [r5, #1]
   b99a6:	2310      	movs	r3, #16
   b99a8:	3502      	adds	r5, #2
   b99aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b99ae:	f108 38ff 	add.w	r8, r8, #4294967295
   b99b2:	f04f 0c00 	mov.w	ip, #0
   b99b6:	fbb8 f9f3 	udiv	r9, r8, r3
   b99ba:	4666      	mov	r6, ip
   b99bc:	fb03 8a19 	mls	sl, r3, r9, r8
   b99c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b99c4:	f1be 0f09 	cmp.w	lr, #9
   b99c8:	d816      	bhi.n	b99f8 <_strtol_l.constprop.0+0xa4>
   b99ca:	4674      	mov	r4, lr
   b99cc:	42a3      	cmp	r3, r4
   b99ce:	dd24      	ble.n	b9a1a <_strtol_l.constprop.0+0xc6>
   b99d0:	f1bc 0f00 	cmp.w	ip, #0
   b99d4:	db1e      	blt.n	b9a14 <_strtol_l.constprop.0+0xc0>
   b99d6:	45b1      	cmp	r9, r6
   b99d8:	d31c      	bcc.n	b9a14 <_strtol_l.constprop.0+0xc0>
   b99da:	d101      	bne.n	b99e0 <_strtol_l.constprop.0+0x8c>
   b99dc:	45a2      	cmp	sl, r4
   b99de:	db19      	blt.n	b9a14 <_strtol_l.constprop.0+0xc0>
   b99e0:	fb06 4603 	mla	r6, r6, r3, r4
   b99e4:	f04f 0c01 	mov.w	ip, #1
   b99e8:	f815 4b01 	ldrb.w	r4, [r5], #1
   b99ec:	e7e8      	b.n	b99c0 <_strtol_l.constprop.0+0x6c>
   b99ee:	2c2b      	cmp	r4, #43	; 0x2b
   b99f0:	bf04      	itt	eq
   b99f2:	782c      	ldrbeq	r4, [r5, #0]
   b99f4:	1cb5      	addeq	r5, r6, #2
   b99f6:	e7ca      	b.n	b998e <_strtol_l.constprop.0+0x3a>
   b99f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b99fc:	f1be 0f19 	cmp.w	lr, #25
   b9a00:	d801      	bhi.n	b9a06 <_strtol_l.constprop.0+0xb2>
   b9a02:	3c37      	subs	r4, #55	; 0x37
   b9a04:	e7e2      	b.n	b99cc <_strtol_l.constprop.0+0x78>
   b9a06:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9a0a:	f1be 0f19 	cmp.w	lr, #25
   b9a0e:	d804      	bhi.n	b9a1a <_strtol_l.constprop.0+0xc6>
   b9a10:	3c57      	subs	r4, #87	; 0x57
   b9a12:	e7db      	b.n	b99cc <_strtol_l.constprop.0+0x78>
   b9a14:	f04f 3cff 	mov.w	ip, #4294967295
   b9a18:	e7e6      	b.n	b99e8 <_strtol_l.constprop.0+0x94>
   b9a1a:	f1bc 0f00 	cmp.w	ip, #0
   b9a1e:	da05      	bge.n	b9a2c <_strtol_l.constprop.0+0xd8>
   b9a20:	2322      	movs	r3, #34	; 0x22
   b9a22:	6003      	str	r3, [r0, #0]
   b9a24:	4646      	mov	r6, r8
   b9a26:	b942      	cbnz	r2, b9a3a <_strtol_l.constprop.0+0xe6>
   b9a28:	4630      	mov	r0, r6
   b9a2a:	e79e      	b.n	b996a <_strtol_l.constprop.0+0x16>
   b9a2c:	b107      	cbz	r7, b9a30 <_strtol_l.constprop.0+0xdc>
   b9a2e:	4276      	negs	r6, r6
   b9a30:	2a00      	cmp	r2, #0
   b9a32:	d0f9      	beq.n	b9a28 <_strtol_l.constprop.0+0xd4>
   b9a34:	f1bc 0f00 	cmp.w	ip, #0
   b9a38:	d000      	beq.n	b9a3c <_strtol_l.constprop.0+0xe8>
   b9a3a:	1e69      	subs	r1, r5, #1
   b9a3c:	6011      	str	r1, [r2, #0]
   b9a3e:	e7f3      	b.n	b9a28 <_strtol_l.constprop.0+0xd4>
   b9a40:	2430      	movs	r4, #48	; 0x30
   b9a42:	2b00      	cmp	r3, #0
   b9a44:	d1b1      	bne.n	b99aa <_strtol_l.constprop.0+0x56>
   b9a46:	2308      	movs	r3, #8
   b9a48:	e7af      	b.n	b99aa <_strtol_l.constprop.0+0x56>
   b9a4a:	2c30      	cmp	r4, #48	; 0x30
   b9a4c:	d0a5      	beq.n	b999a <_strtol_l.constprop.0+0x46>
   b9a4e:	230a      	movs	r3, #10
   b9a50:	e7ab      	b.n	b99aa <_strtol_l.constprop.0+0x56>
   b9a52:	bf00      	nop
   b9a54:	000ba09b 	.word	0x000ba09b

000b9a58 <strtol>:
   b9a58:	4613      	mov	r3, r2
   b9a5a:	460a      	mov	r2, r1
   b9a5c:	4601      	mov	r1, r0
   b9a5e:	4802      	ldr	r0, [pc, #8]	; (b9a68 <strtol+0x10>)
   b9a60:	6800      	ldr	r0, [r0, #0]
   b9a62:	f7ff bf77 	b.w	b9954 <_strtol_l.constprop.0>
   b9a66:	bf00      	nop
   b9a68:	2003dd44 	.word	0x2003dd44

000b9a6c <__register_exitproc>:
   b9a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9a70:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9b2c <__register_exitproc+0xc0>
   b9a74:	4606      	mov	r6, r0
   b9a76:	f8d8 0000 	ldr.w	r0, [r8]
   b9a7a:	461f      	mov	r7, r3
   b9a7c:	460d      	mov	r5, r1
   b9a7e:	4691      	mov	r9, r2
   b9a80:	f000 f856 	bl	b9b30 <__retarget_lock_acquire_recursive>
   b9a84:	4b25      	ldr	r3, [pc, #148]	; (b9b1c <__register_exitproc+0xb0>)
   b9a86:	681c      	ldr	r4, [r3, #0]
   b9a88:	b934      	cbnz	r4, b9a98 <__register_exitproc+0x2c>
   b9a8a:	4c25      	ldr	r4, [pc, #148]	; (b9b20 <__register_exitproc+0xb4>)
   b9a8c:	601c      	str	r4, [r3, #0]
   b9a8e:	4b25      	ldr	r3, [pc, #148]	; (b9b24 <__register_exitproc+0xb8>)
   b9a90:	b113      	cbz	r3, b9a98 <__register_exitproc+0x2c>
   b9a92:	681b      	ldr	r3, [r3, #0]
   b9a94:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9a98:	6863      	ldr	r3, [r4, #4]
   b9a9a:	2b1f      	cmp	r3, #31
   b9a9c:	dd07      	ble.n	b9aae <__register_exitproc+0x42>
   b9a9e:	f8d8 0000 	ldr.w	r0, [r8]
   b9aa2:	f000 f847 	bl	b9b34 <__retarget_lock_release_recursive>
   b9aa6:	f04f 30ff 	mov.w	r0, #4294967295
   b9aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9aae:	b34e      	cbz	r6, b9b04 <__register_exitproc+0x98>
   b9ab0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9ab4:	b988      	cbnz	r0, b9ada <__register_exitproc+0x6e>
   b9ab6:	4b1c      	ldr	r3, [pc, #112]	; (b9b28 <__register_exitproc+0xbc>)
   b9ab8:	b923      	cbnz	r3, b9ac4 <__register_exitproc+0x58>
   b9aba:	f8d8 0000 	ldr.w	r0, [r8]
   b9abe:	f000 f838 	bl	b9b32 <__retarget_lock_release>
   b9ac2:	e7f0      	b.n	b9aa6 <__register_exitproc+0x3a>
   b9ac4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9ac8:	f7fc fd12 	bl	b64f0 <malloc>
   b9acc:	2800      	cmp	r0, #0
   b9ace:	d0f4      	beq.n	b9aba <__register_exitproc+0x4e>
   b9ad0:	2300      	movs	r3, #0
   b9ad2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9ad6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9ada:	6863      	ldr	r3, [r4, #4]
   b9adc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9ae0:	2201      	movs	r2, #1
   b9ae2:	409a      	lsls	r2, r3
   b9ae4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9ae8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9aec:	4313      	orrs	r3, r2
   b9aee:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9af2:	2e02      	cmp	r6, #2
   b9af4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9af8:	bf02      	ittt	eq
   b9afa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9afe:	4313      	orreq	r3, r2
   b9b00:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9b04:	6863      	ldr	r3, [r4, #4]
   b9b06:	f8d8 0000 	ldr.w	r0, [r8]
   b9b0a:	1c5a      	adds	r2, r3, #1
   b9b0c:	3302      	adds	r3, #2
   b9b0e:	6062      	str	r2, [r4, #4]
   b9b10:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9b14:	f000 f80e 	bl	b9b34 <__retarget_lock_release_recursive>
   b9b18:	2000      	movs	r0, #0
   b9b1a:	e7c6      	b.n	b9aaa <__register_exitproc+0x3e>
   b9b1c:	2003e7e8 	.word	0x2003e7e8
   b9b20:	2003e75c 	.word	0x2003e75c
   b9b24:	00000000 	.word	0x00000000
   b9b28:	000b64f1 	.word	0x000b64f1
   b9b2c:	2003dda8 	.word	0x2003dda8

000b9b30 <__retarget_lock_acquire_recursive>:
   b9b30:	4770      	bx	lr

000b9b32 <__retarget_lock_release>:
   b9b32:	4770      	bx	lr

000b9b34 <__retarget_lock_release_recursive>:
   b9b34:	4770      	bx	lr

000b9b36 <link_code_end>:
	...

000b9b38 <dynalib_user>:
   b9b38:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b9b48:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9b58:	7620 7269 7574 6c61 6400 6665 7561 746c      virtual.default
   b9b68:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   b9b78:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   b9b88:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   b9b98:	2075 7325 4d20 444f 2545 3e75 4d00 7861     u %s MODE%u>.Max
   b9ba8:	6f62 6974 2078 6554 7473 5300 656c 7065     botix Test.Sleep
   b9bb8:	6e69 2067 6f66 2072 6925 2500 696c 252c     ing for %i.%li,%
   b9bc8:	352e 2c66 2e25 3230 2c66 2e25 3230 0066     .5f,%.02f,%.02f.
   b9bd8:	6166 6c69 6465 7420 206f 706f 6e65 6320     failed to open c
   b9be8:	7261 0064 6964 7473 6e61 6563 632e 7673     ard.distance.csv
   b9bf8:	6f00 6570 696e 676e 6420 7369 6174 636e     .opening distanc
   b9c08:	2e65 7363 2076 6f66 2072 7277 7469 2065     e.csv for write 
   b9c18:	6166 6c69 6465 5400 7972 6e69 2067 6f74     failed.Trying to
   b9c28:	6320 6e6f 656e 7463 7000 6275 696c 6873      connect.publish
   b9c38:	6e69 2067 6164 6174 7000 6275 696c 6873     ing data.publish
   b9c48:	7220 7365 6c75 2074 6425 6d00 7861 7420      result %d.max t
   b9c58:	6d69 2065 6f66 2072 7570 6c62 7369 6968     ime for publishi
   b9c68:	676e 7220 6165 6863 6465 7720 7469 6f68     ng reached witho
   b9c78:	7475 7320 6375 6563 7373 203b 6f67 7420     ut success; go t
   b9c88:	206f 6c73 6565 0070 6f4e 2074 616d 2078     o sleep.Not max 
   b9c98:	6974 656d 202c 7274 2079 6761 6961 206e     time, try again 
   b9ca8:	6f74 6320 6e6f 656e 7463 6120 646e 7020     to connect and p
   b9cb8:	6275 696c 6873 6700 696f 676e 7420 206f     ublish.going to 
   b9cc8:	6c73 6565 0070 6546 6c65 6e69 2067 6572     sleep.Feeling re
   b9cd8:	7473 656c 7373 0000                         stless..

000b9ce0 <_ZTVN8particle11SPISettingsE>:
	...
   b9ce8:	41bd 000b 40c9 000b 413b 000b               .A...@..;A..

000b9cf4 <_ZTVN5spark10LogHandlerE>:
	...
   b9d04:	40a1 000b 40cb 000b                         .@...@..

000b9d0c <_ZTVN5spark16SerialLogHandlerE>:
	...
   b9d14:	4159 000b 418d 000b 7759 000b 40cd 000b     YA...A..Yw...@..

000b9d24 <_ZTV4File>:
	...
   b9d2c:	40ef 000b 4149 000b 4123 000b 411d 000b     .@..IA..#A...A..
   b9d3c:	40d5 000b 40fd 000b 40f7 000b 40f1 000b     .@...@...@...@..
   b9d4c:	6177 6574 4c72 7665 6c65 0000               waterLevel..

000b9d58 <_ZTVN5spark13EthernetClassE>:
	...
   b9d60:	65ef 000b 65e5 000b 65db 000b 65d1 000b     .e...e...e...e..
   b9d70:	65c5 000b 65b9 000b 87d3 000b 87db 000b     .e...e..........
   b9d80:	65ad 000b 65a5 000b 659b 000b 6591 000b     .e...e...e...e..
   b9d90:	880b 000b                                   ....

000b9d94 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9d94:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   b9da4:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   b9db4:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   b9dc4:	6c61 6469 002e 6162 6475 5300 7265 6169     alid..baud.Seria
   b9dd4:	006c 6553 6972 6c61 0031 534a 4e4f 7453     l.Serial1.JSONSt
   b9de4:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   b9df4:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   b9e04:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   b9e14:	6564 6174 6c69 2073 203d 0d00 000a 006d     details = ....m.
   b9e24:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   b9e34:	006c 0000                                   l...

000b9e38 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b9e40:	6ba5 000b 6bcb 000b 6b89 000b 8927 000b     .k...k...k..'...

000b9e50 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b9e58:	7001 000b 7019 000b 7759 000b 40cd 000b     .p...p..Yw...@..

000b9e68 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b9e70:	702d 000b 7041 000b 78fd 000b 6b91 000b     -p..Ap...x...k..

000b9e80 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b9e88:	6ba3 000b 6bd9 000b 76bd 000b 6b93 000b     .k...k...v...k..

000b9e98 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b9ea0:	6ba1 000b 6be7 000b 6f69 000b 6c09 000b     .k...k..io...l..
   b9eb0:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b9ec0:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b9ecc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9ed4:	7dcd 000b 7dd3 000b 7e11 000b 7de1 000b     .}...}...~...}..
   b9ee4:	7dcf 000b                                   .}..

000b9ee8 <_ZTV9IPAddress>:
	...
   b9ef0:	830d 000b 82fd 000b 82ff 000b               ............

000b9efc <_ZTV9USBSerial>:
	...
   b9f04:	83f3 000b 845b 000b 8431 000b 6a99 000b     ....[...1....j..
   b9f14:	8423 000b 83f5 000b 8405 000b 8455 000b     #...........U...
   b9f24:	8415 000b 83ed 000b                         ........

000b9f2c <_ZTVN5spark13CellularClassE>:
	...
   b9f34:	855b 000b 8551 000b 8547 000b 84fd 000b     [...Q...G.......
   b9f44:	853b 000b 852f 000b 87d3 000b 87db 000b     ;.../...........
   b9f54:	8523 000b 851b 000b 8511 000b 8507 000b     #...............
   b9f64:	880b 000b                                   ....

000b9f68 <_ZTV11USARTSerial>:
	...
   b9f70:	8595 000b 8601 000b 85d9 000b 6a99 000b     .............j..
   b9f80:	85a9 000b 85c5 000b 85b7 000b 85d3 000b     ................
   b9f90:	8597 000b 859b 000b                         ........

000b9f98 <_ZTV7TwoWire>:
	...
   b9fa0:	8675 000b 86bf 000b 8697 000b 8677 000b     u...........w...
   b9fb0:	869f 000b 86a7 000b 86af 000b 86b7 000b     ................

000b9fc0 <_ZTVN5spark12NetworkClassE>:
	...
   b9fc8:	8793 000b 879d 000b 87a7 000b 87b1 000b     ................
   b9fd8:	87bb 000b 87c7 000b 87d3 000b 87db 000b     ................
   b9fe8:	87e3 000b 87ef 000b 87f7 000b 8801 000b     ................
   b9ff8:	880b 000b 7525 7500 3025 7834                ....%u.u%04x.

000ba005 <_ZSt7nothrow>:
   ba005:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   ba015:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   ba025:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   ba035:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   ba045:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   ba055:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   ba065:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   ba075:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   ba085:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   ba095:	646e 632e                                    nd.c.

000ba09a <_ctype_>:
   ba09a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba0aa:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba0ba:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba0ca:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba0da:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba0ea:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba0fa:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba10a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba11a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ba19b <link_const_variable_data_end>:
	...

000ba19c <link_constructors_location>:
   ba19c:	000b47f9 	.word	0x000b47f9
   ba1a0:	000b65f9 	.word	0x000b65f9
   ba1a4:	000b68b5 	.word	0x000b68b5
   ba1a8:	000b6a89 	.word	0x000b6a89
   ba1ac:	000b7749 	.word	0x000b7749
   ba1b0:	000b7ae5 	.word	0x000b7ae5
   ba1b4:	000b7b01 	.word	0x000b7b01
   ba1b8:	000b8565 	.word	0x000b8565
   ba1bc:	000b88e5 	.word	0x000b88e5
