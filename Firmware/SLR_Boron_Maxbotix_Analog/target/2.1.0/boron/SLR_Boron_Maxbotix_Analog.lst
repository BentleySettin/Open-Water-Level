
/Users/pjb/Dropbox/Particle_Projects/Seaport_SLR_Observation/Seaport_Tide-SLR_Maxbotix_Arduino/Firmware/SLR_Boron_Maxbotix_Analog/target/2.1.0/boron/SLR_Boron_Maxbotix_Analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002f80  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6fa0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e1c8  000d6fa4  0001e1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005bc  2003e234  2003e234  0002e234  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7010  000d7010  00027010  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7038  000d7038  00027038  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001702b2  00000000  00000000  0002703c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00017516  00000000  00000000  001972ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002a5d1  00000000  00000000  001ae804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000026c8  00000000  00000000  001d8dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007958  00000000  00000000  001db49d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a85b  00000000  00000000  001e2df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000392e3  00000000  00000000  0021d650  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00111f05  00000000  00000000  00256933  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006aa0  00000000  00000000  00368838  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fdb5 	bl	d6ba0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fdbd 	bl	d6bbc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1c8 	.word	0x2003e1c8
   d404c:	000d6fa4 	.word	0x000d6fa4
   d4050:	2003e234 	.word	0x2003e234
   d4054:	2003e234 	.word	0x2003e234
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 ff75 	bl	d5f50 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d6f70 	.word	0x000d6f70
   d4080:	000d6f94 	.word	0x000d6f94

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b89e 	b.w	d41c4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8b1 	bl	d41f0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bf1f 	b.w	d5ed4 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 bcfb 	b.w	d4a90 <malloc>

000d409a <_Znaj>:
   d409a:	f000 bcf9 	b.w	d4a90 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f000 bcff 	b.w	d4aa0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40b2:	4770      	bx	lr

000d40b4 <_ZN5SdFatD1Ev>:
//==============================================================================
/**
 * \class SdFat
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFileSystem<SdSpiCard> {
   d40b4:	4770      	bx	lr

000d40b6 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40b6:	b538      	push	{r3, r4, r5, lr}
   d40b8:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40ba:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40bc:	b128      	cbz	r0, d40ca <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40be:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40c0:	210c      	movs	r1, #12
   d40c2:	f002 f852 	bl	d616a <_ZdlPvj>
            wakeupSource = next;
   d40c6:	4628      	mov	r0, r5
        while (wakeupSource) {
   d40c8:	e7f8      	b.n	d40bc <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d40ca:	4620      	mov	r0, r4
   d40cc:	bd38      	pop	{r3, r4, r5, pc}

000d40ce <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d40ce:	b510      	push	{r4, lr}
  }
   d40d0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d40d2:	4604      	mov	r4, r0
  }
   d40d4:	f002 f849 	bl	d616a <_ZdlPvj>
   d40d8:	4620      	mov	r0, r4
   d40da:	bd10      	pop	{r4, pc}

000d40dc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40dc:	b510      	push	{r4, lr}
   d40de:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40e0:	6800      	ldr	r0, [r0, #0]
   d40e2:	b108      	cbz	r0, d40e8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40e4:	f000 fcdc 	bl	d4aa0 <free>
class SystemClass {
   d40e8:	4620      	mov	r0, r4
   d40ea:	bd10      	pop	{r4, pc}

000d40ec <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ec:	b40e      	push	{r1, r2, r3}
   d40ee:	b503      	push	{r0, r1, lr}
   d40f0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40f2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40f4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40f8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40fa:	f001 fc5e 	bl	d59ba <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40fe:	b002      	add	sp, #8
   d4100:	f85d eb04 	ldr.w	lr, [sp], #4
   d4104:	b003      	add	sp, #12
   d4106:	4770      	bx	lr

000d4108 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4108:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d410a:	4604      	mov	r4, r0
   d410c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d410e:	7922      	ldrb	r2, [r4, #4]
   d4110:	68a3      	ldr	r3, [r4, #8]
   d4112:	b132      	cbz	r2, d4122 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4114:	b9a3      	cbnz	r3, d4140 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4116:	490b      	ldr	r1, [pc, #44]	; (d4144 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4118:	b002      	add	sp, #8
   d411a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d411e:	f001 bb1f 	b.w	d5760 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4122:	4a09      	ldr	r2, [pc, #36]	; (d4148 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4124:	7b26      	ldrb	r6, [r4, #12]
   d4126:	4d09      	ldr	r5, [pc, #36]	; (d414c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4128:	4909      	ldr	r1, [pc, #36]	; (d4150 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d412a:	7b64      	ldrb	r4, [r4, #13]
   d412c:	2e01      	cmp	r6, #1
   d412e:	bf18      	it	ne
   d4130:	4629      	movne	r1, r5
   d4132:	e9cd 1400 	strd	r1, r4, [sp]
   d4136:	4907      	ldr	r1, [pc, #28]	; (d4154 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4138:	f7ff ffd8 	bl	d40ec <_ZN5Print6printfEPKcz>
  }
   d413c:	b002      	add	sp, #8
   d413e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4140:	4a05      	ldr	r2, [pc, #20]	; (d4158 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4142:	e7ef      	b.n	d4124 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4144:	000d6c85 	.word	0x000d6c85
   d4148:	000d6c7c 	.word	0x000d6c7c
   d414c:	000d6c81 	.word	0x000d6c81
   d4150:	000d6c7d 	.word	0x000d6c7d
   d4154:	000d6c9b 	.word	0x000d6c9b
   d4158:	000d6c74 	.word	0x000d6c74

000d415c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d415e:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4160:	4605      	mov	r5, r0
   d4162:	460f      	mov	r7, r1
   d4164:	4616      	mov	r6, r2
        if (valid_) {
   d4166:	b18b      	cbz	r3, d418c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4168:	6803      	ldr	r3, [r0, #0]
   d416a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d416c:	b183      	cbz	r3, d4190 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d416e:	889a      	ldrh	r2, [r3, #4]
   d4170:	2a01      	cmp	r2, #1
   d4172:	d006      	beq.n	d4182 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d4174:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4176:	e7f9      	b.n	d416c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4178:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d417a:	b14b      	cbz	r3, d4190 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d417c:	889a      	ldrh	r2, [r3, #4]
   d417e:	2a01      	cmp	r2, #1
   d4180:	d1fa      	bne.n	d4178 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d4182:	b12b      	cbz	r3, d4190 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4184:	899a      	ldrh	r2, [r3, #12]
   d4186:	42ba      	cmp	r2, r7
   d4188:	d1f6      	bne.n	d4178 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d418a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d418c:	4628      	mov	r0, r5
   d418e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4190:	490a      	ldr	r1, [pc, #40]	; (d41bc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4192:	2010      	movs	r0, #16
   d4194:	f001 ffeb 	bl	d616e <_ZnwjRKSt9nothrow_t>
   d4198:	4604      	mov	r4, r0
   d419a:	b168      	cbz	r0, d41b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d419c:	2210      	movs	r2, #16
   d419e:	2100      	movs	r1, #0
   d41a0:	f002 fd0c 	bl	d6bbc <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d41a4:	4b06      	ldr	r3, [pc, #24]	; (d41c0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d41a6:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d41a8:	2301      	movs	r3, #1
   d41aa:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41ac:	692b      	ldr	r3, [r5, #16]
   d41ae:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d41b0:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d41b2:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41b4:	612c      	str	r4, [r5, #16]
   d41b6:	e7e9      	b.n	d418c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d41b8:	7528      	strb	r0, [r5, #20]
                return *this;
   d41ba:	e7e7      	b.n	d418c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d41bc:	000d6f6c 	.word	0x000d6f6c
   d41c0:	00030010 	.word	0x00030010

000d41c4 <setup>:
// Various timing constants
const unsigned long MAX_TIME_TO_PUBLISH_MS = 60000; // Only stay awake for 60 seconds trying to connect to the cloud and publish
const unsigned long TIME_AFTER_PUBLISH_MS = 4000; // After publish, wait 4 seconds for data to go out

void setup(void)
{
   d41c4:	b508      	push	{r3, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d41c6:	f000 fbdb 	bl	d4980 <spark_cloud_flag_connect>
  Particle.connect();
  // Cellular.off(); turn off cellular for prelim testing (uncomment)

  delay(5000); // to see response from begin command
   d41ca:	f241 3088 	movw	r0, #5000	; 0x1388
   d41ce:	f000 fc97 	bl	d4b00 <delay>

  Serial.begin(9600);
   d41d2:	f001 fe33 	bl	d5e3c <_Z16_fetch_usbserialv>
   d41d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41da:	f001 fe23 	bl	d5e24 <_ZN9USBSerial5beginEl>
  Serial.println("Maxbotix Test");
   d41de:	f001 fe2d 	bl	d5e3c <_Z16_fetch_usbserialv>

}
   d41e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("Maxbotix Test");
   d41e6:	4901      	ldr	r1, [pc, #4]	; (d41ec <setup+0x28>)
   d41e8:	f001 bacd 	b.w	d5786 <_ZN5Print7printlnEPKc>
   d41ec:	000d6cb8 	.word	0x000d6cb8

000d41f0 <loop>:

void loop(void)
{
   d41f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // Enter state machine
  switch(state) {
   d41f4:	4daa      	ldr	r5, [pc, #680]	; (d44a0 <loop+0x2b0>)
{
   d41f6:	ed2d 8b02 	vpush	{d8}
  switch(state) {
   d41fa:	782b      	ldrb	r3, [r5, #0]
{
   d41fc:	b0a8      	sub	sp, #160	; 0xa0
  switch(state) {
   d41fe:	b13b      	cbz	r3, d4210 <loop+0x20>
   d4200:	2b01      	cmp	r3, #1
   d4202:	f000 80fa 	beq.w	d43fa <loop+0x20a>
  }
  break;

  }

}
   d4206:	b028      	add	sp, #160	; 0xa0
   d4208:	ecbd 8b02 	vpop	{d8}
   d420c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dist_in_sum = 0; 
   d4210:	4ca4      	ldr	r4, [pc, #656]	; (d44a4 <loop+0x2b4>)
   d4212:	2200      	movs	r2, #0
   d4214:	6022      	str	r2, [r4, #0]
      float range_V = (float)range_cts*(3.3/1024); // counts*(V/counts) = V (NB: SAMD21's ADC is configured to 10-bit resolution)
   d4216:	f20f 2978 	addw	r9, pc, #632	; 0x278
   d421a:	e9d9 8900 	ldrd	r8, r9, [r9]
    for(j=0; j<100; j++){
   d421e:	4aa2      	ldr	r2, [pc, #648]	; (d44a8 <loop+0x2b8>)
      float range_in = range_V*(512/3.3); // V*(in/V) = in (NB: in/V conversion factor comes from datasheet)
   d4220:	a79d      	add	r7, pc, #628	; (adr r7, d4498 <loop+0x2a8>)
   d4222:	e9d7 6700 	ldrd	r6, r7, [r7]
    for(j=0; j<100; j++){
   d4226:	6013      	str	r3, [r2, #0]
   d4228:	4692      	mov	sl, r2
   d422a:	f8da 3000 	ldr.w	r3, [sl]
   d422e:	2b63      	cmp	r3, #99	; 0x63
   d4230:	dc30      	bgt.n	d4294 <loop+0xa4>
      int range_cts = analogRead(A1);    //read signal on pin A1 and assign to variable: range_cts
   d4232:	2012      	movs	r0, #18
   d4234:	f001 fefc 	bl	d6030 <analogRead>
      float range_V = (float)range_cts*(3.3/1024); // counts*(V/counts) = V (NB: SAMD21's ADC is configured to 10-bit resolution)
   d4238:	ee07 0a90 	vmov	s15, r0
   d423c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4240:	ee17 0a90 	vmov	r0, s15
   d4244:	f002 f8fe 	bl	d6444 <__aeabi_f2d>
   d4248:	4642      	mov	r2, r8
   d424a:	464b      	mov	r3, r9
   d424c:	f002 f952 	bl	d64f4 <__aeabi_dmul>
   d4250:	f002 fc48 	bl	d6ae4 <__aeabi_d2f>
      float range_in = range_V*(512/3.3); // V*(in/V) = in (NB: in/V conversion factor comes from datasheet)
   d4254:	f002 f8f6 	bl	d6444 <__aeabi_f2d>
   d4258:	463b      	mov	r3, r7
   d425a:	4632      	mov	r2, r6
   d425c:	f002 f94a 	bl	d64f4 <__aeabi_dmul>
   d4260:	f002 fc40 	bl	d6ae4 <__aeabi_d2f>
      dist_in_sum += range_in;
   d4264:	edd4 7a00 	vldr	s15, [r4]
      float range_in = range_V*(512/3.3); // V*(in/V) = in (NB: in/V conversion factor comes from datasheet)
   d4268:	ee08 0a10 	vmov	s16, r0
      dist_in_sum += range_in;
   d426c:	ee77 7a88 	vadd.f32	s15, s15, s16
   d4270:	edc4 7a00 	vstr	s15, [r4]
      Serial.println(range_in);
   d4274:	f001 fde2 	bl	d5e3c <_Z16_fetch_usbserialv>
   d4278:	2102      	movs	r1, #2
   d427a:	eeb0 0a48 	vmov.f32	s0, s16
   d427e:	f001 fb8d 	bl	d599c <_ZN5Print7printlnEfi>
      delay(100);
   d4282:	2064      	movs	r0, #100	; 0x64
   d4284:	f000 fc3c 	bl	d4b00 <delay>
    for(j=0; j<100; j++){
   d4288:	f8da 3000 	ldr.w	r3, [sl]
   d428c:	3301      	adds	r3, #1
   d428e:	f8ca 3000 	str.w	r3, [sl]
   d4292:	e7ca      	b.n	d422a <loop+0x3a>
    dist_in_avg = dist_in_sum/j;
   d4294:	ee07 3a90 	vmov	s15, r3
   d4298:	edd4 6a00 	vldr	s13, [r4]
   d429c:	4f83      	ldr	r7, [pc, #524]	; (d44ac <loop+0x2bc>)
   d429e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d42a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d42a6:	ed87 7a00 	vstr	s14, [r7]
    Serial.print(j);
   d42aa:	f001 fdc7 	bl	d5e3c <_Z16_fetch_usbserialv>
   d42ae:	f8da 6000 	ldr.w	r6, [sl]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d42b2:	2e00      	cmp	r6, #0
   d42b4:	4680      	mov	r8, r0
   d42b6:	f280 8084 	bge.w	d43c2 <loop+0x1d2>
            t = print('-');
   d42ba:	212d      	movs	r1, #45	; 0x2d
   d42bc:	f001 fa54 	bl	d5768 <_ZN5Print5printEc>
            val = -n;
   d42c0:	4271      	negs	r1, r6
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d42c2:	220a      	movs	r2, #10
   d42c4:	4640      	mov	r0, r8
   d42c6:	f001 fa68 	bl	d579a <_ZN5Print11printNumberEmh>
    Serial.print(",");
   d42ca:	f001 fdb7 	bl	d5e3c <_Z16_fetch_usbserialv>
   d42ce:	4978      	ldr	r1, [pc, #480]	; (d44b0 <loop+0x2c0>)
    stateTime = millis();
   d42d0:	4e78      	ldr	r6, [pc, #480]	; (d44b4 <loop+0x2c4>)
        Serial.print("Trying to connect");
   d42d2:	f8df 9210 	ldr.w	r9, [pc, #528]	; d44e4 <loop+0x2f4>
          Serial.println("max time for publishing reached without success; go to sleep");
   d42d6:	f8df a210 	ldr.w	sl, [pc, #528]	; d44e8 <loop+0x2f8>
        Serial.println("Not max time, try again to publish");
   d42da:	f8df 8210 	ldr.w	r8, [pc, #528]	; d44ec <loop+0x2fc>
    Serial.print(",");
   d42de:	f001 fa3f 	bl	d5760 <_ZN5Print5printEPKc>
    Serial.print(dist_in_sum);
   d42e2:	f001 fdab 	bl	d5e3c <_Z16_fetch_usbserialv>
   d42e6:	ed94 0a00 	vldr	s0, [r4]
   d42ea:	2102      	movs	r1, #2
   d42ec:	f001 fb3c 	bl	d5968 <_ZN5Print5printEfi>
    Serial.print(",");
   d42f0:	f001 fda4 	bl	d5e3c <_Z16_fetch_usbserialv>
   d42f4:	496e      	ldr	r1, [pc, #440]	; (d44b0 <loop+0x2c0>)
   d42f6:	f001 fa33 	bl	d5760 <_ZN5Print5printEPKc>
    Serial.println(dist_in_avg);
   d42fa:	f001 fd9f 	bl	d5e3c <_Z16_fetch_usbserialv>
   d42fe:	ed97 0a00 	vldr	s0, [r7]
   d4302:	2102      	movs	r1, #2
   d4304:	f001 fb4a 	bl	d599c <_ZN5Print7printlnEfi>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4308:	f000 f9ac 	bl	d4664 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d430c:	6030      	str	r0, [r6, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d430e:	f000 fb3f 	bl	d4990 <spark_cloud_flag_connected>
      if (Particle.connected() == false)
   d4312:	b930      	cbnz	r0, d4322 <loop+0x132>
        spark_cloud_flag_connect();
   d4314:	f000 fb34 	bl	d4980 <spark_cloud_flag_connect>
        Serial.print("Trying to connect");
   d4318:	f001 fd90 	bl	d5e3c <_Z16_fetch_usbserialv>
   d431c:	4649      	mov	r1, r9
   d431e:	f001 fa1f 	bl	d5760 <_ZN5Print5printEPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4322:	f000 fb35 	bl	d4990 <spark_cloud_flag_connected>
      if (Particle.connected())
   d4326:	4604      	mov	r4, r0
   d4328:	2800      	cmp	r0, #0
   d432a:	d04c      	beq.n	d43c6 <loop+0x1d6>
        float cellVoltage = batteryMonitor.getVCell();
   d432c:	4862      	ldr	r0, [pc, #392]	; (d44b8 <loop+0x2c8>)
   d432e:	f000 ffef 	bl	d5310 <_ZN9FuelGauge8getVCellEv>
        float stateOfCharge = batteryMonitor.getSoC();
   d4332:	4861      	ldr	r0, [pc, #388]	; (d44b8 <loop+0x2c8>)
        float cellVoltage = batteryMonitor.getVCell();
   d4334:	ee10 4a10 	vmov	r4, s0
        float stateOfCharge = batteryMonitor.getSoC();
   d4338:	f001 f806 	bl	d5348 <_ZN9FuelGauge6getSoCEv>
   d433c:	ee10 6a10 	vmov	r6, s0
        snprintf(data, sizeof(data), "%li,%.5f,%.02f,%.02f",//,%.5f,%.5f,%.5f,%.5f,%.5f,%.02f,%.02f",
   d4340:	f001 fc6c 	bl	d5c1c <_ZN9TimeClass3nowEv>
   d4344:	9007      	str	r0, [sp, #28]
   d4346:	4630      	mov	r0, r6
   d4348:	f002 f87c 	bl	d6444 <__aeabi_f2d>
   d434c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4350:	4620      	mov	r0, r4
   d4352:	f002 f877 	bl	d6444 <__aeabi_f2d>
   d4356:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d435a:	6838      	ldr	r0, [r7, #0]
   d435c:	f002 f872 	bl	d6444 <__aeabi_f2d>
   d4360:	9b07      	ldr	r3, [sp, #28]
   d4362:	4a56      	ldr	r2, [pc, #344]	; (d44bc <loop+0x2cc>)
   d4364:	e9cd 0100 	strd	r0, r1, [sp]
   d4368:	2178      	movs	r1, #120	; 0x78
   d436a:	a80a      	add	r0, sp, #40	; 0x28
   d436c:	f000 fba0 	bl	d4ab0 <snprintf>
        Serial.println("publishing data");
   d4370:	f001 fd64 	bl	d5e3c <_Z16_fetch_usbserialv>
   d4374:	4952      	ldr	r1, [pc, #328]	; (d44c0 <loop+0x2d0>)
   d4376:	f001 fa06 	bl	d5786 <_ZN5Print7printlnEPKc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d437a:	4b52      	ldr	r3, [pc, #328]	; (d44c4 <loop+0x2d4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d437c:	4952      	ldr	r1, [pc, #328]	; (d44c8 <loop+0x2d8>)
   d437e:	781b      	ldrb	r3, [r3, #0]
   d4380:	f88d 3000 	strb.w	r3, [sp]
   d4384:	6809      	ldr	r1, [r1, #0]
   d4386:	233c      	movs	r3, #60	; 0x3c
   d4388:	aa0a      	add	r2, sp, #40	; 0x28
   d438a:	a808      	add	r0, sp, #32
   d438c:	f000 fd9c 	bl	d4ec8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4390:	9c09      	ldr	r4, [sp, #36]	; 0x24
   d4392:	b17c      	cbz	r4, d43b4 <loop+0x1c4>
      if (--_M_use_count == 0)
   d4394:	6863      	ldr	r3, [r4, #4]
   d4396:	3b01      	subs	r3, #1
   d4398:	6063      	str	r3, [r4, #4]
   d439a:	b95b      	cbnz	r3, d43b4 <loop+0x1c4>
          _M_dispose();
   d439c:	6823      	ldr	r3, [r4, #0]
   d439e:	4620      	mov	r0, r4
   d43a0:	689b      	ldr	r3, [r3, #8]
   d43a2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d43a4:	68a3      	ldr	r3, [r4, #8]
   d43a6:	3b01      	subs	r3, #1
   d43a8:	60a3      	str	r3, [r4, #8]
   d43aa:	b91b      	cbnz	r3, d43b4 <loop+0x1c4>
            _M_destroy();
   d43ac:	6823      	ldr	r3, [r4, #0]
   d43ae:	4620      	mov	r0, r4
   d43b0:	68db      	ldr	r3, [r3, #12]
   d43b2:	4798      	blx	r3
        delay(TIME_AFTER_PUBLISH_MS);
   d43b4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d43b8:	f000 fba2 	bl	d4b00 <delay>
        state = SLEEP_STATE;
   d43bc:	2301      	movs	r3, #1
    state = PUBLISH_STATE;
   d43be:	702b      	strb	r3, [r5, #0]
}
   d43c0:	e721      	b.n	d4206 <loop+0x16>
            val = n;
   d43c2:	4631      	mov	r1, r6
   d43c4:	e77d      	b.n	d42c2 <loop+0xd2>
   d43c6:	f000 f94d 	bl	d4664 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS)
   d43ca:	6833      	ldr	r3, [r6, #0]
   d43cc:	1ac0      	subs	r0, r0, r3
   d43ce:	f64e 235f 	movw	r3, #59999	; 0xea5f
   d43d2:	4298      	cmp	r0, r3
   d43d4:	d906      	bls.n	d43e4 <loop+0x1f4>
          state = SLEEP_STATE;
   d43d6:	2401      	movs	r4, #1
   d43d8:	702c      	strb	r4, [r5, #0]
          Serial.println("max time for publishing reached without success; go to sleep");
   d43da:	f001 fd2f 	bl	d5e3c <_Z16_fetch_usbserialv>
   d43de:	4651      	mov	r1, sl
   d43e0:	f001 f9d1 	bl	d5786 <_ZN5Print7printlnEPKc>
        Serial.println("Not max time, try again to publish");
   d43e4:	f001 fd2a 	bl	d5e3c <_Z16_fetch_usbserialv>
   d43e8:	4641      	mov	r1, r8
   d43ea:	f001 f9cc 	bl	d5786 <_ZN5Print7printlnEPKc>
        delay(100);
   d43ee:	2064      	movs	r0, #100	; 0x64
   d43f0:	f000 fb86 	bl	d4b00 <delay>
    while(!isMaxTime)
   d43f4:	2c00      	cmp	r4, #0
   d43f6:	d08a      	beq.n	d430e <loop+0x11e>
   d43f8:	e705      	b.n	d4206 <loop+0x16>
    Serial.println("going to sleep");
   d43fa:	f001 fd1f 	bl	d5e3c <_Z16_fetch_usbserialv>
   d43fe:	4933      	ldr	r1, [pc, #204]	; (d44cc <loop+0x2dc>)
   d4400:	f001 f9c1 	bl	d5786 <_ZN5Print7printlnEPKc>
    delay(500);
   d4404:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4408:	f000 fb7a 	bl	d4b00 <delay>
        if (valid_) {
   d440c:	4b30      	ldr	r3, [pc, #192]	; (d44d0 <loop+0x2e0>)
   d440e:	7d1a      	ldrb	r2, [r3, #20]
   d4410:	b10a      	cbz	r2, d4416 <loop+0x226>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4412:	2202      	movs	r2, #2
   d4414:	721a      	strb	r2, [r3, #8]
          .gpio(D2, FALLING)
   d4416:	2202      	movs	r2, #2
   d4418:	482d      	ldr	r0, [pc, #180]	; (d44d0 <loop+0x2e0>)
   d441a:	4611      	mov	r1, r2
   d441c:	f7ff fe9e 	bl	d415c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d4420:	7d03      	ldrb	r3, [r0, #20]
   d4422:	4606      	mov	r6, r0
   d4424:	b1d3      	cbz	r3, d445c <loop+0x26c>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4426:	6803      	ldr	r3, [r0, #0]
   d4428:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d442a:	b123      	cbz	r3, d4436 <loop+0x246>
            if (start->type == type) {
   d442c:	889a      	ldrh	r2, [r3, #4]
   d442e:	2a04      	cmp	r2, #4
   d4430:	d029      	beq.n	d4486 <loop+0x296>
            start = start->next;
   d4432:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4434:	e7f9      	b.n	d442a <loop+0x23a>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4436:	4927      	ldr	r1, [pc, #156]	; (d44d4 <loop+0x2e4>)
   d4438:	2010      	movs	r0, #16
   d443a:	f001 fe98 	bl	d616e <_ZnwjRKSt9nothrow_t>
   d443e:	4604      	mov	r4, r0
   d4440:	b1f8      	cbz	r0, d4482 <loop+0x292>
   d4442:	2210      	movs	r2, #16
   d4444:	2100      	movs	r1, #0
   d4446:	f002 fbb9 	bl	d6bbc <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d444a:	4b23      	ldr	r3, [pc, #140]	; (d44d8 <loop+0x2e8>)
   d444c:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d444e:	2304      	movs	r3, #4
   d4450:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4452:	6933      	ldr	r3, [r6, #16]
   d4454:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d4456:	4b21      	ldr	r3, [pc, #132]	; (d44dc <loop+0x2ec>)
   d4458:	60e3      	str	r3, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d445a:	6134      	str	r4, [r6, #16]
    System.sleep(config);
   d445c:	a80a      	add	r0, sp, #40	; 0x28
   d445e:	491c      	ldr	r1, [pc, #112]	; (d44d0 <loop+0x2e0>)
   d4460:	f001 fb30 	bl	d5ac4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d4464:	980a      	ldr	r0, [sp, #40]	; 0x28
   d4466:	b108      	cbz	r0, d446c <loop+0x27c>
            free(wakeupSource_);
   d4468:	f000 fb1a 	bl	d4aa0 <free>
    Serial.print("Feeling restless");
   d446c:	f001 fce6 	bl	d5e3c <_Z16_fetch_usbserialv>
   d4470:	491b      	ldr	r1, [pc, #108]	; (d44e0 <loop+0x2f0>)
   d4472:	f001 f975 	bl	d5760 <_ZN5Print5printEPKc>
   d4476:	f000 f8f5 	bl	d4664 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d447a:	4b0e      	ldr	r3, [pc, #56]	; (d44b4 <loop+0x2c4>)
   d447c:	6018      	str	r0, [r3, #0]
    state = PUBLISH_STATE;
   d447e:	2300      	movs	r3, #0
   d4480:	e79d      	b.n	d43be <loop+0x1ce>
                valid_ = false;
   d4482:	7530      	strb	r0, [r6, #20]
                return *this;
   d4484:	e7ea      	b.n	d445c <loop+0x26c>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4486:	4a15      	ldr	r2, [pc, #84]	; (d44dc <loop+0x2ec>)
   d4488:	60da      	str	r2, [r3, #12]
                return *this;
   d448a:	e7e7      	b.n	d445c <loop+0x26c>
   d448c:	f3af 8000 	nop.w
   d4490:	66666666 	.word	0x66666666
   d4494:	3f6a6666 	.word	0x3f6a6666
   d4498:	364d9365 	.word	0x364d9365
   d449c:	406364d9 	.word	0x406364d9
   d44a0:	2003e708 	.word	0x2003e708
   d44a4:	2003e278 	.word	0x2003e278
   d44a8:	2003e27c 	.word	0x2003e27c
   d44ac:	2003e274 	.word	0x2003e274
   d44b0:	000d6cc6 	.word	0x000d6cc6
   d44b4:	2003e70c 	.word	0x2003e70c
   d44b8:	2003e254 	.word	0x2003e254
   d44bc:	000d6cda 	.word	0x000d6cda
   d44c0:	000d6cef 	.word	0x000d6cef
   d44c4:	2003e250 	.word	0x2003e250
   d44c8:	2003e1c8 	.word	0x2003e1c8
   d44cc:	000d6d5f 	.word	0x000d6d5f
   d44d0:	2003e25c 	.word	0x2003e25c
   d44d4:	000d6f6c 	.word	0x000d6f6c
   d44d8:	00030010 	.word	0x00030010
   d44dc:	0001d4c0 	.word	0x0001d4c0
   d44e0:	000d6d6e 	.word	0x000d6d6e
   d44e4:	000d6cc8 	.word	0x000d6cc8
   d44e8:	000d6cff 	.word	0x000d6cff
   d44ec:	000d6d3c 	.word	0x000d6d3c

000d44f0 <_GLOBAL__sub_I_sd>:
}
   d44f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d44f2:	4c36      	ldr	r4, [pc, #216]	; (d45cc <_GLOBAL__sub_I_sd+0xdc>)
        val_(val) {
   d44f4:	4b36      	ldr	r3, [pc, #216]	; (d45d0 <_GLOBAL__sub_I_sd+0xe0>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d44f6:	4d37      	ldr	r5, [pc, #220]	; (d45d4 <_GLOBAL__sub_I_sd+0xe4>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d44f8:	2064      	movs	r0, #100	; 0x64
   d44fa:	2200      	movs	r2, #0
   d44fc:	2101      	movs	r1, #1
   d44fe:	f884 0460 	strb.w	r0, [r4, #1120]	; 0x460
  {
   d4502:	4835      	ldr	r0, [pc, #212]	; (d45d8 <_GLOBAL__sub_I_sd+0xe8>)
   d4504:	7019      	strb	r1, [r3, #0]
   d4506:	71e2      	strb	r2, [r4, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4508:	f8a4 243c 	strh.w	r2, [r4, #1084]	; 0x43c
   d450c:	f884 246a 	strb.w	r2, [r4, #1130]	; 0x46a
   d4510:	f8c4 0470 	str.w	r0, [r4, #1136]	; 0x470
   d4514:	f884 1474 	strb.w	r1, [r4, #1140]	; 0x474
   d4518:	f8c4 2478 	str.w	r2, [r4, #1144]	; 0x478
   d451c:	f8a4 247c 	strh.w	r2, [r4, #1148]	; 0x47c
   d4520:	7829      	ldrb	r1, [r5, #0]
   d4522:	f3bf 8f5b 	dmb	ish
   d4526:	f011 0101 	ands.w	r1, r1, #1
   d452a:	d10b      	bne.n	d4544 <_GLOBAL__sub_I_sd+0x54>
   d452c:	4628      	mov	r0, r5
   d452e:	9101      	str	r1, [sp, #4]
   d4530:	f7ff fdb7 	bl	d40a2 <__cxa_guard_acquire>
   d4534:	9901      	ldr	r1, [sp, #4]
   d4536:	b128      	cbz	r0, d4544 <_GLOBAL__sub_I_sd+0x54>
   d4538:	4828      	ldr	r0, [pc, #160]	; (d45dc <_GLOBAL__sub_I_sd+0xec>)
   d453a:	f001 fa83 	bl	d5a44 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d453e:	4628      	mov	r0, r5
   d4540:	f7ff fdb4 	bl	d40ac <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4544:	4b25      	ldr	r3, [pc, #148]	; (d45dc <_GLOBAL__sub_I_sd+0xec>)
              error_(SYSTEM_ERROR_NONE) {
   d4546:	4d26      	ldr	r5, [pc, #152]	; (d45e0 <_GLOBAL__sub_I_sd+0xf0>)
SdFat sd;
   d4548:	4a26      	ldr	r2, [pc, #152]	; (d45e4 <_GLOBAL__sub_I_sd+0xf4>)
   d454a:	4927      	ldr	r1, [pc, #156]	; (d45e8 <_GLOBAL__sub_I_sd+0xf8>)
   d454c:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d4550:	481e      	ldr	r0, [pc, #120]	; (d45cc <_GLOBAL__sub_I_sd+0xdc>)
   d4552:	2400      	movs	r4, #0
   d4554:	f001 fe04 	bl	d6160 <__aeabi_atexit>
    SleepResult() {}
   d4558:	4b24      	ldr	r3, [pc, #144]	; (d45ec <_GLOBAL__sub_I_sd+0xfc>)
   d455a:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d455c:	602c      	str	r4, [r5, #0]
   d455e:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4560:	71ac      	strb	r4, [r5, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4562:	2002      	movs	r0, #2
   d4564:	f000 f9b6 	bl	d48d4 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC); // uncomment for deployment
   d4568:	4a1e      	ldr	r2, [pc, #120]	; (d45e4 <_GLOBAL__sub_I_sd+0xf4>)
   d456a:	4921      	ldr	r1, [pc, #132]	; (d45f0 <_GLOBAL__sub_I_sd+0x100>)
   d456c:	4628      	mov	r0, r5
   d456e:	f001 fdf7 	bl	d6160 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4572:	4621      	mov	r1, r4
   d4574:	2001      	movs	r0, #1
   d4576:	f000 f9bd 	bl	d48f4 <system_thread_set_state>
FuelGauge batteryMonitor;
   d457a:	4621      	mov	r1, r4
   d457c:	481d      	ldr	r0, [pc, #116]	; (d45f4 <_GLOBAL__sub_I_sd+0x104>)
   d457e:	f000 fe71 	bl	d5264 <_ZN9FuelGaugeC1Eb>
   d4582:	4a18      	ldr	r2, [pc, #96]	; (d45e4 <_GLOBAL__sub_I_sd+0xf4>)
   d4584:	491c      	ldr	r1, [pc, #112]	; (d45f8 <_GLOBAL__sub_I_sd+0x108>)
   d4586:	481b      	ldr	r0, [pc, #108]	; (d45f4 <_GLOBAL__sub_I_sd+0x104>)
   d4588:	f001 fdea 	bl	d6160 <__aeabi_atexit>
PMIC pmic;
   d458c:	4621      	mov	r1, r4
   d458e:	481b      	ldr	r0, [pc, #108]	; (d45fc <_GLOBAL__sub_I_sd+0x10c>)
   d4590:	f001 f8b9 	bl	d5706 <_ZN4PMICC1Eb>
   d4594:	4a13      	ldr	r2, [pc, #76]	; (d45e4 <_GLOBAL__sub_I_sd+0xf4>)
   d4596:	491a      	ldr	r1, [pc, #104]	; (d4600 <_GLOBAL__sub_I_sd+0x110>)
   d4598:	4818      	ldr	r0, [pc, #96]	; (d45fc <_GLOBAL__sub_I_sd+0x10c>)
   d459a:	f001 fde1 	bl	d6160 <__aeabi_atexit>
        : config_(config) {
   d459e:	4819      	ldr	r0, [pc, #100]	; (d4604 <_GLOBAL__sub_I_sd+0x114>)
SystemSleepConfiguration config;
   d45a0:	4919      	ldr	r1, [pc, #100]	; (d4608 <_GLOBAL__sub_I_sd+0x118>)
              valid_(true) {
   d45a2:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d45a6:	4603      	mov	r3, r0
   d45a8:	1d02      	adds	r2, r0, #4
   d45aa:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d45ae:	709c      	strb	r4, [r3, #2]
   d45b0:	2301      	movs	r3, #1
   d45b2:	7503      	strb	r3, [r0, #20]
   d45b4:	4a0b      	ldr	r2, [pc, #44]	; (d45e4 <_GLOBAL__sub_I_sd+0xf4>)
        config_.size = sizeof(hal_sleep_config_t);
   d45b6:	4b15      	ldr	r3, [pc, #84]	; (d460c <_GLOBAL__sub_I_sd+0x11c>)
   d45b8:	6043      	str	r3, [r0, #4]
        config_.wakeup_sources = nullptr;
   d45ba:	e9c0 4403 	strd	r4, r4, [r0, #12]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d45be:	7204      	strb	r4, [r0, #8]
}
   d45c0:	b003      	add	sp, #12
   d45c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
SystemSleepConfiguration config;
   d45c6:	f001 bdcb 	b.w	d6160 <__aeabi_atexit>
   d45ca:	bf00      	nop
   d45cc:	2003e284 	.word	0x2003e284
   d45d0:	2003e250 	.word	0x2003e250
   d45d4:	2003e238 	.word	0x2003e238
   d45d8:	000d6d88 	.word	0x000d6d88
   d45dc:	2003e23c 	.word	0x2003e23c
   d45e0:	2003e244 	.word	0x2003e244
   d45e4:	2003e234 	.word	0x2003e234
   d45e8:	000d40b5 	.word	0x000d40b5
   d45ec:	ffff0000 	.word	0xffff0000
   d45f0:	000d40dd 	.word	0x000d40dd
   d45f4:	2003e254 	.word	0x2003e254
   d45f8:	000d5285 	.word	0x000d5285
   d45fc:	2003e280 	.word	0x2003e280
   d4600:	000d5725 	.word	0x000d5725
   d4604:	2003e25c 	.word	0x2003e25c
   d4608:	000d40b7 	.word	0x000d40b7
   d460c:	00030010 	.word	0x00030010

000d4610 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d4610:	b513      	push	{r0, r1, r4, lr}
   d4612:	4604      	mov	r4, r0
    }
   d4614:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4616:	b159      	cbz	r1, d4630 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4618:	9101      	str	r1, [sp, #4]
   d461a:	f002 fb18 	bl	d6c4e <strlen>
   d461e:	6823      	ldr	r3, [r4, #0]
   d4620:	9901      	ldr	r1, [sp, #4]
   d4622:	68db      	ldr	r3, [r3, #12]
   d4624:	4602      	mov	r2, r0
   d4626:	4620      	mov	r0, r4
    }
   d4628:	b002      	add	sp, #8
   d462a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d462e:	4718      	bx	r3
    }
   d4630:	b002      	add	sp, #8
   d4632:	bd10      	pop	{r4, pc}

000d4634 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <os_mutex_recursive_create+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030248 	.word	0x00030248

000d4644 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <os_mutex_recursive_destroy+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030248 	.word	0x00030248

000d4654 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_RNG_GetRandomNumber+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	685b      	ldr	r3, [r3, #4]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030218 	.word	0x00030218

000d4664 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	695b      	ldr	r3, [r3, #20]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030218 	.word	0x00030218

000d4674 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <hal_rtc_time_is_valid+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030218 	.word	0x00030218

000d4684 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <hal_rtc_get_time+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030218 	.word	0x00030218

000d4694 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_Validate_Pin_Function+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	685b      	ldr	r3, [r3, #4]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003022c 	.word	0x0003022c

000d46a4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <hal_adc_read+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003022c 	.word	0x0003022c

000d46b4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <hal_i2c_begin_transmission+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	699b      	ldr	r3, [r3, #24]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030228 	.word	0x00030228

000d46c4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <hal_i2c_end_transmission+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	69db      	ldr	r3, [r3, #28]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030228 	.word	0x00030228

000d46d4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <hal_i2c_write+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	6a1b      	ldr	r3, [r3, #32]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030228 	.word	0x00030228

000d46e4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <hal_i2c_available+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030228 	.word	0x00030228

000d46f4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <hal_i2c_read+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030228 	.word	0x00030228

000d4704 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <hal_i2c_peek+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030228 	.word	0x00030228

000d4714 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <hal_i2c_flush+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030228 	.word	0x00030228

000d4724 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <hal_i2c_is_enabled+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030228 	.word	0x00030228

000d4734 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <hal_i2c_init+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030228 	.word	0x00030228

000d4744 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <hal_i2c_lock+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030228 	.word	0x00030228

000d4754 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <hal_i2c_unlock+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030228 	.word	0x00030228

000d4764 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <hal_i2c_request_ex+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030228 	.word	0x00030228

000d4774 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <inet_inet_ntop+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	695b      	ldr	r3, [r3, #20]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030264 	.word	0x00030264

000d4784 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <netdb_freeaddrinfo+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	689b      	ldr	r3, [r3, #8]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030268 	.word	0x00030268

000d4794 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <netdb_getaddrinfo+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	68db      	ldr	r3, [r3, #12]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030268 	.word	0x00030268

000d47a4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <hal_spi_init+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	69db      	ldr	r3, [r3, #28]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	00030230 	.word	0x00030230

000d47b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <hal_spi_is_enabled+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	6a1b      	ldr	r3, [r3, #32]
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	00030230 	.word	0x00030230

000d47c4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <hal_usart_init+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	681b      	ldr	r3, [r3, #0]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	0003023c 	.word	0x0003023c

000d47d4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <hal_usart_write+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	68db      	ldr	r3, [r3, #12]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	0003023c 	.word	0x0003023c

000d47e4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <hal_usart_available+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	691b      	ldr	r3, [r3, #16]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	0003023c 	.word	0x0003023c

000d47f4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <hal_usart_read+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	695b      	ldr	r3, [r3, #20]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	0003023c 	.word	0x0003023c

000d4804 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <hal_usart_peek+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	699b      	ldr	r3, [r3, #24]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	0003023c 	.word	0x0003023c

000d4814 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <hal_usart_flush+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	69db      	ldr	r3, [r3, #28]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	0003023c 	.word	0x0003023c

000d4824 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <hal_usart_is_enabled+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	6a1b      	ldr	r3, [r3, #32]
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	0003023c 	.word	0x0003023c

000d4834 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <hal_usart_available_data_for_write+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	0003023c 	.word	0x0003023c

000d4844 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <HAL_USB_USART_Init+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	681b      	ldr	r3, [r3, #0]
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	0003024c 	.word	0x0003024c

000d4854 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <HAL_USB_USART_Begin+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	685b      	ldr	r3, [r3, #4]
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	0003024c 	.word	0x0003024c

000d4864 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <HAL_USB_USART_Available_Data+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	691b      	ldr	r3, [r3, #16]
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	0003024c 	.word	0x0003024c

000d4874 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	695b      	ldr	r3, [r3, #20]
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	0003024c 	.word	0x0003024c

000d4884 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <HAL_USB_USART_Receive_Data+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	699b      	ldr	r3, [r3, #24]
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	0003024c 	.word	0x0003024c

000d4894 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <HAL_USB_USART_Send_Data+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	69db      	ldr	r3, [r3, #28]
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	0003024c 	.word	0x0003024c

000d48a4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <HAL_USB_USART_Flush_Data+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	6a1b      	ldr	r3, [r3, #32]
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	0003024c 	.word	0x0003024c

000d48b4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <log_message+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	00030260 	.word	0x00030260

000d48c4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <system_mode+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	681b      	ldr	r3, [r3, #0]
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	00030220 	.word	0x00030220

000d48d4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <set_system_mode+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	685b      	ldr	r3, [r3, #4]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030220 	.word	0x00030220

000d48e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <system_delay_ms+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	695b      	ldr	r3, [r3, #20]
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	00030220 	.word	0x00030220

000d48f4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <system_thread_set_state+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030220 	.word	0x00030220

000d4904 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <application_thread_current+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030220 	.word	0x00030220

000d4914 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <application_thread_invoke+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030220 	.word	0x00030220

000d4924 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <system_thread_get_state+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030220 	.word	0x00030220

000d4934 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b03      	ldr	r3, [pc, #12]	; (d4944 <system_ctrl_set_app_request_handler+0x10>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d493e:	9301      	str	r3, [sp, #4]
   d4940:	bd08      	pop	{r3, pc}
   d4942:	0000      	.short	0x0000
   d4944:	00030220 	.word	0x00030220

000d4948 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b03      	ldr	r3, [pc, #12]	; (d4958 <system_ctrl_set_result+0x10>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4952:	9301      	str	r3, [sp, #4]
   d4954:	bd08      	pop	{r3, pc}
   d4956:	0000      	.short	0x0000
   d4958:	00030220 	.word	0x00030220

000d495c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b03      	ldr	r3, [pc, #12]	; (d496c <system_sleep_ext+0x10>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d4966:	9301      	str	r3, [sp, #4]
   d4968:	bd08      	pop	{r3, pc}
   d496a:	0000      	.short	0x0000
   d496c:	00030220 	.word	0x00030220

000d4970 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <spark_process+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	689b      	ldr	r3, [r3, #8]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	00030244 	.word	0x00030244

000d4980 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <spark_cloud_flag_connect+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	68db      	ldr	r3, [r3, #12]
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	00030244 	.word	0x00030244

000d4990 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <spark_cloud_flag_connected+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	695b      	ldr	r3, [r3, #20]
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030244 	.word	0x00030244

000d49a0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <spark_send_event+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	6a1b      	ldr	r3, [r3, #32]
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	00030244 	.word	0x00030244

000d49b0 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <spark_sync_time_pending+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030244 	.word	0x00030244

000d49c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <spark_set_random_seed_from_cloud_handler+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030244 	.word	0x00030244

000d49d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <network_connect+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	685b      	ldr	r3, [r3, #4]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030240 	.word	0x00030240

000d49e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <network_connecting+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	689b      	ldr	r3, [r3, #8]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030240 	.word	0x00030240

000d49f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <network_disconnect+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	68db      	ldr	r3, [r3, #12]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030240 	.word	0x00030240

000d4a00 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <network_ready+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	691b      	ldr	r3, [r3, #16]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030240 	.word	0x00030240

000d4a10 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <network_on+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	695b      	ldr	r3, [r3, #20]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030240 	.word	0x00030240

000d4a20 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <network_off+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	699b      	ldr	r3, [r3, #24]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030240 	.word	0x00030240

000d4a30 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <network_listen+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	69db      	ldr	r3, [r3, #28]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030240 	.word	0x00030240

000d4a40 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <network_listening+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6a1b      	ldr	r3, [r3, #32]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030240 	.word	0x00030240

000d4a50 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <network_set_listen_timeout+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030240 	.word	0x00030240

000d4a60 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <network_get_listen_timeout+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030240 	.word	0x00030240

000d4a70 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <network_is_on+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030240 	.word	0x00030240

000d4a80 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <network_is_off+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030240 	.word	0x00030240

000d4a90 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <malloc+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	681b      	ldr	r3, [r3, #0]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003021c 	.word	0x0003021c

000d4aa0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <free+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	685b      	ldr	r3, [r3, #4]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003021c 	.word	0x0003021c

000d4ab0 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <snprintf+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	69db      	ldr	r3, [r3, #28]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003021c 	.word	0x0003021c

000d4ac0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <vsnprintf+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003021c 	.word	0x0003021c

000d4ad0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <abort+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003021c 	.word	0x0003021c

000d4ae0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <_malloc_r+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003021c 	.word	0x0003021c

000d4af0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <newlib_impure_ptr_callback+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003021c 	.word	0x0003021c

000d4b00 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4b00:	2100      	movs	r1, #0
   d4b02:	f7ff beef 	b.w	d48e4 <system_delay_ms>

000d4b06 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4b06:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b08:	6883      	ldr	r3, [r0, #8]
   d4b0a:	4604      	mov	r4, r0
   d4b0c:	b90b      	cbnz	r3, d4b12 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4b0e:	f001 fb32 	bl	d6176 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b12:	68c3      	ldr	r3, [r0, #12]
   d4b14:	4798      	blx	r3
      if (_M_manager)
   d4b16:	68a3      	ldr	r3, [r4, #8]
   d4b18:	b11b      	cbz	r3, d4b22 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b1a:	2203      	movs	r2, #3
   d4b1c:	4621      	mov	r1, r4
   d4b1e:	4620      	mov	r0, r4
   d4b20:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4b22:	4620      	mov	r0, r4
   d4b24:	2110      	movs	r1, #16
}
   d4b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d4b2a:	f001 bb1e 	b.w	d616a <_ZdlPvj>

000d4b2e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4b2e:	b510      	push	{r4, lr}
          _M_dispose();
   d4b30:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4b32:	4604      	mov	r4, r0
          _M_dispose();
   d4b34:	689b      	ldr	r3, [r3, #8]
   d4b36:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4b38:	68a3      	ldr	r3, [r4, #8]
   d4b3a:	3b01      	subs	r3, #1
   d4b3c:	60a3      	str	r3, [r4, #8]
   d4b3e:	b92b      	cbnz	r3, d4b4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4b40:	6823      	ldr	r3, [r4, #0]
   d4b42:	4620      	mov	r0, r4
   d4b44:	68db      	ldr	r3, [r3, #12]
    }
   d4b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4b4a:	4718      	bx	r3
    }
   d4b4c:	bd10      	pop	{r4, pc}

000d4b4e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4b4e:	b510      	push	{r4, lr}
   d4b50:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4b52:	6800      	ldr	r0, [r0, #0]
   d4b54:	b108      	cbz	r0, d4b5a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4b56:	f7ff fd75 	bl	d4644 <os_mutex_recursive_destroy>
    }
   d4b5a:	4620      	mov	r0, r4
   d4b5c:	bd10      	pop	{r4, pc}

000d4b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4b5e:	680b      	ldr	r3, [r1, #0]
   d4b60:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4b62:	b113      	cbz	r3, d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4b64:	685a      	ldr	r2, [r3, #4]
   d4b66:	3201      	adds	r2, #1
   d4b68:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4b6a:	4770      	bx	lr

000d4b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4b6c:	b510      	push	{r4, lr}
   d4b6e:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4b70:	6800      	ldr	r0, [r0, #0]
   d4b72:	b128      	cbz	r0, d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4b74:	6843      	ldr	r3, [r0, #4]
   d4b76:	3b01      	subs	r3, #1
   d4b78:	6043      	str	r3, [r0, #4]
   d4b7a:	b90b      	cbnz	r3, d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4b7c:	f7ff ffd7 	bl	d4b2e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4b80:	4620      	mov	r0, r4
   d4b82:	bd10      	pop	{r4, pc}

000d4b84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4b84:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4b86:	4c06      	ldr	r4, [pc, #24]	; (d4ba0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4b88:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4b8a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4b8c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4b8e:	f7ff fd51 	bl	d4634 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4b92:	4620      	mov	r0, r4
   d4b94:	4a03      	ldr	r2, [pc, #12]	; (d4ba4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4b96:	4904      	ldr	r1, [pc, #16]	; (d4ba8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4b9c:	f001 bae0 	b.w	d6160 <__aeabi_atexit>
   d4ba0:	2003e710 	.word	0x2003e710
   d4ba4:	2003e234 	.word	0x2003e234
   d4ba8:	000d4b4f 	.word	0x000d4b4f

000d4bac <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4bac:	2200      	movs	r2, #0
   d4bae:	6840      	ldr	r0, [r0, #4]
   d4bb0:	4611      	mov	r1, r2
   d4bb2:	f7ff bf25 	b.w	d4a00 <network_ready>

000d4bb6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d4bb6:	2200      	movs	r2, #0
   d4bb8:	6840      	ldr	r0, [r0, #4]
   d4bba:	4611      	mov	r1, r2
   d4bbc:	f7ff bf40 	b.w	d4a40 <network_listening>

000d4bc0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4bc0:	2200      	movs	r2, #0
   d4bc2:	6840      	ldr	r0, [r0, #4]
   d4bc4:	4611      	mov	r1, r2
   d4bc6:	f7ff bf4b 	b.w	d4a60 <network_get_listen_timeout>

000d4bca <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4bca:	6840      	ldr	r0, [r0, #4]
   d4bcc:	2200      	movs	r2, #0
   d4bce:	f7ff bf3f 	b.w	d4a50 <network_set_listen_timeout>

000d4bd2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4bd2:	6840      	ldr	r0, [r0, #4]
   d4bd4:	2200      	movs	r2, #0
   d4bd6:	f081 0101 	eor.w	r1, r1, #1
   d4bda:	f7ff bf29 	b.w	d4a30 <network_listen>

000d4bde <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4bde:	2300      	movs	r3, #0
   d4be0:	6840      	ldr	r0, [r0, #4]
   d4be2:	461a      	mov	r2, r3
   d4be4:	4619      	mov	r1, r3
   d4be6:	f7ff bf1b 	b.w	d4a20 <network_off>

000d4bea <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4bea:	2300      	movs	r3, #0
   d4bec:	6840      	ldr	r0, [r0, #4]
   d4bee:	461a      	mov	r2, r3
   d4bf0:	4619      	mov	r1, r3
   d4bf2:	f7ff bf0d 	b.w	d4a10 <network_on>

000d4bf6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4bf6:	2200      	movs	r2, #0
   d4bf8:	6840      	ldr	r0, [r0, #4]
   d4bfa:	4611      	mov	r1, r2
   d4bfc:	f7ff bef0 	b.w	d49e0 <network_connecting>

000d4c00 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c00:	6840      	ldr	r0, [r0, #4]
   d4c02:	2200      	movs	r2, #0
   d4c04:	2102      	movs	r1, #2
   d4c06:	f7ff bef3 	b.w	d49f0 <network_disconnect>

000d4c0a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4c0a:	2300      	movs	r3, #0
   d4c0c:	6840      	ldr	r0, [r0, #4]
   d4c0e:	461a      	mov	r2, r3
   d4c10:	f7ff bede 	b.w	d49d0 <network_connect>

000d4c14 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4c14:	4b08      	ldr	r3, [pc, #32]	; (d4c38 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4c16:	b510      	push	{r4, lr}
   d4c18:	2428      	movs	r4, #40	; 0x28
   d4c1a:	4622      	mov	r2, r4
   d4c1c:	4618      	mov	r0, r3
   d4c1e:	2100      	movs	r1, #0
   d4c20:	f001 ffcc 	bl	d6bbc <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4c24:	4b05      	ldr	r3, [pc, #20]	; (d4c3c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d4c26:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d4c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4c2c:	6042      	str	r2, [r0, #4]
   d4c2e:	2204      	movs	r2, #4
   d4c30:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4c32:	4a03      	ldr	r2, [pc, #12]	; (d4c40 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4c34:	601a      	str	r2, [r3, #0]
   d4c36:	bd10      	pop	{r4, pc}
   d4c38:	2003e71c 	.word	0x2003e71c
   d4c3c:	2003e714 	.word	0x2003e714
   d4c40:	000d6dac 	.word	0x000d6dac

000d4c44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4c44:	4770      	bx	lr

000d4c46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4c46:	2000      	movs	r0, #0
   d4c48:	4770      	bx	lr

000d4c4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4c4a:	b510      	push	{r4, lr}
   d4c4c:	2110      	movs	r1, #16
   d4c4e:	4604      	mov	r4, r0
   d4c50:	f001 fa8b 	bl	d616a <_ZdlPvj>
   d4c54:	4620      	mov	r0, r4
   d4c56:	bd10      	pop	{r4, pc}

000d4c58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4c58:	b508      	push	{r3, lr}
      { delete this; }
   d4c5a:	f7ff fff6 	bl	d4c4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4c5e:	bd08      	pop	{r3, pc}

000d4c60 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4c60:	b510      	push	{r4, lr}
      if (_M_manager)
   d4c62:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4c64:	4604      	mov	r4, r0
      if (_M_manager)
   d4c66:	b113      	cbz	r3, d4c6e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c68:	2203      	movs	r2, #3
   d4c6a:	4601      	mov	r1, r0
   d4c6c:	4798      	blx	r3
    }
   d4c6e:	4620      	mov	r0, r4
   d4c70:	bd10      	pop	{r4, pc}

000d4c72 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4c72:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4c74:	2200      	movs	r2, #0
   d4c76:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4c7a:	6002      	str	r2, [r0, #0]
   d4c7c:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4c7e:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c80:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4c82:	680c      	ldr	r4, [r1, #0]
   d4c84:	8085      	strh	r5, [r0, #4]
   d4c86:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c88:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4c8a:	bd30      	pop	{r4, r5, pc}

000d4c8c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4c8c:	b510      	push	{r4, lr}
   d4c8e:	4604      	mov	r4, r0
    free((void*)msg_);
   d4c90:	6800      	ldr	r0, [r0, #0]
   d4c92:	f7ff ff05 	bl	d4aa0 <free>
}
   d4c96:	4620      	mov	r0, r4
   d4c98:	bd10      	pop	{r4, pc}

000d4c9a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4c9a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4c9c:	68c4      	ldr	r4, [r0, #12]
   d4c9e:	b1f4      	cbz	r4, d4cde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4ca0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4ca2:	2b02      	cmp	r3, #2
   d4ca4:	d103      	bne.n	d4cae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4ca6:	f104 000c 	add.w	r0, r4, #12
   d4caa:	f7ff ffef 	bl	d4c8c <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4cae:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4cb0:	b135      	cbz	r5, d4cc0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4cb2:	4628      	mov	r0, r5
   d4cb4:	f7ff ffd4 	bl	d4c60 <_ZNSt14_Function_baseD1Ev>
   d4cb8:	2110      	movs	r1, #16
   d4cba:	4628      	mov	r0, r5
   d4cbc:	f001 fa55 	bl	d616a <_ZdlPvj>
   d4cc0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4cc2:	b135      	cbz	r5, d4cd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4cc4:	4628      	mov	r0, r5
   d4cc6:	f7ff ffcb 	bl	d4c60 <_ZNSt14_Function_baseD1Ev>
   d4cca:	2110      	movs	r1, #16
   d4ccc:	4628      	mov	r0, r5
   d4cce:	f001 fa4c 	bl	d616a <_ZdlPvj>
   d4cd2:	4620      	mov	r0, r4
   d4cd4:	2114      	movs	r1, #20
   d4cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4cda:	f001 ba46 	b.w	d616a <_ZdlPvj>
   d4cde:	bd38      	pop	{r3, r4, r5, pc}

000d4ce0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4ce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4ce2:	460e      	mov	r6, r1
   d4ce4:	4604      	mov	r4, r0
   d4ce6:	f856 3b04 	ldr.w	r3, [r6], #4
   d4cea:	9300      	str	r3, [sp, #0]
   d4cec:	460d      	mov	r5, r1
   d4cee:	a801      	add	r0, sp, #4
   d4cf0:	4631      	mov	r1, r6
   d4cf2:	f7ff ff34 	bl	d4b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4cf6:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4cf8:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4cfa:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4cfc:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4cfe:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4d00:	2300      	movs	r3, #0
   d4d02:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4d04:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4d06:	f7ff ff31 	bl	d4b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d0a:	4630      	mov	r0, r6
   d4d0c:	f7ff ff2e 	bl	d4b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4d10:	4628      	mov	r0, r5
   d4d12:	2108      	movs	r1, #8
   d4d14:	f001 fa29 	bl	d616a <_ZdlPvj>
        return p;
    }
   d4d18:	4620      	mov	r0, r4
   d4d1a:	b002      	add	sp, #8
   d4d1c:	bd70      	pop	{r4, r5, r6, pc}

000d4d1e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d4d1e:	b513      	push	{r0, r1, r4, lr}
   d4d20:	460b      	mov	r3, r1
   d4d22:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d24:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4d28:	466c      	mov	r4, sp
   d4d2a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4d2e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4d32:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4d36:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4d3a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4d3e:	b002      	add	sp, #8
   d4d40:	bd10      	pop	{r4, pc}

000d4d42 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d4d42:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4d44:	b510      	push	{r4, lr}
      if (_M_empty())
   d4d46:	b90a      	cbnz	r2, d4d4c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4d48:	f001 fa15 	bl	d6176 <_ZSt25__throw_bad_function_callv>
    }
   d4d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d50:	68c3      	ldr	r3, [r0, #12]
   d4d52:	4718      	bx	r3

000d4d54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4d54:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4d56:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4d58:	f100 0110 	add.w	r1, r0, #16
   d4d5c:	f7ff fff1 	bl	d4d42 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4d60:	bd08      	pop	{r3, pc}

000d4d62 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4d62:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4d64:	b510      	push	{r4, lr}
      if (_M_empty())
   d4d66:	b90a      	cbnz	r2, d4d6c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4d68:	f001 fa05 	bl	d6176 <_ZSt25__throw_bad_function_callv>
    }
   d4d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d70:	68c3      	ldr	r3, [r0, #12]
   d4d72:	4718      	bx	r3

000d4d74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4d74:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4d76:	6800      	ldr	r0, [r0, #0]
   d4d78:	f100 0110 	add.w	r1, r0, #16
   d4d7c:	f7ff fff1 	bl	d4d62 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4d80:	bd08      	pop	{r3, pc}
	...

000d4d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4d84:	b538      	push	{r3, r4, r5, lr}
   d4d86:	2300      	movs	r3, #0
   d4d88:	4604      	mov	r4, r0
   d4d8a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d8c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4d8e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d90:	f7ff f981 	bl	d4096 <_Znwj>
   d4d94:	b128      	cbz	r0, d4da2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d4d96:	2301      	movs	r3, #1
   d4d98:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4d9c:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4d9e:	6003      	str	r3, [r0, #0]
   d4da0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4da2:	6020      	str	r0, [r4, #0]
	}
   d4da4:	4620      	mov	r0, r4
   d4da6:	bd38      	pop	{r3, r4, r5, pc}
   d4da8:	000d6de8 	.word	0x000d6de8

000d4dac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d4dac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4dae:	2300      	movs	r3, #0
   d4db0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4db2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4db4:	4604      	mov	r4, r0
   d4db6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4db8:	b12b      	cbz	r3, d4dc6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4dba:	2202      	movs	r2, #2
   d4dbc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4dbe:	68eb      	ldr	r3, [r5, #12]
   d4dc0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4dc2:	68ab      	ldr	r3, [r5, #8]
   d4dc4:	60a3      	str	r3, [r4, #8]
    }
   d4dc6:	4620      	mov	r0, r4
   d4dc8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d4dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4dce:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4dd0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4dd2:	4668      	mov	r0, sp
   d4dd4:	f7ff ff4d 	bl	d4c72 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4dd8:	f04f 0302 	mov.w	r3, #2
   d4ddc:	e8d4 2f4f 	ldrexb	r2, [r4]
   d4de0:	2a00      	cmp	r2, #0
   d4de2:	d103      	bne.n	d4dec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4de4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d4de8:	2900      	cmp	r1, #0
   d4dea:	d1f7      	bne.n	d4ddc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d4dec:	d125      	bne.n	d4e3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d4dee:	f104 050c 	add.w	r5, r4, #12
   d4df2:	4669      	mov	r1, sp
   d4df4:	4628      	mov	r0, r5
   d4df6:	f7ff ff3c 	bl	d4c72 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d4dfa:	f3bf 8f5b 	dmb	ish
   d4dfe:	2301      	movs	r3, #1
   d4e00:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4e02:	2000      	movs	r0, #0
   d4e04:	f104 0308 	add.w	r3, r4, #8
   d4e08:	f3bf 8f5b 	dmb	ish
   d4e0c:	e853 6f00 	ldrex	r6, [r3]
   d4e10:	e843 0200 	strex	r2, r0, [r3]
   d4e14:	2a00      	cmp	r2, #0
   d4e16:	d1f9      	bne.n	d4e0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d4e18:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4e1c:	b16e      	cbz	r6, d4e3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4e1e:	f7ff fd71 	bl	d4904 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4e22:	b178      	cbz	r0, d4e44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e24:	4629      	mov	r1, r5
   d4e26:	4630      	mov	r0, r6
   d4e28:	f7ff ff8b 	bl	d4d42 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4e2c:	4630      	mov	r0, r6
   d4e2e:	f7ff ff17 	bl	d4c60 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4e32:	2110      	movs	r1, #16
   d4e34:	4630      	mov	r0, r6
   d4e36:	f001 f998 	bl	d616a <_ZdlPvj>
        p_->setError(std::move(error));
   d4e3a:	4668      	mov	r0, sp
   d4e3c:	f7ff ff26 	bl	d4c8c <_ZN8particle5ErrorD1Ev>
    }
   d4e40:	b009      	add	sp, #36	; 0x24
   d4e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e44:	4631      	mov	r1, r6
   d4e46:	a802      	add	r0, sp, #8
   d4e48:	f7ff ffb0 	bl	d4dac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4e4c:	68e0      	ldr	r0, [r4, #12]
   d4e4e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4e52:	b108      	cbz	r0, d4e58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d4e54:	f001 fede 	bl	d6c14 <strdup>
        type_(type) {
   d4e58:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4e5a:	2010      	movs	r0, #16
   d4e5c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4e60:	f7ff f919 	bl	d4096 <_Znwj>
   d4e64:	4605      	mov	r5, r0
   d4e66:	b1e8      	cbz	r0, d4ea4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d4e68:	2700      	movs	r7, #0
   d4e6a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e6c:	2018      	movs	r0, #24
   d4e6e:	f7ff f912 	bl	d4096 <_Znwj>
   d4e72:	4604      	mov	r4, r0
   d4e74:	b188      	cbz	r0, d4e9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d4e76:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d4e78:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4e7a:	a802      	add	r0, sp, #8
   d4e7c:	f7ff ff4f 	bl	d4d1e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e80:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4e82:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e84:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e86:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4e88:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4e8a:	a906      	add	r1, sp, #24
   d4e8c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e8e:	60e3      	str	r3, [r4, #12]
   d4e90:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d4e94:	9205      	str	r2, [sp, #20]
   d4e96:	f7ff feec 	bl	d4c72 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d4e9a:	4b08      	ldr	r3, [pc, #32]	; (d4ebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d4e9c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4e9e:	4b08      	ldr	r3, [pc, #32]	; (d4ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ea0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4ea2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d4ea4:	a806      	add	r0, sp, #24
   d4ea6:	f7ff fef1 	bl	d4c8c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4eaa:	a802      	add	r0, sp, #8
   d4eac:	f7ff fed8 	bl	d4c60 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4eb0:	2200      	movs	r2, #0
   d4eb2:	4629      	mov	r1, r5
   d4eb4:	4803      	ldr	r0, [pc, #12]	; (d4ec4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d4eb6:	f7ff fd2d 	bl	d4914 <application_thread_invoke>
   d4eba:	e7b7      	b.n	d4e2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d4ebc:	000d4d55 	.word	0x000d4d55
   d4ec0:	000d4fed 	.word	0x000d4fed
   d4ec4:	000d4b07 	.word	0x000d4b07

000d4ec8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4ecc:	b08a      	sub	sp, #40	; 0x28
   d4ece:	4605      	mov	r5, r0
   d4ed0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d4ed4:	460c      	mov	r4, r1
   d4ed6:	4617      	mov	r7, r2
   d4ed8:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4eda:	f7ff fd59 	bl	d4990 <spark_cloud_flag_connected>
   d4ede:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d4ee0:	4682      	mov	sl, r0
   d4ee2:	bb38      	cbnz	r0, d4f34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d4ee4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4ee8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4eea:	a905      	add	r1, sp, #20
   d4eec:	4630      	mov	r0, r6
   d4eee:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4ef2:	f7ff febe 	bl	d4c72 <_ZN8particle5ErrorC1EOS0_>
   d4ef6:	2014      	movs	r0, #20
   d4ef8:	f7ff f8cd 	bl	d4096 <_Znwj>
   d4efc:	4604      	mov	r4, r0
   d4efe:	b148      	cbz	r0, d4f14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4f00:	2302      	movs	r3, #2
   d4f02:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f04:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4f06:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f0a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d4f0c:	4631      	mov	r1, r6
   d4f0e:	300c      	adds	r0, #12
   d4f10:	f7ff feaf 	bl	d4c72 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4f14:	4628      	mov	r0, r5
	: __shared_count(__p)
   d4f16:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4f18:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d4f1c:	f7ff ff32 	bl	d4d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4f20:	4630      	mov	r0, r6
   d4f22:	f7ff feb3 	bl	d4c8c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4f26:	a805      	add	r0, sp, #20
   d4f28:	f7ff feb0 	bl	d4c8c <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d4f2c:	4628      	mov	r0, r5
   d4f2e:	b00a      	add	sp, #40	; 0x28
   d4f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4f34:	230c      	movs	r3, #12
   d4f36:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4f3a:	2014      	movs	r0, #20
   d4f3c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d4f40:	9307      	str	r3, [sp, #28]
   d4f42:	f7ff f8a8 	bl	d4096 <_Znwj>
   d4f46:	4601      	mov	r1, r0
   d4f48:	b128      	cbz	r0, d4f56 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4f4a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d4f4e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f52:	f880 a001 	strb.w	sl, [r0, #1]
   d4f56:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4f58:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d4f5a:	f7ff ff13 	bl	d4d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d4f5e:	4b22      	ldr	r3, [pc, #136]	; (d4fe8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d4f60:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4f62:	2008      	movs	r0, #8
   d4f64:	f7ff f897 	bl	d4096 <_Znwj>
   d4f68:	4682      	mov	sl, r0
   d4f6a:	b128      	cbz	r0, d4f78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f6c:	9b03      	ldr	r3, [sp, #12]
   d4f6e:	f840 3b04 	str.w	r3, [r0], #4
   d4f72:	a904      	add	r1, sp, #16
   d4f74:	f7ff fdf3 	bl	d4b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4f78:	9600      	str	r6, [sp, #0]
   d4f7a:	fa5f f389 	uxtb.w	r3, r9
   d4f7e:	4642      	mov	r2, r8
   d4f80:	4639      	mov	r1, r7
   d4f82:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d4f84:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4f88:	f7ff fd0a 	bl	d49a0 <spark_send_event>
   d4f8c:	b9b8      	cbnz	r0, d4fbe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d4f8e:	9b03      	ldr	r3, [sp, #12]
   d4f90:	785b      	ldrb	r3, [r3, #1]
   d4f92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4f96:	b993      	cbnz	r3, d4fbe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d4f98:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d4f9c:	a905      	add	r1, sp, #20
   d4f9e:	a803      	add	r0, sp, #12
   d4fa0:	9205      	str	r2, [sp, #20]
   d4fa2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4fa6:	f7ff ff11 	bl	d4dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4faa:	a805      	add	r0, sp, #20
   d4fac:	f7ff fe6e 	bl	d4c8c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4fb0:	a805      	add	r0, sp, #20
   d4fb2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4fb4:	f7ff fe94 	bl	d4ce0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d4fb8:	a806      	add	r0, sp, #24
   d4fba:	f7ff fdd7 	bl	d4b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fbe:	9b03      	ldr	r3, [sp, #12]
   d4fc0:	9305      	str	r3, [sp, #20]
   d4fc2:	a904      	add	r1, sp, #16
   d4fc4:	a806      	add	r0, sp, #24
   d4fc6:	f7ff fdca 	bl	d4b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4fca:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4fcc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4fce:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d4fd0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d4fd2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d4fd4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d4fd6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d4fd8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d4fda:	f7ff fdc7 	bl	d4b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fde:	a804      	add	r0, sp, #16
   d4fe0:	f7ff fdc4 	bl	d4b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d4fe4:	e7a2      	b.n	d4f2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d4fe6:	bf00      	nop
   d4fe8:	000d50b1 	.word	0x000d50b1

000d4fec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d4fec:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ff0:	4605      	mov	r5, r0
	  switch (__op)
   d4ff2:	d007      	beq.n	d5004 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d4ff4:	2a03      	cmp	r2, #3
   d4ff6:	d018      	beq.n	d502a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d4ff8:	2a01      	cmp	r2, #1
   d4ffa:	d101      	bne.n	d5000 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4ffc:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4ffe:	6003      	str	r3, [r0, #0]
	}
   d5000:	2000      	movs	r0, #0
   d5002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5004:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5006:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5008:	f7ff f845 	bl	d4096 <_Znwj>
   d500c:	4604      	mov	r4, r0
   d500e:	b150      	cbz	r0, d5026 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5010:	4631      	mov	r1, r6
   d5012:	f7ff fecb 	bl	d4dac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5016:	6930      	ldr	r0, [r6, #16]
   d5018:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d501c:	b108      	cbz	r0, d5022 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d501e:	f001 fdf9 	bl	d6c14 <strdup>
        type_(type) {
   d5022:	6120      	str	r0, [r4, #16]
   d5024:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5026:	602c      	str	r4, [r5, #0]
	}
   d5028:	e7ea      	b.n	d5000 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d502a:	6804      	ldr	r4, [r0, #0]
   d502c:	2c00      	cmp	r4, #0
   d502e:	d0e7      	beq.n	d5000 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5030:	f104 0010 	add.w	r0, r4, #16
   d5034:	f7ff fe2a 	bl	d4c8c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5038:	4620      	mov	r0, r4
   d503a:	f7ff fe11 	bl	d4c60 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d503e:	2118      	movs	r1, #24
   d5040:	4620      	mov	r0, r4
   d5042:	f001 f892 	bl	d616a <_ZdlPvj>
   d5046:	e7db      	b.n	d5000 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5048 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5048:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d504a:	2300      	movs	r3, #0
   d504c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d504e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5050:	4604      	mov	r4, r0
   d5052:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5054:	b12b      	cbz	r3, d5062 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5056:	2202      	movs	r2, #2
   d5058:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d505a:	68eb      	ldr	r3, [r5, #12]
   d505c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d505e:	68ab      	ldr	r3, [r5, #8]
   d5060:	60a3      	str	r3, [r4, #8]
    }
   d5062:	4620      	mov	r0, r4
   d5064:	bd38      	pop	{r3, r4, r5, pc}

000d5066 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5066:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5068:	b570      	push	{r4, r5, r6, lr}
   d506a:	4604      	mov	r4, r0
	  switch (__op)
   d506c:	d007      	beq.n	d507e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d506e:	2a03      	cmp	r2, #3
   d5070:	d012      	beq.n	d5098 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d5072:	2a01      	cmp	r2, #1
   d5074:	d101      	bne.n	d507a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5076:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5078:	6003      	str	r3, [r0, #0]
	}
   d507a:	2000      	movs	r0, #0
   d507c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d507e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5080:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5082:	f7ff f808 	bl	d4096 <_Znwj>
   d5086:	4605      	mov	r5, r0
   d5088:	b120      	cbz	r0, d5094 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d508a:	4631      	mov	r1, r6
   d508c:	f7ff ffdc 	bl	d5048 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5090:	7c33      	ldrb	r3, [r6, #16]
   d5092:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5094:	6025      	str	r5, [r4, #0]
	}
   d5096:	e7f0      	b.n	d507a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5098:	6804      	ldr	r4, [r0, #0]
   d509a:	2c00      	cmp	r4, #0
   d509c:	d0ed      	beq.n	d507a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d509e:	4620      	mov	r0, r4
   d50a0:	f7ff fdde 	bl	d4c60 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d50a4:	2114      	movs	r1, #20
   d50a6:	4620      	mov	r0, r4
   d50a8:	f001 f85f 	bl	d616a <_ZdlPvj>
   d50ac:	e7e5      	b.n	d507a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d50b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d50b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d50b2:	b089      	sub	sp, #36	; 0x24
   d50b4:	4604      	mov	r4, r0
   d50b6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d50b8:	a801      	add	r0, sp, #4
   d50ba:	4611      	mov	r1, r2
   d50bc:	f7ff fe10 	bl	d4ce0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d50c0:	b1a4      	cbz	r4, d50ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d50c2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d50c4:	b11d      	cbz	r5, d50ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d50c6:	4628      	mov	r0, r5
   d50c8:	f001 fda4 	bl	d6c14 <strdup>
   d50cc:	4605      	mov	r5, r0
   d50ce:	a801      	add	r0, sp, #4
   d50d0:	a903      	add	r1, sp, #12
        type_(type) {
   d50d2:	9503      	str	r5, [sp, #12]
   d50d4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d50d8:	f7ff fe78 	bl	d4dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d50dc:	a803      	add	r0, sp, #12
   d50de:	f7ff fdd5 	bl	d4c8c <_ZN8particle5ErrorD1Ev>
   d50e2:	a802      	add	r0, sp, #8
   d50e4:	f7ff fd42 	bl	d4b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d50e8:	b009      	add	sp, #36	; 0x24
   d50ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d50ec:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d50ee:	2301      	movs	r3, #1
   d50f0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d50f4:	2a00      	cmp	r2, #0
   d50f6:	d103      	bne.n	d5100 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d50f8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d50fc:	2900      	cmp	r1, #0
   d50fe:	d1f7      	bne.n	d50f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5100:	d1ef      	bne.n	d50e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5102:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5104:	f3bf 8f5b 	dmb	ish
   d5108:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d510a:	1d2b      	adds	r3, r5, #4
   d510c:	f3bf 8f5b 	dmb	ish
   d5110:	e853 6f00 	ldrex	r6, [r3]
   d5114:	e843 4200 	strex	r2, r4, [r3]
   d5118:	2a00      	cmp	r2, #0
   d511a:	d1f9      	bne.n	d5110 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d511c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5120:	2e00      	cmp	r6, #0
   d5122:	d0de      	beq.n	d50e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5124:	4620      	mov	r0, r4
   d5126:	f7ff fbed 	bl	d4904 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d512a:	4607      	mov	r7, r0
   d512c:	b160      	cbz	r0, d5148 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d512e:	f105 010c 	add.w	r1, r5, #12
   d5132:	4630      	mov	r0, r6
   d5134:	f7ff fe15 	bl	d4d62 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5138:	4630      	mov	r0, r6
   d513a:	f7ff fd91 	bl	d4c60 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d513e:	2110      	movs	r1, #16
   d5140:	4630      	mov	r0, r6
   d5142:	f001 f812 	bl	d616a <_ZdlPvj>
   d5146:	e7cc      	b.n	d50e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5148:	4631      	mov	r1, r6
   d514a:	a803      	add	r0, sp, #12
   d514c:	f7ff ff7c 	bl	d5048 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5150:	7b2b      	ldrb	r3, [r5, #12]
   d5152:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5156:	2010      	movs	r0, #16
   d5158:	f7fe ff9d 	bl	d4096 <_Znwj>
   d515c:	4605      	mov	r5, r0
   d515e:	b1d0      	cbz	r0, d5196 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5160:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5162:	2014      	movs	r0, #20
   d5164:	f7fe ff97 	bl	d4096 <_Znwj>
   d5168:	4604      	mov	r4, r0
   d516a:	b178      	cbz	r0, d518c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d516c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d516e:	4601      	mov	r1, r0
   d5170:	a803      	add	r0, sp, #12
   d5172:	f7ff fdd4 	bl	d4d1e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5176:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5178:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d517a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d517c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d517e:	9205      	str	r2, [sp, #20]
   d5180:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5182:	60e3      	str	r3, [r4, #12]
   d5184:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5188:	9206      	str	r2, [sp, #24]
   d518a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d518c:	4b06      	ldr	r3, [pc, #24]	; (d51a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d518e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5190:	4b06      	ldr	r3, [pc, #24]	; (d51ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5192:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5194:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5196:	a803      	add	r0, sp, #12
   d5198:	f7ff fd62 	bl	d4c60 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d519c:	2200      	movs	r2, #0
   d519e:	4629      	mov	r1, r5
   d51a0:	4803      	ldr	r0, [pc, #12]	; (d51b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d51a2:	f7ff fbb7 	bl	d4914 <application_thread_invoke>
   d51a6:	e7c7      	b.n	d5138 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d51a8:	000d4d75 	.word	0x000d4d75
   d51ac:	000d5067 	.word	0x000d5067
   d51b0:	000d4b07 	.word	0x000d4b07

000d51b4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d51b4:	2200      	movs	r2, #0
   d51b6:	6840      	ldr	r0, [r0, #4]
   d51b8:	4611      	mov	r1, r2
   d51ba:	f7ff bc41 	b.w	d4a40 <network_listening>

000d51be <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d51be:	2200      	movs	r2, #0
   d51c0:	6840      	ldr	r0, [r0, #4]
   d51c2:	4611      	mov	r1, r2
   d51c4:	f7ff bc4c 	b.w	d4a60 <network_get_listen_timeout>

000d51c8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d51c8:	6840      	ldr	r0, [r0, #4]
   d51ca:	2200      	movs	r2, #0
   d51cc:	f7ff bc40 	b.w	d4a50 <network_set_listen_timeout>

000d51d0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d51d0:	6840      	ldr	r0, [r0, #4]
   d51d2:	2200      	movs	r2, #0
   d51d4:	f081 0101 	eor.w	r1, r1, #1
   d51d8:	f7ff bc2a 	b.w	d4a30 <network_listen>

000d51dc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d51dc:	2300      	movs	r3, #0
   d51de:	6840      	ldr	r0, [r0, #4]
   d51e0:	461a      	mov	r2, r3
   d51e2:	4619      	mov	r1, r3
   d51e4:	f7ff bc1c 	b.w	d4a20 <network_off>

000d51e8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d51e8:	2300      	movs	r3, #0
   d51ea:	6840      	ldr	r0, [r0, #4]
   d51ec:	461a      	mov	r2, r3
   d51ee:	4619      	mov	r1, r3
   d51f0:	f7ff bc0e 	b.w	d4a10 <network_on>

000d51f4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d51f4:	2200      	movs	r2, #0
   d51f6:	6840      	ldr	r0, [r0, #4]
   d51f8:	4611      	mov	r1, r2
   d51fa:	f7ff bc01 	b.w	d4a00 <network_ready>

000d51fe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d51fe:	2200      	movs	r2, #0
   d5200:	6840      	ldr	r0, [r0, #4]
   d5202:	4611      	mov	r1, r2
   d5204:	f7ff bbec 	b.w	d49e0 <network_connecting>

000d5208 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5208:	6840      	ldr	r0, [r0, #4]
   d520a:	2200      	movs	r2, #0
   d520c:	2102      	movs	r1, #2
   d520e:	f7ff bbef 	b.w	d49f0 <network_disconnect>

000d5212 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5212:	2300      	movs	r3, #0
   d5214:	6840      	ldr	r0, [r0, #4]
   d5216:	461a      	mov	r2, r3
   d5218:	f7ff bbda 	b.w	d49d0 <network_connect>

000d521c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d521c:	4b02      	ldr	r3, [pc, #8]	; (d5228 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d521e:	2203      	movs	r2, #3
   d5220:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5222:	4a02      	ldr	r2, [pc, #8]	; (d522c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5224:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5226:	4770      	bx	lr
   d5228:	2003e744 	.word	0x2003e744
   d522c:	000d6e04 	.word	0x000d6e04

000d5230 <_ZN8particle6detail9_getVCellEhh>:

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   d5230:	0909      	lsrs	r1, r1, #4
   d5232:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   d5236:	ee07 1a90 	vmov	s15, r1
   d523a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        return value / 800.0;
    }
   d523e:	eddf 7a02 	vldr	s15, [pc, #8]	; d5248 <_ZN8particle6detail9_getVCellEhh+0x18>
   d5242:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d5246:	4770      	bx	lr
   d5248:	44480000 	.word	0x44480000

000d524c <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d524c:	6800      	ldr	r0, [r0, #0]
   d524e:	f000 b916 	b.w	d547e <_ZN7TwoWire4lockEv>

000d5252 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d5252:	b510      	push	{r4, lr}
   d5254:	4604      	mov	r4, r0
      lock_(_lock) {
   d5256:	6001      	str	r1, [r0, #0]
   d5258:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d525a:	b10a      	cbz	r2, d5260 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d525c:	f7ff fff6 	bl	d524c <_ZN9FuelGauge4lockEv>
}
   d5260:	4620      	mov	r0, r4
   d5262:	bd10      	pop	{r4, pc}

000d5264 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d5264:	b513      	push	{r0, r1, r4, lr}
   d5266:	4604      	mov	r4, r0
   d5268:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d526a:	f000 ff51 	bl	d6110 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d526e:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d5270:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d5272:	4620      	mov	r0, r4
   d5274:	f7ff ffed 	bl	d5252 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d5278:	4620      	mov	r0, r4
   d527a:	b002      	add	sp, #8
   d527c:	bd10      	pop	{r4, pc}

000d527e <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d527e:	6800      	ldr	r0, [r0, #0]
   d5280:	f000 b906 	b.w	d5490 <_ZN7TwoWire6unlockEv>

000d5284 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d5284:	b510      	push	{r4, lr}
    if (lock_) {
   d5286:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d5288:	4604      	mov	r4, r0
    if (lock_) {
   d528a:	b10b      	cbz	r3, d5290 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d528c:	f7ff fff7 	bl	d527e <_ZN9FuelGauge6unlockEv>
}
   d5290:	4620      	mov	r0, r4
   d5292:	bd10      	pop	{r4, pc}

000d5294 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d5294:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5298:	4604      	mov	r4, r0
   d529a:	460d      	mov	r5, r1
   d529c:	4617      	mov	r7, r2
   d529e:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d52a0:	f7ff ffd4 	bl	d524c <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d52a4:	2336      	movs	r3, #54	; 0x36
   d52a6:	f88d 3000 	strb.w	r3, [sp]
   d52aa:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d52ac:	6820      	ldr	r0, [r4, #0]
   d52ae:	9301      	str	r3, [sp, #4]
   d52b0:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d52b4:	230a      	movs	r3, #10
   d52b6:	4669      	mov	r1, sp
   d52b8:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d52ba:	f88d 8008 	strb.w	r8, [sp, #8]
   d52be:	f000 f8c2 	bl	d5446 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d52c2:	6820      	ldr	r0, [r4, #0]
   d52c4:	6803      	ldr	r3, [r0, #0]
   d52c6:	4629      	mov	r1, r5
   d52c8:	689b      	ldr	r3, [r3, #8]
   d52ca:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d52cc:	6820      	ldr	r0, [r4, #0]
   d52ce:	4641      	mov	r1, r8
   d52d0:	f000 f8d1 	bl	d5476 <_ZN7TwoWire15endTransmissionEh>
   d52d4:	4605      	mov	r5, r0
   d52d6:	b140      	cbz	r0, d52ea <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d52d8:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d52dc:	4620      	mov	r0, r4
   d52de:	f7ff ffce 	bl	d527e <_ZN9FuelGauge6unlockEv>
}
   d52e2:	4628      	mov	r0, r5
   d52e4:	b004      	add	sp, #16
   d52e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d52ea:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d52ec:	6820      	ldr	r0, [r4, #0]
   d52ee:	9301      	str	r3, [sp, #4]
   d52f0:	4669      	mov	r1, sp
   d52f2:	f000 f891 	bl	d5418 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d52f6:	2802      	cmp	r0, #2
   d52f8:	d1ee      	bne.n	d52d8 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d52fa:	6820      	ldr	r0, [r4, #0]
   d52fc:	6803      	ldr	r3, [r0, #0]
   d52fe:	695b      	ldr	r3, [r3, #20]
   d5300:	4798      	blx	r3
   d5302:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d5304:	6820      	ldr	r0, [r4, #0]
   d5306:	6803      	ldr	r3, [r0, #0]
   d5308:	695b      	ldr	r3, [r3, #20]
   d530a:	4798      	blx	r3
   d530c:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d530e:	e7e5      	b.n	d52dc <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d5310 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   d5310:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d5312:	2300      	movs	r3, #0
   d5314:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d5318:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d531c:	f10d 0206 	add.w	r2, sp, #6
   d5320:	f10d 0307 	add.w	r3, sp, #7
   d5324:	2102      	movs	r1, #2
   d5326:	f7ff ffb5 	bl	d5294 <_ZN9FuelGauge12readRegisterEhRhS0_>
   d532a:	b940      	cbnz	r0, d533e <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   d532c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5330:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d5334:	b003      	add	sp, #12
   d5336:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   d533a:	f7ff bf79 	b.w	d5230 <_ZN8particle6detail9_getVCellEhh>
}
   d533e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d5342:	b003      	add	sp, #12
   d5344:	f85d fb04 	ldr.w	pc, [sp], #4

000d5348 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   d5348:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d534a:	2300      	movs	r3, #0
   d534c:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d5350:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d5354:	f10d 0206 	add.w	r2, sp, #6
   d5358:	f10d 0307 	add.w	r3, sp, #7
   d535c:	2104      	movs	r1, #4
   d535e:	f7ff ff99 	bl	d5294 <_ZN9FuelGauge12readRegisterEhRhS0_>
   d5362:	b9b0      	cbnz	r0, d5392 <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   d5364:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5368:	f001 f85a 	bl	d6420 <__aeabi_i2d>
   d536c:	4b0a      	ldr	r3, [pc, #40]	; (d5398 <_ZN9FuelGauge6getSoCEv+0x50>)
   d536e:	2200      	movs	r2, #0
   d5370:	f001 f8c0 	bl	d64f4 <__aeabi_dmul>
   d5374:	f001 fbb6 	bl	d6ae4 <__aeabi_d2f>
        return MSB + decimal;
   d5378:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d537c:	ee00 3a10 	vmov	s0, r3
   d5380:	ee07 0a90 	vmov	s15, r0
   d5384:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d5388:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   d538c:	b003      	add	sp, #12
   d538e:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   d5392:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d5396:	e7f9      	b.n	d538c <_ZN9FuelGauge6getSoCEv+0x44>
   d5398:	3f700000 	.word	0x3f700000

000d539c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d539c:	4770      	bx	lr

000d539e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d539e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53a0:	4606      	mov	r6, r0
   d53a2:	4615      	mov	r5, r2
   d53a4:	460c      	mov	r4, r1
   d53a6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53a8:	42bc      	cmp	r4, r7
   d53aa:	d006      	beq.n	d53ba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d53ac:	6833      	ldr	r3, [r6, #0]
   d53ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   d53b2:	689b      	ldr	r3, [r3, #8]
   d53b4:	4630      	mov	r0, r6
   d53b6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d53b8:	e7f6      	b.n	d53a8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d53ba:	4628      	mov	r0, r5
   d53bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53be <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d53be:	7c00      	ldrb	r0, [r0, #16]
   d53c0:	2200      	movs	r2, #0
   d53c2:	f7ff b987 	b.w	d46d4 <hal_i2c_write>

000d53c6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d53c6:	7c00      	ldrb	r0, [r0, #16]
   d53c8:	2100      	movs	r1, #0
   d53ca:	f7ff b98b 	b.w	d46e4 <hal_i2c_available>

000d53ce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d53ce:	7c00      	ldrb	r0, [r0, #16]
   d53d0:	2100      	movs	r1, #0
   d53d2:	f7ff b98f 	b.w	d46f4 <hal_i2c_read>

000d53d6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d53d6:	7c00      	ldrb	r0, [r0, #16]
   d53d8:	2100      	movs	r1, #0
   d53da:	f7ff b993 	b.w	d4704 <hal_i2c_peek>

000d53de <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d53de:	7c00      	ldrb	r0, [r0, #16]
   d53e0:	2100      	movs	r1, #0
   d53e2:	f7ff b997 	b.w	d4714 <hal_i2c_flush>

000d53e6 <_ZN7TwoWireD0Ev>:
   d53e6:	b510      	push	{r4, lr}
   d53e8:	2114      	movs	r1, #20
   d53ea:	4604      	mov	r4, r0
   d53ec:	f000 febd 	bl	d616a <_ZdlPvj>
   d53f0:	4620      	mov	r0, r4
   d53f2:	bd10      	pop	{r4, pc}

000d53f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d53f4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d53f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53fa:	4604      	mov	r4, r0
   d53fc:	4608      	mov	r0, r1
   d53fe:	2100      	movs	r1, #0
   d5400:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5404:	4b03      	ldr	r3, [pc, #12]	; (d5414 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5406:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5408:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d540a:	4611      	mov	r1, r2
   d540c:	f7ff f992 	bl	d4734 <hal_i2c_init>
}
   d5410:	4620      	mov	r0, r4
   d5412:	bd10      	pop	{r4, pc}
   d5414:	000d6e40 	.word	0x000d6e40

000d5418 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5418:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d541a:	2200      	movs	r2, #0
   d541c:	2314      	movs	r3, #20
   d541e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d5422:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d5426:	780b      	ldrb	r3, [r1, #0]
   d5428:	f88d 3008 	strb.w	r3, [sp, #8]
   d542c:	684b      	ldr	r3, [r1, #4]
   d542e:	9303      	str	r3, [sp, #12]
   d5430:	68cb      	ldr	r3, [r1, #12]
   d5432:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d5434:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d5436:	7a0b      	ldrb	r3, [r1, #8]
   d5438:	9305      	str	r3, [sp, #20]
   d543a:	a901      	add	r1, sp, #4
   d543c:	f7ff f992 	bl	d4764 <hal_i2c_request_ex>
}
   d5440:	b007      	add	sp, #28
   d5442:	f85d fb04 	ldr.w	pc, [sp], #4

000d5446 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d5446:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d5448:	2300      	movs	r3, #0
   d544a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d544e:	684a      	ldr	r2, [r1, #4]
   d5450:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d5452:	2314      	movs	r3, #20
    };
   d5454:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d5456:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d545a:	780b      	ldrb	r3, [r1, #0]
    };
   d545c:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d545e:	7a0a      	ldrb	r2, [r1, #8]
   d5460:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d5462:	7c00      	ldrb	r0, [r0, #16]
    };
   d5464:	f88d 3008 	strb.w	r3, [sp, #8]
   d5468:	aa01      	add	r2, sp, #4
   d546a:	4619      	mov	r1, r3
   d546c:	f7ff f922 	bl	d46b4 <hal_i2c_begin_transmission>
}
   d5470:	b007      	add	sp, #28
   d5472:	f85d fb04 	ldr.w	pc, [sp], #4

000d5476 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5476:	7c00      	ldrb	r0, [r0, #16]
   d5478:	2200      	movs	r2, #0
   d547a:	f7ff b923 	b.w	d46c4 <hal_i2c_end_transmission>

000d547e <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d547e:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d5480:	2100      	movs	r1, #0
   d5482:	7c00      	ldrb	r0, [r0, #16]
   d5484:	f7ff f95e 	bl	d4744 <hal_i2c_lock>
}
   d5488:	fab0 f080 	clz	r0, r0
   d548c:	0940      	lsrs	r0, r0, #5
   d548e:	bd08      	pop	{r3, pc}

000d5490 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d5490:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d5492:	2100      	movs	r1, #0
   d5494:	7c00      	ldrb	r0, [r0, #16]
   d5496:	f7ff f95d 	bl	d4754 <hal_i2c_unlock>
}
   d549a:	fab0 f080 	clz	r0, r0
   d549e:	0940      	lsrs	r0, r0, #5
   d54a0:	bd08      	pop	{r3, pc}

000d54a2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d54a2:	4770      	bx	lr

000d54a4 <_ZN9IPAddressD0Ev>:
   d54a4:	b510      	push	{r4, lr}
   d54a6:	2118      	movs	r1, #24
   d54a8:	4604      	mov	r4, r0
   d54aa:	f000 fe5e 	bl	d616a <_ZdlPvj>
   d54ae:	4620      	mov	r0, r4
   d54b0:	bd10      	pop	{r4, pc}

000d54b2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54b2:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d54b4:	7d03      	ldrb	r3, [r0, #20]
   d54b6:	2b06      	cmp	r3, #6
{
   d54b8:	b08d      	sub	sp, #52	; 0x34
   d54ba:	460e      	mov	r6, r1
   d54bc:	f100 0704 	add.w	r7, r0, #4
   d54c0:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d54c4:	d012      	beq.n	d54ec <_ZNK9IPAddress7printToER5Print+0x3a>
   d54c6:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d54ca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d54ce:	220a      	movs	r2, #10
   d54d0:	4630      	mov	r0, r6
   d54d2:	f000 f962 	bl	d579a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d54d6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d54d8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d54da:	d019      	beq.n	d5510 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d54dc:	2c00      	cmp	r4, #0
   d54de:	d0f4      	beq.n	d54ca <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d54e0:	212e      	movs	r1, #46	; 0x2e
   d54e2:	4630      	mov	r0, r6
   d54e4:	f000 f940 	bl	d5768 <_ZN5Print5printEc>
   d54e8:	4404      	add	r4, r0
   d54ea:	e7ee      	b.n	d54ca <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54ec:	232f      	movs	r3, #47	; 0x2f
   d54ee:	466a      	mov	r2, sp
   d54f0:	4639      	mov	r1, r7
   d54f2:	200a      	movs	r0, #10
		buf[0] = 0;
   d54f4:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54f8:	f7ff f93c 	bl	d4774 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d54fc:	4668      	mov	r0, sp
   d54fe:	f001 fba6 	bl	d6c4e <strlen>
   d5502:	6833      	ldr	r3, [r6, #0]
   d5504:	4602      	mov	r2, r0
   d5506:	68db      	ldr	r3, [r3, #12]
   d5508:	4669      	mov	r1, sp
   d550a:	4630      	mov	r0, r6
   d550c:	4798      	blx	r3
   d550e:	4604      	mov	r4, r0
    }
    return n;
}
   d5510:	4620      	mov	r0, r4
   d5512:	b00d      	add	sp, #52	; 0x34
   d5514:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5518 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5518:	b510      	push	{r4, lr}
   d551a:	4b05      	ldr	r3, [pc, #20]	; (d5530 <_ZN9IPAddressC1Ev+0x18>)
   d551c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d551e:	2211      	movs	r2, #17
   d5520:	f840 3b04 	str.w	r3, [r0], #4
   d5524:	2100      	movs	r1, #0
   d5526:	f001 fb49 	bl	d6bbc <memset>
}
   d552a:	4620      	mov	r0, r4
   d552c:	bd10      	pop	{r4, pc}
   d552e:	bf00      	nop
   d5530:	000d6e68 	.word	0x000d6e68

000d5534 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5534:	4603      	mov	r3, r0
   d5536:	4a07      	ldr	r2, [pc, #28]	; (d5554 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5538:	b510      	push	{r4, lr}
   d553a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d553e:	f101 0210 	add.w	r2, r1, #16
   d5542:	f851 4b04 	ldr.w	r4, [r1], #4
   d5546:	f843 4b04 	str.w	r4, [r3], #4
   d554a:	4291      	cmp	r1, r2
   d554c:	d1f9      	bne.n	d5542 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d554e:	780a      	ldrb	r2, [r1, #0]
   d5550:	701a      	strb	r2, [r3, #0]
}
   d5552:	bd10      	pop	{r4, pc}
   d5554:	000d6e68 	.word	0x000d6e68

000d5558 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5558:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d555a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d555e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5562:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5566:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d556a:	2304      	movs	r3, #4
   d556c:	6041      	str	r1, [r0, #4]
   d556e:	7503      	strb	r3, [r0, #20]
}
   d5570:	bd10      	pop	{r4, pc}

000d5572 <_ZN9IPAddressaSEPKh>:
{
   d5572:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5574:	78cb      	ldrb	r3, [r1, #3]
   d5576:	9300      	str	r3, [sp, #0]
   d5578:	788b      	ldrb	r3, [r1, #2]
   d557a:	784a      	ldrb	r2, [r1, #1]
   d557c:	7809      	ldrb	r1, [r1, #0]
   d557e:	f7ff ffeb 	bl	d5558 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5582:	b002      	add	sp, #8
   d5584:	bd10      	pop	{r4, pc}
	...

000d5588 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5588:	4b01      	ldr	r3, [pc, #4]	; (d5590 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d558a:	4a02      	ldr	r2, [pc, #8]	; (d5594 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d558c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d558e:	4770      	bx	lr
   d5590:	2003e74c 	.word	0x2003e74c
   d5594:	000d6e74 	.word	0x000d6e74

000d5598 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5598:	2300      	movs	r3, #0
   d559a:	6840      	ldr	r0, [r0, #4]
   d559c:	461a      	mov	r2, r3
   d559e:	f7ff ba17 	b.w	d49d0 <network_connect>

000d55a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d55a2:	6840      	ldr	r0, [r0, #4]
   d55a4:	2200      	movs	r2, #0
   d55a6:	2102      	movs	r1, #2
   d55a8:	f7ff ba22 	b.w	d49f0 <network_disconnect>

000d55ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d55ac:	2200      	movs	r2, #0
   d55ae:	6840      	ldr	r0, [r0, #4]
   d55b0:	4611      	mov	r1, r2
   d55b2:	f7ff ba15 	b.w	d49e0 <network_connecting>

000d55b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d55b6:	2200      	movs	r2, #0
   d55b8:	6840      	ldr	r0, [r0, #4]
   d55ba:	4611      	mov	r1, r2
   d55bc:	f7ff ba20 	b.w	d4a00 <network_ready>

000d55c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d55c0:	2300      	movs	r3, #0
   d55c2:	6840      	ldr	r0, [r0, #4]
   d55c4:	461a      	mov	r2, r3
   d55c6:	4619      	mov	r1, r3
   d55c8:	f7ff ba22 	b.w	d4a10 <network_on>

000d55cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d55cc:	2300      	movs	r3, #0
   d55ce:	6840      	ldr	r0, [r0, #4]
   d55d0:	461a      	mov	r2, r3
   d55d2:	4619      	mov	r1, r3
   d55d4:	f7ff ba24 	b.w	d4a20 <network_off>

000d55d8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d55d8:	6840      	ldr	r0, [r0, #4]
   d55da:	2100      	movs	r1, #0
   d55dc:	f7ff ba48 	b.w	d4a70 <network_is_on>

000d55e0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d55e0:	6840      	ldr	r0, [r0, #4]
   d55e2:	2100      	movs	r1, #0
   d55e4:	f7ff ba4c 	b.w	d4a80 <network_is_off>

000d55e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d55e8:	6840      	ldr	r0, [r0, #4]
   d55ea:	2200      	movs	r2, #0
   d55ec:	f081 0101 	eor.w	r1, r1, #1
   d55f0:	f7ff ba1e 	b.w	d4a30 <network_listen>

000d55f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d55f4:	6840      	ldr	r0, [r0, #4]
   d55f6:	2200      	movs	r2, #0
   d55f8:	f7ff ba2a 	b.w	d4a50 <network_set_listen_timeout>

000d55fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d55fc:	2200      	movs	r2, #0
   d55fe:	6840      	ldr	r0, [r0, #4]
   d5600:	4611      	mov	r1, r2
   d5602:	f7ff ba2d 	b.w	d4a60 <network_get_listen_timeout>

000d5606 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5606:	2200      	movs	r2, #0
   d5608:	6840      	ldr	r0, [r0, #4]
   d560a:	4611      	mov	r1, r2
   d560c:	f7ff ba18 	b.w	d4a40 <network_listening>

000d5610 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5614:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5616:	b095      	sub	sp, #84	; 0x54
   d5618:	4616      	mov	r6, r2
   d561a:	460d      	mov	r5, r1
   d561c:	4607      	mov	r7, r0
    IPAddress addr;
   d561e:	f7ff ff7b 	bl	d5518 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5622:	4621      	mov	r1, r4
   d5624:	2218      	movs	r2, #24
   d5626:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5628:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d562a:	f001 fac7 	bl	d6bbc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d562e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5630:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5634:	4621      	mov	r1, r4
   d5636:	466b      	mov	r3, sp
   d5638:	aa0c      	add	r2, sp, #48	; 0x30
   d563a:	4630      	mov	r0, r6
   d563c:	f7ff f8aa 	bl	d4794 <netdb_getaddrinfo>
    if (!r) {
   d5640:	4604      	mov	r4, r0
   d5642:	2800      	cmp	r0, #0
   d5644:	d146      	bne.n	d56d4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5646:	4602      	mov	r2, r0
   d5648:	2101      	movs	r1, #1
   d564a:	6868      	ldr	r0, [r5, #4]
   d564c:	f7ff f9d8 	bl	d4a00 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5650:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5652:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5654:	4622      	mov	r2, r4
   d5656:	6868      	ldr	r0, [r5, #4]
   d5658:	f7ff f9d2 	bl	d4a00 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d565c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d565e:	4681      	mov	r9, r0
        bool ok = false;
   d5660:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5662:	2e00      	cmp	r6, #0
   d5664:	d036      	beq.n	d56d4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5666:	2900      	cmp	r1, #0
   d5668:	d134      	bne.n	d56d4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d566a:	6873      	ldr	r3, [r6, #4]
   d566c:	2b02      	cmp	r3, #2
   d566e:	d003      	beq.n	d5678 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5670:	2b0a      	cmp	r3, #10
   d5672:	d00b      	beq.n	d568c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5674:	69f6      	ldr	r6, [r6, #28]
   d5676:	e7f4      	b.n	d5662 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5678:	f1b8 0f00 	cmp.w	r8, #0
   d567c:	d004      	beq.n	d5688 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d567e:	6971      	ldr	r1, [r6, #20]
   d5680:	4638      	mov	r0, r7
   d5682:	3104      	adds	r1, #4
   d5684:	f7ff ff75 	bl	d5572 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5688:	4641      	mov	r1, r8
   d568a:	e7f3      	b.n	d5674 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d568c:	f1b9 0f00 	cmp.w	r9, #0
   d5690:	d101      	bne.n	d5696 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5692:	4649      	mov	r1, r9
   d5694:	e7ee      	b.n	d5674 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5696:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5698:	2210      	movs	r2, #16
   d569a:	a801      	add	r0, sp, #4
   d569c:	f001 fa8e 	bl	d6bbc <memset>
                    a.v = 6;
   d56a0:	2306      	movs	r3, #6
   d56a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d56a6:	ad01      	add	r5, sp, #4
   d56a8:	f104 0308 	add.w	r3, r4, #8
   d56ac:	3418      	adds	r4, #24
   d56ae:	6818      	ldr	r0, [r3, #0]
   d56b0:	6859      	ldr	r1, [r3, #4]
   d56b2:	462a      	mov	r2, r5
   d56b4:	c203      	stmia	r2!, {r0, r1}
   d56b6:	3308      	adds	r3, #8
   d56b8:	42a3      	cmp	r3, r4
   d56ba:	4615      	mov	r5, r2
   d56bc:	d1f7      	bne.n	d56ae <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d56be:	a901      	add	r1, sp, #4
   d56c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d56c2:	ad07      	add	r5, sp, #28
   d56c4:	f7ff ff36 	bl	d5534 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d56c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d56ca:	1d3c      	adds	r4, r7, #4
   d56cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d56ce:	682b      	ldr	r3, [r5, #0]
   d56d0:	7023      	strb	r3, [r4, #0]
   d56d2:	e7de      	b.n	d5692 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d56d4:	9800      	ldr	r0, [sp, #0]
   d56d6:	f7ff f855 	bl	d4784 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d56da:	4638      	mov	r0, r7
   d56dc:	b015      	add	sp, #84	; 0x54
   d56de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d56e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d56e4:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d56e6:	4a03      	ldr	r2, [pc, #12]	; (d56f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d56e8:	601a      	str	r2, [r3, #0]
   d56ea:	2200      	movs	r2, #0
   d56ec:	605a      	str	r2, [r3, #4]

} // spark
   d56ee:	4770      	bx	lr
   d56f0:	2003e750 	.word	0x2003e750
   d56f4:	000d6e80 	.word	0x000d6e80

000d56f8 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d56f8:	b508      	push	{r3, lr}
            return &Wire1;
   d56fa:	f000 fd09 	bl	d6110 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d56fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d5702:	f7ff bebc 	b.w	d547e <_ZN7TwoWire4lockEv>

000d5706 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d5706:	b510      	push	{r4, lr}
   d5708:	4604      	mov	r4, r0
    lock_(_lock)
   d570a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d570c:	b109      	cbz	r1, d5712 <_ZN4PMICC1Eb+0xc>
        lock();
   d570e:	f7ff fff3 	bl	d56f8 <_ZN4PMIC4lockEv.constprop.0>
}
   d5712:	4620      	mov	r0, r4
   d5714:	bd10      	pop	{r4, pc}

000d5716 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d5716:	b508      	push	{r3, lr}
            return &Wire1;
   d5718:	f000 fcfa 	bl	d6110 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d571c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d5720:	f7ff beb6 	b.w	d5490 <_ZN7TwoWire6unlockEv>

000d5724 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   d5724:	b510      	push	{r4, lr}
    if (lock_) {
   d5726:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   d5728:	4604      	mov	r4, r0
    if (lock_) {
   d572a:	b10b      	cbz	r3, d5730 <_ZN4PMICD1Ev+0xc>
        unlock();
   d572c:	f7ff fff3 	bl	d5716 <_ZN4PMIC6unlockEv>
}
   d5730:	4620      	mov	r0, r4
   d5732:	bd10      	pop	{r4, pc}

000d5734 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5736:	4606      	mov	r6, r0
   d5738:	460d      	mov	r5, r1
  size_t n = 0;
   d573a:	188f      	adds	r7, r1, r2
   d573c:	2400      	movs	r4, #0
  while (size--) {
   d573e:	42bd      	cmp	r5, r7
   d5740:	d00c      	beq.n	d575c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5742:	6833      	ldr	r3, [r6, #0]
   d5744:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5748:	689b      	ldr	r3, [r3, #8]
   d574a:	4630      	mov	r0, r6
   d574c:	4798      	blx	r3
     if (chunk>=0)
   d574e:	1e03      	subs	r3, r0, #0
   d5750:	db01      	blt.n	d5756 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5752:	441c      	add	r4, r3
  while (size--) {
   d5754:	e7f3      	b.n	d573e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5756:	2c00      	cmp	r4, #0
   d5758:	bf08      	it	eq
   d575a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d575c:	4620      	mov	r0, r4
   d575e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5760 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5760:	b508      	push	{r3, lr}
  return write(str);
   d5762:	f7fe ff55 	bl	d4610 <_ZN5Print5writeEPKc>
}
   d5766:	bd08      	pop	{r3, pc}

000d5768 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5768:	6803      	ldr	r3, [r0, #0]
   d576a:	689b      	ldr	r3, [r3, #8]
   d576c:	4718      	bx	r3

000d576e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d576e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5770:	210d      	movs	r1, #13
{
   d5772:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5774:	f7ff fff8 	bl	d5768 <_ZN5Print5printEc>
  n += print('\n');
   d5778:	210a      	movs	r1, #10
  size_t n = print('\r');
   d577a:	4604      	mov	r4, r0
  n += print('\n');
   d577c:	4628      	mov	r0, r5
   d577e:	f7ff fff3 	bl	d5768 <_ZN5Print5printEc>
  return n;
}
   d5782:	4420      	add	r0, r4
   d5784:	bd38      	pop	{r3, r4, r5, pc}

000d5786 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5786:	b538      	push	{r3, r4, r5, lr}
   d5788:	4605      	mov	r5, r0
  return write(str);
   d578a:	f7fe ff41 	bl	d4610 <_ZN5Print5writeEPKc>
   d578e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5790:	4628      	mov	r0, r5
   d5792:	f7ff ffec 	bl	d576e <_ZN5Print7printlnEv>
  return n;
}
   d5796:	4420      	add	r0, r4
   d5798:	bd38      	pop	{r3, r4, r5, pc}

000d579a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d579a:	b530      	push	{r4, r5, lr}
   d579c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d579e:	2300      	movs	r3, #0
   d57a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d57a4:	2a01      	cmp	r2, #1
   d57a6:	bf98      	it	ls
   d57a8:	220a      	movls	r2, #10
   d57aa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d57ac:	460d      	mov	r5, r1
   d57ae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d57b2:	fb01 5312 	mls	r3, r1, r2, r5
   d57b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d57ba:	2b09      	cmp	r3, #9
   d57bc:	bf94      	ite	ls
   d57be:	3330      	addls	r3, #48	; 0x30
   d57c0:	3337      	addhi	r3, #55	; 0x37
   d57c2:	b2db      	uxtb	r3, r3
  } while(n);
   d57c4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d57c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d57ca:	d9ef      	bls.n	d57ac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d57cc:	4621      	mov	r1, r4
   d57ce:	f7fe ff1f 	bl	d4610 <_ZN5Print5writeEPKc>
}
   d57d2:	b00b      	add	sp, #44	; 0x2c
   d57d4:	bd30      	pop	{r4, r5, pc}
	...

000d57d8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d57d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57dc:	ec55 4b10 	vmov	r4, r5, d0
   d57e0:	4606      	mov	r6, r0
   d57e2:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d57e4:	ee10 2a10 	vmov	r2, s0
   d57e8:	ee10 0a10 	vmov	r0, s0
   d57ec:	462b      	mov	r3, r5
   d57ee:	4629      	mov	r1, r5
   d57f0:	f001 f91a 	bl	d6a28 <__aeabi_dcmpun>
   d57f4:	b140      	cbz	r0, d5808 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d57f6:	4953      	ldr	r1, [pc, #332]	; (d5944 <_ZN5Print10printFloatEdh+0x16c>)
   d57f8:	4630      	mov	r0, r6
   d57fa:	f7fe ff09 	bl	d4610 <_ZN5Print5writeEPKc>
   d57fe:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d5800:	4650      	mov	r0, sl
   d5802:	b003      	add	sp, #12
   d5804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d5808:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d580c:	4b4e      	ldr	r3, [pc, #312]	; (d5948 <_ZN5Print10printFloatEdh+0x170>)
   d580e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5812:	4620      	mov	r0, r4
   d5814:	4649      	mov	r1, r9
   d5816:	f001 f907 	bl	d6a28 <__aeabi_dcmpun>
   d581a:	b948      	cbnz	r0, d5830 <_ZN5Print10printFloatEdh+0x58>
   d581c:	4b4a      	ldr	r3, [pc, #296]	; (d5948 <_ZN5Print10printFloatEdh+0x170>)
   d581e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5822:	4620      	mov	r0, r4
   d5824:	4649      	mov	r1, r9
   d5826:	f001 f8e1 	bl	d69ec <__aeabi_dcmple>
   d582a:	b908      	cbnz	r0, d5830 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d582c:	4947      	ldr	r1, [pc, #284]	; (d594c <_ZN5Print10printFloatEdh+0x174>)
   d582e:	e7e3      	b.n	d57f8 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5830:	4b47      	ldr	r3, [pc, #284]	; (d5950 <_ZN5Print10printFloatEdh+0x178>)
   d5832:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5836:	4620      	mov	r0, r4
   d5838:	4629      	mov	r1, r5
   d583a:	f001 f8eb 	bl	d6a14 <__aeabi_dcmpgt>
   d583e:	b108      	cbz	r0, d5844 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d5840:	4944      	ldr	r1, [pc, #272]	; (d5954 <_ZN5Print10printFloatEdh+0x17c>)
   d5842:	e7d9      	b.n	d57f8 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5844:	4b44      	ldr	r3, [pc, #272]	; (d5958 <_ZN5Print10printFloatEdh+0x180>)
   d5846:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d584a:	4620      	mov	r0, r4
   d584c:	4629      	mov	r1, r5
   d584e:	f001 f8c3 	bl	d69d8 <__aeabi_dcmplt>
   d5852:	2800      	cmp	r0, #0
   d5854:	d1f4      	bne.n	d5840 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d5856:	2200      	movs	r2, #0
   d5858:	2300      	movs	r3, #0
   d585a:	4620      	mov	r0, r4
   d585c:	4629      	mov	r1, r5
   d585e:	f001 f8bb 	bl	d69d8 <__aeabi_dcmplt>
   d5862:	b1d0      	cbz	r0, d589a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d5864:	212d      	movs	r1, #45	; 0x2d
   d5866:	4630      	mov	r0, r6
   d5868:	f7ff ff7e 	bl	d5768 <_ZN5Print5printEc>
     number = -number;
   d586c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d5870:	4682      	mov	sl, r0
     number = -number;
   d5872:	461d      	mov	r5, r3
  double rounding = 0.5;
   d5874:	4939      	ldr	r1, [pc, #228]	; (d595c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d5876:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d5964 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d587a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d587e:	2000      	movs	r0, #0
    rounding /= 10.0;
   d5880:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d5884:	fa5f f38b 	uxtb.w	r3, fp
   d5888:	429f      	cmp	r7, r3
   d588a:	d908      	bls.n	d589e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d588c:	4642      	mov	r2, r8
   d588e:	464b      	mov	r3, r9
   d5890:	f000 ff5a 	bl	d6748 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d5894:	f10b 0b01 	add.w	fp, fp, #1
   d5898:	e7f4      	b.n	d5884 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d589a:	4682      	mov	sl, r0
   d589c:	e7ea      	b.n	d5874 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d589e:	4622      	mov	r2, r4
   d58a0:	462b      	mov	r3, r5
   d58a2:	f000 fc71 	bl	d6188 <__adddf3>
   d58a6:	460d      	mov	r5, r1
   d58a8:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d58aa:	f001 f8fb 	bl	d6aa4 <__aeabi_d2uiz>
   d58ae:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d58b0:	f000 fda6 	bl	d6400 <__aeabi_ui2d>
   d58b4:	4602      	mov	r2, r0
   d58b6:	460b      	mov	r3, r1
   d58b8:	4620      	mov	r0, r4
   d58ba:	4629      	mov	r1, r5
   d58bc:	f000 fc62 	bl	d6184 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d58c0:	220a      	movs	r2, #10
   d58c2:	4604      	mov	r4, r0
   d58c4:	460d      	mov	r5, r1
   d58c6:	4630      	mov	r0, r6
   d58c8:	4641      	mov	r1, r8
   d58ca:	f7ff ff66 	bl	d579a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d58ce:	4482      	add	sl, r0
  if (digits > 0) {
   d58d0:	b127      	cbz	r7, d58dc <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d58d2:	4923      	ldr	r1, [pc, #140]	; (d5960 <_ZN5Print10printFloatEdh+0x188>)
   d58d4:	4630      	mov	r0, r6
   d58d6:	f7fe fe9b 	bl	d4610 <_ZN5Print5writeEPKc>
    n += print(".");
   d58da:	4482      	add	sl, r0
    remainder *= 10.0;
   d58dc:	f8df 9084 	ldr.w	r9, [pc, #132]	; d5964 <_ZN5Print10printFloatEdh+0x18c>
   d58e0:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d58e4:	3f01      	subs	r7, #1
   d58e6:	b2ff      	uxtb	r7, r7
   d58e8:	2fff      	cmp	r7, #255	; 0xff
   d58ea:	d089      	beq.n	d5800 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d58ec:	4642      	mov	r2, r8
   d58ee:	464b      	mov	r3, r9
   d58f0:	4620      	mov	r0, r4
   d58f2:	4629      	mov	r1, r5
   d58f4:	f000 fdfe 	bl	d64f4 <__aeabi_dmul>
   d58f8:	4604      	mov	r4, r0
   d58fa:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d58fc:	f001 f8aa 	bl	d6a54 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d5900:	f1b0 0b00 	subs.w	fp, r0, #0
   d5904:	da1a      	bge.n	d593c <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d5906:	212d      	movs	r1, #45	; 0x2d
   d5908:	4630      	mov	r0, r6
   d590a:	f7ff ff2d 	bl	d5768 <_ZN5Print5printEc>
            val = -n;
   d590e:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d5912:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d5914:	220a      	movs	r2, #10
   d5916:	4630      	mov	r0, r6
   d5918:	9301      	str	r3, [sp, #4]
   d591a:	f7ff ff3e 	bl	d579a <_ZN5Print11printNumberEmh>
   d591e:	9b01      	ldr	r3, [sp, #4]
   d5920:	4418      	add	r0, r3
    n += print(toPrint);
   d5922:	4482      	add	sl, r0
    remainder -= toPrint;
   d5924:	4658      	mov	r0, fp
   d5926:	f000 fd7b 	bl	d6420 <__aeabi_i2d>
   d592a:	4602      	mov	r2, r0
   d592c:	460b      	mov	r3, r1
   d592e:	4620      	mov	r0, r4
   d5930:	4629      	mov	r1, r5
   d5932:	f000 fc27 	bl	d6184 <__aeabi_dsub>
   d5936:	4604      	mov	r4, r0
   d5938:	460d      	mov	r5, r1
  while (digits-- > 0)
   d593a:	e7d3      	b.n	d58e4 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d593c:	4659      	mov	r1, fp
        size_t t = 0;
   d593e:	2300      	movs	r3, #0
   d5940:	e7e8      	b.n	d5914 <_ZN5Print10printFloatEdh+0x13c>
   d5942:	bf00      	nop
   d5944:	000d6eb4 	.word	0x000d6eb4
   d5948:	7fefffff 	.word	0x7fefffff
   d594c:	000d6eb8 	.word	0x000d6eb8
   d5950:	41efffff 	.word	0x41efffff
   d5954:	000d6ebc 	.word	0x000d6ebc
   d5958:	c1efffff 	.word	0xc1efffff
   d595c:	3fe00000 	.word	0x3fe00000
   d5960:	000d6eec 	.word	0x000d6eec
   d5964:	40240000 	.word	0x40240000

000d5968 <_ZN5Print5printEfi>:
{
   d5968:	b538      	push	{r3, r4, r5, lr}
   d596a:	4604      	mov	r4, r0
   d596c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d5970:	b2cd      	uxtb	r5, r1
   d5972:	f000 fd67 	bl	d6444 <__aeabi_f2d>
   d5976:	ec41 0b10 	vmov	d0, r0, r1
   d597a:	4629      	mov	r1, r5
   d597c:	4620      	mov	r0, r4
}
   d597e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d5982:	f7ff bf29 	b.w	d57d8 <_ZN5Print10printFloatEdh>

000d5986 <_ZN5Print7printlnEdi>:
{
   d5986:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d5988:	b2c9      	uxtb	r1, r1
{
   d598a:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d598c:	f7ff ff24 	bl	d57d8 <_ZN5Print10printFloatEdh>
   d5990:	4604      	mov	r4, r0
  n += println();
   d5992:	4628      	mov	r0, r5
   d5994:	f7ff feeb 	bl	d576e <_ZN5Print7printlnEv>
}
   d5998:	4420      	add	r0, r4
   d599a:	bd38      	pop	{r3, r4, r5, pc}

000d599c <_ZN5Print7printlnEfi>:
{
   d599c:	b538      	push	{r3, r4, r5, lr}
   d599e:	4604      	mov	r4, r0
   d59a0:	ee10 0a10 	vmov	r0, s0
   d59a4:	460d      	mov	r5, r1
    return println((double)num, digits);
   d59a6:	f000 fd4d 	bl	d6444 <__aeabi_f2d>
   d59aa:	ec41 0b10 	vmov	d0, r0, r1
   d59ae:	4629      	mov	r1, r5
   d59b0:	4620      	mov	r0, r4
}
   d59b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d59b6:	f7ff bfe6 	b.w	d5986 <_ZN5Print7printlnEdi>

000d59ba <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d59ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59be:	b086      	sub	sp, #24
   d59c0:	af00      	add	r7, sp, #0
   d59c2:	4605      	mov	r5, r0
   d59c4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d59c6:	1d38      	adds	r0, r7, #4
   d59c8:	2114      	movs	r1, #20
{
   d59ca:	4614      	mov	r4, r2
    va_copy(args2, args);
   d59cc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d59ce:	f7ff f877 	bl	d4ac0 <vsnprintf>

    if (n<bufsize)
   d59d2:	2813      	cmp	r0, #19
   d59d4:	d80e      	bhi.n	d59f4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d59d6:	1d39      	adds	r1, r7, #4
   d59d8:	4628      	mov	r0, r5
   d59da:	f7fe fe19 	bl	d4610 <_ZN5Print5writeEPKc>
   d59de:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d59e0:	b11e      	cbz	r6, d59ea <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d59e2:	4628      	mov	r0, r5
   d59e4:	f7ff fec3 	bl	d576e <_ZN5Print7printlnEv>
   d59e8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d59ea:	4620      	mov	r0, r4
   d59ec:	3718      	adds	r7, #24
   d59ee:	46bd      	mov	sp, r7
   d59f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d59f4:	f100 0308 	add.w	r3, r0, #8
   d59f8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d59fc:	46e8      	mov	r8, sp
        char bigger[n+1];
   d59fe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5a02:	4622      	mov	r2, r4
   d5a04:	1c41      	adds	r1, r0, #1
   d5a06:	683b      	ldr	r3, [r7, #0]
   d5a08:	4668      	mov	r0, sp
   d5a0a:	f7ff f859 	bl	d4ac0 <vsnprintf>
  return write(str);
   d5a0e:	4669      	mov	r1, sp
   d5a10:	4628      	mov	r0, r5
   d5a12:	f7fe fdfd 	bl	d4610 <_ZN5Print5writeEPKc>
   d5a16:	4604      	mov	r4, r0
   d5a18:	46c5      	mov	sp, r8
   d5a1a:	e7e1      	b.n	d59e0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5a1c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5a1c:	b510      	push	{r4, lr}
   d5a1e:	4604      	mov	r4, r0
   d5a20:	f7ff f91e 	bl	d4c60 <_ZNSt14_Function_baseD1Ev>
   d5a24:	4620      	mov	r0, r4
   d5a26:	bd10      	pop	{r4, pc}

000d5a28 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5a28:	4803      	ldr	r0, [pc, #12]	; (d5a38 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5a2a:	4a04      	ldr	r2, [pc, #16]	; (d5a3c <_GLOBAL__sub_I_RGB+0x14>)
   d5a2c:	4904      	ldr	r1, [pc, #16]	; (d5a40 <_GLOBAL__sub_I_RGB+0x18>)
   d5a2e:	2300      	movs	r3, #0
   d5a30:	6083      	str	r3, [r0, #8]
   d5a32:	f000 bb95 	b.w	d6160 <__aeabi_atexit>
   d5a36:	bf00      	nop
   d5a38:	2003e758 	.word	0x2003e758
   d5a3c:	2003e234 	.word	0x2003e234
   d5a40:	000d5a1d 	.word	0x000d5a1d

000d5a44 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5a44:	b510      	push	{r4, lr}
   d5a46:	4604      	mov	r4, r0
   d5a48:	4608      	mov	r0, r1
{
    _spi = spi;
   d5a4a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5a4c:	f7fe feaa 	bl	d47a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5a50:	2300      	movs	r3, #0
   d5a52:	6063      	str	r3, [r4, #4]
}
   d5a54:	4620      	mov	r0, r4
   d5a56:	bd10      	pop	{r4, pc}

000d5a58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5a58:	b510      	push	{r4, lr}
   d5a5a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5a5c:	6800      	ldr	r0, [r0, #0]
   d5a5e:	b118      	cbz	r0, d5a68 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5a60:	f7ff f81e 	bl	d4aa0 <free>
            wakeupSource_ = nullptr;
   d5a64:	2300      	movs	r3, #0
   d5a66:	6023      	str	r3, [r4, #0]
        }
    }
   d5a68:	bd10      	pop	{r4, pc}

000d5a6a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5a6a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d5a6c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d5a70:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d5a72:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5a74:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d5a76:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d5a7a:	f8c0 2006 	str.w	r2, [r0, #6]
   d5a7e:	889b      	ldrh	r3, [r3, #4]
   d5a80:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5a82:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5a84:	f7ff ffe8 	bl	d5a58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d5a88:	682b      	ldr	r3, [r5, #0]
   d5a8a:	b113      	cbz	r3, d5a92 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d5a8c:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d5a8e:	2300      	movs	r3, #0
   d5a90:	602b      	str	r3, [r5, #0]
    }
   d5a92:	4620      	mov	r0, r4
   d5a94:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5a98 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d5a98:	b538      	push	{r3, r4, r5, lr}
   d5a9a:	460c      	mov	r4, r1
   d5a9c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d5a9e:	f7ff ffdb 	bl	d5a58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d5aa2:	b144      	cbz	r4, d5ab6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d5aa4:	8820      	ldrh	r0, [r4, #0]
   d5aa6:	f7fe fff3 	bl	d4a90 <malloc>
   d5aaa:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d5aac:	b128      	cbz	r0, d5aba <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d5aae:	8822      	ldrh	r2, [r4, #0]
   d5ab0:	4621      	mov	r1, r4
   d5ab2:	f001 f875 	bl	d6ba0 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d5ab6:	2000      	movs	r0, #0
    }
   d5ab8:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d5aba:	4801      	ldr	r0, [pc, #4]	; (d5ac0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d5abc:	e7fc      	b.n	d5ab8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d5abe:	bf00      	nop
   d5ac0:	fffffefc 	.word	0xfffffefc

000d5ac4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d5ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5ac6:	4d2d      	ldr	r5, [pc, #180]	; (d5b7c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d5ac8:	7d0b      	ldrb	r3, [r1, #20]
   d5aca:	4604      	mov	r4, r0
   d5acc:	b08b      	sub	sp, #44	; 0x2c
   d5ace:	4608      	mov	r0, r1
   d5ad0:	1daf      	adds	r7, r5, #6
   d5ad2:	2b00      	cmp	r3, #0
   d5ad4:	d038      	beq.n	d5b48 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d5ad6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d5ad8:	791b      	ldrb	r3, [r3, #4]
   d5ada:	2b00      	cmp	r3, #0
   d5adc:	d034      	beq.n	d5b48 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d5ade:	2200      	movs	r2, #0
    SleepResult() {}
   d5ae0:	4b27      	ldr	r3, [pc, #156]	; (d5b80 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d5ae2:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d5ae4:	a902      	add	r1, sp, #8
   d5ae6:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d5ae8:	9202      	str	r2, [sp, #8]
   d5aea:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d5aee:	f88d 200e 	strb.w	r2, [sp, #14]
   d5af2:	f7fe ff33 	bl	d495c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d5af6:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d5afa:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d5afe:	b200      	sxth	r0, r0
   d5b00:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d5b04:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d5b08:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d5b0a:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d5b0c:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d5b0e:	4628      	mov	r0, r5
   d5b10:	f7ff ffc2 	bl	d5a98 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d5b14:	a802      	add	r0, sp, #8
   d5b16:	f7ff ff9f 	bl	d5a58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d5b1a:	2300      	movs	r3, #0
   d5b1c:	6023      	str	r3, [r4, #0]
   d5b1e:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d5b20:	71a3      	strb	r3, [r4, #6]
   d5b22:	8123      	strh	r3, [r4, #8]
   d5b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5b28:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d5b2a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d5b2e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d5b30:	683b      	ldr	r3, [r7, #0]
   d5b32:	f8c4 3006 	str.w	r3, [r4, #6]
   d5b36:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d5b38:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d5b3a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d5b3c:	4620      	mov	r0, r4
   d5b3e:	f7ff ffab 	bl	d5a98 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d5b42:	4620      	mov	r0, r4
   d5b44:	b00b      	add	sp, #44	; 0x2c
   d5b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d5b48:	2600      	movs	r6, #0
   d5b4a:	2320      	movs	r3, #32
   d5b4c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d5b50:	4b0c      	ldr	r3, [pc, #48]	; (d5b84 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d5b52:	9300      	str	r3, [sp, #0]
   d5b54:	490c      	ldr	r1, [pc, #48]	; (d5b88 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d5b56:	4633      	mov	r3, r6
   d5b58:	aa02      	add	r2, sp, #8
   d5b5a:	2032      	movs	r0, #50	; 0x32
   d5b5c:	f7fe feaa 	bl	d48b4 <log_message>
    SleepResult() {}
   d5b60:	4b07      	ldr	r3, [pc, #28]	; (d5b80 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d5b62:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d5b64:	a902      	add	r1, sp, #8
        error_ = error;
   d5b66:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d5b6a:	4804      	ldr	r0, [pc, #16]	; (d5b7c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d5b6c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d5b6e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d5b72:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5b76:	f7ff ff78 	bl	d5a6a <_ZN17SystemSleepResultaSEOS_>
   d5b7a:	e7cb      	b.n	d5b14 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d5b7c:	2003e768 	.word	0x2003e768
   d5b80:	ffff0000 	.word	0xffff0000
   d5b84:	000d6ec7 	.word	0x000d6ec7
   d5b88:	000d6ec0 	.word	0x000d6ec0

000d5b8c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b8c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5b8e:	4b09      	ldr	r3, [pc, #36]	; (d5bb4 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5b90:	4c09      	ldr	r4, [pc, #36]	; (d5bb8 <_GLOBAL__sub_I_System+0x2c>)
   d5b92:	2202      	movs	r2, #2
   d5b94:	2000      	movs	r0, #0
   d5b96:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5b98:	4b08      	ldr	r3, [pc, #32]	; (d5bbc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5b9a:	6020      	str	r0, [r4, #0]
   d5b9c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5b9e:	71a0      	strb	r0, [r4, #6]
   d5ba0:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5ba2:	f7fe fe97 	bl	d48d4 <set_system_mode>
SystemClass System;
   d5ba6:	4620      	mov	r0, r4
   d5ba8:	4a05      	ldr	r2, [pc, #20]	; (d5bc0 <_GLOBAL__sub_I_System+0x34>)
   d5baa:	4906      	ldr	r1, [pc, #24]	; (d5bc4 <_GLOBAL__sub_I_System+0x38>)
   d5bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5bb0:	f000 bad6 	b.w	d6160 <__aeabi_atexit>
   d5bb4:	2003e774 	.word	0x2003e774
   d5bb8:	2003e768 	.word	0x2003e768
   d5bbc:	ffff0000 	.word	0xffff0000
   d5bc0:	2003e234 	.word	0x2003e234
   d5bc4:	000d40dd 	.word	0x000d40dd

000d5bc8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d5bc8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5bca:	2000      	movs	r0, #0
   d5bcc:	f7fe fef0 	bl	d49b0 <spark_sync_time_pending>
   d5bd0:	b128      	cbz	r0, d5bde <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5bd2:	f7fe fedd 	bl	d4990 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5bd6:	f080 0001 	eor.w	r0, r0, #1
   d5bda:	b2c0      	uxtb	r0, r0
    }
   d5bdc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5bde:	2001      	movs	r0, #1
   d5be0:	e7fc      	b.n	d5bdc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d5be2 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5be2:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d5be4:	2000      	movs	r0, #0
   d5be6:	f7fe fd45 	bl	d4674 <hal_rtc_time_is_valid>
    if (rtcstate)
   d5bea:	4604      	mov	r4, r0
   d5bec:	b9a0      	cbnz	r0, d5c18 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5bee:	f7fe fe69 	bl	d48c4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5bf2:	2801      	cmp	r0, #1
   d5bf4:	d110      	bne.n	d5c18 <_ZN9TimeClass7isValidEv+0x36>
   d5bf6:	4620      	mov	r0, r4
   d5bf8:	f7fe fe94 	bl	d4924 <system_thread_get_state>
   d5bfc:	b960      	cbnz	r0, d5c18 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d5bfe:	f7ff ffe3 	bl	d5bc8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5c02:	b910      	cbnz	r0, d5c0a <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d5c04:	f7fe feb4 	bl	d4970 <spark_process>
        while (_while() && !_condition()) {
   d5c08:	e7f9      	b.n	d5bfe <_ZN9TimeClass7isValidEv+0x1c>
   d5c0a:	f7ff ffdd 	bl	d5bc8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d5c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d5c12:	2000      	movs	r0, #0
   d5c14:	f7fe bd2e 	b.w	d4674 <hal_rtc_time_is_valid>
}
   d5c18:	4620      	mov	r0, r4
   d5c1a:	bd10      	pop	{r4, pc}

000d5c1c <_ZN9TimeClass3nowEv>:
{
   d5c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d5c1e:	f7ff ffe0 	bl	d5be2 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d5c22:	2210      	movs	r2, #16
   d5c24:	2100      	movs	r1, #0
   d5c26:	4668      	mov	r0, sp
   d5c28:	f000 ffc8 	bl	d6bbc <memset>
    hal_rtc_get_time(&tv, nullptr);
   d5c2c:	2100      	movs	r1, #0
   d5c2e:	4668      	mov	r0, sp
   d5c30:	f7fe fd28 	bl	d4684 <hal_rtc_get_time>
}
   d5c34:	9800      	ldr	r0, [sp, #0]
   d5c36:	b005      	add	sp, #20
   d5c38:	f85d fb04 	ldr.w	pc, [sp], #4

000d5c3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5c3c:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5c3e:	681a      	ldr	r2, [r3, #0]
   d5c40:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5c42:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5c44:	4770      	bx	lr
   d5c46:	bf00      	nop
   d5c48:	2003e1cc 	.word	0x2003e1cc
   d5c4c:	2003e778 	.word	0x2003e778

000d5c50 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5c50:	4770      	bx	lr

000d5c52 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5c52:	7441      	strb	r1, [r0, #17]
}
   d5c54:	4770      	bx	lr

000d5c56 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5c56:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5c58:	7c00      	ldrb	r0, [r0, #16]
   d5c5a:	f7fe fdeb 	bl	d4834 <hal_usart_available_data_for_write>
}
   d5c5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c62:	bd08      	pop	{r3, pc}

000d5c64 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5c64:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5c66:	7c00      	ldrb	r0, [r0, #16]
   d5c68:	f7fe fdbc 	bl	d47e4 <hal_usart_available>
}
   d5c6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c70:	bd08      	pop	{r3, pc}

000d5c72 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5c72:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5c74:	7c00      	ldrb	r0, [r0, #16]
   d5c76:	f7fe fdc5 	bl	d4804 <hal_usart_peek>
}
   d5c7a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5c7e:	bd08      	pop	{r3, pc}

000d5c80 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5c80:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5c82:	7c00      	ldrb	r0, [r0, #16]
   d5c84:	f7fe fdb6 	bl	d47f4 <hal_usart_read>
}
   d5c88:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5c8c:	bd08      	pop	{r3, pc}

000d5c8e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5c8e:	7c00      	ldrb	r0, [r0, #16]
   d5c90:	f7fe bdc0 	b.w	d4814 <hal_usart_flush>

000d5c94 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5c96:	7c45      	ldrb	r5, [r0, #17]
{
   d5c98:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5c9a:	b12d      	cbz	r5, d5ca8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5c9c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5c9e:	b003      	add	sp, #12
   d5ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5ca4:	f7fe bd96 	b.w	d47d4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5ca8:	7c00      	ldrb	r0, [r0, #16]
   d5caa:	9101      	str	r1, [sp, #4]
   d5cac:	f7fe fdc2 	bl	d4834 <hal_usart_available_data_for_write>
   d5cb0:	2800      	cmp	r0, #0
   d5cb2:	9901      	ldr	r1, [sp, #4]
   d5cb4:	dcf2      	bgt.n	d5c9c <_ZN11USARTSerial5writeEh+0x8>
}
   d5cb6:	4628      	mov	r0, r5
   d5cb8:	b003      	add	sp, #12
   d5cba:	bd30      	pop	{r4, r5, pc}

000d5cbc <_ZN11USARTSerialD0Ev>:
   d5cbc:	b510      	push	{r4, lr}
   d5cbe:	2114      	movs	r1, #20
   d5cc0:	4604      	mov	r4, r0
   d5cc2:	f000 fa52 	bl	d616a <_ZdlPvj>
   d5cc6:	4620      	mov	r0, r4
   d5cc8:	bd10      	pop	{r4, pc}
	...

000d5ccc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5ccc:	b510      	push	{r4, lr}
   d5cce:	f04f 0c00 	mov.w	ip, #0
   d5cd2:	4604      	mov	r4, r0
   d5cd4:	4608      	mov	r0, r1
   d5cd6:	4611      	mov	r1, r2
   d5cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5cdc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5ce0:	4a04      	ldr	r2, [pc, #16]	; (d5cf4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5ce2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5ce4:	2201      	movs	r2, #1
  _serial = serial;
   d5ce6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5ce8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5cea:	461a      	mov	r2, r3
   d5cec:	f7fe fd6a 	bl	d47c4 <hal_usart_init>
}
   d5cf0:	4620      	mov	r0, r4
   d5cf2:	bd10      	pop	{r4, pc}
   d5cf4:	000d6f14 	.word	0x000d6f14

000d5cf8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5cfa:	4c1b      	ldr	r4, [pc, #108]	; (d5d68 <_Z22__fetch_global_Serial1v+0x70>)
   d5cfc:	6826      	ldr	r6, [r4, #0]
   d5cfe:	b94e      	cbnz	r6, d5d14 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d5d00:	2084      	movs	r0, #132	; 0x84
   d5d02:	f7fe f9c8 	bl	d4096 <_Znwj>
   d5d06:	4605      	mov	r5, r0
   d5d08:	b118      	cbz	r0, d5d12 <_Z22__fetch_global_Serial1v+0x1a>
   d5d0a:	2284      	movs	r2, #132	; 0x84
   d5d0c:	4631      	mov	r1, r6
   d5d0e:	f000 ff55 	bl	d6bbc <memset>
   d5d12:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5d14:	4d15      	ldr	r5, [pc, #84]	; (d5d6c <_Z22__fetch_global_Serial1v+0x74>)
   d5d16:	682f      	ldr	r7, [r5, #0]
   d5d18:	b94f      	cbnz	r7, d5d2e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d5d1a:	2084      	movs	r0, #132	; 0x84
   d5d1c:	f7fe f9bb 	bl	d4096 <_Znwj>
   d5d20:	4606      	mov	r6, r0
   d5d22:	b118      	cbz	r0, d5d2c <_Z22__fetch_global_Serial1v+0x34>
   d5d24:	2284      	movs	r2, #132	; 0x84
   d5d26:	4639      	mov	r1, r7
   d5d28:	f000 ff48 	bl	d6bbc <memset>
   d5d2c:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d5d2e:	4e10      	ldr	r6, [pc, #64]	; (d5d70 <_Z22__fetch_global_Serial1v+0x78>)
   d5d30:	7831      	ldrb	r1, [r6, #0]
   d5d32:	f3bf 8f5b 	dmb	ish
   d5d36:	f011 0101 	ands.w	r1, r1, #1
   d5d3a:	d112      	bne.n	d5d62 <_Z22__fetch_global_Serial1v+0x6a>
   d5d3c:	4630      	mov	r0, r6
   d5d3e:	9101      	str	r1, [sp, #4]
   d5d40:	f7fe f9af 	bl	d40a2 <__cxa_guard_acquire>
   d5d44:	9901      	ldr	r1, [sp, #4]
   d5d46:	b160      	cbz	r0, d5d62 <_Z22__fetch_global_Serial1v+0x6a>
   d5d48:	6822      	ldr	r2, [r4, #0]
   d5d4a:	682b      	ldr	r3, [r5, #0]
   d5d4c:	4809      	ldr	r0, [pc, #36]	; (d5d74 <_Z22__fetch_global_Serial1v+0x7c>)
   d5d4e:	f7ff ffbd 	bl	d5ccc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5d52:	4630      	mov	r0, r6
   d5d54:	f7fe f9aa 	bl	d40ac <__cxa_guard_release>
   d5d58:	4a07      	ldr	r2, [pc, #28]	; (d5d78 <_Z22__fetch_global_Serial1v+0x80>)
   d5d5a:	4908      	ldr	r1, [pc, #32]	; (d5d7c <_Z22__fetch_global_Serial1v+0x84>)
   d5d5c:	4805      	ldr	r0, [pc, #20]	; (d5d74 <_Z22__fetch_global_Serial1v+0x7c>)
   d5d5e:	f000 f9ff 	bl	d6160 <__aeabi_atexit>
#endif
	return serial1;
}
   d5d62:	4804      	ldr	r0, [pc, #16]	; (d5d74 <_Z22__fetch_global_Serial1v+0x7c>)
   d5d64:	b003      	add	sp, #12
   d5d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5d68:	2003e780 	.word	0x2003e780
   d5d6c:	2003e784 	.word	0x2003e784
   d5d70:	2003e77c 	.word	0x2003e77c
   d5d74:	2003e788 	.word	0x2003e788
   d5d78:	2003e234 	.word	0x2003e234
   d5d7c:	000d5c51 	.word	0x000d5c51

000d5d80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5d80:	7441      	strb	r1, [r0, #17]
}
   d5d82:	4770      	bx	lr

000d5d84 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5d84:	4770      	bx	lr

000d5d86 <_ZN9USBSerial4readEv>:
{
   d5d86:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5d88:	2100      	movs	r1, #0
   d5d8a:	7c00      	ldrb	r0, [r0, #16]
   d5d8c:	f7fe fd7a 	bl	d4884 <HAL_USB_USART_Receive_Data>
}
   d5d90:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5d94:	bd08      	pop	{r3, pc}

000d5d96 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5d96:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5d98:	2101      	movs	r1, #1
   d5d9a:	7c00      	ldrb	r0, [r0, #16]
   d5d9c:	f7fe fd72 	bl	d4884 <HAL_USB_USART_Receive_Data>
}
   d5da0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5da4:	bd08      	pop	{r3, pc}

000d5da6 <_ZN9USBSerial17availableForWriteEv>:
{
   d5da6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5da8:	7c00      	ldrb	r0, [r0, #16]
   d5daa:	f7fe fd63 	bl	d4874 <HAL_USB_USART_Available_Data_For_Write>
}
   d5dae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5db2:	bd08      	pop	{r3, pc}

000d5db4 <_ZN9USBSerial9availableEv>:
{
   d5db4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5db6:	7c00      	ldrb	r0, [r0, #16]
   d5db8:	f7fe fd54 	bl	d4864 <HAL_USB_USART_Available_Data>
}
   d5dbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5dc0:	bd08      	pop	{r3, pc}

000d5dc2 <_ZN9USBSerial5writeEh>:
{
   d5dc2:	b513      	push	{r0, r1, r4, lr}
   d5dc4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5dc6:	7c00      	ldrb	r0, [r0, #16]
{
   d5dc8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5dca:	f7fe fd53 	bl	d4874 <HAL_USB_USART_Available_Data_For_Write>
   d5dce:	2800      	cmp	r0, #0
   d5dd0:	9901      	ldr	r1, [sp, #4]
   d5dd2:	dc01      	bgt.n	d5dd8 <_ZN9USBSerial5writeEh+0x16>
   d5dd4:	7c60      	ldrb	r0, [r4, #17]
   d5dd6:	b120      	cbz	r0, d5de2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5dd8:	7c20      	ldrb	r0, [r4, #16]
   d5dda:	f7fe fd5b 	bl	d4894 <HAL_USB_USART_Send_Data>
   d5dde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5de2:	b002      	add	sp, #8
   d5de4:	bd10      	pop	{r4, pc}

000d5de6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5de6:	7c00      	ldrb	r0, [r0, #16]
   d5de8:	f7fe bd5c 	b.w	d48a4 <HAL_USB_USART_Flush_Data>

000d5dec <_ZN9USBSerialD0Ev>:
   d5dec:	b510      	push	{r4, lr}
   d5dee:	2114      	movs	r1, #20
   d5df0:	4604      	mov	r4, r0
   d5df2:	f000 f9ba 	bl	d616a <_ZdlPvj>
   d5df6:	4620      	mov	r0, r4
   d5df8:	bd10      	pop	{r4, pc}
	...

000d5dfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5dfc:	b510      	push	{r4, lr}
   d5dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e02:	4604      	mov	r4, r0
   d5e04:	4608      	mov	r0, r1
   d5e06:	2100      	movs	r1, #0
   d5e08:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5e0c:	4b04      	ldr	r3, [pc, #16]	; (d5e20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5e0e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5e10:	2301      	movs	r3, #1
  _serial = serial;
   d5e12:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5e14:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5e16:	4611      	mov	r1, r2
   d5e18:	f7fe fd14 	bl	d4844 <HAL_USB_USART_Init>
}
   d5e1c:	4620      	mov	r0, r4
   d5e1e:	bd10      	pop	{r4, pc}
   d5e20:	000d6f44 	.word	0x000d6f44

000d5e24 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5e24:	7c00      	ldrb	r0, [r0, #16]
   d5e26:	2200      	movs	r2, #0
   d5e28:	f7fe bd14 	b.w	d4854 <HAL_USB_USART_Begin>

000d5e2c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5e2c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5e2e:	2214      	movs	r2, #20
{
   d5e30:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5e32:	2100      	movs	r1, #0
   d5e34:	f000 fec2 	bl	d6bbc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5e38:	4620      	mov	r0, r4
   d5e3a:	bd10      	pop	{r4, pc}

000d5e3c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5e3c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5e3e:	4c10      	ldr	r4, [pc, #64]	; (d5e80 <_Z16_fetch_usbserialv+0x44>)
{
   d5e40:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5e42:	a803      	add	r0, sp, #12
   d5e44:	f7ff fff2 	bl	d5e2c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5e48:	7821      	ldrb	r1, [r4, #0]
   d5e4a:	f3bf 8f5b 	dmb	ish
   d5e4e:	f011 0101 	ands.w	r1, r1, #1
   d5e52:	d111      	bne.n	d5e78 <_Z16_fetch_usbserialv+0x3c>
   d5e54:	4620      	mov	r0, r4
   d5e56:	9101      	str	r1, [sp, #4]
   d5e58:	f7fe f923 	bl	d40a2 <__cxa_guard_acquire>
   d5e5c:	9901      	ldr	r1, [sp, #4]
   d5e5e:	b158      	cbz	r0, d5e78 <_Z16_fetch_usbserialv+0x3c>
   d5e60:	aa03      	add	r2, sp, #12
   d5e62:	4808      	ldr	r0, [pc, #32]	; (d5e84 <_Z16_fetch_usbserialv+0x48>)
   d5e64:	f7ff ffca 	bl	d5dfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5e68:	4620      	mov	r0, r4
   d5e6a:	f7fe f91f 	bl	d40ac <__cxa_guard_release>
   d5e6e:	4a06      	ldr	r2, [pc, #24]	; (d5e88 <_Z16_fetch_usbserialv+0x4c>)
   d5e70:	4906      	ldr	r1, [pc, #24]	; (d5e8c <_Z16_fetch_usbserialv+0x50>)
   d5e72:	4804      	ldr	r0, [pc, #16]	; (d5e84 <_Z16_fetch_usbserialv+0x48>)
   d5e74:	f000 f974 	bl	d6160 <__aeabi_atexit>
	return _usbserial;
}
   d5e78:	4802      	ldr	r0, [pc, #8]	; (d5e84 <_Z16_fetch_usbserialv+0x48>)
   d5e7a:	b008      	add	sp, #32
   d5e7c:	bd10      	pop	{r4, pc}
   d5e7e:	bf00      	nop
   d5e80:	2003e79c 	.word	0x2003e79c
   d5e84:	2003e7a0 	.word	0x2003e7a0
   d5e88:	2003e234 	.word	0x2003e234
   d5e8c:	000d5d85 	.word	0x000d5d85

000d5e90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5e90:	4b01      	ldr	r3, [pc, #4]	; (d5e98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5e92:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5e94:	4770      	bx	lr
   d5e96:	bf00      	nop
   d5e98:	2003e1d0 	.word	0x2003e1d0

000d5e9c <serialEventRun>:
{
   d5e9c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5e9e:	4b0b      	ldr	r3, [pc, #44]	; (d5ecc <serialEventRun+0x30>)
   d5ea0:	b143      	cbz	r3, d5eb4 <serialEventRun+0x18>
   d5ea2:	f7ff ffcb 	bl	d5e3c <_Z16_fetch_usbserialv>
   d5ea6:	6803      	ldr	r3, [r0, #0]
   d5ea8:	691b      	ldr	r3, [r3, #16]
   d5eaa:	4798      	blx	r3
   d5eac:	2800      	cmp	r0, #0
   d5eae:	dd01      	ble.n	d5eb4 <serialEventRun+0x18>
        serialEvent();
   d5eb0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5eb4:	4b06      	ldr	r3, [pc, #24]	; (d5ed0 <serialEventRun+0x34>)
   d5eb6:	b143      	cbz	r3, d5eca <serialEventRun+0x2e>
   d5eb8:	f7ff ff1e 	bl	d5cf8 <_Z22__fetch_global_Serial1v>
   d5ebc:	6803      	ldr	r3, [r0, #0]
   d5ebe:	691b      	ldr	r3, [r3, #16]
   d5ec0:	4798      	blx	r3
   d5ec2:	2800      	cmp	r0, #0
   d5ec4:	dd01      	ble.n	d5eca <serialEventRun+0x2e>
        serialEvent1();
   d5ec6:	f3af 8000 	nop.w
}
   d5eca:	bd08      	pop	{r3, pc}
	...

000d5ed4 <_post_loop>:
{
   d5ed4:	b508      	push	{r3, lr}
	serialEventRun();
   d5ed6:	f7ff ffe1 	bl	d5e9c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5eda:	f7fe fbc3 	bl	d4664 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5ede:	4b01      	ldr	r3, [pc, #4]	; (d5ee4 <_post_loop+0x10>)
   d5ee0:	6018      	str	r0, [r3, #0]
}
   d5ee2:	bd08      	pop	{r3, pc}
   d5ee4:	2003e7bc 	.word	0x2003e7bc

000d5ee8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5ee8:	4802      	ldr	r0, [pc, #8]	; (d5ef4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5eea:	4a03      	ldr	r2, [pc, #12]	; (d5ef8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5eec:	4903      	ldr	r1, [pc, #12]	; (d5efc <_Z33system_initialize_user_backup_ramv+0x14>)
   d5eee:	1a12      	subs	r2, r2, r0
   d5ef0:	f000 be56 	b.w	d6ba0 <memcpy>
   d5ef4:	2003f400 	.word	0x2003f400
   d5ef8:	2003f404 	.word	0x2003f404
   d5efc:	000d6fa0 	.word	0x000d6fa0

000d5f00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5f00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f02:	2300      	movs	r3, #0
   d5f04:	9300      	str	r3, [sp, #0]
   d5f06:	461a      	mov	r2, r3
   d5f08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f0c:	f7fe fd1c 	bl	d4948 <system_ctrl_set_result>
}
   d5f10:	b003      	add	sp, #12
   d5f12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5f18 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5f18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5f1a:	8843      	ldrh	r3, [r0, #2]
   d5f1c:	2b0a      	cmp	r3, #10
   d5f1e:	d008      	beq.n	d5f32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5f20:	2b50      	cmp	r3, #80	; 0x50
   d5f22:	d10b      	bne.n	d5f3c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5f24:	4b09      	ldr	r3, [pc, #36]	; (d5f4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5f26:	681b      	ldr	r3, [r3, #0]
   d5f28:	b14b      	cbz	r3, d5f3e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5f2a:	b003      	add	sp, #12
   d5f2c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5f30:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5f32:	f7ff ffe5 	bl	d5f00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5f36:	b003      	add	sp, #12
   d5f38:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f3c:	2300      	movs	r3, #0
   d5f3e:	9300      	str	r3, [sp, #0]
   d5f40:	461a      	mov	r2, r3
   d5f42:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f46:	f7fe fcff 	bl	d4948 <system_ctrl_set_result>
}
   d5f4a:	e7f4      	b.n	d5f36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5f4c:	2003e7b8 	.word	0x2003e7b8

000d5f50 <module_user_init_hook>:
{
   d5f50:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f52:	4c12      	ldr	r4, [pc, #72]	; (d5f9c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5f54:	4812      	ldr	r0, [pc, #72]	; (d5fa0 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f56:	4d13      	ldr	r5, [pc, #76]	; (d5fa4 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5f58:	2100      	movs	r1, #0
   d5f5a:	f7fe fdc9 	bl	d4af0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f5e:	6823      	ldr	r3, [r4, #0]
   d5f60:	42ab      	cmp	r3, r5
   d5f62:	4b11      	ldr	r3, [pc, #68]	; (d5fa8 <module_user_init_hook+0x58>)
   d5f64:	bf0c      	ite	eq
   d5f66:	2201      	moveq	r2, #1
   d5f68:	2200      	movne	r2, #0
   d5f6a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5f6c:	d002      	beq.n	d5f74 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5f6e:	f7ff ffbb 	bl	d5ee8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5f72:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5f74:	f7fe fb6e 	bl	d4654 <HAL_RNG_GetRandomNumber>
   d5f78:	4604      	mov	r4, r0
    srand(seed);
   d5f7a:	f000 fe27 	bl	d6bcc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5f7e:	4b0b      	ldr	r3, [pc, #44]	; (d5fac <module_user_init_hook+0x5c>)
   d5f80:	b113      	cbz	r3, d5f88 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5f82:	4620      	mov	r0, r4
   d5f84:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5f88:	2100      	movs	r1, #0
   d5f8a:	4808      	ldr	r0, [pc, #32]	; (d5fac <module_user_init_hook+0x5c>)
   d5f8c:	f7fe fd18 	bl	d49c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5f94:	4806      	ldr	r0, [pc, #24]	; (d5fb0 <module_user_init_hook+0x60>)
   d5f96:	2100      	movs	r1, #0
   d5f98:	f7fe bccc 	b.w	d4934 <system_ctrl_set_app_request_handler>
   d5f9c:	2003f400 	.word	0x2003f400
   d5fa0:	000d5e91 	.word	0x000d5e91
   d5fa4:	9a271c1e 	.word	0x9a271c1e
   d5fa8:	2003e7b4 	.word	0x2003e7b4
   d5fac:	00000000 	.word	0x00000000
   d5fb0:	000d5f19 	.word	0x000d5f19

000d5fb4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5fb4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5fb6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5fb8:	d902      	bls.n	d5fc0 <pinAvailable+0xc>
    return false;
   d5fba:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5fbc:	b002      	add	sp, #8
   d5fbe:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5fc0:	f1a0 030b 	sub.w	r3, r0, #11
   d5fc4:	2b02      	cmp	r3, #2
   d5fc6:	d81a      	bhi.n	d5ffe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5fc8:	4c17      	ldr	r4, [pc, #92]	; (d6028 <pinAvailable+0x74>)
   d5fca:	7821      	ldrb	r1, [r4, #0]
   d5fcc:	f3bf 8f5b 	dmb	ish
   d5fd0:	f011 0101 	ands.w	r1, r1, #1
   d5fd4:	d10b      	bne.n	d5fee <pinAvailable+0x3a>
   d5fd6:	4620      	mov	r0, r4
   d5fd8:	9101      	str	r1, [sp, #4]
   d5fda:	f7fe f862 	bl	d40a2 <__cxa_guard_acquire>
   d5fde:	9901      	ldr	r1, [sp, #4]
   d5fe0:	b128      	cbz	r0, d5fee <pinAvailable+0x3a>
   d5fe2:	4812      	ldr	r0, [pc, #72]	; (d602c <pinAvailable+0x78>)
   d5fe4:	f7ff fd2e 	bl	d5a44 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5fe8:	4620      	mov	r0, r4
   d5fea:	f7fe f85f 	bl	d40ac <__cxa_guard_release>
   d5fee:	4b0f      	ldr	r3, [pc, #60]	; (d602c <pinAvailable+0x78>)
   d5ff0:	7818      	ldrb	r0, [r3, #0]
   d5ff2:	f7fe fbdf 	bl	d47b4 <hal_spi_is_enabled>
   d5ff6:	2800      	cmp	r0, #0
   d5ff8:	d1df      	bne.n	d5fba <pinAvailable+0x6>
  return true; // 'pin' is available
   d5ffa:	2001      	movs	r0, #1
   d5ffc:	e7de      	b.n	d5fbc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5ffe:	2801      	cmp	r0, #1
   d6000:	d809      	bhi.n	d6016 <pinAvailable+0x62>
   d6002:	f000 f85d 	bl	d60c0 <_Z19__fetch_global_Wirev>
   d6006:	2100      	movs	r1, #0
   d6008:	7c00      	ldrb	r0, [r0, #16]
   d600a:	f7fe fb8b 	bl	d4724 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d600e:	f080 0001 	eor.w	r0, r0, #1
   d6012:	b2c0      	uxtb	r0, r0
   d6014:	e7d2      	b.n	d5fbc <pinAvailable+0x8>
   d6016:	3809      	subs	r0, #9
   d6018:	2801      	cmp	r0, #1
   d601a:	d8ee      	bhi.n	d5ffa <pinAvailable+0x46>
   d601c:	f7ff fe6c 	bl	d5cf8 <_Z22__fetch_global_Serial1v>
   d6020:	7c00      	ldrb	r0, [r0, #16]
   d6022:	f7fe fbff 	bl	d4824 <hal_usart_is_enabled>
   d6026:	e7f2      	b.n	d600e <pinAvailable+0x5a>
   d6028:	2003e238 	.word	0x2003e238
   d602c:	2003e23c 	.word	0x2003e23c

000d6030 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6030:	280d      	cmp	r0, #13
{
   d6032:	b510      	push	{r4, lr}
   d6034:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6036:	bf9c      	itt	ls
   d6038:	340e      	addls	r4, #14
   d603a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d603c:	4620      	mov	r0, r4
   d603e:	f7ff ffb9 	bl	d5fb4 <pinAvailable>
   d6042:	b150      	cbz	r0, d605a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6044:	2103      	movs	r1, #3
   d6046:	4620      	mov	r0, r4
   d6048:	f7fe fb24 	bl	d4694 <HAL_Validate_Pin_Function>
   d604c:	2803      	cmp	r0, #3
   d604e:	d104      	bne.n	d605a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d6050:	4620      	mov	r0, r4
}
   d6052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d6056:	f7fe bb25 	b.w	d46a4 <hal_adc_read>
}
   d605a:	2000      	movs	r0, #0
   d605c:	bd10      	pop	{r4, pc}
	...

000d6060 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6060:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6062:	2300      	movs	r3, #0
   d6064:	2520      	movs	r5, #32
   d6066:	8043      	strh	r3, [r0, #2]
   d6068:	2314      	movs	r3, #20
{
   d606a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d606c:	8003      	strh	r3, [r0, #0]
   d606e:	6085      	str	r5, [r0, #8]
   d6070:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6072:	4906      	ldr	r1, [pc, #24]	; (d608c <_Z17acquireWireBufferv+0x2c>)
   d6074:	4628      	mov	r0, r5
   d6076:	f000 f87c 	bl	d6172 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d607a:	4904      	ldr	r1, [pc, #16]	; (d608c <_Z17acquireWireBufferv+0x2c>)
	};
   d607c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d607e:	4628      	mov	r0, r5
   d6080:	f000 f877 	bl	d6172 <_ZnajRKSt9nothrow_t>
	};
   d6084:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6086:	4620      	mov	r0, r4
   d6088:	bd38      	pop	{r3, r4, r5, pc}
   d608a:	bf00      	nop
   d608c:	000d6f6c 	.word	0x000d6f6c

000d6090 <_Z18acquireWire1Bufferv>:
   d6090:	b538      	push	{r3, r4, r5, lr}
   d6092:	2300      	movs	r3, #0
   d6094:	2520      	movs	r5, #32
   d6096:	8043      	strh	r3, [r0, #2]
   d6098:	2314      	movs	r3, #20
   d609a:	4604      	mov	r4, r0
   d609c:	8003      	strh	r3, [r0, #0]
   d609e:	6085      	str	r5, [r0, #8]
   d60a0:	6105      	str	r5, [r0, #16]
   d60a2:	4906      	ldr	r1, [pc, #24]	; (d60bc <_Z18acquireWire1Bufferv+0x2c>)
   d60a4:	4628      	mov	r0, r5
   d60a6:	f000 f864 	bl	d6172 <_ZnajRKSt9nothrow_t>
   d60aa:	4904      	ldr	r1, [pc, #16]	; (d60bc <_Z18acquireWire1Bufferv+0x2c>)
   d60ac:	6060      	str	r0, [r4, #4]
   d60ae:	4628      	mov	r0, r5
   d60b0:	f000 f85f 	bl	d6172 <_ZnajRKSt9nothrow_t>
   d60b4:	60e0      	str	r0, [r4, #12]
   d60b6:	4620      	mov	r0, r4
   d60b8:	bd38      	pop	{r3, r4, r5, pc}
   d60ba:	bf00      	nop
   d60bc:	000d6f6c 	.word	0x000d6f6c

000d60c0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d60c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d60c2:	4d0f      	ldr	r5, [pc, #60]	; (d6100 <_Z19__fetch_global_Wirev+0x40>)
   d60c4:	7829      	ldrb	r1, [r5, #0]
   d60c6:	f3bf 8f5b 	dmb	ish
   d60ca:	f011 0401 	ands.w	r4, r1, #1
{
   d60ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d60d0:	d113      	bne.n	d60fa <_Z19__fetch_global_Wirev+0x3a>
   d60d2:	4628      	mov	r0, r5
   d60d4:	f7fd ffe5 	bl	d40a2 <__cxa_guard_acquire>
   d60d8:	b178      	cbz	r0, d60fa <_Z19__fetch_global_Wirev+0x3a>
   d60da:	a801      	add	r0, sp, #4
   d60dc:	f7ff ffc0 	bl	d6060 <_Z17acquireWireBufferv>
   d60e0:	aa01      	add	r2, sp, #4
   d60e2:	4621      	mov	r1, r4
   d60e4:	4807      	ldr	r0, [pc, #28]	; (d6104 <_Z19__fetch_global_Wirev+0x44>)
   d60e6:	f7ff f985 	bl	d53f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d60ea:	4628      	mov	r0, r5
   d60ec:	f7fd ffde 	bl	d40ac <__cxa_guard_release>
   d60f0:	4a05      	ldr	r2, [pc, #20]	; (d6108 <_Z19__fetch_global_Wirev+0x48>)
   d60f2:	4906      	ldr	r1, [pc, #24]	; (d610c <_Z19__fetch_global_Wirev+0x4c>)
   d60f4:	4803      	ldr	r0, [pc, #12]	; (d6104 <_Z19__fetch_global_Wirev+0x44>)
   d60f6:	f000 f833 	bl	d6160 <__aeabi_atexit>
	return wire;
}
   d60fa:	4802      	ldr	r0, [pc, #8]	; (d6104 <_Z19__fetch_global_Wirev+0x44>)
   d60fc:	b007      	add	sp, #28
   d60fe:	bd30      	pop	{r4, r5, pc}
   d6100:	2003e7c0 	.word	0x2003e7c0
   d6104:	2003e7c8 	.word	0x2003e7c8
   d6108:	2003e234 	.word	0x2003e234
   d610c:	000d539d 	.word	0x000d539d

000d6110 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d6110:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d6112:	4c0f      	ldr	r4, [pc, #60]	; (d6150 <_Z20__fetch_global_Wire1v+0x40>)
   d6114:	7823      	ldrb	r3, [r4, #0]
   d6116:	f3bf 8f5b 	dmb	ish
   d611a:	07db      	lsls	r3, r3, #31
{
   d611c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d611e:	d413      	bmi.n	d6148 <_Z20__fetch_global_Wire1v+0x38>
   d6120:	4620      	mov	r0, r4
   d6122:	f7fd ffbe 	bl	d40a2 <__cxa_guard_acquire>
   d6126:	b178      	cbz	r0, d6148 <_Z20__fetch_global_Wire1v+0x38>
   d6128:	a801      	add	r0, sp, #4
   d612a:	f7ff ffb1 	bl	d6090 <_Z18acquireWire1Bufferv>
   d612e:	aa01      	add	r2, sp, #4
   d6130:	2101      	movs	r1, #1
   d6132:	4808      	ldr	r0, [pc, #32]	; (d6154 <_Z20__fetch_global_Wire1v+0x44>)
   d6134:	f7ff f95e 	bl	d53f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6138:	4620      	mov	r0, r4
   d613a:	f7fd ffb7 	bl	d40ac <__cxa_guard_release>
   d613e:	4a06      	ldr	r2, [pc, #24]	; (d6158 <_Z20__fetch_global_Wire1v+0x48>)
   d6140:	4906      	ldr	r1, [pc, #24]	; (d615c <_Z20__fetch_global_Wire1v+0x4c>)
   d6142:	4804      	ldr	r0, [pc, #16]	; (d6154 <_Z20__fetch_global_Wire1v+0x44>)
   d6144:	f000 f80c 	bl	d6160 <__aeabi_atexit>
	return wire;
}
   d6148:	4802      	ldr	r0, [pc, #8]	; (d6154 <_Z20__fetch_global_Wire1v+0x44>)
   d614a:	b006      	add	sp, #24
   d614c:	bd10      	pop	{r4, pc}
   d614e:	bf00      	nop
   d6150:	2003e7c4 	.word	0x2003e7c4
   d6154:	2003e7dc 	.word	0x2003e7dc
   d6158:	2003e234 	.word	0x2003e234
   d615c:	000d539d 	.word	0x000d539d

000d6160 <__aeabi_atexit>:
   d6160:	460b      	mov	r3, r1
   d6162:	4601      	mov	r1, r0
   d6164:	4618      	mov	r0, r3
   d6166:	f000 bd0d 	b.w	d6b84 <__cxa_atexit>

000d616a <_ZdlPvj>:
   d616a:	f7fd bf98 	b.w	d409e <_ZdlPv>

000d616e <_ZnwjRKSt9nothrow_t>:
   d616e:	f7fd bf92 	b.w	d4096 <_Znwj>

000d6172 <_ZnajRKSt9nothrow_t>:
   d6172:	f7fd bf92 	b.w	d409a <_Znaj>

000d6176 <_ZSt25__throw_bad_function_callv>:
   d6176:	b508      	push	{r3, lr}
   d6178:	f7fe fcaa 	bl	d4ad0 <abort>

000d617c <__aeabi_drsub>:
   d617c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6180:	e002      	b.n	d6188 <__adddf3>
   d6182:	bf00      	nop

000d6184 <__aeabi_dsub>:
   d6184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6188 <__adddf3>:
   d6188:	b530      	push	{r4, r5, lr}
   d618a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d618e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6192:	ea94 0f05 	teq	r4, r5
   d6196:	bf08      	it	eq
   d6198:	ea90 0f02 	teqeq	r0, r2
   d619c:	bf1f      	itttt	ne
   d619e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d61a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d61a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d61aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d61ae:	f000 80e2 	beq.w	d6376 <__adddf3+0x1ee>
   d61b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d61b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d61ba:	bfb8      	it	lt
   d61bc:	426d      	neglt	r5, r5
   d61be:	dd0c      	ble.n	d61da <__adddf3+0x52>
   d61c0:	442c      	add	r4, r5
   d61c2:	ea80 0202 	eor.w	r2, r0, r2
   d61c6:	ea81 0303 	eor.w	r3, r1, r3
   d61ca:	ea82 0000 	eor.w	r0, r2, r0
   d61ce:	ea83 0101 	eor.w	r1, r3, r1
   d61d2:	ea80 0202 	eor.w	r2, r0, r2
   d61d6:	ea81 0303 	eor.w	r3, r1, r3
   d61da:	2d36      	cmp	r5, #54	; 0x36
   d61dc:	bf88      	it	hi
   d61de:	bd30      	pophi	{r4, r5, pc}
   d61e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d61e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d61e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d61ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d61f0:	d002      	beq.n	d61f8 <__adddf3+0x70>
   d61f2:	4240      	negs	r0, r0
   d61f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d61f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d61fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6204:	d002      	beq.n	d620c <__adddf3+0x84>
   d6206:	4252      	negs	r2, r2
   d6208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d620c:	ea94 0f05 	teq	r4, r5
   d6210:	f000 80a7 	beq.w	d6362 <__adddf3+0x1da>
   d6214:	f1a4 0401 	sub.w	r4, r4, #1
   d6218:	f1d5 0e20 	rsbs	lr, r5, #32
   d621c:	db0d      	blt.n	d623a <__adddf3+0xb2>
   d621e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6222:	fa22 f205 	lsr.w	r2, r2, r5
   d6226:	1880      	adds	r0, r0, r2
   d6228:	f141 0100 	adc.w	r1, r1, #0
   d622c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6230:	1880      	adds	r0, r0, r2
   d6232:	fa43 f305 	asr.w	r3, r3, r5
   d6236:	4159      	adcs	r1, r3
   d6238:	e00e      	b.n	d6258 <__adddf3+0xd0>
   d623a:	f1a5 0520 	sub.w	r5, r5, #32
   d623e:	f10e 0e20 	add.w	lr, lr, #32
   d6242:	2a01      	cmp	r2, #1
   d6244:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6248:	bf28      	it	cs
   d624a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d624e:	fa43 f305 	asr.w	r3, r3, r5
   d6252:	18c0      	adds	r0, r0, r3
   d6254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d625c:	d507      	bpl.n	d626e <__adddf3+0xe6>
   d625e:	f04f 0e00 	mov.w	lr, #0
   d6262:	f1dc 0c00 	rsbs	ip, ip, #0
   d6266:	eb7e 0000 	sbcs.w	r0, lr, r0
   d626a:	eb6e 0101 	sbc.w	r1, lr, r1
   d626e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6272:	d31b      	bcc.n	d62ac <__adddf3+0x124>
   d6274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6278:	d30c      	bcc.n	d6294 <__adddf3+0x10c>
   d627a:	0849      	lsrs	r1, r1, #1
   d627c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6280:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6284:	f104 0401 	add.w	r4, r4, #1
   d6288:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d628c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6290:	f080 809a 	bcs.w	d63c8 <__adddf3+0x240>
   d6294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6298:	bf08      	it	eq
   d629a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d629e:	f150 0000 	adcs.w	r0, r0, #0
   d62a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d62a6:	ea41 0105 	orr.w	r1, r1, r5
   d62aa:	bd30      	pop	{r4, r5, pc}
   d62ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d62b0:	4140      	adcs	r0, r0
   d62b2:	eb41 0101 	adc.w	r1, r1, r1
   d62b6:	3c01      	subs	r4, #1
   d62b8:	bf28      	it	cs
   d62ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d62be:	d2e9      	bcs.n	d6294 <__adddf3+0x10c>
   d62c0:	f091 0f00 	teq	r1, #0
   d62c4:	bf04      	itt	eq
   d62c6:	4601      	moveq	r1, r0
   d62c8:	2000      	moveq	r0, #0
   d62ca:	fab1 f381 	clz	r3, r1
   d62ce:	bf08      	it	eq
   d62d0:	3320      	addeq	r3, #32
   d62d2:	f1a3 030b 	sub.w	r3, r3, #11
   d62d6:	f1b3 0220 	subs.w	r2, r3, #32
   d62da:	da0c      	bge.n	d62f6 <__adddf3+0x16e>
   d62dc:	320c      	adds	r2, #12
   d62de:	dd08      	ble.n	d62f2 <__adddf3+0x16a>
   d62e0:	f102 0c14 	add.w	ip, r2, #20
   d62e4:	f1c2 020c 	rsb	r2, r2, #12
   d62e8:	fa01 f00c 	lsl.w	r0, r1, ip
   d62ec:	fa21 f102 	lsr.w	r1, r1, r2
   d62f0:	e00c      	b.n	d630c <__adddf3+0x184>
   d62f2:	f102 0214 	add.w	r2, r2, #20
   d62f6:	bfd8      	it	le
   d62f8:	f1c2 0c20 	rsble	ip, r2, #32
   d62fc:	fa01 f102 	lsl.w	r1, r1, r2
   d6300:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6304:	bfdc      	itt	le
   d6306:	ea41 010c 	orrle.w	r1, r1, ip
   d630a:	4090      	lslle	r0, r2
   d630c:	1ae4      	subs	r4, r4, r3
   d630e:	bfa2      	ittt	ge
   d6310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6314:	4329      	orrge	r1, r5
   d6316:	bd30      	popge	{r4, r5, pc}
   d6318:	ea6f 0404 	mvn.w	r4, r4
   d631c:	3c1f      	subs	r4, #31
   d631e:	da1c      	bge.n	d635a <__adddf3+0x1d2>
   d6320:	340c      	adds	r4, #12
   d6322:	dc0e      	bgt.n	d6342 <__adddf3+0x1ba>
   d6324:	f104 0414 	add.w	r4, r4, #20
   d6328:	f1c4 0220 	rsb	r2, r4, #32
   d632c:	fa20 f004 	lsr.w	r0, r0, r4
   d6330:	fa01 f302 	lsl.w	r3, r1, r2
   d6334:	ea40 0003 	orr.w	r0, r0, r3
   d6338:	fa21 f304 	lsr.w	r3, r1, r4
   d633c:	ea45 0103 	orr.w	r1, r5, r3
   d6340:	bd30      	pop	{r4, r5, pc}
   d6342:	f1c4 040c 	rsb	r4, r4, #12
   d6346:	f1c4 0220 	rsb	r2, r4, #32
   d634a:	fa20 f002 	lsr.w	r0, r0, r2
   d634e:	fa01 f304 	lsl.w	r3, r1, r4
   d6352:	ea40 0003 	orr.w	r0, r0, r3
   d6356:	4629      	mov	r1, r5
   d6358:	bd30      	pop	{r4, r5, pc}
   d635a:	fa21 f004 	lsr.w	r0, r1, r4
   d635e:	4629      	mov	r1, r5
   d6360:	bd30      	pop	{r4, r5, pc}
   d6362:	f094 0f00 	teq	r4, #0
   d6366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d636a:	bf06      	itte	eq
   d636c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6370:	3401      	addeq	r4, #1
   d6372:	3d01      	subne	r5, #1
   d6374:	e74e      	b.n	d6214 <__adddf3+0x8c>
   d6376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d637a:	bf18      	it	ne
   d637c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6380:	d029      	beq.n	d63d6 <__adddf3+0x24e>
   d6382:	ea94 0f05 	teq	r4, r5
   d6386:	bf08      	it	eq
   d6388:	ea90 0f02 	teqeq	r0, r2
   d638c:	d005      	beq.n	d639a <__adddf3+0x212>
   d638e:	ea54 0c00 	orrs.w	ip, r4, r0
   d6392:	bf04      	itt	eq
   d6394:	4619      	moveq	r1, r3
   d6396:	4610      	moveq	r0, r2
   d6398:	bd30      	pop	{r4, r5, pc}
   d639a:	ea91 0f03 	teq	r1, r3
   d639e:	bf1e      	ittt	ne
   d63a0:	2100      	movne	r1, #0
   d63a2:	2000      	movne	r0, #0
   d63a4:	bd30      	popne	{r4, r5, pc}
   d63a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d63aa:	d105      	bne.n	d63b8 <__adddf3+0x230>
   d63ac:	0040      	lsls	r0, r0, #1
   d63ae:	4149      	adcs	r1, r1
   d63b0:	bf28      	it	cs
   d63b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d63b6:	bd30      	pop	{r4, r5, pc}
   d63b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d63bc:	bf3c      	itt	cc
   d63be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d63c2:	bd30      	popcc	{r4, r5, pc}
   d63c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d63c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d63cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d63d0:	f04f 0000 	mov.w	r0, #0
   d63d4:	bd30      	pop	{r4, r5, pc}
   d63d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d63da:	bf1a      	itte	ne
   d63dc:	4619      	movne	r1, r3
   d63de:	4610      	movne	r0, r2
   d63e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d63e4:	bf1c      	itt	ne
   d63e6:	460b      	movne	r3, r1
   d63e8:	4602      	movne	r2, r0
   d63ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d63ee:	bf06      	itte	eq
   d63f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d63f4:	ea91 0f03 	teqeq	r1, r3
   d63f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d63fc:	bd30      	pop	{r4, r5, pc}
   d63fe:	bf00      	nop

000d6400 <__aeabi_ui2d>:
   d6400:	f090 0f00 	teq	r0, #0
   d6404:	bf04      	itt	eq
   d6406:	2100      	moveq	r1, #0
   d6408:	4770      	bxeq	lr
   d640a:	b530      	push	{r4, r5, lr}
   d640c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6410:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6414:	f04f 0500 	mov.w	r5, #0
   d6418:	f04f 0100 	mov.w	r1, #0
   d641c:	e750      	b.n	d62c0 <__adddf3+0x138>
   d641e:	bf00      	nop

000d6420 <__aeabi_i2d>:
   d6420:	f090 0f00 	teq	r0, #0
   d6424:	bf04      	itt	eq
   d6426:	2100      	moveq	r1, #0
   d6428:	4770      	bxeq	lr
   d642a:	b530      	push	{r4, r5, lr}
   d642c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6430:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6438:	bf48      	it	mi
   d643a:	4240      	negmi	r0, r0
   d643c:	f04f 0100 	mov.w	r1, #0
   d6440:	e73e      	b.n	d62c0 <__adddf3+0x138>
   d6442:	bf00      	nop

000d6444 <__aeabi_f2d>:
   d6444:	0042      	lsls	r2, r0, #1
   d6446:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d644a:	ea4f 0131 	mov.w	r1, r1, rrx
   d644e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6452:	bf1f      	itttt	ne
   d6454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d645c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6460:	4770      	bxne	lr
   d6462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6466:	bf08      	it	eq
   d6468:	4770      	bxeq	lr
   d646a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d646e:	bf04      	itt	eq
   d6470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6474:	4770      	bxeq	lr
   d6476:	b530      	push	{r4, r5, lr}
   d6478:	f44f 7460 	mov.w	r4, #896	; 0x380
   d647c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6484:	e71c      	b.n	d62c0 <__adddf3+0x138>
   d6486:	bf00      	nop

000d6488 <__aeabi_ul2d>:
   d6488:	ea50 0201 	orrs.w	r2, r0, r1
   d648c:	bf08      	it	eq
   d648e:	4770      	bxeq	lr
   d6490:	b530      	push	{r4, r5, lr}
   d6492:	f04f 0500 	mov.w	r5, #0
   d6496:	e00a      	b.n	d64ae <__aeabi_l2d+0x16>

000d6498 <__aeabi_l2d>:
   d6498:	ea50 0201 	orrs.w	r2, r0, r1
   d649c:	bf08      	it	eq
   d649e:	4770      	bxeq	lr
   d64a0:	b530      	push	{r4, r5, lr}
   d64a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d64a6:	d502      	bpl.n	d64ae <__aeabi_l2d+0x16>
   d64a8:	4240      	negs	r0, r0
   d64aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d64ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d64b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d64b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d64ba:	f43f aed8 	beq.w	d626e <__adddf3+0xe6>
   d64be:	f04f 0203 	mov.w	r2, #3
   d64c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d64c6:	bf18      	it	ne
   d64c8:	3203      	addne	r2, #3
   d64ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d64ce:	bf18      	it	ne
   d64d0:	3203      	addne	r2, #3
   d64d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d64d6:	f1c2 0320 	rsb	r3, r2, #32
   d64da:	fa00 fc03 	lsl.w	ip, r0, r3
   d64de:	fa20 f002 	lsr.w	r0, r0, r2
   d64e2:	fa01 fe03 	lsl.w	lr, r1, r3
   d64e6:	ea40 000e 	orr.w	r0, r0, lr
   d64ea:	fa21 f102 	lsr.w	r1, r1, r2
   d64ee:	4414      	add	r4, r2
   d64f0:	e6bd      	b.n	d626e <__adddf3+0xe6>
   d64f2:	bf00      	nop

000d64f4 <__aeabi_dmul>:
   d64f4:	b570      	push	{r4, r5, r6, lr}
   d64f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d64fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d64fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6502:	bf1d      	ittte	ne
   d6504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6508:	ea94 0f0c 	teqne	r4, ip
   d650c:	ea95 0f0c 	teqne	r5, ip
   d6510:	f000 f8de 	bleq	d66d0 <__aeabi_dmul+0x1dc>
   d6514:	442c      	add	r4, r5
   d6516:	ea81 0603 	eor.w	r6, r1, r3
   d651a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d651e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6522:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6526:	bf18      	it	ne
   d6528:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d652c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6534:	d038      	beq.n	d65a8 <__aeabi_dmul+0xb4>
   d6536:	fba0 ce02 	umull	ip, lr, r0, r2
   d653a:	f04f 0500 	mov.w	r5, #0
   d653e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6542:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6546:	fbe0 e503 	umlal	lr, r5, r0, r3
   d654a:	f04f 0600 	mov.w	r6, #0
   d654e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6552:	f09c 0f00 	teq	ip, #0
   d6556:	bf18      	it	ne
   d6558:	f04e 0e01 	orrne.w	lr, lr, #1
   d655c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6560:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6564:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6568:	d204      	bcs.n	d6574 <__aeabi_dmul+0x80>
   d656a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d656e:	416d      	adcs	r5, r5
   d6570:	eb46 0606 	adc.w	r6, r6, r6
   d6574:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6578:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d657c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6580:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6584:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6588:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d658c:	bf88      	it	hi
   d658e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6592:	d81e      	bhi.n	d65d2 <__aeabi_dmul+0xde>
   d6594:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6598:	bf08      	it	eq
   d659a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d659e:	f150 0000 	adcs.w	r0, r0, #0
   d65a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d65a6:	bd70      	pop	{r4, r5, r6, pc}
   d65a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d65ac:	ea46 0101 	orr.w	r1, r6, r1
   d65b0:	ea40 0002 	orr.w	r0, r0, r2
   d65b4:	ea81 0103 	eor.w	r1, r1, r3
   d65b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d65bc:	bfc2      	ittt	gt
   d65be:	ebd4 050c 	rsbsgt	r5, r4, ip
   d65c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d65c6:	bd70      	popgt	{r4, r5, r6, pc}
   d65c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d65cc:	f04f 0e00 	mov.w	lr, #0
   d65d0:	3c01      	subs	r4, #1
   d65d2:	f300 80ab 	bgt.w	d672c <__aeabi_dmul+0x238>
   d65d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d65da:	bfde      	ittt	le
   d65dc:	2000      	movle	r0, #0
   d65de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d65e2:	bd70      	pople	{r4, r5, r6, pc}
   d65e4:	f1c4 0400 	rsb	r4, r4, #0
   d65e8:	3c20      	subs	r4, #32
   d65ea:	da35      	bge.n	d6658 <__aeabi_dmul+0x164>
   d65ec:	340c      	adds	r4, #12
   d65ee:	dc1b      	bgt.n	d6628 <__aeabi_dmul+0x134>
   d65f0:	f104 0414 	add.w	r4, r4, #20
   d65f4:	f1c4 0520 	rsb	r5, r4, #32
   d65f8:	fa00 f305 	lsl.w	r3, r0, r5
   d65fc:	fa20 f004 	lsr.w	r0, r0, r4
   d6600:	fa01 f205 	lsl.w	r2, r1, r5
   d6604:	ea40 0002 	orr.w	r0, r0, r2
   d6608:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d660c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6614:	fa21 f604 	lsr.w	r6, r1, r4
   d6618:	eb42 0106 	adc.w	r1, r2, r6
   d661c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6620:	bf08      	it	eq
   d6622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6626:	bd70      	pop	{r4, r5, r6, pc}
   d6628:	f1c4 040c 	rsb	r4, r4, #12
   d662c:	f1c4 0520 	rsb	r5, r4, #32
   d6630:	fa00 f304 	lsl.w	r3, r0, r4
   d6634:	fa20 f005 	lsr.w	r0, r0, r5
   d6638:	fa01 f204 	lsl.w	r2, r1, r4
   d663c:	ea40 0002 	orr.w	r0, r0, r2
   d6640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6648:	f141 0100 	adc.w	r1, r1, #0
   d664c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6650:	bf08      	it	eq
   d6652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6656:	bd70      	pop	{r4, r5, r6, pc}
   d6658:	f1c4 0520 	rsb	r5, r4, #32
   d665c:	fa00 f205 	lsl.w	r2, r0, r5
   d6660:	ea4e 0e02 	orr.w	lr, lr, r2
   d6664:	fa20 f304 	lsr.w	r3, r0, r4
   d6668:	fa01 f205 	lsl.w	r2, r1, r5
   d666c:	ea43 0302 	orr.w	r3, r3, r2
   d6670:	fa21 f004 	lsr.w	r0, r1, r4
   d6674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6678:	fa21 f204 	lsr.w	r2, r1, r4
   d667c:	ea20 0002 	bic.w	r0, r0, r2
   d6680:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6688:	bf08      	it	eq
   d668a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d668e:	bd70      	pop	{r4, r5, r6, pc}
   d6690:	f094 0f00 	teq	r4, #0
   d6694:	d10f      	bne.n	d66b6 <__aeabi_dmul+0x1c2>
   d6696:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d669a:	0040      	lsls	r0, r0, #1
   d669c:	eb41 0101 	adc.w	r1, r1, r1
   d66a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d66a4:	bf08      	it	eq
   d66a6:	3c01      	subeq	r4, #1
   d66a8:	d0f7      	beq.n	d669a <__aeabi_dmul+0x1a6>
   d66aa:	ea41 0106 	orr.w	r1, r1, r6
   d66ae:	f095 0f00 	teq	r5, #0
   d66b2:	bf18      	it	ne
   d66b4:	4770      	bxne	lr
   d66b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d66ba:	0052      	lsls	r2, r2, #1
   d66bc:	eb43 0303 	adc.w	r3, r3, r3
   d66c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d66c4:	bf08      	it	eq
   d66c6:	3d01      	subeq	r5, #1
   d66c8:	d0f7      	beq.n	d66ba <__aeabi_dmul+0x1c6>
   d66ca:	ea43 0306 	orr.w	r3, r3, r6
   d66ce:	4770      	bx	lr
   d66d0:	ea94 0f0c 	teq	r4, ip
   d66d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d66d8:	bf18      	it	ne
   d66da:	ea95 0f0c 	teqne	r5, ip
   d66de:	d00c      	beq.n	d66fa <__aeabi_dmul+0x206>
   d66e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d66e4:	bf18      	it	ne
   d66e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d66ea:	d1d1      	bne.n	d6690 <__aeabi_dmul+0x19c>
   d66ec:	ea81 0103 	eor.w	r1, r1, r3
   d66f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d66f4:	f04f 0000 	mov.w	r0, #0
   d66f8:	bd70      	pop	{r4, r5, r6, pc}
   d66fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d66fe:	bf06      	itte	eq
   d6700:	4610      	moveq	r0, r2
   d6702:	4619      	moveq	r1, r3
   d6704:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6708:	d019      	beq.n	d673e <__aeabi_dmul+0x24a>
   d670a:	ea94 0f0c 	teq	r4, ip
   d670e:	d102      	bne.n	d6716 <__aeabi_dmul+0x222>
   d6710:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6714:	d113      	bne.n	d673e <__aeabi_dmul+0x24a>
   d6716:	ea95 0f0c 	teq	r5, ip
   d671a:	d105      	bne.n	d6728 <__aeabi_dmul+0x234>
   d671c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6720:	bf1c      	itt	ne
   d6722:	4610      	movne	r0, r2
   d6724:	4619      	movne	r1, r3
   d6726:	d10a      	bne.n	d673e <__aeabi_dmul+0x24a>
   d6728:	ea81 0103 	eor.w	r1, r1, r3
   d672c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6730:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6738:	f04f 0000 	mov.w	r0, #0
   d673c:	bd70      	pop	{r4, r5, r6, pc}
   d673e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6742:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6746:	bd70      	pop	{r4, r5, r6, pc}

000d6748 <__aeabi_ddiv>:
   d6748:	b570      	push	{r4, r5, r6, lr}
   d674a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d674e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6756:	bf1d      	ittte	ne
   d6758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d675c:	ea94 0f0c 	teqne	r4, ip
   d6760:	ea95 0f0c 	teqne	r5, ip
   d6764:	f000 f8a7 	bleq	d68b6 <__aeabi_ddiv+0x16e>
   d6768:	eba4 0405 	sub.w	r4, r4, r5
   d676c:	ea81 0e03 	eor.w	lr, r1, r3
   d6770:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6774:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6778:	f000 8088 	beq.w	d688c <__aeabi_ddiv+0x144>
   d677c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6780:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6784:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d678c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6790:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6794:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6798:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d679c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d67a0:	429d      	cmp	r5, r3
   d67a2:	bf08      	it	eq
   d67a4:	4296      	cmpeq	r6, r2
   d67a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d67aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d67ae:	d202      	bcs.n	d67b6 <__aeabi_ddiv+0x6e>
   d67b0:	085b      	lsrs	r3, r3, #1
   d67b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d67b6:	1ab6      	subs	r6, r6, r2
   d67b8:	eb65 0503 	sbc.w	r5, r5, r3
   d67bc:	085b      	lsrs	r3, r3, #1
   d67be:	ea4f 0232 	mov.w	r2, r2, rrx
   d67c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d67c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d67ca:	ebb6 0e02 	subs.w	lr, r6, r2
   d67ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d67d2:	bf22      	ittt	cs
   d67d4:	1ab6      	subcs	r6, r6, r2
   d67d6:	4675      	movcs	r5, lr
   d67d8:	ea40 000c 	orrcs.w	r0, r0, ip
   d67dc:	085b      	lsrs	r3, r3, #1
   d67de:	ea4f 0232 	mov.w	r2, r2, rrx
   d67e2:	ebb6 0e02 	subs.w	lr, r6, r2
   d67e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d67ea:	bf22      	ittt	cs
   d67ec:	1ab6      	subcs	r6, r6, r2
   d67ee:	4675      	movcs	r5, lr
   d67f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d67f4:	085b      	lsrs	r3, r3, #1
   d67f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d67fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d67fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6802:	bf22      	ittt	cs
   d6804:	1ab6      	subcs	r6, r6, r2
   d6806:	4675      	movcs	r5, lr
   d6808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d680c:	085b      	lsrs	r3, r3, #1
   d680e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6812:	ebb6 0e02 	subs.w	lr, r6, r2
   d6816:	eb75 0e03 	sbcs.w	lr, r5, r3
   d681a:	bf22      	ittt	cs
   d681c:	1ab6      	subcs	r6, r6, r2
   d681e:	4675      	movcs	r5, lr
   d6820:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6824:	ea55 0e06 	orrs.w	lr, r5, r6
   d6828:	d018      	beq.n	d685c <__aeabi_ddiv+0x114>
   d682a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d682e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6832:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6836:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d683a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d683e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6842:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6846:	d1c0      	bne.n	d67ca <__aeabi_ddiv+0x82>
   d6848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d684c:	d10b      	bne.n	d6866 <__aeabi_ddiv+0x11e>
   d684e:	ea41 0100 	orr.w	r1, r1, r0
   d6852:	f04f 0000 	mov.w	r0, #0
   d6856:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d685a:	e7b6      	b.n	d67ca <__aeabi_ddiv+0x82>
   d685c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6860:	bf04      	itt	eq
   d6862:	4301      	orreq	r1, r0
   d6864:	2000      	moveq	r0, #0
   d6866:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d686a:	bf88      	it	hi
   d686c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6870:	f63f aeaf 	bhi.w	d65d2 <__aeabi_dmul+0xde>
   d6874:	ebb5 0c03 	subs.w	ip, r5, r3
   d6878:	bf04      	itt	eq
   d687a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d687e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6882:	f150 0000 	adcs.w	r0, r0, #0
   d6886:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d688a:	bd70      	pop	{r4, r5, r6, pc}
   d688c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6890:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6894:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6898:	bfc2      	ittt	gt
   d689a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d689e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d68a2:	bd70      	popgt	{r4, r5, r6, pc}
   d68a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d68a8:	f04f 0e00 	mov.w	lr, #0
   d68ac:	3c01      	subs	r4, #1
   d68ae:	e690      	b.n	d65d2 <__aeabi_dmul+0xde>
   d68b0:	ea45 0e06 	orr.w	lr, r5, r6
   d68b4:	e68d      	b.n	d65d2 <__aeabi_dmul+0xde>
   d68b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d68ba:	ea94 0f0c 	teq	r4, ip
   d68be:	bf08      	it	eq
   d68c0:	ea95 0f0c 	teqeq	r5, ip
   d68c4:	f43f af3b 	beq.w	d673e <__aeabi_dmul+0x24a>
   d68c8:	ea94 0f0c 	teq	r4, ip
   d68cc:	d10a      	bne.n	d68e4 <__aeabi_ddiv+0x19c>
   d68ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d68d2:	f47f af34 	bne.w	d673e <__aeabi_dmul+0x24a>
   d68d6:	ea95 0f0c 	teq	r5, ip
   d68da:	f47f af25 	bne.w	d6728 <__aeabi_dmul+0x234>
   d68de:	4610      	mov	r0, r2
   d68e0:	4619      	mov	r1, r3
   d68e2:	e72c      	b.n	d673e <__aeabi_dmul+0x24a>
   d68e4:	ea95 0f0c 	teq	r5, ip
   d68e8:	d106      	bne.n	d68f8 <__aeabi_ddiv+0x1b0>
   d68ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d68ee:	f43f aefd 	beq.w	d66ec <__aeabi_dmul+0x1f8>
   d68f2:	4610      	mov	r0, r2
   d68f4:	4619      	mov	r1, r3
   d68f6:	e722      	b.n	d673e <__aeabi_dmul+0x24a>
   d68f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d68fc:	bf18      	it	ne
   d68fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6902:	f47f aec5 	bne.w	d6690 <__aeabi_dmul+0x19c>
   d6906:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d690a:	f47f af0d 	bne.w	d6728 <__aeabi_dmul+0x234>
   d690e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6912:	f47f aeeb 	bne.w	d66ec <__aeabi_dmul+0x1f8>
   d6916:	e712      	b.n	d673e <__aeabi_dmul+0x24a>

000d6918 <__gedf2>:
   d6918:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d691c:	e006      	b.n	d692c <__cmpdf2+0x4>
   d691e:	bf00      	nop

000d6920 <__ledf2>:
   d6920:	f04f 0c01 	mov.w	ip, #1
   d6924:	e002      	b.n	d692c <__cmpdf2+0x4>
   d6926:	bf00      	nop

000d6928 <__cmpdf2>:
   d6928:	f04f 0c01 	mov.w	ip, #1
   d692c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6930:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6938:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d693c:	bf18      	it	ne
   d693e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6942:	d01b      	beq.n	d697c <__cmpdf2+0x54>
   d6944:	b001      	add	sp, #4
   d6946:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d694a:	bf0c      	ite	eq
   d694c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6950:	ea91 0f03 	teqne	r1, r3
   d6954:	bf02      	ittt	eq
   d6956:	ea90 0f02 	teqeq	r0, r2
   d695a:	2000      	moveq	r0, #0
   d695c:	4770      	bxeq	lr
   d695e:	f110 0f00 	cmn.w	r0, #0
   d6962:	ea91 0f03 	teq	r1, r3
   d6966:	bf58      	it	pl
   d6968:	4299      	cmppl	r1, r3
   d696a:	bf08      	it	eq
   d696c:	4290      	cmpeq	r0, r2
   d696e:	bf2c      	ite	cs
   d6970:	17d8      	asrcs	r0, r3, #31
   d6972:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6976:	f040 0001 	orr.w	r0, r0, #1
   d697a:	4770      	bx	lr
   d697c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6984:	d102      	bne.n	d698c <__cmpdf2+0x64>
   d6986:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d698a:	d107      	bne.n	d699c <__cmpdf2+0x74>
   d698c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6994:	d1d6      	bne.n	d6944 <__cmpdf2+0x1c>
   d6996:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d699a:	d0d3      	beq.n	d6944 <__cmpdf2+0x1c>
   d699c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d69a0:	4770      	bx	lr
   d69a2:	bf00      	nop

000d69a4 <__aeabi_cdrcmple>:
   d69a4:	4684      	mov	ip, r0
   d69a6:	4610      	mov	r0, r2
   d69a8:	4662      	mov	r2, ip
   d69aa:	468c      	mov	ip, r1
   d69ac:	4619      	mov	r1, r3
   d69ae:	4663      	mov	r3, ip
   d69b0:	e000      	b.n	d69b4 <__aeabi_cdcmpeq>
   d69b2:	bf00      	nop

000d69b4 <__aeabi_cdcmpeq>:
   d69b4:	b501      	push	{r0, lr}
   d69b6:	f7ff ffb7 	bl	d6928 <__cmpdf2>
   d69ba:	2800      	cmp	r0, #0
   d69bc:	bf48      	it	mi
   d69be:	f110 0f00 	cmnmi.w	r0, #0
   d69c2:	bd01      	pop	{r0, pc}

000d69c4 <__aeabi_dcmpeq>:
   d69c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d69c8:	f7ff fff4 	bl	d69b4 <__aeabi_cdcmpeq>
   d69cc:	bf0c      	ite	eq
   d69ce:	2001      	moveq	r0, #1
   d69d0:	2000      	movne	r0, #0
   d69d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d69d6:	bf00      	nop

000d69d8 <__aeabi_dcmplt>:
   d69d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d69dc:	f7ff ffea 	bl	d69b4 <__aeabi_cdcmpeq>
   d69e0:	bf34      	ite	cc
   d69e2:	2001      	movcc	r0, #1
   d69e4:	2000      	movcs	r0, #0
   d69e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d69ea:	bf00      	nop

000d69ec <__aeabi_dcmple>:
   d69ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d69f0:	f7ff ffe0 	bl	d69b4 <__aeabi_cdcmpeq>
   d69f4:	bf94      	ite	ls
   d69f6:	2001      	movls	r0, #1
   d69f8:	2000      	movhi	r0, #0
   d69fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d69fe:	bf00      	nop

000d6a00 <__aeabi_dcmpge>:
   d6a00:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a04:	f7ff ffce 	bl	d69a4 <__aeabi_cdrcmple>
   d6a08:	bf94      	ite	ls
   d6a0a:	2001      	movls	r0, #1
   d6a0c:	2000      	movhi	r0, #0
   d6a0e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a12:	bf00      	nop

000d6a14 <__aeabi_dcmpgt>:
   d6a14:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a18:	f7ff ffc4 	bl	d69a4 <__aeabi_cdrcmple>
   d6a1c:	bf34      	ite	cc
   d6a1e:	2001      	movcc	r0, #1
   d6a20:	2000      	movcs	r0, #0
   d6a22:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a26:	bf00      	nop

000d6a28 <__aeabi_dcmpun>:
   d6a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6a30:	d102      	bne.n	d6a38 <__aeabi_dcmpun+0x10>
   d6a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6a36:	d10a      	bne.n	d6a4e <__aeabi_dcmpun+0x26>
   d6a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6a40:	d102      	bne.n	d6a48 <__aeabi_dcmpun+0x20>
   d6a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6a46:	d102      	bne.n	d6a4e <__aeabi_dcmpun+0x26>
   d6a48:	f04f 0000 	mov.w	r0, #0
   d6a4c:	4770      	bx	lr
   d6a4e:	f04f 0001 	mov.w	r0, #1
   d6a52:	4770      	bx	lr

000d6a54 <__aeabi_d2iz>:
   d6a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6a5c:	d215      	bcs.n	d6a8a <__aeabi_d2iz+0x36>
   d6a5e:	d511      	bpl.n	d6a84 <__aeabi_d2iz+0x30>
   d6a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6a68:	d912      	bls.n	d6a90 <__aeabi_d2iz+0x3c>
   d6a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6a7a:	fa23 f002 	lsr.w	r0, r3, r2
   d6a7e:	bf18      	it	ne
   d6a80:	4240      	negne	r0, r0
   d6a82:	4770      	bx	lr
   d6a84:	f04f 0000 	mov.w	r0, #0
   d6a88:	4770      	bx	lr
   d6a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6a8e:	d105      	bne.n	d6a9c <__aeabi_d2iz+0x48>
   d6a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6a94:	bf08      	it	eq
   d6a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6a9a:	4770      	bx	lr
   d6a9c:	f04f 0000 	mov.w	r0, #0
   d6aa0:	4770      	bx	lr
   d6aa2:	bf00      	nop

000d6aa4 <__aeabi_d2uiz>:
   d6aa4:	004a      	lsls	r2, r1, #1
   d6aa6:	d211      	bcs.n	d6acc <__aeabi_d2uiz+0x28>
   d6aa8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6aac:	d211      	bcs.n	d6ad2 <__aeabi_d2uiz+0x2e>
   d6aae:	d50d      	bpl.n	d6acc <__aeabi_d2uiz+0x28>
   d6ab0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6ab4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6ab8:	d40e      	bmi.n	d6ad8 <__aeabi_d2uiz+0x34>
   d6aba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6ac2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6ac6:	fa23 f002 	lsr.w	r0, r3, r2
   d6aca:	4770      	bx	lr
   d6acc:	f04f 0000 	mov.w	r0, #0
   d6ad0:	4770      	bx	lr
   d6ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6ad6:	d102      	bne.n	d6ade <__aeabi_d2uiz+0x3a>
   d6ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6adc:	4770      	bx	lr
   d6ade:	f04f 0000 	mov.w	r0, #0
   d6ae2:	4770      	bx	lr

000d6ae4 <__aeabi_d2f>:
   d6ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6ae8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6aec:	bf24      	itt	cs
   d6aee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6af2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6af6:	d90d      	bls.n	d6b14 <__aeabi_d2f+0x30>
   d6af8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6afc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6b00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6b04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6b08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6b0c:	bf08      	it	eq
   d6b0e:	f020 0001 	biceq.w	r0, r0, #1
   d6b12:	4770      	bx	lr
   d6b14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6b18:	d121      	bne.n	d6b5e <__aeabi_d2f+0x7a>
   d6b1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6b1e:	bfbc      	itt	lt
   d6b20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6b24:	4770      	bxlt	lr
   d6b26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6b2e:	f1c2 0218 	rsb	r2, r2, #24
   d6b32:	f1c2 0c20 	rsb	ip, r2, #32
   d6b36:	fa10 f30c 	lsls.w	r3, r0, ip
   d6b3a:	fa20 f002 	lsr.w	r0, r0, r2
   d6b3e:	bf18      	it	ne
   d6b40:	f040 0001 	orrne.w	r0, r0, #1
   d6b44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6b48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6b4c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6b50:	ea40 000c 	orr.w	r0, r0, ip
   d6b54:	fa23 f302 	lsr.w	r3, r3, r2
   d6b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6b5c:	e7cc      	b.n	d6af8 <__aeabi_d2f+0x14>
   d6b5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6b62:	d107      	bne.n	d6b74 <__aeabi_d2f+0x90>
   d6b64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6b68:	bf1e      	ittt	ne
   d6b6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6b6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6b72:	4770      	bxne	lr
   d6b74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6b78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6b80:	4770      	bx	lr
   d6b82:	bf00      	nop

000d6b84 <__cxa_atexit>:
   d6b84:	b510      	push	{r4, lr}
   d6b86:	4c05      	ldr	r4, [pc, #20]	; (d6b9c <__cxa_atexit+0x18>)
   d6b88:	4613      	mov	r3, r2
   d6b8a:	b12c      	cbz	r4, d6b98 <__cxa_atexit+0x14>
   d6b8c:	460a      	mov	r2, r1
   d6b8e:	4601      	mov	r1, r0
   d6b90:	2002      	movs	r0, #2
   d6b92:	f3af 8000 	nop.w
   d6b96:	bd10      	pop	{r4, pc}
   d6b98:	4620      	mov	r0, r4
   d6b9a:	e7fc      	b.n	d6b96 <__cxa_atexit+0x12>
   d6b9c:	00000000 	.word	0x00000000

000d6ba0 <memcpy>:
   d6ba0:	440a      	add	r2, r1
   d6ba2:	4291      	cmp	r1, r2
   d6ba4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6ba8:	d100      	bne.n	d6bac <memcpy+0xc>
   d6baa:	4770      	bx	lr
   d6bac:	b510      	push	{r4, lr}
   d6bae:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6bb6:	4291      	cmp	r1, r2
   d6bb8:	d1f9      	bne.n	d6bae <memcpy+0xe>
   d6bba:	bd10      	pop	{r4, pc}

000d6bbc <memset>:
   d6bbc:	4402      	add	r2, r0
   d6bbe:	4603      	mov	r3, r0
   d6bc0:	4293      	cmp	r3, r2
   d6bc2:	d100      	bne.n	d6bc6 <memset+0xa>
   d6bc4:	4770      	bx	lr
   d6bc6:	f803 1b01 	strb.w	r1, [r3], #1
   d6bca:	e7f9      	b.n	d6bc0 <memset+0x4>

000d6bcc <srand>:
   d6bcc:	b538      	push	{r3, r4, r5, lr}
   d6bce:	4b0d      	ldr	r3, [pc, #52]	; (d6c04 <srand+0x38>)
   d6bd0:	681d      	ldr	r5, [r3, #0]
   d6bd2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6bd4:	4604      	mov	r4, r0
   d6bd6:	b97b      	cbnz	r3, d6bf8 <srand+0x2c>
   d6bd8:	2018      	movs	r0, #24
   d6bda:	f7fd ff59 	bl	d4a90 <malloc>
   d6bde:	4a0a      	ldr	r2, [pc, #40]	; (d6c08 <srand+0x3c>)
   d6be0:	4b0a      	ldr	r3, [pc, #40]	; (d6c0c <srand+0x40>)
   d6be2:	63a8      	str	r0, [r5, #56]	; 0x38
   d6be4:	e9c0 2300 	strd	r2, r3, [r0]
   d6be8:	4b09      	ldr	r3, [pc, #36]	; (d6c10 <srand+0x44>)
   d6bea:	6083      	str	r3, [r0, #8]
   d6bec:	230b      	movs	r3, #11
   d6bee:	8183      	strh	r3, [r0, #12]
   d6bf0:	2201      	movs	r2, #1
   d6bf2:	2300      	movs	r3, #0
   d6bf4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6bf8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6bfa:	2200      	movs	r2, #0
   d6bfc:	611c      	str	r4, [r3, #16]
   d6bfe:	615a      	str	r2, [r3, #20]
   d6c00:	bd38      	pop	{r3, r4, r5, pc}
   d6c02:	bf00      	nop
   d6c04:	2003e1d0 	.word	0x2003e1d0
   d6c08:	abcd330e 	.word	0xabcd330e
   d6c0c:	e66d1234 	.word	0xe66d1234
   d6c10:	0005deec 	.word	0x0005deec

000d6c14 <strdup>:
   d6c14:	4b02      	ldr	r3, [pc, #8]	; (d6c20 <strdup+0xc>)
   d6c16:	4601      	mov	r1, r0
   d6c18:	6818      	ldr	r0, [r3, #0]
   d6c1a:	f000 b803 	b.w	d6c24 <_strdup_r>
   d6c1e:	bf00      	nop
   d6c20:	2003e1d0 	.word	0x2003e1d0

000d6c24 <_strdup_r>:
   d6c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c26:	4604      	mov	r4, r0
   d6c28:	4608      	mov	r0, r1
   d6c2a:	460d      	mov	r5, r1
   d6c2c:	f000 f80f 	bl	d6c4e <strlen>
   d6c30:	1c42      	adds	r2, r0, #1
   d6c32:	4611      	mov	r1, r2
   d6c34:	4620      	mov	r0, r4
   d6c36:	9201      	str	r2, [sp, #4]
   d6c38:	f7fd ff52 	bl	d4ae0 <_malloc_r>
   d6c3c:	4604      	mov	r4, r0
   d6c3e:	b118      	cbz	r0, d6c48 <_strdup_r+0x24>
   d6c40:	9a01      	ldr	r2, [sp, #4]
   d6c42:	4629      	mov	r1, r5
   d6c44:	f7ff ffac 	bl	d6ba0 <memcpy>
   d6c48:	4620      	mov	r0, r4
   d6c4a:	b003      	add	sp, #12
   d6c4c:	bd30      	pop	{r4, r5, pc}

000d6c4e <strlen>:
   d6c4e:	4603      	mov	r3, r0
   d6c50:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6c54:	2a00      	cmp	r2, #0
   d6c56:	d1fb      	bne.n	d6c50 <strlen+0x2>
   d6c58:	1a18      	subs	r0, r3, r0
   d6c5a:	3801      	subs	r0, #1
   d6c5c:	4770      	bx	lr

000d6c5e <link_code_end>:
	...

000d6c60 <dynalib_user>:
   d6c60:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d6c70:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   d6c80:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d6c90:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d6ca0:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   d6cb0:	4f4d 4544 7525 003e 614d 6278 746f 7869     MODE%u>.Maxbotix
   d6cc0:	5420 7365 0074 002c 7254 6979 676e 7420      Test.,.Trying t
   d6cd0:	206f 6f63 6e6e 6365 0074 6c25 2c69 2e25     o connect.%li,%.
   d6ce0:	6635 252c 302e 6632 252c 302e 6632 7000     5f,%.02f,%.02f.p
   d6cf0:	6275 696c 6873 6e69 2067 6164 6174 6d00     ublishing data.m
   d6d00:	7861 7420 6d69 2065 6f66 2072 7570 6c62     ax time for publ
   d6d10:	7369 6968 676e 7220 6165 6863 6465 7720     ishing reached w
   d6d20:	7469 6f68 7475 7320 6375 6563 7373 203b     ithout success; 
   d6d30:	6f67 7420 206f 6c73 6565 0070 6f4e 2074     go to sleep.Not 
   d6d40:	616d 2078 6974 656d 202c 7274 2079 6761     max time, try ag
   d6d50:	6961 206e 6f74 7020 6275 696c 6873 6700     ain to publish.g
   d6d60:	696f 676e 7420 206f 6c73 6565 0070 6546     oing to sleep.Fe
   d6d70:	6c65 6e69 2067 6572 7473 656c 7373 0000     eling restless..

000d6d80 <_ZTVN8particle11SPISettingsE>:
	...
   d6d88:	4109 000d 40b3 000d 40cf 000d 6553 4c61     .A...@...@..SeaL
   d6d98:	7665 6c65 425f 6f54 6e77 0000               evel_BTown..

000d6da4 <_ZTVN5spark13CellularClassE>:
	...
   d6dac:	4c0b 000d 4c01 000d 4bf7 000d 4bad 000d     .L...L...K...K..
   d6dbc:	4beb 000d 4bdf 000d 55d9 000d 55e1 000d     .K...K...U...U..
   d6dcc:	4bd3 000d 4bcb 000d 4bc1 000d 4bb7 000d     .K...K...K...K..
   d6ddc:	5611 000d                                   .V..

000d6de0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6de8:	4c45 000d 4c4b 000d 4c9b 000d 4c59 000d     EL..KL...L..YL..
   d6df8:	4c47 000d                                   GL..

000d6dfc <_ZTVN5spark13EthernetClassE>:
	...
   d6e04:	5213 000d 5209 000d 51ff 000d 51f5 000d     .R...R...Q...Q..
   d6e14:	51e9 000d 51dd 000d 55d9 000d 55e1 000d     .Q...Q...U...U..
   d6e24:	51d1 000d 51c9 000d 51bf 000d 51b5 000d     .Q...Q...Q...Q..
   d6e34:	5611 000d                                   .V..

000d6e38 <_ZTV7TwoWire>:
	...
   d6e40:	539d 000d 53e7 000d 53bf 000d 539f 000d     .S...S...S...S..
   d6e50:	53c7 000d 53cf 000d 53d7 000d 53df 000d     .S...S...S...S..

000d6e60 <_ZTV9IPAddress>:
	...
   d6e68:	54b3 000d 54a3 000d 54a5 000d 7061 0070     .T...T...T..app.

000d6e78 <_ZTVN5spark12NetworkClassE>:
	...
   d6e80:	5599 000d 55a3 000d 55ad 000d 55b7 000d     .U...U...U...U..
   d6e90:	55c1 000d 55cd 000d 55d9 000d 55e1 000d     .U...U...U...U..
   d6ea0:	55e9 000d 55f5 000d 55fd 000d 5607 000d     .U...U...U...V..
   d6eb0:	5611 000d 616e 006e 6e69 0066 766f 0066     .V..nan.inf.ovf.
   d6ec0:	6977 6972 676e 5300 7379 6574 206d 6c73     wiring.System sl
   d6ed0:	6565 2070 6f63 666e 6769 7275 7461 6f69     eep configuratio
   d6ee0:	206e 7369 6920 766e 6c61 6469 002e 5925     n is invalid..%Y
   d6ef0:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   d6f00:	007a 7361 7463 6d69 0065 0000               z.asctime...

000d6f0c <_ZTV11USARTSerial>:
	...
   d6f14:	5c51 000d 5cbd 000d 5c95 000d 5735 000d     Q\...\...\..5W..
   d6f24:	5c65 000d 5c81 000d 5c73 000d 5c8f 000d     e\...\..s\...\..
   d6f34:	5c53 000d 5c57 000d                         S\..W\..

000d6f3c <_ZTV9USBSerial>:
	...
   d6f44:	5d85 000d 5ded 000d 5dc3 000d 5735 000d     .]...]...]..5W..
   d6f54:	5db5 000d 5d87 000d 5d97 000d 5de7 000d     .]...]...]...]..
   d6f64:	5da7 000d 5d81 000d                         .]...]..

000d6f6c <_ZSt7nothrow>:
	...

000d6f6d <link_const_variable_data_end>:
   d6f6d:	00          	.byte	0x00
	...

000d6f70 <link_constructors_location>:
   d6f70:	000d44f1 	.word	0x000d44f1
   d6f74:	000d4b85 	.word	0x000d4b85
   d6f78:	000d4c15 	.word	0x000d4c15
   d6f7c:	000d521d 	.word	0x000d521d
   d6f80:	000d5589 	.word	0x000d5589
   d6f84:	000d56e5 	.word	0x000d56e5
   d6f88:	000d5a29 	.word	0x000d5a29
   d6f8c:	000d5b8d 	.word	0x000d5b8d
   d6f90:	000d5c3d 	.word	0x000d5c3d

000d6f94 <link_constructors_end>:
	...
