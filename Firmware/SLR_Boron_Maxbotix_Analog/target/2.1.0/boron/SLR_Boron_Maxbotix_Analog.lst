
/Users/pjb/Dropbox/Particle_Projects/Seaport_SLR_Observation/Seaport_Tide-SLR_Maxbotix_Arduino/Firmware/SLR_Boron_Maxbotix_Analog/target/2.1.0/boron/SLR_Boron_Maxbotix_Analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000049b0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d89d0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e1b0  000d89d4  0001e1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005d0  2003e220  2003e220  0002e220  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8a44  000d8a44  00028a44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8a6c  000d8a6c  00028a6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001f1ea6  00000000  00000000  00028a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001da47  00000000  00000000  0021a916  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003332f  00000000  00000000  0023835d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002ab8  00000000  00000000  0026b68c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008de8  00000000  00000000  0026e144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00041e6e  00000000  00000000  00276f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004bd20  00000000  00000000  002b8d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00112d2c  00000000  00000000  00304aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000077c8  00000000  00000000  004177e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fa99 	bl	d8568 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 faa1 	bl	d8584 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1b0 	.word	0x2003e1b0
   d404c:	000d89d4 	.word	0x000d89d4
   d4050:	2003e220 	.word	0x2003e220
   d4054:	2003e220 	.word	0x2003e220
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fc21 	bl	d78a8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d89ac 	.word	0x000d89ac
   d4080:	000d89d0 	.word	0x000d89d0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8d8 	b.w	d4238 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8ed 	bl	d4268 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bbcb 	b.w	d782c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 b8f1 	b.w	d627c <malloc>

000d409a <_Znaj>:
   d409a:	f002 b8ef 	b.w	d627c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 b8f5 	b.w	d628c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40b2:	4770      	bx	lr

000d40b4 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40b4:	7c03      	ldrb	r3, [r0, #16]
   d40b6:	f013 0308 	ands.w	r3, r3, #8
   d40ba:	bf1e      	ittt	ne
   d40bc:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   d40be:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   d40c0:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c2:	2b00      	cmp	r3, #0
  }
   d40c4:	bfac      	ite	ge
   d40c6:	4618      	movge	r0, r3
   d40c8:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   d40cc:	4770      	bx	lr

000d40ce <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   d40ce:	4770      	bx	lr

000d40d0 <_ZN5SdFatD1Ev>:
//==============================================================================
/**
 * \class SdFat
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFileSystem<SdSpiCard> {
   d40d0:	4770      	bx	lr

000d40d2 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d40d2:	3010      	adds	r0, #16
   d40d4:	f000 bd64 	b.w	d4ba0 <_ZN7FatFile4syncEv>

000d40d8 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d40d8:	3010      	adds	r0, #16
   d40da:	f000 bc7f 	b.w	d49dc <_ZN7FatFile4peekEv>

000d40de <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d40de:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d40e0:	2201      	movs	r2, #1
   d40e2:	f10d 0107 	add.w	r1, sp, #7
   d40e6:	3010      	adds	r0, #16
   d40e8:	f000 fbca 	bl	d4880 <_ZN7FatFile4readEPvj>
   d40ec:	2801      	cmp	r0, #1
   d40ee:	bf0c      	ite	eq
   d40f0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d40f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   d40f8:	b003      	add	sp, #12
   d40fa:	f85d fb04 	ldr.w	pc, [sp], #4

000d40fe <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d40fe:	3010      	adds	r0, #16
   d4100:	f000 bdd8 	b.w	d4cb4 <_ZN7FatFile5writeEPKvj>

000d4104 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   d4104:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4106:	2201      	movs	r2, #1
   d4108:	f88d 1007 	strb.w	r1, [sp, #7]
   d410c:	3010      	adds	r0, #16
   d410e:	f10d 0107 	add.w	r1, sp, #7
   d4112:	f000 fdcf 	bl	d4cb4 <_ZN7FatFile5writeEPKvj>
  }
   d4116:	b003      	add	sp, #12
   d4118:	f85d fb04 	ldr.w	pc, [sp], #4

000d411c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d411c:	b510      	push	{r4, lr}
  }
   d411e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4120:	4604      	mov	r4, r0
  }
   d4122:	f003 fcf8 	bl	d7b16 <_ZdlPvj>
   d4126:	4620      	mov	r0, r4
   d4128:	bd10      	pop	{r4, pc}

000d412a <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d412a:	b538      	push	{r3, r4, r5, lr}
   d412c:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d412e:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d4130:	b128      	cbz	r0, d413e <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4132:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d4134:	210c      	movs	r1, #12
   d4136:	f003 fcee 	bl	d7b16 <_ZdlPvj>
            wakeupSource = next;
   d413a:	4628      	mov	r0, r5
        while (wakeupSource) {
   d413c:	e7f8      	b.n	d4130 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d413e:	4620      	mov	r0, r4
   d4140:	bd38      	pop	{r3, r4, r5, pc}

000d4142 <_ZN4FileD0Ev>:
class File : public FatFile, public Stream {
   d4142:	b510      	push	{r4, lr}
   d4144:	2134      	movs	r1, #52	; 0x34
   d4146:	4604      	mov	r4, r0
   d4148:	f003 fce5 	bl	d7b16 <_ZdlPvj>
   d414c:	4620      	mov	r0, r4
   d414e:	bd10      	pop	{r4, pc}

000d4150 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4150:	b510      	push	{r4, lr}
   d4152:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4154:	6800      	ldr	r0, [r0, #0]
   d4156:	b108      	cbz	r0, d415c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4158:	f002 f898 	bl	d628c <free>
class SystemClass {
   d415c:	4620      	mov	r0, r4
   d415e:	bd10      	pop	{r4, pc}

000d4160 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4160:	b40e      	push	{r1, r2, r3}
   d4162:	b503      	push	{r0, r1, lr}
   d4164:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4166:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4168:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d416c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d416e:	f003 f81a 	bl	d71a6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4172:	b002      	add	sp, #8
   d4174:	f85d eb04 	ldr.w	lr, [sp], #4
   d4178:	b003      	add	sp, #12
   d417a:	4770      	bx	lr

000d417c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d417c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d417e:	4604      	mov	r4, r0
   d4180:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4182:	7922      	ldrb	r2, [r4, #4]
   d4184:	68a3      	ldr	r3, [r4, #8]
   d4186:	b132      	cbz	r2, d4196 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4188:	b9a3      	cbnz	r3, d41b4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d418a:	490b      	ldr	r1, [pc, #44]	; (d41b8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d418c:	b002      	add	sp, #8
   d418e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4192:	f002 bedb 	b.w	d6f4c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4196:	4a09      	ldr	r2, [pc, #36]	; (d41bc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4198:	7b26      	ldrb	r6, [r4, #12]
   d419a:	4d09      	ldr	r5, [pc, #36]	; (d41c0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d419c:	4909      	ldr	r1, [pc, #36]	; (d41c4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d419e:	7b64      	ldrb	r4, [r4, #13]
   d41a0:	2e01      	cmp	r6, #1
   d41a2:	bf18      	it	ne
   d41a4:	4629      	movne	r1, r5
   d41a6:	e9cd 1400 	strd	r1, r4, [sp]
   d41aa:	4907      	ldr	r1, [pc, #28]	; (d41c8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d41ac:	f7ff ffd8 	bl	d4160 <_ZN5Print6printfEPKcz>
  }
   d41b0:	b002      	add	sp, #8
   d41b2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d41b4:	4a05      	ldr	r2, [pc, #20]	; (d41cc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d41b6:	e7ef      	b.n	d4198 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d41b8:	000d864d 	.word	0x000d864d
   d41bc:	000d8644 	.word	0x000d8644
   d41c0:	000d8649 	.word	0x000d8649
   d41c4:	000d8645 	.word	0x000d8645
   d41c8:	000d8663 	.word	0x000d8663
   d41cc:	000d863c 	.word	0x000d863c

000d41d0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d41d2:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41d4:	4605      	mov	r5, r0
   d41d6:	460f      	mov	r7, r1
   d41d8:	4616      	mov	r6, r2
        if (valid_) {
   d41da:	b18b      	cbz	r3, d4200 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41dc:	6803      	ldr	r3, [r0, #0]
   d41de:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d41e0:	b183      	cbz	r3, d4204 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41e2:	889a      	ldrh	r2, [r3, #4]
   d41e4:	2a01      	cmp	r2, #1
   d41e6:	d006      	beq.n	d41f6 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d41e8:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d41ea:	e7f9      	b.n	d41e0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d41ec:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d41ee:	b14b      	cbz	r3, d4204 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41f0:	889a      	ldrh	r2, [r3, #4]
   d41f2:	2a01      	cmp	r2, #1
   d41f4:	d1fa      	bne.n	d41ec <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d41f6:	b12b      	cbz	r3, d4204 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d41f8:	899a      	ldrh	r2, [r3, #12]
   d41fa:	42ba      	cmp	r2, r7
   d41fc:	d1f6      	bne.n	d41ec <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d41fe:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4200:	4628      	mov	r0, r5
   d4202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4204:	490a      	ldr	r1, [pc, #40]	; (d4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4206:	2010      	movs	r0, #16
   d4208:	f003 fc87 	bl	d7b1a <_ZnwjRKSt9nothrow_t>
   d420c:	4604      	mov	r4, r0
   d420e:	b168      	cbz	r0, d422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4210:	2210      	movs	r2, #16
   d4212:	2100      	movs	r1, #0
   d4214:	f004 f9b6 	bl	d8584 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4218:	4b06      	ldr	r3, [pc, #24]	; (d4234 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d421a:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d421c:	2301      	movs	r3, #1
   d421e:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4220:	692b      	ldr	r3, [r5, #16]
   d4222:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4224:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4226:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4228:	612c      	str	r4, [r5, #16]
   d422a:	e7e9      	b.n	d4200 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d422c:	7528      	strb	r0, [r5, #20]
                return *this;
   d422e:	e7e7      	b.n	d4200 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d4230:	000d89a8 	.word	0x000d89a8
   d4234:	00030010 	.word	0x00030010

000d4238 <setup>:
// Various timing constants
const unsigned long MAX_TIME_TO_PUBLISH_MS = 60000; // Only stay awake for 60 seconds trying to connect to the cloud and publish
const unsigned long TIME_AFTER_PUBLISH_MS = 4000; // After publish, wait 4 seconds for data to go out

void setup(void)
{
   d4238:	b508      	push	{r3, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d423a:	f001 ff97 	bl	d616c <spark_cloud_flag_connect>
  Particle.connect();
  // Cellular.off(); turn off cellular for prelim testing (uncomment)

  delay(5000); // to see response from begin command
   d423e:	f241 3088 	movw	r0, #5000	; 0x1388
   d4242:	f002 f853 	bl	d62ec <delay>

  Serial.begin(9600);
   d4246:	f003 faa5 	bl	d7794 <_Z16_fetch_usbserialv>
   d424a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d424e:	f003 fa95 	bl	d777c <_ZN9USBSerial5beginEl>
  Serial.println("Maxbotix Test");
   d4252:	f003 fa9f 	bl	d7794 <_Z16_fetch_usbserialv>

}
   d4256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("Maxbotix Test");
   d425a:	4901      	ldr	r1, [pc, #4]	; (d4260 <setup+0x28>)
   d425c:	f002 be89 	b.w	d6f72 <_ZN5Print7printlnEPKc>
   d4260:	000d8680 	.word	0x000d8680
   d4264:	00000000 	.word	0x00000000

000d4268 <loop>:

void loop(void)
{
   d4268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Enter state machine
  switch(state) {
   d426c:	4eb8      	ldr	r6, [pc, #736]	; (d4550 <loop+0x2e8>)
   d426e:	7833      	ldrb	r3, [r6, #0]
{
   d4270:	b0ab      	sub	sp, #172	; 0xac
  switch(state) {
   d4272:	b12b      	cbz	r3, d4280 <loop+0x18>
   d4274:	2b01      	cmp	r3, #1
   d4276:	f000 819d 	beq.w	d45b4 <loop+0x34c>
  }
  break;

  }

}
   d427a:	b02b      	add	sp, #172	; 0xac
   d427c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dist_in_sum = 0; 
   d4280:	4cb4      	ldr	r4, [pc, #720]	; (d4554 <loop+0x2ec>)
    for(j=0; j<100; j++){
   d4282:	4db5      	ldr	r5, [pc, #724]	; (d4558 <loop+0x2f0>)
    dist_in_sum = 0; 
   d4284:	2200      	movs	r2, #0
   d4286:	6022      	str	r2, [r4, #0]
    for(j=0; j<100; j++){
   d4288:	602b      	str	r3, [r5, #0]
   d428a:	682b      	ldr	r3, [r5, #0]
   d428c:	2b63      	cmp	r3, #99	; 0x63
   d428e:	f300 80a3 	bgt.w	d43d8 <loop+0x170>
      dist_in = analogRead(V_ultraS)*(3.3/2048)*(254/3.3);
   d4292:	4bb2      	ldr	r3, [pc, #712]	; (d455c <loop+0x2f4>)
   d4294:	f8df 830c 	ldr.w	r8, [pc, #780]	; d45a4 <loop+0x33c>
   d4298:	8818      	ldrh	r0, [r3, #0]
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d429a:	4fb1      	ldr	r7, [pc, #708]	; (d4560 <loop+0x2f8>)
   d429c:	f003 fb9e 	bl	d79dc <analogRead>
   d42a0:	f003 fd94 	bl	d7dcc <__aeabi_i2d>
   d42a4:	a3a6      	add	r3, pc, #664	; (adr r3, d4540 <loop+0x2d8>)
   d42a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42aa:	f003 fdf9 	bl	d7ea0 <__aeabi_dmul>
   d42ae:	a3a6      	add	r3, pc, #664	; (adr r3, d4548 <loop+0x2e0>)
   d42b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42b4:	f003 fdf4 	bl	d7ea0 <__aeabi_dmul>
   d42b8:	f004 f8ea 	bl	d8490 <__aeabi_d2f>
      dist_in_sum += dist_in;
   d42bc:	ed94 7a00 	vldr	s14, [r4]
      dist_in = analogRead(V_ultraS)*(3.3/2048)*(254/3.3);
   d42c0:	f8c8 0000 	str.w	r0, [r8]
   d42c4:	ee07 0a90 	vmov	s15, r0
      dist_in_sum += dist_in;
   d42c8:	ee77 7a27 	vadd.f32	s15, s14, s15
   d42cc:	f507 6a8c 	add.w	sl, r7, #1120	; 0x460
   d42d0:	edc4 7a00 	vstr	s15, [r4]
      Serial.println(dist_in);
   d42d4:	f003 fa5e 	bl	d7794 <_Z16_fetch_usbserialv>
   d42d8:	2102      	movs	r1, #2
   d42da:	ed98 0a00 	vldr	s0, [r8]
   d42de:	f002 ff53 	bl	d7188 <_ZN5Print7printlnEfi>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d42e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d42e6:	2300      	movs	r3, #0
   d42e8:	920e      	str	r2, [sp, #56]	; 0x38
  File() {}
   d42ea:	4a9e      	ldr	r2, [pc, #632]	; (d4564 <loop+0x2fc>)
   d42ec:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    Print() : write_error(0) {}
   d42f0:	930d      	str	r3, [sp, #52]	; 0x34
   d42f2:	920c      	str	r2, [sp, #48]	; 0x30
class SPISettings : public Printable {
   d42f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d42f8:	4a9b      	ldr	r2, [pc, #620]	; (d4568 <loop+0x300>)
   d42fa:	4b9c      	ldr	r3, [pc, #624]	; (d456c <loop+0x304>)
   d42fc:	9208      	str	r2, [sp, #32]
   d42fe:	930a      	str	r3, [sp, #40]	; 0x28
   d4300:	f04f 0901 	mov.w	r9, #1
   d4304:	ab08      	add	r3, sp, #32
   d4306:	220e      	movs	r2, #14
   d4308:	f207 416c 	addw	r1, r7, #1132	; 0x46c
   d430c:	4650      	mov	r0, sl
   d430e:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
   d4312:	f001 fb13 	bl	d593c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   d4316:	b360      	cbz	r0, d4372 <loop+0x10a>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4318:	f8c7 a000 	str.w	sl, [r7]
    vwd()->close();
   d431c:	f207 403c 	addw	r0, r7, #1084	; 0x43c
   d4320:	f000 fc74 	bl	d4c0c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4324:	4649      	mov	r1, r9
   d4326:	4638      	mov	r0, r7
   d4328:	f001 f9b6 	bl	d5698 <_ZN9FatVolume4initEh>
   d432c:	f207 493c 	addw	r9, r7, #1084	; 0x43c
   d4330:	4601      	mov	r1, r0
   d4332:	b1c8      	cbz	r0, d4368 <loop+0x100>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4334:	498a      	ldr	r1, [pc, #552]	; (d4560 <loop+0x2f8>)
   d4336:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   d433a:	f000 fa88 	bl	d484e <_ZN7FatFile8openRootEP9FatVolume>
   d433e:	b1c0      	cbz	r0, d4372 <loop+0x10a>
    if (!dir->isDir()) {
   d4340:	f897 343c 	ldrb.w	r3, [r7, #1084]	; 0x43c
   d4344:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4348:	d013      	beq.n	d4372 <loop+0x10a>
    m_cwd = dir;
   d434a:	4b89      	ldr	r3, [pc, #548]	; (d4570 <loop+0x308>)
    return open(m_cwd, path, oflag);
   d434c:	4a89      	ldr	r2, [pc, #548]	; (d4574 <loop+0x30c>)
    m_cwd = dir;
   d434e:	f8c3 9000 	str.w	r9, [r3]
    return open(m_cwd, path, oflag);
   d4352:	4989      	ldr	r1, [pc, #548]	; (d4578 <loop+0x310>)
   d4354:	f244 2302 	movw	r3, #16898	; 0x4202
   d4358:	a810      	add	r0, sp, #64	; 0x40
   d435a:	f000 fc5e 	bl	d4c1a <_ZN7FatFile4openEPS_PKci>
      if (!myFile.open("distance.txt", O_RDWR | O_CREAT | O_AT_END)) {
   d435e:	b970      	cbnz	r0, d437e <loop+0x116>
        Serial.println("opening test.txt for write failed");
   d4360:	f003 fa18 	bl	d7794 <_Z16_fetch_usbserialv>
   d4364:	4985      	ldr	r1, [pc, #532]	; (d457c <loop+0x314>)
   d4366:	e007      	b.n	d4378 <loop+0x110>
    return (part ? init(part) : init(1) || init(0))
   d4368:	4638      	mov	r0, r7
   d436a:	f001 f995 	bl	d5698 <_ZN9FatVolume4initEh>
   d436e:	2800      	cmp	r0, #0
   d4370:	d1e0      	bne.n	d4334 <loop+0xcc>
        Serial.println("failed to open card");
   d4372:	f003 fa0f 	bl	d7794 <_Z16_fetch_usbserialv>
   d4376:	4982      	ldr	r1, [pc, #520]	; (d4580 <loop+0x318>)
        Serial.println("opening test.txt for write failed");
   d4378:	f002 fdfb 	bl	d6f72 <_ZN5Print7printlnEPKc>
        return;
   d437c:	e77d      	b.n	d427a <loop+0x12>
      myFile.print(Time.now());
   d437e:	f003 f8f9 	bl	d7574 <_ZN9TimeClass3nowEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d4382:	1e07      	subs	r7, r0, #0
   d4384:	da26      	bge.n	d43d4 <loop+0x16c>
            t = print('-');
   d4386:	212d      	movs	r1, #45	; 0x2d
   d4388:	a80c      	add	r0, sp, #48	; 0x30
   d438a:	f002 fde3 	bl	d6f54 <_ZN5Print5printEc>
            val = -n;
   d438e:	4279      	negs	r1, r7
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4390:	220a      	movs	r2, #10
   d4392:	a80c      	add	r0, sp, #48	; 0x30
   d4394:	f002 fdf7 	bl	d6f86 <_ZN5Print11printNumberEmh>
      myFile.print(",");
   d4398:	497a      	ldr	r1, [pc, #488]	; (d4584 <loop+0x31c>)
   d439a:	a80c      	add	r0, sp, #48	; 0x30
   d439c:	f002 fdd6 	bl	d6f4c <_ZN5Print5printEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d43a0:	f001 fcfe 	bl	d5da0 <HAL_Timer_Get_Milli_Seconds>
   d43a4:	220a      	movs	r2, #10
   d43a6:	4601      	mov	r1, r0
   d43a8:	a80c      	add	r0, sp, #48	; 0x30
   d43aa:	f002 fdec 	bl	d6f86 <_ZN5Print11printNumberEmh>
      myFile.print(",");
   d43ae:	4975      	ldr	r1, [pc, #468]	; (d4584 <loop+0x31c>)
   d43b0:	a80c      	add	r0, sp, #48	; 0x30
   d43b2:	f002 fdcb 	bl	d6f4c <_ZN5Print5printEPKc>
      myFile.println(dist_in);
   d43b6:	ed98 0a00 	vldr	s0, [r8]
   d43ba:	2102      	movs	r1, #2
   d43bc:	a80c      	add	r0, sp, #48	; 0x30
   d43be:	f002 fee3 	bl	d7188 <_ZN5Print7printlnEfi>
      myFile.close();
   d43c2:	a810      	add	r0, sp, #64	; 0x40
   d43c4:	f000 fc22 	bl	d4c0c <_ZN7FatFile5closeEv>
      delay(100);
   d43c8:	2064      	movs	r0, #100	; 0x64
   d43ca:	f001 ff8f 	bl	d62ec <delay>
    for(j=0; j<100; j++){
   d43ce:	682b      	ldr	r3, [r5, #0]
   d43d0:	3301      	adds	r3, #1
   d43d2:	e759      	b.n	d4288 <loop+0x20>
            val = n;
   d43d4:	4639      	mov	r1, r7
   d43d6:	e7db      	b.n	d4390 <loop+0x128>
    dist_in_avg = dist_in_sum/j;
   d43d8:	ee07 3a90 	vmov	s15, r3
   d43dc:	edd4 6a00 	vldr	s13, [r4]
   d43e0:	4f69      	ldr	r7, [pc, #420]	; (d4588 <loop+0x320>)
   d43e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d43e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d43ea:	ed87 7a00 	vstr	s14, [r7]
    Serial.print(j);
   d43ee:	f003 f9d1 	bl	d7794 <_Z16_fetch_usbserialv>
   d43f2:	682d      	ldr	r5, [r5, #0]
        if (n < 0 && base == 10) {
   d43f4:	2d00      	cmp	r5, #0
   d43f6:	4680      	mov	r8, r0
   d43f8:	f280 8084 	bge.w	d4504 <loop+0x29c>
            t = print('-');
   d43fc:	212d      	movs	r1, #45	; 0x2d
   d43fe:	f002 fda9 	bl	d6f54 <_ZN5Print5printEc>
            val = -n;
   d4402:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d4404:	220a      	movs	r2, #10
   d4406:	4640      	mov	r0, r8
   d4408:	f002 fdbd 	bl	d6f86 <_ZN5Print11printNumberEmh>
    Serial.print(",");
   d440c:	f003 f9c2 	bl	d7794 <_Z16_fetch_usbserialv>
   d4410:	495c      	ldr	r1, [pc, #368]	; (d4584 <loop+0x31c>)
    stateTime = millis();
   d4412:	4d5e      	ldr	r5, [pc, #376]	; (d458c <loop+0x324>)
        Serial.print("Trying to connect");
   d4414:	f8df 9190 	ldr.w	r9, [pc, #400]	; d45a8 <loop+0x340>
          Serial.println("max time for publishing reached without success; go to sleep");
   d4418:	f8df a190 	ldr.w	sl, [pc, #400]	; d45ac <loop+0x344>
        Serial.println("Not max time, try again to publish");
   d441c:	f8df 8190 	ldr.w	r8, [pc, #400]	; d45b0 <loop+0x348>
    Serial.print(",");
   d4420:	f002 fd94 	bl	d6f4c <_ZN5Print5printEPKc>
    Serial.print(dist_in_sum);
   d4424:	f003 f9b6 	bl	d7794 <_Z16_fetch_usbserialv>
   d4428:	ed94 0a00 	vldr	s0, [r4]
   d442c:	2102      	movs	r1, #2
   d442e:	f002 fe91 	bl	d7154 <_ZN5Print5printEfi>
    Serial.print(",");
   d4432:	f003 f9af 	bl	d7794 <_Z16_fetch_usbserialv>
   d4436:	4953      	ldr	r1, [pc, #332]	; (d4584 <loop+0x31c>)
   d4438:	f002 fd88 	bl	d6f4c <_ZN5Print5printEPKc>
    Serial.println(dist_in_avg);
   d443c:	f003 f9aa 	bl	d7794 <_Z16_fetch_usbserialv>
   d4440:	ed97 0a00 	vldr	s0, [r7]
   d4444:	2102      	movs	r1, #2
   d4446:	f002 fe9f 	bl	d7188 <_ZN5Print7printlnEfi>
   d444a:	f001 fca9 	bl	d5da0 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d444e:	6028      	str	r0, [r5, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4450:	f001 fe94 	bl	d617c <spark_cloud_flag_connected>
      if (Particle.connected() == false)
   d4454:	b930      	cbnz	r0, d4464 <loop+0x1fc>
        spark_cloud_flag_connect();
   d4456:	f001 fe89 	bl	d616c <spark_cloud_flag_connect>
        Serial.print("Trying to connect");
   d445a:	f003 f99b 	bl	d7794 <_Z16_fetch_usbserialv>
   d445e:	4649      	mov	r1, r9
   d4460:	f002 fd74 	bl	d6f4c <_ZN5Print5printEPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4464:	f001 fe8a 	bl	d617c <spark_cloud_flag_connected>
      if (Particle.connected())
   d4468:	4604      	mov	r4, r0
   d446a:	2800      	cmp	r0, #0
   d446c:	d04c      	beq.n	d4508 <loop+0x2a0>
        float cellVoltage = batteryMonitor.getVCell();
   d446e:	4848      	ldr	r0, [pc, #288]	; (d4590 <loop+0x328>)
   d4470:	f002 fb44 	bl	d6afc <_ZN9FuelGauge8getVCellEv>
        float stateOfCharge = batteryMonitor.getSoC();
   d4474:	4846      	ldr	r0, [pc, #280]	; (d4590 <loop+0x328>)
        float cellVoltage = batteryMonitor.getVCell();
   d4476:	ee10 4a10 	vmov	r4, s0
        float stateOfCharge = batteryMonitor.getSoC();
   d447a:	f002 fb5b 	bl	d6b34 <_ZN9FuelGauge6getSoCEv>
   d447e:	ee10 5a10 	vmov	r5, s0
        snprintf(data, sizeof(data), "%li,%.5f,%.02f,%.02f",//,%.5f,%.5f,%.5f,%.5f,%.5f,%.02f,%.02f",
   d4482:	f003 f877 	bl	d7574 <_ZN9TimeClass3nowEv>
   d4486:	9007      	str	r0, [sp, #28]
   d4488:	4628      	mov	r0, r5
   d448a:	f003 fcb1 	bl	d7df0 <__aeabi_f2d>
   d448e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4492:	4620      	mov	r0, r4
   d4494:	f003 fcac 	bl	d7df0 <__aeabi_f2d>
   d4498:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d449c:	6838      	ldr	r0, [r7, #0]
   d449e:	f003 fca7 	bl	d7df0 <__aeabi_f2d>
   d44a2:	9b07      	ldr	r3, [sp, #28]
   d44a4:	4a3b      	ldr	r2, [pc, #236]	; (d4594 <loop+0x32c>)
   d44a6:	e9cd 0100 	strd	r0, r1, [sp]
   d44aa:	2178      	movs	r1, #120	; 0x78
   d44ac:	a80c      	add	r0, sp, #48	; 0x30
   d44ae:	f001 fef5 	bl	d629c <snprintf>
        Serial.println("publishing data");
   d44b2:	f003 f96f 	bl	d7794 <_Z16_fetch_usbserialv>
   d44b6:	4938      	ldr	r1, [pc, #224]	; (d4598 <loop+0x330>)
   d44b8:	f002 fd5b 	bl	d6f72 <_ZN5Print7printlnEPKc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d44bc:	4b37      	ldr	r3, [pc, #220]	; (d459c <loop+0x334>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d44be:	4938      	ldr	r1, [pc, #224]	; (d45a0 <loop+0x338>)
   d44c0:	781b      	ldrb	r3, [r3, #0]
   d44c2:	f88d 3000 	strb.w	r3, [sp]
   d44c6:	6809      	ldr	r1, [r1, #0]
   d44c8:	233c      	movs	r3, #60	; 0x3c
   d44ca:	aa0c      	add	r2, sp, #48	; 0x30
   d44cc:	a808      	add	r0, sp, #32
   d44ce:	f002 f8f1 	bl	d66b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d44d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   d44d4:	b17c      	cbz	r4, d44f6 <loop+0x28e>
      if (--_M_use_count == 0)
   d44d6:	6863      	ldr	r3, [r4, #4]
   d44d8:	3b01      	subs	r3, #1
   d44da:	6063      	str	r3, [r4, #4]
   d44dc:	b95b      	cbnz	r3, d44f6 <loop+0x28e>
          _M_dispose();
   d44de:	6823      	ldr	r3, [r4, #0]
   d44e0:	4620      	mov	r0, r4
   d44e2:	689b      	ldr	r3, [r3, #8]
   d44e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d44e6:	68a3      	ldr	r3, [r4, #8]
   d44e8:	3b01      	subs	r3, #1
   d44ea:	60a3      	str	r3, [r4, #8]
   d44ec:	b91b      	cbnz	r3, d44f6 <loop+0x28e>
            _M_destroy();
   d44ee:	6823      	ldr	r3, [r4, #0]
   d44f0:	4620      	mov	r0, r4
   d44f2:	68db      	ldr	r3, [r3, #12]
   d44f4:	4798      	blx	r3
        delay(TIME_AFTER_PUBLISH_MS);
   d44f6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d44fa:	f001 fef7 	bl	d62ec <delay>
        state = SLEEP_STATE;
   d44fe:	2301      	movs	r3, #1
    state = PUBLISH_STATE;
   d4500:	7033      	strb	r3, [r6, #0]
  break;
   d4502:	e6ba      	b.n	d427a <loop+0x12>
            val = n;
   d4504:	4629      	mov	r1, r5
   d4506:	e77d      	b.n	d4404 <loop+0x19c>
   d4508:	f001 fc4a 	bl	d5da0 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS)
   d450c:	682b      	ldr	r3, [r5, #0]
   d450e:	1ac0      	subs	r0, r0, r3
   d4510:	f64e 235f 	movw	r3, #59999	; 0xea5f
   d4514:	4298      	cmp	r0, r3
   d4516:	d906      	bls.n	d4526 <loop+0x2be>
          state = SLEEP_STATE;
   d4518:	2401      	movs	r4, #1
   d451a:	7034      	strb	r4, [r6, #0]
          Serial.println("max time for publishing reached without success; go to sleep");
   d451c:	f003 f93a 	bl	d7794 <_Z16_fetch_usbserialv>
   d4520:	4651      	mov	r1, sl
   d4522:	f002 fd26 	bl	d6f72 <_ZN5Print7printlnEPKc>
        Serial.println("Not max time, try again to publish");
   d4526:	f003 f935 	bl	d7794 <_Z16_fetch_usbserialv>
   d452a:	4641      	mov	r1, r8
   d452c:	f002 fd21 	bl	d6f72 <_ZN5Print7printlnEPKc>
        delay(100);
   d4530:	2064      	movs	r0, #100	; 0x64
   d4532:	f001 fedb 	bl	d62ec <delay>
    while(!isMaxTime)
   d4536:	2c00      	cmp	r4, #0
   d4538:	d08a      	beq.n	d4450 <loop+0x1e8>
   d453a:	e69e      	b.n	d427a <loop+0x12>
   d453c:	f3af 8000 	nop.w
   d4540:	66666666 	.word	0x66666666
   d4544:	3f5a6666 	.word	0x3f5a6666
   d4548:	83e0f83e 	.word	0x83e0f83e
   d454c:	40533e0f 	.word	0x40533e0f
   d4550:	2003e6f8 	.word	0x2003e6f8
   d4554:	2003e268 	.word	0x2003e268
   d4558:	2003e26c 	.word	0x2003e26c
   d455c:	2003e1b0 	.word	0x2003e1b0
   d4560:	2003e274 	.word	0x2003e274
   d4564:	000d87a8 	.word	0x000d87a8
   d4568:	000d8794 	.word	0x000d8794
   d456c:	02faf080 	.word	0x02faf080
   d4570:	2003e704 	.word	0x2003e704
   d4574:	000d868e 	.word	0x000d868e
   d4578:	2003e6b0 	.word	0x2003e6b0
   d457c:	000d86af 	.word	0x000d86af
   d4580:	000d869b 	.word	0x000d869b
   d4584:	000d86d1 	.word	0x000d86d1
   d4588:	2003e264 	.word	0x2003e264
   d458c:	2003e6fc 	.word	0x2003e6fc
   d4590:	2003e240 	.word	0x2003e240
   d4594:	000d86e5 	.word	0x000d86e5
   d4598:	000d86fa 	.word	0x000d86fa
   d459c:	2003e23c 	.word	0x2003e23c
   d45a0:	2003e1b4 	.word	0x2003e1b4
   d45a4:	2003e260 	.word	0x2003e260
   d45a8:	000d86d3 	.word	0x000d86d3
   d45ac:	000d870a 	.word	0x000d870a
   d45b0:	000d8747 	.word	0x000d8747
    Serial.println("going to sleep");
   d45b4:	f003 f8ee 	bl	d7794 <_Z16_fetch_usbserialv>
   d45b8:	4923      	ldr	r1, [pc, #140]	; (d4648 <loop+0x3e0>)
   d45ba:	f002 fcda 	bl	d6f72 <_ZN5Print7printlnEPKc>
    delay(500);
   d45be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d45c2:	f001 fe93 	bl	d62ec <delay>
        if (valid_) {
   d45c6:	4b21      	ldr	r3, [pc, #132]	; (d464c <loop+0x3e4>)
   d45c8:	7d1a      	ldrb	r2, [r3, #20]
   d45ca:	b10a      	cbz	r2, d45d0 <loop+0x368>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d45cc:	2202      	movs	r2, #2
   d45ce:	721a      	strb	r2, [r3, #8]
          .gpio(D2, FALLING)
   d45d0:	2202      	movs	r2, #2
   d45d2:	481e      	ldr	r0, [pc, #120]	; (d464c <loop+0x3e4>)
   d45d4:	4611      	mov	r1, r2
   d45d6:	f7ff fdfb 	bl	d41d0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d45da:	7d03      	ldrb	r3, [r0, #20]
   d45dc:	4605      	mov	r5, r0
   d45de:	b1d3      	cbz	r3, d4616 <loop+0x3ae>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d45e0:	6803      	ldr	r3, [r0, #0]
   d45e2:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d45e4:	b123      	cbz	r3, d45f0 <loop+0x388>
            if (start->type == type) {
   d45e6:	889a      	ldrh	r2, [r3, #4]
   d45e8:	2a04      	cmp	r2, #4
   d45ea:	d029      	beq.n	d4640 <loop+0x3d8>
            start = start->next;
   d45ec:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d45ee:	e7f9      	b.n	d45e4 <loop+0x37c>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d45f0:	4917      	ldr	r1, [pc, #92]	; (d4650 <loop+0x3e8>)
   d45f2:	2010      	movs	r0, #16
   d45f4:	f003 fa91 	bl	d7b1a <_ZnwjRKSt9nothrow_t>
   d45f8:	4604      	mov	r4, r0
   d45fa:	b1f8      	cbz	r0, d463c <loop+0x3d4>
   d45fc:	2210      	movs	r2, #16
   d45fe:	2100      	movs	r1, #0
   d4600:	f003 ffc0 	bl	d8584 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4604:	4b13      	ldr	r3, [pc, #76]	; (d4654 <loop+0x3ec>)
   d4606:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4608:	2304      	movs	r3, #4
   d460a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d460c:	692b      	ldr	r3, [r5, #16]
   d460e:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d4610:	4b11      	ldr	r3, [pc, #68]	; (d4658 <loop+0x3f0>)
   d4612:	60e3      	str	r3, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4614:	612c      	str	r4, [r5, #16]
    System.sleep(config);
   d4616:	a80c      	add	r0, sp, #48	; 0x30
   d4618:	490c      	ldr	r1, [pc, #48]	; (d464c <loop+0x3e4>)
   d461a:	f002 feff 	bl	d741c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d461e:	980c      	ldr	r0, [sp, #48]	; 0x30
   d4620:	b108      	cbz	r0, d4626 <loop+0x3be>
            free(wakeupSource_);
   d4622:	f001 fe33 	bl	d628c <free>
    Serial.print("Feeling restless");
   d4626:	f003 f8b5 	bl	d7794 <_Z16_fetch_usbserialv>
   d462a:	490c      	ldr	r1, [pc, #48]	; (d465c <loop+0x3f4>)
   d462c:	f002 fc8e 	bl	d6f4c <_ZN5Print5printEPKc>
   d4630:	f001 fbb6 	bl	d5da0 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d4634:	4b0a      	ldr	r3, [pc, #40]	; (d4660 <loop+0x3f8>)
   d4636:	6018      	str	r0, [r3, #0]
    state = PUBLISH_STATE;
   d4638:	2300      	movs	r3, #0
   d463a:	e761      	b.n	d4500 <loop+0x298>
                valid_ = false;
   d463c:	7528      	strb	r0, [r5, #20]
                return *this;
   d463e:	e7ea      	b.n	d4616 <loop+0x3ae>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4640:	4a05      	ldr	r2, [pc, #20]	; (d4658 <loop+0x3f0>)
   d4642:	60da      	str	r2, [r3, #12]
                return *this;
   d4644:	e7e7      	b.n	d4616 <loop+0x3ae>
   d4646:	bf00      	nop
   d4648:	000d876a 	.word	0x000d876a
   d464c:	2003e248 	.word	0x2003e248
   d4650:	000d89a8 	.word	0x000d89a8
   d4654:	00030010 	.word	0x00030010
   d4658:	00360420 	.word	0x00360420
   d465c:	000d8779 	.word	0x000d8779
   d4660:	2003e6fc 	.word	0x2003e6fc

000d4664 <_GLOBAL__sub_I_sd>:
}
   d4664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4666:	4c36      	ldr	r4, [pc, #216]	; (d4740 <_GLOBAL__sub_I_sd+0xdc>)
        val_(val) {
   d4668:	4b36      	ldr	r3, [pc, #216]	; (d4744 <_GLOBAL__sub_I_sd+0xe0>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d466a:	4d37      	ldr	r5, [pc, #220]	; (d4748 <_GLOBAL__sub_I_sd+0xe4>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d466c:	2064      	movs	r0, #100	; 0x64
   d466e:	2200      	movs	r2, #0
   d4670:	2101      	movs	r1, #1
   d4672:	f884 0460 	strb.w	r0, [r4, #1120]	; 0x460
  {
   d4676:	4835      	ldr	r0, [pc, #212]	; (d474c <_GLOBAL__sub_I_sd+0xe8>)
   d4678:	7019      	strb	r1, [r3, #0]
   d467a:	71e2      	strb	r2, [r4, #7]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d467c:	f8a4 243c 	strh.w	r2, [r4, #1084]	; 0x43c
   d4680:	f884 246a 	strb.w	r2, [r4, #1130]	; 0x46a
   d4684:	f8c4 0470 	str.w	r0, [r4, #1136]	; 0x470
   d4688:	f884 1474 	strb.w	r1, [r4, #1140]	; 0x474
   d468c:	f8c4 2478 	str.w	r2, [r4, #1144]	; 0x478
   d4690:	f8a4 247c 	strh.w	r2, [r4, #1148]	; 0x47c
   d4694:	7829      	ldrb	r1, [r5, #0]
   d4696:	f3bf 8f5b 	dmb	ish
   d469a:	f011 0101 	ands.w	r1, r1, #1
   d469e:	d10b      	bne.n	d46b8 <_GLOBAL__sub_I_sd+0x54>
   d46a0:	4628      	mov	r0, r5
   d46a2:	9101      	str	r1, [sp, #4]
   d46a4:	f7ff fcfd 	bl	d40a2 <__cxa_guard_acquire>
   d46a8:	9901      	ldr	r1, [sp, #4]
   d46aa:	b128      	cbz	r0, d46b8 <_GLOBAL__sub_I_sd+0x54>
   d46ac:	4828      	ldr	r0, [pc, #160]	; (d4750 <_GLOBAL__sub_I_sd+0xec>)
   d46ae:	f002 fdc5 	bl	d723c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d46b2:	4628      	mov	r0, r5
   d46b4:	f7ff fcfa 	bl	d40ac <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d46b8:	4b25      	ldr	r3, [pc, #148]	; (d4750 <_GLOBAL__sub_I_sd+0xec>)
              error_(SYSTEM_ERROR_NONE) {
   d46ba:	4d26      	ldr	r5, [pc, #152]	; (d4754 <_GLOBAL__sub_I_sd+0xf0>)
SdFat sd;
   d46bc:	4a26      	ldr	r2, [pc, #152]	; (d4758 <_GLOBAL__sub_I_sd+0xf4>)
   d46be:	4927      	ldr	r1, [pc, #156]	; (d475c <_GLOBAL__sub_I_sd+0xf8>)
   d46c0:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d46c4:	481e      	ldr	r0, [pc, #120]	; (d4740 <_GLOBAL__sub_I_sd+0xdc>)
   d46c6:	2400      	movs	r4, #0
   d46c8:	f003 fa20 	bl	d7b0c <__aeabi_atexit>
    SleepResult() {}
   d46cc:	4b24      	ldr	r3, [pc, #144]	; (d4760 <_GLOBAL__sub_I_sd+0xfc>)
   d46ce:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d46d0:	602c      	str	r4, [r5, #0]
   d46d2:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d46d4:	71ac      	strb	r4, [r5, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d46d6:	2002      	movs	r0, #2
   d46d8:	f001 fcf2 	bl	d60c0 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC); // uncomment for deployment
   d46dc:	4a1e      	ldr	r2, [pc, #120]	; (d4758 <_GLOBAL__sub_I_sd+0xf4>)
   d46de:	4921      	ldr	r1, [pc, #132]	; (d4764 <_GLOBAL__sub_I_sd+0x100>)
   d46e0:	4628      	mov	r0, r5
   d46e2:	f003 fa13 	bl	d7b0c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d46e6:	4621      	mov	r1, r4
   d46e8:	2001      	movs	r0, #1
   d46ea:	f001 fcf9 	bl	d60e0 <system_thread_set_state>
FuelGauge batteryMonitor;
   d46ee:	4621      	mov	r1, r4
   d46f0:	481d      	ldr	r0, [pc, #116]	; (d4768 <_GLOBAL__sub_I_sd+0x104>)
   d46f2:	f002 f9ad 	bl	d6a50 <_ZN9FuelGaugeC1Eb>
   d46f6:	4a18      	ldr	r2, [pc, #96]	; (d4758 <_GLOBAL__sub_I_sd+0xf4>)
   d46f8:	491c      	ldr	r1, [pc, #112]	; (d476c <_GLOBAL__sub_I_sd+0x108>)
   d46fa:	481b      	ldr	r0, [pc, #108]	; (d4768 <_GLOBAL__sub_I_sd+0x104>)
   d46fc:	f003 fa06 	bl	d7b0c <__aeabi_atexit>
PMIC pmic;
   d4700:	4621      	mov	r1, r4
   d4702:	481b      	ldr	r0, [pc, #108]	; (d4770 <_GLOBAL__sub_I_sd+0x10c>)
   d4704:	f002 fbf5 	bl	d6ef2 <_ZN4PMICC1Eb>
   d4708:	4a13      	ldr	r2, [pc, #76]	; (d4758 <_GLOBAL__sub_I_sd+0xf4>)
   d470a:	491a      	ldr	r1, [pc, #104]	; (d4774 <_GLOBAL__sub_I_sd+0x110>)
   d470c:	4818      	ldr	r0, [pc, #96]	; (d4770 <_GLOBAL__sub_I_sd+0x10c>)
   d470e:	f003 f9fd 	bl	d7b0c <__aeabi_atexit>
        : config_(config) {
   d4712:	4819      	ldr	r0, [pc, #100]	; (d4778 <_GLOBAL__sub_I_sd+0x114>)
SystemSleepConfiguration config;
   d4714:	4919      	ldr	r1, [pc, #100]	; (d477c <_GLOBAL__sub_I_sd+0x118>)
              valid_(true) {
   d4716:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d471a:	4603      	mov	r3, r0
   d471c:	1d02      	adds	r2, r0, #4
   d471e:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d4722:	709c      	strb	r4, [r3, #2]
   d4724:	2301      	movs	r3, #1
   d4726:	7503      	strb	r3, [r0, #20]
   d4728:	4a0b      	ldr	r2, [pc, #44]	; (d4758 <_GLOBAL__sub_I_sd+0xf4>)
        config_.size = sizeof(hal_sleep_config_t);
   d472a:	4b15      	ldr	r3, [pc, #84]	; (d4780 <_GLOBAL__sub_I_sd+0x11c>)
   d472c:	6043      	str	r3, [r0, #4]
        config_.wakeup_sources = nullptr;
   d472e:	e9c0 4403 	strd	r4, r4, [r0, #12]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d4732:	7204      	strb	r4, [r0, #8]
}
   d4734:	b003      	add	sp, #12
   d4736:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
SystemSleepConfiguration config;
   d473a:	f003 b9e7 	b.w	d7b0c <__aeabi_atexit>
   d473e:	bf00      	nop
   d4740:	2003e274 	.word	0x2003e274
   d4744:	2003e23c 	.word	0x2003e23c
   d4748:	2003e224 	.word	0x2003e224
   d474c:	000d8794 	.word	0x000d8794
   d4750:	2003e228 	.word	0x2003e228
   d4754:	2003e230 	.word	0x2003e230
   d4758:	2003e220 	.word	0x2003e220
   d475c:	000d40d1 	.word	0x000d40d1
   d4760:	ffff0000 	.word	0xffff0000
   d4764:	000d4151 	.word	0x000d4151
   d4768:	2003e240 	.word	0x2003e240
   d476c:	000d6a71 	.word	0x000d6a71
   d4770:	2003e270 	.word	0x2003e270
   d4774:	000d6f11 	.word	0x000d6f11
   d4778:	2003e248 	.word	0x2003e248
   d477c:	000d412b 	.word	0x000d412b
   d4780:	00030010 	.word	0x00030010

000d4784 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d4784:	b510      	push	{r4, lr}
   d4786:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4788:	3024      	adds	r0, #36	; 0x24
   d478a:	f000 fe77 	bl	d547c <_ZN8FatCache4syncEv>
   d478e:	b128      	cbz	r0, d479c <_ZN9FatVolume9cacheSyncEv+0x18>
   d4790:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d4794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4798:	f000 be70 	b.w	d547c <_ZN8FatCache4syncEv>
  }
   d479c:	bd10      	pop	{r4, pc}

000d479e <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d479e:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d47a0:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   d47a2:	f043 0304 	orr.w	r3, r3, #4
   d47a6:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d47a8:	f100 0210 	add.w	r2, r0, #16
   d47ac:	6880      	ldr	r0, [r0, #8]
   d47ae:	f000 bf1b 	b.w	d55e8 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d47b4 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d47b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d47b8:	7801      	ldrb	r1, [r0, #0]
   d47ba:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   d47be:	4604      	mov	r4, r0
  if (isRootFixed()) {
   d47c0:	d003      	beq.n	d47ca <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d47c2:	2600      	movs	r6, #0
}
   d47c4:	4630      	mov	r0, r6
   d47c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   d47ca:	6942      	ldr	r2, [r0, #20]
   d47cc:	4b17      	ldr	r3, [pc, #92]	; (d482c <_ZN7FatFile13addDirClusterEv+0x78>)
   d47ce:	429a      	cmp	r2, r3
   d47d0:	d2f7      	bcs.n	d47c2 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   d47d2:	f7ff ffe4 	bl	d479e <_ZN7FatFile10addClusterEv>
   d47d6:	4606      	mov	r6, r0
   d47d8:	2800      	cmp	r0, #0
   d47da:	d0f2      	beq.n	d47c2 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   d47dc:	6921      	ldr	r1, [r4, #16]
   d47de:	68a0      	ldr	r0, [r4, #8]
   d47e0:	f000 fe97 	bl	d5512 <_ZNK9FatVolume17clusterFirstBlockEm>
   d47e4:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d47e6:	68a0      	ldr	r0, [r4, #8]
   d47e8:	2205      	movs	r2, #5
   d47ea:	4639      	mov	r1, r7
   d47ec:	3024      	adds	r0, #36	; 0x24
   d47ee:	f000 fe6d 	bl	d54cc <_ZN8FatCache4readEmh>
  if (!pc) {
   d47f2:	4680      	mov	r8, r0
   d47f4:	2800      	cmp	r0, #0
   d47f6:	d0e4      	beq.n	d47c2 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   d47f8:	4629      	mov	r1, r5
   d47fa:	f44f 7200 	mov.w	r2, #512	; 0x200
   d47fe:	f003 fec1 	bl	d8584 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d4802:	2501      	movs	r5, #1
   d4804:	68a3      	ldr	r3, [r4, #8]
   d4806:	791a      	ldrb	r2, [r3, #4]
   d4808:	42aa      	cmp	r2, r5
   d480a:	d909      	bls.n	d4820 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   d480c:	6818      	ldr	r0, [r3, #0]
   d480e:	4642      	mov	r2, r8
   d4810:	19e9      	adds	r1, r5, r7
   d4812:	f001 f9c4 	bl	d5b9e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d4816:	2800      	cmp	r0, #0
   d4818:	d0d3      	beq.n	d47c2 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d481a:	3501      	adds	r5, #1
   d481c:	b2ed      	uxtb	r5, r5
   d481e:	e7f1      	b.n	d4804 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d4820:	6963      	ldr	r3, [r4, #20]
   d4822:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d4826:	6163      	str	r3, [r4, #20]
  return true;
   d4828:	e7cc      	b.n	d47c4 <_ZN7FatFile13addDirClusterEv+0x10>
   d482a:	bf00      	nop
   d482c:	001ffe00 	.word	0x001ffe00

000d4830 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d4830:	b510      	push	{r4, lr}
   d4832:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   d4834:	6880      	ldr	r0, [r0, #8]
   d4836:	460a      	mov	r2, r1
   d4838:	3024      	adds	r0, #36	; 0x24
   d483a:	69a1      	ldr	r1, [r4, #24]
   d483c:	f000 fe46 	bl	d54cc <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d4840:	b120      	cbz	r0, d484c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d4842:	88a3      	ldrh	r3, [r4, #4]
   d4844:	f003 030f 	and.w	r3, r3, #15
   d4848:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d484c:	bd10      	pop	{r4, pc}

000d484e <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d484e:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d4850:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
   d4852:	4605      	mov	r5, r0
   d4854:	460e      	mov	r6, r1
  if (isOpen()) {
   d4856:	b94c      	cbnz	r4, d486c <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d4858:	2224      	movs	r2, #36	; 0x24
   d485a:	4621      	mov	r1, r4
   d485c:	f003 fe92 	bl	d8584 <memset>

  m_vol = vol;
   d4860:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d4862:	79f3      	ldrb	r3, [r6, #7]
   d4864:	2b10      	cmp	r3, #16
   d4866:	d003      	beq.n	d4870 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d4868:	2b20      	cmp	r3, #32
   d486a:	d007      	beq.n	d487c <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
   d486c:	2000      	movs	r0, #0
   d486e:	e004      	b.n	d487a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
   d4870:	2320      	movs	r3, #32
  m_flags = F_READ;
   d4872:	2401      	movs	r4, #1
    m_attr = FILE_ATTR_ROOT32;
   d4874:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
   d4876:	70ac      	strb	r4, [r5, #2]
  return true;
   d4878:	4620      	mov	r0, r4
}
   d487a:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
   d487c:	2340      	movs	r3, #64	; 0x40
   d487e:	e7f8      	b.n	d4872 <_ZN7FatFile8openRootEP9FatVolume+0x24>

000d4880 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d4880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d4884:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
   d4886:	4604      	mov	r4, r0
   d4888:	4688      	mov	r8, r1
   d488a:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & F_READ)) {
   d488c:	2b00      	cmp	r3, #0
   d488e:	d05d      	beq.n	d494c <_ZN7FatFile4readEPvj+0xcc>
   d4890:	7882      	ldrb	r2, [r0, #2]
   d4892:	07d1      	lsls	r1, r2, #31
   d4894:	d55a      	bpl.n	d494c <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d4896:	071a      	lsls	r2, r3, #28
   d4898:	d52d      	bpl.n	d48f6 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d489a:	69c3      	ldr	r3, [r0, #28]
   d489c:	6942      	ldr	r2, [r0, #20]
   d489e:	1a9b      	subs	r3, r3, r2
   d48a0:	429d      	cmp	r5, r3
   d48a2:	bf28      	it	cs
   d48a4:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d48a6:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   d48a8:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d48ac:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   d48b0:	2e00      	cmp	r6, #0
   d48b2:	f000 808f 	beq.w	d49d4 <_ZN7FatFile4readEPvj+0x154>
    if (isRootFixed()) {
   d48b6:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   d48b8:	6963      	ldr	r3, [r4, #20]
   d48ba:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d48bc:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   d48be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
   d48c2:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d48c6:	d51f      	bpl.n	d4908 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d48c8:	6a00      	ldr	r0, [r0, #32]
   d48ca:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d48cc:	68a0      	ldr	r0, [r4, #8]
   d48ce:	f1ba 0f00 	cmp.w	sl, #0
   d48d2:	d142      	bne.n	d495a <_ZN7FatFile4readEPvj+0xda>
   d48d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d48d8:	d33f      	bcc.n	d495a <_ZN7FatFile4readEPvj+0xda>
  }
  cache_t *cacheAddress() {
    return m_cache.block();
  }
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
   d48da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d48dc:	4299      	cmp	r1, r3
   d48de:	d03c      	beq.n	d495a <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d48e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d48e4:	d252      	bcs.n	d498c <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   d48e6:	6800      	ldr	r0, [r0, #0]
   d48e8:	4642      	mov	r2, r8
   d48ea:	f001 f8cf 	bl	d5a8c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d48ee:	b368      	cbz	r0, d494c <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   d48f0:	f44f 7700 	mov.w	r7, #512	; 0x200
   d48f4:	e044      	b.n	d4980 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   d48f6:	069b      	lsls	r3, r3, #26
   d48f8:	d5d5      	bpl.n	d48a6 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d48fa:	6883      	ldr	r3, [r0, #8]
   d48fc:	891a      	ldrh	r2, [r3, #8]
   d48fe:	6943      	ldr	r3, [r0, #20]
   d4900:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   d4904:	b29b      	uxth	r3, r3
   d4906:	e7cb      	b.n	d48a0 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4908:	f890 9005 	ldrb.w	r9, [r0, #5]
   d490c:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   d4910:	f1ba 0f00 	cmp.w	sl, #0
   d4914:	d108      	bne.n	d4928 <_ZN7FatFile4readEPvj+0xa8>
   d4916:	f1b9 0f00 	cmp.w	r9, #0
   d491a:	d105      	bne.n	d4928 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   d491c:	b95b      	cbnz	r3, d4936 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d491e:	0651      	lsls	r1, r2, #25
   d4920:	bf4c      	ite	mi
   d4922:	6a03      	ldrmi	r3, [r0, #32]
   d4924:	6a23      	ldrpl	r3, [r4, #32]
   d4926:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4928:	6921      	ldr	r1, [r4, #16]
   d492a:	68a0      	ldr	r0, [r4, #8]
   d492c:	f000 fdf1 	bl	d5512 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4930:	eb09 0100 	add.w	r1, r9, r0
   d4934:	e7ca      	b.n	d48cc <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4936:	6921      	ldr	r1, [r4, #16]
   d4938:	465a      	mov	r2, fp
   d493a:	f000 fdf0 	bl	d551e <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d493e:	2800      	cmp	r0, #0
   d4940:	db04      	blt.n	d494c <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   d4942:	d1f1      	bne.n	d4928 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   d4944:	7823      	ldrb	r3, [r4, #0]
   d4946:	f013 0f70 	tst.w	r3, #112	; 0x70
   d494a:	d143      	bne.n	d49d4 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d494c:	7863      	ldrb	r3, [r4, #1]
   d494e:	f043 0302 	orr.w	r3, r3, #2
   d4952:	7063      	strb	r3, [r4, #1]
  return -1;
   d4954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4958:	e03d      	b.n	d49d6 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   d495a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   d495e:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   d4960:	f04f 0200 	mov.w	r2, #0
   d4964:	f100 0024 	add.w	r0, r0, #36	; 0x24
   d4968:	bf28      	it	cs
   d496a:	4637      	movcs	r7, r6
   d496c:	f000 fdae 	bl	d54cc <_ZN8FatCache4readEmh>
      if (!pc) {
   d4970:	2800      	cmp	r0, #0
   d4972:	d0eb      	beq.n	d494c <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   d4974:	eb00 010a 	add.w	r1, r0, sl
   d4978:	463a      	mov	r2, r7
   d497a:	4640      	mov	r0, r8
   d497c:	f003 fdf4 	bl	d8568 <memcpy>
    m_curPosition += n;
   d4980:	6963      	ldr	r3, [r4, #20]
   d4982:	443b      	add	r3, r7
    dst += n;
   d4984:	44b8      	add	r8, r7
    m_curPosition += n;
   d4986:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d4988:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   d498a:	e791      	b.n	d48b0 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   d498c:	7822      	ldrb	r2, [r4, #0]
   d498e:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   d4990:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d4994:	d406      	bmi.n	d49a4 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   d4996:	7902      	ldrb	r2, [r0, #4]
   d4998:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   d499c:	b2d2      	uxtb	r2, r2
   d499e:	4592      	cmp	sl, r2
   d49a0:	bf28      	it	cs
   d49a2:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d49a4:	4299      	cmp	r1, r3
      n = 512*nb;
   d49a6:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d49aa:	d208      	bcs.n	d49be <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   d49ac:	68a0      	ldr	r0, [r4, #8]
   d49ae:	4653      	mov	r3, sl
   d49b0:	6800      	ldr	r0, [r0, #0]
   d49b2:	4642      	mov	r2, r8
   d49b4:	f001 f8b2 	bl	d5b1c <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   d49b8:	2800      	cmp	r0, #0
   d49ba:	d1e1      	bne.n	d4980 <_ZN7FatFile4readEPvj+0x100>
   d49bc:	e7c6      	b.n	d494c <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d49be:	4453      	add	r3, sl
   d49c0:	428b      	cmp	r3, r1
   d49c2:	d9f3      	bls.n	d49ac <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   d49c4:	3024      	adds	r0, #36	; 0x24
   d49c6:	9101      	str	r1, [sp, #4]
   d49c8:	f000 fd58 	bl	d547c <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   d49cc:	9901      	ldr	r1, [sp, #4]
   d49ce:	2800      	cmp	r0, #0
   d49d0:	d1ec      	bne.n	d49ac <_ZN7FatFile4readEPvj+0x12c>
   d49d2:	e7bb      	b.n	d494c <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   d49d4:	1ba8      	subs	r0, r5, r6
}
   d49d6:	b003      	add	sp, #12
   d49d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d49dc <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   d49dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   d49de:	2201      	movs	r2, #1
   d49e0:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   d49e4:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   d49e8:	4604      	mov	r4, r0
   d49ea:	f7ff ff49 	bl	d4880 <_ZN7FatFile4readEPvj>
   d49ee:	2801      	cmp	r0, #1
   d49f0:	bf0a      	itet	eq
   d49f2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d49f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   d49fa:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   d49fe:	b002      	add	sp, #8
   d4a00:	bd70      	pop	{r4, r5, r6, pc}

000d4a02 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d4a02:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d4a04:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   d4a06:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d4a0a:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d4a0c:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   d4a10:	d000      	beq.n	d4a14 <_ZN7FatFile12readDirCacheEb+0x12>
   d4a12:	b999      	cbnz	r1, d4a3c <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   d4a14:	2201      	movs	r2, #1
   d4a16:	f10d 0107 	add.w	r1, sp, #7
   d4a1a:	4620      	mov	r0, r4
   d4a1c:	f7ff ff30 	bl	d4880 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   d4a20:	b240      	sxtb	r0, r0
   d4a22:	2801      	cmp	r0, #1
   d4a24:	d002      	beq.n	d4a2c <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   d4a26:	2000      	movs	r0, #0
}
   d4a28:	b003      	add	sp, #12
   d4a2a:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   d4a2c:	6963      	ldr	r3, [r4, #20]
   d4a2e:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   d4a30:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   d4a32:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   d4a34:	3030      	adds	r0, #48	; 0x30
   d4a36:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   d4a3a:	e7f5      	b.n	d4a28 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   d4a3c:	3320      	adds	r3, #32
   d4a3e:	e7f7      	b.n	d4a30 <_ZN7FatFile12readDirCacheEb+0x2e>

000d4a40 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   d4a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
   d4a44:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   d4a46:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   d4a48:	4604      	mov	r4, r0
   d4a4a:	460d      	mov	r5, r1
  if (!isOpen()) {
   d4a4c:	b162      	cbz	r2, d4a68 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   d4a4e:	6940      	ldr	r0, [r0, #20]
   d4a50:	4288      	cmp	r0, r1
   d4a52:	d002      	beq.n	d4a5a <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   d4a54:	b919      	cbnz	r1, d4a5e <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   d4a56:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   d4a58:	6165      	str	r5, [r4, #20]
    return true;
   d4a5a:	2001      	movs	r0, #1
   d4a5c:	e006      	b.n	d4a6c <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   d4a5e:	0716      	lsls	r6, r2, #28
   d4a60:	d506      	bpl.n	d4a70 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   d4a62:	69e3      	ldr	r3, [r4, #28]
   d4a64:	428b      	cmp	r3, r1
   d4a66:	d20b      	bcs.n	d4a80 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   d4a68:	6127      	str	r7, [r4, #16]
  return false;
   d4a6a:	2000      	movs	r0, #0
}
   d4a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   d4a70:	0691      	lsls	r1, r2, #26
   d4a72:	d505      	bpl.n	d4a80 <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d4a74:	68a3      	ldr	r3, [r4, #8]
   d4a76:	891b      	ldrh	r3, [r3, #8]
   d4a78:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   d4a7c:	d9ec      	bls.n	d4a58 <_ZN7FatFile7seekSetEm+0x18>
   d4a7e:	e7f3      	b.n	d4a68 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4a80:	f8d4 c008 	ldr.w	ip, [r4, #8]
   d4a84:	f89c 6006 	ldrb.w	r6, [ip, #6]
   d4a88:	1e43      	subs	r3, r0, #1
   d4a8a:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4a8e:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4a90:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4a92:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   d4a94:	42b3      	cmp	r3, r6
   d4a96:	d800      	bhi.n	d4a9a <_ZN7FatFile7seekSetEm+0x5a>
   d4a98:	b998      	cbnz	r0, d4ac2 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4a9a:	0653      	lsls	r3, r2, #25
   d4a9c:	bf4c      	ite	mi
   d4a9e:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   d4aa2:	6a23      	ldrpl	r3, [r4, #32]
   d4aa4:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4aa6:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   d4aaa:	2e00      	cmp	r6, #0
   d4aac:	d0d4      	beq.n	d4a58 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4aae:	6921      	ldr	r1, [r4, #16]
   d4ab0:	68a0      	ldr	r0, [r4, #8]
   d4ab2:	4642      	mov	r2, r8
   d4ab4:	f000 fd33 	bl	d551e <_ZN9FatVolume6fatGetEmPm>
   d4ab8:	2800      	cmp	r0, #0
   d4aba:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   d4abe:	dcf4      	bgt.n	d4aaa <_ZN7FatFile7seekSetEm+0x6a>
   d4ac0:	e7d2      	b.n	d4a68 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   d4ac2:	1af6      	subs	r6, r6, r3
   d4ac4:	e7ef      	b.n	d4aa6 <_ZN7FatFile7seekSetEm+0x66>

000d4ac6 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   d4ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ac8:	460f      	mov	r7, r1
   d4aca:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
   d4acc:	2100      	movs	r1, #0
   d4ace:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   d4ad0:	4604      	mov	r4, r0
   d4ad2:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
   d4ad4:	f003 fd56 	bl	d8584 <memset>
  m_vol = dirFile->m_vol;
   d4ad8:	68b8      	ldr	r0, [r7, #8]
   d4ada:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   d4adc:	80a6      	strh	r6, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4ade:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d4ae2:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
   d4ae6:	6a3b      	ldr	r3, [r7, #32]
   d4ae8:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4aea:	0171      	lsls	r1, r6, #5
   d4aec:	eb02 1646 	add.w	r6, r2, r6, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d4af0:	7af3      	ldrb	r3, [r6, #11]
   d4af2:	071f      	lsls	r7, r3, #28
   d4af4:	d446      	bmi.n	d4b84 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d4af6:	1843      	adds	r3, r0, r1
   d4af8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d4afc:	f003 0317 	and.w	r3, r3, #23
   d4b00:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d4b02:	7af2      	ldrb	r2, [r6, #11]
   d4b04:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
   d4b08:	bf04      	itt	eq
   d4b0a:	f043 0308 	orreq.w	r3, r3, #8
   d4b0e:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   d4b10:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4b14:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   d4b16:	f005 0303 	and.w	r3, r5, #3
   d4b1a:	2b01      	cmp	r3, #1
   d4b1c:	d02c      	beq.n	d4b78 <_ZN7FatFile15openCachedEntryEPS_tih+0xb2>
   d4b1e:	2b02      	cmp	r3, #2
   d4b20:	d028      	beq.n	d4b74 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
   d4b22:	bb7b      	cbnz	r3, d4b84 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      if (oflag & O_TRUNC) {
   d4b24:	056a      	lsls	r2, r5, #21
   d4b26:	d42d      	bmi.n	d4b84 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      m_flags = F_READ;
   d4b28:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   d4b2a:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   d4b2c:	78a2      	ldrb	r2, [r4, #2]
   d4b2e:	0793      	lsls	r3, r2, #30
   d4b30:	d504      	bpl.n	d4b3c <_ZN7FatFile15openCachedEntryEPS_tih+0x76>
    if (isSubDir() || isReadOnly()) {
   d4b32:	7823      	ldrb	r3, [r4, #0]
   d4b34:	06df      	lsls	r7, r3, #27
   d4b36:	d425      	bmi.n	d4b84 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
   d4b38:	07de      	lsls	r6, r3, #31
   d4b3a:	d423      	bmi.n	d4b84 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d4b3c:	11ab      	asrs	r3, r5, #6
   d4b3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d4b42:	f005 0608 	and.w	r6, r5, #8
   d4b46:	4333      	orrs	r3, r6
   d4b48:	4313      	orrs	r3, r2
   d4b4a:	70a3      	strb	r3, [r4, #2]
    return m_cache.lbn();
   d4b4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   d4b4e:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d4b50:	1843      	adds	r3, r0, r1
   d4b52:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   d4b56:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d4b5a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   d4b5e:	056a      	lsls	r2, r5, #21
   d4b60:	d513      	bpl.n	d4b8a <_ZN7FatFile15openCachedEntryEPS_tih+0xc4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d4b62:	b959      	cbnz	r1, d4b7c <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    m_flags |= F_FILE_DIR_DIRTY;
   d4b64:	78a3      	ldrb	r3, [r4, #2]
   d4b66:	f043 0304 	orr.w	r3, r3, #4
   d4b6a:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d4b6c:	046b      	lsls	r3, r5, #17
   d4b6e:	d410      	bmi.n	d4b92 <_ZN7FatFile15openCachedEntryEPS_tih+0xcc>
  return true;
   d4b70:	2001      	movs	r0, #1
}
   d4b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   d4b74:	2303      	movs	r3, #3
   d4b76:	e7d8      	b.n	d4b2a <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
      m_flags = F_WRITE;
   d4b78:	2302      	movs	r3, #2
   d4b7a:	e7d6      	b.n	d4b2a <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d4b7c:	f000 fd6f 	bl	d565e <_ZN9FatVolume9freeChainEm>
   d4b80:	2800      	cmp	r0, #0
   d4b82:	d1ef      	bne.n	d4b64 <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
  m_attr = FILE_ATTR_CLOSED;
   d4b84:	2000      	movs	r0, #0
   d4b86:	7020      	strb	r0, [r4, #0]
  return false;
   d4b88:	e7f3      	b.n	d4b72 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
    m_firstCluster = firstCluster;
   d4b8a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d4b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4b8e:	61e3      	str	r3, [r4, #28]
   d4b90:	e7ec      	b.n	d4b6c <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d4b92:	69e1      	ldr	r1, [r4, #28]
   d4b94:	4620      	mov	r0, r4
   d4b96:	f7ff ff53 	bl	d4a40 <_ZN7FatFile7seekSetEm>
   d4b9a:	2800      	cmp	r0, #0
   d4b9c:	d1e8      	bne.n	d4b70 <_ZN7FatFile15openCachedEntryEPS_tih+0xaa>
   d4b9e:	e7f1      	b.n	d4b84 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>

000d4ba0 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4ba0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d4ba2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   d4ba4:	4604      	mov	r4, r0
  if (!isOpen()) {
   d4ba6:	b90b      	cbnz	r3, d4bac <_ZN7FatFile4syncEv+0xc>
    return true;
   d4ba8:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   d4baa:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   d4bac:	7883      	ldrb	r3, [r0, #2]
   d4bae:	075a      	lsls	r2, r3, #29
   d4bb0:	d523      	bpl.n	d4bfa <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d4bb2:	2101      	movs	r1, #1
   d4bb4:	f7ff fe3c 	bl	d4830 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4bb8:	4605      	mov	r5, r0
   d4bba:	b928      	cbnz	r0, d4bc8 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   d4bbc:	7863      	ldrb	r3, [r4, #1]
   d4bbe:	f043 0301 	orr.w	r3, r3, #1
   d4bc2:	7063      	strb	r3, [r4, #1]
  return false;
   d4bc4:	2000      	movs	r0, #0
   d4bc6:	e7f0      	b.n	d4baa <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4bc8:	7803      	ldrb	r3, [r0, #0]
   d4bca:	2be5      	cmp	r3, #229	; 0xe5
   d4bcc:	d0f6      	beq.n	d4bbc <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   d4bce:	7823      	ldrb	r3, [r4, #0]
   d4bd0:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d4bd2:	bf44      	itt	mi
   d4bd4:	69e3      	ldrmi	r3, [r4, #28]
   d4bd6:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d4bd8:	8c23      	ldrh	r3, [r4, #32]
   d4bda:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d4bdc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4bde:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   d4be0:	4b09      	ldr	r3, [pc, #36]	; (d4c08 <_ZN7FatFile4syncEv+0x68>)
   d4be2:	681b      	ldr	r3, [r3, #0]
   d4be4:	b12b      	cbz	r3, d4bf2 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d4be6:	f100 0116 	add.w	r1, r0, #22
   d4bea:	3018      	adds	r0, #24
   d4bec:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d4bee:	8b2b      	ldrh	r3, [r5, #24]
   d4bf0:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   d4bf2:	78a3      	ldrb	r3, [r4, #2]
   d4bf4:	f023 0304 	bic.w	r3, r3, #4
   d4bf8:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   d4bfa:	68a0      	ldr	r0, [r4, #8]
   d4bfc:	f7ff fdc2 	bl	d4784 <_ZN9FatVolume9cacheSyncEv>
   d4c00:	2800      	cmp	r0, #0
   d4c02:	d0db      	beq.n	d4bbc <_ZN7FatFile4syncEv+0x1c>
   d4c04:	e7d0      	b.n	d4ba8 <_ZN7FatFile4syncEv+0x8>
   d4c06:	bf00      	nop
   d4c08:	2003e700 	.word	0x2003e700

000d4c0c <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   d4c0c:	b510      	push	{r4, lr}
   d4c0e:	4604      	mov	r4, r0
  bool rtn = sync();
   d4c10:	f7ff ffc6 	bl	d4ba0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d4c14:	2300      	movs	r3, #0
   d4c16:	7023      	strb	r3, [r4, #0]
}
   d4c18:	bd10      	pop	{r4, pc}

000d4c1a <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d4c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c1c:	b093      	sub	sp, #76	; 0x4c
   d4c1e:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4c20:	2300      	movs	r3, #0
   d4c22:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   d4c26:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d4c28:	9201      	str	r2, [sp, #4]
   d4c2a:	4606      	mov	r6, r0
   d4c2c:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   d4c2e:	b113      	cbz	r3, d4c36 <_ZN7FatFile4openEPS_PKci+0x1c>
  return false;
   d4c30:	2000      	movs	r0, #0
}
   d4c32:	b013      	add	sp, #76	; 0x4c
   d4c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   d4c36:	780b      	ldrb	r3, [r1, #0]
   d4c38:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4c3c:	d0f8      	beq.n	d4c30 <_ZN7FatFile4openEPS_PKci+0x16>
  if (isDirSeparator(*path)) {
   d4c3e:	7813      	ldrb	r3, [r2, #0]
   d4c40:	2b2f      	cmp	r3, #47	; 0x2f
   d4c42:	d112      	bne.n	d4c6a <_ZN7FatFile4openEPS_PKci+0x50>
    while (isDirSeparator(*path)) {
   d4c44:	9a01      	ldr	r2, [sp, #4]
   d4c46:	7813      	ldrb	r3, [r2, #0]
   d4c48:	2b2f      	cmp	r3, #47	; 0x2f
   d4c4a:	d102      	bne.n	d4c52 <_ZN7FatFile4openEPS_PKci+0x38>
      path++;
   d4c4c:	3201      	adds	r2, #1
   d4c4e:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   d4c50:	e7f8      	b.n	d4c44 <_ZN7FatFile4openEPS_PKci+0x2a>
    if (*path == 0) {
   d4c52:	68a1      	ldr	r1, [r4, #8]
   d4c54:	b91b      	cbnz	r3, d4c5e <_ZN7FatFile4openEPS_PKci+0x44>
      return openRoot(dirFile->m_vol);
   d4c56:	4630      	mov	r0, r6
   d4c58:	f7ff fdf9 	bl	d484e <_ZN7FatFile8openRootEP9FatVolume>
   d4c5c:	e7e9      	b.n	d4c32 <_ZN7FatFile4openEPS_PKci+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d4c5e:	a809      	add	r0, sp, #36	; 0x24
   d4c60:	f7ff fdf5 	bl	d484e <_ZN7FatFile8openRootEP9FatVolume>
   d4c64:	2800      	cmp	r0, #0
   d4c66:	d0e3      	beq.n	d4c30 <_ZN7FatFile4openEPS_PKci+0x16>
    dirFile = &tmpDir;
   d4c68:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   d4c6a:	9801      	ldr	r0, [sp, #4]
   d4c6c:	aa01      	add	r2, sp, #4
   d4c6e:	a903      	add	r1, sp, #12
   d4c70:	f000 f8f6 	bl	d4e60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d4c74:	2800      	cmp	r0, #0
   d4c76:	d0db      	beq.n	d4c30 <_ZN7FatFile4openEPS_PKci+0x16>
    if (*path == 0) {
   d4c78:	9b01      	ldr	r3, [sp, #4]
   d4c7a:	781b      	ldrb	r3, [r3, #0]
   d4c7c:	b19b      	cbz	r3, d4ca6 <_ZN7FatFile4openEPS_PKci+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
   d4c7e:	2300      	movs	r3, #0
   d4c80:	aa03      	add	r2, sp, #12
   d4c82:	4621      	mov	r1, r4
   d4c84:	4630      	mov	r0, r6
   d4c86:	f000 fa1f 	bl	d50c8 <_ZN7FatFile4openEPS_P7fname_ti>
   d4c8a:	2800      	cmp	r0, #0
   d4c8c:	d0d0      	beq.n	d4c30 <_ZN7FatFile4openEPS_PKci+0x16>
    tmpDir = *this;
   d4c8e:	4635      	mov	r5, r6
   d4c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c92:	ac09      	add	r4, sp, #36	; 0x24
   d4c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c9a:	682b      	ldr	r3, [r5, #0]
   d4c9c:	6023      	str	r3, [r4, #0]
    close();
   d4c9e:	4630      	mov	r0, r6
   d4ca0:	f7ff ffb4 	bl	d4c0c <_ZN7FatFile5closeEv>
  while (1) {
   d4ca4:	e7e0      	b.n	d4c68 <_ZN7FatFile4openEPS_PKci+0x4e>
  return open(dirFile, &fname, oflag);
   d4ca6:	463b      	mov	r3, r7
   d4ca8:	aa03      	add	r2, sp, #12
   d4caa:	4621      	mov	r1, r4
   d4cac:	4630      	mov	r0, r6
   d4cae:	f000 fa0b 	bl	d50c8 <_ZN7FatFile4openEPS_P7fname_ti>
   d4cb2:	e7be      	b.n	d4c32 <_ZN7FatFile4openEPS_PKci+0x18>

000d4cb4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4cb8:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   d4cba:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4cbc:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   d4cbe:	4604      	mov	r4, r0
   d4cc0:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4cc2:	d55b      	bpl.n	d4d7c <_ZN7FatFile5writeEPKvj+0xc8>
   d4cc4:	7883      	ldrb	r3, [r0, #2]
   d4cc6:	079a      	lsls	r2, r3, #30
   d4cc8:	d558      	bpl.n	d4d7c <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d4cca:	071b      	lsls	r3, r3, #28
   d4ccc:	d451      	bmi.n	d4d72 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d4cce:	6963      	ldr	r3, [r4, #20]
   d4cd0:	43db      	mvns	r3, r3
   d4cd2:	42bb      	cmp	r3, r7
   d4cd4:	d352      	bcc.n	d4d7c <_ZN7FatFile5writeEPKvj+0xc8>
   d4cd6:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4cd8:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
   d4cdc:	6966      	ldr	r6, [r4, #20]
   d4cde:	f1b8 0f00 	cmp.w	r8, #0
   d4ce2:	f000 8091 	beq.w	d4e08 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d4ce6:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   d4ce8:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d4cea:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4cee:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   d4cf2:	d10e      	bne.n	d4d12 <_ZN7FatFile5writeEPKvj+0x5e>
   d4cf4:	b96d      	cbnz	r5, d4d12 <_ZN7FatFile5writeEPKvj+0x5e>
   d4cf6:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
   d4cf8:	2900      	cmp	r1, #0
   d4cfa:	d046      	beq.n	d4d8a <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4cfc:	4652      	mov	r2, sl
   d4cfe:	f000 fc0e 	bl	d551e <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d4d02:	2800      	cmp	r0, #0
   d4d04:	db3a      	blt.n	d4d7c <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d4d06:	d104      	bne.n	d4d12 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   d4d08:	4620      	mov	r0, r4
   d4d0a:	f7ff fd48 	bl	d479e <_ZN7FatFile10addClusterEv>
   d4d0e:	2800      	cmp	r0, #0
   d4d10:	d034      	beq.n	d4d7c <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4d12:	6921      	ldr	r1, [r4, #16]
   d4d14:	68a0      	ldr	r0, [r4, #8]
   d4d16:	f000 fbfc 	bl	d5512 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4d1a:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d4d1c:	68a0      	ldr	r0, [r4, #8]
   d4d1e:	b915      	cbnz	r5, d4d26 <_ZN7FatFile5writeEPKvj+0x72>
   d4d20:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   d4d24:	d23f      	bcs.n	d4da6 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d4d26:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   d4d2a:	4546      	cmp	r6, r8
   d4d2c:	bf28      	it	cs
   d4d2e:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d4d30:	2d00      	cmp	r5, #0
   d4d32:	d136      	bne.n	d4da2 <_ZN7FatFile5writeEPKvj+0xee>
   d4d34:	6962      	ldr	r2, [r4, #20]
   d4d36:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d4d38:	429a      	cmp	r2, r3
   d4d3a:	bf34      	ite	cc
   d4d3c:	2201      	movcc	r2, #1
   d4d3e:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   d4d40:	3024      	adds	r0, #36	; 0x24
   d4d42:	f000 fbc3 	bl	d54cc <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d4d46:	b1c8      	cbz	r0, d4d7c <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4d48:	4428      	add	r0, r5
   d4d4a:	4632      	mov	r2, r6
   d4d4c:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d4d4e:	4435      	add	r5, r6
      memcpy(dst, src, n);
   d4d50:	f003 fc0a 	bl	d8568 <memcpy>
      if (512 == (n + blockOffset)) {
   d4d54:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d4d58:	d104      	bne.n	d4d64 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   d4d5a:	68a0      	ldr	r0, [r4, #8]
   d4d5c:	3024      	adds	r0, #36	; 0x24
   d4d5e:	f000 fb8d 	bl	d547c <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d4d62:	b158      	cbz	r0, d4d7c <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d4d64:	6963      	ldr	r3, [r4, #20]
   d4d66:	4433      	add	r3, r6
   d4d68:	6163      	str	r3, [r4, #20]
    src += n;
   d4d6a:	44b1      	add	r9, r6
    nToWrite -= n;
   d4d6c:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   d4d70:	e7b4      	b.n	d4cdc <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   d4d72:	69c1      	ldr	r1, [r0, #28]
   d4d74:	f7ff fe64 	bl	d4a40 <_ZN7FatFile7seekSetEm>
   d4d78:	2800      	cmp	r0, #0
   d4d7a:	d1a8      	bne.n	d4cce <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d4d7c:	7863      	ldrb	r3, [r4, #1]
   d4d7e:	f043 0301 	orr.w	r3, r3, #1
   d4d82:	7063      	strb	r3, [r4, #1]
  return -1;
   d4d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4d88:	e050      	b.n	d4e2c <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   d4d8a:	6a23      	ldr	r3, [r4, #32]
   d4d8c:	b93b      	cbnz	r3, d4d9e <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   d4d8e:	4620      	mov	r0, r4
   d4d90:	f7ff fd05 	bl	d479e <_ZN7FatFile10addClusterEv>
   d4d94:	2800      	cmp	r0, #0
   d4d96:	d0f1      	beq.n	d4d7c <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   d4d98:	6923      	ldr	r3, [r4, #16]
   d4d9a:	6223      	str	r3, [r4, #32]
   d4d9c:	e7b9      	b.n	d4d12 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   d4d9e:	6123      	str	r3, [r4, #16]
   d4da0:	e7b7      	b.n	d4d12 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d4da2:	2201      	movs	r2, #1
   d4da4:	e7cc      	b.n	d4d40 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   d4da6:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d4daa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d4dac:	d31b      	bcc.n	d4de6 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   d4dae:	f890 c004 	ldrb.w	ip, [r0, #4]
   d4db2:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   d4db6:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   d4db8:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   d4dbc:	4573      	cmp	r3, lr
   d4dbe:	bf28      	it	cs
   d4dc0:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4dc2:	4291      	cmp	r1, r2
      n = 512*nb;
   d4dc4:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4dc8:	d307      	bcc.n	d4dda <_ZN7FatFile5writeEPKvj+0x126>
   d4dca:	441a      	add	r2, r3
   d4dcc:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   d4dce:	bf82      	ittt	hi
   d4dd0:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   d4dd4:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4dd8:	62c2      	strhi	r2, [r0, #44]	; 0x2c
      if (!m_vol->writeBlocks(block, src, nb)) {
   d4dda:	68a5      	ldr	r5, [r4, #8]
    return m_blockDev->writeBlocks(block, src, nb);
   d4ddc:	464a      	mov	r2, r9
   d4dde:	6828      	ldr	r0, [r5, #0]
   d4de0:	f000 ff53 	bl	d5c8a <_ZN9SdSpiCard11writeBlocksEmPKhj>
   d4de4:	e7bd      	b.n	d4d62 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   d4de6:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   d4de8:	bf02      	ittt	eq
   d4dea:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   d4dee:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4df2:	62c3      	streq	r3, [r0, #44]	; 0x2c
      if (!m_vol->writeBlock(block, src)) {
   d4df4:	68a3      	ldr	r3, [r4, #8]
    return m_blockDev->writeBlock(block, src);
   d4df6:	464a      	mov	r2, r9
   d4df8:	6818      	ldr	r0, [r3, #0]
   d4dfa:	f000 fed0 	bl	d5b9e <_ZN9SdSpiCard10writeBlockEmPKh>
   d4dfe:	2800      	cmp	r0, #0
   d4e00:	d0bc      	beq.n	d4d7c <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   d4e02:	f44f 7600 	mov.w	r6, #512	; 0x200
   d4e06:	e7ad      	b.n	d4d64 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   d4e08:	69e2      	ldr	r2, [r4, #28]
   d4e0a:	78a3      	ldrb	r3, [r4, #2]
   d4e0c:	42b2      	cmp	r2, r6
   d4e0e:	d204      	bcs.n	d4e1a <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   d4e10:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   d4e12:	f043 0304 	orr.w	r3, r3, #4
   d4e16:	70a3      	strb	r3, [r4, #2]
   d4e18:	e003      	b.n	d4e22 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   d4e1a:	4a08      	ldr	r2, [pc, #32]	; (d4e3c <_ZN7FatFile5writeEPKvj+0x188>)
   d4e1c:	6812      	ldr	r2, [r2, #0]
   d4e1e:	2a00      	cmp	r2, #0
   d4e20:	d1f7      	bne.n	d4e12 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   d4e22:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d4e26:	2b00      	cmp	r3, #0
   d4e28:	db02      	blt.n	d4e30 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   d4e2a:	4638      	mov	r0, r7
}
   d4e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   d4e30:	4620      	mov	r0, r4
   d4e32:	f7ff feb5 	bl	d4ba0 <_ZN7FatFile4syncEv>
   d4e36:	2800      	cmp	r0, #0
   d4e38:	d1f7      	bne.n	d4e2a <_ZN7FatFile5writeEPKvj+0x176>
   d4e3a:	e79f      	b.n	d4d7c <_ZN7FatFile5writeEPKvj+0xc8>
   d4e3c:	2003e700 	.word	0x2003e700

000d4e40 <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4e40:	1e41      	subs	r1, r0, #1
   d4e42:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   d4e46:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4e48:	0842      	lsrs	r2, r0, #1
   d4e4a:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   d4e4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d4e52:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   d4e56:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4e58:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   d4e5a:	d1f5      	bne.n	d4e48 <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
   d4e5c:	4770      	bx	lr
	...

000d4e60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d4e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4e64:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d4e66:	f810 3b01 	ldrb.w	r3, [r0], #1
   d4e6a:	2b20      	cmp	r3, #32
   d4e6c:	d0fa      	beq.n	d4e64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4e6e:	4d6b      	ldr	r5, [pc, #428]	; (d501c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
    path++;
  }
  fname->lfn = path;
   d4e70:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   d4e72:	2400      	movs	r4, #0
    c = path[len];
   d4e74:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   d4e76:	b1c3      	cbz	r3, d4eaa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   d4e78:	2b2f      	cmp	r3, #47	; 0x2f
   d4e7a:	d016      	beq.n	d4eaa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4e7c:	2b5c      	cmp	r3, #92	; 0x5c
   d4e7e:	d102      	bne.n	d4e86 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d4e80:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   d4e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4e86:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   d4e8a:	b2c0      	uxtb	r0, r0
   d4e8c:	281d      	cmp	r0, #29
   d4e8e:	d803      	bhi.n	d4e98 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   d4e90:	fa25 f000 	lsr.w	r0, r5, r0
   d4e94:	07c0      	lsls	r0, r0, #31
   d4e96:	d4f3      	bmi.n	d4e80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d4e98:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   d4e9c:	283c      	cmp	r0, #60	; 0x3c
   d4e9e:	d0ef      	beq.n	d4e80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   d4ea0:	3b20      	subs	r3, #32
   d4ea2:	2b5e      	cmp	r3, #94	; 0x5e
   d4ea4:	d8ec      	bhi.n	d4e80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   d4ea6:	3401      	adds	r4, #1
    c = path[len];
   d4ea8:	e7e4      	b.n	d4e74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   d4eaa:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   d4eac:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d4eae:	4607      	mov	r7, r0
   d4eb0:	f810 5b01 	ldrb.w	r5, [r0], #1
   d4eb4:	2d20      	cmp	r5, #32
   d4eb6:	d0fa      	beq.n	d4eae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   d4eb8:	2d2f      	cmp	r5, #47	; 0x2f
   d4eba:	d0f8      	beq.n	d4eae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   d4ebc:	6017      	str	r7, [r2, #0]
  while (len) {
   d4ebe:	b14c      	cbz	r4, d4ed4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   d4ec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d4ec4:	2a2e      	cmp	r2, #46	; 0x2e
   d4ec6:	d001      	beq.n	d4ecc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   d4ec8:	2a20      	cmp	r2, #32
   d4eca:	d101      	bne.n	d4ed0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   d4ecc:	3c01      	subs	r4, #1
  while (len) {
   d4ece:	e7f6      	b.n	d4ebe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   d4ed0:	2cff      	cmp	r4, #255	; 0xff
   d4ed2:	dcd5      	bgt.n	d4e80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  fname->len = len;
   d4ed4:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
   d4ed6:	f101 030d 	add.w	r3, r1, #13
   d4eda:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
   d4ede:	2020      	movs	r0, #32
   d4ee0:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
   d4ee4:	4293      	cmp	r3, r2
   d4ee6:	d1fb      	bne.n	d4ee0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d4ee8:	f04f 0800 	mov.w	r8, #0
   d4eec:	f816 3008 	ldrb.w	r3, [r6, r8]
   d4ef0:	2b2e      	cmp	r3, #46	; 0x2e
   d4ef2:	d001      	beq.n	d4ef8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d4ef4:	2b20      	cmp	r3, #32
   d4ef6:	d102      	bne.n	d4efe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
   d4ef8:	f108 0801 	add.w	r8, r8, #1
   d4efc:	e7f6      	b.n	d4eec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
   d4efe:	fab8 f088 	clz	r0, r8
   d4f02:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d4f04:	1e65      	subs	r5, r4, #1
   d4f06:	1c6b      	adds	r3, r5, #1
   d4f08:	d002      	beq.n	d4f10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
   d4f0a:	5d73      	ldrb	r3, [r6, r5]
   d4f0c:	2b2e      	cmp	r3, #46	; 0x2e
   d4f0e:	d114      	bne.n	d4f3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d4f10:	f04f 0900 	mov.w	r9, #0
   d4f14:	2707      	movs	r7, #7
   d4f16:	464a      	mov	r2, r9
   d4f18:	46ca      	mov	sl, r9
   d4f1a:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   d4f1e:	45a0      	cmp	r8, r4
   d4f20:	da69      	bge.n	d4ff6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
   d4f22:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   d4f26:	2b20      	cmp	r3, #32
   d4f28:	d003      	beq.n	d4f32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
   d4f2a:	2b2e      	cmp	r3, #46	; 0x2e
   d4f2c:	d107      	bne.n	d4f3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d4f2e:	45a8      	cmp	r8, r5
   d4f30:	d012      	beq.n	d4f58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
   d4f32:	2000      	movs	r0, #0
  for (; si < len; si++) {
   d4f34:	f108 0801 	add.w	r8, r8, #1
   d4f38:	e7f1      	b.n	d4f1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d4f3a:	3d01      	subs	r5, #1
   d4f3c:	e7e3      	b.n	d4f06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
   d4f3e:	2b22      	cmp	r3, #34	; 0x22
   d4f40:	d008      	beq.n	d4f54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   d4f42:	2b7c      	cmp	r3, #124	; 0x7c
   d4f44:	d006      	beq.n	d4f54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d4f46:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d4f4a:	f1bc 0f05 	cmp.w	ip, #5
   d4f4e:	d80b      	bhi.n	d4f68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d4f50:	2b2d      	cmp	r3, #45	; 0x2d
   d4f52:	d013      	beq.n	d4f7c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
   d4f54:	45a8      	cmp	r8, r5
   d4f56:	d15c      	bne.n	d5012 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
   d4f58:	2f0a      	cmp	r7, #10
   d4f5a:	d04b      	beq.n	d4ff4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d4f5c:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d4f5e:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d4f60:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4f62:	f04f 0e10 	mov.w	lr, #16
   d4f66:	e7e5      	b.n	d4f34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
   d4f68:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d4f6c:	f1bc 0f05 	cmp.w	ip, #5
   d4f70:	d9f0      	bls.n	d4f54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
   d4f72:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d4f76:	f1bc 0f02 	cmp.w	ip, #2
   d4f7a:	d9eb      	bls.n	d4f54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
   d4f7c:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d4f80:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d4f84:	d8e6      	bhi.n	d4f54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
   d4f86:	45a8      	cmp	r8, r5
   d4f88:	d0e6      	beq.n	d4f58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
   d4f8a:	42ba      	cmp	r2, r7
   d4f8c:	d830      	bhi.n	d4ff0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
   d4f8e:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d4f92:	f1bc 0f19 	cmp.w	ip, #25
   d4f96:	d81a      	bhi.n	d4fce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
   d4f98:	3b20      	subs	r3, #32
        lc |= bit;
   d4f9a:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   d4f9e:	b2db      	uxtb	r3, r3
        lc |= bit;
   d4fa0:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   d4fa4:	f102 0c01 	add.w	ip, r2, #1
   d4fa8:	fa5f fc8c 	uxtb.w	ip, ip
   d4fac:	440a      	add	r2, r1
      if (i < 7) {
   d4fae:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   d4fb2:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   d4fb4:	d801      	bhi.n	d4fba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
   d4fb6:	f881 c00c 	strb.w	ip, [r1, #12]
   d4fba:	4662      	mov	r2, ip
   d4fbc:	e7ba      	b.n	d4f34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
   d4fbe:	45a8      	cmp	r8, r5
   d4fc0:	dc18      	bgt.n	d4ff4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d4fc2:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d4fc4:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d4fc6:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4fc8:	f04f 0e10 	mov.w	lr, #16
   d4fcc:	e7b1      	b.n	d4f32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
   d4fce:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d4fd2:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d4fd6:	bf98      	it	ls
   d4fd8:	ea4e 0a0a 	orrls.w	sl, lr, sl
   d4fdc:	e7e2      	b.n	d4fa4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->sfn[fname->seqPos] = '~';
   d4fde:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d4fe0:	2001      	movs	r0, #1
   d4fe2:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d4fe4:	4419      	add	r1, r3
   d4fe6:	237e      	movs	r3, #126	; 0x7e
   d4fe8:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d4fea:	2331      	movs	r3, #49	; 0x31
   d4fec:	738b      	strb	r3, [r1, #14]
   d4fee:	e748      	b.n	d4e82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   d4ff0:	2f0a      	cmp	r7, #10
   d4ff2:	d1e4      	bne.n	d4fbe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
   d4ff4:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   d4ff6:	7b4b      	ldrb	r3, [r1, #13]
   d4ff8:	2b20      	cmp	r3, #32
   d4ffa:	f43f af41 	beq.w	d4e80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   d4ffe:	2800      	cmp	r0, #0
   d5000:	d0ed      	beq.n	d4fde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d5002:	ea1a 0f09 	tst.w	sl, r9
   d5006:	bf18      	it	ne
   d5008:	f04f 0902 	movne.w	r9, #2
   d500c:	f881 9000 	strb.w	r9, [r1]
   d5010:	e737      	b.n	d4e82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   d5012:	42ba      	cmp	r2, r7
   d5014:	d8ec      	bhi.n	d4ff0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
   d5016:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
   d5018:	2000      	movs	r0, #0
   d501a:	e7c3      	b.n	d4fa4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
   d501c:	31000101 	.word	0x31000101

000d5020 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5024:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5028:	4606      	mov	r6, r0
   d502a:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   d502c:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d502e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5030:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d5034:	6861      	ldr	r1, [r4, #4]
   d5036:	68a2      	ldr	r2, [r4, #8]
   d5038:	186b      	adds	r3, r5, r1
   d503a:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d503c:	4411      	add	r1, r2
   d503e:	4291      	cmp	r1, r2
   d5040:	d006      	beq.n	d5050 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   d5042:	f812 0b01 	ldrb.w	r0, [r2], #1
   d5046:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d504a:	4043      	eors	r3, r0
   d504c:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d504e:	e7f6      	b.n	d503e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   d5050:	f1b9 0f03 	cmp.w	r9, #3
   d5054:	bf28      	it	cs
   d5056:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d505a:	f109 0204 	add.w	r2, r9, #4
   d505e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d5060:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5064:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5066:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5068:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d506a:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d506c:	bf94      	ite	ls
   d506e:	3130      	addls	r1, #48	; 0x30
   d5070:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5072:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5074:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d5076:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d507a:	d1f1      	bne.n	d5060 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   d507c:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   d5080:	2100      	movs	r1, #0
   d5082:	735f      	strb	r7, [r3, #13]
   d5084:	4630      	mov	r0, r6
   d5086:	f7ff fcdb 	bl	d4a40 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   d508a:	2101      	movs	r1, #1
   d508c:	4630      	mov	r0, r6
   d508e:	f7ff fcb8 	bl	d4a02 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d5092:	4601      	mov	r1, r0
   d5094:	b928      	cbnz	r0, d50a2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d5096:	7870      	ldrb	r0, [r6, #1]
   d5098:	fab0 f080 	clz	r0, r0
   d509c:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   d509e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   d50a2:	7803      	ldrb	r3, [r0, #0]
   d50a4:	b16b      	cbz	r3, d50c2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d50a6:	7ac3      	ldrb	r3, [r0, #11]
   d50a8:	071b      	lsls	r3, r3, #28
   d50aa:	d4ee      	bmi.n	d508a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d50ac:	220b      	movs	r2, #11
   d50ae:	4640      	mov	r0, r8
   d50b0:	f003 fa4c 	bl	d854c <memcmp>
   d50b4:	2800      	cmp	r0, #0
   d50b6:	d1e8      	bne.n	d508a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   d50b8:	3501      	adds	r5, #1
   d50ba:	b2ad      	uxth	r5, r5
   d50bc:	2d64      	cmp	r5, #100	; 0x64
   d50be:	d1b9      	bne.n	d5034 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   d50c0:	e7ed      	b.n	d509e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   d50c2:	2001      	movs	r0, #1
   d50c4:	e7eb      	b.n	d509e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000d50c8 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d50c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50cc:	ed2d 8b02 	vpush	{d8}
   d50d0:	b089      	sub	sp, #36	; 0x24
   d50d2:	460d      	mov	r5, r1
   d50d4:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
   d50d6:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d50d8:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   d50da:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d50de:	4690      	mov	r8, r2
  if (!dirFile->isDir() || isOpen()) {
   d50e0:	d105      	bne.n	d50ee <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   d50e2:	2000      	movs	r0, #0
}
   d50e4:	b009      	add	sp, #36	; 0x24
   d50e6:	ecbd 8b02 	vpop	{d8}
   d50ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
   d50ee:	9b06      	ldr	r3, [sp, #24]
   d50f0:	781b      	ldrb	r3, [r3, #0]
   d50f2:	2b00      	cmp	r3, #0
   d50f4:	d1f5      	bne.n	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   d50f6:	6853      	ldr	r3, [r2, #4]
   d50f8:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d50fa:	7813      	ldrb	r3, [r2, #0]
   d50fc:	0799      	lsls	r1, r3, #30
   d50fe:	bf1c      	itt	ne
   d5100:	9b04      	ldrne	r3, [sp, #16]
   d5102:	f103 070c 	addne.w	r7, r3, #12
   d5106:	f04f 0100 	mov.w	r1, #0
   d510a:	bf18      	it	ne
   d510c:	230d      	movne	r3, #13
   d510e:	4628      	mov	r0, r5
   d5110:	bf1d      	ittte	ne
   d5112:	fbb7 f7f3 	udivne	r7, r7, r3
   d5116:	3701      	addne	r7, #1
   d5118:	b2ff      	uxtbne	r7, r7
   d511a:	2701      	moveq	r7, #1
   d511c:	f7ff fc90 	bl	d4a40 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5120:	f108 020d 	add.w	r2, r8, #13
  }
   d5124:	2300      	movs	r3, #0
   d5126:	ee08 2a10 	vmov	s16, r2
   d512a:	469b      	mov	fp, r3
   d512c:	461c      	mov	r4, r3
   d512e:	461e      	mov	r6, r3
   d5130:	9303      	str	r3, [sp, #12]
   d5132:	469a      	mov	sl, r3
    curIndex = dirFile->m_curPosition/32;
   d5134:	696a      	ldr	r2, [r5, #20]
   d5136:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d5138:	2101      	movs	r1, #1
   d513a:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   d513c:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d5140:	f7ff fc5f 	bl	d4a02 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5144:	9b07      	ldr	r3, [sp, #28]
   d5146:	2800      	cmp	r0, #0
   d5148:	d16e      	bne.n	d5228 <_ZN7FatFile4openEPS_P7fname_ti+0x160>
      if (dirFile->getError()) {
   d514a:	786b      	ldrb	r3, [r5, #1]
   d514c:	2b00      	cmp	r3, #0
   d514e:	d1c8      	bne.n	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d5150:	9b05      	ldr	r3, [sp, #20]
   d5152:	059a      	lsls	r2, r3, #22
   d5154:	d5c5      	bpl.n	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   d5156:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   d515a:	3b01      	subs	r3, #1
   d515c:	2b01      	cmp	r3, #1
   d515e:	d8c0      	bhi.n	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   d5160:	9b03      	ldr	r3, [sp, #12]
   d5162:	2c00      	cmp	r4, #0
   d5164:	bf08      	it	eq
   d5166:	464b      	moveq	r3, r9
   d5168:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
   d516a:	42bc      	cmp	r4, r7
   d516c:	f0c0 8103 	bcc.w	d5376 <_ZN7FatFile4openEPS_P7fname_ti+0x2ae>
  if (fnameFound) {
   d5170:	f1ba 0f00 	cmp.w	sl, #0
   d5174:	f040 811b 	bne.w	d53ae <_ZN7FatFile4openEPS_P7fname_ti+0x2e6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d5178:	9b03      	ldr	r3, [sp, #12]
   d517a:	4628      	mov	r0, r5
   d517c:	0159      	lsls	r1, r3, #5
   d517e:	f7ff fc5f 	bl	d4a40 <_ZN7FatFile7seekSetEm>
   d5182:	2800      	cmp	r0, #0
   d5184:	d0ad      	beq.n	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   d5186:	3f01      	subs	r7, #1
   d5188:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d518c:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d518e:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   d5192:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5194:	2e00      	cmp	r6, #0
   d5196:	f000 8121 	beq.w	d53dc <_ZN7FatFile4openEPS_P7fname_ti+0x314>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d519a:	2100      	movs	r1, #0
   d519c:	4628      	mov	r0, r5
   d519e:	f7ff fc30 	bl	d4a02 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d51a2:	4604      	mov	r4, r0
   d51a4:	2800      	cmp	r0, #0
   d51a6:	d09c      	beq.n	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   d51a8:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   d51aa:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d51ae:	4556      	cmp	r6, sl
   d51b0:	f043 0301 	orr.w	r3, r3, #1
   d51b4:	bf0c      	ite	eq
   d51b6:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   d51ba:	46b3      	movne	fp, r6
   d51bc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d51c0:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d51c4:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
   d51c6:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d51ca:	f108 000d 	add.w	r0, r8, #13
   d51ce:	f7ff fe37 	bl	d4e40 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d51d2:	f00b 0b1f 	and.w	fp, fp, #31
    ldir->chksum = lfnChecksum(fname->sfn);
   d51d6:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   d51d8:	f884 901a 	strb.w	r9, [r4, #26]
   d51dc:	f884 901b 	strb.w	r9, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d51e0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d51e4:	220d      	movs	r2, #13
    lfnPutName(ldir, fname->lfn, len);
   d51e6:	f8d8 c008 	ldr.w	ip, [r8, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d51ea:	fb02 f20b 	mul.w	r2, r2, fp
   d51ee:	2300      	movs	r3, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d51f0:	9904      	ldr	r1, [sp, #16]
   d51f2:	4291      	cmp	r1, r2
   d51f4:	f240 80e3 	bls.w	d53be <_ZN7FatFile4openEPS_P7fname_ti+0x2f6>
   d51f8:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
   d51fc:	2b04      	cmp	r3, #4
   d51fe:	fa5f fe83 	uxtb.w	lr, r3
   d5202:	f103 0001 	add.w	r0, r3, #1
   d5206:	f200 80e0 	bhi.w	d53ca <_ZN7FatFile4openEPS_P7fname_ti+0x302>
    ldir->name1[i] = c;
   d520a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   d520e:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   d5212:	280d      	cmp	r0, #13
   d5214:	f102 0201 	add.w	r2, r2, #1
   d5218:	4603      	mov	r3, r0
   d521a:	d1e9      	bne.n	d51f0 <_ZN7FatFile4openEPS_P7fname_ti+0x128>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d521c:	3e01      	subs	r6, #1
   d521e:	b2f6      	uxtb	r6, r6
   d5220:	e7b8      	b.n	d5194 <_ZN7FatFile4openEPS_P7fname_ti+0xcc>
        fnameFound = true;
   d5222:	f04f 0a01 	mov.w	sl, #1
   d5226:	e785      	b.n	d5134 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d5228:	7802      	ldrb	r2, [r0, #0]
   d522a:	2ae5      	cmp	r2, #229	; 0xe5
   d522c:	d000      	beq.n	d5230 <_ZN7FatFile4openEPS_P7fname_ti+0x168>
   d522e:	b97a      	cbnz	r2, d5250 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
    curIndex = dirFile->m_curPosition/32;
   d5230:	9903      	ldr	r1, [sp, #12]
   d5232:	2c00      	cmp	r4, #0
   d5234:	bf08      	it	eq
   d5236:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
   d5238:	42bc      	cmp	r4, r7
        freeFound++;
   d523a:	bf38      	it	cc
   d523c:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
   d523e:	9103      	str	r1, [sp, #12]
        freeFound++;
   d5240:	bf38      	it	cc
   d5242:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   d5244:	2a00      	cmp	r2, #0
   d5246:	d083      	beq.n	d5150 <_ZN7FatFile4openEPS_P7fname_ti+0x88>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5248:	2ae5      	cmp	r2, #229	; 0xe5
   d524a:	d104      	bne.n	d5256 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
      lfnOrd = 0;
   d524c:	2600      	movs	r6, #0
   d524e:	e771      	b.n	d5134 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   d5250:	42bc      	cmp	r4, r7
   d5252:	bf38      	it	cc
   d5254:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5256:	2a2e      	cmp	r2, #46	; 0x2e
   d5258:	d0f8      	beq.n	d524c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
    } else if (DIR_IS_LONG_NAME(dir)) {
   d525a:	7ac1      	ldrb	r1, [r0, #11]
   d525c:	290f      	cmp	r1, #15
   d525e:	d15d      	bne.n	d531c <_ZN7FatFile4openEPS_P7fname_ti+0x254>
      if (!lfnOrd) {
   d5260:	bb3e      	cbnz	r6, d52b2 <_ZN7FatFile4openEPS_P7fname_ti+0x1ea>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d5262:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   d5266:	f43f af65 	beq.w	d5134 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   d526a:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   d526e:	7b43      	ldrb	r3, [r0, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   d5270:	46b3      	mov	fp, r6
      size_t k = 13*(ord - 1);
   d5272:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   d5276:	f04f 0e0d 	mov.w	lr, #13
   d527a:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
   d527e:	9a04      	ldr	r2, [sp, #16]
   d5280:	4572      	cmp	r2, lr
   d5282:	d9e3      	bls.n	d524c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d5284:	eba2 020e 	sub.w	r2, r2, lr
   d5288:	9207      	str	r2, [sp, #28]
   d528a:	f04f 0c00 	mov.w	ip, #0
  if (i < LDIR_NAME1_DIM) {
   d528e:	f1bc 0f04 	cmp.w	ip, #4
   d5292:	eb0c 090e 	add.w	r9, ip, lr
   d5296:	fa5f f28c 	uxtb.w	r2, ip
   d529a:	d814      	bhi.n	d52c6 <_ZN7FatFile4openEPS_P7fname_ti+0x1fe>
    return ldir->name1[i];
   d529c:	eb00 024c 	add.w	r2, r0, ip, lsl #1
   d52a0:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
   d52a4:	9907      	ldr	r1, [sp, #28]
   d52a6:	458c      	cmp	ip, r1
   d52a8:	d11b      	bne.n	d52e2 <_ZN7FatFile4openEPS_P7fname_ti+0x21a>
            lfnOrd = 0;
   d52aa:	2a00      	cmp	r2, #0
   d52ac:	bf18      	it	ne
   d52ae:	2600      	movne	r6, #0
   d52b0:	e740      	b.n	d5134 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d52b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d52b6:	fa5f fb8b 	uxtb.w	fp, fp
   d52ba:	455a      	cmp	r2, fp
   d52bc:	d1c6      	bne.n	d524c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d52be:	7b42      	ldrb	r2, [r0, #13]
   d52c0:	429a      	cmp	r2, r3
   d52c2:	d0d6      	beq.n	d5272 <_ZN7FatFile4openEPS_P7fname_ti+0x1aa>
   d52c4:	e7c2      	b.n	d524c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d52c6:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d52c8:	bf95      	itete	ls
   d52ca:	f10c 32ff 	addls.w	r2, ip, #4294967295	; 0xffffffff
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d52ce:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d52d2:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d52d6:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d52da:	bf94      	ite	ls
   d52dc:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d52de:	8892      	ldrhhi	r2, [r2, #4]
   d52e0:	e7e0      	b.n	d52a4 <_ZN7FatFile4openEPS_P7fname_ti+0x1dc>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d52e2:	2aff      	cmp	r2, #255	; 0xff
   d52e4:	d8b2      	bhi.n	d524c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d52e6:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d52e8:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d52ec:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d52ee:	f8d8 1008 	ldr.w	r1, [r8, #8]
   d52f2:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d52f6:	bf98      	it	ls
   d52f8:	3220      	addls	r2, #32
   d52fa:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
   d52fe:	bf98      	it	ls
   d5300:	b2d2      	uxtbls	r2, r2
   d5302:	f1b9 0f19 	cmp.w	r9, #25
   d5306:	bf9c      	itt	ls
   d5308:	3120      	addls	r1, #32
   d530a:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d530c:	4291      	cmp	r1, r2
   d530e:	d19d      	bne.n	d524c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      for (uint8_t i = 0; i < 13; i++) {
   d5310:	f10c 0c01 	add.w	ip, ip, #1
   d5314:	f1bc 0f0d 	cmp.w	ip, #13
   d5318:	d1b9      	bne.n	d528e <_ZN7FatFile4openEPS_P7fname_ti+0x1c6>
   d531a:	e70b      	b.n	d5134 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d531c:	070a      	lsls	r2, r1, #28
   d531e:	d495      	bmi.n	d524c <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      if (lfnOrd) {
   d5320:	b166      	cbz	r6, d533c <_ZN7FatFile4openEPS_P7fname_ti+0x274>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d5322:	f1bb 0f01 	cmp.w	fp, #1
   d5326:	9303      	str	r3, [sp, #12]
   d5328:	f47f aedb 	bne.w	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d532c:	f7ff fd88 	bl	d4e40 <_ZN7FatFile11lfnChecksumEPh>
   d5330:	9b03      	ldr	r3, [sp, #12]
   d5332:	4298      	cmp	r0, r3
   d5334:	f47f aed5 	bne.w	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d5338:	46b2      	mov	sl, r6
   d533a:	e00f      	b.n	d535c <_ZN7FatFile4openEPS_P7fname_ti+0x294>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d533c:	ee18 1a10 	vmov	r1, s16
   d5340:	220b      	movs	r2, #11
   d5342:	9307      	str	r3, [sp, #28]
   d5344:	f003 f902 	bl	d854c <memcmp>
   d5348:	9b07      	ldr	r3, [sp, #28]
   d534a:	2800      	cmp	r0, #0
   d534c:	f47f aef2 	bne.w	d5134 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d5350:	f898 a000 	ldrb.w	sl, [r8]
   d5354:	f01a 0a01 	ands.w	sl, sl, #1
   d5358:	f47f af63 	bne.w	d5222 <_ZN7FatFile4openEPS_P7fname_ti+0x15a>
  if (oflag & O_EXCL) {
   d535c:	9b05      	ldr	r3, [sp, #20]
   d535e:	0519      	lsls	r1, r3, #20
   d5360:	f53f aebf 	bmi.w	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5364:	9b05      	ldr	r3, [sp, #20]
   d5366:	9806      	ldr	r0, [sp, #24]
   d5368:	f8cd a000 	str.w	sl, [sp]
   d536c:	464a      	mov	r2, r9
   d536e:	4629      	mov	r1, r5
   d5370:	f7ff fba9 	bl	d4ac6 <_ZN7FatFile15openCachedEntryEPS_tih>
   d5374:	e6b6      	b.n	d50e4 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   d5376:	2100      	movs	r1, #0
   d5378:	4628      	mov	r0, r5
   d537a:	f7ff fb42 	bl	d4a02 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d537e:	b998      	cbnz	r0, d53a8 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
      if (dirFile->getError()) {
   d5380:	786b      	ldrb	r3, [r5, #1]
   d5382:	2b00      	cmp	r3, #0
   d5384:	f47f aead 	bne.w	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   d5388:	4628      	mov	r0, r5
   d538a:	f7ff fa13 	bl	d47b4 <_ZN7FatFile13addDirClusterEv>
   d538e:	2800      	cmp	r0, #0
   d5390:	f43f aea7 	beq.w	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d5394:	68ab      	ldr	r3, [r5, #8]
   d5396:	791b      	ldrb	r3, [r3, #4]
   d5398:	2b01      	cmp	r3, #1
   d539a:	f63f aee9 	bhi.w	d5170 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound += 16;
   d539e:	3410      	adds	r4, #16
   d53a0:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d53a2:	42a7      	cmp	r7, r4
   d53a4:	d8f0      	bhi.n	d5388 <_ZN7FatFile4openEPS_P7fname_ti+0x2c0>
   d53a6:	e6e3      	b.n	d5170 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   d53a8:	3401      	adds	r4, #1
   d53aa:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d53ac:	e6dd      	b.n	d516a <_ZN7FatFile4openEPS_P7fname_ti+0xa2>
    if (!dirFile->lfnUniqueSfn(fname)) {
   d53ae:	4641      	mov	r1, r8
   d53b0:	4628      	mov	r0, r5
   d53b2:	f7ff fe35 	bl	d5020 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d53b6:	2800      	cmp	r0, #0
   d53b8:	f47f aede 	bne.w	d5178 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   d53bc:	e691      	b.n	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d53be:	bf14      	ite	ne
   d53c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d53c4:	2100      	moveq	r1, #0
   d53c6:	b289      	uxth	r1, r1
   d53c8:	e718      	b.n	d51fc <_ZN7FatFile4openEPS_P7fname_ti+0x134>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d53ca:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d53ce:	bf94      	ite	ls
   d53d0:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d53d4:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
   d53d8:	8099      	strh	r1, [r3, #4]
   d53da:	e71a      	b.n	d5212 <_ZN7FatFile4openEPS_P7fname_ti+0x14a>
  dir = dirFile->readDirCache();
   d53dc:	4631      	mov	r1, r6
   d53de:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   d53e0:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
   d53e2:	f7ff fb0e 	bl	d4a02 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d53e6:	4604      	mov	r4, r0
   d53e8:	2800      	cmp	r0, #0
   d53ea:	f43f ae7a 	beq.w	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   d53ee:	2220      	movs	r2, #32
   d53f0:	4631      	mov	r1, r6
   d53f2:	f003 f8c7 	bl	d8584 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d53f6:	4643      	mov	r3, r8
   d53f8:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d53fc:	6022      	str	r2, [r4, #0]
   d53fe:	685a      	ldr	r2, [r3, #4]
   d5400:	6062      	str	r2, [r4, #4]
   d5402:	891a      	ldrh	r2, [r3, #8]
   d5404:	8122      	strh	r2, [r4, #8]
   d5406:	7a9b      	ldrb	r3, [r3, #10]
   d5408:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d540a:	f898 3000 	ldrb.w	r3, [r8]
   d540e:	f003 0318 	and.w	r3, r3, #24
   d5412:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   d5414:	4b0f      	ldr	r3, [pc, #60]	; (d5454 <_ZN7FatFile4openEPS_P7fname_ti+0x38c>)
   d5416:	681b      	ldr	r3, [r3, #0]
   d5418:	b19b      	cbz	r3, d5442 <_ZN7FatFile4openEPS_P7fname_ti+0x37a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d541a:	f104 010e 	add.w	r1, r4, #14
   d541e:	f104 0010 	add.w	r0, r4, #16
   d5422:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   d5424:	8a23      	ldrh	r3, [r4, #16]
   d5426:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   d5428:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   d542a:	89e3      	ldrh	r3, [r4, #14]
   d542c:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   d542e:	68aa      	ldr	r2, [r5, #8]
   d5430:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5434:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   d5438:	f3c7 194f 	ubfx	r9, r7, #5, #16
   d543c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   d5440:	e790      	b.n	d5364 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
    dir->creationDate = FAT_DEFAULT_DATE;
   d5442:	2321      	movs	r3, #33	; 0x21
   d5444:	7423      	strb	r3, [r4, #16]
   d5446:	2328      	movs	r3, #40	; 0x28
   d5448:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d544a:	2308      	movs	r3, #8
   d544c:	73a6      	strb	r6, [r4, #14]
   d544e:	73e3      	strb	r3, [r4, #15]
   d5450:	e7e8      	b.n	d5424 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
   d5452:	bf00      	nop
   d5454:	2003e700 	.word	0x2003e700

000d5458 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5458:	b513      	push	{r0, r1, r4, lr}
   d545a:	4604      	mov	r4, r0
    }
   d545c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d545e:	b159      	cbz	r1, d5478 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5460:	9101      	str	r1, [sp, #4]
   d5462:	f003 f8d8 	bl	d8616 <strlen>
   d5466:	6823      	ldr	r3, [r4, #0]
   d5468:	9901      	ldr	r1, [sp, #4]
   d546a:	68db      	ldr	r3, [r3, #12]
   d546c:	4602      	mov	r2, r0
   d546e:	4620      	mov	r0, r4
    }
   d5470:	b002      	add	sp, #8
   d5472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5476:	4718      	bx	r3
    }
   d5478:	b002      	add	sp, #8
   d547a:	bd10      	pop	{r4, pc}

000d547c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d547c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d547e:	7803      	ldrb	r3, [r0, #0]
   d5480:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   d5482:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5484:	d520      	bpl.n	d54c8 <_ZN8FatCache4syncEv+0x4c>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5486:	6843      	ldr	r3, [r0, #4]
    return m_blockDev->writeBlock(block, src);
   d5488:	6881      	ldr	r1, [r0, #8]
   d548a:	f100 020c 	add.w	r2, r0, #12
   d548e:	6818      	ldr	r0, [r3, #0]
   d5490:	9201      	str	r2, [sp, #4]
   d5492:	f000 fb84 	bl	d5b9e <_ZN9SdSpiCard10writeBlockEmPKh>
   d5496:	9a01      	ldr	r2, [sp, #4]
   d5498:	4605      	mov	r5, r0
   d549a:	b918      	cbnz	r0, d54a4 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d549c:	2500      	movs	r5, #0
}
   d549e:	4628      	mov	r0, r5
   d54a0:	b003      	add	sp, #12
   d54a2:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d54a4:	7823      	ldrb	r3, [r4, #0]
   d54a6:	079b      	lsls	r3, r3, #30
   d54a8:	d404      	bmi.n	d54b4 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   d54aa:	7823      	ldrb	r3, [r4, #0]
   d54ac:	f023 0301 	bic.w	r3, r3, #1
   d54b0:	7023      	strb	r3, [r4, #0]
   d54b2:	e7f4      	b.n	d549e <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d54b4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   d54b8:	6919      	ldr	r1, [r3, #16]
   d54ba:	4401      	add	r1, r0
   d54bc:	6818      	ldr	r0, [r3, #0]
   d54be:	f000 fb6e 	bl	d5b9e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d54c2:	2800      	cmp	r0, #0
   d54c4:	d1f1      	bne.n	d54aa <_ZN8FatCache4syncEv+0x2e>
   d54c6:	e7e9      	b.n	d549c <_ZN8FatCache4syncEv+0x20>
  return true;
   d54c8:	2501      	movs	r5, #1
   d54ca:	e7e8      	b.n	d549e <_ZN8FatCache4syncEv+0x22>

000d54cc <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d54cc:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d54ce:	6883      	ldr	r3, [r0, #8]
   d54d0:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d54d2:	4604      	mov	r4, r0
   d54d4:	460e      	mov	r6, r1
   d54d6:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d54d8:	d009      	beq.n	d54ee <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   d54da:	f7ff ffcf 	bl	d547c <_ZN8FatCache4syncEv>
   d54de:	b908      	cbnz	r0, d54e4 <_ZN8FatCache4readEmh+0x18>
  return 0;
   d54e0:	2000      	movs	r0, #0
}
   d54e2:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   d54e4:	076b      	lsls	r3, r5, #29
   d54e6:	d50a      	bpl.n	d54fe <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   d54e8:	2300      	movs	r3, #0
   d54ea:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d54ec:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   d54ee:	7822      	ldrb	r2, [r4, #0]
   d54f0:	f005 0503 	and.w	r5, r5, #3
   d54f4:	4620      	mov	r0, r4
   d54f6:	4315      	orrs	r5, r2
   d54f8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   d54fc:	e7f1      	b.n	d54e2 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d54fe:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
   d5500:	f104 020c 	add.w	r2, r4, #12
   d5504:	6818      	ldr	r0, [r3, #0]
   d5506:	4631      	mov	r1, r6
   d5508:	f000 fac0 	bl	d5a8c <_ZN9SdSpiCard9readBlockEmPh>
   d550c:	2800      	cmp	r0, #0
   d550e:	d1eb      	bne.n	d54e8 <_ZN8FatCache4readEmh+0x1c>
   d5510:	e7e6      	b.n	d54e0 <_ZN8FatCache4readEmh+0x14>

000d5512 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5512:	7983      	ldrb	r3, [r0, #6]
   d5514:	6940      	ldr	r0, [r0, #20]
   d5516:	3902      	subs	r1, #2
   d5518:	4099      	lsls	r1, r3
}
   d551a:	4408      	add	r0, r1
   d551c:	4770      	bx	lr

000d551e <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d551e:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5520:	b570      	push	{r4, r5, r6, lr}
   d5522:	4605      	mov	r5, r0
   d5524:	460c      	mov	r4, r1
   d5526:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d5528:	d802      	bhi.n	d5530 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d552a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d552e:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d5530:	69c3      	ldr	r3, [r0, #28]
   d5532:	428b      	cmp	r3, r1
   d5534:	d3f9      	bcc.n	d552a <_ZN9FatVolume6fatGetEmPm+0xc>
  if (fatType() == 32) {
   d5536:	79c3      	ldrb	r3, [r0, #7]
   d5538:	2b20      	cmp	r3, #32
   d553a:	d116      	bne.n	d556a <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   d553c:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   d553e:	2202      	movs	r2, #2
   d5540:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5544:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5548:	f7ff ffc0 	bl	d54cc <_ZN8FatCache4readEmh>
    if (!pc) {
   d554c:	2800      	cmp	r0, #0
   d554e:	d0ec      	beq.n	d552a <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5550:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5554:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5558:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   d555c:	69ea      	ldr	r2, [r5, #28]
   d555e:	429a      	cmp	r2, r3
  *value = next;
   d5560:	bf26      	itte	cs
   d5562:	6033      	strcs	r3, [r6, #0]
  return 1;
   d5564:	2001      	movcs	r0, #1
    return 0;
   d5566:	2000      	movcc	r0, #0
   d5568:	e7e1      	b.n	d552e <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   d556a:	2b10      	cmp	r3, #16
   d556c:	d1dd      	bne.n	d552a <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d556e:	6983      	ldr	r3, [r0, #24]
   d5570:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5574:	2202      	movs	r2, #2
   d5576:	4419      	add	r1, r3
   d5578:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d557c:	f7ff ffa6 	bl	d54cc <_ZN8FatCache4readEmh>
    if (!pc) {
   d5580:	2800      	cmp	r0, #0
   d5582:	d0d2      	beq.n	d552a <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   d5584:	b2e4      	uxtb	r4, r4
   d5586:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   d558a:	e7e7      	b.n	d555c <_ZN9FatVolume6fatGetEmPm+0x3e>

000d558c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d558c:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d558e:	b538      	push	{r3, r4, r5, lr}
   d5590:	460c      	mov	r4, r1
   d5592:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d5594:	d801      	bhi.n	d559a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5596:	2000      	movs	r0, #0
}
   d5598:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d559a:	69c3      	ldr	r3, [r0, #28]
   d559c:	428b      	cmp	r3, r1
   d559e:	d3fa      	bcc.n	d5596 <_ZN9FatVolume6fatPutEmm+0xa>
  if (fatType() == 32) {
   d55a0:	79c3      	ldrb	r3, [r0, #7]
   d55a2:	2b20      	cmp	r3, #32
   d55a4:	d10f      	bne.n	d55c6 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   d55a6:	6981      	ldr	r1, [r0, #24]
   d55a8:	2203      	movs	r2, #3
   d55aa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d55ae:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d55b2:	f7ff ff8b 	bl	d54cc <_ZN8FatCache4readEmh>
    if (!pc) {
   d55b6:	2800      	cmp	r0, #0
   d55b8:	d0ed      	beq.n	d5596 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   d55ba:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d55be:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   d55c2:	2001      	movs	r0, #1
   d55c4:	e7e8      	b.n	d5598 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   d55c6:	2b10      	cmp	r3, #16
   d55c8:	d1e5      	bne.n	d5596 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d55ca:	6983      	ldr	r3, [r0, #24]
   d55cc:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d55d0:	2203      	movs	r2, #3
   d55d2:	4419      	add	r1, r3
   d55d4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d55d8:	f7ff ff78 	bl	d54cc <_ZN8FatCache4readEmh>
    if (!pc) {
   d55dc:	2800      	cmp	r0, #0
   d55de:	d0da      	beq.n	d5596 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   d55e0:	b2e4      	uxtb	r4, r4
   d55e2:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   d55e6:	e7ec      	b.n	d55c2 <_ZN9FatVolume6fatPutEmm+0x36>

000d55e8 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d55e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   d55ec:	68c4      	ldr	r4, [r0, #12]
   d55ee:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d55f0:	4605      	mov	r5, r0
   d55f2:	460e      	mov	r6, r1
   d55f4:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   d55f6:	d301      	bcc.n	d55fc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   d55f8:	2701      	movs	r7, #1
   d55fa:	e001      	b.n	d5600 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d55fc:	460c      	mov	r4, r1
    setStart = false;
   d55fe:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   d5600:	69eb      	ldr	r3, [r5, #28]
    find++;
   d5602:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d5604:	42a3      	cmp	r3, r4
   d5606:	d202      	bcs.n	d560e <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   d5608:	b9c7      	cbnz	r7, d563c <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   d560a:	68ec      	ldr	r4, [r5, #12]
   d560c:	e7f4      	b.n	d55f8 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   d560e:	42a6      	cmp	r6, r4
   d5610:	d014      	beq.n	d563c <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   d5612:	aa01      	add	r2, sp, #4
   d5614:	4621      	mov	r1, r4
   d5616:	4628      	mov	r0, r5
   d5618:	f7ff ff81 	bl	d551e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d561c:	2800      	cmp	r0, #0
   d561e:	db0d      	blt.n	d563c <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   d5620:	d0ee      	beq.n	d5600 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d5622:	9b01      	ldr	r3, [sp, #4]
   d5624:	2b00      	cmp	r3, #0
   d5626:	d1eb      	bne.n	d5600 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   d5628:	b107      	cbz	r7, d562c <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   d562a:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d562c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5630:	4621      	mov	r1, r4
   d5632:	4628      	mov	r0, r5
   d5634:	f7ff ffaa 	bl	d558c <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   d5638:	4607      	mov	r7, r0
   d563a:	b920      	cbnz	r0, d5646 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   d563c:	2700      	movs	r7, #0
}
   d563e:	4638      	mov	r0, r7
   d5640:	b002      	add	sp, #8
   d5642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   d5646:	b916      	cbnz	r6, d564e <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   d5648:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d564c:	e7f7      	b.n	d563e <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   d564e:	4622      	mov	r2, r4
   d5650:	4631      	mov	r1, r6
   d5652:	4628      	mov	r0, r5
   d5654:	f7ff ff9a 	bl	d558c <_ZN9FatVolume6fatPutEmm>
   d5658:	2800      	cmp	r0, #0
   d565a:	d1f5      	bne.n	d5648 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   d565c:	e7ee      	b.n	d563c <_ZN9FatVolume15allocateClusterEmPm+0x54>

000d565e <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d565e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5660:	4605      	mov	r5, r0
   d5662:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d5664:	aa01      	add	r2, sp, #4
   d5666:	4621      	mov	r1, r4
   d5668:	4628      	mov	r0, r5
   d566a:	f7ff ff58 	bl	d551e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d566e:	1e06      	subs	r6, r0, #0
   d5670:	db10      	blt.n	d5694 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d5672:	2200      	movs	r2, #0
   d5674:	4621      	mov	r1, r4
   d5676:	4628      	mov	r0, r5
   d5678:	f7ff ff88 	bl	d558c <_ZN9FatVolume6fatPutEmm>
   d567c:	b150      	cbz	r0, d5694 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d567e:	68eb      	ldr	r3, [r5, #12]
   d5680:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   d5682:	bf24      	itt	cs
   d5684:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   d5688:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   d568a:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   d568c:	2e00      	cmp	r6, #0
   d568e:	d1e9      	bne.n	d5664 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d5690:	b002      	add	sp, #8
   d5692:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d5694:	2000      	movs	r0, #0
   d5696:	e7fb      	b.n	d5690 <_ZN9FatVolume9freeChainEm+0x32>

000d5698 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d5698:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   d569a:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   d569c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d569e:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   d56a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   d56a4:	4604      	mov	r4, r0
  m_fatType = 0;
   d56a6:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   d56a8:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   d56ac:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   d56ae:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d56b2:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   d56b4:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   d56b8:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d56bc:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d56c0:	460d      	mov	r5, r1
   d56c2:	b1b9      	cbz	r1, d56f4 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   d56c4:	2904      	cmp	r1, #4
   d56c6:	d901      	bls.n	d56cc <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d56c8:	2000      	movs	r0, #0
}
   d56ca:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   d56cc:	4611      	mov	r1, r2
   d56ce:	4630      	mov	r0, r6
   d56d0:	f7ff fefc 	bl	d54cc <_ZN8FatCache4readEmh>
    if (!pc) {
   d56d4:	2800      	cmp	r0, #0
   d56d6:	d0f7      	beq.n	d56c8 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d56d8:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d56dc:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d56e0:	065b      	lsls	r3, r3, #25
   d56e2:	d1f1      	bne.n	d56c8 <_ZN9FatVolume4initEh+0x30>
   d56e4:	f105 011b 	add.w	r1, r5, #27
   d56e8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   d56ec:	f8d1 5006 	ldr.w	r5, [r1, #6]
   d56f0:	2d00      	cmp	r5, #0
   d56f2:	d0e9      	beq.n	d56c8 <_ZN9FatVolume4initEh+0x30>
   d56f4:	2200      	movs	r2, #0
   d56f6:	4629      	mov	r1, r5
   d56f8:	4630      	mov	r0, r6
   d56fa:	f7ff fee7 	bl	d54cc <_ZN8FatCache4readEmh>
  if (!pc) {
   d56fe:	2800      	cmp	r0, #0
   d5700:	d0e2      	beq.n	d56c8 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   d5702:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d5706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d570a:	d1dd      	bne.n	d56c8 <_ZN9FatVolume4initEh+0x30>
   d570c:	7c03      	ldrb	r3, [r0, #16]
   d570e:	2b02      	cmp	r3, #2
   d5710:	d1da      	bne.n	d56c8 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   d5712:	89c3      	ldrh	r3, [r0, #14]
   d5714:	2b00      	cmp	r3, #0
   d5716:	d0d7      	beq.n	d56c8 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d5718:	7b41      	ldrb	r1, [r0, #13]
   d571a:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d571c:	1e4b      	subs	r3, r1, #1
   d571e:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   d5720:	2300      	movs	r3, #0
   d5722:	71a3      	strb	r3, [r4, #6]
   d5724:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5726:	2301      	movs	r3, #1
   d5728:	4299      	cmp	r1, r3
   d572a:	d007      	beq.n	d573c <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   d572c:	3e01      	subs	r6, #1
   d572e:	d0cb      	beq.n	d56c8 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5730:	79a2      	ldrb	r2, [r4, #6]
   d5732:	005b      	lsls	r3, r3, #1
   d5734:	3201      	adds	r2, #1
   d5736:	b2db      	uxtb	r3, r3
   d5738:	71a2      	strb	r2, [r4, #6]
   d573a:	e7f5      	b.n	d5728 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d573c:	8ac1      	ldrh	r1, [r0, #22]
   d573e:	b901      	cbnz	r1, d5742 <_ZN9FatVolume4initEh+0xaa>
   d5740:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d5742:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d5744:	89c3      	ldrh	r3, [r0, #14]
   d5746:	442b      	add	r3, r5
   d5748:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d574a:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d574e:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d5750:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d5754:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d5756:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   d575a:	0149      	lsls	r1, r1, #5
   d575c:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   d5760:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   d5764:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   d5766:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   d576a:	b902      	cbnz	r2, d576e <_ZN9FatVolume4initEh+0xd6>
   d576c:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d576e:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   d5770:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d5772:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   d5774:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   d5776:	1c4b      	adds	r3, r1, #1
   d5778:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   d577a:	f640 73f4 	movw	r3, #4084	; 0xff4
   d577e:	4299      	cmp	r1, r3
   d5780:	d802      	bhi.n	d5788 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   d5782:	230c      	movs	r3, #12
   d5784:	71e3      	strb	r3, [r4, #7]
   d5786:	e79f      	b.n	d56c8 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   d5788:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d578c:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   d578e:	bf85      	ittet	hi
   d5790:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d5792:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   d5794:	2310      	movls	r3, #16
    m_fatType = 32;
   d5796:	2320      	movhi	r3, #32
   d5798:	71e3      	strb	r3, [r4, #7]
  return true;
   d579a:	2001      	movs	r0, #1
   d579c:	e795      	b.n	d56ca <_ZN9FatVolume4initEh+0x32>
	...

000d57a0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d57a0:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d57a2:	4e0e      	ldr	r6, [pc, #56]	; (d57dc <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d57a4:	460d      	mov	r5, r1
   d57a6:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d57a8:	f000 faf2 	bl	d5d90 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d57ac:	6833      	ldr	r3, [r6, #0]
   d57ae:	1ac0      	subs	r0, r0, r3
   d57b0:	4b0b      	ldr	r3, [pc, #44]	; (d57e0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d57b2:	4298      	cmp	r0, r3
   d57b4:	d908      	bls.n	d57c8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d57b6:	f000 faf3 	bl	d5da0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d57ba:	4b0a      	ldr	r3, [pc, #40]	; (d57e4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d57bc:	6018      	str	r0, [r3, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d57be:	f000 fccd 	bl	d615c <spark_process>
   d57c2:	f000 fae5 	bl	d5d90 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d57c6:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d57c8:	f000 faea 	bl	d5da0 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d57cc:	b280      	uxth	r0, r0
   d57ce:	1b40      	subs	r0, r0, r5
}
   d57d0:	42a0      	cmp	r0, r4
   d57d2:	bfd4      	ite	le
   d57d4:	2000      	movle	r0, #0
   d57d6:	2001      	movgt	r0, #1
   d57d8:	bd70      	pop	{r4, r5, r6, pc}
   d57da:	bf00      	nop
   d57dc:	2003e708 	.word	0x2003e708
   d57e0:	000186a0 	.word	0x000186a0
   d57e4:	2003e7bc 	.word	0x2003e7bc

000d57e8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d57e8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d57ea:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   d57ec:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d57ee:	b94d      	cbnz	r5, d5804 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d57f0:	6840      	ldr	r0, [r0, #4]
   d57f2:	f000 fa6b 	bl	d5ccc <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
   d57f6:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d57f8:	4629      	mov	r1, r5
   d57fa:	7d18      	ldrb	r0, [r3, #20]
   d57fc:	f002 f8d5 	bl	d79aa <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5800:	2301      	movs	r3, #1
   d5802:	7223      	strb	r3, [r4, #8]
  }
}
   d5804:	bd38      	pop	{r3, r4, r5, pc}

000d5806 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5806:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d5808:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   d580a:	4604      	mov	r4, r0
  if (m_spiActive) {
   d580c:	b16b      	cbz	r3, d582a <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
   d580e:	6843      	ldr	r3, [r0, #4]
    digitalWrite(m_csPin, HIGH);
   d5810:	2101      	movs	r1, #1
   d5812:	7d18      	ldrb	r0, [r3, #20]
   d5814:	f002 f8c9 	bl	d79aa <digitalWrite>
     m_spiDriver->send(data);
   d5818:	6860      	ldr	r0, [r4, #4]
   d581a:	21ff      	movs	r1, #255	; 0xff
   d581c:	f000 fa88 	bl	d5d30 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
   d5820:	6860      	ldr	r0, [r4, #4]
   d5822:	f000 fa67 	bl	d5cf4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d5826:	2300      	movs	r3, #0
   d5828:	7223      	strb	r3, [r4, #8]
  }
}
   d582a:	bd10      	pop	{r4, pc}

000d582c <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d582e:	4604      	mov	r4, r0
   d5830:	460d      	mov	r5, r1
   d5832:	4616      	mov	r6, r2
   d5834:	f000 fab4 	bl	d5da0 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d5838:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
   d583a:	6860      	ldr	r0, [r4, #4]
   d583c:	f000 fa5d 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
   d5840:	28ff      	cmp	r0, #255	; 0xff
   d5842:	7260      	strb	r0, [r4, #9]
   d5844:	d10e      	bne.n	d5864 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d5846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d584a:	4639      	mov	r1, r7
   d584c:	4620      	mov	r0, r4
   d584e:	f7ff ffa7 	bl	d57a0 <_ZN9SdSpiCard10isTimedOutEtt>
   d5852:	2800      	cmp	r0, #0
   d5854:	d0f1      	beq.n	d583a <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   d5856:	2355      	movs	r3, #85	; 0x55
  spiStop();
   d5858:	4620      	mov	r0, r4
   d585a:	7023      	strb	r3, [r4, #0]
   d585c:	f7ff ffd3 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5860:	2000      	movs	r0, #0
}
   d5862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   d5864:	28fe      	cmp	r0, #254	; 0xfe
   d5866:	d001      	beq.n	d586c <_ZN9SdSpiCard8readDataEPhj+0x40>
   d5868:	2350      	movs	r3, #80	; 0x50
   d586a:	e7f5      	b.n	d5858 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   d586c:	6860      	ldr	r0, [r4, #4]
   d586e:	4632      	mov	r2, r6
   d5870:	4629      	mov	r1, r5
   d5872:	f000 fa47 	bl	d5d04 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   d5876:	7260      	strb	r0, [r4, #9]
   d5878:	b108      	cbz	r0, d587e <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   d587a:	2360      	movs	r3, #96	; 0x60
   d587c:	e7ec      	b.n	d5858 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
   d587e:	6860      	ldr	r0, [r4, #4]
   d5880:	f000 fa3b 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
   d5884:	6860      	ldr	r0, [r4, #4]
   d5886:	f000 fa38 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
   d588a:	2001      	movs	r0, #1
   d588c:	e7e9      	b.n	d5862 <_ZN9SdSpiCard8readDataEPhj+0x36>

000d588e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d588e:	b570      	push	{r4, r5, r6, lr}
   d5890:	4604      	mov	r4, r0
   d5892:	460e      	mov	r6, r1
   d5894:	f000 fa84 	bl	d5da0 <HAL_Timer_Get_Milli_Seconds>
   d5898:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d589a:	4632      	mov	r2, r6
   d589c:	4629      	mov	r1, r5
   d589e:	4620      	mov	r0, r4
   d58a0:	f7ff ff7e 	bl	d57a0 <_ZN9SdSpiCard10isTimedOutEtt>
   d58a4:	b930      	cbnz	r0, d58b4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d58a6:	6860      	ldr	r0, [r4, #4]
   d58a8:	f000 fa27 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d58ac:	28ff      	cmp	r0, #255	; 0xff
   d58ae:	d1f4      	bne.n	d589a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d58b0:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d58b2:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d58b4:	2000      	movs	r0, #0
   d58b6:	e7fc      	b.n	d58b2 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000d58b8 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d58b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   d58ba:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d58bc:	9201      	str	r2, [sp, #4]
   d58be:	4604      	mov	r4, r0
   d58c0:	460d      	mov	r5, r1
  if (!m_spiActive) {
   d58c2:	b90b      	cbnz	r3, d58c8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d58c4:	f7ff ff90 	bl	d57e8 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   d58c8:	b125      	cbz	r5, d58d4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   d58ca:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d58ce:	4620      	mov	r0, r4
   d58d0:	f7ff ffdd 	bl	d588e <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
   d58d4:	6860      	ldr	r0, [r4, #4]
   d58d6:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d58da:	f000 fa29 	bl	d5d30 <_ZN14SdSpiAltDriver4sendEh>
   d58de:	2603      	movs	r6, #3
    spiSend(pa[i]);
   d58e0:	af01      	add	r7, sp, #4
   d58e2:	5db9      	ldrb	r1, [r7, r6]
   d58e4:	6860      	ldr	r0, [r4, #4]
   d58e6:	f000 fa23 	bl	d5d30 <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
   d58ea:	3e01      	subs	r6, #1
   d58ec:	d2f9      	bcs.n	d58e2 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d58ee:	2d00      	cmp	r5, #0
   d58f0:	6860      	ldr	r0, [r4, #4]
   d58f2:	bf0c      	ite	eq
   d58f4:	2195      	moveq	r1, #149	; 0x95
   d58f6:	2187      	movne	r1, #135	; 0x87
   d58f8:	f000 fa1a 	bl	d5d30 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d58fc:	6860      	ldr	r0, [r4, #4]
   d58fe:	f000 f9fc 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
   d5902:	250b      	movs	r5, #11
   d5904:	6860      	ldr	r0, [r4, #4]
   d5906:	f000 f9f8 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d590a:	0603      	lsls	r3, r0, #24
   d590c:	7260      	strb	r0, [r4, #9]
   d590e:	d503      	bpl.n	d5918 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   d5910:	3d01      	subs	r5, #1
   d5912:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5916:	d1f5      	bne.n	d5904 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   d5918:	b003      	add	sp, #12
   d591a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d591c <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d591c:	b570      	push	{r4, r5, r6, lr}
   d591e:	4604      	mov	r4, r0
   d5920:	460d      	mov	r5, r1
   d5922:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d5924:	2137      	movs	r1, #55	; 0x37
   d5926:	2200      	movs	r2, #0
   d5928:	f7ff ffc6 	bl	d58b8 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d592c:	4632      	mov	r2, r6
   d592e:	4629      	mov	r1, r5
   d5930:	4620      	mov	r0, r4
  }
   d5932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   d5936:	f7ff bfbf 	b.w	d58b8 <_ZN9SdSpiCard11cardCommandEhm>
	...

000d593c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d5940:	2500      	movs	r5, #0
   d5942:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d5944:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d5946:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d5948:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d594a:	4604      	mov	r4, r0
   d594c:	4690      	mov	r8, r2
   d594e:	461e      	mov	r6, r3
   d5950:	f000 fa26 	bl	d5da0 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   d5954:	4641      	mov	r1, r8
   d5956:	4607      	mov	r7, r0
   d5958:	6860      	ldr	r0, [r4, #4]
   d595a:	f000 f9bb 	bl	d5cd4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d595e:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   d5960:	4a49      	ldr	r2, [pc, #292]	; (d5a88 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   d5962:	721d      	strb	r5, [r3, #8]
   d5964:	2501      	movs	r5, #1
   d5966:	60da      	str	r2, [r3, #12]
   d5968:	821d      	strh	r5, [r3, #16]
  spiStart();
   d596a:	4620      	mov	r0, r4
   d596c:	f7ff ff3c 	bl	d57e8 <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
   d5970:	6863      	ldr	r3, [r4, #4]
   d5972:	4629      	mov	r1, r5
   d5974:	7d18      	ldrb	r0, [r3, #20]
   d5976:	f002 f818 	bl	d79aa <digitalWrite>
   d597a:	250a      	movs	r5, #10
     m_spiDriver->send(data);
   d597c:	6860      	ldr	r0, [r4, #4]
   d597e:	21ff      	movs	r1, #255	; 0xff
   d5980:	3d01      	subs	r5, #1
   d5982:	f000 f9d5 	bl	d5d30 <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
   d5986:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d598a:	d1f7      	bne.n	d597c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
   d598c:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d598e:	4629      	mov	r1, r5
   d5990:	7d18      	ldrb	r0, [r3, #20]
   d5992:	f002 f80a 	bl	d79aa <digitalWrite>
  }
   d5996:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d5998:	2200      	movs	r2, #0
   d599a:	4611      	mov	r1, r2
   d599c:	4620      	mov	r0, r4
   d599e:	f7ff ff8b 	bl	d58b8 <_ZN9SdSpiCard11cardCommandEhm>
   d59a2:	2801      	cmp	r0, #1
   d59a4:	4680      	mov	r8, r0
   d59a6:	d018      	beq.n	d59da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   d59a8:	3d01      	subs	r5, #1
   d59aa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d59ae:	d107      	bne.n	d59c0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   d59b0:	2320      	movs	r3, #32
  spiStop();
   d59b2:	4620      	mov	r0, r4
   d59b4:	7023      	strb	r3, [r4, #0]
   d59b6:	f7ff ff26 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d59ba:	2000      	movs	r0, #0
}
   d59bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
   d59c0:	6860      	ldr	r0, [r4, #4]
   d59c2:	21fd      	movs	r1, #253	; 0xfd
   d59c4:	f000 f9b4 	bl	d5d30 <_ZN14SdSpiAltDriver4sendEh>
   d59c8:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
   d59cc:	6860      	ldr	r0, [r4, #4]
   d59ce:	f000 f994 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
   d59d2:	f1b8 0801 	subs.w	r8, r8, #1
   d59d6:	d1f9      	bne.n	d59cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   d59d8:	e7de      	b.n	d5998 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d59da:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d59de:	2108      	movs	r1, #8
   d59e0:	4620      	mov	r0, r4
   d59e2:	f7ff ff69 	bl	d58b8 <_ZN9SdSpiCard11cardCommandEhm>
   d59e6:	2805      	cmp	r0, #5
   d59e8:	d114      	bne.n	d5a14 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   d59ea:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d59ee:	2500      	movs	r5, #0
   d59f0:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d59f2:	462a      	mov	r2, r5
   d59f4:	2129      	movs	r1, #41	; 0x29
   d59f6:	4620      	mov	r0, r4
   d59f8:	f7ff ff90 	bl	d591c <_ZN9SdSpiCard8cardAcmdEhm>
   d59fc:	4602      	mov	r2, r0
   d59fe:	b1d8      	cbz	r0, d5a38 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d5a00:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d5a04:	4639      	mov	r1, r7
   d5a06:	4620      	mov	r0, r4
   d5a08:	f7ff feca 	bl	d57a0 <_ZN9SdSpiCard10isTimedOutEtt>
   d5a0c:	2800      	cmp	r0, #0
   d5a0e:	d0f0      	beq.n	d59f2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   d5a10:	2343      	movs	r3, #67	; 0x43
   d5a12:	e7ce      	b.n	d59b2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   d5a14:	2504      	movs	r5, #4
    return m_spiDriver->receive();
   d5a16:	6860      	ldr	r0, [r4, #4]
   d5a18:	f000 f96f 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
   d5a1c:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   d5a1e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d5a22:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   d5a24:	d1f7      	bne.n	d5a16 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   d5a26:	28aa      	cmp	r0, #170	; 0xaa
   d5a28:	d104      	bne.n	d5a34 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   d5a2a:	2302      	movs	r3, #2
   d5a2c:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d5a2e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   d5a32:	e7dd      	b.n	d59f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   d5a34:	2325      	movs	r3, #37	; 0x25
   d5a36:	e7bc      	b.n	d59b2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   d5a38:	7aa3      	ldrb	r3, [r4, #10]
   d5a3a:	2b02      	cmp	r3, #2
   d5a3c:	d118      	bne.n	d5a70 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   d5a3e:	213a      	movs	r1, #58	; 0x3a
   d5a40:	4620      	mov	r0, r4
   d5a42:	f7ff ff39 	bl	d58b8 <_ZN9SdSpiCard11cardCommandEhm>
   d5a46:	b108      	cbz	r0, d5a4c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   d5a48:	2337      	movs	r3, #55	; 0x37
   d5a4a:	e7b2      	b.n	d59b2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
   d5a4c:	6860      	ldr	r0, [r4, #4]
   d5a4e:	f000 f954 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
   d5a52:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d5a56:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   d5a58:	bf04      	itt	eq
   d5a5a:	2303      	moveq	r3, #3
   d5a5c:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
   d5a5e:	6860      	ldr	r0, [r4, #4]
   d5a60:	f000 f94b 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
   d5a64:	6860      	ldr	r0, [r4, #4]
   d5a66:	f000 f948 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
   d5a6a:	6860      	ldr	r0, [r4, #4]
   d5a6c:	f000 f945 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
   d5a70:	4620      	mov	r0, r4
   d5a72:	f7ff fec8 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d5a76:	6863      	ldr	r3, [r4, #4]
   d5a78:	7930      	ldrb	r0, [r6, #4]
   d5a7a:	68b1      	ldr	r1, [r6, #8]
   d5a7c:	89b2      	ldrh	r2, [r6, #12]
   d5a7e:	821a      	strh	r2, [r3, #16]
   d5a80:	7218      	strb	r0, [r3, #8]
   d5a82:	60d9      	str	r1, [r3, #12]
  return true;
   d5a84:	2001      	movs	r0, #1
   d5a86:	e799      	b.n	d59bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   d5a88:	0003d090 	.word	0x0003d090

000d5a8c <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5a8c:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d5a8e:	7a83      	ldrb	r3, [r0, #10]
   d5a90:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5a92:	bf18      	it	ne
   d5a94:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5a96:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   d5a98:	460a      	mov	r2, r1
   d5a9a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5a9c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   d5a9e:	f7ff ff0b 	bl	d58b8 <_ZN9SdSpiCard11cardCommandEhm>
   d5aa2:	b130      	cbz	r0, d5ab2 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   d5aa4:	2330      	movs	r3, #48	; 0x30
   d5aa6:	7023      	strb	r3, [r4, #0]
  spiStop();
   d5aa8:	4620      	mov	r0, r4
   d5aaa:	f7ff feac 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5aae:	2500      	movs	r5, #0
   d5ab0:	e00b      	b.n	d5aca <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   d5ab2:	4629      	mov	r1, r5
   d5ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5ab8:	4620      	mov	r0, r4
   d5aba:	f7ff feb7 	bl	d582c <_ZN9SdSpiCard8readDataEPhj>
   d5abe:	4605      	mov	r5, r0
   d5ac0:	2800      	cmp	r0, #0
   d5ac2:	d0f1      	beq.n	d5aa8 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   d5ac4:	4620      	mov	r0, r4
   d5ac6:	f7ff fe9e 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
}
   d5aca:	4628      	mov	r0, r5
   d5acc:	bd38      	pop	{r3, r4, r5, pc}

000d5ace <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5ace:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d5ad0:	7a83      	ldrb	r3, [r0, #10]
   d5ad2:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5ad4:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d5ad6:	bf18      	it	ne
   d5ad8:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   d5ada:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5adc:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   d5ade:	f7ff feeb 	bl	d58b8 <_ZN9SdSpiCard11cardCommandEhm>
   d5ae2:	b130      	cbz	r0, d5af2 <_ZN9SdSpiCard9readStartEm+0x24>
   d5ae4:	2331      	movs	r3, #49	; 0x31
  spiStop();
   d5ae6:	4620      	mov	r0, r4
   d5ae8:	7023      	strb	r3, [r4, #0]
   d5aea:	f7ff fe8c 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5aee:	2000      	movs	r0, #0
}
   d5af0:	bd10      	pop	{r4, pc}
  return true;
   d5af2:	2001      	movs	r0, #1
   d5af4:	e7fc      	b.n	d5af0 <_ZN9SdSpiCard9readStartEm+0x22>

000d5af6 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   d5af6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d5af8:	2200      	movs	r2, #0
   d5afa:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   d5afc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d5afe:	f7ff fedb 	bl	d58b8 <_ZN9SdSpiCard11cardCommandEhm>
   d5b02:	b130      	cbz	r0, d5b12 <_ZN9SdSpiCard8readStopEv+0x1c>
   d5b04:	2328      	movs	r3, #40	; 0x28
  spiStop();
   d5b06:	4620      	mov	r0, r4
   d5b08:	7023      	strb	r3, [r4, #0]
   d5b0a:	f7ff fe7c 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5b0e:	2000      	movs	r0, #0
}
   d5b10:	bd10      	pop	{r4, pc}
  spiStop();
   d5b12:	4620      	mov	r0, r4
   d5b14:	f7ff fe77 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5b18:	2001      	movs	r0, #1
   d5b1a:	e7f9      	b.n	d5b10 <_ZN9SdSpiCard8readStopEv+0x1a>

000d5b1c <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d5b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b1e:	4604      	mov	r4, r0
   d5b20:	4616      	mov	r6, r2
   d5b22:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d5b24:	f7ff ffd3 	bl	d5ace <_ZN9SdSpiCard9readStartEm>
   d5b28:	b168      	cbz	r0, d5b46 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   d5b2a:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d5b2c:	b2ab      	uxth	r3, r5
   d5b2e:	429f      	cmp	r7, r3
   d5b30:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   d5b34:	d909      	bls.n	d5b4a <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   d5b36:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5b3a:	4620      	mov	r0, r4
   d5b3c:	f7ff fe76 	bl	d582c <_ZN9SdSpiCard8readDataEPhj>
   d5b40:	3501      	adds	r5, #1
   d5b42:	2800      	cmp	r0, #0
   d5b44:	d1f2      	bne.n	d5b2c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   d5b46:	2000      	movs	r0, #0
   d5b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   d5b4a:	4620      	mov	r0, r4
}
   d5b4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   d5b50:	f7ff bfd1 	b.w	d5af6 <_ZN9SdSpiCard8readStopEv>

000d5b54 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d5b54:	b538      	push	{r3, r4, r5, lr}
   d5b56:	4604      	mov	r4, r0
   d5b58:	4615      	mov	r5, r2
     m_spiDriver->send(data);
   d5b5a:	6840      	ldr	r0, [r0, #4]
   d5b5c:	f000 f8e8 	bl	d5d30 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
   d5b60:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5b64:	6860      	ldr	r0, [r4, #4]
   d5b66:	4629      	mov	r1, r5
   d5b68:	f000 f8e6 	bl	d5d38 <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
   d5b6c:	6860      	ldr	r0, [r4, #4]
   d5b6e:	21ff      	movs	r1, #255	; 0xff
   d5b70:	f000 f8de 	bl	d5d30 <_ZN14SdSpiAltDriver4sendEh>
   d5b74:	6860      	ldr	r0, [r4, #4]
   d5b76:	21ff      	movs	r1, #255	; 0xff
   d5b78:	f000 f8da 	bl	d5d30 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d5b7c:	6860      	ldr	r0, [r4, #4]
   d5b7e:	f000 f8bc 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d5b82:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d5b84:	f000 001f 	and.w	r0, r0, #31
   d5b88:	2805      	cmp	r0, #5
   d5b8a:	d006      	beq.n	d5b9a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   d5b8c:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5b8e:	4620      	mov	r0, r4
   d5b90:	7023      	strb	r3, [r4, #0]
   d5b92:	f7ff fe38 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5b96:	2000      	movs	r0, #0
}
   d5b98:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   d5b9a:	2001      	movs	r0, #1
   d5b9c:	e7fc      	b.n	d5b98 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000d5b9e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5b9e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d5ba0:	7a83      	ldrb	r3, [r0, #10]
   d5ba2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5ba4:	bf18      	it	ne
   d5ba6:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5ba8:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   d5baa:	460a      	mov	r2, r1
   d5bac:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5bae:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   d5bb0:	f7ff fe82 	bl	d58b8 <_ZN9SdSpiCard11cardCommandEhm>
   d5bb4:	4606      	mov	r6, r0
   d5bb6:	b130      	cbz	r0, d5bc6 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   d5bb8:	2332      	movs	r3, #50	; 0x32
   d5bba:	7023      	strb	r3, [r4, #0]
  spiStop();
   d5bbc:	4620      	mov	r0, r4
   d5bbe:	f7ff fe22 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5bc2:	2500      	movs	r5, #0
   d5bc4:	e01f      	b.n	d5c06 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   d5bc6:	462a      	mov	r2, r5
   d5bc8:	21fe      	movs	r1, #254	; 0xfe
   d5bca:	4620      	mov	r0, r4
   d5bcc:	f7ff ffc2 	bl	d5b54 <_ZN9SdSpiCard9writeDataEhPKh>
   d5bd0:	2800      	cmp	r0, #0
   d5bd2:	d0f3      	beq.n	d5bbc <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5bd4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d5bd8:	4620      	mov	r0, r4
   d5bda:	f7ff fe58 	bl	d588e <_ZN9SdSpiCard11waitNotBusyEt>
   d5bde:	4605      	mov	r5, r0
   d5be0:	b908      	cbnz	r0, d5be6 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   d5be2:	235a      	movs	r3, #90	; 0x5a
   d5be4:	e7e9      	b.n	d5bba <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d5be6:	4632      	mov	r2, r6
   d5be8:	210d      	movs	r1, #13
   d5bea:	4620      	mov	r0, r4
   d5bec:	f7ff fe64 	bl	d58b8 <_ZN9SdSpiCard11cardCommandEhm>
   d5bf0:	b108      	cbz	r0, d5bf6 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   d5bf2:	2329      	movs	r3, #41	; 0x29
   d5bf4:	e7e1      	b.n	d5bba <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
   d5bf6:	6860      	ldr	r0, [r4, #4]
   d5bf8:	f000 f87f 	bl	d5cfa <_ZN14SdSpiAltDriver7receiveEv>
   d5bfc:	2800      	cmp	r0, #0
   d5bfe:	d1f8      	bne.n	d5bf2 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   d5c00:	4620      	mov	r0, r4
   d5c02:	f7ff fe00 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
}
   d5c06:	4628      	mov	r0, r5
   d5c08:	bd70      	pop	{r4, r5, r6, pc}

000d5c0a <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   d5c0a:	b513      	push	{r0, r1, r4, lr}
   d5c0c:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5c0e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   d5c12:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5c14:	f7ff fe3b 	bl	d588e <_ZN9SdSpiCard11waitNotBusyEt>
   d5c18:	9a01      	ldr	r2, [sp, #4]
   d5c1a:	b930      	cbnz	r0, d5c2a <_ZN9SdSpiCard9writeDataEPKh+0x20>
    m_errorCode = code;
   d5c1c:	235b      	movs	r3, #91	; 0x5b
   d5c1e:	7023      	strb	r3, [r4, #0]
  spiStop();
   d5c20:	4620      	mov	r0, r4
   d5c22:	f7ff fdf0 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5c26:	2000      	movs	r0, #0
   d5c28:	e005      	b.n	d5c36 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d5c2a:	21fc      	movs	r1, #252	; 0xfc
   d5c2c:	4620      	mov	r0, r4
   d5c2e:	f7ff ff91 	bl	d5b54 <_ZN9SdSpiCard9writeDataEhPKh>
   d5c32:	2800      	cmp	r0, #0
   d5c34:	d0f4      	beq.n	d5c20 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   d5c36:	b002      	add	sp, #8
   d5c38:	bd10      	pop	{r4, pc}

000d5c3a <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5c3a:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5c3c:	7a83      	ldrb	r3, [r0, #10]
   d5c3e:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5c40:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d5c42:	bf18      	it	ne
   d5c44:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5c46:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5c48:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   d5c4a:	f7ff fe35 	bl	d58b8 <_ZN9SdSpiCard11cardCommandEhm>
   d5c4e:	b130      	cbz	r0, d5c5e <_ZN9SdSpiCard10writeStartEm+0x24>
   d5c50:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5c52:	4620      	mov	r0, r4
   d5c54:	7023      	strb	r3, [r4, #0]
   d5c56:	f7ff fdd6 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5c5a:	2000      	movs	r0, #0
}
   d5c5c:	bd10      	pop	{r4, pc}
  return true;
   d5c5e:	2001      	movs	r0, #1
   d5c60:	e7fc      	b.n	d5c5c <_ZN9SdSpiCard10writeStartEm+0x22>

000d5c62 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5c62:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5c64:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   d5c68:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5c6a:	f7ff fe10 	bl	d588e <_ZN9SdSpiCard11waitNotBusyEt>
   d5c6e:	4605      	mov	r5, r0
   d5c70:	b930      	cbnz	r0, d5c80 <_ZN9SdSpiCard9writeStopEv+0x1e>
   d5c72:	2356      	movs	r3, #86	; 0x56
   d5c74:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   d5c76:	4620      	mov	r0, r4
   d5c78:	f7ff fdc5 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   d5c7c:	4628      	mov	r0, r5
   d5c7e:	bd38      	pop	{r3, r4, r5, pc}
     m_spiDriver->send(data);
   d5c80:	6860      	ldr	r0, [r4, #4]
   d5c82:	21fd      	movs	r1, #253	; 0xfd
   d5c84:	f000 f854 	bl	d5d30 <_ZN14SdSpiAltDriver4sendEh>
   d5c88:	e7f5      	b.n	d5c76 <_ZN9SdSpiCard9writeStopEv+0x14>

000d5c8a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d5c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c8c:	4604      	mov	r4, r0
   d5c8e:	4616      	mov	r6, r2
   d5c90:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d5c92:	f7ff ffd2 	bl	d5c3a <_ZN9SdSpiCard10writeStartEm>
   d5c96:	b170      	cbz	r0, d5cb6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d5c98:	2500      	movs	r5, #0
   d5c9a:	42bd      	cmp	r5, r7
   d5c9c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   d5ca0:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   d5ca2:	d004      	beq.n	d5cae <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d5ca4:	f7ff ffb1 	bl	d5c0a <_ZN9SdSpiCard9writeDataEPKh>
   d5ca8:	b128      	cbz	r0, d5cb6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d5caa:	3501      	adds	r5, #1
   d5cac:	e7f5      	b.n	d5c9a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   d5cae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   d5cb2:	f7ff bfd6 	b.w	d5c62 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   d5cb6:	4620      	mov	r0, r4
   d5cb8:	f7ff fda5 	bl	d5806 <_ZN9SdSpiCard7spiStopEv>
}
   d5cbc:	2000      	movs	r0, #0
   d5cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cc0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d5cc0:	4b01      	ldr	r3, [pc, #4]	; (d5cc8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d5cc2:	2201      	movs	r2, #1
   d5cc4:	701a      	strb	r2, [r3, #0]
}
   d5cc6:	4770      	bx	lr
   d5cc8:	2003e70c 	.word	0x2003e70c

000d5ccc <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d5ccc:	1d01      	adds	r1, r0, #4
   d5cce:	6800      	ldr	r0, [r0, #0]
   d5cd0:	f001 bae8 	b.w	d72a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d5cd4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d5cd4:	b510      	push	{r4, lr}
   d5cd6:	4604      	mov	r4, r0
  m_csPin = csPin;
   d5cd8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d5cda:	6800      	ldr	r0, [r0, #0]
   d5cdc:	f001 fab8 	bl	d7250 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d5ce0:	7d20      	ldrb	r0, [r4, #20]
   d5ce2:	2101      	movs	r1, #1
   d5ce4:	f001 fe50 	bl	d7988 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d5ce8:	7d20      	ldrb	r0, [r4, #20]
   d5cea:	2101      	movs	r1, #1
}
   d5cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   d5cf0:	f001 be5b 	b.w	d79aa <digitalWrite>

000d5cf4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5cf4:	6800      	ldr	r0, [r0, #0]
   d5cf6:	f001 babc 	b.w	d7272 <_ZN8SPIClass14endTransactionEv>

000d5cfa <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d5cfa:	6800      	ldr	r0, [r0, #0]
   d5cfc:	21ff      	movs	r1, #255	; 0xff
   d5cfe:	f001 bb3f 	b.w	d7380 <_ZN8SPIClass8transferEh>
	...

000d5d04 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5d06:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5d08:	4a07      	ldr	r2, [pc, #28]	; (d5d28 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d5d0a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d5d0c:	2500      	movs	r5, #0
   d5d0e:	4c07      	ldr	r4, [pc, #28]	; (d5d2c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5d10:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d5d12:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5d14:	460a      	mov	r2, r1
   d5d16:	4629      	mov	r1, r5
   d5d18:	f001 fb38 	bl	d738c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5d1c:	7823      	ldrb	r3, [r4, #0]
   d5d1e:	2b00      	cmp	r3, #0
   d5d20:	d0fc      	beq.n	d5d1c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5d22:	2000      	movs	r0, #0
   d5d24:	b003      	add	sp, #12
   d5d26:	bd30      	pop	{r4, r5, pc}
   d5d28:	000d5cc1 	.word	0x000d5cc1
   d5d2c:	2003e70c 	.word	0x2003e70c

000d5d30 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d5d30:	6800      	ldr	r0, [r0, #0]
   d5d32:	f001 bb25 	b.w	d7380 <_ZN8SPIClass8transferEh>
	...

000d5d38 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d5d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5d3a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d5d3c:	4a06      	ldr	r2, [pc, #24]	; (d5d58 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d5d3e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d5d40:	2500      	movs	r5, #0
   d5d42:	4c06      	ldr	r4, [pc, #24]	; (d5d5c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d5d44:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d5d46:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d5d48:	462a      	mov	r2, r5
   d5d4a:	f001 fb1f 	bl	d738c <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   d5d4e:	7823      	ldrb	r3, [r4, #0]
   d5d50:	2b00      	cmp	r3, #0
   d5d52:	d0fc      	beq.n	d5d4e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5d54:	b003      	add	sp, #12
   d5d56:	bd30      	pop	{r4, r5, pc}
   d5d58:	000d5cc1 	.word	0x000d5cc1
   d5d5c:	2003e70c 	.word	0x2003e70c

000d5d60 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5d60:	b508      	push	{r3, lr}
   d5d62:	4b02      	ldr	r3, [pc, #8]	; (d5d6c <os_mutex_recursive_create+0xc>)
   d5d64:	681b      	ldr	r3, [r3, #0]
   d5d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d68:	9301      	str	r3, [sp, #4]
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	00030248 	.word	0x00030248

000d5d70 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5d70:	b508      	push	{r3, lr}
   d5d72:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <os_mutex_recursive_destroy+0xc>)
   d5d74:	681b      	ldr	r3, [r3, #0]
   d5d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5d78:	9301      	str	r3, [sp, #4]
   d5d7a:	bd08      	pop	{r3, pc}
   d5d7c:	00030248 	.word	0x00030248

000d5d80 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <HAL_RNG_GetRandomNumber+0xc>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	685b      	ldr	r3, [r3, #4]
   d5d88:	9301      	str	r3, [sp, #4]
   d5d8a:	bd08      	pop	{r3, pc}
   d5d8c:	00030218 	.word	0x00030218

000d5d90 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4b02      	ldr	r3, [pc, #8]	; (d5d9c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5d94:	681b      	ldr	r3, [r3, #0]
   d5d96:	691b      	ldr	r3, [r3, #16]
   d5d98:	9301      	str	r3, [sp, #4]
   d5d9a:	bd08      	pop	{r3, pc}
   d5d9c:	00030218 	.word	0x00030218

000d5da0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5da0:	b508      	push	{r3, lr}
   d5da2:	4b02      	ldr	r3, [pc, #8]	; (d5dac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5da4:	681b      	ldr	r3, [r3, #0]
   d5da6:	695b      	ldr	r3, [r3, #20]
   d5da8:	9301      	str	r3, [sp, #4]
   d5daa:	bd08      	pop	{r3, pc}
   d5dac:	00030218 	.word	0x00030218

000d5db0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5db0:	b508      	push	{r3, lr}
   d5db2:	4b02      	ldr	r3, [pc, #8]	; (d5dbc <hal_rtc_time_is_valid+0xc>)
   d5db4:	681b      	ldr	r3, [r3, #0]
   d5db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5db8:	9301      	str	r3, [sp, #4]
   d5dba:	bd08      	pop	{r3, pc}
   d5dbc:	00030218 	.word	0x00030218

000d5dc0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5dc0:	b508      	push	{r3, lr}
   d5dc2:	4b02      	ldr	r3, [pc, #8]	; (d5dcc <hal_rtc_get_time+0xc>)
   d5dc4:	681b      	ldr	r3, [r3, #0]
   d5dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5dc8:	9301      	str	r3, [sp, #4]
   d5dca:	bd08      	pop	{r3, pc}
   d5dcc:	00030218 	.word	0x00030218

000d5dd0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5dd0:	b508      	push	{r3, lr}
   d5dd2:	4b02      	ldr	r3, [pc, #8]	; (d5ddc <HAL_Validate_Pin_Function+0xc>)
   d5dd4:	681b      	ldr	r3, [r3, #0]
   d5dd6:	685b      	ldr	r3, [r3, #4]
   d5dd8:	9301      	str	r3, [sp, #4]
   d5dda:	bd08      	pop	{r3, pc}
   d5ddc:	0003022c 	.word	0x0003022c

000d5de0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5de0:	b508      	push	{r3, lr}
   d5de2:	4b02      	ldr	r3, [pc, #8]	; (d5dec <HAL_Pin_Mode+0xc>)
   d5de4:	681b      	ldr	r3, [r3, #0]
   d5de6:	689b      	ldr	r3, [r3, #8]
   d5de8:	9301      	str	r3, [sp, #4]
   d5dea:	bd08      	pop	{r3, pc}
   d5dec:	0003022c 	.word	0x0003022c

000d5df0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5df0:	b508      	push	{r3, lr}
   d5df2:	4b02      	ldr	r3, [pc, #8]	; (d5dfc <HAL_Get_Pin_Mode+0xc>)
   d5df4:	681b      	ldr	r3, [r3, #0]
   d5df6:	68db      	ldr	r3, [r3, #12]
   d5df8:	9301      	str	r3, [sp, #4]
   d5dfa:	bd08      	pop	{r3, pc}
   d5dfc:	0003022c 	.word	0x0003022c

000d5e00 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5e00:	b508      	push	{r3, lr}
   d5e02:	4b02      	ldr	r3, [pc, #8]	; (d5e0c <HAL_GPIO_Write+0xc>)
   d5e04:	681b      	ldr	r3, [r3, #0]
   d5e06:	691b      	ldr	r3, [r3, #16]
   d5e08:	9301      	str	r3, [sp, #4]
   d5e0a:	bd08      	pop	{r3, pc}
   d5e0c:	0003022c 	.word	0x0003022c

000d5e10 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5e10:	b508      	push	{r3, lr}
   d5e12:	4b02      	ldr	r3, [pc, #8]	; (d5e1c <hal_adc_read+0xc>)
   d5e14:	681b      	ldr	r3, [r3, #0]
   d5e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e18:	9301      	str	r3, [sp, #4]
   d5e1a:	bd08      	pop	{r3, pc}
   d5e1c:	0003022c 	.word	0x0003022c

000d5e20 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5e20:	b508      	push	{r3, lr}
   d5e22:	4b02      	ldr	r3, [pc, #8]	; (d5e2c <hal_i2c_begin_transmission+0xc>)
   d5e24:	681b      	ldr	r3, [r3, #0]
   d5e26:	699b      	ldr	r3, [r3, #24]
   d5e28:	9301      	str	r3, [sp, #4]
   d5e2a:	bd08      	pop	{r3, pc}
   d5e2c:	00030228 	.word	0x00030228

000d5e30 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5e30:	b508      	push	{r3, lr}
   d5e32:	4b02      	ldr	r3, [pc, #8]	; (d5e3c <hal_i2c_end_transmission+0xc>)
   d5e34:	681b      	ldr	r3, [r3, #0]
   d5e36:	69db      	ldr	r3, [r3, #28]
   d5e38:	9301      	str	r3, [sp, #4]
   d5e3a:	bd08      	pop	{r3, pc}
   d5e3c:	00030228 	.word	0x00030228

000d5e40 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5e40:	b508      	push	{r3, lr}
   d5e42:	4b02      	ldr	r3, [pc, #8]	; (d5e4c <hal_i2c_write+0xc>)
   d5e44:	681b      	ldr	r3, [r3, #0]
   d5e46:	6a1b      	ldr	r3, [r3, #32]
   d5e48:	9301      	str	r3, [sp, #4]
   d5e4a:	bd08      	pop	{r3, pc}
   d5e4c:	00030228 	.word	0x00030228

000d5e50 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5e50:	b508      	push	{r3, lr}
   d5e52:	4b02      	ldr	r3, [pc, #8]	; (d5e5c <hal_i2c_available+0xc>)
   d5e54:	681b      	ldr	r3, [r3, #0]
   d5e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e58:	9301      	str	r3, [sp, #4]
   d5e5a:	bd08      	pop	{r3, pc}
   d5e5c:	00030228 	.word	0x00030228

000d5e60 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5e60:	b508      	push	{r3, lr}
   d5e62:	4b02      	ldr	r3, [pc, #8]	; (d5e6c <hal_i2c_read+0xc>)
   d5e64:	681b      	ldr	r3, [r3, #0]
   d5e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e68:	9301      	str	r3, [sp, #4]
   d5e6a:	bd08      	pop	{r3, pc}
   d5e6c:	00030228 	.word	0x00030228

000d5e70 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5e70:	b508      	push	{r3, lr}
   d5e72:	4b02      	ldr	r3, [pc, #8]	; (d5e7c <hal_i2c_peek+0xc>)
   d5e74:	681b      	ldr	r3, [r3, #0]
   d5e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e78:	9301      	str	r3, [sp, #4]
   d5e7a:	bd08      	pop	{r3, pc}
   d5e7c:	00030228 	.word	0x00030228

000d5e80 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5e80:	b508      	push	{r3, lr}
   d5e82:	4b02      	ldr	r3, [pc, #8]	; (d5e8c <hal_i2c_flush+0xc>)
   d5e84:	681b      	ldr	r3, [r3, #0]
   d5e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e88:	9301      	str	r3, [sp, #4]
   d5e8a:	bd08      	pop	{r3, pc}
   d5e8c:	00030228 	.word	0x00030228

000d5e90 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5e90:	b508      	push	{r3, lr}
   d5e92:	4b02      	ldr	r3, [pc, #8]	; (d5e9c <hal_i2c_is_enabled+0xc>)
   d5e94:	681b      	ldr	r3, [r3, #0]
   d5e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e98:	9301      	str	r3, [sp, #4]
   d5e9a:	bd08      	pop	{r3, pc}
   d5e9c:	00030228 	.word	0x00030228

000d5ea0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5ea0:	b508      	push	{r3, lr}
   d5ea2:	4b02      	ldr	r3, [pc, #8]	; (d5eac <hal_i2c_init+0xc>)
   d5ea4:	681b      	ldr	r3, [r3, #0]
   d5ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ea8:	9301      	str	r3, [sp, #4]
   d5eaa:	bd08      	pop	{r3, pc}
   d5eac:	00030228 	.word	0x00030228

000d5eb0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d5eb0:	b508      	push	{r3, lr}
   d5eb2:	4b02      	ldr	r3, [pc, #8]	; (d5ebc <hal_i2c_lock+0xc>)
   d5eb4:	681b      	ldr	r3, [r3, #0]
   d5eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5eb8:	9301      	str	r3, [sp, #4]
   d5eba:	bd08      	pop	{r3, pc}
   d5ebc:	00030228 	.word	0x00030228

000d5ec0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d5ec0:	b508      	push	{r3, lr}
   d5ec2:	4b02      	ldr	r3, [pc, #8]	; (d5ecc <hal_i2c_unlock+0xc>)
   d5ec4:	681b      	ldr	r3, [r3, #0]
   d5ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5ec8:	9301      	str	r3, [sp, #4]
   d5eca:	bd08      	pop	{r3, pc}
   d5ecc:	00030228 	.word	0x00030228

000d5ed0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5ed0:	b508      	push	{r3, lr}
   d5ed2:	4b02      	ldr	r3, [pc, #8]	; (d5edc <hal_i2c_request_ex+0xc>)
   d5ed4:	681b      	ldr	r3, [r3, #0]
   d5ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5ed8:	9301      	str	r3, [sp, #4]
   d5eda:	bd08      	pop	{r3, pc}
   d5edc:	00030228 	.word	0x00030228

000d5ee0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5ee0:	b508      	push	{r3, lr}
   d5ee2:	4b02      	ldr	r3, [pc, #8]	; (d5eec <inet_inet_ntop+0xc>)
   d5ee4:	681b      	ldr	r3, [r3, #0]
   d5ee6:	695b      	ldr	r3, [r3, #20]
   d5ee8:	9301      	str	r3, [sp, #4]
   d5eea:	bd08      	pop	{r3, pc}
   d5eec:	00030264 	.word	0x00030264

000d5ef0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5ef0:	b508      	push	{r3, lr}
   d5ef2:	4b02      	ldr	r3, [pc, #8]	; (d5efc <netdb_freeaddrinfo+0xc>)
   d5ef4:	681b      	ldr	r3, [r3, #0]
   d5ef6:	689b      	ldr	r3, [r3, #8]
   d5ef8:	9301      	str	r3, [sp, #4]
   d5efa:	bd08      	pop	{r3, pc}
   d5efc:	00030268 	.word	0x00030268

000d5f00 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5f00:	b508      	push	{r3, lr}
   d5f02:	4b02      	ldr	r3, [pc, #8]	; (d5f0c <netdb_getaddrinfo+0xc>)
   d5f04:	681b      	ldr	r3, [r3, #0]
   d5f06:	68db      	ldr	r3, [r3, #12]
   d5f08:	9301      	str	r3, [sp, #4]
   d5f0a:	bd08      	pop	{r3, pc}
   d5f0c:	00030268 	.word	0x00030268

000d5f10 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5f10:	b508      	push	{r3, lr}
   d5f12:	4b02      	ldr	r3, [pc, #8]	; (d5f1c <hal_spi_begin+0xc>)
   d5f14:	681b      	ldr	r3, [r3, #0]
   d5f16:	681b      	ldr	r3, [r3, #0]
   d5f18:	9301      	str	r3, [sp, #4]
   d5f1a:	bd08      	pop	{r3, pc}
   d5f1c:	00030230 	.word	0x00030230

000d5f20 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5f20:	b508      	push	{r3, lr}
   d5f22:	4b02      	ldr	r3, [pc, #8]	; (d5f2c <hal_spi_transfer+0xc>)
   d5f24:	681b      	ldr	r3, [r3, #0]
   d5f26:	695b      	ldr	r3, [r3, #20]
   d5f28:	9301      	str	r3, [sp, #4]
   d5f2a:	bd08      	pop	{r3, pc}
   d5f2c:	00030230 	.word	0x00030230

000d5f30 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5f30:	b508      	push	{r3, lr}
   d5f32:	4b02      	ldr	r3, [pc, #8]	; (d5f3c <hal_spi_init+0xc>)
   d5f34:	681b      	ldr	r3, [r3, #0]
   d5f36:	69db      	ldr	r3, [r3, #28]
   d5f38:	9301      	str	r3, [sp, #4]
   d5f3a:	bd08      	pop	{r3, pc}
   d5f3c:	00030230 	.word	0x00030230

000d5f40 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5f40:	b508      	push	{r3, lr}
   d5f42:	4b02      	ldr	r3, [pc, #8]	; (d5f4c <hal_spi_is_enabled+0xc>)
   d5f44:	681b      	ldr	r3, [r3, #0]
   d5f46:	6a1b      	ldr	r3, [r3, #32]
   d5f48:	9301      	str	r3, [sp, #4]
   d5f4a:	bd08      	pop	{r3, pc}
   d5f4c:	00030230 	.word	0x00030230

000d5f50 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5f50:	b508      	push	{r3, lr}
   d5f52:	4b02      	ldr	r3, [pc, #8]	; (d5f5c <hal_spi_info+0xc>)
   d5f54:	681b      	ldr	r3, [r3, #0]
   d5f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f58:	9301      	str	r3, [sp, #4]
   d5f5a:	bd08      	pop	{r3, pc}
   d5f5c:	00030230 	.word	0x00030230

000d5f60 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d5f60:	b508      	push	{r3, lr}
   d5f62:	4b02      	ldr	r3, [pc, #8]	; (d5f6c <hal_spi_transfer_dma+0xc>)
   d5f64:	681b      	ldr	r3, [r3, #0]
   d5f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f68:	9301      	str	r3, [sp, #4]
   d5f6a:	bd08      	pop	{r3, pc}
   d5f6c:	00030230 	.word	0x00030230

000d5f70 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d5f70:	b508      	push	{r3, lr}
   d5f72:	4b02      	ldr	r3, [pc, #8]	; (d5f7c <hal_spi_transfer_dma_status+0xc>)
   d5f74:	681b      	ldr	r3, [r3, #0]
   d5f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5f78:	9301      	str	r3, [sp, #4]
   d5f7a:	bd08      	pop	{r3, pc}
   d5f7c:	00030230 	.word	0x00030230

000d5f80 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5f80:	b508      	push	{r3, lr}
   d5f82:	4b02      	ldr	r3, [pc, #8]	; (d5f8c <hal_spi_set_settings+0xc>)
   d5f84:	681b      	ldr	r3, [r3, #0]
   d5f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f88:	9301      	str	r3, [sp, #4]
   d5f8a:	bd08      	pop	{r3, pc}
   d5f8c:	00030230 	.word	0x00030230

000d5f90 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5f90:	b508      	push	{r3, lr}
   d5f92:	4b02      	ldr	r3, [pc, #8]	; (d5f9c <hal_spi_acquire+0xc>)
   d5f94:	681b      	ldr	r3, [r3, #0]
   d5f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f98:	9301      	str	r3, [sp, #4]
   d5f9a:	bd08      	pop	{r3, pc}
   d5f9c:	00030230 	.word	0x00030230

000d5fa0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5fa0:	b508      	push	{r3, lr}
   d5fa2:	4b02      	ldr	r3, [pc, #8]	; (d5fac <hal_spi_release+0xc>)
   d5fa4:	681b      	ldr	r3, [r3, #0]
   d5fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5fa8:	9301      	str	r3, [sp, #4]
   d5faa:	bd08      	pop	{r3, pc}
   d5fac:	00030230 	.word	0x00030230

000d5fb0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5fb0:	b508      	push	{r3, lr}
   d5fb2:	4b02      	ldr	r3, [pc, #8]	; (d5fbc <hal_usart_init+0xc>)
   d5fb4:	681b      	ldr	r3, [r3, #0]
   d5fb6:	681b      	ldr	r3, [r3, #0]
   d5fb8:	9301      	str	r3, [sp, #4]
   d5fba:	bd08      	pop	{r3, pc}
   d5fbc:	0003023c 	.word	0x0003023c

000d5fc0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5fc0:	b508      	push	{r3, lr}
   d5fc2:	4b02      	ldr	r3, [pc, #8]	; (d5fcc <hal_usart_write+0xc>)
   d5fc4:	681b      	ldr	r3, [r3, #0]
   d5fc6:	68db      	ldr	r3, [r3, #12]
   d5fc8:	9301      	str	r3, [sp, #4]
   d5fca:	bd08      	pop	{r3, pc}
   d5fcc:	0003023c 	.word	0x0003023c

000d5fd0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5fd0:	b508      	push	{r3, lr}
   d5fd2:	4b02      	ldr	r3, [pc, #8]	; (d5fdc <hal_usart_available+0xc>)
   d5fd4:	681b      	ldr	r3, [r3, #0]
   d5fd6:	691b      	ldr	r3, [r3, #16]
   d5fd8:	9301      	str	r3, [sp, #4]
   d5fda:	bd08      	pop	{r3, pc}
   d5fdc:	0003023c 	.word	0x0003023c

000d5fe0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5fe0:	b508      	push	{r3, lr}
   d5fe2:	4b02      	ldr	r3, [pc, #8]	; (d5fec <hal_usart_read+0xc>)
   d5fe4:	681b      	ldr	r3, [r3, #0]
   d5fe6:	695b      	ldr	r3, [r3, #20]
   d5fe8:	9301      	str	r3, [sp, #4]
   d5fea:	bd08      	pop	{r3, pc}
   d5fec:	0003023c 	.word	0x0003023c

000d5ff0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5ff0:	b508      	push	{r3, lr}
   d5ff2:	4b02      	ldr	r3, [pc, #8]	; (d5ffc <hal_usart_peek+0xc>)
   d5ff4:	681b      	ldr	r3, [r3, #0]
   d5ff6:	699b      	ldr	r3, [r3, #24]
   d5ff8:	9301      	str	r3, [sp, #4]
   d5ffa:	bd08      	pop	{r3, pc}
   d5ffc:	0003023c 	.word	0x0003023c

000d6000 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6000:	b508      	push	{r3, lr}
   d6002:	4b02      	ldr	r3, [pc, #8]	; (d600c <hal_usart_flush+0xc>)
   d6004:	681b      	ldr	r3, [r3, #0]
   d6006:	69db      	ldr	r3, [r3, #28]
   d6008:	9301      	str	r3, [sp, #4]
   d600a:	bd08      	pop	{r3, pc}
   d600c:	0003023c 	.word	0x0003023c

000d6010 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6010:	b508      	push	{r3, lr}
   d6012:	4b02      	ldr	r3, [pc, #8]	; (d601c <hal_usart_is_enabled+0xc>)
   d6014:	681b      	ldr	r3, [r3, #0]
   d6016:	6a1b      	ldr	r3, [r3, #32]
   d6018:	9301      	str	r3, [sp, #4]
   d601a:	bd08      	pop	{r3, pc}
   d601c:	0003023c 	.word	0x0003023c

000d6020 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6020:	b508      	push	{r3, lr}
   d6022:	4b02      	ldr	r3, [pc, #8]	; (d602c <hal_usart_available_data_for_write+0xc>)
   d6024:	681b      	ldr	r3, [r3, #0]
   d6026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6028:	9301      	str	r3, [sp, #4]
   d602a:	bd08      	pop	{r3, pc}
   d602c:	0003023c 	.word	0x0003023c

000d6030 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6030:	b508      	push	{r3, lr}
   d6032:	4b02      	ldr	r3, [pc, #8]	; (d603c <HAL_USB_USART_Init+0xc>)
   d6034:	681b      	ldr	r3, [r3, #0]
   d6036:	681b      	ldr	r3, [r3, #0]
   d6038:	9301      	str	r3, [sp, #4]
   d603a:	bd08      	pop	{r3, pc}
   d603c:	0003024c 	.word	0x0003024c

000d6040 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6040:	b508      	push	{r3, lr}
   d6042:	4b02      	ldr	r3, [pc, #8]	; (d604c <HAL_USB_USART_Begin+0xc>)
   d6044:	681b      	ldr	r3, [r3, #0]
   d6046:	685b      	ldr	r3, [r3, #4]
   d6048:	9301      	str	r3, [sp, #4]
   d604a:	bd08      	pop	{r3, pc}
   d604c:	0003024c 	.word	0x0003024c

000d6050 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6050:	b508      	push	{r3, lr}
   d6052:	4b02      	ldr	r3, [pc, #8]	; (d605c <HAL_USB_USART_Available_Data+0xc>)
   d6054:	681b      	ldr	r3, [r3, #0]
   d6056:	691b      	ldr	r3, [r3, #16]
   d6058:	9301      	str	r3, [sp, #4]
   d605a:	bd08      	pop	{r3, pc}
   d605c:	0003024c 	.word	0x0003024c

000d6060 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6060:	b508      	push	{r3, lr}
   d6062:	4b02      	ldr	r3, [pc, #8]	; (d606c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6064:	681b      	ldr	r3, [r3, #0]
   d6066:	695b      	ldr	r3, [r3, #20]
   d6068:	9301      	str	r3, [sp, #4]
   d606a:	bd08      	pop	{r3, pc}
   d606c:	0003024c 	.word	0x0003024c

000d6070 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6070:	b508      	push	{r3, lr}
   d6072:	4b02      	ldr	r3, [pc, #8]	; (d607c <HAL_USB_USART_Receive_Data+0xc>)
   d6074:	681b      	ldr	r3, [r3, #0]
   d6076:	699b      	ldr	r3, [r3, #24]
   d6078:	9301      	str	r3, [sp, #4]
   d607a:	bd08      	pop	{r3, pc}
   d607c:	0003024c 	.word	0x0003024c

000d6080 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6080:	b508      	push	{r3, lr}
   d6082:	4b02      	ldr	r3, [pc, #8]	; (d608c <HAL_USB_USART_Send_Data+0xc>)
   d6084:	681b      	ldr	r3, [r3, #0]
   d6086:	69db      	ldr	r3, [r3, #28]
   d6088:	9301      	str	r3, [sp, #4]
   d608a:	bd08      	pop	{r3, pc}
   d608c:	0003024c 	.word	0x0003024c

000d6090 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6090:	b508      	push	{r3, lr}
   d6092:	4b02      	ldr	r3, [pc, #8]	; (d609c <HAL_USB_USART_Flush_Data+0xc>)
   d6094:	681b      	ldr	r3, [r3, #0]
   d6096:	6a1b      	ldr	r3, [r3, #32]
   d6098:	9301      	str	r3, [sp, #4]
   d609a:	bd08      	pop	{r3, pc}
   d609c:	0003024c 	.word	0x0003024c

000d60a0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d60a0:	b508      	push	{r3, lr}
   d60a2:	4b02      	ldr	r3, [pc, #8]	; (d60ac <log_message+0xc>)
   d60a4:	681b      	ldr	r3, [r3, #0]
   d60a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d60a8:	9301      	str	r3, [sp, #4]
   d60aa:	bd08      	pop	{r3, pc}
   d60ac:	00030260 	.word	0x00030260

000d60b0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d60b0:	b508      	push	{r3, lr}
   d60b2:	4b02      	ldr	r3, [pc, #8]	; (d60bc <system_mode+0xc>)
   d60b4:	681b      	ldr	r3, [r3, #0]
   d60b6:	681b      	ldr	r3, [r3, #0]
   d60b8:	9301      	str	r3, [sp, #4]
   d60ba:	bd08      	pop	{r3, pc}
   d60bc:	00030220 	.word	0x00030220

000d60c0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d60c0:	b508      	push	{r3, lr}
   d60c2:	4b02      	ldr	r3, [pc, #8]	; (d60cc <set_system_mode+0xc>)
   d60c4:	681b      	ldr	r3, [r3, #0]
   d60c6:	685b      	ldr	r3, [r3, #4]
   d60c8:	9301      	str	r3, [sp, #4]
   d60ca:	bd08      	pop	{r3, pc}
   d60cc:	00030220 	.word	0x00030220

000d60d0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d60d0:	b508      	push	{r3, lr}
   d60d2:	4b02      	ldr	r3, [pc, #8]	; (d60dc <system_delay_ms+0xc>)
   d60d4:	681b      	ldr	r3, [r3, #0]
   d60d6:	695b      	ldr	r3, [r3, #20]
   d60d8:	9301      	str	r3, [sp, #4]
   d60da:	bd08      	pop	{r3, pc}
   d60dc:	00030220 	.word	0x00030220

000d60e0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d60e0:	b508      	push	{r3, lr}
   d60e2:	4b02      	ldr	r3, [pc, #8]	; (d60ec <system_thread_set_state+0xc>)
   d60e4:	681b      	ldr	r3, [r3, #0]
   d60e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d60e8:	9301      	str	r3, [sp, #4]
   d60ea:	bd08      	pop	{r3, pc}
   d60ec:	00030220 	.word	0x00030220

000d60f0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d60f0:	b508      	push	{r3, lr}
   d60f2:	4b02      	ldr	r3, [pc, #8]	; (d60fc <application_thread_current+0xc>)
   d60f4:	681b      	ldr	r3, [r3, #0]
   d60f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d60f8:	9301      	str	r3, [sp, #4]
   d60fa:	bd08      	pop	{r3, pc}
   d60fc:	00030220 	.word	0x00030220

000d6100 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6100:	b508      	push	{r3, lr}
   d6102:	4b02      	ldr	r3, [pc, #8]	; (d610c <application_thread_invoke+0xc>)
   d6104:	681b      	ldr	r3, [r3, #0]
   d6106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6108:	9301      	str	r3, [sp, #4]
   d610a:	bd08      	pop	{r3, pc}
   d610c:	00030220 	.word	0x00030220

000d6110 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6110:	b508      	push	{r3, lr}
   d6112:	4b02      	ldr	r3, [pc, #8]	; (d611c <system_thread_get_state+0xc>)
   d6114:	681b      	ldr	r3, [r3, #0]
   d6116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6118:	9301      	str	r3, [sp, #4]
   d611a:	bd08      	pop	{r3, pc}
   d611c:	00030220 	.word	0x00030220

000d6120 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6120:	b508      	push	{r3, lr}
   d6122:	4b03      	ldr	r3, [pc, #12]	; (d6130 <system_ctrl_set_app_request_handler+0x10>)
   d6124:	681b      	ldr	r3, [r3, #0]
   d6126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d612a:	9301      	str	r3, [sp, #4]
   d612c:	bd08      	pop	{r3, pc}
   d612e:	0000      	.short	0x0000
   d6130:	00030220 	.word	0x00030220

000d6134 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6134:	b508      	push	{r3, lr}
   d6136:	4b03      	ldr	r3, [pc, #12]	; (d6144 <system_ctrl_set_result+0x10>)
   d6138:	681b      	ldr	r3, [r3, #0]
   d613a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d613e:	9301      	str	r3, [sp, #4]
   d6140:	bd08      	pop	{r3, pc}
   d6142:	0000      	.short	0x0000
   d6144:	00030220 	.word	0x00030220

000d6148 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b03      	ldr	r3, [pc, #12]	; (d6158 <system_sleep_ext+0x10>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d6152:	9301      	str	r3, [sp, #4]
   d6154:	bd08      	pop	{r3, pc}
   d6156:	0000      	.short	0x0000
   d6158:	00030220 	.word	0x00030220

000d615c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d615c:	b508      	push	{r3, lr}
   d615e:	4b02      	ldr	r3, [pc, #8]	; (d6168 <spark_process+0xc>)
   d6160:	681b      	ldr	r3, [r3, #0]
   d6162:	689b      	ldr	r3, [r3, #8]
   d6164:	9301      	str	r3, [sp, #4]
   d6166:	bd08      	pop	{r3, pc}
   d6168:	00030244 	.word	0x00030244

000d616c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d616c:	b508      	push	{r3, lr}
   d616e:	4b02      	ldr	r3, [pc, #8]	; (d6178 <spark_cloud_flag_connect+0xc>)
   d6170:	681b      	ldr	r3, [r3, #0]
   d6172:	68db      	ldr	r3, [r3, #12]
   d6174:	9301      	str	r3, [sp, #4]
   d6176:	bd08      	pop	{r3, pc}
   d6178:	00030244 	.word	0x00030244

000d617c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d617c:	b508      	push	{r3, lr}
   d617e:	4b02      	ldr	r3, [pc, #8]	; (d6188 <spark_cloud_flag_connected+0xc>)
   d6180:	681b      	ldr	r3, [r3, #0]
   d6182:	695b      	ldr	r3, [r3, #20]
   d6184:	9301      	str	r3, [sp, #4]
   d6186:	bd08      	pop	{r3, pc}
   d6188:	00030244 	.word	0x00030244

000d618c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d618c:	b508      	push	{r3, lr}
   d618e:	4b02      	ldr	r3, [pc, #8]	; (d6198 <spark_send_event+0xc>)
   d6190:	681b      	ldr	r3, [r3, #0]
   d6192:	6a1b      	ldr	r3, [r3, #32]
   d6194:	9301      	str	r3, [sp, #4]
   d6196:	bd08      	pop	{r3, pc}
   d6198:	00030244 	.word	0x00030244

000d619c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d619c:	b508      	push	{r3, lr}
   d619e:	4b02      	ldr	r3, [pc, #8]	; (d61a8 <spark_sync_time_pending+0xc>)
   d61a0:	681b      	ldr	r3, [r3, #0]
   d61a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61a4:	9301      	str	r3, [sp, #4]
   d61a6:	bd08      	pop	{r3, pc}
   d61a8:	00030244 	.word	0x00030244

000d61ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d61ac:	b508      	push	{r3, lr}
   d61ae:	4b02      	ldr	r3, [pc, #8]	; (d61b8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d61b0:	681b      	ldr	r3, [r3, #0]
   d61b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d61b4:	9301      	str	r3, [sp, #4]
   d61b6:	bd08      	pop	{r3, pc}
   d61b8:	00030244 	.word	0x00030244

000d61bc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d61bc:	b508      	push	{r3, lr}
   d61be:	4b02      	ldr	r3, [pc, #8]	; (d61c8 <network_connect+0xc>)
   d61c0:	681b      	ldr	r3, [r3, #0]
   d61c2:	685b      	ldr	r3, [r3, #4]
   d61c4:	9301      	str	r3, [sp, #4]
   d61c6:	bd08      	pop	{r3, pc}
   d61c8:	00030240 	.word	0x00030240

000d61cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d61cc:	b508      	push	{r3, lr}
   d61ce:	4b02      	ldr	r3, [pc, #8]	; (d61d8 <network_connecting+0xc>)
   d61d0:	681b      	ldr	r3, [r3, #0]
   d61d2:	689b      	ldr	r3, [r3, #8]
   d61d4:	9301      	str	r3, [sp, #4]
   d61d6:	bd08      	pop	{r3, pc}
   d61d8:	00030240 	.word	0x00030240

000d61dc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d61dc:	b508      	push	{r3, lr}
   d61de:	4b02      	ldr	r3, [pc, #8]	; (d61e8 <network_disconnect+0xc>)
   d61e0:	681b      	ldr	r3, [r3, #0]
   d61e2:	68db      	ldr	r3, [r3, #12]
   d61e4:	9301      	str	r3, [sp, #4]
   d61e6:	bd08      	pop	{r3, pc}
   d61e8:	00030240 	.word	0x00030240

000d61ec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d61ec:	b508      	push	{r3, lr}
   d61ee:	4b02      	ldr	r3, [pc, #8]	; (d61f8 <network_ready+0xc>)
   d61f0:	681b      	ldr	r3, [r3, #0]
   d61f2:	691b      	ldr	r3, [r3, #16]
   d61f4:	9301      	str	r3, [sp, #4]
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	00030240 	.word	0x00030240

000d61fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d61fc:	b508      	push	{r3, lr}
   d61fe:	4b02      	ldr	r3, [pc, #8]	; (d6208 <network_on+0xc>)
   d6200:	681b      	ldr	r3, [r3, #0]
   d6202:	695b      	ldr	r3, [r3, #20]
   d6204:	9301      	str	r3, [sp, #4]
   d6206:	bd08      	pop	{r3, pc}
   d6208:	00030240 	.word	0x00030240

000d620c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d620c:	b508      	push	{r3, lr}
   d620e:	4b02      	ldr	r3, [pc, #8]	; (d6218 <network_off+0xc>)
   d6210:	681b      	ldr	r3, [r3, #0]
   d6212:	699b      	ldr	r3, [r3, #24]
   d6214:	9301      	str	r3, [sp, #4]
   d6216:	bd08      	pop	{r3, pc}
   d6218:	00030240 	.word	0x00030240

000d621c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d621c:	b508      	push	{r3, lr}
   d621e:	4b02      	ldr	r3, [pc, #8]	; (d6228 <network_listen+0xc>)
   d6220:	681b      	ldr	r3, [r3, #0]
   d6222:	69db      	ldr	r3, [r3, #28]
   d6224:	9301      	str	r3, [sp, #4]
   d6226:	bd08      	pop	{r3, pc}
   d6228:	00030240 	.word	0x00030240

000d622c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d622c:	b508      	push	{r3, lr}
   d622e:	4b02      	ldr	r3, [pc, #8]	; (d6238 <network_listening+0xc>)
   d6230:	681b      	ldr	r3, [r3, #0]
   d6232:	6a1b      	ldr	r3, [r3, #32]
   d6234:	9301      	str	r3, [sp, #4]
   d6236:	bd08      	pop	{r3, pc}
   d6238:	00030240 	.word	0x00030240

000d623c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d623c:	b508      	push	{r3, lr}
   d623e:	4b02      	ldr	r3, [pc, #8]	; (d6248 <network_set_listen_timeout+0xc>)
   d6240:	681b      	ldr	r3, [r3, #0]
   d6242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6244:	9301      	str	r3, [sp, #4]
   d6246:	bd08      	pop	{r3, pc}
   d6248:	00030240 	.word	0x00030240

000d624c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d624c:	b508      	push	{r3, lr}
   d624e:	4b02      	ldr	r3, [pc, #8]	; (d6258 <network_get_listen_timeout+0xc>)
   d6250:	681b      	ldr	r3, [r3, #0]
   d6252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6254:	9301      	str	r3, [sp, #4]
   d6256:	bd08      	pop	{r3, pc}
   d6258:	00030240 	.word	0x00030240

000d625c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d625c:	b508      	push	{r3, lr}
   d625e:	4b02      	ldr	r3, [pc, #8]	; (d6268 <network_is_on+0xc>)
   d6260:	681b      	ldr	r3, [r3, #0]
   d6262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6264:	9301      	str	r3, [sp, #4]
   d6266:	bd08      	pop	{r3, pc}
   d6268:	00030240 	.word	0x00030240

000d626c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d626c:	b508      	push	{r3, lr}
   d626e:	4b02      	ldr	r3, [pc, #8]	; (d6278 <network_is_off+0xc>)
   d6270:	681b      	ldr	r3, [r3, #0]
   d6272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6274:	9301      	str	r3, [sp, #4]
   d6276:	bd08      	pop	{r3, pc}
   d6278:	00030240 	.word	0x00030240

000d627c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d627c:	b508      	push	{r3, lr}
   d627e:	4b02      	ldr	r3, [pc, #8]	; (d6288 <malloc+0xc>)
   d6280:	681b      	ldr	r3, [r3, #0]
   d6282:	681b      	ldr	r3, [r3, #0]
   d6284:	9301      	str	r3, [sp, #4]
   d6286:	bd08      	pop	{r3, pc}
   d6288:	0003021c 	.word	0x0003021c

000d628c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d628c:	b508      	push	{r3, lr}
   d628e:	4b02      	ldr	r3, [pc, #8]	; (d6298 <free+0xc>)
   d6290:	681b      	ldr	r3, [r3, #0]
   d6292:	685b      	ldr	r3, [r3, #4]
   d6294:	9301      	str	r3, [sp, #4]
   d6296:	bd08      	pop	{r3, pc}
   d6298:	0003021c 	.word	0x0003021c

000d629c <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d629c:	b508      	push	{r3, lr}
   d629e:	4b02      	ldr	r3, [pc, #8]	; (d62a8 <snprintf+0xc>)
   d62a0:	681b      	ldr	r3, [r3, #0]
   d62a2:	69db      	ldr	r3, [r3, #28]
   d62a4:	9301      	str	r3, [sp, #4]
   d62a6:	bd08      	pop	{r3, pc}
   d62a8:	0003021c 	.word	0x0003021c

000d62ac <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d62ac:	b508      	push	{r3, lr}
   d62ae:	4b02      	ldr	r3, [pc, #8]	; (d62b8 <vsnprintf+0xc>)
   d62b0:	681b      	ldr	r3, [r3, #0]
   d62b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d62b4:	9301      	str	r3, [sp, #4]
   d62b6:	bd08      	pop	{r3, pc}
   d62b8:	0003021c 	.word	0x0003021c

000d62bc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d62bc:	b508      	push	{r3, lr}
   d62be:	4b02      	ldr	r3, [pc, #8]	; (d62c8 <abort+0xc>)
   d62c0:	681b      	ldr	r3, [r3, #0]
   d62c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d62c4:	9301      	str	r3, [sp, #4]
   d62c6:	bd08      	pop	{r3, pc}
   d62c8:	0003021c 	.word	0x0003021c

000d62cc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d62cc:	b508      	push	{r3, lr}
   d62ce:	4b02      	ldr	r3, [pc, #8]	; (d62d8 <_malloc_r+0xc>)
   d62d0:	681b      	ldr	r3, [r3, #0]
   d62d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62d4:	9301      	str	r3, [sp, #4]
   d62d6:	bd08      	pop	{r3, pc}
   d62d8:	0003021c 	.word	0x0003021c

000d62dc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d62dc:	b508      	push	{r3, lr}
   d62de:	4b02      	ldr	r3, [pc, #8]	; (d62e8 <newlib_impure_ptr_callback+0xc>)
   d62e0:	681b      	ldr	r3, [r3, #0]
   d62e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d62e4:	9301      	str	r3, [sp, #4]
   d62e6:	bd08      	pop	{r3, pc}
   d62e8:	0003021c 	.word	0x0003021c

000d62ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d62ec:	2100      	movs	r1, #0
   d62ee:	f7ff beef 	b.w	d60d0 <system_delay_ms>

000d62f2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d62f2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d62f4:	6883      	ldr	r3, [r0, #8]
   d62f6:	4604      	mov	r4, r0
   d62f8:	b90b      	cbnz	r3, d62fe <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d62fa:	f001 fc12 	bl	d7b22 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d62fe:	68c3      	ldr	r3, [r0, #12]
   d6300:	4798      	blx	r3
      if (_M_manager)
   d6302:	68a3      	ldr	r3, [r4, #8]
   d6304:	b11b      	cbz	r3, d630e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6306:	2203      	movs	r2, #3
   d6308:	4621      	mov	r1, r4
   d630a:	4620      	mov	r0, r4
   d630c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d630e:	4620      	mov	r0, r4
   d6310:	2110      	movs	r1, #16
}
   d6312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6316:	f001 bbfe 	b.w	d7b16 <_ZdlPvj>

000d631a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d631a:	b510      	push	{r4, lr}
          _M_dispose();
   d631c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d631e:	4604      	mov	r4, r0
          _M_dispose();
   d6320:	689b      	ldr	r3, [r3, #8]
   d6322:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6324:	68a3      	ldr	r3, [r4, #8]
   d6326:	3b01      	subs	r3, #1
   d6328:	60a3      	str	r3, [r4, #8]
   d632a:	b92b      	cbnz	r3, d6338 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d632c:	6823      	ldr	r3, [r4, #0]
   d632e:	4620      	mov	r0, r4
   d6330:	68db      	ldr	r3, [r3, #12]
    }
   d6332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6336:	4718      	bx	r3
    }
   d6338:	bd10      	pop	{r4, pc}

000d633a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d633a:	b510      	push	{r4, lr}
   d633c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d633e:	6800      	ldr	r0, [r0, #0]
   d6340:	b108      	cbz	r0, d6346 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6342:	f7ff fd15 	bl	d5d70 <os_mutex_recursive_destroy>
    }
   d6346:	4620      	mov	r0, r4
   d6348:	bd10      	pop	{r4, pc}

000d634a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d634a:	680b      	ldr	r3, [r1, #0]
   d634c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d634e:	b113      	cbz	r3, d6356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6350:	685a      	ldr	r2, [r3, #4]
   d6352:	3201      	adds	r2, #1
   d6354:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d6356:	4770      	bx	lr

000d6358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6358:	b510      	push	{r4, lr}
   d635a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d635c:	6800      	ldr	r0, [r0, #0]
   d635e:	b128      	cbz	r0, d636c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6360:	6843      	ldr	r3, [r0, #4]
   d6362:	3b01      	subs	r3, #1
   d6364:	6043      	str	r3, [r0, #4]
   d6366:	b90b      	cbnz	r3, d636c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6368:	f7ff ffd7 	bl	d631a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d636c:	4620      	mov	r0, r4
   d636e:	bd10      	pop	{r4, pc}

000d6370 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6370:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6372:	4c06      	ldr	r4, [pc, #24]	; (d638c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6374:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6376:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6378:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d637a:	f7ff fcf1 	bl	d5d60 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d637e:	4620      	mov	r0, r4
   d6380:	4a03      	ldr	r2, [pc, #12]	; (d6390 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6382:	4904      	ldr	r1, [pc, #16]	; (d6394 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6388:	f001 bbc0 	b.w	d7b0c <__aeabi_atexit>
   d638c:	2003e710 	.word	0x2003e710
   d6390:	2003e220 	.word	0x2003e220
   d6394:	000d633b 	.word	0x000d633b

000d6398 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6398:	2200      	movs	r2, #0
   d639a:	6840      	ldr	r0, [r0, #4]
   d639c:	4611      	mov	r1, r2
   d639e:	f7ff bf25 	b.w	d61ec <network_ready>

000d63a2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d63a2:	2200      	movs	r2, #0
   d63a4:	6840      	ldr	r0, [r0, #4]
   d63a6:	4611      	mov	r1, r2
   d63a8:	f7ff bf40 	b.w	d622c <network_listening>

000d63ac <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d63ac:	2200      	movs	r2, #0
   d63ae:	6840      	ldr	r0, [r0, #4]
   d63b0:	4611      	mov	r1, r2
   d63b2:	f7ff bf4b 	b.w	d624c <network_get_listen_timeout>

000d63b6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d63b6:	6840      	ldr	r0, [r0, #4]
   d63b8:	2200      	movs	r2, #0
   d63ba:	f7ff bf3f 	b.w	d623c <network_set_listen_timeout>

000d63be <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d63be:	6840      	ldr	r0, [r0, #4]
   d63c0:	2200      	movs	r2, #0
   d63c2:	f081 0101 	eor.w	r1, r1, #1
   d63c6:	f7ff bf29 	b.w	d621c <network_listen>

000d63ca <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d63ca:	2300      	movs	r3, #0
   d63cc:	6840      	ldr	r0, [r0, #4]
   d63ce:	461a      	mov	r2, r3
   d63d0:	4619      	mov	r1, r3
   d63d2:	f7ff bf1b 	b.w	d620c <network_off>

000d63d6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d63d6:	2300      	movs	r3, #0
   d63d8:	6840      	ldr	r0, [r0, #4]
   d63da:	461a      	mov	r2, r3
   d63dc:	4619      	mov	r1, r3
   d63de:	f7ff bf0d 	b.w	d61fc <network_on>

000d63e2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d63e2:	2200      	movs	r2, #0
   d63e4:	6840      	ldr	r0, [r0, #4]
   d63e6:	4611      	mov	r1, r2
   d63e8:	f7ff bef0 	b.w	d61cc <network_connecting>

000d63ec <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d63ec:	6840      	ldr	r0, [r0, #4]
   d63ee:	2200      	movs	r2, #0
   d63f0:	2102      	movs	r1, #2
   d63f2:	f7ff bef3 	b.w	d61dc <network_disconnect>

000d63f6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d63f6:	2300      	movs	r3, #0
   d63f8:	6840      	ldr	r0, [r0, #4]
   d63fa:	461a      	mov	r2, r3
   d63fc:	f7ff bede 	b.w	d61bc <network_connect>

000d6400 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6400:	4b08      	ldr	r3, [pc, #32]	; (d6424 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6402:	b510      	push	{r4, lr}
   d6404:	2428      	movs	r4, #40	; 0x28
   d6406:	4622      	mov	r2, r4
   d6408:	4618      	mov	r0, r3
   d640a:	2100      	movs	r1, #0
   d640c:	f002 f8ba 	bl	d8584 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6410:	4b05      	ldr	r3, [pc, #20]	; (d6428 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d6412:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d6414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6418:	6042      	str	r2, [r0, #4]
   d641a:	2204      	movs	r2, #4
   d641c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d641e:	4a03      	ldr	r2, [pc, #12]	; (d642c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6420:	601a      	str	r2, [r3, #0]
   d6422:	bd10      	pop	{r4, pc}
   d6424:	2003e71c 	.word	0x2003e71c
   d6428:	2003e714 	.word	0x2003e714
   d642c:	000d87e0 	.word	0x000d87e0

000d6430 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6430:	4770      	bx	lr

000d6432 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d6432:	2000      	movs	r0, #0
   d6434:	4770      	bx	lr

000d6436 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6436:	b510      	push	{r4, lr}
   d6438:	2110      	movs	r1, #16
   d643a:	4604      	mov	r4, r0
   d643c:	f001 fb6b 	bl	d7b16 <_ZdlPvj>
   d6440:	4620      	mov	r0, r4
   d6442:	bd10      	pop	{r4, pc}

000d6444 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6444:	b508      	push	{r3, lr}
      { delete this; }
   d6446:	f7ff fff6 	bl	d6436 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d644a:	bd08      	pop	{r3, pc}

000d644c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d644c:	b510      	push	{r4, lr}
      if (_M_manager)
   d644e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6450:	4604      	mov	r4, r0
      if (_M_manager)
   d6452:	b113      	cbz	r3, d645a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6454:	2203      	movs	r2, #3
   d6456:	4601      	mov	r1, r0
   d6458:	4798      	blx	r3
    }
   d645a:	4620      	mov	r0, r4
   d645c:	bd10      	pop	{r4, pc}

000d645e <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d645e:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6460:	2200      	movs	r2, #0
   d6462:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6466:	6002      	str	r2, [r0, #0]
   d6468:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d646a:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d646c:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d646e:	680c      	ldr	r4, [r1, #0]
   d6470:	8085      	strh	r5, [r0, #4]
   d6472:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6474:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6476:	bd30      	pop	{r4, r5, pc}

000d6478 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6478:	b510      	push	{r4, lr}
   d647a:	4604      	mov	r4, r0
    free((void*)msg_);
   d647c:	6800      	ldr	r0, [r0, #0]
   d647e:	f7ff ff05 	bl	d628c <free>
}
   d6482:	4620      	mov	r0, r4
   d6484:	bd10      	pop	{r4, pc}

000d6486 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6486:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6488:	68c4      	ldr	r4, [r0, #12]
   d648a:	b1f4      	cbz	r4, d64ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d648c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d648e:	2b02      	cmp	r3, #2
   d6490:	d103      	bne.n	d649a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6492:	f104 000c 	add.w	r0, r4, #12
   d6496:	f7ff ffef 	bl	d6478 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d649a:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d649c:	b135      	cbz	r5, d64ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d649e:	4628      	mov	r0, r5
   d64a0:	f7ff ffd4 	bl	d644c <_ZNSt14_Function_baseD1Ev>
   d64a4:	2110      	movs	r1, #16
   d64a6:	4628      	mov	r0, r5
   d64a8:	f001 fb35 	bl	d7b16 <_ZdlPvj>
   d64ac:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d64ae:	b135      	cbz	r5, d64be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d64b0:	4628      	mov	r0, r5
   d64b2:	f7ff ffcb 	bl	d644c <_ZNSt14_Function_baseD1Ev>
   d64b6:	2110      	movs	r1, #16
   d64b8:	4628      	mov	r0, r5
   d64ba:	f001 fb2c 	bl	d7b16 <_ZdlPvj>
   d64be:	4620      	mov	r0, r4
   d64c0:	2114      	movs	r1, #20
   d64c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d64c6:	f001 bb26 	b.w	d7b16 <_ZdlPvj>
   d64ca:	bd38      	pop	{r3, r4, r5, pc}

000d64cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d64cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d64ce:	460e      	mov	r6, r1
   d64d0:	4604      	mov	r4, r0
   d64d2:	f856 3b04 	ldr.w	r3, [r6], #4
   d64d6:	9300      	str	r3, [sp, #0]
   d64d8:	460d      	mov	r5, r1
   d64da:	a801      	add	r0, sp, #4
   d64dc:	4631      	mov	r1, r6
   d64de:	f7ff ff34 	bl	d634a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d64e2:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d64e4:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d64e6:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d64e8:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d64ea:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d64ec:	2300      	movs	r3, #0
   d64ee:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d64f0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d64f2:	f7ff ff31 	bl	d6358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d64f6:	4630      	mov	r0, r6
   d64f8:	f7ff ff2e 	bl	d6358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d64fc:	4628      	mov	r0, r5
   d64fe:	2108      	movs	r1, #8
   d6500:	f001 fb09 	bl	d7b16 <_ZdlPvj>
        return p;
    }
   d6504:	4620      	mov	r0, r4
   d6506:	b002      	add	sp, #8
   d6508:	bd70      	pop	{r4, r5, r6, pc}

000d650a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d650a:	b513      	push	{r0, r1, r4, lr}
   d650c:	460b      	mov	r3, r1
   d650e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6510:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6514:	466c      	mov	r4, sp
   d6516:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d651a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d651e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6522:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6526:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d652a:	b002      	add	sp, #8
   d652c:	bd10      	pop	{r4, pc}

000d652e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d652e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6530:	b510      	push	{r4, lr}
      if (_M_empty())
   d6532:	b90a      	cbnz	r2, d6538 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6534:	f001 faf5 	bl	d7b22 <_ZSt25__throw_bad_function_callv>
    }
   d6538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d653c:	68c3      	ldr	r3, [r0, #12]
   d653e:	4718      	bx	r3

000d6540 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6540:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6542:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6544:	f100 0110 	add.w	r1, r0, #16
   d6548:	f7ff fff1 	bl	d652e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d654c:	bd08      	pop	{r3, pc}

000d654e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d654e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6550:	b510      	push	{r4, lr}
      if (_M_empty())
   d6552:	b90a      	cbnz	r2, d6558 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6554:	f001 fae5 	bl	d7b22 <_ZSt25__throw_bad_function_callv>
    }
   d6558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d655c:	68c3      	ldr	r3, [r0, #12]
   d655e:	4718      	bx	r3

000d6560 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6560:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6562:	6800      	ldr	r0, [r0, #0]
   d6564:	f100 0110 	add.w	r1, r0, #16
   d6568:	f7ff fff1 	bl	d654e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d656c:	bd08      	pop	{r3, pc}
	...

000d6570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6570:	b538      	push	{r3, r4, r5, lr}
   d6572:	2300      	movs	r3, #0
   d6574:	4604      	mov	r4, r0
   d6576:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6578:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d657a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d657c:	f7fd fd8b 	bl	d4096 <_Znwj>
   d6580:	b128      	cbz	r0, d658e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6582:	2301      	movs	r3, #1
   d6584:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6588:	4b02      	ldr	r3, [pc, #8]	; (d6594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d658a:	6003      	str	r3, [r0, #0]
   d658c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d658e:	6020      	str	r0, [r4, #0]
	}
   d6590:	4620      	mov	r0, r4
   d6592:	bd38      	pop	{r3, r4, r5, pc}
   d6594:	000d881c 	.word	0x000d881c

000d6598 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6598:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d659a:	2300      	movs	r3, #0
   d659c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d659e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d65a0:	4604      	mov	r4, r0
   d65a2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d65a4:	b12b      	cbz	r3, d65b2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d65a6:	2202      	movs	r2, #2
   d65a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d65aa:	68eb      	ldr	r3, [r5, #12]
   d65ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d65ae:	68ab      	ldr	r3, [r5, #8]
   d65b0:	60a3      	str	r3, [r4, #8]
    }
   d65b2:	4620      	mov	r0, r4
   d65b4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d65b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d65b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d65ba:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d65bc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d65be:	4668      	mov	r0, sp
   d65c0:	f7ff ff4d 	bl	d645e <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d65c4:	f04f 0302 	mov.w	r3, #2
   d65c8:	e8d4 2f4f 	ldrexb	r2, [r4]
   d65cc:	2a00      	cmp	r2, #0
   d65ce:	d103      	bne.n	d65d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d65d0:	e8c4 3f41 	strexb	r1, r3, [r4]
   d65d4:	2900      	cmp	r1, #0
   d65d6:	d1f7      	bne.n	d65c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d65d8:	d125      	bne.n	d6626 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d65da:	f104 050c 	add.w	r5, r4, #12
   d65de:	4669      	mov	r1, sp
   d65e0:	4628      	mov	r0, r5
   d65e2:	f7ff ff3c 	bl	d645e <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d65e6:	f3bf 8f5b 	dmb	ish
   d65ea:	2301      	movs	r3, #1
   d65ec:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d65ee:	2000      	movs	r0, #0
   d65f0:	f104 0308 	add.w	r3, r4, #8
   d65f4:	f3bf 8f5b 	dmb	ish
   d65f8:	e853 6f00 	ldrex	r6, [r3]
   d65fc:	e843 0200 	strex	r2, r0, [r3]
   d6600:	2a00      	cmp	r2, #0
   d6602:	d1f9      	bne.n	d65f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6604:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6608:	b16e      	cbz	r6, d6626 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d660a:	f7ff fd71 	bl	d60f0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d660e:	b178      	cbz	r0, d6630 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6610:	4629      	mov	r1, r5
   d6612:	4630      	mov	r0, r6
   d6614:	f7ff ff8b 	bl	d652e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6618:	4630      	mov	r0, r6
   d661a:	f7ff ff17 	bl	d644c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d661e:	2110      	movs	r1, #16
   d6620:	4630      	mov	r0, r6
   d6622:	f001 fa78 	bl	d7b16 <_ZdlPvj>
        p_->setError(std::move(error));
   d6626:	4668      	mov	r0, sp
   d6628:	f7ff ff26 	bl	d6478 <_ZN8particle5ErrorD1Ev>
    }
   d662c:	b009      	add	sp, #36	; 0x24
   d662e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6630:	4631      	mov	r1, r6
   d6632:	a802      	add	r0, sp, #8
   d6634:	f7ff ffb0 	bl	d6598 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6638:	68e0      	ldr	r0, [r4, #12]
   d663a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d663e:	b108      	cbz	r0, d6644 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6640:	f001 ffcc 	bl	d85dc <strdup>
        type_(type) {
   d6644:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6646:	2010      	movs	r0, #16
   d6648:	f8ad 501c 	strh.w	r5, [sp, #28]
   d664c:	f7fd fd23 	bl	d4096 <_Znwj>
   d6650:	4605      	mov	r5, r0
   d6652:	b1e8      	cbz	r0, d6690 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6654:	2700      	movs	r7, #0
   d6656:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6658:	2018      	movs	r0, #24
   d665a:	f7fd fd1c 	bl	d4096 <_Znwj>
   d665e:	4604      	mov	r4, r0
   d6660:	b188      	cbz	r0, d6686 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6662:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6664:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6666:	a802      	add	r0, sp, #8
   d6668:	f7ff ff4f 	bl	d650a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d666c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d666e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6670:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6672:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6674:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6676:	a906      	add	r1, sp, #24
   d6678:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d667a:	60e3      	str	r3, [r4, #12]
   d667c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6680:	9205      	str	r2, [sp, #20]
   d6682:	f7ff feec 	bl	d645e <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6686:	4b08      	ldr	r3, [pc, #32]	; (d66a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6688:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d668a:	4b08      	ldr	r3, [pc, #32]	; (d66ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d668c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d668e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6690:	a806      	add	r0, sp, #24
   d6692:	f7ff fef1 	bl	d6478 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6696:	a802      	add	r0, sp, #8
   d6698:	f7ff fed8 	bl	d644c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d669c:	2200      	movs	r2, #0
   d669e:	4629      	mov	r1, r5
   d66a0:	4803      	ldr	r0, [pc, #12]	; (d66b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d66a2:	f7ff fd2d 	bl	d6100 <application_thread_invoke>
   d66a6:	e7b7      	b.n	d6618 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d66a8:	000d6541 	.word	0x000d6541
   d66ac:	000d67d9 	.word	0x000d67d9
   d66b0:	000d62f3 	.word	0x000d62f3

000d66b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d66b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d66b8:	b08a      	sub	sp, #40	; 0x28
   d66ba:	4605      	mov	r5, r0
   d66bc:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d66c0:	460c      	mov	r4, r1
   d66c2:	4617      	mov	r7, r2
   d66c4:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d66c6:	f7ff fd59 	bl	d617c <spark_cloud_flag_connected>
   d66ca:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d66cc:	4682      	mov	sl, r0
   d66ce:	bb38      	cbnz	r0, d6720 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d66d0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d66d4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d66d6:	a905      	add	r1, sp, #20
   d66d8:	4630      	mov	r0, r6
   d66da:	f8ad 3018 	strh.w	r3, [sp, #24]
   d66de:	f7ff febe 	bl	d645e <_ZN8particle5ErrorC1EOS0_>
   d66e2:	2014      	movs	r0, #20
   d66e4:	f7fd fcd7 	bl	d4096 <_Znwj>
   d66e8:	4604      	mov	r4, r0
   d66ea:	b148      	cbz	r0, d6700 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d66ec:	2302      	movs	r3, #2
   d66ee:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d66f0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d66f2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d66f6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d66f8:	4631      	mov	r1, r6
   d66fa:	300c      	adds	r0, #12
   d66fc:	f7ff feaf 	bl	d645e <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6700:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6702:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6704:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6708:	f7ff ff32 	bl	d6570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d670c:	4630      	mov	r0, r6
   d670e:	f7ff feb3 	bl	d6478 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6712:	a805      	add	r0, sp, #20
   d6714:	f7ff feb0 	bl	d6478 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6718:	4628      	mov	r0, r5
   d671a:	b00a      	add	sp, #40	; 0x28
   d671c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6720:	230c      	movs	r3, #12
   d6722:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6726:	2014      	movs	r0, #20
   d6728:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d672c:	9307      	str	r3, [sp, #28]
   d672e:	f7fd fcb2 	bl	d4096 <_Znwj>
   d6732:	4601      	mov	r1, r0
   d6734:	b128      	cbz	r0, d6742 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6736:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d673a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d673e:	f880 a001 	strb.w	sl, [r0, #1]
   d6742:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6744:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6746:	f7ff ff13 	bl	d6570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d674a:	4b22      	ldr	r3, [pc, #136]	; (d67d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d674c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d674e:	2008      	movs	r0, #8
   d6750:	f7fd fca1 	bl	d4096 <_Znwj>
   d6754:	4682      	mov	sl, r0
   d6756:	b128      	cbz	r0, d6764 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6758:	9b03      	ldr	r3, [sp, #12]
   d675a:	f840 3b04 	str.w	r3, [r0], #4
   d675e:	a904      	add	r1, sp, #16
   d6760:	f7ff fdf3 	bl	d634a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6764:	9600      	str	r6, [sp, #0]
   d6766:	fa5f f389 	uxtb.w	r3, r9
   d676a:	4642      	mov	r2, r8
   d676c:	4639      	mov	r1, r7
   d676e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6770:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6774:	f7ff fd0a 	bl	d618c <spark_send_event>
   d6778:	b9b8      	cbnz	r0, d67aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d677a:	9b03      	ldr	r3, [sp, #12]
   d677c:	785b      	ldrb	r3, [r3, #1]
   d677e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6782:	b993      	cbnz	r3, d67aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6784:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6788:	a905      	add	r1, sp, #20
   d678a:	a803      	add	r0, sp, #12
   d678c:	9205      	str	r2, [sp, #20]
   d678e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6792:	f7ff ff11 	bl	d65b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6796:	a805      	add	r0, sp, #20
   d6798:	f7ff fe6e 	bl	d6478 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d679c:	a805      	add	r0, sp, #20
   d679e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d67a0:	f7ff fe94 	bl	d64cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d67a4:	a806      	add	r0, sp, #24
   d67a6:	f7ff fdd7 	bl	d6358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d67aa:	9b03      	ldr	r3, [sp, #12]
   d67ac:	9305      	str	r3, [sp, #20]
   d67ae:	a904      	add	r1, sp, #16
   d67b0:	a806      	add	r0, sp, #24
   d67b2:	f7ff fdca 	bl	d634a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d67b6:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d67b8:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d67ba:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d67bc:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d67be:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d67c0:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d67c2:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d67c4:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d67c6:	f7ff fdc7 	bl	d6358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67ca:	a804      	add	r0, sp, #16
   d67cc:	f7ff fdc4 	bl	d6358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d67d0:	e7a2      	b.n	d6718 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d67d2:	bf00      	nop
   d67d4:	000d689d 	.word	0x000d689d

000d67d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d67d8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d67da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67dc:	4605      	mov	r5, r0
	  switch (__op)
   d67de:	d007      	beq.n	d67f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d67e0:	2a03      	cmp	r2, #3
   d67e2:	d018      	beq.n	d6816 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d67e4:	2a01      	cmp	r2, #1
   d67e6:	d101      	bne.n	d67ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d67e8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d67ea:	6003      	str	r3, [r0, #0]
	}
   d67ec:	2000      	movs	r0, #0
   d67ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d67f0:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d67f2:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d67f4:	f7fd fc4f 	bl	d4096 <_Znwj>
   d67f8:	4604      	mov	r4, r0
   d67fa:	b150      	cbz	r0, d6812 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d67fc:	4631      	mov	r1, r6
   d67fe:	f7ff fecb 	bl	d6598 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6802:	6930      	ldr	r0, [r6, #16]
   d6804:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6808:	b108      	cbz	r0, d680e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d680a:	f001 fee7 	bl	d85dc <strdup>
        type_(type) {
   d680e:	6120      	str	r0, [r4, #16]
   d6810:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6812:	602c      	str	r4, [r5, #0]
	}
   d6814:	e7ea      	b.n	d67ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6816:	6804      	ldr	r4, [r0, #0]
   d6818:	2c00      	cmp	r4, #0
   d681a:	d0e7      	beq.n	d67ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d681c:	f104 0010 	add.w	r0, r4, #16
   d6820:	f7ff fe2a 	bl	d6478 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6824:	4620      	mov	r0, r4
   d6826:	f7ff fe11 	bl	d644c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d682a:	2118      	movs	r1, #24
   d682c:	4620      	mov	r0, r4
   d682e:	f001 f972 	bl	d7b16 <_ZdlPvj>
   d6832:	e7db      	b.n	d67ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6834 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6834:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6836:	2300      	movs	r3, #0
   d6838:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d683a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d683c:	4604      	mov	r4, r0
   d683e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6840:	b12b      	cbz	r3, d684e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6842:	2202      	movs	r2, #2
   d6844:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6846:	68eb      	ldr	r3, [r5, #12]
   d6848:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d684a:	68ab      	ldr	r3, [r5, #8]
   d684c:	60a3      	str	r3, [r4, #8]
    }
   d684e:	4620      	mov	r0, r4
   d6850:	bd38      	pop	{r3, r4, r5, pc}

000d6852 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d6852:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6854:	b570      	push	{r4, r5, r6, lr}
   d6856:	4604      	mov	r4, r0
	  switch (__op)
   d6858:	d007      	beq.n	d686a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d685a:	2a03      	cmp	r2, #3
   d685c:	d012      	beq.n	d6884 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d685e:	2a01      	cmp	r2, #1
   d6860:	d101      	bne.n	d6866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6862:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6864:	6003      	str	r3, [r0, #0]
	}
   d6866:	2000      	movs	r0, #0
   d6868:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d686a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d686c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d686e:	f7fd fc12 	bl	d4096 <_Znwj>
   d6872:	4605      	mov	r5, r0
   d6874:	b120      	cbz	r0, d6880 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6876:	4631      	mov	r1, r6
   d6878:	f7ff ffdc 	bl	d6834 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d687c:	7c33      	ldrb	r3, [r6, #16]
   d687e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6880:	6025      	str	r5, [r4, #0]
	}
   d6882:	e7f0      	b.n	d6866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6884:	6804      	ldr	r4, [r0, #0]
   d6886:	2c00      	cmp	r4, #0
   d6888:	d0ed      	beq.n	d6866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d688a:	4620      	mov	r0, r4
   d688c:	f7ff fdde 	bl	d644c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6890:	2114      	movs	r1, #20
   d6892:	4620      	mov	r0, r4
   d6894:	f001 f93f 	bl	d7b16 <_ZdlPvj>
   d6898:	e7e5      	b.n	d6866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d689c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d689c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d689e:	b089      	sub	sp, #36	; 0x24
   d68a0:	4604      	mov	r4, r0
   d68a2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d68a4:	a801      	add	r0, sp, #4
   d68a6:	4611      	mov	r1, r2
   d68a8:	f7ff fe10 	bl	d64cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d68ac:	b1a4      	cbz	r4, d68d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d68ae:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d68b0:	b11d      	cbz	r5, d68ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d68b2:	4628      	mov	r0, r5
   d68b4:	f001 fe92 	bl	d85dc <strdup>
   d68b8:	4605      	mov	r5, r0
   d68ba:	a801      	add	r0, sp, #4
   d68bc:	a903      	add	r1, sp, #12
        type_(type) {
   d68be:	9503      	str	r5, [sp, #12]
   d68c0:	f8ad 4010 	strh.w	r4, [sp, #16]
   d68c4:	f7ff fe78 	bl	d65b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d68c8:	a803      	add	r0, sp, #12
   d68ca:	f7ff fdd5 	bl	d6478 <_ZN8particle5ErrorD1Ev>
   d68ce:	a802      	add	r0, sp, #8
   d68d0:	f7ff fd42 	bl	d6358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d68d4:	b009      	add	sp, #36	; 0x24
   d68d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d68d8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d68da:	2301      	movs	r3, #1
   d68dc:	e8d5 2f4f 	ldrexb	r2, [r5]
   d68e0:	2a00      	cmp	r2, #0
   d68e2:	d103      	bne.n	d68ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d68e4:	e8c5 3f41 	strexb	r1, r3, [r5]
   d68e8:	2900      	cmp	r1, #0
   d68ea:	d1f7      	bne.n	d68dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d68ec:	d1ef      	bne.n	d68ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d68ee:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d68f0:	f3bf 8f5b 	dmb	ish
   d68f4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d68f6:	1d2b      	adds	r3, r5, #4
   d68f8:	f3bf 8f5b 	dmb	ish
   d68fc:	e853 6f00 	ldrex	r6, [r3]
   d6900:	e843 4200 	strex	r2, r4, [r3]
   d6904:	2a00      	cmp	r2, #0
   d6906:	d1f9      	bne.n	d68fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6908:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d690c:	2e00      	cmp	r6, #0
   d690e:	d0de      	beq.n	d68ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6910:	4620      	mov	r0, r4
   d6912:	f7ff fbed 	bl	d60f0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6916:	4607      	mov	r7, r0
   d6918:	b160      	cbz	r0, d6934 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d691a:	f105 010c 	add.w	r1, r5, #12
   d691e:	4630      	mov	r0, r6
   d6920:	f7ff fe15 	bl	d654e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6924:	4630      	mov	r0, r6
   d6926:	f7ff fd91 	bl	d644c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d692a:	2110      	movs	r1, #16
   d692c:	4630      	mov	r0, r6
   d692e:	f001 f8f2 	bl	d7b16 <_ZdlPvj>
   d6932:	e7cc      	b.n	d68ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6934:	4631      	mov	r1, r6
   d6936:	a803      	add	r0, sp, #12
   d6938:	f7ff ff7c 	bl	d6834 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d693c:	7b2b      	ldrb	r3, [r5, #12]
   d693e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6942:	2010      	movs	r0, #16
   d6944:	f7fd fba7 	bl	d4096 <_Znwj>
   d6948:	4605      	mov	r5, r0
   d694a:	b1d0      	cbz	r0, d6982 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d694c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d694e:	2014      	movs	r0, #20
   d6950:	f7fd fba1 	bl	d4096 <_Znwj>
   d6954:	4604      	mov	r4, r0
   d6956:	b178      	cbz	r0, d6978 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6958:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d695a:	4601      	mov	r1, r0
   d695c:	a803      	add	r0, sp, #12
   d695e:	f7ff fdd4 	bl	d650a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6962:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6964:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6966:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6968:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d696a:	9205      	str	r2, [sp, #20]
   d696c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d696e:	60e3      	str	r3, [r4, #12]
   d6970:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6974:	9206      	str	r2, [sp, #24]
   d6976:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6978:	4b06      	ldr	r3, [pc, #24]	; (d6994 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d697a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d697c:	4b06      	ldr	r3, [pc, #24]	; (d6998 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d697e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6980:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6982:	a803      	add	r0, sp, #12
   d6984:	f7ff fd62 	bl	d644c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6988:	2200      	movs	r2, #0
   d698a:	4629      	mov	r1, r5
   d698c:	4803      	ldr	r0, [pc, #12]	; (d699c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d698e:	f7ff fbb7 	bl	d6100 <application_thread_invoke>
   d6992:	e7c7      	b.n	d6924 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6994:	000d6561 	.word	0x000d6561
   d6998:	000d6853 	.word	0x000d6853
   d699c:	000d62f3 	.word	0x000d62f3

000d69a0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d69a0:	2200      	movs	r2, #0
   d69a2:	6840      	ldr	r0, [r0, #4]
   d69a4:	4611      	mov	r1, r2
   d69a6:	f7ff bc41 	b.w	d622c <network_listening>

000d69aa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d69aa:	2200      	movs	r2, #0
   d69ac:	6840      	ldr	r0, [r0, #4]
   d69ae:	4611      	mov	r1, r2
   d69b0:	f7ff bc4c 	b.w	d624c <network_get_listen_timeout>

000d69b4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d69b4:	6840      	ldr	r0, [r0, #4]
   d69b6:	2200      	movs	r2, #0
   d69b8:	f7ff bc40 	b.w	d623c <network_set_listen_timeout>

000d69bc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d69bc:	6840      	ldr	r0, [r0, #4]
   d69be:	2200      	movs	r2, #0
   d69c0:	f081 0101 	eor.w	r1, r1, #1
   d69c4:	f7ff bc2a 	b.w	d621c <network_listen>

000d69c8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d69c8:	2300      	movs	r3, #0
   d69ca:	6840      	ldr	r0, [r0, #4]
   d69cc:	461a      	mov	r2, r3
   d69ce:	4619      	mov	r1, r3
   d69d0:	f7ff bc1c 	b.w	d620c <network_off>

000d69d4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d69d4:	2300      	movs	r3, #0
   d69d6:	6840      	ldr	r0, [r0, #4]
   d69d8:	461a      	mov	r2, r3
   d69da:	4619      	mov	r1, r3
   d69dc:	f7ff bc0e 	b.w	d61fc <network_on>

000d69e0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d69e0:	2200      	movs	r2, #0
   d69e2:	6840      	ldr	r0, [r0, #4]
   d69e4:	4611      	mov	r1, r2
   d69e6:	f7ff bc01 	b.w	d61ec <network_ready>

000d69ea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d69ea:	2200      	movs	r2, #0
   d69ec:	6840      	ldr	r0, [r0, #4]
   d69ee:	4611      	mov	r1, r2
   d69f0:	f7ff bbec 	b.w	d61cc <network_connecting>

000d69f4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d69f4:	6840      	ldr	r0, [r0, #4]
   d69f6:	2200      	movs	r2, #0
   d69f8:	2102      	movs	r1, #2
   d69fa:	f7ff bbef 	b.w	d61dc <network_disconnect>

000d69fe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d69fe:	2300      	movs	r3, #0
   d6a00:	6840      	ldr	r0, [r0, #4]
   d6a02:	461a      	mov	r2, r3
   d6a04:	f7ff bbda 	b.w	d61bc <network_connect>

000d6a08 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6a08:	4b02      	ldr	r3, [pc, #8]	; (d6a14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6a0a:	2203      	movs	r2, #3
   d6a0c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6a0e:	4a02      	ldr	r2, [pc, #8]	; (d6a18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6a10:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6a12:	4770      	bx	lr
   d6a14:	2003e744 	.word	0x2003e744
   d6a18:	000d8838 	.word	0x000d8838

000d6a1c <_ZN8particle6detail9_getVCellEhh>:

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   d6a1c:	0909      	lsrs	r1, r1, #4
   d6a1e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   d6a22:	ee07 1a90 	vmov	s15, r1
   d6a26:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        return value / 800.0;
    }
   d6a2a:	eddf 7a02 	vldr	s15, [pc, #8]	; d6a34 <_ZN8particle6detail9_getVCellEhh+0x18>
   d6a2e:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d6a32:	4770      	bx	lr
   d6a34:	44480000 	.word	0x44480000

000d6a38 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d6a38:	6800      	ldr	r0, [r0, #0]
   d6a3a:	f000 b916 	b.w	d6c6a <_ZN7TwoWire4lockEv>

000d6a3e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d6a3e:	b510      	push	{r4, lr}
   d6a40:	4604      	mov	r4, r0
      lock_(_lock) {
   d6a42:	6001      	str	r1, [r0, #0]
   d6a44:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d6a46:	b10a      	cbz	r2, d6a4c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d6a48:	f7ff fff6 	bl	d6a38 <_ZN9FuelGauge4lockEv>
}
   d6a4c:	4620      	mov	r0, r4
   d6a4e:	bd10      	pop	{r4, pc}

000d6a50 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d6a50:	b513      	push	{r0, r1, r4, lr}
   d6a52:	4604      	mov	r4, r0
   d6a54:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d6a56:	f001 f831 	bl	d7abc <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d6a5a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d6a5c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d6a5e:	4620      	mov	r0, r4
   d6a60:	f7ff ffed 	bl	d6a3e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d6a64:	4620      	mov	r0, r4
   d6a66:	b002      	add	sp, #8
   d6a68:	bd10      	pop	{r4, pc}

000d6a6a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d6a6a:	6800      	ldr	r0, [r0, #0]
   d6a6c:	f000 b906 	b.w	d6c7c <_ZN7TwoWire6unlockEv>

000d6a70 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d6a70:	b510      	push	{r4, lr}
    if (lock_) {
   d6a72:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d6a74:	4604      	mov	r4, r0
    if (lock_) {
   d6a76:	b10b      	cbz	r3, d6a7c <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d6a78:	f7ff fff7 	bl	d6a6a <_ZN9FuelGauge6unlockEv>
}
   d6a7c:	4620      	mov	r0, r4
   d6a7e:	bd10      	pop	{r4, pc}

000d6a80 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d6a80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6a84:	4604      	mov	r4, r0
   d6a86:	460d      	mov	r5, r1
   d6a88:	4617      	mov	r7, r2
   d6a8a:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d6a8c:	f7ff ffd4 	bl	d6a38 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6a90:	2336      	movs	r3, #54	; 0x36
   d6a92:	f88d 3000 	strb.w	r3, [sp]
   d6a96:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d6a98:	6820      	ldr	r0, [r4, #0]
   d6a9a:	9301      	str	r3, [sp, #4]
   d6a9c:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d6aa0:	230a      	movs	r3, #10
   d6aa2:	4669      	mov	r1, sp
   d6aa4:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6aa6:	f88d 8008 	strb.w	r8, [sp, #8]
   d6aaa:	f000 f8c2 	bl	d6c32 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d6aae:	6820      	ldr	r0, [r4, #0]
   d6ab0:	6803      	ldr	r3, [r0, #0]
   d6ab2:	4629      	mov	r1, r5
   d6ab4:	689b      	ldr	r3, [r3, #8]
   d6ab6:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d6ab8:	6820      	ldr	r0, [r4, #0]
   d6aba:	4641      	mov	r1, r8
   d6abc:	f000 f8d1 	bl	d6c62 <_ZN7TwoWire15endTransmissionEh>
   d6ac0:	4605      	mov	r5, r0
   d6ac2:	b140      	cbz	r0, d6ad6 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d6ac4:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d6ac8:	4620      	mov	r0, r4
   d6aca:	f7ff ffce 	bl	d6a6a <_ZN9FuelGauge6unlockEv>
}
   d6ace:	4628      	mov	r0, r5
   d6ad0:	b004      	add	sp, #16
   d6ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d6ad6:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d6ad8:	6820      	ldr	r0, [r4, #0]
   d6ada:	9301      	str	r3, [sp, #4]
   d6adc:	4669      	mov	r1, sp
   d6ade:	f000 f891 	bl	d6c04 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d6ae2:	2802      	cmp	r0, #2
   d6ae4:	d1ee      	bne.n	d6ac4 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d6ae6:	6820      	ldr	r0, [r4, #0]
   d6ae8:	6803      	ldr	r3, [r0, #0]
   d6aea:	695b      	ldr	r3, [r3, #20]
   d6aec:	4798      	blx	r3
   d6aee:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d6af0:	6820      	ldr	r0, [r4, #0]
   d6af2:	6803      	ldr	r3, [r0, #0]
   d6af4:	695b      	ldr	r3, [r3, #20]
   d6af6:	4798      	blx	r3
   d6af8:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d6afa:	e7e5      	b.n	d6ac8 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d6afc <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   d6afc:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d6afe:	2300      	movs	r3, #0
   d6b00:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d6b04:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d6b08:	f10d 0206 	add.w	r2, sp, #6
   d6b0c:	f10d 0307 	add.w	r3, sp, #7
   d6b10:	2102      	movs	r1, #2
   d6b12:	f7ff ffb5 	bl	d6a80 <_ZN9FuelGauge12readRegisterEhRhS0_>
   d6b16:	b940      	cbnz	r0, d6b2a <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   d6b18:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6b1c:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d6b20:	b003      	add	sp, #12
   d6b22:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   d6b26:	f7ff bf79 	b.w	d6a1c <_ZN8particle6detail9_getVCellEhh>
}
   d6b2a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d6b2e:	b003      	add	sp, #12
   d6b30:	f85d fb04 	ldr.w	pc, [sp], #4

000d6b34 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   d6b34:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d6b36:	2300      	movs	r3, #0
   d6b38:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d6b3c:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d6b40:	f10d 0206 	add.w	r2, sp, #6
   d6b44:	f10d 0307 	add.w	r3, sp, #7
   d6b48:	2104      	movs	r1, #4
   d6b4a:	f7ff ff99 	bl	d6a80 <_ZN9FuelGauge12readRegisterEhRhS0_>
   d6b4e:	b9b0      	cbnz	r0, d6b7e <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   d6b50:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6b54:	f001 f93a 	bl	d7dcc <__aeabi_i2d>
   d6b58:	4b0a      	ldr	r3, [pc, #40]	; (d6b84 <_ZN9FuelGauge6getSoCEv+0x50>)
   d6b5a:	2200      	movs	r2, #0
   d6b5c:	f001 f9a0 	bl	d7ea0 <__aeabi_dmul>
   d6b60:	f001 fc96 	bl	d8490 <__aeabi_d2f>
        return MSB + decimal;
   d6b64:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d6b68:	ee00 3a10 	vmov	s0, r3
   d6b6c:	ee07 0a90 	vmov	s15, r0
   d6b70:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d6b74:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   d6b78:	b003      	add	sp, #12
   d6b7a:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   d6b7e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d6b82:	e7f9      	b.n	d6b78 <_ZN9FuelGauge6getSoCEv+0x44>
   d6b84:	3f700000 	.word	0x3f700000

000d6b88 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6b88:	4770      	bx	lr

000d6b8a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b8c:	4606      	mov	r6, r0
   d6b8e:	4615      	mov	r5, r2
   d6b90:	460c      	mov	r4, r1
   d6b92:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6b94:	42bc      	cmp	r4, r7
   d6b96:	d006      	beq.n	d6ba6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6b98:	6833      	ldr	r3, [r6, #0]
   d6b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6b9e:	689b      	ldr	r3, [r3, #8]
   d6ba0:	4630      	mov	r0, r6
   d6ba2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6ba4:	e7f6      	b.n	d6b94 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6ba6:	4628      	mov	r0, r5
   d6ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6baa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6baa:	7c00      	ldrb	r0, [r0, #16]
   d6bac:	2200      	movs	r2, #0
   d6bae:	f7ff b947 	b.w	d5e40 <hal_i2c_write>

000d6bb2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6bb2:	7c00      	ldrb	r0, [r0, #16]
   d6bb4:	2100      	movs	r1, #0
   d6bb6:	f7ff b94b 	b.w	d5e50 <hal_i2c_available>

000d6bba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6bba:	7c00      	ldrb	r0, [r0, #16]
   d6bbc:	2100      	movs	r1, #0
   d6bbe:	f7ff b94f 	b.w	d5e60 <hal_i2c_read>

000d6bc2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6bc2:	7c00      	ldrb	r0, [r0, #16]
   d6bc4:	2100      	movs	r1, #0
   d6bc6:	f7ff b953 	b.w	d5e70 <hal_i2c_peek>

000d6bca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6bca:	7c00      	ldrb	r0, [r0, #16]
   d6bcc:	2100      	movs	r1, #0
   d6bce:	f7ff b957 	b.w	d5e80 <hal_i2c_flush>

000d6bd2 <_ZN7TwoWireD0Ev>:
   d6bd2:	b510      	push	{r4, lr}
   d6bd4:	2114      	movs	r1, #20
   d6bd6:	4604      	mov	r4, r0
   d6bd8:	f000 ff9d 	bl	d7b16 <_ZdlPvj>
   d6bdc:	4620      	mov	r0, r4
   d6bde:	bd10      	pop	{r4, pc}

000d6be0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6be0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6be6:	4604      	mov	r4, r0
   d6be8:	4608      	mov	r0, r1
   d6bea:	2100      	movs	r1, #0
   d6bec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6bf0:	4b03      	ldr	r3, [pc, #12]	; (d6c00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6bf2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6bf4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6bf6:	4611      	mov	r1, r2
   d6bf8:	f7ff f952 	bl	d5ea0 <hal_i2c_init>
}
   d6bfc:	4620      	mov	r0, r4
   d6bfe:	bd10      	pop	{r4, pc}
   d6c00:	000d8874 	.word	0x000d8874

000d6c04 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6c04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d6c06:	2200      	movs	r2, #0
   d6c08:	2314      	movs	r3, #20
   d6c0a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d6c0e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6c12:	780b      	ldrb	r3, [r1, #0]
   d6c14:	f88d 3008 	strb.w	r3, [sp, #8]
   d6c18:	684b      	ldr	r3, [r1, #4]
   d6c1a:	9303      	str	r3, [sp, #12]
   d6c1c:	68cb      	ldr	r3, [r1, #12]
   d6c1e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6c20:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6c22:	7a0b      	ldrb	r3, [r1, #8]
   d6c24:	9305      	str	r3, [sp, #20]
   d6c26:	a901      	add	r1, sp, #4
   d6c28:	f7ff f952 	bl	d5ed0 <hal_i2c_request_ex>
}
   d6c2c:	b007      	add	sp, #28
   d6c2e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6c32 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d6c32:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d6c34:	2300      	movs	r3, #0
   d6c36:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d6c3a:	684a      	ldr	r2, [r1, #4]
   d6c3c:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d6c3e:	2314      	movs	r3, #20
    };
   d6c40:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d6c42:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d6c46:	780b      	ldrb	r3, [r1, #0]
    };
   d6c48:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6c4a:	7a0a      	ldrb	r2, [r1, #8]
   d6c4c:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d6c4e:	7c00      	ldrb	r0, [r0, #16]
    };
   d6c50:	f88d 3008 	strb.w	r3, [sp, #8]
   d6c54:	aa01      	add	r2, sp, #4
   d6c56:	4619      	mov	r1, r3
   d6c58:	f7ff f8e2 	bl	d5e20 <hal_i2c_begin_transmission>
}
   d6c5c:	b007      	add	sp, #28
   d6c5e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6c62 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6c62:	7c00      	ldrb	r0, [r0, #16]
   d6c64:	2200      	movs	r2, #0
   d6c66:	f7ff b8e3 	b.w	d5e30 <hal_i2c_end_transmission>

000d6c6a <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6c6a:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d6c6c:	2100      	movs	r1, #0
   d6c6e:	7c00      	ldrb	r0, [r0, #16]
   d6c70:	f7ff f91e 	bl	d5eb0 <hal_i2c_lock>
}
   d6c74:	fab0 f080 	clz	r0, r0
   d6c78:	0940      	lsrs	r0, r0, #5
   d6c7a:	bd08      	pop	{r3, pc}

000d6c7c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6c7c:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d6c7e:	2100      	movs	r1, #0
   d6c80:	7c00      	ldrb	r0, [r0, #16]
   d6c82:	f7ff f91d 	bl	d5ec0 <hal_i2c_unlock>
}
   d6c86:	fab0 f080 	clz	r0, r0
   d6c8a:	0940      	lsrs	r0, r0, #5
   d6c8c:	bd08      	pop	{r3, pc}

000d6c8e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6c8e:	4770      	bx	lr

000d6c90 <_ZN9IPAddressD0Ev>:
   d6c90:	b510      	push	{r4, lr}
   d6c92:	2118      	movs	r1, #24
   d6c94:	4604      	mov	r4, r0
   d6c96:	f000 ff3e 	bl	d7b16 <_ZdlPvj>
   d6c9a:	4620      	mov	r0, r4
   d6c9c:	bd10      	pop	{r4, pc}

000d6c9e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6ca0:	7d03      	ldrb	r3, [r0, #20]
   d6ca2:	2b06      	cmp	r3, #6
{
   d6ca4:	b08d      	sub	sp, #52	; 0x34
   d6ca6:	460e      	mov	r6, r1
   d6ca8:	f100 0704 	add.w	r7, r0, #4
   d6cac:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6cb0:	d012      	beq.n	d6cd8 <_ZNK9IPAddress7printToER5Print+0x3a>
   d6cb2:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6cb6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6cba:	220a      	movs	r2, #10
   d6cbc:	4630      	mov	r0, r6
   d6cbe:	f000 f962 	bl	d6f86 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6cc2:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6cc4:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6cc6:	d019      	beq.n	d6cfc <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6cc8:	2c00      	cmp	r4, #0
   d6cca:	d0f4      	beq.n	d6cb6 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6ccc:	212e      	movs	r1, #46	; 0x2e
   d6cce:	4630      	mov	r0, r6
   d6cd0:	f000 f940 	bl	d6f54 <_ZN5Print5printEc>
   d6cd4:	4404      	add	r4, r0
   d6cd6:	e7ee      	b.n	d6cb6 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6cd8:	232f      	movs	r3, #47	; 0x2f
   d6cda:	466a      	mov	r2, sp
   d6cdc:	4639      	mov	r1, r7
   d6cde:	200a      	movs	r0, #10
		buf[0] = 0;
   d6ce0:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6ce4:	f7ff f8fc 	bl	d5ee0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6ce8:	4668      	mov	r0, sp
   d6cea:	f001 fc94 	bl	d8616 <strlen>
   d6cee:	6833      	ldr	r3, [r6, #0]
   d6cf0:	4602      	mov	r2, r0
   d6cf2:	68db      	ldr	r3, [r3, #12]
   d6cf4:	4669      	mov	r1, sp
   d6cf6:	4630      	mov	r0, r6
   d6cf8:	4798      	blx	r3
   d6cfa:	4604      	mov	r4, r0
    }
    return n;
}
   d6cfc:	4620      	mov	r0, r4
   d6cfe:	b00d      	add	sp, #52	; 0x34
   d6d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6d04 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6d04:	b510      	push	{r4, lr}
   d6d06:	4b05      	ldr	r3, [pc, #20]	; (d6d1c <_ZN9IPAddressC1Ev+0x18>)
   d6d08:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6d0a:	2211      	movs	r2, #17
   d6d0c:	f840 3b04 	str.w	r3, [r0], #4
   d6d10:	2100      	movs	r1, #0
   d6d12:	f001 fc37 	bl	d8584 <memset>
}
   d6d16:	4620      	mov	r0, r4
   d6d18:	bd10      	pop	{r4, pc}
   d6d1a:	bf00      	nop
   d6d1c:	000d889c 	.word	0x000d889c

000d6d20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6d20:	4603      	mov	r3, r0
   d6d22:	4a07      	ldr	r2, [pc, #28]	; (d6d40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6d24:	b510      	push	{r4, lr}
   d6d26:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6d2a:	f101 0210 	add.w	r2, r1, #16
   d6d2e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6d32:	f843 4b04 	str.w	r4, [r3], #4
   d6d36:	4291      	cmp	r1, r2
   d6d38:	d1f9      	bne.n	d6d2e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6d3a:	780a      	ldrb	r2, [r1, #0]
   d6d3c:	701a      	strb	r2, [r3, #0]
}
   d6d3e:	bd10      	pop	{r4, pc}
   d6d40:	000d889c 	.word	0x000d889c

000d6d44 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6d44:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6d46:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6d4a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6d4e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6d52:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6d56:	2304      	movs	r3, #4
   d6d58:	6041      	str	r1, [r0, #4]
   d6d5a:	7503      	strb	r3, [r0, #20]
}
   d6d5c:	bd10      	pop	{r4, pc}

000d6d5e <_ZN9IPAddressaSEPKh>:
{
   d6d5e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6d60:	78cb      	ldrb	r3, [r1, #3]
   d6d62:	9300      	str	r3, [sp, #0]
   d6d64:	788b      	ldrb	r3, [r1, #2]
   d6d66:	784a      	ldrb	r2, [r1, #1]
   d6d68:	7809      	ldrb	r1, [r1, #0]
   d6d6a:	f7ff ffeb 	bl	d6d44 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6d6e:	b002      	add	sp, #8
   d6d70:	bd10      	pop	{r4, pc}
	...

000d6d74 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6d74:	4b01      	ldr	r3, [pc, #4]	; (d6d7c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6d76:	4a02      	ldr	r2, [pc, #8]	; (d6d80 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6d78:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6d7a:	4770      	bx	lr
   d6d7c:	2003e74c 	.word	0x2003e74c
   d6d80:	000d88a8 	.word	0x000d88a8

000d6d84 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6d84:	2300      	movs	r3, #0
   d6d86:	6840      	ldr	r0, [r0, #4]
   d6d88:	461a      	mov	r2, r3
   d6d8a:	f7ff ba17 	b.w	d61bc <network_connect>

000d6d8e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6d8e:	6840      	ldr	r0, [r0, #4]
   d6d90:	2200      	movs	r2, #0
   d6d92:	2102      	movs	r1, #2
   d6d94:	f7ff ba22 	b.w	d61dc <network_disconnect>

000d6d98 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6d98:	2200      	movs	r2, #0
   d6d9a:	6840      	ldr	r0, [r0, #4]
   d6d9c:	4611      	mov	r1, r2
   d6d9e:	f7ff ba15 	b.w	d61cc <network_connecting>

000d6da2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6da2:	2200      	movs	r2, #0
   d6da4:	6840      	ldr	r0, [r0, #4]
   d6da6:	4611      	mov	r1, r2
   d6da8:	f7ff ba20 	b.w	d61ec <network_ready>

000d6dac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6dac:	2300      	movs	r3, #0
   d6dae:	6840      	ldr	r0, [r0, #4]
   d6db0:	461a      	mov	r2, r3
   d6db2:	4619      	mov	r1, r3
   d6db4:	f7ff ba22 	b.w	d61fc <network_on>

000d6db8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6db8:	2300      	movs	r3, #0
   d6dba:	6840      	ldr	r0, [r0, #4]
   d6dbc:	461a      	mov	r2, r3
   d6dbe:	4619      	mov	r1, r3
   d6dc0:	f7ff ba24 	b.w	d620c <network_off>

000d6dc4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6dc4:	6840      	ldr	r0, [r0, #4]
   d6dc6:	2100      	movs	r1, #0
   d6dc8:	f7ff ba48 	b.w	d625c <network_is_on>

000d6dcc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6dcc:	6840      	ldr	r0, [r0, #4]
   d6dce:	2100      	movs	r1, #0
   d6dd0:	f7ff ba4c 	b.w	d626c <network_is_off>

000d6dd4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6dd4:	6840      	ldr	r0, [r0, #4]
   d6dd6:	2200      	movs	r2, #0
   d6dd8:	f081 0101 	eor.w	r1, r1, #1
   d6ddc:	f7ff ba1e 	b.w	d621c <network_listen>

000d6de0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6de0:	6840      	ldr	r0, [r0, #4]
   d6de2:	2200      	movs	r2, #0
   d6de4:	f7ff ba2a 	b.w	d623c <network_set_listen_timeout>

000d6de8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6de8:	2200      	movs	r2, #0
   d6dea:	6840      	ldr	r0, [r0, #4]
   d6dec:	4611      	mov	r1, r2
   d6dee:	f7ff ba2d 	b.w	d624c <network_get_listen_timeout>

000d6df2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6df2:	2200      	movs	r2, #0
   d6df4:	6840      	ldr	r0, [r0, #4]
   d6df6:	4611      	mov	r1, r2
   d6df8:	f7ff ba18 	b.w	d622c <network_listening>

000d6dfc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6e00:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6e02:	b095      	sub	sp, #84	; 0x54
   d6e04:	4616      	mov	r6, r2
   d6e06:	460d      	mov	r5, r1
   d6e08:	4607      	mov	r7, r0
    IPAddress addr;
   d6e0a:	f7ff ff7b 	bl	d6d04 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6e0e:	4621      	mov	r1, r4
   d6e10:	2218      	movs	r2, #24
   d6e12:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6e14:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6e16:	f001 fbb5 	bl	d8584 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6e1a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6e1c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6e20:	4621      	mov	r1, r4
   d6e22:	466b      	mov	r3, sp
   d6e24:	aa0c      	add	r2, sp, #48	; 0x30
   d6e26:	4630      	mov	r0, r6
   d6e28:	f7ff f86a 	bl	d5f00 <netdb_getaddrinfo>
    if (!r) {
   d6e2c:	4604      	mov	r4, r0
   d6e2e:	2800      	cmp	r0, #0
   d6e30:	d146      	bne.n	d6ec0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6e32:	4602      	mov	r2, r0
   d6e34:	2101      	movs	r1, #1
   d6e36:	6868      	ldr	r0, [r5, #4]
   d6e38:	f7ff f9d8 	bl	d61ec <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6e3c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6e3e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6e40:	4622      	mov	r2, r4
   d6e42:	6868      	ldr	r0, [r5, #4]
   d6e44:	f7ff f9d2 	bl	d61ec <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6e48:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6e4a:	4681      	mov	r9, r0
        bool ok = false;
   d6e4c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6e4e:	2e00      	cmp	r6, #0
   d6e50:	d036      	beq.n	d6ec0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d6e52:	2900      	cmp	r1, #0
   d6e54:	d134      	bne.n	d6ec0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6e56:	6873      	ldr	r3, [r6, #4]
   d6e58:	2b02      	cmp	r3, #2
   d6e5a:	d003      	beq.n	d6e64 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6e5c:	2b0a      	cmp	r3, #10
   d6e5e:	d00b      	beq.n	d6e78 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6e60:	69f6      	ldr	r6, [r6, #28]
   d6e62:	e7f4      	b.n	d6e4e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6e64:	f1b8 0f00 	cmp.w	r8, #0
   d6e68:	d004      	beq.n	d6e74 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6e6a:	6971      	ldr	r1, [r6, #20]
   d6e6c:	4638      	mov	r0, r7
   d6e6e:	3104      	adds	r1, #4
   d6e70:	f7ff ff75 	bl	d6d5e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d6e74:	4641      	mov	r1, r8
   d6e76:	e7f3      	b.n	d6e60 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6e78:	f1b9 0f00 	cmp.w	r9, #0
   d6e7c:	d101      	bne.n	d6e82 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6e7e:	4649      	mov	r1, r9
   d6e80:	e7ee      	b.n	d6e60 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6e82:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6e84:	2210      	movs	r2, #16
   d6e86:	a801      	add	r0, sp, #4
   d6e88:	f001 fb7c 	bl	d8584 <memset>
                    a.v = 6;
   d6e8c:	2306      	movs	r3, #6
   d6e8e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6e92:	ad01      	add	r5, sp, #4
   d6e94:	f104 0308 	add.w	r3, r4, #8
   d6e98:	3418      	adds	r4, #24
   d6e9a:	6818      	ldr	r0, [r3, #0]
   d6e9c:	6859      	ldr	r1, [r3, #4]
   d6e9e:	462a      	mov	r2, r5
   d6ea0:	c203      	stmia	r2!, {r0, r1}
   d6ea2:	3308      	adds	r3, #8
   d6ea4:	42a3      	cmp	r3, r4
   d6ea6:	4615      	mov	r5, r2
   d6ea8:	d1f7      	bne.n	d6e9a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6eaa:	a901      	add	r1, sp, #4
   d6eac:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6eae:	ad07      	add	r5, sp, #28
   d6eb0:	f7ff ff36 	bl	d6d20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6eb6:	1d3c      	adds	r4, r7, #4
   d6eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6eba:	682b      	ldr	r3, [r5, #0]
   d6ebc:	7023      	strb	r3, [r4, #0]
   d6ebe:	e7de      	b.n	d6e7e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6ec0:	9800      	ldr	r0, [sp, #0]
   d6ec2:	f7ff f815 	bl	d5ef0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6ec6:	4638      	mov	r0, r7
   d6ec8:	b015      	add	sp, #84	; 0x54
   d6eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6ed0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6ed0:	4b02      	ldr	r3, [pc, #8]	; (d6edc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6ed2:	4a03      	ldr	r2, [pc, #12]	; (d6ee0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6ed4:	601a      	str	r2, [r3, #0]
   d6ed6:	2200      	movs	r2, #0
   d6ed8:	605a      	str	r2, [r3, #4]

} // spark
   d6eda:	4770      	bx	lr
   d6edc:	2003e750 	.word	0x2003e750
   d6ee0:	000d88b4 	.word	0x000d88b4

000d6ee4 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d6ee4:	b508      	push	{r3, lr}
            return &Wire1;
   d6ee6:	f000 fde9 	bl	d7abc <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d6eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d6eee:	f7ff bebc 	b.w	d6c6a <_ZN7TwoWire4lockEv>

000d6ef2 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d6ef2:	b510      	push	{r4, lr}
   d6ef4:	4604      	mov	r4, r0
    lock_(_lock)
   d6ef6:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d6ef8:	b109      	cbz	r1, d6efe <_ZN4PMICC1Eb+0xc>
        lock();
   d6efa:	f7ff fff3 	bl	d6ee4 <_ZN4PMIC4lockEv.constprop.0>
}
   d6efe:	4620      	mov	r0, r4
   d6f00:	bd10      	pop	{r4, pc}

000d6f02 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d6f02:	b508      	push	{r3, lr}
            return &Wire1;
   d6f04:	f000 fdda 	bl	d7abc <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d6f08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d6f0c:	f7ff beb6 	b.w	d6c7c <_ZN7TwoWire6unlockEv>

000d6f10 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   d6f10:	b510      	push	{r4, lr}
    if (lock_) {
   d6f12:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   d6f14:	4604      	mov	r4, r0
    if (lock_) {
   d6f16:	b10b      	cbz	r3, d6f1c <_ZN4PMICD1Ev+0xc>
        unlock();
   d6f18:	f7ff fff3 	bl	d6f02 <_ZN4PMIC6unlockEv>
}
   d6f1c:	4620      	mov	r0, r4
   d6f1e:	bd10      	pop	{r4, pc}

000d6f20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f22:	4606      	mov	r6, r0
   d6f24:	460d      	mov	r5, r1
  size_t n = 0;
   d6f26:	188f      	adds	r7, r1, r2
   d6f28:	2400      	movs	r4, #0
  while (size--) {
   d6f2a:	42bd      	cmp	r5, r7
   d6f2c:	d00c      	beq.n	d6f48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6f2e:	6833      	ldr	r3, [r6, #0]
   d6f30:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6f34:	689b      	ldr	r3, [r3, #8]
   d6f36:	4630      	mov	r0, r6
   d6f38:	4798      	blx	r3
     if (chunk>=0)
   d6f3a:	1e03      	subs	r3, r0, #0
   d6f3c:	db01      	blt.n	d6f42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6f3e:	441c      	add	r4, r3
  while (size--) {
   d6f40:	e7f3      	b.n	d6f2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6f42:	2c00      	cmp	r4, #0
   d6f44:	bf08      	it	eq
   d6f46:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6f48:	4620      	mov	r0, r4
   d6f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f4c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d6f4c:	b508      	push	{r3, lr}
  return write(str);
   d6f4e:	f7fe fa83 	bl	d5458 <_ZN5Print5writeEPKc>
}
   d6f52:	bd08      	pop	{r3, pc}

000d6f54 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d6f54:	6803      	ldr	r3, [r0, #0]
   d6f56:	689b      	ldr	r3, [r3, #8]
   d6f58:	4718      	bx	r3

000d6f5a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6f5a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6f5c:	210d      	movs	r1, #13
{
   d6f5e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6f60:	f7ff fff8 	bl	d6f54 <_ZN5Print5printEc>
  n += print('\n');
   d6f64:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6f66:	4604      	mov	r4, r0
  n += print('\n');
   d6f68:	4628      	mov	r0, r5
   d6f6a:	f7ff fff3 	bl	d6f54 <_ZN5Print5printEc>
  return n;
}
   d6f6e:	4420      	add	r0, r4
   d6f70:	bd38      	pop	{r3, r4, r5, pc}

000d6f72 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6f72:	b538      	push	{r3, r4, r5, lr}
   d6f74:	4605      	mov	r5, r0
  return write(str);
   d6f76:	f7fe fa6f 	bl	d5458 <_ZN5Print5writeEPKc>
   d6f7a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6f7c:	4628      	mov	r0, r5
   d6f7e:	f7ff ffec 	bl	d6f5a <_ZN5Print7printlnEv>
  return n;
}
   d6f82:	4420      	add	r0, r4
   d6f84:	bd38      	pop	{r3, r4, r5, pc}

000d6f86 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6f86:	b530      	push	{r4, r5, lr}
   d6f88:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6f8a:	2300      	movs	r3, #0
   d6f8c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6f90:	2a01      	cmp	r2, #1
   d6f92:	bf98      	it	ls
   d6f94:	220a      	movls	r2, #10
   d6f96:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6f98:	460d      	mov	r5, r1
   d6f9a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6f9e:	fb01 5312 	mls	r3, r1, r2, r5
   d6fa2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6fa6:	2b09      	cmp	r3, #9
   d6fa8:	bf94      	ite	ls
   d6faa:	3330      	addls	r3, #48	; 0x30
   d6fac:	3337      	addhi	r3, #55	; 0x37
   d6fae:	b2db      	uxtb	r3, r3
  } while(n);
   d6fb0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6fb2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6fb6:	d9ef      	bls.n	d6f98 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6fb8:	4621      	mov	r1, r4
   d6fba:	f7fe fa4d 	bl	d5458 <_ZN5Print5writeEPKc>
}
   d6fbe:	b00b      	add	sp, #44	; 0x2c
   d6fc0:	bd30      	pop	{r4, r5, pc}
	...

000d6fc4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6fc8:	ec55 4b10 	vmov	r4, r5, d0
   d6fcc:	4606      	mov	r6, r0
   d6fce:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6fd0:	ee10 2a10 	vmov	r2, s0
   d6fd4:	ee10 0a10 	vmov	r0, s0
   d6fd8:	462b      	mov	r3, r5
   d6fda:	4629      	mov	r1, r5
   d6fdc:	f001 f9fa 	bl	d83d4 <__aeabi_dcmpun>
   d6fe0:	b140      	cbz	r0, d6ff4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d6fe2:	4953      	ldr	r1, [pc, #332]	; (d7130 <_ZN5Print10printFloatEdh+0x16c>)
   d6fe4:	4630      	mov	r0, r6
   d6fe6:	f7fe fa37 	bl	d5458 <_ZN5Print5writeEPKc>
   d6fea:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d6fec:	4650      	mov	r0, sl
   d6fee:	b003      	add	sp, #12
   d6ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d6ff4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d6ff8:	4b4e      	ldr	r3, [pc, #312]	; (d7134 <_ZN5Print10printFloatEdh+0x170>)
   d6ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6ffe:	4620      	mov	r0, r4
   d7000:	4649      	mov	r1, r9
   d7002:	f001 f9e7 	bl	d83d4 <__aeabi_dcmpun>
   d7006:	b948      	cbnz	r0, d701c <_ZN5Print10printFloatEdh+0x58>
   d7008:	4b4a      	ldr	r3, [pc, #296]	; (d7134 <_ZN5Print10printFloatEdh+0x170>)
   d700a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d700e:	4620      	mov	r0, r4
   d7010:	4649      	mov	r1, r9
   d7012:	f001 f9c1 	bl	d8398 <__aeabi_dcmple>
   d7016:	b908      	cbnz	r0, d701c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d7018:	4947      	ldr	r1, [pc, #284]	; (d7138 <_ZN5Print10printFloatEdh+0x174>)
   d701a:	e7e3      	b.n	d6fe4 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d701c:	4b47      	ldr	r3, [pc, #284]	; (d713c <_ZN5Print10printFloatEdh+0x178>)
   d701e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7022:	4620      	mov	r0, r4
   d7024:	4629      	mov	r1, r5
   d7026:	f001 f9cb 	bl	d83c0 <__aeabi_dcmpgt>
   d702a:	b108      	cbz	r0, d7030 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d702c:	4944      	ldr	r1, [pc, #272]	; (d7140 <_ZN5Print10printFloatEdh+0x17c>)
   d702e:	e7d9      	b.n	d6fe4 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d7030:	4b44      	ldr	r3, [pc, #272]	; (d7144 <_ZN5Print10printFloatEdh+0x180>)
   d7032:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7036:	4620      	mov	r0, r4
   d7038:	4629      	mov	r1, r5
   d703a:	f001 f9a3 	bl	d8384 <__aeabi_dcmplt>
   d703e:	2800      	cmp	r0, #0
   d7040:	d1f4      	bne.n	d702c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d7042:	2200      	movs	r2, #0
   d7044:	2300      	movs	r3, #0
   d7046:	4620      	mov	r0, r4
   d7048:	4629      	mov	r1, r5
   d704a:	f001 f99b 	bl	d8384 <__aeabi_dcmplt>
   d704e:	b1d0      	cbz	r0, d7086 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d7050:	212d      	movs	r1, #45	; 0x2d
   d7052:	4630      	mov	r0, r6
   d7054:	f7ff ff7e 	bl	d6f54 <_ZN5Print5printEc>
     number = -number;
   d7058:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d705c:	4682      	mov	sl, r0
     number = -number;
   d705e:	461d      	mov	r5, r3
  double rounding = 0.5;
   d7060:	4939      	ldr	r1, [pc, #228]	; (d7148 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d7062:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d7150 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d7066:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d706a:	2000      	movs	r0, #0
    rounding /= 10.0;
   d706c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d7070:	fa5f f38b 	uxtb.w	r3, fp
   d7074:	429f      	cmp	r7, r3
   d7076:	d908      	bls.n	d708a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d7078:	4642      	mov	r2, r8
   d707a:	464b      	mov	r3, r9
   d707c:	f001 f83a 	bl	d80f4 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d7080:	f10b 0b01 	add.w	fp, fp, #1
   d7084:	e7f4      	b.n	d7070 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d7086:	4682      	mov	sl, r0
   d7088:	e7ea      	b.n	d7060 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d708a:	4622      	mov	r2, r4
   d708c:	462b      	mov	r3, r5
   d708e:	f000 fd51 	bl	d7b34 <__adddf3>
   d7092:	460d      	mov	r5, r1
   d7094:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d7096:	f001 f9db 	bl	d8450 <__aeabi_d2uiz>
   d709a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d709c:	f000 fe86 	bl	d7dac <__aeabi_ui2d>
   d70a0:	4602      	mov	r2, r0
   d70a2:	460b      	mov	r3, r1
   d70a4:	4620      	mov	r0, r4
   d70a6:	4629      	mov	r1, r5
   d70a8:	f000 fd42 	bl	d7b30 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d70ac:	220a      	movs	r2, #10
   d70ae:	4604      	mov	r4, r0
   d70b0:	460d      	mov	r5, r1
   d70b2:	4630      	mov	r0, r6
   d70b4:	4641      	mov	r1, r8
   d70b6:	f7ff ff66 	bl	d6f86 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d70ba:	4482      	add	sl, r0
  if (digits > 0) {
   d70bc:	b127      	cbz	r7, d70c8 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d70be:	4923      	ldr	r1, [pc, #140]	; (d714c <_ZN5Print10printFloatEdh+0x188>)
   d70c0:	4630      	mov	r0, r6
   d70c2:	f7fe f9c9 	bl	d5458 <_ZN5Print5writeEPKc>
    n += print(".");
   d70c6:	4482      	add	sl, r0
    remainder *= 10.0;
   d70c8:	f8df 9084 	ldr.w	r9, [pc, #132]	; d7150 <_ZN5Print10printFloatEdh+0x18c>
   d70cc:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d70d0:	3f01      	subs	r7, #1
   d70d2:	b2ff      	uxtb	r7, r7
   d70d4:	2fff      	cmp	r7, #255	; 0xff
   d70d6:	d089      	beq.n	d6fec <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d70d8:	4642      	mov	r2, r8
   d70da:	464b      	mov	r3, r9
   d70dc:	4620      	mov	r0, r4
   d70de:	4629      	mov	r1, r5
   d70e0:	f000 fede 	bl	d7ea0 <__aeabi_dmul>
   d70e4:	4604      	mov	r4, r0
   d70e6:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d70e8:	f001 f98a 	bl	d8400 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d70ec:	f1b0 0b00 	subs.w	fp, r0, #0
   d70f0:	da1a      	bge.n	d7128 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d70f2:	212d      	movs	r1, #45	; 0x2d
   d70f4:	4630      	mov	r0, r6
   d70f6:	f7ff ff2d 	bl	d6f54 <_ZN5Print5printEc>
            val = -n;
   d70fa:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d70fe:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d7100:	220a      	movs	r2, #10
   d7102:	4630      	mov	r0, r6
   d7104:	9301      	str	r3, [sp, #4]
   d7106:	f7ff ff3e 	bl	d6f86 <_ZN5Print11printNumberEmh>
   d710a:	9b01      	ldr	r3, [sp, #4]
   d710c:	4418      	add	r0, r3
    n += print(toPrint);
   d710e:	4482      	add	sl, r0
    remainder -= toPrint;
   d7110:	4658      	mov	r0, fp
   d7112:	f000 fe5b 	bl	d7dcc <__aeabi_i2d>
   d7116:	4602      	mov	r2, r0
   d7118:	460b      	mov	r3, r1
   d711a:	4620      	mov	r0, r4
   d711c:	4629      	mov	r1, r5
   d711e:	f000 fd07 	bl	d7b30 <__aeabi_dsub>
   d7122:	4604      	mov	r4, r0
   d7124:	460d      	mov	r5, r1
  while (digits-- > 0)
   d7126:	e7d3      	b.n	d70d0 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d7128:	4659      	mov	r1, fp
        size_t t = 0;
   d712a:	2300      	movs	r3, #0
   d712c:	e7e8      	b.n	d7100 <_ZN5Print10printFloatEdh+0x13c>
   d712e:	bf00      	nop
   d7130:	000d88e8 	.word	0x000d88e8
   d7134:	7fefffff 	.word	0x7fefffff
   d7138:	000d88ec 	.word	0x000d88ec
   d713c:	41efffff 	.word	0x41efffff
   d7140:	000d88f0 	.word	0x000d88f0
   d7144:	c1efffff 	.word	0xc1efffff
   d7148:	3fe00000 	.word	0x3fe00000
   d714c:	000d8928 	.word	0x000d8928
   d7150:	40240000 	.word	0x40240000

000d7154 <_ZN5Print5printEfi>:
{
   d7154:	b538      	push	{r3, r4, r5, lr}
   d7156:	4604      	mov	r4, r0
   d7158:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d715c:	b2cd      	uxtb	r5, r1
   d715e:	f000 fe47 	bl	d7df0 <__aeabi_f2d>
   d7162:	ec41 0b10 	vmov	d0, r0, r1
   d7166:	4629      	mov	r1, r5
   d7168:	4620      	mov	r0, r4
}
   d716a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d716e:	f7ff bf29 	b.w	d6fc4 <_ZN5Print10printFloatEdh>

000d7172 <_ZN5Print7printlnEdi>:
{
   d7172:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d7174:	b2c9      	uxtb	r1, r1
{
   d7176:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d7178:	f7ff ff24 	bl	d6fc4 <_ZN5Print10printFloatEdh>
   d717c:	4604      	mov	r4, r0
  n += println();
   d717e:	4628      	mov	r0, r5
   d7180:	f7ff feeb 	bl	d6f5a <_ZN5Print7printlnEv>
}
   d7184:	4420      	add	r0, r4
   d7186:	bd38      	pop	{r3, r4, r5, pc}

000d7188 <_ZN5Print7printlnEfi>:
{
   d7188:	b538      	push	{r3, r4, r5, lr}
   d718a:	4604      	mov	r4, r0
   d718c:	ee10 0a10 	vmov	r0, s0
   d7190:	460d      	mov	r5, r1
    return println((double)num, digits);
   d7192:	f000 fe2d 	bl	d7df0 <__aeabi_f2d>
   d7196:	ec41 0b10 	vmov	d0, r0, r1
   d719a:	4629      	mov	r1, r5
   d719c:	4620      	mov	r0, r4
}
   d719e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d71a2:	f7ff bfe6 	b.w	d7172 <_ZN5Print7printlnEdi>

000d71a6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d71a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d71aa:	b086      	sub	sp, #24
   d71ac:	af00      	add	r7, sp, #0
   d71ae:	4605      	mov	r5, r0
   d71b0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d71b2:	1d38      	adds	r0, r7, #4
   d71b4:	2114      	movs	r1, #20
{
   d71b6:	4614      	mov	r4, r2
    va_copy(args2, args);
   d71b8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d71ba:	f7ff f877 	bl	d62ac <vsnprintf>

    if (n<bufsize)
   d71be:	2813      	cmp	r0, #19
   d71c0:	d80e      	bhi.n	d71e0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d71c2:	1d39      	adds	r1, r7, #4
   d71c4:	4628      	mov	r0, r5
   d71c6:	f7fe f947 	bl	d5458 <_ZN5Print5writeEPKc>
   d71ca:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d71cc:	b11e      	cbz	r6, d71d6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d71ce:	4628      	mov	r0, r5
   d71d0:	f7ff fec3 	bl	d6f5a <_ZN5Print7printlnEv>
   d71d4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d71d6:	4620      	mov	r0, r4
   d71d8:	3718      	adds	r7, #24
   d71da:	46bd      	mov	sp, r7
   d71dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d71e0:	f100 0308 	add.w	r3, r0, #8
   d71e4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d71e8:	46e8      	mov	r8, sp
        char bigger[n+1];
   d71ea:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d71ee:	4622      	mov	r2, r4
   d71f0:	1c41      	adds	r1, r0, #1
   d71f2:	683b      	ldr	r3, [r7, #0]
   d71f4:	4668      	mov	r0, sp
   d71f6:	f7ff f859 	bl	d62ac <vsnprintf>
  return write(str);
   d71fa:	4669      	mov	r1, sp
   d71fc:	4628      	mov	r0, r5
   d71fe:	f7fe f92b 	bl	d5458 <_ZN5Print5writeEPKc>
   d7202:	4604      	mov	r4, r0
   d7204:	46c5      	mov	sp, r8
   d7206:	e7e1      	b.n	d71cc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7208 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7208:	b510      	push	{r4, lr}
   d720a:	4604      	mov	r4, r0
   d720c:	f7ff f91e 	bl	d644c <_ZNSt14_Function_baseD1Ev>
   d7210:	4620      	mov	r0, r4
   d7212:	bd10      	pop	{r4, pc}

000d7214 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7214:	4803      	ldr	r0, [pc, #12]	; (d7224 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7216:	4a04      	ldr	r2, [pc, #16]	; (d7228 <_GLOBAL__sub_I_RGB+0x14>)
   d7218:	4904      	ldr	r1, [pc, #16]	; (d722c <_GLOBAL__sub_I_RGB+0x18>)
   d721a:	2300      	movs	r3, #0
   d721c:	6083      	str	r3, [r0, #8]
   d721e:	f000 bc75 	b.w	d7b0c <__aeabi_atexit>
   d7222:	bf00      	nop
   d7224:	2003e758 	.word	0x2003e758
   d7228:	2003e220 	.word	0x2003e220
   d722c:	000d7209 	.word	0x000d7209

000d7230 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d7230:	2100      	movs	r1, #0
   d7232:	f7fe bead 	b.w	d5f90 <hal_spi_acquire>

000d7236 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d7236:	2100      	movs	r1, #0
   d7238:	f7fe beb2 	b.w	d5fa0 <hal_spi_release>

000d723c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d723c:	b510      	push	{r4, lr}
   d723e:	4604      	mov	r4, r0
   d7240:	4608      	mov	r0, r1
{
    _spi = spi;
   d7242:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7244:	f7fe fe74 	bl	d5f30 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7248:	2300      	movs	r3, #0
   d724a:	6063      	str	r3, [r4, #4]
}
   d724c:	4620      	mov	r0, r4
   d724e:	bd10      	pop	{r4, pc}

000d7250 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7250:	b510      	push	{r4, lr}
   d7252:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7254:	7800      	ldrb	r0, [r0, #0]
   d7256:	f7ff ffeb 	bl	d7230 <_ZN8SPIClass4lockEv.isra.0>
   d725a:	b948      	cbnz	r0, d7270 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d725c:	7820      	ldrb	r0, [r4, #0]
   d725e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7262:	f7fe fe55 	bl	d5f10 <hal_spi_begin>
        unlock();
   d7266:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d726c:	f7ff bfe3 	b.w	d7236 <_ZN8SPIClass6unlockEv.isra.0>
}
   d7270:	bd10      	pop	{r4, pc}

000d7272 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d7272:	7800      	ldrb	r0, [r0, #0]
   d7274:	f7ff bfdf 	b.w	d7236 <_ZN8SPIClass6unlockEv.isra.0>

000d7278 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7278:	0840      	lsrs	r0, r0, #1
{
   d727a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d727c:	6018      	str	r0, [r3, #0]
   d727e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d7280:	6818      	ldr	r0, [r3, #0]
   d7282:	4288      	cmp	r0, r1
   d7284:	b2e5      	uxtb	r5, r4
   d7286:	d906      	bls.n	d7296 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7288:	3401      	adds	r4, #1
   d728a:	2c08      	cmp	r4, #8
   d728c:	d002      	beq.n	d7294 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d728e:	0840      	lsrs	r0, r0, #1
   d7290:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d7292:	e7f5      	b.n	d7280 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7294:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d7296:	4b02      	ldr	r3, [pc, #8]	; (d72a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7298:	5d5b      	ldrb	r3, [r3, r5]
   d729a:	7013      	strb	r3, [r2, #0]
}
   d729c:	bd30      	pop	{r4, r5, pc}
   d729e:	bf00      	nop
   d72a0:	000d88f4 	.word	0x000d88f4

000d72a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d72a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d72a8:	4606      	mov	r6, r0
   d72aa:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d72ac:	7800      	ldrb	r0, [r0, #0]
{
   d72ae:	460c      	mov	r4, r1
    CHECK(lock());
   d72b0:	f7ff ffbe 	bl	d7230 <_ZN8SPIClass4lockEv.isra.0>
   d72b4:	2800      	cmp	r0, #0
   d72b6:	db1b      	blt.n	d72f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d72b8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d72ba:	2214      	movs	r2, #20
   d72bc:	2100      	movs	r1, #0
   d72be:	a809      	add	r0, sp, #36	; 0x24
   d72c0:	f001 f960 	bl	d8584 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d72c4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d72c6:	2200      	movs	r2, #0
   d72c8:	a909      	add	r1, sp, #36	; 0x24
   d72ca:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d72cc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d72d0:	f7fe fe3e 	bl	d5f50 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d72d4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d72d8:	b113      	cbz	r3, d72e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d72da:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d72de:	b155      	cbz	r5, d72f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d72e0:	2700      	movs	r7, #0
   d72e2:	46b9      	mov	r9, r7
   d72e4:	46b8      	mov	r8, r7
   d72e6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d72e8:	7923      	ldrb	r3, [r4, #4]
   d72ea:	b15d      	cbz	r5, d7304 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d72ec:	b1c3      	cbz	r3, d7320 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d72ee:	2000      	movs	r0, #0
}
   d72f0:	b00f      	add	sp, #60	; 0x3c
   d72f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d72f6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d72fa:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d72fe:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d7302:	e7f1      	b.n	d72e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d7304:	2b00      	cmp	r3, #0
   d7306:	d135      	bne.n	d7374 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d7308:	68a3      	ldr	r3, [r4, #8]
   d730a:	4543      	cmp	r3, r8
   d730c:	d108      	bne.n	d7320 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d730e:	f88d 9020 	strb.w	r9, [sp, #32]
   d7312:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d7316:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d731a:	89a3      	ldrh	r3, [r4, #12]
   d731c:	429a      	cmp	r2, r3
   d731e:	d0e6      	beq.n	d72ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d7320:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7322:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d7324:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7328:	980a      	ldr	r0, [sp, #40]	; 0x28
   d732a:	ab04      	add	r3, sp, #16
   d732c:	f10d 020f 	add.w	r2, sp, #15
   d7330:	f7ff ffa2 	bl	d7278 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d7334:	7921      	ldrb	r1, [r4, #4]
   d7336:	b985      	cbnz	r5, d735a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d7338:	b989      	cbnz	r1, d735e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d733a:	68a3      	ldr	r3, [r4, #8]
   d733c:	4543      	cmp	r3, r8
   d733e:	d30e      	bcc.n	d735e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d7340:	f88d 9020 	strb.w	r9, [sp, #32]
   d7344:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d7348:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d734c:	89a3      	ldrh	r3, [r4, #12]
   d734e:	429a      	cmp	r2, r3
   d7350:	d105      	bne.n	d735e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d7352:	9b04      	ldr	r3, [sp, #16]
   d7354:	4543      	cmp	r3, r8
   d7356:	d102      	bne.n	d735e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d7358:	e7c9      	b.n	d72ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d735a:	2900      	cmp	r1, #0
   d735c:	d1f9      	bne.n	d7352 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d735e:	2300      	movs	r3, #0
   d7360:	9301      	str	r3, [sp, #4]
   d7362:	7b63      	ldrb	r3, [r4, #13]
   d7364:	9300      	str	r3, [sp, #0]
   d7366:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d736a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d736c:	7830      	ldrb	r0, [r6, #0]
   d736e:	f7fe fe07 	bl	d5f80 <hal_spi_set_settings>
   d7372:	e7bc      	b.n	d72ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d7374:	e9cd 5500 	strd	r5, r5, [sp]
   d7378:	462b      	mov	r3, r5
   d737a:	462a      	mov	r2, r5
   d737c:	2101      	movs	r1, #1
   d737e:	e7f5      	b.n	d736c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d7380 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7380:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d7382:	7800      	ldrb	r0, [r0, #0]
   d7384:	f7fe fdcc 	bl	d5f20 <hal_spi_transfer>
}
   d7388:	b2c0      	uxtb	r0, r0
   d738a:	bd08      	pop	{r3, pc}

000d738c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d738c:	b530      	push	{r4, r5, lr}
   d738e:	b087      	sub	sp, #28
   d7390:	4604      	mov	r4, r0
   d7392:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7394:	9500      	str	r5, [sp, #0]
   d7396:	7800      	ldrb	r0, [r0, #0]
   d7398:	f7fe fde2 	bl	d5f60 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d739c:	b93d      	cbnz	r5, d73ae <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d739e:	7820      	ldrb	r0, [r4, #0]
   d73a0:	a902      	add	r1, sp, #8
   d73a2:	f7fe fde5 	bl	d5f70 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d73a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d73aa:	07db      	lsls	r3, r3, #31
   d73ac:	d4f7      	bmi.n	d739e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d73ae:	b007      	add	sp, #28
   d73b0:	bd30      	pop	{r4, r5, pc}

000d73b2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d73b2:	b510      	push	{r4, lr}
   d73b4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d73b6:	6800      	ldr	r0, [r0, #0]
   d73b8:	b118      	cbz	r0, d73c2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d73ba:	f7fe ff67 	bl	d628c <free>
            wakeupSource_ = nullptr;
   d73be:	2300      	movs	r3, #0
   d73c0:	6023      	str	r3, [r4, #0]
        }
    }
   d73c2:	bd10      	pop	{r4, pc}

000d73c4 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d73c4:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d73c6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d73ca:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d73cc:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d73ce:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d73d0:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d73d4:	f8c0 2006 	str.w	r2, [r0, #6]
   d73d8:	889b      	ldrh	r3, [r3, #4]
   d73da:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d73dc:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d73de:	f7ff ffe8 	bl	d73b2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d73e2:	682b      	ldr	r3, [r5, #0]
   d73e4:	b113      	cbz	r3, d73ec <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d73e6:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d73e8:	2300      	movs	r3, #0
   d73ea:	602b      	str	r3, [r5, #0]
    }
   d73ec:	4620      	mov	r0, r4
   d73ee:	bd38      	pop	{r3, r4, r5, pc}

000d73f0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d73f0:	b538      	push	{r3, r4, r5, lr}
   d73f2:	460c      	mov	r4, r1
   d73f4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d73f6:	f7ff ffdc 	bl	d73b2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d73fa:	b144      	cbz	r4, d740e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d73fc:	8820      	ldrh	r0, [r4, #0]
   d73fe:	f7fe ff3d 	bl	d627c <malloc>
   d7402:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d7404:	b128      	cbz	r0, d7412 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d7406:	8822      	ldrh	r2, [r4, #0]
   d7408:	4621      	mov	r1, r4
   d740a:	f001 f8ad 	bl	d8568 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d740e:	2000      	movs	r0, #0
    }
   d7410:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d7412:	4801      	ldr	r0, [pc, #4]	; (d7418 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d7414:	e7fc      	b.n	d7410 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d7416:	bf00      	nop
   d7418:	fffffefc 	.word	0xfffffefc

000d741c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d741c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d741e:	4d2d      	ldr	r5, [pc, #180]	; (d74d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d7420:	7d0b      	ldrb	r3, [r1, #20]
   d7422:	4604      	mov	r4, r0
   d7424:	b08b      	sub	sp, #44	; 0x2c
   d7426:	4608      	mov	r0, r1
   d7428:	1daf      	adds	r7, r5, #6
   d742a:	2b00      	cmp	r3, #0
   d742c:	d038      	beq.n	d74a0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d742e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d7430:	791b      	ldrb	r3, [r3, #4]
   d7432:	2b00      	cmp	r3, #0
   d7434:	d034      	beq.n	d74a0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d7436:	2200      	movs	r2, #0
    SleepResult() {}
   d7438:	4b27      	ldr	r3, [pc, #156]	; (d74d8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d743a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d743c:	a902      	add	r1, sp, #8
   d743e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d7440:	9202      	str	r2, [sp, #8]
   d7442:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d7446:	f88d 200e 	strb.w	r2, [sp, #14]
   d744a:	f7fe fe7d 	bl	d6148 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d744e:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d7452:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d7456:	b200      	sxth	r0, r0
   d7458:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d745c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d7460:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d7462:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d7464:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d7466:	4628      	mov	r0, r5
   d7468:	f7ff ffc2 	bl	d73f0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d746c:	a802      	add	r0, sp, #8
   d746e:	f7ff ffa0 	bl	d73b2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d7472:	2300      	movs	r3, #0
   d7474:	6023      	str	r3, [r4, #0]
   d7476:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d7478:	71a3      	strb	r3, [r4, #6]
   d747a:	8123      	strh	r3, [r4, #8]
   d747c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7480:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d7482:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d7486:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d7488:	683b      	ldr	r3, [r7, #0]
   d748a:	f8c4 3006 	str.w	r3, [r4, #6]
   d748e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d7490:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d7492:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d7494:	4620      	mov	r0, r4
   d7496:	f7ff ffab 	bl	d73f0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d749a:	4620      	mov	r0, r4
   d749c:	b00b      	add	sp, #44	; 0x2c
   d749e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d74a0:	2600      	movs	r6, #0
   d74a2:	2320      	movs	r3, #32
   d74a4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d74a8:	4b0c      	ldr	r3, [pc, #48]	; (d74dc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d74aa:	9300      	str	r3, [sp, #0]
   d74ac:	490c      	ldr	r1, [pc, #48]	; (d74e0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d74ae:	4633      	mov	r3, r6
   d74b0:	aa02      	add	r2, sp, #8
   d74b2:	2032      	movs	r0, #50	; 0x32
   d74b4:	f7fe fdf4 	bl	d60a0 <log_message>
    SleepResult() {}
   d74b8:	4b07      	ldr	r3, [pc, #28]	; (d74d8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d74ba:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d74bc:	a902      	add	r1, sp, #8
        error_ = error;
   d74be:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d74c2:	4804      	ldr	r0, [pc, #16]	; (d74d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d74c4:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d74c6:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d74ca:	f8ad 300c 	strh.w	r3, [sp, #12]
   d74ce:	f7ff ff79 	bl	d73c4 <_ZN17SystemSleepResultaSEOS_>
   d74d2:	e7cb      	b.n	d746c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d74d4:	2003e768 	.word	0x2003e768
   d74d8:	ffff0000 	.word	0xffff0000
   d74dc:	000d8903 	.word	0x000d8903
   d74e0:	000d88fc 	.word	0x000d88fc

000d74e4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d74e4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d74e6:	4b09      	ldr	r3, [pc, #36]	; (d750c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d74e8:	4c09      	ldr	r4, [pc, #36]	; (d7510 <_GLOBAL__sub_I_System+0x2c>)
   d74ea:	2202      	movs	r2, #2
   d74ec:	2000      	movs	r0, #0
   d74ee:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d74f0:	4b08      	ldr	r3, [pc, #32]	; (d7514 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d74f2:	6020      	str	r0, [r4, #0]
   d74f4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d74f6:	71a0      	strb	r0, [r4, #6]
   d74f8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d74fa:	f7fe fde1 	bl	d60c0 <set_system_mode>
SystemClass System;
   d74fe:	4620      	mov	r0, r4
   d7500:	4a05      	ldr	r2, [pc, #20]	; (d7518 <_GLOBAL__sub_I_System+0x34>)
   d7502:	4906      	ldr	r1, [pc, #24]	; (d751c <_GLOBAL__sub_I_System+0x38>)
   d7504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7508:	f000 bb00 	b.w	d7b0c <__aeabi_atexit>
   d750c:	2003e774 	.word	0x2003e774
   d7510:	2003e768 	.word	0x2003e768
   d7514:	ffff0000 	.word	0xffff0000
   d7518:	2003e220 	.word	0x2003e220
   d751c:	000d4151 	.word	0x000d4151

000d7520 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d7520:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7522:	2000      	movs	r0, #0
   d7524:	f7fe fe3a 	bl	d619c <spark_sync_time_pending>
   d7528:	b128      	cbz	r0, d7536 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d752a:	f7fe fe27 	bl	d617c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d752e:	f080 0001 	eor.w	r0, r0, #1
   d7532:	b2c0      	uxtb	r0, r0
    }
   d7534:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7536:	2001      	movs	r0, #1
   d7538:	e7fc      	b.n	d7534 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d753a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d753a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d753c:	2000      	movs	r0, #0
   d753e:	f7fe fc37 	bl	d5db0 <hal_rtc_time_is_valid>
    if (rtcstate)
   d7542:	4604      	mov	r4, r0
   d7544:	b9a0      	cbnz	r0, d7570 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7546:	f7fe fdb3 	bl	d60b0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d754a:	2801      	cmp	r0, #1
   d754c:	d110      	bne.n	d7570 <_ZN9TimeClass7isValidEv+0x36>
   d754e:	4620      	mov	r0, r4
   d7550:	f7fe fdde 	bl	d6110 <system_thread_get_state>
   d7554:	b960      	cbnz	r0, d7570 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d7556:	f7ff ffe3 	bl	d7520 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d755a:	b910      	cbnz	r0, d7562 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d755c:	f7fe fdfe 	bl	d615c <spark_process>
        while (_while() && !_condition()) {
   d7560:	e7f9      	b.n	d7556 <_ZN9TimeClass7isValidEv+0x1c>
   d7562:	f7ff ffdd 	bl	d7520 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d7566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d756a:	2000      	movs	r0, #0
   d756c:	f7fe bc20 	b.w	d5db0 <hal_rtc_time_is_valid>
}
   d7570:	4620      	mov	r0, r4
   d7572:	bd10      	pop	{r4, pc}

000d7574 <_ZN9TimeClass3nowEv>:
{
   d7574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d7576:	f7ff ffe0 	bl	d753a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d757a:	2210      	movs	r2, #16
   d757c:	2100      	movs	r1, #0
   d757e:	4668      	mov	r0, sp
   d7580:	f001 f800 	bl	d8584 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d7584:	2100      	movs	r1, #0
   d7586:	4668      	mov	r0, sp
   d7588:	f7fe fc1a 	bl	d5dc0 <hal_rtc_get_time>
}
   d758c:	9800      	ldr	r0, [sp, #0]
   d758e:	b005      	add	sp, #20
   d7590:	f85d fb04 	ldr.w	pc, [sp], #4

000d7594 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7594:	4b02      	ldr	r3, [pc, #8]	; (d75a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7596:	681a      	ldr	r2, [r3, #0]
   d7598:	4b02      	ldr	r3, [pc, #8]	; (d75a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d759a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d759c:	4770      	bx	lr
   d759e:	bf00      	nop
   d75a0:	2003e1b8 	.word	0x2003e1b8
   d75a4:	2003e778 	.word	0x2003e778

000d75a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d75a8:	4770      	bx	lr

000d75aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d75aa:	7441      	strb	r1, [r0, #17]
}
   d75ac:	4770      	bx	lr

000d75ae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d75ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d75b0:	7c00      	ldrb	r0, [r0, #16]
   d75b2:	f7fe fd35 	bl	d6020 <hal_usart_available_data_for_write>
}
   d75b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d75ba:	bd08      	pop	{r3, pc}

000d75bc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d75bc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d75be:	7c00      	ldrb	r0, [r0, #16]
   d75c0:	f7fe fd06 	bl	d5fd0 <hal_usart_available>
}
   d75c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d75c8:	bd08      	pop	{r3, pc}

000d75ca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d75ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d75cc:	7c00      	ldrb	r0, [r0, #16]
   d75ce:	f7fe fd0f 	bl	d5ff0 <hal_usart_peek>
}
   d75d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d75d6:	bd08      	pop	{r3, pc}

000d75d8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d75d8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d75da:	7c00      	ldrb	r0, [r0, #16]
   d75dc:	f7fe fd00 	bl	d5fe0 <hal_usart_read>
}
   d75e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d75e4:	bd08      	pop	{r3, pc}

000d75e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d75e6:	7c00      	ldrb	r0, [r0, #16]
   d75e8:	f7fe bd0a 	b.w	d6000 <hal_usart_flush>

000d75ec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d75ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d75ee:	7c45      	ldrb	r5, [r0, #17]
{
   d75f0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d75f2:	b12d      	cbz	r5, d7600 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d75f4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d75f6:	b003      	add	sp, #12
   d75f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d75fc:	f7fe bce0 	b.w	d5fc0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7600:	7c00      	ldrb	r0, [r0, #16]
   d7602:	9101      	str	r1, [sp, #4]
   d7604:	f7fe fd0c 	bl	d6020 <hal_usart_available_data_for_write>
   d7608:	2800      	cmp	r0, #0
   d760a:	9901      	ldr	r1, [sp, #4]
   d760c:	dcf2      	bgt.n	d75f4 <_ZN11USARTSerial5writeEh+0x8>
}
   d760e:	4628      	mov	r0, r5
   d7610:	b003      	add	sp, #12
   d7612:	bd30      	pop	{r4, r5, pc}

000d7614 <_ZN11USARTSerialD0Ev>:
   d7614:	b510      	push	{r4, lr}
   d7616:	2114      	movs	r1, #20
   d7618:	4604      	mov	r4, r0
   d761a:	f000 fa7c 	bl	d7b16 <_ZdlPvj>
   d761e:	4620      	mov	r0, r4
   d7620:	bd10      	pop	{r4, pc}
	...

000d7624 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7624:	b510      	push	{r4, lr}
   d7626:	f04f 0c00 	mov.w	ip, #0
   d762a:	4604      	mov	r4, r0
   d762c:	4608      	mov	r0, r1
   d762e:	4611      	mov	r1, r2
   d7630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7634:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7638:	4a04      	ldr	r2, [pc, #16]	; (d764c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d763a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d763c:	2201      	movs	r2, #1
  _serial = serial;
   d763e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7640:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7642:	461a      	mov	r2, r3
   d7644:	f7fe fcb4 	bl	d5fb0 <hal_usart_init>
}
   d7648:	4620      	mov	r0, r4
   d764a:	bd10      	pop	{r4, pc}
   d764c:	000d8950 	.word	0x000d8950

000d7650 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d7652:	4c1b      	ldr	r4, [pc, #108]	; (d76c0 <_Z22__fetch_global_Serial1v+0x70>)
   d7654:	6826      	ldr	r6, [r4, #0]
   d7656:	b94e      	cbnz	r6, d766c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d7658:	2084      	movs	r0, #132	; 0x84
   d765a:	f7fc fd1c 	bl	d4096 <_Znwj>
   d765e:	4605      	mov	r5, r0
   d7660:	b118      	cbz	r0, d766a <_Z22__fetch_global_Serial1v+0x1a>
   d7662:	2284      	movs	r2, #132	; 0x84
   d7664:	4631      	mov	r1, r6
   d7666:	f000 ff8d 	bl	d8584 <memset>
   d766a:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d766c:	4d15      	ldr	r5, [pc, #84]	; (d76c4 <_Z22__fetch_global_Serial1v+0x74>)
   d766e:	682f      	ldr	r7, [r5, #0]
   d7670:	b94f      	cbnz	r7, d7686 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d7672:	2084      	movs	r0, #132	; 0x84
   d7674:	f7fc fd0f 	bl	d4096 <_Znwj>
   d7678:	4606      	mov	r6, r0
   d767a:	b118      	cbz	r0, d7684 <_Z22__fetch_global_Serial1v+0x34>
   d767c:	2284      	movs	r2, #132	; 0x84
   d767e:	4639      	mov	r1, r7
   d7680:	f000 ff80 	bl	d8584 <memset>
   d7684:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d7686:	4e10      	ldr	r6, [pc, #64]	; (d76c8 <_Z22__fetch_global_Serial1v+0x78>)
   d7688:	7831      	ldrb	r1, [r6, #0]
   d768a:	f3bf 8f5b 	dmb	ish
   d768e:	f011 0101 	ands.w	r1, r1, #1
   d7692:	d112      	bne.n	d76ba <_Z22__fetch_global_Serial1v+0x6a>
   d7694:	4630      	mov	r0, r6
   d7696:	9101      	str	r1, [sp, #4]
   d7698:	f7fc fd03 	bl	d40a2 <__cxa_guard_acquire>
   d769c:	9901      	ldr	r1, [sp, #4]
   d769e:	b160      	cbz	r0, d76ba <_Z22__fetch_global_Serial1v+0x6a>
   d76a0:	6822      	ldr	r2, [r4, #0]
   d76a2:	682b      	ldr	r3, [r5, #0]
   d76a4:	4809      	ldr	r0, [pc, #36]	; (d76cc <_Z22__fetch_global_Serial1v+0x7c>)
   d76a6:	f7ff ffbd 	bl	d7624 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d76aa:	4630      	mov	r0, r6
   d76ac:	f7fc fcfe 	bl	d40ac <__cxa_guard_release>
   d76b0:	4a07      	ldr	r2, [pc, #28]	; (d76d0 <_Z22__fetch_global_Serial1v+0x80>)
   d76b2:	4908      	ldr	r1, [pc, #32]	; (d76d4 <_Z22__fetch_global_Serial1v+0x84>)
   d76b4:	4805      	ldr	r0, [pc, #20]	; (d76cc <_Z22__fetch_global_Serial1v+0x7c>)
   d76b6:	f000 fa29 	bl	d7b0c <__aeabi_atexit>
#endif
	return serial1;
}
   d76ba:	4804      	ldr	r0, [pc, #16]	; (d76cc <_Z22__fetch_global_Serial1v+0x7c>)
   d76bc:	b003      	add	sp, #12
   d76be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d76c0:	2003e780 	.word	0x2003e780
   d76c4:	2003e784 	.word	0x2003e784
   d76c8:	2003e77c 	.word	0x2003e77c
   d76cc:	2003e788 	.word	0x2003e788
   d76d0:	2003e220 	.word	0x2003e220
   d76d4:	000d75a9 	.word	0x000d75a9

000d76d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d76d8:	7441      	strb	r1, [r0, #17]
}
   d76da:	4770      	bx	lr

000d76dc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d76dc:	4770      	bx	lr

000d76de <_ZN9USBSerial4readEv>:
{
   d76de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d76e0:	2100      	movs	r1, #0
   d76e2:	7c00      	ldrb	r0, [r0, #16]
   d76e4:	f7fe fcc4 	bl	d6070 <HAL_USB_USART_Receive_Data>
}
   d76e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d76ec:	bd08      	pop	{r3, pc}

000d76ee <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d76ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d76f0:	2101      	movs	r1, #1
   d76f2:	7c00      	ldrb	r0, [r0, #16]
   d76f4:	f7fe fcbc 	bl	d6070 <HAL_USB_USART_Receive_Data>
}
   d76f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d76fc:	bd08      	pop	{r3, pc}

000d76fe <_ZN9USBSerial17availableForWriteEv>:
{
   d76fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7700:	7c00      	ldrb	r0, [r0, #16]
   d7702:	f7fe fcad 	bl	d6060 <HAL_USB_USART_Available_Data_For_Write>
}
   d7706:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d770a:	bd08      	pop	{r3, pc}

000d770c <_ZN9USBSerial9availableEv>:
{
   d770c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d770e:	7c00      	ldrb	r0, [r0, #16]
   d7710:	f7fe fc9e 	bl	d6050 <HAL_USB_USART_Available_Data>
}
   d7714:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7718:	bd08      	pop	{r3, pc}

000d771a <_ZN9USBSerial5writeEh>:
{
   d771a:	b513      	push	{r0, r1, r4, lr}
   d771c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d771e:	7c00      	ldrb	r0, [r0, #16]
{
   d7720:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7722:	f7fe fc9d 	bl	d6060 <HAL_USB_USART_Available_Data_For_Write>
   d7726:	2800      	cmp	r0, #0
   d7728:	9901      	ldr	r1, [sp, #4]
   d772a:	dc01      	bgt.n	d7730 <_ZN9USBSerial5writeEh+0x16>
   d772c:	7c60      	ldrb	r0, [r4, #17]
   d772e:	b120      	cbz	r0, d773a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7730:	7c20      	ldrb	r0, [r4, #16]
   d7732:	f7fe fca5 	bl	d6080 <HAL_USB_USART_Send_Data>
   d7736:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d773a:	b002      	add	sp, #8
   d773c:	bd10      	pop	{r4, pc}

000d773e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d773e:	7c00      	ldrb	r0, [r0, #16]
   d7740:	f7fe bca6 	b.w	d6090 <HAL_USB_USART_Flush_Data>

000d7744 <_ZN9USBSerialD0Ev>:
   d7744:	b510      	push	{r4, lr}
   d7746:	2114      	movs	r1, #20
   d7748:	4604      	mov	r4, r0
   d774a:	f000 f9e4 	bl	d7b16 <_ZdlPvj>
   d774e:	4620      	mov	r0, r4
   d7750:	bd10      	pop	{r4, pc}
	...

000d7754 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7754:	b510      	push	{r4, lr}
   d7756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d775a:	4604      	mov	r4, r0
   d775c:	4608      	mov	r0, r1
   d775e:	2100      	movs	r1, #0
   d7760:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7764:	4b04      	ldr	r3, [pc, #16]	; (d7778 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7766:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7768:	2301      	movs	r3, #1
  _serial = serial;
   d776a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d776c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d776e:	4611      	mov	r1, r2
   d7770:	f7fe fc5e 	bl	d6030 <HAL_USB_USART_Init>
}
   d7774:	4620      	mov	r0, r4
   d7776:	bd10      	pop	{r4, pc}
   d7778:	000d8980 	.word	0x000d8980

000d777c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d777c:	7c00      	ldrb	r0, [r0, #16]
   d777e:	2200      	movs	r2, #0
   d7780:	f7fe bc5e 	b.w	d6040 <HAL_USB_USART_Begin>

000d7784 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7784:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7786:	2214      	movs	r2, #20
{
   d7788:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d778a:	2100      	movs	r1, #0
   d778c:	f000 fefa 	bl	d8584 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7790:	4620      	mov	r0, r4
   d7792:	bd10      	pop	{r4, pc}

000d7794 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7794:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7796:	4c10      	ldr	r4, [pc, #64]	; (d77d8 <_Z16_fetch_usbserialv+0x44>)
{
   d7798:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d779a:	a803      	add	r0, sp, #12
   d779c:	f7ff fff2 	bl	d7784 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d77a0:	7821      	ldrb	r1, [r4, #0]
   d77a2:	f3bf 8f5b 	dmb	ish
   d77a6:	f011 0101 	ands.w	r1, r1, #1
   d77aa:	d111      	bne.n	d77d0 <_Z16_fetch_usbserialv+0x3c>
   d77ac:	4620      	mov	r0, r4
   d77ae:	9101      	str	r1, [sp, #4]
   d77b0:	f7fc fc77 	bl	d40a2 <__cxa_guard_acquire>
   d77b4:	9901      	ldr	r1, [sp, #4]
   d77b6:	b158      	cbz	r0, d77d0 <_Z16_fetch_usbserialv+0x3c>
   d77b8:	aa03      	add	r2, sp, #12
   d77ba:	4808      	ldr	r0, [pc, #32]	; (d77dc <_Z16_fetch_usbserialv+0x48>)
   d77bc:	f7ff ffca 	bl	d7754 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d77c0:	4620      	mov	r0, r4
   d77c2:	f7fc fc73 	bl	d40ac <__cxa_guard_release>
   d77c6:	4a06      	ldr	r2, [pc, #24]	; (d77e0 <_Z16_fetch_usbserialv+0x4c>)
   d77c8:	4906      	ldr	r1, [pc, #24]	; (d77e4 <_Z16_fetch_usbserialv+0x50>)
   d77ca:	4804      	ldr	r0, [pc, #16]	; (d77dc <_Z16_fetch_usbserialv+0x48>)
   d77cc:	f000 f99e 	bl	d7b0c <__aeabi_atexit>
	return _usbserial;
}
   d77d0:	4802      	ldr	r0, [pc, #8]	; (d77dc <_Z16_fetch_usbserialv+0x48>)
   d77d2:	b008      	add	sp, #32
   d77d4:	bd10      	pop	{r4, pc}
   d77d6:	bf00      	nop
   d77d8:	2003e79c 	.word	0x2003e79c
   d77dc:	2003e7a0 	.word	0x2003e7a0
   d77e0:	2003e220 	.word	0x2003e220
   d77e4:	000d76dd 	.word	0x000d76dd

000d77e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d77e8:	4b01      	ldr	r3, [pc, #4]	; (d77f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d77ea:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d77ec:	4770      	bx	lr
   d77ee:	bf00      	nop
   d77f0:	2003e1bc 	.word	0x2003e1bc

000d77f4 <serialEventRun>:
{
   d77f4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d77f6:	4b0b      	ldr	r3, [pc, #44]	; (d7824 <serialEventRun+0x30>)
   d77f8:	b143      	cbz	r3, d780c <serialEventRun+0x18>
   d77fa:	f7ff ffcb 	bl	d7794 <_Z16_fetch_usbserialv>
   d77fe:	6803      	ldr	r3, [r0, #0]
   d7800:	691b      	ldr	r3, [r3, #16]
   d7802:	4798      	blx	r3
   d7804:	2800      	cmp	r0, #0
   d7806:	dd01      	ble.n	d780c <serialEventRun+0x18>
        serialEvent();
   d7808:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d780c:	4b06      	ldr	r3, [pc, #24]	; (d7828 <serialEventRun+0x34>)
   d780e:	b143      	cbz	r3, d7822 <serialEventRun+0x2e>
   d7810:	f7ff ff1e 	bl	d7650 <_Z22__fetch_global_Serial1v>
   d7814:	6803      	ldr	r3, [r0, #0]
   d7816:	691b      	ldr	r3, [r3, #16]
   d7818:	4798      	blx	r3
   d781a:	2800      	cmp	r0, #0
   d781c:	dd01      	ble.n	d7822 <serialEventRun+0x2e>
        serialEvent1();
   d781e:	f3af 8000 	nop.w
}
   d7822:	bd08      	pop	{r3, pc}
	...

000d782c <_post_loop>:
{
   d782c:	b508      	push	{r3, lr}
	serialEventRun();
   d782e:	f7ff ffe1 	bl	d77f4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7832:	f7fe fab5 	bl	d5da0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7836:	4b01      	ldr	r3, [pc, #4]	; (d783c <_post_loop+0x10>)
   d7838:	6018      	str	r0, [r3, #0]
}
   d783a:	bd08      	pop	{r3, pc}
   d783c:	2003e7bc 	.word	0x2003e7bc

000d7840 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7840:	4802      	ldr	r0, [pc, #8]	; (d784c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7842:	4a03      	ldr	r2, [pc, #12]	; (d7850 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7844:	4903      	ldr	r1, [pc, #12]	; (d7854 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7846:	1a12      	subs	r2, r2, r0
   d7848:	f000 be8e 	b.w	d8568 <memcpy>
   d784c:	2003f400 	.word	0x2003f400
   d7850:	2003f404 	.word	0x2003f404
   d7854:	000d89d0 	.word	0x000d89d0

000d7858 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7858:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d785a:	2300      	movs	r3, #0
   d785c:	9300      	str	r3, [sp, #0]
   d785e:	461a      	mov	r2, r3
   d7860:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7864:	f7fe fc66 	bl	d6134 <system_ctrl_set_result>
}
   d7868:	b003      	add	sp, #12
   d786a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7870 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7870:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7872:	8843      	ldrh	r3, [r0, #2]
   d7874:	2b0a      	cmp	r3, #10
   d7876:	d008      	beq.n	d788a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7878:	2b50      	cmp	r3, #80	; 0x50
   d787a:	d10b      	bne.n	d7894 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d787c:	4b09      	ldr	r3, [pc, #36]	; (d78a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d787e:	681b      	ldr	r3, [r3, #0]
   d7880:	b14b      	cbz	r3, d7896 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7882:	b003      	add	sp, #12
   d7884:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7888:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d788a:	f7ff ffe5 	bl	d7858 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d788e:	b003      	add	sp, #12
   d7890:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7894:	2300      	movs	r3, #0
   d7896:	9300      	str	r3, [sp, #0]
   d7898:	461a      	mov	r2, r3
   d789a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d789e:	f7fe fc49 	bl	d6134 <system_ctrl_set_result>
}
   d78a2:	e7f4      	b.n	d788e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d78a4:	2003e7b8 	.word	0x2003e7b8

000d78a8 <module_user_init_hook>:
{
   d78a8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d78aa:	4c12      	ldr	r4, [pc, #72]	; (d78f4 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d78ac:	4812      	ldr	r0, [pc, #72]	; (d78f8 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d78ae:	4d13      	ldr	r5, [pc, #76]	; (d78fc <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d78b0:	2100      	movs	r1, #0
   d78b2:	f7fe fd13 	bl	d62dc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d78b6:	6823      	ldr	r3, [r4, #0]
   d78b8:	42ab      	cmp	r3, r5
   d78ba:	4b11      	ldr	r3, [pc, #68]	; (d7900 <module_user_init_hook+0x58>)
   d78bc:	bf0c      	ite	eq
   d78be:	2201      	moveq	r2, #1
   d78c0:	2200      	movne	r2, #0
   d78c2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d78c4:	d002      	beq.n	d78cc <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d78c6:	f7ff ffbb 	bl	d7840 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d78ca:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d78cc:	f7fe fa58 	bl	d5d80 <HAL_RNG_GetRandomNumber>
   d78d0:	4604      	mov	r4, r0
    srand(seed);
   d78d2:	f000 fe5f 	bl	d8594 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d78d6:	4b0b      	ldr	r3, [pc, #44]	; (d7904 <module_user_init_hook+0x5c>)
   d78d8:	b113      	cbz	r3, d78e0 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d78da:	4620      	mov	r0, r4
   d78dc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d78e0:	2100      	movs	r1, #0
   d78e2:	4808      	ldr	r0, [pc, #32]	; (d7904 <module_user_init_hook+0x5c>)
   d78e4:	f7fe fc62 	bl	d61ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d78e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d78ec:	4806      	ldr	r0, [pc, #24]	; (d7908 <module_user_init_hook+0x60>)
   d78ee:	2100      	movs	r1, #0
   d78f0:	f7fe bc16 	b.w	d6120 <system_ctrl_set_app_request_handler>
   d78f4:	2003f400 	.word	0x2003f400
   d78f8:	000d77e9 	.word	0x000d77e9
   d78fc:	9a271c1e 	.word	0x9a271c1e
   d7900:	2003e7b4 	.word	0x2003e7b4
   d7904:	00000000 	.word	0x00000000
   d7908:	000d7871 	.word	0x000d7871

000d790c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d790c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d790e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7910:	d902      	bls.n	d7918 <pinAvailable+0xc>
    return false;
   d7912:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7914:	b002      	add	sp, #8
   d7916:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7918:	f1a0 030b 	sub.w	r3, r0, #11
   d791c:	2b02      	cmp	r3, #2
   d791e:	d81a      	bhi.n	d7956 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7920:	4c17      	ldr	r4, [pc, #92]	; (d7980 <pinAvailable+0x74>)
   d7922:	7821      	ldrb	r1, [r4, #0]
   d7924:	f3bf 8f5b 	dmb	ish
   d7928:	f011 0101 	ands.w	r1, r1, #1
   d792c:	d10b      	bne.n	d7946 <pinAvailable+0x3a>
   d792e:	4620      	mov	r0, r4
   d7930:	9101      	str	r1, [sp, #4]
   d7932:	f7fc fbb6 	bl	d40a2 <__cxa_guard_acquire>
   d7936:	9901      	ldr	r1, [sp, #4]
   d7938:	b128      	cbz	r0, d7946 <pinAvailable+0x3a>
   d793a:	4812      	ldr	r0, [pc, #72]	; (d7984 <pinAvailable+0x78>)
   d793c:	f7ff fc7e 	bl	d723c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7940:	4620      	mov	r0, r4
   d7942:	f7fc fbb3 	bl	d40ac <__cxa_guard_release>
   d7946:	4b0f      	ldr	r3, [pc, #60]	; (d7984 <pinAvailable+0x78>)
   d7948:	7818      	ldrb	r0, [r3, #0]
   d794a:	f7fe faf9 	bl	d5f40 <hal_spi_is_enabled>
   d794e:	2800      	cmp	r0, #0
   d7950:	d1df      	bne.n	d7912 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7952:	2001      	movs	r0, #1
   d7954:	e7de      	b.n	d7914 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7956:	2801      	cmp	r0, #1
   d7958:	d809      	bhi.n	d796e <pinAvailable+0x62>
   d795a:	f000 f887 	bl	d7a6c <_Z19__fetch_global_Wirev>
   d795e:	2100      	movs	r1, #0
   d7960:	7c00      	ldrb	r0, [r0, #16]
   d7962:	f7fe fa95 	bl	d5e90 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7966:	f080 0001 	eor.w	r0, r0, #1
   d796a:	b2c0      	uxtb	r0, r0
   d796c:	e7d2      	b.n	d7914 <pinAvailable+0x8>
   d796e:	3809      	subs	r0, #9
   d7970:	2801      	cmp	r0, #1
   d7972:	d8ee      	bhi.n	d7952 <pinAvailable+0x46>
   d7974:	f7ff fe6c 	bl	d7650 <_Z22__fetch_global_Serial1v>
   d7978:	7c00      	ldrb	r0, [r0, #16]
   d797a:	f7fe fb49 	bl	d6010 <hal_usart_is_enabled>
   d797e:	e7f2      	b.n	d7966 <pinAvailable+0x5a>
   d7980:	2003e224 	.word	0x2003e224
   d7984:	2003e228 	.word	0x2003e228

000d7988 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7988:	2823      	cmp	r0, #35	; 0x23
{
   d798a:	b538      	push	{r3, r4, r5, lr}
   d798c:	4604      	mov	r4, r0
   d798e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7990:	d80a      	bhi.n	d79a8 <pinMode+0x20>
   d7992:	29ff      	cmp	r1, #255	; 0xff
   d7994:	d008      	beq.n	d79a8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7996:	f7ff ffb9 	bl	d790c <pinAvailable>
   d799a:	b128      	cbz	r0, d79a8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d799c:	4629      	mov	r1, r5
   d799e:	4620      	mov	r0, r4
}
   d79a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d79a4:	f7fe ba1c 	b.w	d5de0 <HAL_Pin_Mode>
}
   d79a8:	bd38      	pop	{r3, r4, r5, pc}

000d79aa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d79aa:	b538      	push	{r3, r4, r5, lr}
   d79ac:	4604      	mov	r4, r0
   d79ae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d79b0:	f7fe fa1e 	bl	d5df0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d79b4:	28ff      	cmp	r0, #255	; 0xff
   d79b6:	d010      	beq.n	d79da <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d79b8:	2806      	cmp	r0, #6
   d79ba:	d804      	bhi.n	d79c6 <digitalWrite+0x1c>
   d79bc:	234d      	movs	r3, #77	; 0x4d
   d79be:	fa23 f000 	lsr.w	r0, r3, r0
   d79c2:	07c3      	lsls	r3, r0, #31
   d79c4:	d409      	bmi.n	d79da <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d79c6:	4620      	mov	r0, r4
   d79c8:	f7ff ffa0 	bl	d790c <pinAvailable>
   d79cc:	b128      	cbz	r0, d79da <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d79ce:	4629      	mov	r1, r5
   d79d0:	4620      	mov	r0, r4
}
   d79d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d79d6:	f7fe ba13 	b.w	d5e00 <HAL_GPIO_Write>
}
   d79da:	bd38      	pop	{r3, r4, r5, pc}

000d79dc <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d79dc:	280d      	cmp	r0, #13
{
   d79de:	b510      	push	{r4, lr}
   d79e0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d79e2:	bf9c      	itt	ls
   d79e4:	340e      	addls	r4, #14
   d79e6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d79e8:	4620      	mov	r0, r4
   d79ea:	f7ff ff8f 	bl	d790c <pinAvailable>
   d79ee:	b150      	cbz	r0, d7a06 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d79f0:	2103      	movs	r1, #3
   d79f2:	4620      	mov	r0, r4
   d79f4:	f7fe f9ec 	bl	d5dd0 <HAL_Validate_Pin_Function>
   d79f8:	2803      	cmp	r0, #3
   d79fa:	d104      	bne.n	d7a06 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d79fc:	4620      	mov	r0, r4
}
   d79fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7a02:	f7fe ba05 	b.w	d5e10 <hal_adc_read>
}
   d7a06:	2000      	movs	r0, #0
   d7a08:	bd10      	pop	{r4, pc}
	...

000d7a0c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7a0c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7a0e:	2300      	movs	r3, #0
   d7a10:	2520      	movs	r5, #32
   d7a12:	8043      	strh	r3, [r0, #2]
   d7a14:	2314      	movs	r3, #20
{
   d7a16:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7a18:	8003      	strh	r3, [r0, #0]
   d7a1a:	6085      	str	r5, [r0, #8]
   d7a1c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7a1e:	4906      	ldr	r1, [pc, #24]	; (d7a38 <_Z17acquireWireBufferv+0x2c>)
   d7a20:	4628      	mov	r0, r5
   d7a22:	f000 f87c 	bl	d7b1e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7a26:	4904      	ldr	r1, [pc, #16]	; (d7a38 <_Z17acquireWireBufferv+0x2c>)
	};
   d7a28:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7a2a:	4628      	mov	r0, r5
   d7a2c:	f000 f877 	bl	d7b1e <_ZnajRKSt9nothrow_t>
	};
   d7a30:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7a32:	4620      	mov	r0, r4
   d7a34:	bd38      	pop	{r3, r4, r5, pc}
   d7a36:	bf00      	nop
   d7a38:	000d89a8 	.word	0x000d89a8

000d7a3c <_Z18acquireWire1Bufferv>:
   d7a3c:	b538      	push	{r3, r4, r5, lr}
   d7a3e:	2300      	movs	r3, #0
   d7a40:	2520      	movs	r5, #32
   d7a42:	8043      	strh	r3, [r0, #2]
   d7a44:	2314      	movs	r3, #20
   d7a46:	4604      	mov	r4, r0
   d7a48:	8003      	strh	r3, [r0, #0]
   d7a4a:	6085      	str	r5, [r0, #8]
   d7a4c:	6105      	str	r5, [r0, #16]
   d7a4e:	4906      	ldr	r1, [pc, #24]	; (d7a68 <_Z18acquireWire1Bufferv+0x2c>)
   d7a50:	4628      	mov	r0, r5
   d7a52:	f000 f864 	bl	d7b1e <_ZnajRKSt9nothrow_t>
   d7a56:	4904      	ldr	r1, [pc, #16]	; (d7a68 <_Z18acquireWire1Bufferv+0x2c>)
   d7a58:	6060      	str	r0, [r4, #4]
   d7a5a:	4628      	mov	r0, r5
   d7a5c:	f000 f85f 	bl	d7b1e <_ZnajRKSt9nothrow_t>
   d7a60:	60e0      	str	r0, [r4, #12]
   d7a62:	4620      	mov	r0, r4
   d7a64:	bd38      	pop	{r3, r4, r5, pc}
   d7a66:	bf00      	nop
   d7a68:	000d89a8 	.word	0x000d89a8

000d7a6c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7a6c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7a6e:	4d0f      	ldr	r5, [pc, #60]	; (d7aac <_Z19__fetch_global_Wirev+0x40>)
   d7a70:	7829      	ldrb	r1, [r5, #0]
   d7a72:	f3bf 8f5b 	dmb	ish
   d7a76:	f011 0401 	ands.w	r4, r1, #1
{
   d7a7a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7a7c:	d113      	bne.n	d7aa6 <_Z19__fetch_global_Wirev+0x3a>
   d7a7e:	4628      	mov	r0, r5
   d7a80:	f7fc fb0f 	bl	d40a2 <__cxa_guard_acquire>
   d7a84:	b178      	cbz	r0, d7aa6 <_Z19__fetch_global_Wirev+0x3a>
   d7a86:	a801      	add	r0, sp, #4
   d7a88:	f7ff ffc0 	bl	d7a0c <_Z17acquireWireBufferv>
   d7a8c:	aa01      	add	r2, sp, #4
   d7a8e:	4621      	mov	r1, r4
   d7a90:	4807      	ldr	r0, [pc, #28]	; (d7ab0 <_Z19__fetch_global_Wirev+0x44>)
   d7a92:	f7ff f8a5 	bl	d6be0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7a96:	4628      	mov	r0, r5
   d7a98:	f7fc fb08 	bl	d40ac <__cxa_guard_release>
   d7a9c:	4a05      	ldr	r2, [pc, #20]	; (d7ab4 <_Z19__fetch_global_Wirev+0x48>)
   d7a9e:	4906      	ldr	r1, [pc, #24]	; (d7ab8 <_Z19__fetch_global_Wirev+0x4c>)
   d7aa0:	4803      	ldr	r0, [pc, #12]	; (d7ab0 <_Z19__fetch_global_Wirev+0x44>)
   d7aa2:	f000 f833 	bl	d7b0c <__aeabi_atexit>
	return wire;
}
   d7aa6:	4802      	ldr	r0, [pc, #8]	; (d7ab0 <_Z19__fetch_global_Wirev+0x44>)
   d7aa8:	b007      	add	sp, #28
   d7aaa:	bd30      	pop	{r4, r5, pc}
   d7aac:	2003e7c0 	.word	0x2003e7c0
   d7ab0:	2003e7c8 	.word	0x2003e7c8
   d7ab4:	2003e220 	.word	0x2003e220
   d7ab8:	000d6b89 	.word	0x000d6b89

000d7abc <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7abc:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d7abe:	4c0f      	ldr	r4, [pc, #60]	; (d7afc <_Z20__fetch_global_Wire1v+0x40>)
   d7ac0:	7823      	ldrb	r3, [r4, #0]
   d7ac2:	f3bf 8f5b 	dmb	ish
   d7ac6:	07db      	lsls	r3, r3, #31
{
   d7ac8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d7aca:	d413      	bmi.n	d7af4 <_Z20__fetch_global_Wire1v+0x38>
   d7acc:	4620      	mov	r0, r4
   d7ace:	f7fc fae8 	bl	d40a2 <__cxa_guard_acquire>
   d7ad2:	b178      	cbz	r0, d7af4 <_Z20__fetch_global_Wire1v+0x38>
   d7ad4:	a801      	add	r0, sp, #4
   d7ad6:	f7ff ffb1 	bl	d7a3c <_Z18acquireWire1Bufferv>
   d7ada:	aa01      	add	r2, sp, #4
   d7adc:	2101      	movs	r1, #1
   d7ade:	4808      	ldr	r0, [pc, #32]	; (d7b00 <_Z20__fetch_global_Wire1v+0x44>)
   d7ae0:	f7ff f87e 	bl	d6be0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7ae4:	4620      	mov	r0, r4
   d7ae6:	f7fc fae1 	bl	d40ac <__cxa_guard_release>
   d7aea:	4a06      	ldr	r2, [pc, #24]	; (d7b04 <_Z20__fetch_global_Wire1v+0x48>)
   d7aec:	4906      	ldr	r1, [pc, #24]	; (d7b08 <_Z20__fetch_global_Wire1v+0x4c>)
   d7aee:	4804      	ldr	r0, [pc, #16]	; (d7b00 <_Z20__fetch_global_Wire1v+0x44>)
   d7af0:	f000 f80c 	bl	d7b0c <__aeabi_atexit>
	return wire;
}
   d7af4:	4802      	ldr	r0, [pc, #8]	; (d7b00 <_Z20__fetch_global_Wire1v+0x44>)
   d7af6:	b006      	add	sp, #24
   d7af8:	bd10      	pop	{r4, pc}
   d7afa:	bf00      	nop
   d7afc:	2003e7c4 	.word	0x2003e7c4
   d7b00:	2003e7dc 	.word	0x2003e7dc
   d7b04:	2003e220 	.word	0x2003e220
   d7b08:	000d6b89 	.word	0x000d6b89

000d7b0c <__aeabi_atexit>:
   d7b0c:	460b      	mov	r3, r1
   d7b0e:	4601      	mov	r1, r0
   d7b10:	4618      	mov	r0, r3
   d7b12:	f000 bd0d 	b.w	d8530 <__cxa_atexit>

000d7b16 <_ZdlPvj>:
   d7b16:	f7fc bac2 	b.w	d409e <_ZdlPv>

000d7b1a <_ZnwjRKSt9nothrow_t>:
   d7b1a:	f7fc babc 	b.w	d4096 <_Znwj>

000d7b1e <_ZnajRKSt9nothrow_t>:
   d7b1e:	f7fc babc 	b.w	d409a <_Znaj>

000d7b22 <_ZSt25__throw_bad_function_callv>:
   d7b22:	b508      	push	{r3, lr}
   d7b24:	f7fe fbca 	bl	d62bc <abort>

000d7b28 <__aeabi_drsub>:
   d7b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7b2c:	e002      	b.n	d7b34 <__adddf3>
   d7b2e:	bf00      	nop

000d7b30 <__aeabi_dsub>:
   d7b30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7b34 <__adddf3>:
   d7b34:	b530      	push	{r4, r5, lr}
   d7b36:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7b3a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7b3e:	ea94 0f05 	teq	r4, r5
   d7b42:	bf08      	it	eq
   d7b44:	ea90 0f02 	teqeq	r0, r2
   d7b48:	bf1f      	itttt	ne
   d7b4a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7b4e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7b52:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7b56:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7b5a:	f000 80e2 	beq.w	d7d22 <__adddf3+0x1ee>
   d7b5e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7b62:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7b66:	bfb8      	it	lt
   d7b68:	426d      	neglt	r5, r5
   d7b6a:	dd0c      	ble.n	d7b86 <__adddf3+0x52>
   d7b6c:	442c      	add	r4, r5
   d7b6e:	ea80 0202 	eor.w	r2, r0, r2
   d7b72:	ea81 0303 	eor.w	r3, r1, r3
   d7b76:	ea82 0000 	eor.w	r0, r2, r0
   d7b7a:	ea83 0101 	eor.w	r1, r3, r1
   d7b7e:	ea80 0202 	eor.w	r2, r0, r2
   d7b82:	ea81 0303 	eor.w	r3, r1, r3
   d7b86:	2d36      	cmp	r5, #54	; 0x36
   d7b88:	bf88      	it	hi
   d7b8a:	bd30      	pophi	{r4, r5, pc}
   d7b8c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7b90:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7b94:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7b98:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7b9c:	d002      	beq.n	d7ba4 <__adddf3+0x70>
   d7b9e:	4240      	negs	r0, r0
   d7ba0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7ba4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7ba8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7bac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7bb0:	d002      	beq.n	d7bb8 <__adddf3+0x84>
   d7bb2:	4252      	negs	r2, r2
   d7bb4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7bb8:	ea94 0f05 	teq	r4, r5
   d7bbc:	f000 80a7 	beq.w	d7d0e <__adddf3+0x1da>
   d7bc0:	f1a4 0401 	sub.w	r4, r4, #1
   d7bc4:	f1d5 0e20 	rsbs	lr, r5, #32
   d7bc8:	db0d      	blt.n	d7be6 <__adddf3+0xb2>
   d7bca:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7bce:	fa22 f205 	lsr.w	r2, r2, r5
   d7bd2:	1880      	adds	r0, r0, r2
   d7bd4:	f141 0100 	adc.w	r1, r1, #0
   d7bd8:	fa03 f20e 	lsl.w	r2, r3, lr
   d7bdc:	1880      	adds	r0, r0, r2
   d7bde:	fa43 f305 	asr.w	r3, r3, r5
   d7be2:	4159      	adcs	r1, r3
   d7be4:	e00e      	b.n	d7c04 <__adddf3+0xd0>
   d7be6:	f1a5 0520 	sub.w	r5, r5, #32
   d7bea:	f10e 0e20 	add.w	lr, lr, #32
   d7bee:	2a01      	cmp	r2, #1
   d7bf0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7bf4:	bf28      	it	cs
   d7bf6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7bfa:	fa43 f305 	asr.w	r3, r3, r5
   d7bfe:	18c0      	adds	r0, r0, r3
   d7c00:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7c04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7c08:	d507      	bpl.n	d7c1a <__adddf3+0xe6>
   d7c0a:	f04f 0e00 	mov.w	lr, #0
   d7c0e:	f1dc 0c00 	rsbs	ip, ip, #0
   d7c12:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7c16:	eb6e 0101 	sbc.w	r1, lr, r1
   d7c1a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7c1e:	d31b      	bcc.n	d7c58 <__adddf3+0x124>
   d7c20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7c24:	d30c      	bcc.n	d7c40 <__adddf3+0x10c>
   d7c26:	0849      	lsrs	r1, r1, #1
   d7c28:	ea5f 0030 	movs.w	r0, r0, rrx
   d7c2c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7c30:	f104 0401 	add.w	r4, r4, #1
   d7c34:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7c38:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7c3c:	f080 809a 	bcs.w	d7d74 <__adddf3+0x240>
   d7c40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7c44:	bf08      	it	eq
   d7c46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7c4a:	f150 0000 	adcs.w	r0, r0, #0
   d7c4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7c52:	ea41 0105 	orr.w	r1, r1, r5
   d7c56:	bd30      	pop	{r4, r5, pc}
   d7c58:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7c5c:	4140      	adcs	r0, r0
   d7c5e:	eb41 0101 	adc.w	r1, r1, r1
   d7c62:	3c01      	subs	r4, #1
   d7c64:	bf28      	it	cs
   d7c66:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d7c6a:	d2e9      	bcs.n	d7c40 <__adddf3+0x10c>
   d7c6c:	f091 0f00 	teq	r1, #0
   d7c70:	bf04      	itt	eq
   d7c72:	4601      	moveq	r1, r0
   d7c74:	2000      	moveq	r0, #0
   d7c76:	fab1 f381 	clz	r3, r1
   d7c7a:	bf08      	it	eq
   d7c7c:	3320      	addeq	r3, #32
   d7c7e:	f1a3 030b 	sub.w	r3, r3, #11
   d7c82:	f1b3 0220 	subs.w	r2, r3, #32
   d7c86:	da0c      	bge.n	d7ca2 <__adddf3+0x16e>
   d7c88:	320c      	adds	r2, #12
   d7c8a:	dd08      	ble.n	d7c9e <__adddf3+0x16a>
   d7c8c:	f102 0c14 	add.w	ip, r2, #20
   d7c90:	f1c2 020c 	rsb	r2, r2, #12
   d7c94:	fa01 f00c 	lsl.w	r0, r1, ip
   d7c98:	fa21 f102 	lsr.w	r1, r1, r2
   d7c9c:	e00c      	b.n	d7cb8 <__adddf3+0x184>
   d7c9e:	f102 0214 	add.w	r2, r2, #20
   d7ca2:	bfd8      	it	le
   d7ca4:	f1c2 0c20 	rsble	ip, r2, #32
   d7ca8:	fa01 f102 	lsl.w	r1, r1, r2
   d7cac:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7cb0:	bfdc      	itt	le
   d7cb2:	ea41 010c 	orrle.w	r1, r1, ip
   d7cb6:	4090      	lslle	r0, r2
   d7cb8:	1ae4      	subs	r4, r4, r3
   d7cba:	bfa2      	ittt	ge
   d7cbc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7cc0:	4329      	orrge	r1, r5
   d7cc2:	bd30      	popge	{r4, r5, pc}
   d7cc4:	ea6f 0404 	mvn.w	r4, r4
   d7cc8:	3c1f      	subs	r4, #31
   d7cca:	da1c      	bge.n	d7d06 <__adddf3+0x1d2>
   d7ccc:	340c      	adds	r4, #12
   d7cce:	dc0e      	bgt.n	d7cee <__adddf3+0x1ba>
   d7cd0:	f104 0414 	add.w	r4, r4, #20
   d7cd4:	f1c4 0220 	rsb	r2, r4, #32
   d7cd8:	fa20 f004 	lsr.w	r0, r0, r4
   d7cdc:	fa01 f302 	lsl.w	r3, r1, r2
   d7ce0:	ea40 0003 	orr.w	r0, r0, r3
   d7ce4:	fa21 f304 	lsr.w	r3, r1, r4
   d7ce8:	ea45 0103 	orr.w	r1, r5, r3
   d7cec:	bd30      	pop	{r4, r5, pc}
   d7cee:	f1c4 040c 	rsb	r4, r4, #12
   d7cf2:	f1c4 0220 	rsb	r2, r4, #32
   d7cf6:	fa20 f002 	lsr.w	r0, r0, r2
   d7cfa:	fa01 f304 	lsl.w	r3, r1, r4
   d7cfe:	ea40 0003 	orr.w	r0, r0, r3
   d7d02:	4629      	mov	r1, r5
   d7d04:	bd30      	pop	{r4, r5, pc}
   d7d06:	fa21 f004 	lsr.w	r0, r1, r4
   d7d0a:	4629      	mov	r1, r5
   d7d0c:	bd30      	pop	{r4, r5, pc}
   d7d0e:	f094 0f00 	teq	r4, #0
   d7d12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7d16:	bf06      	itte	eq
   d7d18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7d1c:	3401      	addeq	r4, #1
   d7d1e:	3d01      	subne	r5, #1
   d7d20:	e74e      	b.n	d7bc0 <__adddf3+0x8c>
   d7d22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7d26:	bf18      	it	ne
   d7d28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7d2c:	d029      	beq.n	d7d82 <__adddf3+0x24e>
   d7d2e:	ea94 0f05 	teq	r4, r5
   d7d32:	bf08      	it	eq
   d7d34:	ea90 0f02 	teqeq	r0, r2
   d7d38:	d005      	beq.n	d7d46 <__adddf3+0x212>
   d7d3a:	ea54 0c00 	orrs.w	ip, r4, r0
   d7d3e:	bf04      	itt	eq
   d7d40:	4619      	moveq	r1, r3
   d7d42:	4610      	moveq	r0, r2
   d7d44:	bd30      	pop	{r4, r5, pc}
   d7d46:	ea91 0f03 	teq	r1, r3
   d7d4a:	bf1e      	ittt	ne
   d7d4c:	2100      	movne	r1, #0
   d7d4e:	2000      	movne	r0, #0
   d7d50:	bd30      	popne	{r4, r5, pc}
   d7d52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7d56:	d105      	bne.n	d7d64 <__adddf3+0x230>
   d7d58:	0040      	lsls	r0, r0, #1
   d7d5a:	4149      	adcs	r1, r1
   d7d5c:	bf28      	it	cs
   d7d5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7d62:	bd30      	pop	{r4, r5, pc}
   d7d64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7d68:	bf3c      	itt	cc
   d7d6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7d6e:	bd30      	popcc	{r4, r5, pc}
   d7d70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7d74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7d78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7d7c:	f04f 0000 	mov.w	r0, #0
   d7d80:	bd30      	pop	{r4, r5, pc}
   d7d82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7d86:	bf1a      	itte	ne
   d7d88:	4619      	movne	r1, r3
   d7d8a:	4610      	movne	r0, r2
   d7d8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7d90:	bf1c      	itt	ne
   d7d92:	460b      	movne	r3, r1
   d7d94:	4602      	movne	r2, r0
   d7d96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7d9a:	bf06      	itte	eq
   d7d9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7da0:	ea91 0f03 	teqeq	r1, r3
   d7da4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7da8:	bd30      	pop	{r4, r5, pc}
   d7daa:	bf00      	nop

000d7dac <__aeabi_ui2d>:
   d7dac:	f090 0f00 	teq	r0, #0
   d7db0:	bf04      	itt	eq
   d7db2:	2100      	moveq	r1, #0
   d7db4:	4770      	bxeq	lr
   d7db6:	b530      	push	{r4, r5, lr}
   d7db8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7dbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7dc0:	f04f 0500 	mov.w	r5, #0
   d7dc4:	f04f 0100 	mov.w	r1, #0
   d7dc8:	e750      	b.n	d7c6c <__adddf3+0x138>
   d7dca:	bf00      	nop

000d7dcc <__aeabi_i2d>:
   d7dcc:	f090 0f00 	teq	r0, #0
   d7dd0:	bf04      	itt	eq
   d7dd2:	2100      	moveq	r1, #0
   d7dd4:	4770      	bxeq	lr
   d7dd6:	b530      	push	{r4, r5, lr}
   d7dd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7ddc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7de0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7de4:	bf48      	it	mi
   d7de6:	4240      	negmi	r0, r0
   d7de8:	f04f 0100 	mov.w	r1, #0
   d7dec:	e73e      	b.n	d7c6c <__adddf3+0x138>
   d7dee:	bf00      	nop

000d7df0 <__aeabi_f2d>:
   d7df0:	0042      	lsls	r2, r0, #1
   d7df2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7df6:	ea4f 0131 	mov.w	r1, r1, rrx
   d7dfa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7dfe:	bf1f      	itttt	ne
   d7e00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7e04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7e08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7e0c:	4770      	bxne	lr
   d7e0e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d7e12:	bf08      	it	eq
   d7e14:	4770      	bxeq	lr
   d7e16:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d7e1a:	bf04      	itt	eq
   d7e1c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d7e20:	4770      	bxeq	lr
   d7e22:	b530      	push	{r4, r5, lr}
   d7e24:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7e28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7e2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7e30:	e71c      	b.n	d7c6c <__adddf3+0x138>
   d7e32:	bf00      	nop

000d7e34 <__aeabi_ul2d>:
   d7e34:	ea50 0201 	orrs.w	r2, r0, r1
   d7e38:	bf08      	it	eq
   d7e3a:	4770      	bxeq	lr
   d7e3c:	b530      	push	{r4, r5, lr}
   d7e3e:	f04f 0500 	mov.w	r5, #0
   d7e42:	e00a      	b.n	d7e5a <__aeabi_l2d+0x16>

000d7e44 <__aeabi_l2d>:
   d7e44:	ea50 0201 	orrs.w	r2, r0, r1
   d7e48:	bf08      	it	eq
   d7e4a:	4770      	bxeq	lr
   d7e4c:	b530      	push	{r4, r5, lr}
   d7e4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7e52:	d502      	bpl.n	d7e5a <__aeabi_l2d+0x16>
   d7e54:	4240      	negs	r0, r0
   d7e56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7e5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7e5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7e62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7e66:	f43f aed8 	beq.w	d7c1a <__adddf3+0xe6>
   d7e6a:	f04f 0203 	mov.w	r2, #3
   d7e6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7e72:	bf18      	it	ne
   d7e74:	3203      	addne	r2, #3
   d7e76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7e7a:	bf18      	it	ne
   d7e7c:	3203      	addne	r2, #3
   d7e7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7e82:	f1c2 0320 	rsb	r3, r2, #32
   d7e86:	fa00 fc03 	lsl.w	ip, r0, r3
   d7e8a:	fa20 f002 	lsr.w	r0, r0, r2
   d7e8e:	fa01 fe03 	lsl.w	lr, r1, r3
   d7e92:	ea40 000e 	orr.w	r0, r0, lr
   d7e96:	fa21 f102 	lsr.w	r1, r1, r2
   d7e9a:	4414      	add	r4, r2
   d7e9c:	e6bd      	b.n	d7c1a <__adddf3+0xe6>
   d7e9e:	bf00      	nop

000d7ea0 <__aeabi_dmul>:
   d7ea0:	b570      	push	{r4, r5, r6, lr}
   d7ea2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7ea6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7eaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7eae:	bf1d      	ittte	ne
   d7eb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7eb4:	ea94 0f0c 	teqne	r4, ip
   d7eb8:	ea95 0f0c 	teqne	r5, ip
   d7ebc:	f000 f8de 	bleq	d807c <__aeabi_dmul+0x1dc>
   d7ec0:	442c      	add	r4, r5
   d7ec2:	ea81 0603 	eor.w	r6, r1, r3
   d7ec6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7eca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7ece:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7ed2:	bf18      	it	ne
   d7ed4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7ed8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7edc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7ee0:	d038      	beq.n	d7f54 <__aeabi_dmul+0xb4>
   d7ee2:	fba0 ce02 	umull	ip, lr, r0, r2
   d7ee6:	f04f 0500 	mov.w	r5, #0
   d7eea:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7eee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7ef2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7ef6:	f04f 0600 	mov.w	r6, #0
   d7efa:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7efe:	f09c 0f00 	teq	ip, #0
   d7f02:	bf18      	it	ne
   d7f04:	f04e 0e01 	orrne.w	lr, lr, #1
   d7f08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7f0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7f10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7f14:	d204      	bcs.n	d7f20 <__aeabi_dmul+0x80>
   d7f16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7f1a:	416d      	adcs	r5, r5
   d7f1c:	eb46 0606 	adc.w	r6, r6, r6
   d7f20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7f24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7f28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7f2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7f30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7f34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7f38:	bf88      	it	hi
   d7f3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7f3e:	d81e      	bhi.n	d7f7e <__aeabi_dmul+0xde>
   d7f40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7f44:	bf08      	it	eq
   d7f46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7f4a:	f150 0000 	adcs.w	r0, r0, #0
   d7f4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7f52:	bd70      	pop	{r4, r5, r6, pc}
   d7f54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7f58:	ea46 0101 	orr.w	r1, r6, r1
   d7f5c:	ea40 0002 	orr.w	r0, r0, r2
   d7f60:	ea81 0103 	eor.w	r1, r1, r3
   d7f64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7f68:	bfc2      	ittt	gt
   d7f6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7f6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7f72:	bd70      	popgt	{r4, r5, r6, pc}
   d7f74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7f78:	f04f 0e00 	mov.w	lr, #0
   d7f7c:	3c01      	subs	r4, #1
   d7f7e:	f300 80ab 	bgt.w	d80d8 <__aeabi_dmul+0x238>
   d7f82:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7f86:	bfde      	ittt	le
   d7f88:	2000      	movle	r0, #0
   d7f8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7f8e:	bd70      	pople	{r4, r5, r6, pc}
   d7f90:	f1c4 0400 	rsb	r4, r4, #0
   d7f94:	3c20      	subs	r4, #32
   d7f96:	da35      	bge.n	d8004 <__aeabi_dmul+0x164>
   d7f98:	340c      	adds	r4, #12
   d7f9a:	dc1b      	bgt.n	d7fd4 <__aeabi_dmul+0x134>
   d7f9c:	f104 0414 	add.w	r4, r4, #20
   d7fa0:	f1c4 0520 	rsb	r5, r4, #32
   d7fa4:	fa00 f305 	lsl.w	r3, r0, r5
   d7fa8:	fa20 f004 	lsr.w	r0, r0, r4
   d7fac:	fa01 f205 	lsl.w	r2, r1, r5
   d7fb0:	ea40 0002 	orr.w	r0, r0, r2
   d7fb4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7fb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7fbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7fc0:	fa21 f604 	lsr.w	r6, r1, r4
   d7fc4:	eb42 0106 	adc.w	r1, r2, r6
   d7fc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7fcc:	bf08      	it	eq
   d7fce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7fd2:	bd70      	pop	{r4, r5, r6, pc}
   d7fd4:	f1c4 040c 	rsb	r4, r4, #12
   d7fd8:	f1c4 0520 	rsb	r5, r4, #32
   d7fdc:	fa00 f304 	lsl.w	r3, r0, r4
   d7fe0:	fa20 f005 	lsr.w	r0, r0, r5
   d7fe4:	fa01 f204 	lsl.w	r2, r1, r4
   d7fe8:	ea40 0002 	orr.w	r0, r0, r2
   d7fec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7ff0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7ff4:	f141 0100 	adc.w	r1, r1, #0
   d7ff8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7ffc:	bf08      	it	eq
   d7ffe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8002:	bd70      	pop	{r4, r5, r6, pc}
   d8004:	f1c4 0520 	rsb	r5, r4, #32
   d8008:	fa00 f205 	lsl.w	r2, r0, r5
   d800c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8010:	fa20 f304 	lsr.w	r3, r0, r4
   d8014:	fa01 f205 	lsl.w	r2, r1, r5
   d8018:	ea43 0302 	orr.w	r3, r3, r2
   d801c:	fa21 f004 	lsr.w	r0, r1, r4
   d8020:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8024:	fa21 f204 	lsr.w	r2, r1, r4
   d8028:	ea20 0002 	bic.w	r0, r0, r2
   d802c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8030:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8034:	bf08      	it	eq
   d8036:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d803a:	bd70      	pop	{r4, r5, r6, pc}
   d803c:	f094 0f00 	teq	r4, #0
   d8040:	d10f      	bne.n	d8062 <__aeabi_dmul+0x1c2>
   d8042:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8046:	0040      	lsls	r0, r0, #1
   d8048:	eb41 0101 	adc.w	r1, r1, r1
   d804c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8050:	bf08      	it	eq
   d8052:	3c01      	subeq	r4, #1
   d8054:	d0f7      	beq.n	d8046 <__aeabi_dmul+0x1a6>
   d8056:	ea41 0106 	orr.w	r1, r1, r6
   d805a:	f095 0f00 	teq	r5, #0
   d805e:	bf18      	it	ne
   d8060:	4770      	bxne	lr
   d8062:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8066:	0052      	lsls	r2, r2, #1
   d8068:	eb43 0303 	adc.w	r3, r3, r3
   d806c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8070:	bf08      	it	eq
   d8072:	3d01      	subeq	r5, #1
   d8074:	d0f7      	beq.n	d8066 <__aeabi_dmul+0x1c6>
   d8076:	ea43 0306 	orr.w	r3, r3, r6
   d807a:	4770      	bx	lr
   d807c:	ea94 0f0c 	teq	r4, ip
   d8080:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8084:	bf18      	it	ne
   d8086:	ea95 0f0c 	teqne	r5, ip
   d808a:	d00c      	beq.n	d80a6 <__aeabi_dmul+0x206>
   d808c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8090:	bf18      	it	ne
   d8092:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8096:	d1d1      	bne.n	d803c <__aeabi_dmul+0x19c>
   d8098:	ea81 0103 	eor.w	r1, r1, r3
   d809c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d80a0:	f04f 0000 	mov.w	r0, #0
   d80a4:	bd70      	pop	{r4, r5, r6, pc}
   d80a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d80aa:	bf06      	itte	eq
   d80ac:	4610      	moveq	r0, r2
   d80ae:	4619      	moveq	r1, r3
   d80b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d80b4:	d019      	beq.n	d80ea <__aeabi_dmul+0x24a>
   d80b6:	ea94 0f0c 	teq	r4, ip
   d80ba:	d102      	bne.n	d80c2 <__aeabi_dmul+0x222>
   d80bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d80c0:	d113      	bne.n	d80ea <__aeabi_dmul+0x24a>
   d80c2:	ea95 0f0c 	teq	r5, ip
   d80c6:	d105      	bne.n	d80d4 <__aeabi_dmul+0x234>
   d80c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d80cc:	bf1c      	itt	ne
   d80ce:	4610      	movne	r0, r2
   d80d0:	4619      	movne	r1, r3
   d80d2:	d10a      	bne.n	d80ea <__aeabi_dmul+0x24a>
   d80d4:	ea81 0103 	eor.w	r1, r1, r3
   d80d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d80dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d80e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d80e4:	f04f 0000 	mov.w	r0, #0
   d80e8:	bd70      	pop	{r4, r5, r6, pc}
   d80ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d80ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d80f2:	bd70      	pop	{r4, r5, r6, pc}

000d80f4 <__aeabi_ddiv>:
   d80f4:	b570      	push	{r4, r5, r6, lr}
   d80f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d80fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d80fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8102:	bf1d      	ittte	ne
   d8104:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8108:	ea94 0f0c 	teqne	r4, ip
   d810c:	ea95 0f0c 	teqne	r5, ip
   d8110:	f000 f8a7 	bleq	d8262 <__aeabi_ddiv+0x16e>
   d8114:	eba4 0405 	sub.w	r4, r4, r5
   d8118:	ea81 0e03 	eor.w	lr, r1, r3
   d811c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8120:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8124:	f000 8088 	beq.w	d8238 <__aeabi_ddiv+0x144>
   d8128:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d812c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8130:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8134:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8138:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d813c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8140:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8144:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8148:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d814c:	429d      	cmp	r5, r3
   d814e:	bf08      	it	eq
   d8150:	4296      	cmpeq	r6, r2
   d8152:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8156:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d815a:	d202      	bcs.n	d8162 <__aeabi_ddiv+0x6e>
   d815c:	085b      	lsrs	r3, r3, #1
   d815e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8162:	1ab6      	subs	r6, r6, r2
   d8164:	eb65 0503 	sbc.w	r5, r5, r3
   d8168:	085b      	lsrs	r3, r3, #1
   d816a:	ea4f 0232 	mov.w	r2, r2, rrx
   d816e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8172:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8176:	ebb6 0e02 	subs.w	lr, r6, r2
   d817a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d817e:	bf22      	ittt	cs
   d8180:	1ab6      	subcs	r6, r6, r2
   d8182:	4675      	movcs	r5, lr
   d8184:	ea40 000c 	orrcs.w	r0, r0, ip
   d8188:	085b      	lsrs	r3, r3, #1
   d818a:	ea4f 0232 	mov.w	r2, r2, rrx
   d818e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8192:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8196:	bf22      	ittt	cs
   d8198:	1ab6      	subcs	r6, r6, r2
   d819a:	4675      	movcs	r5, lr
   d819c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d81a0:	085b      	lsrs	r3, r3, #1
   d81a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d81a6:	ebb6 0e02 	subs.w	lr, r6, r2
   d81aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d81ae:	bf22      	ittt	cs
   d81b0:	1ab6      	subcs	r6, r6, r2
   d81b2:	4675      	movcs	r5, lr
   d81b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d81b8:	085b      	lsrs	r3, r3, #1
   d81ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d81be:	ebb6 0e02 	subs.w	lr, r6, r2
   d81c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d81c6:	bf22      	ittt	cs
   d81c8:	1ab6      	subcs	r6, r6, r2
   d81ca:	4675      	movcs	r5, lr
   d81cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d81d0:	ea55 0e06 	orrs.w	lr, r5, r6
   d81d4:	d018      	beq.n	d8208 <__aeabi_ddiv+0x114>
   d81d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d81da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d81de:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d81e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d81e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d81ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d81ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d81f2:	d1c0      	bne.n	d8176 <__aeabi_ddiv+0x82>
   d81f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d81f8:	d10b      	bne.n	d8212 <__aeabi_ddiv+0x11e>
   d81fa:	ea41 0100 	orr.w	r1, r1, r0
   d81fe:	f04f 0000 	mov.w	r0, #0
   d8202:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8206:	e7b6      	b.n	d8176 <__aeabi_ddiv+0x82>
   d8208:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d820c:	bf04      	itt	eq
   d820e:	4301      	orreq	r1, r0
   d8210:	2000      	moveq	r0, #0
   d8212:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8216:	bf88      	it	hi
   d8218:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d821c:	f63f aeaf 	bhi.w	d7f7e <__aeabi_dmul+0xde>
   d8220:	ebb5 0c03 	subs.w	ip, r5, r3
   d8224:	bf04      	itt	eq
   d8226:	ebb6 0c02 	subseq.w	ip, r6, r2
   d822a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d822e:	f150 0000 	adcs.w	r0, r0, #0
   d8232:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8236:	bd70      	pop	{r4, r5, r6, pc}
   d8238:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d823c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8240:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8244:	bfc2      	ittt	gt
   d8246:	ebd4 050c 	rsbsgt	r5, r4, ip
   d824a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d824e:	bd70      	popgt	{r4, r5, r6, pc}
   d8250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8254:	f04f 0e00 	mov.w	lr, #0
   d8258:	3c01      	subs	r4, #1
   d825a:	e690      	b.n	d7f7e <__aeabi_dmul+0xde>
   d825c:	ea45 0e06 	orr.w	lr, r5, r6
   d8260:	e68d      	b.n	d7f7e <__aeabi_dmul+0xde>
   d8262:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8266:	ea94 0f0c 	teq	r4, ip
   d826a:	bf08      	it	eq
   d826c:	ea95 0f0c 	teqeq	r5, ip
   d8270:	f43f af3b 	beq.w	d80ea <__aeabi_dmul+0x24a>
   d8274:	ea94 0f0c 	teq	r4, ip
   d8278:	d10a      	bne.n	d8290 <__aeabi_ddiv+0x19c>
   d827a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d827e:	f47f af34 	bne.w	d80ea <__aeabi_dmul+0x24a>
   d8282:	ea95 0f0c 	teq	r5, ip
   d8286:	f47f af25 	bne.w	d80d4 <__aeabi_dmul+0x234>
   d828a:	4610      	mov	r0, r2
   d828c:	4619      	mov	r1, r3
   d828e:	e72c      	b.n	d80ea <__aeabi_dmul+0x24a>
   d8290:	ea95 0f0c 	teq	r5, ip
   d8294:	d106      	bne.n	d82a4 <__aeabi_ddiv+0x1b0>
   d8296:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d829a:	f43f aefd 	beq.w	d8098 <__aeabi_dmul+0x1f8>
   d829e:	4610      	mov	r0, r2
   d82a0:	4619      	mov	r1, r3
   d82a2:	e722      	b.n	d80ea <__aeabi_dmul+0x24a>
   d82a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d82a8:	bf18      	it	ne
   d82aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d82ae:	f47f aec5 	bne.w	d803c <__aeabi_dmul+0x19c>
   d82b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d82b6:	f47f af0d 	bne.w	d80d4 <__aeabi_dmul+0x234>
   d82ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d82be:	f47f aeeb 	bne.w	d8098 <__aeabi_dmul+0x1f8>
   d82c2:	e712      	b.n	d80ea <__aeabi_dmul+0x24a>

000d82c4 <__gedf2>:
   d82c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d82c8:	e006      	b.n	d82d8 <__cmpdf2+0x4>
   d82ca:	bf00      	nop

000d82cc <__ledf2>:
   d82cc:	f04f 0c01 	mov.w	ip, #1
   d82d0:	e002      	b.n	d82d8 <__cmpdf2+0x4>
   d82d2:	bf00      	nop

000d82d4 <__cmpdf2>:
   d82d4:	f04f 0c01 	mov.w	ip, #1
   d82d8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d82dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d82e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d82e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d82e8:	bf18      	it	ne
   d82ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d82ee:	d01b      	beq.n	d8328 <__cmpdf2+0x54>
   d82f0:	b001      	add	sp, #4
   d82f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d82f6:	bf0c      	ite	eq
   d82f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d82fc:	ea91 0f03 	teqne	r1, r3
   d8300:	bf02      	ittt	eq
   d8302:	ea90 0f02 	teqeq	r0, r2
   d8306:	2000      	moveq	r0, #0
   d8308:	4770      	bxeq	lr
   d830a:	f110 0f00 	cmn.w	r0, #0
   d830e:	ea91 0f03 	teq	r1, r3
   d8312:	bf58      	it	pl
   d8314:	4299      	cmppl	r1, r3
   d8316:	bf08      	it	eq
   d8318:	4290      	cmpeq	r0, r2
   d831a:	bf2c      	ite	cs
   d831c:	17d8      	asrcs	r0, r3, #31
   d831e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8322:	f040 0001 	orr.w	r0, r0, #1
   d8326:	4770      	bx	lr
   d8328:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d832c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8330:	d102      	bne.n	d8338 <__cmpdf2+0x64>
   d8332:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8336:	d107      	bne.n	d8348 <__cmpdf2+0x74>
   d8338:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d833c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8340:	d1d6      	bne.n	d82f0 <__cmpdf2+0x1c>
   d8342:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8346:	d0d3      	beq.n	d82f0 <__cmpdf2+0x1c>
   d8348:	f85d 0b04 	ldr.w	r0, [sp], #4
   d834c:	4770      	bx	lr
   d834e:	bf00      	nop

000d8350 <__aeabi_cdrcmple>:
   d8350:	4684      	mov	ip, r0
   d8352:	4610      	mov	r0, r2
   d8354:	4662      	mov	r2, ip
   d8356:	468c      	mov	ip, r1
   d8358:	4619      	mov	r1, r3
   d835a:	4663      	mov	r3, ip
   d835c:	e000      	b.n	d8360 <__aeabi_cdcmpeq>
   d835e:	bf00      	nop

000d8360 <__aeabi_cdcmpeq>:
   d8360:	b501      	push	{r0, lr}
   d8362:	f7ff ffb7 	bl	d82d4 <__cmpdf2>
   d8366:	2800      	cmp	r0, #0
   d8368:	bf48      	it	mi
   d836a:	f110 0f00 	cmnmi.w	r0, #0
   d836e:	bd01      	pop	{r0, pc}

000d8370 <__aeabi_dcmpeq>:
   d8370:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8374:	f7ff fff4 	bl	d8360 <__aeabi_cdcmpeq>
   d8378:	bf0c      	ite	eq
   d837a:	2001      	moveq	r0, #1
   d837c:	2000      	movne	r0, #0
   d837e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8382:	bf00      	nop

000d8384 <__aeabi_dcmplt>:
   d8384:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8388:	f7ff ffea 	bl	d8360 <__aeabi_cdcmpeq>
   d838c:	bf34      	ite	cc
   d838e:	2001      	movcc	r0, #1
   d8390:	2000      	movcs	r0, #0
   d8392:	f85d fb08 	ldr.w	pc, [sp], #8
   d8396:	bf00      	nop

000d8398 <__aeabi_dcmple>:
   d8398:	f84d ed08 	str.w	lr, [sp, #-8]!
   d839c:	f7ff ffe0 	bl	d8360 <__aeabi_cdcmpeq>
   d83a0:	bf94      	ite	ls
   d83a2:	2001      	movls	r0, #1
   d83a4:	2000      	movhi	r0, #0
   d83a6:	f85d fb08 	ldr.w	pc, [sp], #8
   d83aa:	bf00      	nop

000d83ac <__aeabi_dcmpge>:
   d83ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d83b0:	f7ff ffce 	bl	d8350 <__aeabi_cdrcmple>
   d83b4:	bf94      	ite	ls
   d83b6:	2001      	movls	r0, #1
   d83b8:	2000      	movhi	r0, #0
   d83ba:	f85d fb08 	ldr.w	pc, [sp], #8
   d83be:	bf00      	nop

000d83c0 <__aeabi_dcmpgt>:
   d83c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d83c4:	f7ff ffc4 	bl	d8350 <__aeabi_cdrcmple>
   d83c8:	bf34      	ite	cc
   d83ca:	2001      	movcc	r0, #1
   d83cc:	2000      	movcs	r0, #0
   d83ce:	f85d fb08 	ldr.w	pc, [sp], #8
   d83d2:	bf00      	nop

000d83d4 <__aeabi_dcmpun>:
   d83d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d83d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d83dc:	d102      	bne.n	d83e4 <__aeabi_dcmpun+0x10>
   d83de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d83e2:	d10a      	bne.n	d83fa <__aeabi_dcmpun+0x26>
   d83e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d83e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d83ec:	d102      	bne.n	d83f4 <__aeabi_dcmpun+0x20>
   d83ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d83f2:	d102      	bne.n	d83fa <__aeabi_dcmpun+0x26>
   d83f4:	f04f 0000 	mov.w	r0, #0
   d83f8:	4770      	bx	lr
   d83fa:	f04f 0001 	mov.w	r0, #1
   d83fe:	4770      	bx	lr

000d8400 <__aeabi_d2iz>:
   d8400:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8404:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8408:	d215      	bcs.n	d8436 <__aeabi_d2iz+0x36>
   d840a:	d511      	bpl.n	d8430 <__aeabi_d2iz+0x30>
   d840c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8410:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8414:	d912      	bls.n	d843c <__aeabi_d2iz+0x3c>
   d8416:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d841a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d841e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8422:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8426:	fa23 f002 	lsr.w	r0, r3, r2
   d842a:	bf18      	it	ne
   d842c:	4240      	negne	r0, r0
   d842e:	4770      	bx	lr
   d8430:	f04f 0000 	mov.w	r0, #0
   d8434:	4770      	bx	lr
   d8436:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d843a:	d105      	bne.n	d8448 <__aeabi_d2iz+0x48>
   d843c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8440:	bf08      	it	eq
   d8442:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8446:	4770      	bx	lr
   d8448:	f04f 0000 	mov.w	r0, #0
   d844c:	4770      	bx	lr
   d844e:	bf00      	nop

000d8450 <__aeabi_d2uiz>:
   d8450:	004a      	lsls	r2, r1, #1
   d8452:	d211      	bcs.n	d8478 <__aeabi_d2uiz+0x28>
   d8454:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8458:	d211      	bcs.n	d847e <__aeabi_d2uiz+0x2e>
   d845a:	d50d      	bpl.n	d8478 <__aeabi_d2uiz+0x28>
   d845c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8460:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8464:	d40e      	bmi.n	d8484 <__aeabi_d2uiz+0x34>
   d8466:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d846a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d846e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8472:	fa23 f002 	lsr.w	r0, r3, r2
   d8476:	4770      	bx	lr
   d8478:	f04f 0000 	mov.w	r0, #0
   d847c:	4770      	bx	lr
   d847e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8482:	d102      	bne.n	d848a <__aeabi_d2uiz+0x3a>
   d8484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8488:	4770      	bx	lr
   d848a:	f04f 0000 	mov.w	r0, #0
   d848e:	4770      	bx	lr

000d8490 <__aeabi_d2f>:
   d8490:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8494:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8498:	bf24      	itt	cs
   d849a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d849e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d84a2:	d90d      	bls.n	d84c0 <__aeabi_d2f+0x30>
   d84a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d84a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d84ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d84b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d84b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d84b8:	bf08      	it	eq
   d84ba:	f020 0001 	biceq.w	r0, r0, #1
   d84be:	4770      	bx	lr
   d84c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d84c4:	d121      	bne.n	d850a <__aeabi_d2f+0x7a>
   d84c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d84ca:	bfbc      	itt	lt
   d84cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d84d0:	4770      	bxlt	lr
   d84d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d84d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d84da:	f1c2 0218 	rsb	r2, r2, #24
   d84de:	f1c2 0c20 	rsb	ip, r2, #32
   d84e2:	fa10 f30c 	lsls.w	r3, r0, ip
   d84e6:	fa20 f002 	lsr.w	r0, r0, r2
   d84ea:	bf18      	it	ne
   d84ec:	f040 0001 	orrne.w	r0, r0, #1
   d84f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d84f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d84f8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d84fc:	ea40 000c 	orr.w	r0, r0, ip
   d8500:	fa23 f302 	lsr.w	r3, r3, r2
   d8504:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8508:	e7cc      	b.n	d84a4 <__aeabi_d2f+0x14>
   d850a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d850e:	d107      	bne.n	d8520 <__aeabi_d2f+0x90>
   d8510:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8514:	bf1e      	ittt	ne
   d8516:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d851a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d851e:	4770      	bxne	lr
   d8520:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8524:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8528:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d852c:	4770      	bx	lr
   d852e:	bf00      	nop

000d8530 <__cxa_atexit>:
   d8530:	b510      	push	{r4, lr}
   d8532:	4c05      	ldr	r4, [pc, #20]	; (d8548 <__cxa_atexit+0x18>)
   d8534:	4613      	mov	r3, r2
   d8536:	b12c      	cbz	r4, d8544 <__cxa_atexit+0x14>
   d8538:	460a      	mov	r2, r1
   d853a:	4601      	mov	r1, r0
   d853c:	2002      	movs	r0, #2
   d853e:	f3af 8000 	nop.w
   d8542:	bd10      	pop	{r4, pc}
   d8544:	4620      	mov	r0, r4
   d8546:	e7fc      	b.n	d8542 <__cxa_atexit+0x12>
   d8548:	00000000 	.word	0x00000000

000d854c <memcmp>:
   d854c:	b530      	push	{r4, r5, lr}
   d854e:	3901      	subs	r1, #1
   d8550:	2400      	movs	r4, #0
   d8552:	42a2      	cmp	r2, r4
   d8554:	d101      	bne.n	d855a <memcmp+0xe>
   d8556:	2000      	movs	r0, #0
   d8558:	e005      	b.n	d8566 <memcmp+0x1a>
   d855a:	5d03      	ldrb	r3, [r0, r4]
   d855c:	3401      	adds	r4, #1
   d855e:	5d0d      	ldrb	r5, [r1, r4]
   d8560:	42ab      	cmp	r3, r5
   d8562:	d0f6      	beq.n	d8552 <memcmp+0x6>
   d8564:	1b58      	subs	r0, r3, r5
   d8566:	bd30      	pop	{r4, r5, pc}

000d8568 <memcpy>:
   d8568:	440a      	add	r2, r1
   d856a:	4291      	cmp	r1, r2
   d856c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8570:	d100      	bne.n	d8574 <memcpy+0xc>
   d8572:	4770      	bx	lr
   d8574:	b510      	push	{r4, lr}
   d8576:	f811 4b01 	ldrb.w	r4, [r1], #1
   d857a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d857e:	4291      	cmp	r1, r2
   d8580:	d1f9      	bne.n	d8576 <memcpy+0xe>
   d8582:	bd10      	pop	{r4, pc}

000d8584 <memset>:
   d8584:	4402      	add	r2, r0
   d8586:	4603      	mov	r3, r0
   d8588:	4293      	cmp	r3, r2
   d858a:	d100      	bne.n	d858e <memset+0xa>
   d858c:	4770      	bx	lr
   d858e:	f803 1b01 	strb.w	r1, [r3], #1
   d8592:	e7f9      	b.n	d8588 <memset+0x4>

000d8594 <srand>:
   d8594:	b538      	push	{r3, r4, r5, lr}
   d8596:	4b0d      	ldr	r3, [pc, #52]	; (d85cc <srand+0x38>)
   d8598:	681d      	ldr	r5, [r3, #0]
   d859a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d859c:	4604      	mov	r4, r0
   d859e:	b97b      	cbnz	r3, d85c0 <srand+0x2c>
   d85a0:	2018      	movs	r0, #24
   d85a2:	f7fd fe6b 	bl	d627c <malloc>
   d85a6:	4a0a      	ldr	r2, [pc, #40]	; (d85d0 <srand+0x3c>)
   d85a8:	4b0a      	ldr	r3, [pc, #40]	; (d85d4 <srand+0x40>)
   d85aa:	63a8      	str	r0, [r5, #56]	; 0x38
   d85ac:	e9c0 2300 	strd	r2, r3, [r0]
   d85b0:	4b09      	ldr	r3, [pc, #36]	; (d85d8 <srand+0x44>)
   d85b2:	6083      	str	r3, [r0, #8]
   d85b4:	230b      	movs	r3, #11
   d85b6:	8183      	strh	r3, [r0, #12]
   d85b8:	2201      	movs	r2, #1
   d85ba:	2300      	movs	r3, #0
   d85bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d85c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d85c2:	2200      	movs	r2, #0
   d85c4:	611c      	str	r4, [r3, #16]
   d85c6:	615a      	str	r2, [r3, #20]
   d85c8:	bd38      	pop	{r3, r4, r5, pc}
   d85ca:	bf00      	nop
   d85cc:	2003e1bc 	.word	0x2003e1bc
   d85d0:	abcd330e 	.word	0xabcd330e
   d85d4:	e66d1234 	.word	0xe66d1234
   d85d8:	0005deec 	.word	0x0005deec

000d85dc <strdup>:
   d85dc:	4b02      	ldr	r3, [pc, #8]	; (d85e8 <strdup+0xc>)
   d85de:	4601      	mov	r1, r0
   d85e0:	6818      	ldr	r0, [r3, #0]
   d85e2:	f000 b803 	b.w	d85ec <_strdup_r>
   d85e6:	bf00      	nop
   d85e8:	2003e1bc 	.word	0x2003e1bc

000d85ec <_strdup_r>:
   d85ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d85ee:	4604      	mov	r4, r0
   d85f0:	4608      	mov	r0, r1
   d85f2:	460d      	mov	r5, r1
   d85f4:	f000 f80f 	bl	d8616 <strlen>
   d85f8:	1c42      	adds	r2, r0, #1
   d85fa:	4611      	mov	r1, r2
   d85fc:	4620      	mov	r0, r4
   d85fe:	9201      	str	r2, [sp, #4]
   d8600:	f7fd fe64 	bl	d62cc <_malloc_r>
   d8604:	4604      	mov	r4, r0
   d8606:	b118      	cbz	r0, d8610 <_strdup_r+0x24>
   d8608:	9a01      	ldr	r2, [sp, #4]
   d860a:	4629      	mov	r1, r5
   d860c:	f7ff ffac 	bl	d8568 <memcpy>
   d8610:	4620      	mov	r0, r4
   d8612:	b003      	add	sp, #12
   d8614:	bd30      	pop	{r4, r5, pc}

000d8616 <strlen>:
   d8616:	4603      	mov	r3, r0
   d8618:	f813 2b01 	ldrb.w	r2, [r3], #1
   d861c:	2a00      	cmp	r2, #0
   d861e:	d1fb      	bne.n	d8618 <strlen+0x2>
   d8620:	1a18      	subs	r0, r3, r0
   d8622:	3801      	subs	r0, #1
   d8624:	4770      	bx	lr

000d8626 <link_code_end>:
	...

000d8628 <dynalib_user>:
   d8628:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d8638:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   d8648:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d8658:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d8668:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   d8678:	4f4d 4544 7525 003e 614d 6278 746f 7869     MODE%u>.Maxbotix
   d8688:	5420 7365 0074 6964 7473 6e61 6563 742e      Test.distance.t
   d8698:	7478 6600 6961 656c 2064 6f74 6f20 6570     xt.failed to ope
   d86a8:	206e 6163 6472 6f00 6570 696e 676e 7420     n card.opening t
   d86b8:	7365 2e74 7874 2074 6f66 2072 7277 7469     est.txt for writ
   d86c8:	2065 6166 6c69 6465 2c00 5400 7972 6e69     e failed.,.Tryin
   d86d8:	2067 6f74 6320 6e6f 656e 7463 2500 696c     g to connect.%li
   d86e8:	252c 352e 2c66 2e25 3230 2c66 2e25 3230     ,%.5f,%.02f,%.02
   d86f8:	0066 7570 6c62 7369 6968 676e 6420 7461     f.publishing dat
   d8708:	0061 616d 2078 6974 656d 6620 726f 7020     a.max time for p
   d8718:	6275 696c 6873 6e69 2067 6572 6361 6568     ublishing reache
   d8728:	2064 6977 6874 756f 2074 7573 6363 7365     d without succes
   d8738:	3b73 6720 206f 6f74 7320 656c 7065 4e00     s; go to sleep.N
   d8748:	746f 6d20 7861 7420 6d69 2c65 7420 7972     ot max time, try
   d8758:	6120 6167 6e69 7420 206f 7570 6c62 7369      again to publis
   d8768:	0068 6f67 6e69 2067 6f74 7320 656c 7065     h.going to sleep
   d8778:	4600 6565 696c 676e 7220 7365 6c74 7365     .Feeling restles
   d8788:	0073 0000                                   s...

000d878c <_ZTVN8particle11SPISettingsE>:
	...
   d8794:	417d 000d 40b3 000d 411d 000d               }A...@...A..

000d87a0 <_ZTV4File>:
	...
   d87a8:	40cf 000d 4143 000d 4105 000d 40ff 000d     .@..CA...A...@..
   d87b8:	40b5 000d 40df 000d 40d9 000d 40d3 000d     .@...@...@...@..
   d87c8:	6553 4c61 7665 6c65 425f 6f54 6e77 0000     SeaLevel_BTown..

000d87d8 <_ZTVN5spark13CellularClassE>:
	...
   d87e0:	63f7 000d 63ed 000d 63e3 000d 6399 000d     .c...c...c...c..
   d87f0:	63d7 000d 63cb 000d 6dc5 000d 6dcd 000d     .c...c...m...m..
   d8800:	63bf 000d 63b7 000d 63ad 000d 63a3 000d     .c...c...c...c..
   d8810:	6dfd 000d                                   .m..

000d8814 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d881c:	6431 000d 6437 000d 6487 000d 6445 000d     1d..7d...d..Ed..
   d882c:	6433 000d                                   3d..

000d8830 <_ZTVN5spark13EthernetClassE>:
	...
   d8838:	69ff 000d 69f5 000d 69eb 000d 69e1 000d     .i...i...i...i..
   d8848:	69d5 000d 69c9 000d 6dc5 000d 6dcd 000d     .i...i...m...m..
   d8858:	69bd 000d 69b5 000d 69ab 000d 69a1 000d     .i...i...i...i..
   d8868:	6dfd 000d                                   .m..

000d886c <_ZTV7TwoWire>:
	...
   d8874:	6b89 000d 6bd3 000d 6bab 000d 6b8b 000d     .k...k...k...k..
   d8884:	6bb3 000d 6bbb 000d 6bc3 000d 6bcb 000d     .k...k...k...k..

000d8894 <_ZTV9IPAddress>:
	...
   d889c:	6c9f 000d 6c8f 000d 6c91 000d 7061 0070     .l...l...l..app.

000d88ac <_ZTVN5spark12NetworkClassE>:
	...
   d88b4:	6d85 000d 6d8f 000d 6d99 000d 6da3 000d     .m...m...m...m..
   d88c4:	6dad 000d 6db9 000d 6dc5 000d 6dcd 000d     .m...m...m...m..
   d88d4:	6dd5 000d 6de1 000d 6de9 000d 6df3 000d     .m...m...m...m..
   d88e4:	6dfd 000d 616e 006e 6e69 0066 766f 0066     .m..nan.inf.ovf.

000d88f4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d88f4:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   d8904:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   d8914:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   d8924:	6c61 6469 002e 5925 252d 2d6d 6425 2554     alid..%Y-%m-%dT%
   d8934:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d8944:	0065 0000                                   e...

000d8948 <_ZTV11USARTSerial>:
	...
   d8950:	75a9 000d 7615 000d 75ed 000d 6f21 000d     .u...v...u..!o..
   d8960:	75bd 000d 75d9 000d 75cb 000d 75e7 000d     .u...u...u...u..
   d8970:	75ab 000d 75af 000d                         .u...u..

000d8978 <_ZTV9USBSerial>:
	...
   d8980:	76dd 000d 7745 000d 771b 000d 6f21 000d     .v..Ew...w..!o..
   d8990:	770d 000d 76df 000d 76ef 000d 773f 000d     .w...v...v..?w..
   d89a0:	76ff 000d 76d9 000d                         .v...v..

000d89a8 <_ZSt7nothrow>:
	...

000d89a9 <link_const_variable_data_end>:
   d89a9:	00          	.byte	0x00
	...

000d89ac <link_constructors_location>:
   d89ac:	000d4665 	.word	0x000d4665
   d89b0:	000d6371 	.word	0x000d6371
   d89b4:	000d6401 	.word	0x000d6401
   d89b8:	000d6a09 	.word	0x000d6a09
   d89bc:	000d6d75 	.word	0x000d6d75
   d89c0:	000d6ed1 	.word	0x000d6ed1
   d89c4:	000d7215 	.word	0x000d7215
   d89c8:	000d74e5 	.word	0x000d74e5
   d89cc:	000d7595 	.word	0x000d7595
