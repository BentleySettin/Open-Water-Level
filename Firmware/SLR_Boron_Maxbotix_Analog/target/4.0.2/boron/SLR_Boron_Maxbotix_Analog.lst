
/Users/pjb/Dropbox/Open-Water-Level/Firmware/SLR_Boron_Maxbotix_Analog/target/4.0.2/boron/SLR_Boron_Maxbotix_Analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002fd0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6ff0  000b6ff0  00006ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7014  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e13c  000b7018  0001e13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000644  2003e1ac  2003e1ac  0002e1ac  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7088  000b7088  00027088  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b70b0  000b70b0  000270b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00132803  00000000  00000000  000270b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013f8f  00000000  00000000  001598b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00039c06  00000000  00000000  0016d846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002be8  00000000  00000000  001a744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a840  00000000  00000000  001aa034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c7e6  00000000  00000000  001b4874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00041374  00000000  00000000  001f105a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013eaf2  00000000  00000000  002323ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007cb8  00000000  00000000  00370ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 fd35 	bl	b6aa0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fd3d 	bl	b6abc <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e13c 	.word	0x2003e13c
   b404c:	000b7018 	.word	0x000b7018
   b4050:	2003e1ac 	.word	0x2003e1ac
   b4054:	2003e1ac 	.word	0x2003e1ac
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 fec5 	bl	b5df0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b6fc0 	.word	0x000b6fc0
   b4080:	000b6fe4 	.word	0x000b6fe4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b856 	b.w	b4134 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f869 	bl	b4160 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 be65 	b.w	b5d60 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bcb5 	b.w	b4a04 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bcb3 	b.w	b4a04 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bcb9 	b.w	b4a14 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40b2:	4770      	bx	lr

000b40b4 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40b4:	b510      	push	{r4, lr}
  }
   b40b6:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40b8:	4604      	mov	r4, r0
  }
   b40ba:	f7ff fff0 	bl	b409e <_ZdlPvj>
   b40be:	4620      	mov	r0, r4
   b40c0:	bd10      	pop	{r4, pc}

000b40c2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c2:	b40e      	push	{r1, r2, r3}
   b40c4:	b503      	push	{r0, r1, lr}
   b40c6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40c8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ca:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ce:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d0:	f001 fc27 	bl	b5922 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d4:	b002      	add	sp, #8
   b40d6:	f85d eb04 	ldr.w	lr, [sp], #4
   b40da:	b003      	add	sp, #12
   b40dc:	4770      	bx	lr
	...

000b40e0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b40e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b40e2:	4604      	mov	r4, r0
   b40e4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b40e6:	7922      	ldrb	r2, [r4, #4]
   b40e8:	68a3      	ldr	r3, [r4, #8]
   b40ea:	b132      	cbz	r2, b40fa <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b40ec:	b9a3      	cbnz	r3, b4118 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b40ee:	490b      	ldr	r1, [pc, #44]	; (b411c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b40f0:	b002      	add	sp, #8
   b40f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b40f6:	f001 bae8 	b.w	b56ca <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b40fa:	4a09      	ldr	r2, [pc, #36]	; (b4120 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b40fc:	7b26      	ldrb	r6, [r4, #12]
   b40fe:	4d09      	ldr	r5, [pc, #36]	; (b4124 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4100:	4909      	ldr	r1, [pc, #36]	; (b4128 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4102:	7b64      	ldrb	r4, [r4, #13]
   b4104:	2e01      	cmp	r6, #1
   b4106:	bf18      	it	ne
   b4108:	4629      	movne	r1, r5
   b410a:	e9cd 1400 	strd	r1, r4, [sp]
   b410e:	4907      	ldr	r1, [pc, #28]	; (b412c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4110:	f7ff ffd7 	bl	b40c2 <_ZN5Print6printfEPKcz>
  }
   b4114:	b002      	add	sp, #8
   b4116:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4118:	4a05      	ldr	r2, [pc, #20]	; (b4130 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b411a:	e7ef      	b.n	b40fc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b411c:	000b6c65 	.word	0x000b6c65
   b4120:	000b6c5c 	.word	0x000b6c5c
   b4124:	000b6c61 	.word	0x000b6c61
   b4128:	000b6c5d 	.word	0x000b6c5d
   b412c:	000b6c7b 	.word	0x000b6c7b
   b4130:	000b6c54 	.word	0x000b6c54

000b4134 <setup>:
   b4134:	b508      	push	{r3, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4136:	f000 fbdd 	bl	b48f4 <spark_cloud_flag_connect>
   b413a:	f241 3088 	movw	r0, #5000	; 0x1388
   b413e:	f000 fca1 	bl	b4a84 <delay>
   b4142:	f001 fdc5 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b4146:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b414a:	f001 fdb5 	bl	b5cb8 <_ZN9USBSerial5beginEl>
   b414e:	f001 fdbf 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b4152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4156:	4901      	ldr	r1, [pc, #4]	; (b415c <setup+0x28>)
   b4158:	f001 baca 	b.w	b56f0 <_ZN5Print7printlnEPKc>
   b415c:	000b6c98 	.word	0x000b6c98

000b4160 <loop>:
   b4160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4164:	4ea6      	ldr	r6, [pc, #664]	; (b4400 <loop+0x2a0>)
   b4166:	ed2d 8b02 	vpush	{d8}
   b416a:	7833      	ldrb	r3, [r6, #0]
   b416c:	b0a8      	sub	sp, #160	; 0xa0
   b416e:	b13b      	cbz	r3, b4180 <loop+0x20>
   b4170:	2b01      	cmp	r3, #1
   b4172:	f000 80fb 	beq.w	b436c <loop+0x20c>
   b4176:	b028      	add	sp, #160	; 0xa0
   b4178:	ecbd 8b02 	vpop	{d8}
   b417c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4180:	4fa0      	ldr	r7, [pc, #640]	; (b4404 <loop+0x2a4>)
   b4182:	f8df a2b4 	ldr.w	sl, [pc, #692]	; b4438 <loop+0x2d8>
   b4186:	f20f 2968 	addw	r9, pc, #616	; 0x268
   b418a:	e9d9 8900 	ldrd	r8, r9, [r9]
   b418e:	a59a      	add	r5, pc, #616	; (adr r5, b43f8 <loop+0x298>)
   b4190:	e9d5 4500 	ldrd	r4, r5, [r5]
   b4194:	2200      	movs	r2, #0
   b4196:	603a      	str	r2, [r7, #0]
   b4198:	f8ca 3000 	str.w	r3, [sl]
   b419c:	f8da 3000 	ldr.w	r3, [sl]
   b41a0:	2b63      	cmp	r3, #99	; 0x63
   b41a2:	dc30      	bgt.n	b4206 <loop+0xa6>
   b41a4:	2012      	movs	r0, #18
   b41a6:	f001 fe93 	bl	b5ed0 <analogRead>
   b41aa:	ee07 0a90 	vmov	s15, r0
   b41ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b41b2:	ee17 0a90 	vmov	r0, s15
   b41b6:	f002 f8cd 	bl	b6354 <__aeabi_f2d>
   b41ba:	4642      	mov	r2, r8
   b41bc:	464b      	mov	r3, r9
   b41be:	f002 f921 	bl	b6404 <__aeabi_dmul>
   b41c2:	f002 fc17 	bl	b69f4 <__aeabi_d2f>
   b41c6:	f002 f8c5 	bl	b6354 <__aeabi_f2d>
   b41ca:	462b      	mov	r3, r5
   b41cc:	4622      	mov	r2, r4
   b41ce:	f002 f919 	bl	b6404 <__aeabi_dmul>
   b41d2:	f002 fc0f 	bl	b69f4 <__aeabi_d2f>
   b41d6:	edd7 7a00 	vldr	s15, [r7]
   b41da:	ee08 0a10 	vmov	s16, r0
   b41de:	ee77 7a88 	vadd.f32	s15, s15, s16
   b41e2:	edc7 7a00 	vstr	s15, [r7]
   b41e6:	f001 fd73 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b41ea:	2102      	movs	r1, #2
   b41ec:	eeb0 0a48 	vmov.f32	s0, s16
   b41f0:	f001 fb88 	bl	b5904 <_ZN5Print7printlnEfi>
   b41f4:	2064      	movs	r0, #100	; 0x64
   b41f6:	f000 fc45 	bl	b4a84 <delay>
   b41fa:	f8da 3000 	ldr.w	r3, [sl]
   b41fe:	3301      	adds	r3, #1
   b4200:	f8ca 3000 	str.w	r3, [sl]
   b4204:	e7ca      	b.n	b419c <loop+0x3c>
   b4206:	ee07 3a90 	vmov	s15, r3
   b420a:	edd7 6a00 	vldr	s13, [r7]
   b420e:	4d7e      	ldr	r5, [pc, #504]	; (b4408 <loop+0x2a8>)
   b4210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b4218:	ed85 7a00 	vstr	s14, [r5]
   b421c:	f001 fd58 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b4220:	f8da 4000 	ldr.w	r4, [sl]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4224:	2c00      	cmp	r4, #0
   b4226:	4680      	mov	r8, r0
   b4228:	f280 8084 	bge.w	b4334 <loop+0x1d4>
            t = print('-');
   b422c:	212d      	movs	r1, #45	; 0x2d
   b422e:	f001 fa50 	bl	b56d2 <_ZN5Print5printEc>
            val = -n;
   b4232:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4234:	220a      	movs	r2, #10
   b4236:	4640      	mov	r0, r8
   b4238:	f001 fa64 	bl	b5704 <_ZN5Print11printNumberEmh>
   b423c:	f001 fd48 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b4240:	4972      	ldr	r1, [pc, #456]	; (b440c <loop+0x2ac>)
   b4242:	f8df 91f8 	ldr.w	r9, [pc, #504]	; b443c <loop+0x2dc>
   b4246:	f8df a1f8 	ldr.w	sl, [pc, #504]	; b4440 <loop+0x2e0>
   b424a:	f8df 81f8 	ldr.w	r8, [pc, #504]	; b4444 <loop+0x2e4>
   b424e:	f001 fa3c 	bl	b56ca <_ZN5Print5printEPKc>
   b4252:	f001 fd3d 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b4256:	ed97 0a00 	vldr	s0, [r7]
   b425a:	4f6d      	ldr	r7, [pc, #436]	; (b4410 <loop+0x2b0>)
   b425c:	2102      	movs	r1, #2
   b425e:	f001 fb37 	bl	b58d0 <_ZN5Print5printEfi>
   b4262:	f001 fd35 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b4266:	4969      	ldr	r1, [pc, #420]	; (b440c <loop+0x2ac>)
   b4268:	f001 fa2f 	bl	b56ca <_ZN5Print5printEPKc>
   b426c:	f001 fd30 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b4270:	ed95 0a00 	vldr	s0, [r5]
   b4274:	2102      	movs	r1, #2
   b4276:	f001 fb45 	bl	b5904 <_ZN5Print7printlnEfi>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b427a:	f000 f9a3 	bl	b45c4 <HAL_Timer_Get_Milli_Seconds>
   b427e:	6038      	str	r0, [r7, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4280:	f000 fb40 	bl	b4904 <spark_cloud_flag_connected>
   b4284:	b930      	cbnz	r0, b4294 <loop+0x134>
        spark_cloud_flag_connect();
   b4286:	f000 fb35 	bl	b48f4 <spark_cloud_flag_connect>
   b428a:	f001 fd21 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b428e:	4649      	mov	r1, r9
   b4290:	f001 fa1b 	bl	b56ca <_ZN5Print5printEPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4294:	f000 fb36 	bl	b4904 <spark_cloud_flag_connected>
   b4298:	4604      	mov	r4, r0
   b429a:	2800      	cmp	r0, #0
   b429c:	d04c      	beq.n	b4338 <loop+0x1d8>
   b429e:	485d      	ldr	r0, [pc, #372]	; (b4414 <loop+0x2b4>)
   b42a0:	f000 ffe2 	bl	b5268 <_ZN9FuelGauge8getVCellEv>
   b42a4:	485b      	ldr	r0, [pc, #364]	; (b4414 <loop+0x2b4>)
   b42a6:	ee10 4a10 	vmov	r4, s0
   b42aa:	f000 fff9 	bl	b52a0 <_ZN9FuelGauge6getSoCEv>
   b42ae:	ee10 7a10 	vmov	r7, s0
   b42b2:	f001 fc43 	bl	b5b3c <_ZN9TimeClass3nowEv>
   b42b6:	9007      	str	r0, [sp, #28]
   b42b8:	4638      	mov	r0, r7
   b42ba:	f002 f84b 	bl	b6354 <__aeabi_f2d>
   b42be:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b42c2:	4620      	mov	r0, r4
   b42c4:	f002 f846 	bl	b6354 <__aeabi_f2d>
   b42c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b42cc:	6828      	ldr	r0, [r5, #0]
   b42ce:	f002 f841 	bl	b6354 <__aeabi_f2d>
   b42d2:	9b07      	ldr	r3, [sp, #28]
   b42d4:	4a50      	ldr	r2, [pc, #320]	; (b4418 <loop+0x2b8>)
   b42d6:	e9cd 0100 	strd	r0, r1, [sp]
   b42da:	2178      	movs	r1, #120	; 0x78
   b42dc:	a80a      	add	r0, sp, #40	; 0x28
   b42de:	f000 fba1 	bl	b4a24 <snprintf>
   b42e2:	f001 fcf5 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b42e6:	494d      	ldr	r1, [pc, #308]	; (b441c <loop+0x2bc>)
   b42e8:	f001 fa02 	bl	b56f0 <_ZN5Print7printlnEPKc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b42ec:	4b4c      	ldr	r3, [pc, #304]	; (b4420 <loop+0x2c0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b42ee:	494d      	ldr	r1, [pc, #308]	; (b4424 <loop+0x2c4>)
   b42f0:	781b      	ldrb	r3, [r3, #0]
   b42f2:	f88d 3000 	strb.w	r3, [sp]
   b42f6:	6809      	ldr	r1, [r1, #0]
   b42f8:	233c      	movs	r3, #60	; 0x3c
   b42fa:	aa0a      	add	r2, sp, #40	; 0x28
   b42fc:	a808      	add	r0, sp, #32
   b42fe:	f000 fd8f 	bl	b4e20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4302:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b4304:	b17c      	cbz	r4, b4326 <loop+0x1c6>
      if (--_M_use_count == 0)
   b4306:	6863      	ldr	r3, [r4, #4]
   b4308:	3b01      	subs	r3, #1
   b430a:	6063      	str	r3, [r4, #4]
   b430c:	b95b      	cbnz	r3, b4326 <loop+0x1c6>
          _M_dispose();
   b430e:	6823      	ldr	r3, [r4, #0]
   b4310:	4620      	mov	r0, r4
   b4312:	689b      	ldr	r3, [r3, #8]
   b4314:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4316:	68a3      	ldr	r3, [r4, #8]
   b4318:	3b01      	subs	r3, #1
   b431a:	60a3      	str	r3, [r4, #8]
   b431c:	b91b      	cbnz	r3, b4326 <loop+0x1c6>
            _M_destroy();
   b431e:	6823      	ldr	r3, [r4, #0]
   b4320:	4620      	mov	r0, r4
   b4322:	68db      	ldr	r3, [r3, #12]
   b4324:	4798      	blx	r3
   b4326:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   b432a:	f000 fbab 	bl	b4a84 <delay>
   b432e:	2301      	movs	r3, #1
   b4330:	7033      	strb	r3, [r6, #0]
   b4332:	e720      	b.n	b4176 <loop+0x16>
            val = n;
   b4334:	4621      	mov	r1, r4
   b4336:	e77d      	b.n	b4234 <loop+0xd4>
   b4338:	f000 f944 	bl	b45c4 <HAL_Timer_Get_Milli_Seconds>
   b433c:	683b      	ldr	r3, [r7, #0]
   b433e:	1ac0      	subs	r0, r0, r3
   b4340:	f64e 235f 	movw	r3, #59999	; 0xea5f
   b4344:	4298      	cmp	r0, r3
   b4346:	d906      	bls.n	b4356 <loop+0x1f6>
   b4348:	2401      	movs	r4, #1
   b434a:	7034      	strb	r4, [r6, #0]
   b434c:	f001 fcc0 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b4350:	4651      	mov	r1, sl
   b4352:	f001 f9cd 	bl	b56f0 <_ZN5Print7printlnEPKc>
   b4356:	f001 fcbb 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b435a:	4641      	mov	r1, r8
   b435c:	f001 f9c8 	bl	b56f0 <_ZN5Print7printlnEPKc>
   b4360:	2064      	movs	r0, #100	; 0x64
   b4362:	f000 fb8f 	bl	b4a84 <delay>
   b4366:	2c00      	cmp	r4, #0
   b4368:	d08a      	beq.n	b4280 <loop+0x120>
   b436a:	e704      	b.n	b4176 <loop+0x16>
   b436c:	f001 fcb0 	bl	b5cd0 <_Z16_fetch_usbserialv>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4370:	4c2d      	ldr	r4, [pc, #180]	; (b4428 <loop+0x2c8>)
   b4372:	492e      	ldr	r1, [pc, #184]	; (b442c <loop+0x2cc>)
   b4374:	f001 f9bc 	bl	b56f0 <_ZN5Print7printlnEPKc>
   b4378:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b437c:	f000 fb82 	bl	b4a84 <delay>
   b4380:	7d23      	ldrb	r3, [r4, #20]
   b4382:	2b00      	cmp	r3, #0
   b4384:	d073      	beq.n	b446e <loop+0x30e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4386:	2302      	movs	r3, #2
   b4388:	7223      	strb	r3, [r4, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b438a:	6823      	ldr	r3, [r4, #0]
   b438c:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b438e:	b1cb      	cbz	r3, b43c4 <loop+0x264>
            if (start->type == type) {
   b4390:	889a      	ldrh	r2, [r3, #4]
   b4392:	2a01      	cmp	r2, #1
   b4394:	d006      	beq.n	b43a4 <loop+0x244>
            start = start->next;
   b4396:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4398:	e7f9      	b.n	b438e <loop+0x22e>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b439a:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b439c:	b193      	cbz	r3, b43c4 <loop+0x264>
            if (start->type == type) {
   b439e:	889a      	ldrh	r2, [r3, #4]
   b43a0:	2a01      	cmp	r2, #1
   b43a2:	d1fa      	bne.n	b439a <loop+0x23a>
                if (gpioWakeup->pin == pin) {
   b43a4:	899a      	ldrh	r2, [r3, #12]
   b43a6:	2a02      	cmp	r2, #2
   b43a8:	d1f7      	bne.n	b439a <loop+0x23a>
                    gpioWakeup->mode = mode;
   b43aa:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b43ac:	7d23      	ldrb	r3, [r4, #20]
   b43ae:	2b00      	cmp	r3, #0
   b43b0:	d05d      	beq.n	b446e <loop+0x30e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b43b2:	6823      	ldr	r3, [r4, #0]
   b43b4:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b43b6:	2b00      	cmp	r3, #0
   b43b8:	d046      	beq.n	b4448 <loop+0x2e8>
            if (start->type == type) {
   b43ba:	889a      	ldrh	r2, [r3, #4]
   b43bc:	2a04      	cmp	r2, #4
   b43be:	d069      	beq.n	b4494 <loop+0x334>
            start = start->next;
   b43c0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b43c2:	e7f8      	b.n	b43b6 <loop+0x256>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b43c4:	491a      	ldr	r1, [pc, #104]	; (b4430 <loop+0x2d0>)
   b43c6:	2010      	movs	r0, #16
   b43c8:	f001 fe58 	bl	b607c <_ZnwjRKSt9nothrow_t>
   b43cc:	4605      	mov	r5, r0
   b43ce:	2800      	cmp	r0, #0
   b43d0:	d063      	beq.n	b449a <loop+0x33a>
   b43d2:	2210      	movs	r2, #16
   b43d4:	2100      	movs	r1, #0
   b43d6:	f002 fb71 	bl	b6abc <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b43da:	4b16      	ldr	r3, [pc, #88]	; (b4434 <loop+0x2d4>)
   b43dc:	602b      	str	r3, [r5, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b43de:	2301      	movs	r3, #1
   b43e0:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b43e2:	6923      	ldr	r3, [r4, #16]
   b43e4:	60ab      	str	r3, [r5, #8]
            wakeupSource->pin = pin;
   b43e6:	2302      	movs	r3, #2
   b43e8:	81ab      	strh	r3, [r5, #12]
            wakeupSource->mode = mode;
   b43ea:	73ab      	strb	r3, [r5, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b43ec:	6125      	str	r5, [r4, #16]
   b43ee:	e7dd      	b.n	b43ac <loop+0x24c>
   b43f0:	66666666 	.word	0x66666666
   b43f4:	3f6a6666 	.word	0x3f6a6666
   b43f8:	364d9365 	.word	0x364d9365
   b43fc:	406364d9 	.word	0x406364d9
   b4400:	2003e67c 	.word	0x2003e67c
   b4404:	2003e1ec 	.word	0x2003e1ec
   b4408:	2003e1e8 	.word	0x2003e1e8
   b440c:	000b6ca6 	.word	0x000b6ca6
   b4410:	2003e680 	.word	0x2003e680
   b4414:	2003e1c8 	.word	0x2003e1c8
   b4418:	000b6cba 	.word	0x000b6cba
   b441c:	000b6ccf 	.word	0x000b6ccf
   b4420:	2003e1c4 	.word	0x2003e1c4
   b4424:	2003e13c 	.word	0x2003e13c
   b4428:	2003e1d0 	.word	0x2003e1d0
   b442c:	000b6d3f 	.word	0x000b6d3f
   b4430:	000b6f4c 	.word	0x000b6f4c
   b4434:	00030010 	.word	0x00030010
   b4438:	2003e1f0 	.word	0x2003e1f0
   b443c:	000b6ca8 	.word	0x000b6ca8
   b4440:	000b6cdf 	.word	0x000b6cdf
   b4444:	000b6d1c 	.word	0x000b6d1c
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4448:	4915      	ldr	r1, [pc, #84]	; (b44a0 <loop+0x340>)
   b444a:	2010      	movs	r0, #16
   b444c:	f001 fe16 	bl	b607c <_ZnwjRKSt9nothrow_t>
   b4450:	4605      	mov	r5, r0
   b4452:	b310      	cbz	r0, b449a <loop+0x33a>
   b4454:	2210      	movs	r2, #16
   b4456:	2100      	movs	r1, #0
   b4458:	f002 fb30 	bl	b6abc <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b445c:	4b11      	ldr	r3, [pc, #68]	; (b44a4 <loop+0x344>)
   b445e:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4460:	2304      	movs	r3, #4
   b4462:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4464:	6923      	ldr	r3, [r4, #16]
   b4466:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   b4468:	4b0f      	ldr	r3, [pc, #60]	; (b44a8 <loop+0x348>)
   b446a:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b446c:	6125      	str	r5, [r4, #16]
   b446e:	a80a      	add	r0, sp, #40	; 0x28
   b4470:	490e      	ldr	r1, [pc, #56]	; (b44ac <loop+0x34c>)
   b4472:	f001 fac7 	bl	b5a04 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   b4476:	980a      	ldr	r0, [sp, #40]	; 0x28
   b4478:	b108      	cbz	r0, b447e <loop+0x31e>
            free(wakeupSource_);
   b447a:	f000 facb 	bl	b4a14 <free>
   b447e:	f001 fc27 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b4482:	490b      	ldr	r1, [pc, #44]	; (b44b0 <loop+0x350>)
   b4484:	f001 f921 	bl	b56ca <_ZN5Print5printEPKc>
   b4488:	f000 f89c 	bl	b45c4 <HAL_Timer_Get_Milli_Seconds>
   b448c:	4b09      	ldr	r3, [pc, #36]	; (b44b4 <loop+0x354>)
   b448e:	6018      	str	r0, [r3, #0]
   b4490:	2300      	movs	r3, #0
   b4492:	e74d      	b.n	b4330 <loop+0x1d0>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4494:	4a04      	ldr	r2, [pc, #16]	; (b44a8 <loop+0x348>)
   b4496:	60da      	str	r2, [r3, #12]
                return *this;
   b4498:	e7e9      	b.n	b446e <loop+0x30e>
                valid_ = false;
   b449a:	7525      	strb	r5, [r4, #20]
                return *this;
   b449c:	e7e7      	b.n	b446e <loop+0x30e>
   b449e:	bf00      	nop
   b44a0:	000b6f4c 	.word	0x000b6f4c
   b44a4:	00030010 	.word	0x00030010
   b44a8:	0001d4c0 	.word	0x0001d4c0
   b44ac:	2003e1d0 	.word	0x2003e1d0
   b44b0:	000b6d4e 	.word	0x000b6d4e
   b44b4:	2003e680 	.word	0x2003e680

000b44b8 <_GLOBAL__sub_I_sd>:
   b44b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        val_(val) {
   b44ba:	4b26      	ldr	r3, [pc, #152]	; (b4554 <_GLOBAL__sub_I_sd+0x9c>)
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFileSystem<SdSpiCard> {
 public:
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  SdFat() {
   b44bc:	4c26      	ldr	r4, [pc, #152]	; (b4558 <_GLOBAL__sub_I_sd+0xa0>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b44be:	4d27      	ldr	r5, [pc, #156]	; (b455c <_GLOBAL__sub_I_sd+0xa4>)
   b44c0:	2201      	movs	r2, #1
   b44c2:	2164      	movs	r1, #100	; 0x64
   b44c4:	701a      	strb	r2, [r3, #0]
   b44c6:	f8c4 1460 	str.w	r1, [r4, #1120]	; 0x460
   b44ca:	2300      	movs	r3, #0
  {
   b44cc:	4924      	ldr	r1, [pc, #144]	; (b4560 <_GLOBAL__sub_I_sd+0xa8>)
   b44ce:	6063      	str	r3, [r4, #4]
   b44d0:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   b44d4:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
   b44d8:	f8c4 1470 	str.w	r1, [r4, #1136]	; 0x470
   b44dc:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
   b44e0:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
   b44e4:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   b44e8:	7829      	ldrb	r1, [r5, #0]
   b44ea:	f3bf 8f5b 	dmb	ish
   b44ee:	4011      	ands	r1, r2
   b44f0:	d10b      	bne.n	b450a <_GLOBAL__sub_I_sd+0x52>
   b44f2:	4628      	mov	r0, r5
   b44f4:	9101      	str	r1, [sp, #4]
   b44f6:	f7ff fdd4 	bl	b40a2 <__cxa_guard_acquire>
   b44fa:	9901      	ldr	r1, [sp, #4]
   b44fc:	b128      	cbz	r0, b450a <_GLOBAL__sub_I_sd+0x52>
   b44fe:	4819      	ldr	r0, [pc, #100]	; (b4564 <_GLOBAL__sub_I_sd+0xac>)
   b4500:	f001 fa46 	bl	b5990 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4504:	4628      	mov	r0, r5
   b4506:	f7ff fdd1 	bl	b40ac <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b450a:	4b16      	ldr	r3, [pc, #88]	; (b4564 <_GLOBAL__sub_I_sd+0xac>)
   b450c:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
              error_(SYSTEM_ERROR_NONE) {
   b4510:	4b15      	ldr	r3, [pc, #84]	; (b4568 <_GLOBAL__sub_I_sd+0xb0>)
    SleepResult() {}
   b4512:	4a16      	ldr	r2, [pc, #88]	; (b456c <_GLOBAL__sub_I_sd+0xb4>)
   b4514:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4516:	2400      	movs	r4, #0
   b4518:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b451c:	2002      	movs	r0, #2
   b451e:	f000 f989 	bl	b4834 <set_system_mode>
   b4522:	4621      	mov	r1, r4
   b4524:	2001      	movs	r0, #1
   b4526:	f000 f995 	bl	b4854 <system_thread_set_state>
   b452a:	4621      	mov	r1, r4
   b452c:	4810      	ldr	r0, [pc, #64]	; (b4570 <_GLOBAL__sub_I_sd+0xb8>)
   b452e:	f000 fe4f 	bl	b51d0 <_ZN9FuelGaugeC1Eb>
   b4532:	4621      	mov	r1, r4
   b4534:	480f      	ldr	r0, [pc, #60]	; (b4574 <_GLOBAL__sub_I_sd+0xbc>)
   b4536:	f001 f8aa 	bl	b568e <_ZN4PMICC1Eb>
        : config_(config) {
   b453a:	4b0f      	ldr	r3, [pc, #60]	; (b4578 <_GLOBAL__sub_I_sd+0xc0>)
   b453c:	1d1a      	adds	r2, r3, #4
   b453e:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4540:	4a0e      	ldr	r2, [pc, #56]	; (b457c <_GLOBAL__sub_I_sd+0xc4>)
   b4542:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4544:	2201      	movs	r2, #1
   b4546:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b454a:	611c      	str	r4, [r3, #16]
   b454c:	751a      	strb	r2, [r3, #20]
   b454e:	b003      	add	sp, #12
   b4550:	bd30      	pop	{r4, r5, pc}
   b4552:	bf00      	nop
   b4554:	2003e1c4 	.word	0x2003e1c4
   b4558:	2003e1f8 	.word	0x2003e1f8
   b455c:	2003e1ac 	.word	0x2003e1ac
   b4560:	000b6d68 	.word	0x000b6d68
   b4564:	2003e1b0 	.word	0x2003e1b0
   b4568:	2003e1b8 	.word	0x2003e1b8
   b456c:	ffff0000 	.word	0xffff0000
   b4570:	2003e1c8 	.word	0x2003e1c8
   b4574:	2003e1f4 	.word	0x2003e1f4
   b4578:	2003e1d0 	.word	0x2003e1d0
   b457c:	00030010 	.word	0x00030010

000b4580 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4580:	b513      	push	{r0, r1, r4, lr}
   b4582:	4604      	mov	r4, r0
    }
   b4584:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4586:	b159      	cbz	r1, b45a0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4588:	9101      	str	r1, [sp, #4]
   b458a:	f002 faea 	bl	b6b62 <strlen>
   b458e:	6823      	ldr	r3, [r4, #0]
   b4590:	9901      	ldr	r1, [sp, #4]
   b4592:	68db      	ldr	r3, [r3, #12]
   b4594:	4602      	mov	r2, r0
   b4596:	4620      	mov	r0, r4
    }
   b4598:	b002      	add	sp, #8
   b459a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b459e:	4718      	bx	r3
    }
   b45a0:	b002      	add	sp, #8
   b45a2:	bd10      	pop	{r4, pc}

000b45a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b02      	ldr	r3, [pc, #8]	; (b45b0 <os_mutex_recursive_create+0xc>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45ac:	9301      	str	r3, [sp, #4]
   b45ae:	bd08      	pop	{r3, pc}
   b45b0:	00030248 	.word	0x00030248

000b45b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b02      	ldr	r3, [pc, #8]	; (b45c0 <HAL_RNG_GetRandomNumber+0xc>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	685b      	ldr	r3, [r3, #4]
   b45bc:	9301      	str	r3, [sp, #4]
   b45be:	bd08      	pop	{r3, pc}
   b45c0:	00030218 	.word	0x00030218

000b45c4 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b02      	ldr	r3, [pc, #8]	; (b45d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	695b      	ldr	r3, [r3, #20]
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	bd08      	pop	{r3, pc}
   b45d0:	00030218 	.word	0x00030218

000b45d4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b45d4:	b508      	push	{r3, lr}
   b45d6:	4b02      	ldr	r3, [pc, #8]	; (b45e0 <hal_rtc_time_is_valid+0xc>)
   b45d8:	681b      	ldr	r3, [r3, #0]
   b45da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b45dc:	9301      	str	r3, [sp, #4]
   b45de:	bd08      	pop	{r3, pc}
   b45e0:	00030218 	.word	0x00030218

000b45e4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <hal_rtc_get_time+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	00030218 	.word	0x00030218

000b45f4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <HAL_Validate_Pin_Function+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	685b      	ldr	r3, [r3, #4]
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	0003022c 	.word	0x0003022c

000b4604 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <hal_adc_read+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	0003022c 	.word	0x0003022c

000b4614 <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <hal_i2c_begin_transmission+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	699b      	ldr	r3, [r3, #24]
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	00030228 	.word	0x00030228

000b4624 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <hal_i2c_end_transmission+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	69db      	ldr	r3, [r3, #28]
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	00030228 	.word	0x00030228

000b4634 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <hal_i2c_write+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	6a1b      	ldr	r3, [r3, #32]
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	00030228 	.word	0x00030228

000b4644 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <hal_i2c_available+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	00030228 	.word	0x00030228

000b4654 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <hal_i2c_read+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	00030228 	.word	0x00030228

000b4664 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <hal_i2c_peek+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	00030228 	.word	0x00030228

000b4674 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <hal_i2c_flush+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	00030228 	.word	0x00030228

000b4684 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <hal_i2c_is_enabled+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	00030228 	.word	0x00030228

000b4694 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <hal_i2c_init+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	00030228 	.word	0x00030228

000b46a4 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <hal_i2c_lock+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	00030228 	.word	0x00030228

000b46b4 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <hal_i2c_unlock+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	00030228 	.word	0x00030228

000b46c4 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <hal_i2c_request_ex+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	00030228 	.word	0x00030228

000b46d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <inet_inet_ntop+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	695b      	ldr	r3, [r3, #20]
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	00030264 	.word	0x00030264

000b46e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <netdb_freeaddrinfo+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	689b      	ldr	r3, [r3, #8]
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	00030268 	.word	0x00030268

000b46f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <netdb_getaddrinfo+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	68db      	ldr	r3, [r3, #12]
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	00030268 	.word	0x00030268

000b4704 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <hal_spi_init+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	69db      	ldr	r3, [r3, #28]
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	00030230 	.word	0x00030230

000b4714 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <hal_spi_is_enabled+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	6a1b      	ldr	r3, [r3, #32]
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	00030230 	.word	0x00030230

000b4724 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <hal_usart_write+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	68db      	ldr	r3, [r3, #12]
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	0003023c 	.word	0x0003023c

000b4734 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b02      	ldr	r3, [pc, #8]	; (b4740 <hal_usart_available+0xc>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	691b      	ldr	r3, [r3, #16]
   b473c:	9301      	str	r3, [sp, #4]
   b473e:	bd08      	pop	{r3, pc}
   b4740:	0003023c 	.word	0x0003023c

000b4744 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4744:	b508      	push	{r3, lr}
   b4746:	4b02      	ldr	r3, [pc, #8]	; (b4750 <hal_usart_read+0xc>)
   b4748:	681b      	ldr	r3, [r3, #0]
   b474a:	695b      	ldr	r3, [r3, #20]
   b474c:	9301      	str	r3, [sp, #4]
   b474e:	bd08      	pop	{r3, pc}
   b4750:	0003023c 	.word	0x0003023c

000b4754 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4754:	b508      	push	{r3, lr}
   b4756:	4b02      	ldr	r3, [pc, #8]	; (b4760 <hal_usart_peek+0xc>)
   b4758:	681b      	ldr	r3, [r3, #0]
   b475a:	699b      	ldr	r3, [r3, #24]
   b475c:	9301      	str	r3, [sp, #4]
   b475e:	bd08      	pop	{r3, pc}
   b4760:	0003023c 	.word	0x0003023c

000b4764 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4764:	b508      	push	{r3, lr}
   b4766:	4b02      	ldr	r3, [pc, #8]	; (b4770 <hal_usart_flush+0xc>)
   b4768:	681b      	ldr	r3, [r3, #0]
   b476a:	69db      	ldr	r3, [r3, #28]
   b476c:	9301      	str	r3, [sp, #4]
   b476e:	bd08      	pop	{r3, pc}
   b4770:	0003023c 	.word	0x0003023c

000b4774 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4774:	b508      	push	{r3, lr}
   b4776:	4b02      	ldr	r3, [pc, #8]	; (b4780 <hal_usart_is_enabled+0xc>)
   b4778:	681b      	ldr	r3, [r3, #0]
   b477a:	6a1b      	ldr	r3, [r3, #32]
   b477c:	9301      	str	r3, [sp, #4]
   b477e:	bd08      	pop	{r3, pc}
   b4780:	0003023c 	.word	0x0003023c

000b4784 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4784:	b508      	push	{r3, lr}
   b4786:	4b02      	ldr	r3, [pc, #8]	; (b4790 <hal_usart_available_data_for_write+0xc>)
   b4788:	681b      	ldr	r3, [r3, #0]
   b478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b478c:	9301      	str	r3, [sp, #4]
   b478e:	bd08      	pop	{r3, pc}
   b4790:	0003023c 	.word	0x0003023c

000b4794 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4794:	b508      	push	{r3, lr}
   b4796:	4b02      	ldr	r3, [pc, #8]	; (b47a0 <hal_usart_init_ex+0xc>)
   b4798:	681b      	ldr	r3, [r3, #0]
   b479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b479c:	9301      	str	r3, [sp, #4]
   b479e:	bd08      	pop	{r3, pc}
   b47a0:	0003023c 	.word	0x0003023c

000b47a4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b47a4:	b508      	push	{r3, lr}
   b47a6:	4b02      	ldr	r3, [pc, #8]	; (b47b0 <HAL_USB_USART_Init+0xc>)
   b47a8:	681b      	ldr	r3, [r3, #0]
   b47aa:	681b      	ldr	r3, [r3, #0]
   b47ac:	9301      	str	r3, [sp, #4]
   b47ae:	bd08      	pop	{r3, pc}
   b47b0:	0003024c 	.word	0x0003024c

000b47b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b47b4:	b508      	push	{r3, lr}
   b47b6:	4b02      	ldr	r3, [pc, #8]	; (b47c0 <HAL_USB_USART_Begin+0xc>)
   b47b8:	681b      	ldr	r3, [r3, #0]
   b47ba:	685b      	ldr	r3, [r3, #4]
   b47bc:	9301      	str	r3, [sp, #4]
   b47be:	bd08      	pop	{r3, pc}
   b47c0:	0003024c 	.word	0x0003024c

000b47c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b47c4:	b508      	push	{r3, lr}
   b47c6:	4b02      	ldr	r3, [pc, #8]	; (b47d0 <HAL_USB_USART_Available_Data+0xc>)
   b47c8:	681b      	ldr	r3, [r3, #0]
   b47ca:	691b      	ldr	r3, [r3, #16]
   b47cc:	9301      	str	r3, [sp, #4]
   b47ce:	bd08      	pop	{r3, pc}
   b47d0:	0003024c 	.word	0x0003024c

000b47d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b47d4:	b508      	push	{r3, lr}
   b47d6:	4b02      	ldr	r3, [pc, #8]	; (b47e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b47d8:	681b      	ldr	r3, [r3, #0]
   b47da:	695b      	ldr	r3, [r3, #20]
   b47dc:	9301      	str	r3, [sp, #4]
   b47de:	bd08      	pop	{r3, pc}
   b47e0:	0003024c 	.word	0x0003024c

000b47e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b47e4:	b508      	push	{r3, lr}
   b47e6:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <HAL_USB_USART_Receive_Data+0xc>)
   b47e8:	681b      	ldr	r3, [r3, #0]
   b47ea:	699b      	ldr	r3, [r3, #24]
   b47ec:	9301      	str	r3, [sp, #4]
   b47ee:	bd08      	pop	{r3, pc}
   b47f0:	0003024c 	.word	0x0003024c

000b47f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b47f4:	b508      	push	{r3, lr}
   b47f6:	4b02      	ldr	r3, [pc, #8]	; (b4800 <HAL_USB_USART_Send_Data+0xc>)
   b47f8:	681b      	ldr	r3, [r3, #0]
   b47fa:	69db      	ldr	r3, [r3, #28]
   b47fc:	9301      	str	r3, [sp, #4]
   b47fe:	bd08      	pop	{r3, pc}
   b4800:	0003024c 	.word	0x0003024c

000b4804 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b02      	ldr	r3, [pc, #8]	; (b4810 <HAL_USB_USART_Flush_Data+0xc>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	6a1b      	ldr	r3, [r3, #32]
   b480c:	9301      	str	r3, [sp, #4]
   b480e:	bd08      	pop	{r3, pc}
   b4810:	0003024c 	.word	0x0003024c

000b4814 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4814:	b508      	push	{r3, lr}
   b4816:	4b02      	ldr	r3, [pc, #8]	; (b4820 <log_message+0xc>)
   b4818:	681b      	ldr	r3, [r3, #0]
   b481a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b481c:	9301      	str	r3, [sp, #4]
   b481e:	bd08      	pop	{r3, pc}
   b4820:	00030260 	.word	0x00030260

000b4824 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b4824:	b508      	push	{r3, lr}
   b4826:	4b02      	ldr	r3, [pc, #8]	; (b4830 <system_mode+0xc>)
   b4828:	681b      	ldr	r3, [r3, #0]
   b482a:	681b      	ldr	r3, [r3, #0]
   b482c:	9301      	str	r3, [sp, #4]
   b482e:	bd08      	pop	{r3, pc}
   b4830:	00030220 	.word	0x00030220

000b4834 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4834:	b508      	push	{r3, lr}
   b4836:	4b02      	ldr	r3, [pc, #8]	; (b4840 <set_system_mode+0xc>)
   b4838:	681b      	ldr	r3, [r3, #0]
   b483a:	685b      	ldr	r3, [r3, #4]
   b483c:	9301      	str	r3, [sp, #4]
   b483e:	bd08      	pop	{r3, pc}
   b4840:	00030220 	.word	0x00030220

000b4844 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4844:	b508      	push	{r3, lr}
   b4846:	4b02      	ldr	r3, [pc, #8]	; (b4850 <system_delay_ms+0xc>)
   b4848:	681b      	ldr	r3, [r3, #0]
   b484a:	695b      	ldr	r3, [r3, #20]
   b484c:	9301      	str	r3, [sp, #4]
   b484e:	bd08      	pop	{r3, pc}
   b4850:	00030220 	.word	0x00030220

000b4854 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4854:	b508      	push	{r3, lr}
   b4856:	4b02      	ldr	r3, [pc, #8]	; (b4860 <system_thread_set_state+0xc>)
   b4858:	681b      	ldr	r3, [r3, #0]
   b485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b485c:	9301      	str	r3, [sp, #4]
   b485e:	bd08      	pop	{r3, pc}
   b4860:	00030220 	.word	0x00030220

000b4864 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4864:	b508      	push	{r3, lr}
   b4866:	4b02      	ldr	r3, [pc, #8]	; (b4870 <application_thread_current+0xc>)
   b4868:	681b      	ldr	r3, [r3, #0]
   b486a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b486c:	9301      	str	r3, [sp, #4]
   b486e:	bd08      	pop	{r3, pc}
   b4870:	00030220 	.word	0x00030220

000b4874 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b02      	ldr	r3, [pc, #8]	; (b4880 <application_thread_invoke+0xc>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b487c:	9301      	str	r3, [sp, #4]
   b487e:	bd08      	pop	{r3, pc}
   b4880:	00030220 	.word	0x00030220

000b4884 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b4884:	b508      	push	{r3, lr}
   b4886:	4b02      	ldr	r3, [pc, #8]	; (b4890 <system_thread_get_state+0xc>)
   b4888:	681b      	ldr	r3, [r3, #0]
   b488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b488c:	9301      	str	r3, [sp, #4]
   b488e:	bd08      	pop	{r3, pc}
   b4890:	00030220 	.word	0x00030220

000b4894 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4894:	b508      	push	{r3, lr}
   b4896:	4b03      	ldr	r3, [pc, #12]	; (b48a4 <system_ctrl_set_app_request_handler+0x10>)
   b4898:	681b      	ldr	r3, [r3, #0]
   b489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b489e:	9301      	str	r3, [sp, #4]
   b48a0:	bd08      	pop	{r3, pc}
   b48a2:	0000      	.short	0x0000
   b48a4:	00030220 	.word	0x00030220

000b48a8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b48a8:	b508      	push	{r3, lr}
   b48aa:	4b03      	ldr	r3, [pc, #12]	; (b48b8 <system_ctrl_set_result+0x10>)
   b48ac:	681b      	ldr	r3, [r3, #0]
   b48ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b48b2:	9301      	str	r3, [sp, #4]
   b48b4:	bd08      	pop	{r3, pc}
   b48b6:	0000      	.short	0x0000
   b48b8:	00030220 	.word	0x00030220

000b48bc <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b48bc:	b508      	push	{r3, lr}
   b48be:	4b03      	ldr	r3, [pc, #12]	; (b48cc <system_sleep_ext+0x10>)
   b48c0:	681b      	ldr	r3, [r3, #0]
   b48c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b48c6:	9301      	str	r3, [sp, #4]
   b48c8:	bd08      	pop	{r3, pc}
   b48ca:	0000      	.short	0x0000
   b48cc:	00030220 	.word	0x00030220

000b48d0 <system_power_management_get_config>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
   b48d0:	b508      	push	{r3, lr}
   b48d2:	4b03      	ldr	r3, [pc, #12]	; (b48e0 <system_power_management_get_config+0x10>)
   b48d4:	681b      	ldr	r3, [r3, #0]
   b48d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b48da:	9301      	str	r3, [sp, #4]
   b48dc:	bd08      	pop	{r3, pc}
   b48de:	0000      	.short	0x0000
   b48e0:	00030220 	.word	0x00030220

000b48e4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b48e4:	b508      	push	{r3, lr}
   b48e6:	4b02      	ldr	r3, [pc, #8]	; (b48f0 <spark_process+0xc>)
   b48e8:	681b      	ldr	r3, [r3, #0]
   b48ea:	689b      	ldr	r3, [r3, #8]
   b48ec:	9301      	str	r3, [sp, #4]
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	00030244 	.word	0x00030244

000b48f4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b02      	ldr	r3, [pc, #8]	; (b4900 <spark_cloud_flag_connect+0xc>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	68db      	ldr	r3, [r3, #12]
   b48fc:	9301      	str	r3, [sp, #4]
   b48fe:	bd08      	pop	{r3, pc}
   b4900:	00030244 	.word	0x00030244

000b4904 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4904:	b508      	push	{r3, lr}
   b4906:	4b02      	ldr	r3, [pc, #8]	; (b4910 <spark_cloud_flag_connected+0xc>)
   b4908:	681b      	ldr	r3, [r3, #0]
   b490a:	695b      	ldr	r3, [r3, #20]
   b490c:	9301      	str	r3, [sp, #4]
   b490e:	bd08      	pop	{r3, pc}
   b4910:	00030244 	.word	0x00030244

000b4914 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4914:	b508      	push	{r3, lr}
   b4916:	4b02      	ldr	r3, [pc, #8]	; (b4920 <spark_send_event+0xc>)
   b4918:	681b      	ldr	r3, [r3, #0]
   b491a:	6a1b      	ldr	r3, [r3, #32]
   b491c:	9301      	str	r3, [sp, #4]
   b491e:	bd08      	pop	{r3, pc}
   b4920:	00030244 	.word	0x00030244

000b4924 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b4924:	b508      	push	{r3, lr}
   b4926:	4b02      	ldr	r3, [pc, #8]	; (b4930 <spark_sync_time_pending+0xc>)
   b4928:	681b      	ldr	r3, [r3, #0]
   b492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b492c:	9301      	str	r3, [sp, #4]
   b492e:	bd08      	pop	{r3, pc}
   b4930:	00030244 	.word	0x00030244

000b4934 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4934:	b508      	push	{r3, lr}
   b4936:	4b02      	ldr	r3, [pc, #8]	; (b4940 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4938:	681b      	ldr	r3, [r3, #0]
   b493a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b493c:	9301      	str	r3, [sp, #4]
   b493e:	bd08      	pop	{r3, pc}
   b4940:	00030244 	.word	0x00030244

000b4944 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4944:	b508      	push	{r3, lr}
   b4946:	4b02      	ldr	r3, [pc, #8]	; (b4950 <network_connect+0xc>)
   b4948:	681b      	ldr	r3, [r3, #0]
   b494a:	685b      	ldr	r3, [r3, #4]
   b494c:	9301      	str	r3, [sp, #4]
   b494e:	bd08      	pop	{r3, pc}
   b4950:	00030240 	.word	0x00030240

000b4954 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4954:	b508      	push	{r3, lr}
   b4956:	4b02      	ldr	r3, [pc, #8]	; (b4960 <network_connecting+0xc>)
   b4958:	681b      	ldr	r3, [r3, #0]
   b495a:	689b      	ldr	r3, [r3, #8]
   b495c:	9301      	str	r3, [sp, #4]
   b495e:	bd08      	pop	{r3, pc}
   b4960:	00030240 	.word	0x00030240

000b4964 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4964:	b508      	push	{r3, lr}
   b4966:	4b02      	ldr	r3, [pc, #8]	; (b4970 <network_disconnect+0xc>)
   b4968:	681b      	ldr	r3, [r3, #0]
   b496a:	68db      	ldr	r3, [r3, #12]
   b496c:	9301      	str	r3, [sp, #4]
   b496e:	bd08      	pop	{r3, pc}
   b4970:	00030240 	.word	0x00030240

000b4974 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4974:	b508      	push	{r3, lr}
   b4976:	4b02      	ldr	r3, [pc, #8]	; (b4980 <network_ready+0xc>)
   b4978:	681b      	ldr	r3, [r3, #0]
   b497a:	691b      	ldr	r3, [r3, #16]
   b497c:	9301      	str	r3, [sp, #4]
   b497e:	bd08      	pop	{r3, pc}
   b4980:	00030240 	.word	0x00030240

000b4984 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4984:	b508      	push	{r3, lr}
   b4986:	4b02      	ldr	r3, [pc, #8]	; (b4990 <network_on+0xc>)
   b4988:	681b      	ldr	r3, [r3, #0]
   b498a:	695b      	ldr	r3, [r3, #20]
   b498c:	9301      	str	r3, [sp, #4]
   b498e:	bd08      	pop	{r3, pc}
   b4990:	00030240 	.word	0x00030240

000b4994 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4994:	b508      	push	{r3, lr}
   b4996:	4b02      	ldr	r3, [pc, #8]	; (b49a0 <network_off+0xc>)
   b4998:	681b      	ldr	r3, [r3, #0]
   b499a:	699b      	ldr	r3, [r3, #24]
   b499c:	9301      	str	r3, [sp, #4]
   b499e:	bd08      	pop	{r3, pc}
   b49a0:	00030240 	.word	0x00030240

000b49a4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b49a4:	b508      	push	{r3, lr}
   b49a6:	4b02      	ldr	r3, [pc, #8]	; (b49b0 <network_listen+0xc>)
   b49a8:	681b      	ldr	r3, [r3, #0]
   b49aa:	69db      	ldr	r3, [r3, #28]
   b49ac:	9301      	str	r3, [sp, #4]
   b49ae:	bd08      	pop	{r3, pc}
   b49b0:	00030240 	.word	0x00030240

000b49b4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b49b4:	b508      	push	{r3, lr}
   b49b6:	4b02      	ldr	r3, [pc, #8]	; (b49c0 <network_listening+0xc>)
   b49b8:	681b      	ldr	r3, [r3, #0]
   b49ba:	6a1b      	ldr	r3, [r3, #32]
   b49bc:	9301      	str	r3, [sp, #4]
   b49be:	bd08      	pop	{r3, pc}
   b49c0:	00030240 	.word	0x00030240

000b49c4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b49c4:	b508      	push	{r3, lr}
   b49c6:	4b02      	ldr	r3, [pc, #8]	; (b49d0 <network_set_listen_timeout+0xc>)
   b49c8:	681b      	ldr	r3, [r3, #0]
   b49ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49cc:	9301      	str	r3, [sp, #4]
   b49ce:	bd08      	pop	{r3, pc}
   b49d0:	00030240 	.word	0x00030240

000b49d4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b49d4:	b508      	push	{r3, lr}
   b49d6:	4b02      	ldr	r3, [pc, #8]	; (b49e0 <network_get_listen_timeout+0xc>)
   b49d8:	681b      	ldr	r3, [r3, #0]
   b49da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49dc:	9301      	str	r3, [sp, #4]
   b49de:	bd08      	pop	{r3, pc}
   b49e0:	00030240 	.word	0x00030240

000b49e4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b02      	ldr	r3, [pc, #8]	; (b49f0 <network_is_on+0xc>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49ec:	9301      	str	r3, [sp, #4]
   b49ee:	bd08      	pop	{r3, pc}
   b49f0:	00030240 	.word	0x00030240

000b49f4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b49f4:	b508      	push	{r3, lr}
   b49f6:	4b02      	ldr	r3, [pc, #8]	; (b4a00 <network_is_off+0xc>)
   b49f8:	681b      	ldr	r3, [r3, #0]
   b49fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49fc:	9301      	str	r3, [sp, #4]
   b49fe:	bd08      	pop	{r3, pc}
   b4a00:	00030240 	.word	0x00030240

000b4a04 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4a04:	b508      	push	{r3, lr}
   b4a06:	4b02      	ldr	r3, [pc, #8]	; (b4a10 <malloc+0xc>)
   b4a08:	681b      	ldr	r3, [r3, #0]
   b4a0a:	681b      	ldr	r3, [r3, #0]
   b4a0c:	9301      	str	r3, [sp, #4]
   b4a0e:	bd08      	pop	{r3, pc}
   b4a10:	0003021c 	.word	0x0003021c

000b4a14 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b02      	ldr	r3, [pc, #8]	; (b4a20 <free+0xc>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	685b      	ldr	r3, [r3, #4]
   b4a1c:	9301      	str	r3, [sp, #4]
   b4a1e:	bd08      	pop	{r3, pc}
   b4a20:	0003021c 	.word	0x0003021c

000b4a24 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b4a24:	b508      	push	{r3, lr}
   b4a26:	4b02      	ldr	r3, [pc, #8]	; (b4a30 <snprintf+0xc>)
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	69db      	ldr	r3, [r3, #28]
   b4a2c:	9301      	str	r3, [sp, #4]
   b4a2e:	bd08      	pop	{r3, pc}
   b4a30:	0003021c 	.word	0x0003021c

000b4a34 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4a34:	b508      	push	{r3, lr}
   b4a36:	4b02      	ldr	r3, [pc, #8]	; (b4a40 <vsnprintf+0xc>)
   b4a38:	681b      	ldr	r3, [r3, #0]
   b4a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a3c:	9301      	str	r3, [sp, #4]
   b4a3e:	bd08      	pop	{r3, pc}
   b4a40:	0003021c 	.word	0x0003021c

000b4a44 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b02      	ldr	r3, [pc, #8]	; (b4a50 <abort+0xc>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a4c:	9301      	str	r3, [sp, #4]
   b4a4e:	bd08      	pop	{r3, pc}
   b4a50:	0003021c 	.word	0x0003021c

000b4a54 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4a54:	b508      	push	{r3, lr}
   b4a56:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <_malloc_r+0xc>)
   b4a58:	681b      	ldr	r3, [r3, #0]
   b4a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a5c:	9301      	str	r3, [sp, #4]
   b4a5e:	bd08      	pop	{r3, pc}
   b4a60:	0003021c 	.word	0x0003021c

000b4a64 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4a64:	b508      	push	{r3, lr}
   b4a66:	4b02      	ldr	r3, [pc, #8]	; (b4a70 <__assert_func+0xc>)
   b4a68:	681b      	ldr	r3, [r3, #0]
   b4a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a6c:	9301      	str	r3, [sp, #4]
   b4a6e:	bd08      	pop	{r3, pc}
   b4a70:	0003021c 	.word	0x0003021c

000b4a74 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4a74:	b508      	push	{r3, lr}
   b4a76:	4b02      	ldr	r3, [pc, #8]	; (b4a80 <newlib_impure_ptr_callback+0xc>)
   b4a78:	681b      	ldr	r3, [r3, #0]
   b4a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a7c:	9301      	str	r3, [sp, #4]
   b4a7e:	bd08      	pop	{r3, pc}
   b4a80:	0003021c 	.word	0x0003021c

000b4a84 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4a84:	2100      	movs	r1, #0
   b4a86:	f7ff bedd 	b.w	b4844 <system_delay_ms>

000b4a8a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b4a8a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4a8c:	6883      	ldr	r3, [r0, #8]
   b4a8e:	4604      	mov	r4, r0
   b4a90:	b90b      	cbnz	r3, b4a96 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b4a92:	f001 faf7 	bl	b6084 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4a96:	68c3      	ldr	r3, [r0, #12]
   b4a98:	4798      	blx	r3
      if (_M_manager)
   b4a9a:	68a3      	ldr	r3, [r4, #8]
   b4a9c:	b11b      	cbz	r3, b4aa6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4a9e:	2203      	movs	r2, #3
   b4aa0:	4621      	mov	r1, r4
   b4aa2:	4620      	mov	r0, r4
   b4aa4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b4aa6:	4620      	mov	r0, r4
   b4aa8:	2110      	movs	r1, #16
}
   b4aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b4aae:	f7ff baf6 	b.w	b409e <_ZdlPvj>

000b4ab2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4ab2:	b510      	push	{r4, lr}
      if (_M_manager)
   b4ab4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4ab6:	4604      	mov	r4, r0
      if (_M_manager)
   b4ab8:	b113      	cbz	r3, b4ac0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4aba:	2203      	movs	r2, #3
   b4abc:	4601      	mov	r1, r0
   b4abe:	4798      	blx	r3
    }
   b4ac0:	4620      	mov	r0, r4
   b4ac2:	bd10      	pop	{r4, pc}

000b4ac4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4ac4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4ac6:	6843      	ldr	r3, [r0, #4]
   b4ac8:	3b01      	subs	r3, #1
    {
   b4aca:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4acc:	6043      	str	r3, [r0, #4]
   b4ace:	b963      	cbnz	r3, b4aea <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4ad0:	6803      	ldr	r3, [r0, #0]
   b4ad2:	689b      	ldr	r3, [r3, #8]
   b4ad4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4ad6:	68a3      	ldr	r3, [r4, #8]
   b4ad8:	3b01      	subs	r3, #1
   b4ada:	60a3      	str	r3, [r4, #8]
   b4adc:	b92b      	cbnz	r3, b4aea <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4ade:	6823      	ldr	r3, [r4, #0]
   b4ae0:	4620      	mov	r0, r4
   b4ae2:	68db      	ldr	r3, [r3, #12]
    }
   b4ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4ae8:	4718      	bx	r3
    }
   b4aea:	bd10      	pop	{r4, pc}

000b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4aec:	b510      	push	{r4, lr}
   b4aee:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b4af0:	6800      	ldr	r0, [r0, #0]
   b4af2:	b108      	cbz	r0, b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4af4:	f7ff ffe6 	bl	b4ac4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4af8:	4620      	mov	r0, r4
   b4afa:	bd10      	pop	{r4, pc}

000b4afc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4afc:	b513      	push	{r0, r1, r4, lr}
   b4afe:	460b      	mov	r3, r1
   b4b00:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4b02:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4b06:	466c      	mov	r4, sp
   b4b08:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4b0c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4b10:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4b14:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4b18:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4b1c:	b002      	add	sp, #8
   b4b1e:	bd10      	pop	{r4, pc}

000b4b20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4b20:	4802      	ldr	r0, [pc, #8]	; (b4b2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4b22:	2300      	movs	r3, #0
   b4b24:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4b26:	f7ff bd3d 	b.w	b45a4 <os_mutex_recursive_create>
   b4b2a:	bf00      	nop
   b4b2c:	2003e684 	.word	0x2003e684

000b4b30 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4b30:	2200      	movs	r2, #0
   b4b32:	6840      	ldr	r0, [r0, #4]
   b4b34:	4611      	mov	r1, r2
   b4b36:	f7ff bf1d 	b.w	b4974 <network_ready>

000b4b3a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b4b3a:	2200      	movs	r2, #0
   b4b3c:	6840      	ldr	r0, [r0, #4]
   b4b3e:	4611      	mov	r1, r2
   b4b40:	f7ff bf38 	b.w	b49b4 <network_listening>

000b4b44 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4b44:	2200      	movs	r2, #0
   b4b46:	6840      	ldr	r0, [r0, #4]
   b4b48:	4611      	mov	r1, r2
   b4b4a:	f7ff bf43 	b.w	b49d4 <network_get_listen_timeout>

000b4b4e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4b4e:	6840      	ldr	r0, [r0, #4]
   b4b50:	2200      	movs	r2, #0
   b4b52:	f7ff bf37 	b.w	b49c4 <network_set_listen_timeout>

000b4b56 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4b56:	6840      	ldr	r0, [r0, #4]
   b4b58:	2200      	movs	r2, #0
   b4b5a:	f081 0101 	eor.w	r1, r1, #1
   b4b5e:	f7ff bf21 	b.w	b49a4 <network_listen>

000b4b62 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4b62:	2300      	movs	r3, #0
   b4b64:	6840      	ldr	r0, [r0, #4]
   b4b66:	461a      	mov	r2, r3
   b4b68:	4619      	mov	r1, r3
   b4b6a:	f7ff bf13 	b.w	b4994 <network_off>

000b4b6e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4b6e:	2300      	movs	r3, #0
   b4b70:	6840      	ldr	r0, [r0, #4]
   b4b72:	461a      	mov	r2, r3
   b4b74:	4619      	mov	r1, r3
   b4b76:	f7ff bf05 	b.w	b4984 <network_on>

000b4b7a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4b7a:	2200      	movs	r2, #0
   b4b7c:	6840      	ldr	r0, [r0, #4]
   b4b7e:	4611      	mov	r1, r2
   b4b80:	f7ff bee8 	b.w	b4954 <network_connecting>

000b4b84 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4b84:	6840      	ldr	r0, [r0, #4]
   b4b86:	2200      	movs	r2, #0
   b4b88:	2102      	movs	r1, #2
   b4b8a:	f7ff beeb 	b.w	b4964 <network_disconnect>

000b4b8e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4b8e:	2300      	movs	r3, #0
   b4b90:	6840      	ldr	r0, [r0, #4]
   b4b92:	461a      	mov	r2, r3
   b4b94:	f7ff bed6 	b.w	b4944 <network_connect>

000b4b98 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4b98:	4b08      	ldr	r3, [pc, #32]	; (b4bbc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b4b9a:	b510      	push	{r4, lr}
   b4b9c:	2428      	movs	r4, #40	; 0x28
   b4b9e:	4622      	mov	r2, r4
   b4ba0:	4618      	mov	r0, r3
   b4ba2:	2100      	movs	r1, #0
   b4ba4:	f001 ff8a 	bl	b6abc <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4ba8:	4b05      	ldr	r3, [pc, #20]	; (b4bc0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b4baa:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b4bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4bb0:	6042      	str	r2, [r0, #4]
   b4bb2:	2204      	movs	r2, #4
   b4bb4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b4bb6:	4a03      	ldr	r2, [pc, #12]	; (b4bc4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b4bb8:	601a      	str	r2, [r3, #0]
   b4bba:	bd10      	pop	{r4, pc}
   b4bbc:	2003e690 	.word	0x2003e690
   b4bc0:	2003e688 	.word	0x2003e688
   b4bc4:	000b6d8c 	.word	0x000b6d8c

000b4bc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4bc8:	4770      	bx	lr

000b4bca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4bca:	2000      	movs	r0, #0
   b4bcc:	4770      	bx	lr

000b4bce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4bce:	b510      	push	{r4, lr}
   b4bd0:	2110      	movs	r1, #16
   b4bd2:	4604      	mov	r4, r0
   b4bd4:	f7ff fa63 	bl	b409e <_ZdlPvj>
   b4bd8:	4620      	mov	r0, r4
   b4bda:	bd10      	pop	{r4, pc}

000b4bdc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b4bdc:	b508      	push	{r3, lr}
      { delete this; }
   b4bde:	f7ff fff6 	bl	b4bce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4be2:	bd08      	pop	{r3, pc}

000b4be4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b4be4:	b530      	push	{r4, r5, lr}
        type_(type) {
   b4be6:	2200      	movs	r2, #0
   b4be8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b4bec:	6002      	str	r2, [r0, #0]
   b4bee:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4bf0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b4bf2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4bf4:	680c      	ldr	r4, [r1, #0]
   b4bf6:	8085      	strh	r5, [r0, #4]
   b4bf8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4bfa:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b4bfc:	bd30      	pop	{r4, r5, pc}

000b4bfe <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b4bfe:	b510      	push	{r4, lr}
   b4c00:	4604      	mov	r4, r0
    free((void*)msg_);
   b4c02:	6800      	ldr	r0, [r0, #0]
   b4c04:	f7ff ff06 	bl	b4a14 <free>
}
   b4c08:	4620      	mov	r0, r4
   b4c0a:	bd10      	pop	{r4, pc}

000b4c0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4c0c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4c0e:	68c4      	ldr	r4, [r0, #12]
   b4c10:	b1f4      	cbz	r4, b4c50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4c12:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4c14:	2b02      	cmp	r3, #2
   b4c16:	d103      	bne.n	b4c20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4c18:	f104 000c 	add.w	r0, r4, #12
   b4c1c:	f7ff ffef 	bl	b4bfe <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4c20:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4c22:	b135      	cbz	r5, b4c32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b4c24:	4628      	mov	r0, r5
   b4c26:	f7ff ff44 	bl	b4ab2 <_ZNSt14_Function_baseD1Ev>
   b4c2a:	2110      	movs	r1, #16
   b4c2c:	4628      	mov	r0, r5
   b4c2e:	f7ff fa36 	bl	b409e <_ZdlPvj>
   b4c32:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4c34:	b135      	cbz	r5, b4c44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4c36:	4628      	mov	r0, r5
   b4c38:	f7ff ff3b 	bl	b4ab2 <_ZNSt14_Function_baseD1Ev>
   b4c3c:	2110      	movs	r1, #16
   b4c3e:	4628      	mov	r0, r5
   b4c40:	f7ff fa2d 	bl	b409e <_ZdlPvj>
   b4c44:	4620      	mov	r0, r4
   b4c46:	2114      	movs	r1, #20
   b4c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c4c:	f7ff ba27 	b.w	b409e <_ZdlPvj>
   b4c50:	bd38      	pop	{r3, r4, r5, pc}

000b4c52 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4c52:	680b      	ldr	r3, [r1, #0]
   b4c54:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4c56:	684b      	ldr	r3, [r1, #4]
   b4c58:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4c5a:	b113      	cbz	r3, b4c62 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4c5c:	685a      	ldr	r2, [r3, #4]
   b4c5e:	3201      	adds	r2, #1
   b4c60:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4c62:	4770      	bx	lr

000b4c64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4c66:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4c68:	4668      	mov	r0, sp
   b4c6a:	460d      	mov	r5, r1
   b4c6c:	f7ff fff1 	bl	b4c52 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4c70:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4c72:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4c74:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4c76:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4c78:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4c7a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4c7c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4c7e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4c80:	f7ff ff34 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4c84:	b135      	cbz	r5, b4c94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4c86:	1d28      	adds	r0, r5, #4
   b4c88:	f7ff ff30 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4c8c:	2108      	movs	r1, #8
   b4c8e:	4628      	mov	r0, r5
   b4c90:	f7ff fa05 	bl	b409e <_ZdlPvj>
        return p;
    }
   b4c94:	4620      	mov	r0, r4
   b4c96:	b003      	add	sp, #12
   b4c98:	bd30      	pop	{r4, r5, pc}

000b4c9a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b4c9a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4c9c:	b510      	push	{r4, lr}
      if (_M_empty())
   b4c9e:	b90a      	cbnz	r2, b4ca4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4ca0:	f001 f9f0 	bl	b6084 <_ZSt25__throw_bad_function_callv>
    }
   b4ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4ca8:	68c3      	ldr	r3, [r0, #12]
   b4caa:	4718      	bx	r3

000b4cac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4cac:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4cae:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4cb0:	f100 0110 	add.w	r1, r0, #16
   b4cb4:	f7ff fff1 	bl	b4c9a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b4cb8:	bd08      	pop	{r3, pc}

000b4cba <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b4cba:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4cbc:	b510      	push	{r4, lr}
      if (_M_empty())
   b4cbe:	b90a      	cbnz	r2, b4cc4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b4cc0:	f001 f9e0 	bl	b6084 <_ZSt25__throw_bad_function_callv>
    }
   b4cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4cc8:	68c3      	ldr	r3, [r0, #12]
   b4cca:	4718      	bx	r3

000b4ccc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4ccc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4cce:	6800      	ldr	r0, [r0, #0]
   b4cd0:	f100 0110 	add.w	r1, r0, #16
   b4cd4:	f7ff fff1 	bl	b4cba <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b4cd8:	bd08      	pop	{r3, pc}
	...

000b4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b4cdc:	b538      	push	{r3, r4, r5, lr}
   b4cde:	2300      	movs	r3, #0
   b4ce0:	4604      	mov	r4, r0
   b4ce2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4ce4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b4ce6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4ce8:	f7ff f9d5 	bl	b4096 <_Znwj>
   b4cec:	b128      	cbz	r0, b4cfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b4cee:	2301      	movs	r3, #1
   b4cf0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b4cf4:	4b02      	ldr	r3, [pc, #8]	; (b4d00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b4cf6:	6003      	str	r3, [r0, #0]
   b4cf8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4cfa:	6020      	str	r0, [r4, #0]
	}
   b4cfc:	4620      	mov	r0, r4
   b4cfe:	bd38      	pop	{r3, r4, r5, pc}
   b4d00:	000b6dc8 	.word	0x000b6dc8

000b4d04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b4d04:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4d06:	2300      	movs	r3, #0
   b4d08:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4d0a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4d0c:	4604      	mov	r4, r0
   b4d0e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4d10:	b12b      	cbz	r3, b4d1e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4d12:	2202      	movs	r2, #2
   b4d14:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4d16:	68eb      	ldr	r3, [r5, #12]
   b4d18:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4d1a:	68ab      	ldr	r3, [r5, #8]
   b4d1c:	60a3      	str	r3, [r4, #8]
    }
   b4d1e:	4620      	mov	r0, r4
   b4d20:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4d24:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4d26:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4d28:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b4d2a:	4668      	mov	r0, sp
   b4d2c:	f7ff ff5a 	bl	b4be4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4d30:	f04f 0302 	mov.w	r3, #2
   b4d34:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4d38:	2a00      	cmp	r2, #0
   b4d3a:	d103      	bne.n	b4d44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b4d3c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4d40:	2900      	cmp	r1, #0
   b4d42:	d1f7      	bne.n	b4d34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4d44:	d125      	bne.n	b4d92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4d46:	f104 050c 	add.w	r5, r4, #12
   b4d4a:	4669      	mov	r1, sp
   b4d4c:	4628      	mov	r0, r5
   b4d4e:	f7ff ff49 	bl	b4be4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4d52:	f3bf 8f5b 	dmb	ish
   b4d56:	2301      	movs	r3, #1
   b4d58:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4d5a:	2000      	movs	r0, #0
   b4d5c:	f104 0308 	add.w	r3, r4, #8
   b4d60:	f3bf 8f5b 	dmb	ish
   b4d64:	e853 6f00 	ldrex	r6, [r3]
   b4d68:	e843 0200 	strex	r2, r0, [r3]
   b4d6c:	2a00      	cmp	r2, #0
   b4d6e:	d1f9      	bne.n	b4d64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4d70:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4d74:	b16e      	cbz	r6, b4d92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4d76:	f7ff fd75 	bl	b4864 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4d7a:	b178      	cbz	r0, b4d9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4d7c:	4629      	mov	r1, r5
   b4d7e:	4630      	mov	r0, r6
   b4d80:	f7ff ff8b 	bl	b4c9a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4d84:	4630      	mov	r0, r6
   b4d86:	f7ff fe94 	bl	b4ab2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4d8a:	2110      	movs	r1, #16
   b4d8c:	4630      	mov	r0, r6
   b4d8e:	f7ff f986 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b4d92:	4668      	mov	r0, sp
   b4d94:	f7ff ff33 	bl	b4bfe <_ZN8particle5ErrorD1Ev>
    }
   b4d98:	b009      	add	sp, #36	; 0x24
   b4d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4d9c:	4631      	mov	r1, r6
   b4d9e:	a802      	add	r0, sp, #8
   b4da0:	f7ff ffb0 	bl	b4d04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4da4:	68e0      	ldr	r0, [r4, #12]
   b4da6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4daa:	b108      	cbz	r0, b4db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b4dac:	f001 febc 	bl	b6b28 <strdup>
        type_(type) {
   b4db0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4db2:	2010      	movs	r0, #16
   b4db4:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4db8:	f7ff f96d 	bl	b4096 <_Znwj>
   b4dbc:	4605      	mov	r5, r0
   b4dbe:	b1e8      	cbz	r0, b4dfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4dc0:	2700      	movs	r7, #0
   b4dc2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4dc4:	2018      	movs	r0, #24
   b4dc6:	f7ff f966 	bl	b4096 <_Znwj>
   b4dca:	4604      	mov	r4, r0
   b4dcc:	b188      	cbz	r0, b4df2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b4dce:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4dd0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4dd2:	a802      	add	r0, sp, #8
   b4dd4:	f7ff fe92 	bl	b4afc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4dd8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4dda:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ddc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4dde:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4de0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4de2:	a906      	add	r1, sp, #24
   b4de4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4de6:	60e3      	str	r3, [r4, #12]
   b4de8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b4dec:	9205      	str	r2, [sp, #20]
   b4dee:	f7ff fef9 	bl	b4be4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b4df2:	4b08      	ldr	r3, [pc, #32]	; (b4e14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b4df4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4df6:	4b08      	ldr	r3, [pc, #32]	; (b4e18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4df8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4dfa:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b4dfc:	a806      	add	r0, sp, #24
   b4dfe:	f7ff fefe 	bl	b4bfe <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4e02:	a802      	add	r0, sp, #8
   b4e04:	f7ff fe55 	bl	b4ab2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4e08:	2200      	movs	r2, #0
   b4e0a:	4629      	mov	r1, r5
   b4e0c:	4803      	ldr	r0, [pc, #12]	; (b4e1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b4e0e:	f7ff fd31 	bl	b4874 <application_thread_invoke>
   b4e12:	e7b7      	b.n	b4d84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b4e14:	000b4cad 	.word	0x000b4cad
   b4e18:	000b4f31 	.word	0x000b4f31
   b4e1c:	000b4a8b 	.word	0x000b4a8b

000b4e20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b4e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e24:	b08b      	sub	sp, #44	; 0x2c
   b4e26:	4605      	mov	r5, r0
   b4e28:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4e2c:	460f      	mov	r7, r1
   b4e2e:	4690      	mov	r8, r2
   b4e30:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4e32:	f7ff fd67 	bl	b4904 <spark_cloud_flag_connected>
   b4e36:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b4e38:	4683      	mov	fp, r0
   b4e3a:	bb38      	cbnz	r0, b4e8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b4e3c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b4e40:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4e42:	a905      	add	r1, sp, #20
   b4e44:	4630      	mov	r0, r6
   b4e46:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4e4a:	f7ff fecb 	bl	b4be4 <_ZN8particle5ErrorC1EOS0_>
   b4e4e:	2014      	movs	r0, #20
   b4e50:	f7ff f921 	bl	b4096 <_Znwj>
   b4e54:	4604      	mov	r4, r0
   b4e56:	b148      	cbz	r0, b4e6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b4e58:	2302      	movs	r3, #2
   b4e5a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4e5c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4e5e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4e62:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b4e64:	4631      	mov	r1, r6
   b4e66:	300c      	adds	r0, #12
   b4e68:	f7ff febc 	bl	b4be4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4e6c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b4e6e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4e70:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b4e74:	f7ff ff32 	bl	b4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4e78:	4630      	mov	r0, r6
   b4e7a:	f7ff fec0 	bl	b4bfe <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b4e7e:	a805      	add	r0, sp, #20
   b4e80:	f7ff febd 	bl	b4bfe <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b4e84:	4628      	mov	r0, r5
   b4e86:	b00b      	add	sp, #44	; 0x2c
   b4e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b4e8c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b4e8e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b4e90:	2014      	movs	r0, #20
   b4e92:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b4e96:	9307      	str	r3, [sp, #28]
   b4e98:	f7ff f8fd 	bl	b4096 <_Znwj>
   b4e9c:	4601      	mov	r1, r0
   b4e9e:	b118      	cbz	r0, b4ea8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4ea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b4ea4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4ea6:	7044      	strb	r4, [r0, #1]
   b4ea8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4eaa:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b4eac:	f7ff ff16 	bl	b4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b4eb0:	4b1e      	ldr	r3, [pc, #120]	; (b4f2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b4eb2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b4eb4:	2008      	movs	r0, #8
   b4eb6:	f7ff f8ee 	bl	b4096 <_Znwj>
   b4eba:	4604      	mov	r4, r0
   b4ebc:	b110      	cbz	r0, b4ec4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b4ebe:	a903      	add	r1, sp, #12
   b4ec0:	f7ff fec7 	bl	b4c52 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4ec4:	9600      	str	r6, [sp, #0]
   b4ec6:	fa5f f38a 	uxtb.w	r3, sl
   b4eca:	464a      	mov	r2, r9
   b4ecc:	4641      	mov	r1, r8
   b4ece:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b4ed0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4ed2:	f7ff fd1f 	bl	b4914 <spark_send_event>
   b4ed6:	b9b8      	cbnz	r0, b4f08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b4ed8:	9b03      	ldr	r3, [sp, #12]
   b4eda:	785b      	ldrb	r3, [r3, #1]
   b4edc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b4ee0:	b993      	cbnz	r3, b4f08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b4ee2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b4ee6:	a905      	add	r1, sp, #20
   b4ee8:	a803      	add	r0, sp, #12
   b4eea:	9205      	str	r2, [sp, #20]
   b4eec:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4ef0:	f7ff ff18 	bl	b4d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4ef4:	a805      	add	r0, sp, #20
   b4ef6:	f7ff fe82 	bl	b4bfe <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b4efa:	a805      	add	r0, sp, #20
   b4efc:	9909      	ldr	r1, [sp, #36]	; 0x24
   b4efe:	f7ff feb1 	bl	b4c64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b4f02:	a806      	add	r0, sp, #24
   b4f04:	f7ff fdf2 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4f08:	a903      	add	r1, sp, #12
   b4f0a:	a805      	add	r0, sp, #20
   b4f0c:	f7ff fea1 	bl	b4c52 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4f10:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4f12:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4f14:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b4f16:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b4f18:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4f1a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b4f1c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b4f1e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b4f20:	f7ff fde4 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4f24:	a804      	add	r0, sp, #16
   b4f26:	f7ff fde1 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b4f2a:	e7ab      	b.n	b4e84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b4f2c:	000b4fad 	.word	0x000b4fad

000b4f30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b4f30:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f34:	4605      	mov	r5, r0
	switch (__op)
   b4f36:	d103      	bne.n	b4f40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4f38:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4f3a:	6003      	str	r3, [r0, #0]
      }
   b4f3c:	2000      	movs	r0, #0
   b4f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b4f40:	2a02      	cmp	r2, #2
   b4f42:	d010      	beq.n	b4f66 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b4f44:	2a03      	cmp	r2, #3
   b4f46:	d1f9      	bne.n	b4f3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4f48:	6804      	ldr	r4, [r0, #0]
   b4f4a:	2c00      	cmp	r4, #0
   b4f4c:	d0f6      	beq.n	b4f3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b4f4e:	f104 0010 	add.w	r0, r4, #16
   b4f52:	f7ff fe54 	bl	b4bfe <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4f56:	4620      	mov	r0, r4
   b4f58:	f7ff fdab 	bl	b4ab2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4f5c:	2118      	movs	r1, #24
   b4f5e:	4620      	mov	r0, r4
   b4f60:	f7ff f89d 	bl	b409e <_ZdlPvj>
   b4f64:	e7ea      	b.n	b4f3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4f66:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b4f68:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4f6a:	f7ff f894 	bl	b4096 <_Znwj>
   b4f6e:	4604      	mov	r4, r0
   b4f70:	b150      	cbz	r0, b4f88 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b4f72:	4631      	mov	r1, r6
   b4f74:	f7ff fec6 	bl	b4d04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4f78:	6930      	ldr	r0, [r6, #16]
   b4f7a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4f7e:	b108      	cbz	r0, b4f84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b4f80:	f001 fdd2 	bl	b6b28 <strdup>
        type_(type) {
   b4f84:	6120      	str	r0, [r4, #16]
   b4f86:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b4f88:	602c      	str	r4, [r5, #0]
	}
   b4f8a:	e7d7      	b.n	b4f3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b4f8c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b4f8c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4f8e:	2300      	movs	r3, #0
   b4f90:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4f92:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4f94:	4604      	mov	r4, r0
   b4f96:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4f98:	b12b      	cbz	r3, b4fa6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4f9a:	2202      	movs	r2, #2
   b4f9c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4f9e:	68eb      	ldr	r3, [r5, #12]
   b4fa0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4fa2:	68ab      	ldr	r3, [r5, #8]
   b4fa4:	60a3      	str	r3, [r4, #8]
    }
   b4fa6:	4620      	mov	r0, r4
   b4fa8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4fac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b4fac:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4fae:	b089      	sub	sp, #36	; 0x24
   b4fb0:	4604      	mov	r4, r0
   b4fb2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b4fb4:	a801      	add	r0, sp, #4
   b4fb6:	4611      	mov	r1, r2
   b4fb8:	f7ff fe54 	bl	b4c64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b4fbc:	b1a4      	cbz	r4, b4fe8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b4fbe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4fc0:	b11d      	cbz	r5, b4fca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b4fc2:	4628      	mov	r0, r5
   b4fc4:	f001 fdb0 	bl	b6b28 <strdup>
   b4fc8:	4605      	mov	r5, r0
   b4fca:	a801      	add	r0, sp, #4
   b4fcc:	a903      	add	r1, sp, #12
        type_(type) {
   b4fce:	9503      	str	r5, [sp, #12]
   b4fd0:	f8ad 4010 	strh.w	r4, [sp, #16]
   b4fd4:	f7ff fea6 	bl	b4d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4fd8:	a803      	add	r0, sp, #12
   b4fda:	f7ff fe10 	bl	b4bfe <_ZN8particle5ErrorD1Ev>
   b4fde:	a802      	add	r0, sp, #8
   b4fe0:	f7ff fd84 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4fe4:	b009      	add	sp, #36	; 0x24
   b4fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b4fe8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4fea:	2301      	movs	r3, #1
   b4fec:	e8d5 2f4f 	ldrexb	r2, [r5]
   b4ff0:	2a00      	cmp	r2, #0
   b4ff2:	d103      	bne.n	b4ffc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b4ff4:	e8c5 3f41 	strexb	r1, r3, [r5]
   b4ff8:	2900      	cmp	r1, #0
   b4ffa:	d1f7      	bne.n	b4fec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b4ffc:	d1ef      	bne.n	b4fde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b4ffe:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5000:	f3bf 8f5b 	dmb	ish
   b5004:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5006:	1d2b      	adds	r3, r5, #4
   b5008:	f3bf 8f5b 	dmb	ish
   b500c:	e853 6f00 	ldrex	r6, [r3]
   b5010:	e843 4200 	strex	r2, r4, [r3]
   b5014:	2a00      	cmp	r2, #0
   b5016:	d1f9      	bne.n	b500c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5018:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b501c:	2e00      	cmp	r6, #0
   b501e:	d0de      	beq.n	b4fde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5020:	4620      	mov	r0, r4
   b5022:	f7ff fc1f 	bl	b4864 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5026:	4607      	mov	r7, r0
   b5028:	b160      	cbz	r0, b5044 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b502a:	f105 010c 	add.w	r1, r5, #12
   b502e:	4630      	mov	r0, r6
   b5030:	f7ff fe43 	bl	b4cba <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5034:	4630      	mov	r0, r6
   b5036:	f7ff fd3c 	bl	b4ab2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b503a:	2110      	movs	r1, #16
   b503c:	4630      	mov	r0, r6
   b503e:	f7ff f82e 	bl	b409e <_ZdlPvj>
   b5042:	e7cc      	b.n	b4fde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5044:	4631      	mov	r1, r6
   b5046:	a803      	add	r0, sp, #12
   b5048:	f7ff ffa0 	bl	b4f8c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b504c:	7b2b      	ldrb	r3, [r5, #12]
   b504e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5052:	2010      	movs	r0, #16
   b5054:	f7ff f81f 	bl	b4096 <_Znwj>
   b5058:	4605      	mov	r5, r0
   b505a:	b1d0      	cbz	r0, b5092 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b505c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b505e:	2014      	movs	r0, #20
   b5060:	f7ff f819 	bl	b4096 <_Znwj>
   b5064:	4604      	mov	r4, r0
   b5066:	b178      	cbz	r0, b5088 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5068:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b506a:	4601      	mov	r1, r0
   b506c:	a803      	add	r0, sp, #12
   b506e:	f7ff fd45 	bl	b4afc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5072:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5074:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5076:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5078:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b507a:	9205      	str	r2, [sp, #20]
   b507c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b507e:	60e3      	str	r3, [r4, #12]
   b5080:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5084:	9206      	str	r2, [sp, #24]
   b5086:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5088:	4b06      	ldr	r3, [pc, #24]	; (b50a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b508a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b508c:	4b06      	ldr	r3, [pc, #24]	; (b50a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b508e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5090:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5092:	a803      	add	r0, sp, #12
   b5094:	f7ff fd0d 	bl	b4ab2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5098:	2200      	movs	r2, #0
   b509a:	4629      	mov	r1, r5
   b509c:	4803      	ldr	r0, [pc, #12]	; (b50ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b509e:	f7ff fbe9 	bl	b4874 <application_thread_invoke>
   b50a2:	e7c7      	b.n	b5034 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b50a4:	000b4ccd 	.word	0x000b4ccd
   b50a8:	000b50b1 	.word	0x000b50b1
   b50ac:	000b4a8b 	.word	0x000b4a8b

000b50b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b50b0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b50b2:	b570      	push	{r4, r5, r6, lr}
   b50b4:	4604      	mov	r4, r0
	switch (__op)
   b50b6:	d103      	bne.n	b50c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b50b8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b50ba:	6003      	str	r3, [r0, #0]
      }
   b50bc:	2000      	movs	r0, #0
   b50be:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b50c0:	2a02      	cmp	r2, #2
   b50c2:	d00c      	beq.n	b50de <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b50c4:	2a03      	cmp	r2, #3
   b50c6:	d1f9      	bne.n	b50bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b50c8:	6804      	ldr	r4, [r0, #0]
   b50ca:	2c00      	cmp	r4, #0
   b50cc:	d0f6      	beq.n	b50bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b50ce:	4620      	mov	r0, r4
   b50d0:	f7ff fcef 	bl	b4ab2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b50d4:	2114      	movs	r1, #20
   b50d6:	4620      	mov	r0, r4
   b50d8:	f7fe ffe1 	bl	b409e <_ZdlPvj>
   b50dc:	e7ee      	b.n	b50bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b50de:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b50e0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b50e2:	f7fe ffd8 	bl	b4096 <_Znwj>
   b50e6:	4605      	mov	r5, r0
   b50e8:	b120      	cbz	r0, b50f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b50ea:	4631      	mov	r1, r6
   b50ec:	f7ff ff4e 	bl	b4f8c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b50f0:	7c33      	ldrb	r3, [r6, #16]
   b50f2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b50f4:	6025      	str	r5, [r4, #0]
	}
   b50f6:	e7e1      	b.n	b50bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b50f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b50f8:	2200      	movs	r2, #0
   b50fa:	6840      	ldr	r0, [r0, #4]
   b50fc:	4611      	mov	r1, r2
   b50fe:	f7ff bc59 	b.w	b49b4 <network_listening>

000b5102 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5102:	2200      	movs	r2, #0
   b5104:	6840      	ldr	r0, [r0, #4]
   b5106:	4611      	mov	r1, r2
   b5108:	f7ff bc64 	b.w	b49d4 <network_get_listen_timeout>

000b510c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b510c:	6840      	ldr	r0, [r0, #4]
   b510e:	2200      	movs	r2, #0
   b5110:	f7ff bc58 	b.w	b49c4 <network_set_listen_timeout>

000b5114 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5114:	6840      	ldr	r0, [r0, #4]
   b5116:	2200      	movs	r2, #0
   b5118:	f081 0101 	eor.w	r1, r1, #1
   b511c:	f7ff bc42 	b.w	b49a4 <network_listen>

000b5120 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5120:	2300      	movs	r3, #0
   b5122:	6840      	ldr	r0, [r0, #4]
   b5124:	461a      	mov	r2, r3
   b5126:	4619      	mov	r1, r3
   b5128:	f7ff bc34 	b.w	b4994 <network_off>

000b512c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b512c:	2300      	movs	r3, #0
   b512e:	6840      	ldr	r0, [r0, #4]
   b5130:	461a      	mov	r2, r3
   b5132:	4619      	mov	r1, r3
   b5134:	f7ff bc26 	b.w	b4984 <network_on>

000b5138 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5138:	2200      	movs	r2, #0
   b513a:	6840      	ldr	r0, [r0, #4]
   b513c:	4611      	mov	r1, r2
   b513e:	f7ff bc19 	b.w	b4974 <network_ready>

000b5142 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5142:	2200      	movs	r2, #0
   b5144:	6840      	ldr	r0, [r0, #4]
   b5146:	4611      	mov	r1, r2
   b5148:	f7ff bc04 	b.w	b4954 <network_connecting>

000b514c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b514c:	6840      	ldr	r0, [r0, #4]
   b514e:	2200      	movs	r2, #0
   b5150:	2102      	movs	r1, #2
   b5152:	f7ff bc07 	b.w	b4964 <network_disconnect>

000b5156 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5156:	2300      	movs	r3, #0
   b5158:	6840      	ldr	r0, [r0, #4]
   b515a:	461a      	mov	r2, r3
   b515c:	f7ff bbf2 	b.w	b4944 <network_connect>

000b5160 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b5160:	4b02      	ldr	r3, [pc, #8]	; (b516c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5162:	2203      	movs	r2, #3
   b5164:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5166:	4a02      	ldr	r2, [pc, #8]	; (b5170 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5168:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b516a:	4770      	bx	lr
   b516c:	2003e6b8 	.word	0x2003e6b8
   b5170:	000b6de4 	.word	0x000b6de4

000b5174 <_ZN8particle6detail9_getVCellEhh>:
namespace particle {
namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   b5174:	0909      	lsrs	r1, r1, #4
   b5176:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   b517a:	ee07 1a90 	vmov	s15, r1
        return value / 800.0;
    }
   b517e:	ed9f 0a03 	vldr	s0, [pc, #12]	; b518c <_ZN8particle6detail9_getVCellEhh+0x18>
        float value = (float)((MSB << 4) | (LSB >> 4));
   b5182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
   b5186:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b518a:	4770      	bx	lr
   b518c:	44480000 	.word	0x44480000

000b5190 <_ZN8particle6detail7_getSoCEhhh>:

        // Maxim ModelGauge doc only mentions 18 and 19 bit
        // MSB is the whole number
        // LSB is the decimal, resolution in units 1/256%
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b5190:	eb01 2300 	add.w	r3, r1, r0, lsl #8
   b5194:	ee00 3a10 	vmov	s0, r3
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
   b5198:	2a13      	cmp	r2, #19
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b519a:	bf0c      	ite	eq
   b519c:	eddf 7a04 	vldreq	s15, [pc, #16]	; b51b0 <_ZN8particle6detail7_getSoCEhhh+0x20>
        } else { // default to 18-bit calculation
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b51a0:	eddf 7a04 	vldrne	s15, [pc, #16]	; b51b4 <_ZN8particle6detail7_getSoCEhhh+0x24>
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b51a4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b51a8:	ee20 0a27 	vmul.f32	s0, s0, s15
        }
        return soc_percent;

    }
   b51ac:	4770      	bx	lr
   b51ae:	bf00      	nop
   b51b0:	3b000000 	.word	0x3b000000
   b51b4:	3b800000 	.word	0x3b800000

000b51b8 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b51b8:	6800      	ldr	r0, [r0, #0]
   b51ba:	f000 b91c 	b.w	b53f6 <_ZN7TwoWire4lockEv>

000b51be <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b51be:	b510      	push	{r4, lr}
   b51c0:	4604      	mov	r4, r0
      lock_(_lock) {
   b51c2:	6001      	str	r1, [r0, #0]
   b51c4:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b51c6:	b10a      	cbz	r2, b51cc <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b51c8:	f7ff fff6 	bl	b51b8 <_ZN9FuelGauge4lockEv>
}
   b51cc:	4620      	mov	r0, r4
   b51ce:	bd10      	pop	{r4, pc}

000b51d0 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b51d0:	b513      	push	{r0, r1, r4, lr}
   b51d2:	4604      	mov	r4, r0
   b51d4:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b51d6:	f000 feed 	bl	b5fb4 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b51da:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b51dc:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b51de:	4620      	mov	r0, r4
   b51e0:	f7ff ffed 	bl	b51be <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b51e4:	4620      	mov	r0, r4
   b51e6:	b002      	add	sp, #8
   b51e8:	bd10      	pop	{r4, pc}

000b51ea <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b51ea:	6800      	ldr	r0, [r0, #0]
   b51ec:	f000 b90c 	b.w	b5408 <_ZN7TwoWire6unlockEv>

000b51f0 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b51f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b51f4:	4604      	mov	r4, r0
   b51f6:	460d      	mov	r5, r1
   b51f8:	4617      	mov	r7, r2
   b51fa:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b51fc:	f7ff ffdc 	bl	b51b8 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5200:	2236      	movs	r2, #54	; 0x36
   b5202:	2300      	movs	r3, #0
   b5204:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b5208:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b520a:	230a      	movs	r3, #10
   b520c:	f04f 0801 	mov.w	r8, #1
   b5210:	4669      	mov	r1, sp
   b5212:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b5216:	f000 f8d2 	bl	b53be <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b521a:	6820      	ldr	r0, [r4, #0]
   b521c:	6803      	ldr	r3, [r0, #0]
   b521e:	4629      	mov	r1, r5
   b5220:	689b      	ldr	r3, [r3, #8]
   b5222:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b5224:	6820      	ldr	r0, [r4, #0]
   b5226:	4641      	mov	r1, r8
   b5228:	f000 f8e1 	bl	b53ee <_ZN7TwoWire15endTransmissionEh>
   b522c:	4605      	mov	r5, r0
   b522e:	b140      	cbz	r0, b5242 <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b5230:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   b5234:	4620      	mov	r0, r4
   b5236:	f7ff ffd8 	bl	b51ea <_ZN9FuelGauge6unlockEv>
}
   b523a:	4628      	mov	r0, r5
   b523c:	b004      	add	sp, #16
   b523e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b5242:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b5244:	6820      	ldr	r0, [r4, #0]
   b5246:	9301      	str	r3, [sp, #4]
   b5248:	4669      	mov	r1, sp
   b524a:	f000 f8a1 	bl	b5390 <_ZN7TwoWire11requestFromERK16WireTransmission>
   b524e:	2802      	cmp	r0, #2
   b5250:	d1ee      	bne.n	b5230 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b5252:	6820      	ldr	r0, [r4, #0]
   b5254:	6803      	ldr	r3, [r0, #0]
   b5256:	695b      	ldr	r3, [r3, #20]
   b5258:	4798      	blx	r3
   b525a:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b525c:	6820      	ldr	r0, [r4, #0]
   b525e:	6803      	ldr	r3, [r0, #0]
   b5260:	695b      	ldr	r3, [r3, #20]
   b5262:	4798      	blx	r3
   b5264:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b5266:	e7e5      	b.n	b5234 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b5268 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   b5268:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   b526a:	2300      	movs	r3, #0
   b526c:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b5270:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b5274:	f10d 0206 	add.w	r2, sp, #6
   b5278:	f10d 0307 	add.w	r3, sp, #7
   b527c:	2102      	movs	r1, #2
   b527e:	f7ff ffb7 	bl	b51f0 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b5282:	b940      	cbnz	r0, b5296 <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   b5284:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b5288:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b528c:	b003      	add	sp, #12
   b528e:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   b5292:	f7ff bf6f 	b.w	b5174 <_ZN8particle6detail9_getVCellEhh>
}
   b5296:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b529a:	b003      	add	sp, #12
   b529c:	f85d fb04 	ldr.w	pc, [sp], #4

000b52a0 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   b52a0:	b510      	push	{r4, lr}
   b52a2:	b08c      	sub	sp, #48	; 0x30
    byte MSB = 0;
   b52a4:	2300      	movs	r3, #0
   b52a6:	f88d 300e 	strb.w	r3, [sp, #14]
    byte LSB = 0;
   b52aa:	f88d 300f 	strb.w	r3, [sp, #15]
    if (readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b52ae:	2104      	movs	r1, #4
   b52b0:	f10d 030f 	add.w	r3, sp, #15
   b52b4:	f10d 020e 	add.w	r2, sp, #14
   b52b8:	f7ff ff9a 	bl	b51f0 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b52bc:	4601      	mov	r1, r0
   b52be:	b9c8      	cbnz	r0, b52f4 <_ZN9FuelGauge6getSoCEv+0x54>
    hal_power_config config = {};
   b52c0:	2420      	movs	r4, #32
   b52c2:	9001      	str	r0, [sp, #4]
   b52c4:	4622      	mov	r2, r4
   b52c6:	a804      	add	r0, sp, #16
   b52c8:	f001 fbf8 	bl	b6abc <memset>
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b52cc:	9901      	ldr	r1, [sp, #4]
    config.size = sizeof(config);
   b52ce:	f88d 4015 	strb.w	r4, [sp, #21]
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b52d2:	a804      	add	r0, sp, #16
   b52d4:	f7ff fafc 	bl	b48d0 <system_power_management_get_config>
   b52d8:	b950      	cbnz	r0, b52f0 <_ZN9FuelGauge6getSoCEv+0x50>
        soc_bits = config.soc_bits;
   b52da:	f89d 201e 	ldrb.w	r2, [sp, #30]
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b52de:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b52e2:	f89d 000e 	ldrb.w	r0, [sp, #14]
}
   b52e6:	b00c      	add	sp, #48	; 0x30
   b52e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b52ec:	f7ff bf50 	b.w	b5190 <_ZN8particle6detail7_getSoCEhhh>
    int soc_bits = particle::power::DEFAULT_SOC_18_BIT_PRECISION;
   b52f0:	2212      	movs	r2, #18
   b52f2:	e7f4      	b.n	b52de <_ZN9FuelGauge6getSoCEv+0x3e>
}
   b52f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b52f8:	b00c      	add	sp, #48	; 0x30
   b52fa:	bd10      	pop	{r4, pc}

000b52fc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b52fc:	4770      	bx	lr

000b52fe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b52fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5300:	4606      	mov	r6, r0
   b5302:	4615      	mov	r5, r2
   b5304:	460c      	mov	r4, r1
   b5306:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5308:	42bc      	cmp	r4, r7
   b530a:	d006      	beq.n	b531a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b530c:	6833      	ldr	r3, [r6, #0]
   b530e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5312:	689b      	ldr	r3, [r3, #8]
   b5314:	4630      	mov	r0, r6
   b5316:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5318:	e7f6      	b.n	b5308 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b531a:	4628      	mov	r0, r5
   b531c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b531e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b531e:	7c00      	ldrb	r0, [r0, #16]
   b5320:	2200      	movs	r2, #0
   b5322:	f7ff b987 	b.w	b4634 <hal_i2c_write>

000b5326 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5326:	7c00      	ldrb	r0, [r0, #16]
   b5328:	2100      	movs	r1, #0
   b532a:	f7ff b98b 	b.w	b4644 <hal_i2c_available>

000b532e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b532e:	7c00      	ldrb	r0, [r0, #16]
   b5330:	2100      	movs	r1, #0
   b5332:	f7ff b98f 	b.w	b4654 <hal_i2c_read>

000b5336 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5336:	7c00      	ldrb	r0, [r0, #16]
   b5338:	2100      	movs	r1, #0
   b533a:	f7ff b993 	b.w	b4664 <hal_i2c_peek>

000b533e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b533e:	7c00      	ldrb	r0, [r0, #16]
   b5340:	2100      	movs	r1, #0
   b5342:	f7ff b997 	b.w	b4674 <hal_i2c_flush>

000b5346 <_ZN7TwoWireD0Ev>:
   b5346:	b510      	push	{r4, lr}
   b5348:	2114      	movs	r1, #20
   b534a:	4604      	mov	r4, r0
   b534c:	f7fe fea7 	bl	b409e <_ZdlPvj>
   b5350:	4620      	mov	r0, r4
   b5352:	bd10      	pop	{r4, pc}

000b5354 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5354:	b538      	push	{r3, r4, r5, lr}
   b5356:	4604      	mov	r4, r0
   b5358:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b535a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b535e:	2200      	movs	r2, #0
   b5360:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5364:	4b09      	ldr	r3, [pc, #36]	; (b538c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5366:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5368:	4608      	mov	r0, r1
   b536a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b536c:	4629      	mov	r1, r5
   b536e:	f7ff f991 	bl	b4694 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5372:	30bf      	adds	r0, #191	; 0xbf
   b5374:	d108      	bne.n	b5388 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5376:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5378:	07db      	lsls	r3, r3, #31
   b537a:	d505      	bpl.n	b5388 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b537c:	6868      	ldr	r0, [r5, #4]
   b537e:	f7ff fb49 	bl	b4a14 <free>
    free(conf.tx_buffer);
   b5382:	68e8      	ldr	r0, [r5, #12]
   b5384:	f7ff fb46 	bl	b4a14 <free>
}
   b5388:	4620      	mov	r0, r4
   b538a:	bd38      	pop	{r3, r4, r5, pc}
   b538c:	000b6e20 	.word	0x000b6e20

000b5390 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5392:	2200      	movs	r2, #0
   b5394:	2314      	movs	r3, #20
   b5396:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b539a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b539e:	780b      	ldrb	r3, [r1, #0]
   b53a0:	f88d 3008 	strb.w	r3, [sp, #8]
   b53a4:	684b      	ldr	r3, [r1, #4]
   b53a6:	9303      	str	r3, [sp, #12]
   b53a8:	68cb      	ldr	r3, [r1, #12]
   b53aa:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b53ac:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b53ae:	7a0b      	ldrb	r3, [r1, #8]
   b53b0:	9305      	str	r3, [sp, #20]
   b53b2:	a901      	add	r1, sp, #4
   b53b4:	f7ff f986 	bl	b46c4 <hal_i2c_request_ex>
}
   b53b8:	b007      	add	sp, #28
   b53ba:	f85d fb04 	ldr.w	pc, [sp], #4

000b53be <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b53be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b53c0:	2300      	movs	r3, #0
   b53c2:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b53c6:	684a      	ldr	r2, [r1, #4]
   b53c8:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b53ca:	2314      	movs	r3, #20
    };
   b53cc:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b53ce:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b53d2:	780b      	ldrb	r3, [r1, #0]
    };
   b53d4:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b53d6:	7a0a      	ldrb	r2, [r1, #8]
   b53d8:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b53da:	7c00      	ldrb	r0, [r0, #16]
    };
   b53dc:	f88d 3008 	strb.w	r3, [sp, #8]
   b53e0:	aa01      	add	r2, sp, #4
   b53e2:	4619      	mov	r1, r3
   b53e4:	f7ff f916 	bl	b4614 <hal_i2c_begin_transmission>
}
   b53e8:	b007      	add	sp, #28
   b53ea:	f85d fb04 	ldr.w	pc, [sp], #4

000b53ee <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b53ee:	7c00      	ldrb	r0, [r0, #16]
   b53f0:	2200      	movs	r2, #0
   b53f2:	f7ff b917 	b.w	b4624 <hal_i2c_end_transmission>

000b53f6 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b53f6:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b53f8:	2100      	movs	r1, #0
   b53fa:	7c00      	ldrb	r0, [r0, #16]
   b53fc:	f7ff f952 	bl	b46a4 <hal_i2c_lock>
}
   b5400:	fab0 f080 	clz	r0, r0
   b5404:	0940      	lsrs	r0, r0, #5
   b5406:	bd08      	pop	{r3, pc}

000b5408 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b5408:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b540a:	2100      	movs	r1, #0
   b540c:	7c00      	ldrb	r0, [r0, #16]
   b540e:	f7ff f951 	bl	b46b4 <hal_i2c_unlock>
}
   b5412:	fab0 f080 	clz	r0, r0
   b5416:	0940      	lsrs	r0, r0, #5
   b5418:	bd08      	pop	{r3, pc}

000b541a <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b541a:	4770      	bx	lr

000b541c <_ZN9IPAddressD0Ev>:
   b541c:	b510      	push	{r4, lr}
   b541e:	2118      	movs	r1, #24
   b5420:	4604      	mov	r4, r0
   b5422:	f7fe fe3c 	bl	b409e <_ZdlPvj>
   b5426:	4620      	mov	r0, r4
   b5428:	bd10      	pop	{r4, pc}

000b542a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b542a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b542c:	7d03      	ldrb	r3, [r0, #20]
   b542e:	2b06      	cmp	r3, #6
{
   b5430:	b08d      	sub	sp, #52	; 0x34
   b5432:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5434:	f100 0704 	add.w	r7, r0, #4
   b5438:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b543c:	d012      	beq.n	b5464 <_ZNK9IPAddress7printToER5Print+0x3a>
   b543e:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5442:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5446:	220a      	movs	r2, #10
   b5448:	4630      	mov	r0, r6
   b544a:	f000 f95b 	bl	b5704 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b544e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5450:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5452:	d019      	beq.n	b5488 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5454:	2c00      	cmp	r4, #0
   b5456:	d0f4      	beq.n	b5442 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5458:	212e      	movs	r1, #46	; 0x2e
   b545a:	4630      	mov	r0, r6
   b545c:	f000 f939 	bl	b56d2 <_ZN5Print5printEc>
   b5460:	4404      	add	r4, r0
   b5462:	e7ee      	b.n	b5442 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5464:	232f      	movs	r3, #47	; 0x2f
   b5466:	466a      	mov	r2, sp
   b5468:	4639      	mov	r1, r7
   b546a:	200a      	movs	r0, #10
		buf[0] = 0;
   b546c:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5470:	f7ff f930 	bl	b46d4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5474:	4668      	mov	r0, sp
   b5476:	f001 fb74 	bl	b6b62 <strlen>
   b547a:	6833      	ldr	r3, [r6, #0]
   b547c:	4602      	mov	r2, r0
   b547e:	68db      	ldr	r3, [r3, #12]
   b5480:	4669      	mov	r1, sp
   b5482:	4630      	mov	r0, r6
   b5484:	4798      	blx	r3
   b5486:	4604      	mov	r4, r0
    }
    return n;
}
   b5488:	4620      	mov	r0, r4
   b548a:	b00d      	add	sp, #52	; 0x34
   b548c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b5490 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5490:	b510      	push	{r4, lr}
   b5492:	4b05      	ldr	r3, [pc, #20]	; (b54a8 <_ZN9IPAddressC1Ev+0x18>)
   b5494:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5496:	2211      	movs	r2, #17
   b5498:	f840 3b04 	str.w	r3, [r0], #4
   b549c:	2100      	movs	r1, #0
   b549e:	f001 fb0d 	bl	b6abc <memset>
}
   b54a2:	4620      	mov	r0, r4
   b54a4:	bd10      	pop	{r4, pc}
   b54a6:	bf00      	nop
   b54a8:	000b6e48 	.word	0x000b6e48

000b54ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b54ac:	4603      	mov	r3, r0
   b54ae:	4a07      	ldr	r2, [pc, #28]	; (b54cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b54b0:	b510      	push	{r4, lr}
   b54b2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b54b6:	f101 0210 	add.w	r2, r1, #16
   b54ba:	f851 4b04 	ldr.w	r4, [r1], #4
   b54be:	f843 4b04 	str.w	r4, [r3], #4
   b54c2:	4291      	cmp	r1, r2
   b54c4:	d1f9      	bne.n	b54ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b54c6:	780a      	ldrb	r2, [r1, #0]
   b54c8:	701a      	strb	r2, [r3, #0]
}
   b54ca:	bd10      	pop	{r4, pc}
   b54cc:	000b6e48 	.word	0x000b6e48

000b54d0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b54d0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b54d2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b54d6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b54da:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b54de:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b54e2:	2304      	movs	r3, #4
   b54e4:	6041      	str	r1, [r0, #4]
   b54e6:	7503      	strb	r3, [r0, #20]
}
   b54e8:	bd10      	pop	{r4, pc}
	...

000b54ec <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b54ec:	b507      	push	{r0, r1, r2, lr}
   b54ee:	4b06      	ldr	r3, [pc, #24]	; (b5508 <_ZN9IPAddressC1EPKh+0x1c>)
   b54f0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b54f2:	78cb      	ldrb	r3, [r1, #3]
   b54f4:	9300      	str	r3, [sp, #0]
   b54f6:	788b      	ldrb	r3, [r1, #2]
   b54f8:	784a      	ldrb	r2, [r1, #1]
   b54fa:	7809      	ldrb	r1, [r1, #0]
   b54fc:	f7ff ffe8 	bl	b54d0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5500:	b003      	add	sp, #12
   b5502:	f85d fb04 	ldr.w	pc, [sp], #4
   b5506:	bf00      	nop
   b5508:	000b6e48 	.word	0x000b6e48

000b550c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b550c:	4b01      	ldr	r3, [pc, #4]	; (b5514 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b550e:	4a02      	ldr	r2, [pc, #8]	; (b5518 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5510:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5512:	4770      	bx	lr
   b5514:	2003e6c0 	.word	0x2003e6c0
   b5518:	000b6e54 	.word	0x000b6e54

000b551c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b551c:	2300      	movs	r3, #0
   b551e:	6840      	ldr	r0, [r0, #4]
   b5520:	461a      	mov	r2, r3
   b5522:	f7ff ba0f 	b.w	b4944 <network_connect>

000b5526 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5526:	6840      	ldr	r0, [r0, #4]
   b5528:	2200      	movs	r2, #0
   b552a:	2102      	movs	r1, #2
   b552c:	f7ff ba1a 	b.w	b4964 <network_disconnect>

000b5530 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5530:	2200      	movs	r2, #0
   b5532:	6840      	ldr	r0, [r0, #4]
   b5534:	4611      	mov	r1, r2
   b5536:	f7ff ba0d 	b.w	b4954 <network_connecting>

000b553a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b553a:	2200      	movs	r2, #0
   b553c:	6840      	ldr	r0, [r0, #4]
   b553e:	4611      	mov	r1, r2
   b5540:	f7ff ba18 	b.w	b4974 <network_ready>

000b5544 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5544:	2300      	movs	r3, #0
   b5546:	6840      	ldr	r0, [r0, #4]
   b5548:	461a      	mov	r2, r3
   b554a:	4619      	mov	r1, r3
   b554c:	f7ff ba1a 	b.w	b4984 <network_on>

000b5550 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5550:	2300      	movs	r3, #0
   b5552:	6840      	ldr	r0, [r0, #4]
   b5554:	461a      	mov	r2, r3
   b5556:	4619      	mov	r1, r3
   b5558:	f7ff ba1c 	b.w	b4994 <network_off>

000b555c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b555c:	6840      	ldr	r0, [r0, #4]
   b555e:	2100      	movs	r1, #0
   b5560:	f7ff ba40 	b.w	b49e4 <network_is_on>

000b5564 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5564:	6840      	ldr	r0, [r0, #4]
   b5566:	2100      	movs	r1, #0
   b5568:	f7ff ba44 	b.w	b49f4 <network_is_off>

000b556c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b556c:	6840      	ldr	r0, [r0, #4]
   b556e:	2200      	movs	r2, #0
   b5570:	f081 0101 	eor.w	r1, r1, #1
   b5574:	f7ff ba16 	b.w	b49a4 <network_listen>

000b5578 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5578:	6840      	ldr	r0, [r0, #4]
   b557a:	2200      	movs	r2, #0
   b557c:	f7ff ba22 	b.w	b49c4 <network_set_listen_timeout>

000b5580 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5580:	2200      	movs	r2, #0
   b5582:	6840      	ldr	r0, [r0, #4]
   b5584:	4611      	mov	r1, r2
   b5586:	f7ff ba25 	b.w	b49d4 <network_get_listen_timeout>

000b558a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b558a:	2200      	movs	r2, #0
   b558c:	6840      	ldr	r0, [r0, #4]
   b558e:	4611      	mov	r1, r2
   b5590:	f7ff ba10 	b.w	b49b4 <network_listening>

000b5594 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5598:	b095      	sub	sp, #84	; 0x54
   b559a:	4614      	mov	r4, r2
   b559c:	460d      	mov	r5, r1
   b559e:	4607      	mov	r7, r0
    IPAddress addr;
   b55a0:	f7ff ff76 	bl	b5490 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b55a4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b55a6:	221c      	movs	r2, #28
   b55a8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b55aa:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b55ac:	f001 fa86 	bl	b6abc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b55b0:	2340      	movs	r3, #64	; 0x40
   b55b2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b55b4:	4620      	mov	r0, r4
   b55b6:	466b      	mov	r3, sp
   b55b8:	aa0c      	add	r2, sp, #48	; 0x30
   b55ba:	2100      	movs	r1, #0
   b55bc:	f7ff f89a 	bl	b46f4 <netdb_getaddrinfo>
    if (!r) {
   b55c0:	4604      	mov	r4, r0
   b55c2:	2800      	cmp	r0, #0
   b55c4:	d14b      	bne.n	b565e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b55c6:	4602      	mov	r2, r0
   b55c8:	2101      	movs	r1, #1
   b55ca:	6868      	ldr	r0, [r5, #4]
   b55cc:	f7ff f9d2 	bl	b4974 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b55d0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b55d2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b55d4:	4622      	mov	r2, r4
   b55d6:	6868      	ldr	r0, [r5, #4]
   b55d8:	f7ff f9cc 	bl	b4974 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b55dc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b55de:	4681      	mov	r9, r0
        bool ok = false;
   b55e0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b55e2:	2e00      	cmp	r6, #0
   b55e4:	d03b      	beq.n	b565e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b55e6:	2900      	cmp	r1, #0
   b55e8:	d139      	bne.n	b565e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b55ea:	6873      	ldr	r3, [r6, #4]
   b55ec:	2b02      	cmp	r3, #2
   b55ee:	d003      	beq.n	b55f8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b55f0:	2b0a      	cmp	r3, #10
   b55f2:	d011      	beq.n	b5618 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b55f4:	69f6      	ldr	r6, [r6, #28]
   b55f6:	e7f4      	b.n	b55e2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b55f8:	f1b8 0f00 	cmp.w	r8, #0
   b55fc:	d0fa      	beq.n	b55f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b55fe:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5600:	a806      	add	r0, sp, #24
   b5602:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5604:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5606:	f7ff ff71 	bl	b54ec <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b560a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b560c:	1d3c      	adds	r4, r7, #4
   b560e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5610:	682b      	ldr	r3, [r5, #0]
   b5612:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5614:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5616:	e7ed      	b.n	b55f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5618:	f1b9 0f00 	cmp.w	r9, #0
   b561c:	d0ea      	beq.n	b55f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b561e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5620:	2210      	movs	r2, #16
   b5622:	a801      	add	r0, sp, #4
   b5624:	f001 fa4a 	bl	b6abc <memset>
                    a.v = 6;
   b5628:	2306      	movs	r3, #6
   b562a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b562e:	ad01      	add	r5, sp, #4
   b5630:	f104 0308 	add.w	r3, r4, #8
   b5634:	3418      	adds	r4, #24
   b5636:	6818      	ldr	r0, [r3, #0]
   b5638:	6859      	ldr	r1, [r3, #4]
   b563a:	462a      	mov	r2, r5
   b563c:	c203      	stmia	r2!, {r0, r1}
   b563e:	3308      	adds	r3, #8
   b5640:	42a3      	cmp	r3, r4
   b5642:	4615      	mov	r5, r2
   b5644:	d1f7      	bne.n	b5636 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5646:	a901      	add	r1, sp, #4
   b5648:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b564a:	ad07      	add	r5, sp, #28
   b564c:	f7ff ff2e 	bl	b54ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5652:	1d3c      	adds	r4, r7, #4
   b5654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5656:	682b      	ldr	r3, [r5, #0]
   b5658:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b565a:	4649      	mov	r1, r9
   b565c:	e7ca      	b.n	b55f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b565e:	9800      	ldr	r0, [sp, #0]
   b5660:	f7ff f840 	bl	b46e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5664:	4638      	mov	r0, r7
   b5666:	b015      	add	sp, #84	; 0x54
   b5668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b566c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b566c:	4b02      	ldr	r3, [pc, #8]	; (b5678 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b566e:	4a03      	ldr	r2, [pc, #12]	; (b567c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5670:	601a      	str	r2, [r3, #0]
   b5672:	2200      	movs	r2, #0
   b5674:	605a      	str	r2, [r3, #4]

} // spark
   b5676:	4770      	bx	lr
   b5678:	2003e6c4 	.word	0x2003e6c4
   b567c:	000b6e60 	.word	0x000b6e60

000b5680 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   b5680:	b508      	push	{r3, lr}
            return &Wire1;
   b5682:	f000 fc97 	bl	b5fb4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   b5686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   b568a:	f7ff beb4 	b.w	b53f6 <_ZN7TwoWire4lockEv>

000b568e <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   b568e:	b510      	push	{r4, lr}
   b5690:	4604      	mov	r4, r0
    lock_(_lock)
   b5692:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   b5694:	b109      	cbz	r1, b569a <_ZN4PMICC1Eb+0xc>
        lock();
   b5696:	f7ff fff3 	bl	b5680 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   b569a:	4620      	mov	r0, r4
   b569c:	bd10      	pop	{r4, pc}

000b569e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b569e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56a0:	4606      	mov	r6, r0
   b56a2:	460d      	mov	r5, r1
  size_t n = 0;
   b56a4:	188f      	adds	r7, r1, r2
   b56a6:	2400      	movs	r4, #0
  while (size--) {
   b56a8:	42bd      	cmp	r5, r7
   b56aa:	d00c      	beq.n	b56c6 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b56ac:	6833      	ldr	r3, [r6, #0]
   b56ae:	f815 1b01 	ldrb.w	r1, [r5], #1
   b56b2:	689b      	ldr	r3, [r3, #8]
   b56b4:	4630      	mov	r0, r6
   b56b6:	4798      	blx	r3
     if (chunk>=0)
   b56b8:	1e03      	subs	r3, r0, #0
   b56ba:	db01      	blt.n	b56c0 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b56bc:	441c      	add	r4, r3
  while (size--) {
   b56be:	e7f3      	b.n	b56a8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b56c0:	2c00      	cmp	r4, #0
   b56c2:	bf08      	it	eq
   b56c4:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b56c6:	4620      	mov	r0, r4
   b56c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b56ca <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b56ca:	b508      	push	{r3, lr}
  return write(str);
   b56cc:	f7fe ff58 	bl	b4580 <_ZN5Print5writeEPKc>
}
   b56d0:	bd08      	pop	{r3, pc}

000b56d2 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b56d2:	6803      	ldr	r3, [r0, #0]
   b56d4:	689b      	ldr	r3, [r3, #8]
   b56d6:	4718      	bx	r3

000b56d8 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b56d8:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b56da:	210d      	movs	r1, #13
{
   b56dc:	4605      	mov	r5, r0
  size_t n = print('\r');
   b56de:	f7ff fff8 	bl	b56d2 <_ZN5Print5printEc>
  n += print('\n');
   b56e2:	210a      	movs	r1, #10
  size_t n = print('\r');
   b56e4:	4604      	mov	r4, r0
  n += print('\n');
   b56e6:	4628      	mov	r0, r5
   b56e8:	f7ff fff3 	bl	b56d2 <_ZN5Print5printEc>
  return n;
}
   b56ec:	4420      	add	r0, r4
   b56ee:	bd38      	pop	{r3, r4, r5, pc}

000b56f0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b56f0:	b538      	push	{r3, r4, r5, lr}
   b56f2:	4605      	mov	r5, r0
  return write(str);
   b56f4:	f7fe ff44 	bl	b4580 <_ZN5Print5writeEPKc>
   b56f8:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b56fa:	4628      	mov	r0, r5
   b56fc:	f7ff ffec 	bl	b56d8 <_ZN5Print7printlnEv>
  return n;
}
   b5700:	4420      	add	r0, r4
   b5702:	bd38      	pop	{r3, r4, r5, pc}

000b5704 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5704:	b530      	push	{r4, r5, lr}
   b5706:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5708:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b570a:	2a01      	cmp	r2, #1
  *str = '\0';
   b570c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5710:	bf98      	it	ls
   b5712:	220a      	movls	r2, #10
   b5714:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5716:	460d      	mov	r5, r1
   b5718:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b571c:	fb01 5312 	mls	r3, r1, r2, r5
   b5720:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5724:	2b09      	cmp	r3, #9
   b5726:	bf94      	ite	ls
   b5728:	3330      	addls	r3, #48	; 0x30
   b572a:	3337      	addhi	r3, #55	; 0x37
   b572c:	b2db      	uxtb	r3, r3
  } while(n);
   b572e:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5730:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5734:	d9ef      	bls.n	b5716 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5736:	4621      	mov	r1, r4
   b5738:	f7fe ff22 	bl	b4580 <_ZN5Print5writeEPKc>
}
   b573c:	b00b      	add	sp, #44	; 0x2c
   b573e:	bd30      	pop	{r4, r5, pc}

000b5740 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b5740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5744:	ec55 4b10 	vmov	r4, r5, d0
   b5748:	4606      	mov	r6, r0
   b574a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b574c:	ee10 2a10 	vmov	r2, s0
   b5750:	ee10 0a10 	vmov	r0, s0
   b5754:	462b      	mov	r3, r5
   b5756:	4629      	mov	r1, r5
   b5758:	f001 f8ee 	bl	b6938 <__aeabi_dcmpun>
   b575c:	b140      	cbz	r0, b5770 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b575e:	4953      	ldr	r1, [pc, #332]	; (b58ac <_ZN5Print10printFloatEdh+0x16c>)
   b5760:	4630      	mov	r0, r6
   b5762:	f7fe ff0d 	bl	b4580 <_ZN5Print5writeEPKc>
   b5766:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b5768:	4650      	mov	r0, sl
   b576a:	b003      	add	sp, #12
   b576c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b5770:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b5774:	4b4e      	ldr	r3, [pc, #312]	; (b58b0 <_ZN5Print10printFloatEdh+0x170>)
   b5776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b577a:	4620      	mov	r0, r4
   b577c:	4649      	mov	r1, r9
   b577e:	f001 f8db 	bl	b6938 <__aeabi_dcmpun>
   b5782:	b948      	cbnz	r0, b5798 <_ZN5Print10printFloatEdh+0x58>
   b5784:	4b4a      	ldr	r3, [pc, #296]	; (b58b0 <_ZN5Print10printFloatEdh+0x170>)
   b5786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b578a:	4620      	mov	r0, r4
   b578c:	4649      	mov	r1, r9
   b578e:	f001 f8b5 	bl	b68fc <__aeabi_dcmple>
   b5792:	b908      	cbnz	r0, b5798 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b5794:	4947      	ldr	r1, [pc, #284]	; (b58b4 <_ZN5Print10printFloatEdh+0x174>)
   b5796:	e7e3      	b.n	b5760 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b5798:	4b47      	ldr	r3, [pc, #284]	; (b58b8 <_ZN5Print10printFloatEdh+0x178>)
   b579a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b579e:	4620      	mov	r0, r4
   b57a0:	4629      	mov	r1, r5
   b57a2:	f001 f8bf 	bl	b6924 <__aeabi_dcmpgt>
   b57a6:	b108      	cbz	r0, b57ac <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b57a8:	4944      	ldr	r1, [pc, #272]	; (b58bc <_ZN5Print10printFloatEdh+0x17c>)
   b57aa:	e7d9      	b.n	b5760 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b57ac:	4b44      	ldr	r3, [pc, #272]	; (b58c0 <_ZN5Print10printFloatEdh+0x180>)
   b57ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b57b2:	4620      	mov	r0, r4
   b57b4:	4629      	mov	r1, r5
   b57b6:	f001 f897 	bl	b68e8 <__aeabi_dcmplt>
   b57ba:	2800      	cmp	r0, #0
   b57bc:	d1f4      	bne.n	b57a8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b57be:	2200      	movs	r2, #0
   b57c0:	2300      	movs	r3, #0
   b57c2:	4620      	mov	r0, r4
   b57c4:	4629      	mov	r1, r5
   b57c6:	f001 f88f 	bl	b68e8 <__aeabi_dcmplt>
   b57ca:	b1d0      	cbz	r0, b5802 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b57cc:	212d      	movs	r1, #45	; 0x2d
   b57ce:	4630      	mov	r0, r6
   b57d0:	f7ff ff7f 	bl	b56d2 <_ZN5Print5printEc>
     number = -number;
   b57d4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b57d8:	4682      	mov	sl, r0
     number = -number;
   b57da:	461d      	mov	r5, r3
  double rounding = 0.5;
   b57dc:	4939      	ldr	r1, [pc, #228]	; (b58c4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b57de:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b58cc <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b57e2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b57e6:	2000      	movs	r0, #0
    rounding /= 10.0;
   b57e8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b57ec:	fa5f f38b 	uxtb.w	r3, fp
   b57f0:	429f      	cmp	r7, r3
   b57f2:	d908      	bls.n	b5806 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b57f4:	4642      	mov	r2, r8
   b57f6:	464b      	mov	r3, r9
   b57f8:	f000 ff2e 	bl	b6658 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b57fc:	f10b 0b01 	add.w	fp, fp, #1
   b5800:	e7f4      	b.n	b57ec <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b5802:	4682      	mov	sl, r0
   b5804:	e7ea      	b.n	b57dc <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b5806:	4622      	mov	r2, r4
   b5808:	462b      	mov	r3, r5
   b580a:	f000 fc45 	bl	b6098 <__adddf3>
   b580e:	460d      	mov	r5, r1
   b5810:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b5812:	f001 f8cf 	bl	b69b4 <__aeabi_d2uiz>
   b5816:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b5818:	f000 fd7a 	bl	b6310 <__aeabi_ui2d>
   b581c:	4602      	mov	r2, r0
   b581e:	460b      	mov	r3, r1
   b5820:	4620      	mov	r0, r4
   b5822:	4629      	mov	r1, r5
   b5824:	f000 fc36 	bl	b6094 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b5828:	220a      	movs	r2, #10
   b582a:	4604      	mov	r4, r0
   b582c:	460d      	mov	r5, r1
   b582e:	4630      	mov	r0, r6
   b5830:	4641      	mov	r1, r8
   b5832:	f7ff ff67 	bl	b5704 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b5836:	4482      	add	sl, r0
  if (digits > 0) {
   b5838:	2f00      	cmp	r7, #0
   b583a:	d095      	beq.n	b5768 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b583c:	4922      	ldr	r1, [pc, #136]	; (b58c8 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b583e:	f8df 908c 	ldr.w	r9, [pc, #140]	; b58cc <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b5842:	4630      	mov	r0, r6
   b5844:	f7fe fe9c 	bl	b4580 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b5848:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b584c:	4482      	add	sl, r0
  while (digits-- > 0)
   b584e:	2f00      	cmp	r7, #0
   b5850:	d08a      	beq.n	b5768 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b5852:	4642      	mov	r2, r8
   b5854:	464b      	mov	r3, r9
   b5856:	4620      	mov	r0, r4
   b5858:	4629      	mov	r1, r5
   b585a:	f000 fdd3 	bl	b6404 <__aeabi_dmul>
   b585e:	4604      	mov	r4, r0
   b5860:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b5862:	f001 f87f 	bl	b6964 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b5866:	f1b0 0b00 	subs.w	fp, r0, #0
   b586a:	da1c      	bge.n	b58a6 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b586c:	212d      	movs	r1, #45	; 0x2d
   b586e:	4630      	mov	r0, r6
   b5870:	f7ff ff2f 	bl	b56d2 <_ZN5Print5printEc>
            val = -n;
   b5874:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b5878:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b587a:	220a      	movs	r2, #10
   b587c:	4630      	mov	r0, r6
   b587e:	9301      	str	r3, [sp, #4]
   b5880:	f7ff ff40 	bl	b5704 <_ZN5Print11printNumberEmh>
   b5884:	9b01      	ldr	r3, [sp, #4]
   b5886:	4418      	add	r0, r3
    n += print(toPrint);
   b5888:	4482      	add	sl, r0
    remainder -= toPrint;
   b588a:	4658      	mov	r0, fp
   b588c:	f000 fd50 	bl	b6330 <__aeabi_i2d>
   b5890:	4602      	mov	r2, r0
   b5892:	460b      	mov	r3, r1
   b5894:	4620      	mov	r0, r4
   b5896:	4629      	mov	r1, r5
   b5898:	f000 fbfc 	bl	b6094 <__aeabi_dsub>
   b589c:	3f01      	subs	r7, #1
   b589e:	4604      	mov	r4, r0
   b58a0:	460d      	mov	r5, r1
   b58a2:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b58a4:	e7d3      	b.n	b584e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b58a6:	4659      	mov	r1, fp
        size_t t = 0;
   b58a8:	2300      	movs	r3, #0
   b58aa:	e7e6      	b.n	b587a <_ZN5Print10printFloatEdh+0x13a>
   b58ac:	000b6e94 	.word	0x000b6e94
   b58b0:	7fefffff 	.word	0x7fefffff
   b58b4:	000b6e98 	.word	0x000b6e98
   b58b8:	41efffff 	.word	0x41efffff
   b58bc:	000b6e9c 	.word	0x000b6e9c
   b58c0:	c1efffff 	.word	0xc1efffff
   b58c4:	3fe00000 	.word	0x3fe00000
   b58c8:	000b6ecc 	.word	0x000b6ecc
   b58cc:	40240000 	.word	0x40240000

000b58d0 <_ZN5Print5printEfi>:
{
   b58d0:	b538      	push	{r3, r4, r5, lr}
   b58d2:	4604      	mov	r4, r0
   b58d4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b58d8:	b2cd      	uxtb	r5, r1
   b58da:	f000 fd3b 	bl	b6354 <__aeabi_f2d>
   b58de:	ec41 0b10 	vmov	d0, r0, r1
   b58e2:	4629      	mov	r1, r5
   b58e4:	4620      	mov	r0, r4
}
   b58e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b58ea:	f7ff bf29 	b.w	b5740 <_ZN5Print10printFloatEdh>

000b58ee <_ZN5Print7printlnEdi>:
{
   b58ee:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b58f0:	b2c9      	uxtb	r1, r1
{
   b58f2:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b58f4:	f7ff ff24 	bl	b5740 <_ZN5Print10printFloatEdh>
   b58f8:	4604      	mov	r4, r0
  n += println();
   b58fa:	4628      	mov	r0, r5
   b58fc:	f7ff feec 	bl	b56d8 <_ZN5Print7printlnEv>
}
   b5900:	4420      	add	r0, r4
   b5902:	bd38      	pop	{r3, r4, r5, pc}

000b5904 <_ZN5Print7printlnEfi>:
{
   b5904:	b538      	push	{r3, r4, r5, lr}
   b5906:	4604      	mov	r4, r0
   b5908:	ee10 0a10 	vmov	r0, s0
   b590c:	460d      	mov	r5, r1
    return println((double)num, digits);
   b590e:	f000 fd21 	bl	b6354 <__aeabi_f2d>
   b5912:	ec41 0b10 	vmov	d0, r0, r1
   b5916:	4629      	mov	r1, r5
   b5918:	4620      	mov	r0, r4
}
   b591a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b591e:	f7ff bfe6 	b.w	b58ee <_ZN5Print7printlnEdi>

000b5922 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5926:	b086      	sub	sp, #24
   b5928:	af00      	add	r7, sp, #0
   b592a:	4605      	mov	r5, r0
   b592c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b592e:	1d38      	adds	r0, r7, #4
   b5930:	2114      	movs	r1, #20
{
   b5932:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5934:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5936:	f7ff f87d 	bl	b4a34 <vsnprintf>

    if (n<bufsize)
   b593a:	2813      	cmp	r0, #19
   b593c:	d80e      	bhi.n	b595c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b593e:	1d39      	adds	r1, r7, #4
   b5940:	4628      	mov	r0, r5
   b5942:	f7fe fe1d 	bl	b4580 <_ZN5Print5writeEPKc>
   b5946:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5948:	b11e      	cbz	r6, b5952 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b594a:	4628      	mov	r0, r5
   b594c:	f7ff fec4 	bl	b56d8 <_ZN5Print7printlnEv>
   b5950:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5952:	4620      	mov	r0, r4
   b5954:	3718      	adds	r7, #24
   b5956:	46bd      	mov	sp, r7
   b5958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b595c:	f100 0308 	add.w	r3, r0, #8
   b5960:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5964:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5966:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b596a:	4622      	mov	r2, r4
   b596c:	1c41      	adds	r1, r0, #1
   b596e:	683b      	ldr	r3, [r7, #0]
   b5970:	4668      	mov	r0, sp
   b5972:	f7ff f85f 	bl	b4a34 <vsnprintf>
  return write(str);
   b5976:	4669      	mov	r1, sp
   b5978:	4628      	mov	r0, r5
   b597a:	f7fe fe01 	bl	b4580 <_ZN5Print5writeEPKc>
   b597e:	4604      	mov	r4, r0
   b5980:	46c5      	mov	sp, r8
   b5982:	e7e1      	b.n	b5948 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5984 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5984:	4b01      	ldr	r3, [pc, #4]	; (b598c <_GLOBAL__sub_I_RGB+0x8>)
   b5986:	2200      	movs	r2, #0
   b5988:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b598a:	4770      	bx	lr
   b598c:	2003e6cc 	.word	0x2003e6cc

000b5990 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5990:	b510      	push	{r4, lr}
   b5992:	4604      	mov	r4, r0
   b5994:	4608      	mov	r0, r1
{
    _spi = spi;
   b5996:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5998:	f7fe feb4 	bl	b4704 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b599c:	2300      	movs	r3, #0
   b599e:	6063      	str	r3, [r4, #4]
}
   b59a0:	4620      	mov	r0, r4
   b59a2:	bd10      	pop	{r4, pc}

000b59a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b59a4:	b510      	push	{r4, lr}
   b59a6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b59a8:	6800      	ldr	r0, [r0, #0]
   b59aa:	b118      	cbz	r0, b59b4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b59ac:	f7ff f832 	bl	b4a14 <free>
            wakeupSource_ = nullptr;
   b59b0:	2300      	movs	r3, #0
   b59b2:	6023      	str	r3, [r4, #0]
        }
    }
   b59b4:	bd10      	pop	{r4, pc}

000b59b6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b59b6:	b538      	push	{r3, r4, r5, lr}
   b59b8:	460c      	mov	r4, r1
   b59ba:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b59bc:	f7ff fff2 	bl	b59a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b59c0:	b154      	cbz	r4, b59d8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b59c2:	8820      	ldrh	r0, [r4, #0]
   b59c4:	f7ff f81e 	bl	b4a04 <malloc>
   b59c8:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b59ca:	b128      	cbz	r0, b59d8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b59cc:	8822      	ldrh	r2, [r4, #0]
   b59ce:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b59d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b59d4:	f001 b864 	b.w	b6aa0 <memcpy>
    }
   b59d8:	bd38      	pop	{r3, r4, r5, pc}

000b59da <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b59da:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b59dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b59e0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b59e2:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b59e6:	f8c0 3006 	str.w	r3, [r0, #6]
   b59ea:	894b      	ldrh	r3, [r1, #10]
   b59ec:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b59ee:	460c      	mov	r4, r1
   b59f0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b59f2:	f7ff ffd7 	bl	b59a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b59f6:	6823      	ldr	r3, [r4, #0]
   b59f8:	b113      	cbz	r3, b5a00 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b59fa:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b59fc:	2300      	movs	r3, #0
   b59fe:	6023      	str	r3, [r4, #0]
    }
   b5a00:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5a04 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b5a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5a06:	4d2b      	ldr	r5, [pc, #172]	; (b5ab4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b5a08:	7d0b      	ldrb	r3, [r1, #20]
   b5a0a:	4604      	mov	r4, r0
   b5a0c:	b08b      	sub	sp, #44	; 0x2c
   b5a0e:	4608      	mov	r0, r1
   b5a10:	1daf      	adds	r7, r5, #6
   b5a12:	2b00      	cmp	r3, #0
   b5a14:	d036      	beq.n	b5a84 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b5a16:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b5a18:	791b      	ldrb	r3, [r3, #4]
   b5a1a:	2b00      	cmp	r3, #0
   b5a1c:	d032      	beq.n	b5a84 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b5a1e:	4b26      	ldr	r3, [pc, #152]	; (b5ab8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b5a20:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b5a22:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b5a24:	a902      	add	r1, sp, #8
   b5a26:	3004      	adds	r0, #4
   b5a28:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b5a2c:	f7fe ff46 	bl	b48bc <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b5a30:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b5a34:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b5a38:	b200      	sxth	r0, r0
   b5a3a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b5a3e:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b5a42:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b5a44:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b5a46:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b5a48:	4628      	mov	r0, r5
   b5a4a:	f7ff ffb4 	bl	b59b6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b5a4e:	a802      	add	r0, sp, #8
   b5a50:	f7ff ffa8 	bl	b59a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b5a54:	2300      	movs	r3, #0
   b5a56:	6023      	str	r3, [r4, #0]
   b5a58:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b5a5a:	71a3      	strb	r3, [r4, #6]
   b5a5c:	8123      	strh	r3, [r4, #8]
   b5a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5a62:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b5a64:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b5a68:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b5a6a:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b5a6e:	f8c4 3006 	str.w	r3, [r4, #6]
   b5a72:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b5a74:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b5a76:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b5a78:	4620      	mov	r0, r4
   b5a7a:	f7ff ff9c 	bl	b59b6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b5a7e:	4620      	mov	r0, r4
   b5a80:	b00b      	add	sp, #44	; 0x2c
   b5a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b5a84:	2600      	movs	r6, #0
   b5a86:	2320      	movs	r3, #32
   b5a88:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b5a8c:	4b0b      	ldr	r3, [pc, #44]	; (b5abc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b5a8e:	9300      	str	r3, [sp, #0]
   b5a90:	aa02      	add	r2, sp, #8
   b5a92:	4633      	mov	r3, r6
   b5a94:	490a      	ldr	r1, [pc, #40]	; (b5ac0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b5a96:	2032      	movs	r0, #50	; 0x32
   b5a98:	f7fe febc 	bl	b4814 <log_message>
            : wakeupSource_(nullptr),
   b5a9c:	4b06      	ldr	r3, [pc, #24]	; (b5ab8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b5a9e:	4805      	ldr	r0, [pc, #20]	; (b5ab4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b5aa0:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b5aa2:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b5aa6:	a902      	add	r1, sp, #8
   b5aa8:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b5aac:	f7ff ff95 	bl	b59da <_ZN17SystemSleepResultaSEOS_.isra.0>
   b5ab0:	e7cd      	b.n	b5a4e <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b5ab2:	bf00      	nop
   b5ab4:	2003e6dc 	.word	0x2003e6dc
   b5ab8:	ffff0000 	.word	0xffff0000
   b5abc:	000b6ea7 	.word	0x000b6ea7
   b5ac0:	000b6ea0 	.word	0x000b6ea0

000b5ac4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5ac4:	4b05      	ldr	r3, [pc, #20]	; (b5adc <_GLOBAL__sub_I_System+0x18>)
   b5ac6:	2202      	movs	r2, #2
   b5ac8:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b5aca:	4b05      	ldr	r3, [pc, #20]	; (b5ae0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5acc:	4a05      	ldr	r2, [pc, #20]	; (b5ae4 <_GLOBAL__sub_I_System+0x20>)
   b5ace:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5ad0:	2000      	movs	r0, #0
   b5ad2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5ad6:	f7fe bead 	b.w	b4834 <set_system_mode>
   b5ada:	bf00      	nop
   b5adc:	2003e6e8 	.word	0x2003e6e8
   b5ae0:	2003e6dc 	.word	0x2003e6dc
   b5ae4:	ffff0000 	.word	0xffff0000

000b5ae8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b5ae8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5aea:	2000      	movs	r0, #0
   b5aec:	f7fe ff1a 	bl	b4924 <spark_sync_time_pending>
   b5af0:	b128      	cbz	r0, b5afe <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5af2:	f7fe ff07 	bl	b4904 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5af6:	f080 0001 	eor.w	r0, r0, #1
   b5afa:	b2c0      	uxtb	r0, r0
    }
   b5afc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5afe:	2001      	movs	r0, #1
   b5b00:	e7fc      	b.n	b5afc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b5b02 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b5b02:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b5b04:	2000      	movs	r0, #0
   b5b06:	f7fe fd65 	bl	b45d4 <hal_rtc_time_is_valid>
    if (rtcstate)
   b5b0a:	4604      	mov	r4, r0
   b5b0c:	b9a0      	cbnz	r0, b5b38 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b5b0e:	f7fe fe89 	bl	b4824 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b5b12:	2801      	cmp	r0, #1
   b5b14:	d110      	bne.n	b5b38 <_ZN9TimeClass7isValidEv+0x36>
   b5b16:	4620      	mov	r0, r4
   b5b18:	f7fe feb4 	bl	b4884 <system_thread_get_state>
   b5b1c:	b960      	cbnz	r0, b5b38 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b5b1e:	f7ff ffe3 	bl	b5ae8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5b22:	b910      	cbnz	r0, b5b2a <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b5b24:	f7fe fede 	bl	b48e4 <spark_process>
        while (_while() && !_condition()) {
   b5b28:	e7f9      	b.n	b5b1e <_ZN9TimeClass7isValidEv+0x1c>
   b5b2a:	f7ff ffdd 	bl	b5ae8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b5b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b5b32:	2000      	movs	r0, #0
   b5b34:	f7fe bd4e 	b.w	b45d4 <hal_rtc_time_is_valid>
}
   b5b38:	4620      	mov	r0, r4
   b5b3a:	bd10      	pop	{r4, pc}

000b5b3c <_ZN9TimeClass3nowEv>:
{
   b5b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b5b3e:	f7ff ffe0 	bl	b5b02 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b5b42:	2210      	movs	r2, #16
   b5b44:	2100      	movs	r1, #0
   b5b46:	4668      	mov	r0, sp
   b5b48:	f000 ffb8 	bl	b6abc <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5b4c:	2100      	movs	r1, #0
   b5b4e:	4668      	mov	r0, sp
   b5b50:	f7fe fd48 	bl	b45e4 <hal_rtc_get_time>
}
   b5b54:	9800      	ldr	r0, [sp, #0]
   b5b56:	b005      	add	sp, #20
   b5b58:	f85d fb04 	ldr.w	pc, [sp], #4

000b5b5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5b5c:	4b02      	ldr	r3, [pc, #8]	; (b5b68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5b5e:	681a      	ldr	r2, [r3, #0]
   b5b60:	4b02      	ldr	r3, [pc, #8]	; (b5b6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5b62:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5b64:	4770      	bx	lr
   b5b66:	bf00      	nop
   b5b68:	2003e140 	.word	0x2003e140
   b5b6c:	2003e6ec 	.word	0x2003e6ec

000b5b70 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5b70:	4770      	bx	lr

000b5b72 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5b72:	7441      	strb	r1, [r0, #17]
}
   b5b74:	4770      	bx	lr

000b5b76 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5b76:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5b78:	7c00      	ldrb	r0, [r0, #16]
   b5b7a:	f7fe fe03 	bl	b4784 <hal_usart_available_data_for_write>
}
   b5b7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b82:	bd08      	pop	{r3, pc}

000b5b84 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5b84:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5b86:	7c00      	ldrb	r0, [r0, #16]
   b5b88:	f7fe fdd4 	bl	b4734 <hal_usart_available>
}
   b5b8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b90:	bd08      	pop	{r3, pc}

000b5b92 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5b92:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5b94:	7c00      	ldrb	r0, [r0, #16]
   b5b96:	f7fe fddd 	bl	b4754 <hal_usart_peek>
}
   b5b9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b9e:	bd08      	pop	{r3, pc}

000b5ba0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5ba0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5ba2:	7c00      	ldrb	r0, [r0, #16]
   b5ba4:	f7fe fdce 	bl	b4744 <hal_usart_read>
}
   b5ba8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5bac:	bd08      	pop	{r3, pc}

000b5bae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5bae:	7c00      	ldrb	r0, [r0, #16]
   b5bb0:	f7fe bdd8 	b.w	b4764 <hal_usart_flush>

000b5bb4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bb6:	7c45      	ldrb	r5, [r0, #17]
{
   b5bb8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bba:	b12d      	cbz	r5, b5bc8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5bbc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5bbe:	b003      	add	sp, #12
   b5bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5bc4:	f7fe bdae 	b.w	b4724 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bc8:	7c00      	ldrb	r0, [r0, #16]
   b5bca:	9101      	str	r1, [sp, #4]
   b5bcc:	f7fe fdda 	bl	b4784 <hal_usart_available_data_for_write>
   b5bd0:	2800      	cmp	r0, #0
   b5bd2:	9901      	ldr	r1, [sp, #4]
   b5bd4:	dcf2      	bgt.n	b5bbc <_ZN11USARTSerial5writeEh+0x8>
}
   b5bd6:	4628      	mov	r0, r5
   b5bd8:	b003      	add	sp, #12
   b5bda:	bd30      	pop	{r4, r5, pc}

000b5bdc <_ZN11USARTSerialD0Ev>:
   b5bdc:	b510      	push	{r4, lr}
   b5bde:	2114      	movs	r1, #20
   b5be0:	4604      	mov	r4, r0
   b5be2:	f7fe fa5c 	bl	b409e <_ZdlPvj>
   b5be6:	4620      	mov	r0, r4
   b5be8:	bd10      	pop	{r4, pc}
	...

000b5bec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5bec:	b510      	push	{r4, lr}
   b5bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5bf2:	4604      	mov	r4, r0
   b5bf4:	4608      	mov	r0, r1
   b5bf6:	4611      	mov	r1, r2
   b5bf8:	2200      	movs	r2, #0
   b5bfa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5bfe:	4b04      	ldr	r3, [pc, #16]	; (b5c10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5c00:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5c02:	2301      	movs	r3, #1
  _serial = serial;
   b5c04:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5c06:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5c08:	f7fe fdc4 	bl	b4794 <hal_usart_init_ex>
}
   b5c0c:	4620      	mov	r0, r4
   b5c0e:	bd10      	pop	{r4, pc}
   b5c10:	000b6ef4 	.word	0x000b6ef4

000b5c14 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5c14:	7441      	strb	r1, [r0, #17]
}
   b5c16:	4770      	bx	lr

000b5c18 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5c18:	4770      	bx	lr

000b5c1a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5c1a:	4770      	bx	lr

000b5c1c <_ZN9USBSerial4readEv>:
{
   b5c1c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5c1e:	2100      	movs	r1, #0
   b5c20:	7c00      	ldrb	r0, [r0, #16]
   b5c22:	f7fe fddf 	bl	b47e4 <HAL_USB_USART_Receive_Data>
}
   b5c26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c2a:	bd08      	pop	{r3, pc}

000b5c2c <_ZN9USBSerial4peekEv>:
{
   b5c2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5c2e:	2101      	movs	r1, #1
   b5c30:	7c00      	ldrb	r0, [r0, #16]
   b5c32:	f7fe fdd7 	bl	b47e4 <HAL_USB_USART_Receive_Data>
}
   b5c36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c3a:	bd08      	pop	{r3, pc}

000b5c3c <_ZN9USBSerial17availableForWriteEv>:
{
   b5c3c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5c3e:	7c00      	ldrb	r0, [r0, #16]
   b5c40:	f7fe fdc8 	bl	b47d4 <HAL_USB_USART_Available_Data_For_Write>
}
   b5c44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c48:	bd08      	pop	{r3, pc}

000b5c4a <_ZN9USBSerial9availableEv>:
{
   b5c4a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5c4c:	7c00      	ldrb	r0, [r0, #16]
   b5c4e:	f7fe fdb9 	bl	b47c4 <HAL_USB_USART_Available_Data>
}
   b5c52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c56:	bd08      	pop	{r3, pc}

000b5c58 <_ZN9USBSerial5writeEh>:
{
   b5c58:	b513      	push	{r0, r1, r4, lr}
   b5c5a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5c5c:	7c00      	ldrb	r0, [r0, #16]
{
   b5c5e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5c60:	f7fe fdb8 	bl	b47d4 <HAL_USB_USART_Available_Data_For_Write>
   b5c64:	2800      	cmp	r0, #0
   b5c66:	9901      	ldr	r1, [sp, #4]
   b5c68:	dc01      	bgt.n	b5c6e <_ZN9USBSerial5writeEh+0x16>
   b5c6a:	7c60      	ldrb	r0, [r4, #17]
   b5c6c:	b120      	cbz	r0, b5c78 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5c6e:	7c20      	ldrb	r0, [r4, #16]
   b5c70:	f7fe fdc0 	bl	b47f4 <HAL_USB_USART_Send_Data>
   b5c74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5c78:	b002      	add	sp, #8
   b5c7a:	bd10      	pop	{r4, pc}

000b5c7c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5c7c:	7c00      	ldrb	r0, [r0, #16]
   b5c7e:	f7fe bdc1 	b.w	b4804 <HAL_USB_USART_Flush_Data>

000b5c82 <_ZN9USBSerialD0Ev>:
   b5c82:	b510      	push	{r4, lr}
   b5c84:	2114      	movs	r1, #20
   b5c86:	4604      	mov	r4, r0
   b5c88:	f7fe fa09 	bl	b409e <_ZdlPvj>
   b5c8c:	4620      	mov	r0, r4
   b5c8e:	bd10      	pop	{r4, pc}

000b5c90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5c90:	b510      	push	{r4, lr}
   b5c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5c96:	4604      	mov	r4, r0
   b5c98:	4608      	mov	r0, r1
   b5c9a:	2100      	movs	r1, #0
   b5c9c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5ca0:	4b04      	ldr	r3, [pc, #16]	; (b5cb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5ca2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5ca4:	2301      	movs	r3, #1
  _serial = serial;
   b5ca6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5ca8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5caa:	4611      	mov	r1, r2
   b5cac:	f7fe fd7a 	bl	b47a4 <HAL_USB_USART_Init>
}
   b5cb0:	4620      	mov	r0, r4
   b5cb2:	bd10      	pop	{r4, pc}
   b5cb4:	000b6f24 	.word	0x000b6f24

000b5cb8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5cb8:	7c00      	ldrb	r0, [r0, #16]
   b5cba:	2200      	movs	r2, #0
   b5cbc:	f7fe bd7a 	b.w	b47b4 <HAL_USB_USART_Begin>

000b5cc0 <_Z19acquireSerialBufferv>:
{
   b5cc0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5cc2:	2214      	movs	r2, #20
{
   b5cc4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5cc6:	2100      	movs	r1, #0
   b5cc8:	f000 fef8 	bl	b6abc <memset>
}
   b5ccc:	4620      	mov	r0, r4
   b5cce:	bd10      	pop	{r4, pc}

000b5cd0 <_Z16_fetch_usbserialv>:
{
   b5cd0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5cd2:	4c0f      	ldr	r4, [pc, #60]	; (b5d10 <_Z16_fetch_usbserialv+0x40>)
{
   b5cd4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5cd6:	a803      	add	r0, sp, #12
   b5cd8:	f7ff fff2 	bl	b5cc0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5cdc:	7821      	ldrb	r1, [r4, #0]
   b5cde:	f3bf 8f5b 	dmb	ish
   b5ce2:	f011 0101 	ands.w	r1, r1, #1
   b5ce6:	d10f      	bne.n	b5d08 <_Z16_fetch_usbserialv+0x38>
   b5ce8:	4620      	mov	r0, r4
   b5cea:	9101      	str	r1, [sp, #4]
   b5cec:	f7fe f9d9 	bl	b40a2 <__cxa_guard_acquire>
   b5cf0:	9901      	ldr	r1, [sp, #4]
   b5cf2:	b148      	cbz	r0, b5d08 <_Z16_fetch_usbserialv+0x38>
   b5cf4:	aa03      	add	r2, sp, #12
   b5cf6:	4807      	ldr	r0, [pc, #28]	; (b5d14 <_Z16_fetch_usbserialv+0x44>)
   b5cf8:	f7ff ffca 	bl	b5c90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5cfc:	4620      	mov	r0, r4
   b5cfe:	f7fe f9d5 	bl	b40ac <__cxa_guard_release>
   b5d02:	4805      	ldr	r0, [pc, #20]	; (b5d18 <_Z16_fetch_usbserialv+0x48>)
   b5d04:	f000 fec6 	bl	b6a94 <atexit>
	return _usbserial;
}
   b5d08:	4802      	ldr	r0, [pc, #8]	; (b5d14 <_Z16_fetch_usbserialv+0x44>)
   b5d0a:	b008      	add	sp, #32
   b5d0c:	bd10      	pop	{r4, pc}
   b5d0e:	bf00      	nop
   b5d10:	2003e6f0 	.word	0x2003e6f0
   b5d14:	2003e6f4 	.word	0x2003e6f4
   b5d18:	000b5c19 	.word	0x000b5c19

000b5d1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5d1c:	4b01      	ldr	r3, [pc, #4]	; (b5d24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5d1e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5d20:	4770      	bx	lr
   b5d22:	bf00      	nop
   b5d24:	2003e144 	.word	0x2003e144

000b5d28 <serialEventRun>:
{
   b5d28:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5d2a:	4b0b      	ldr	r3, [pc, #44]	; (b5d58 <serialEventRun+0x30>)
   b5d2c:	b143      	cbz	r3, b5d40 <serialEventRun+0x18>
   b5d2e:	f7ff ffcf 	bl	b5cd0 <_Z16_fetch_usbserialv>
   b5d32:	6803      	ldr	r3, [r0, #0]
   b5d34:	691b      	ldr	r3, [r3, #16]
   b5d36:	4798      	blx	r3
   b5d38:	2800      	cmp	r0, #0
   b5d3a:	dd01      	ble.n	b5d40 <serialEventRun+0x18>
        serialEvent();
   b5d3c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5d40:	4b06      	ldr	r3, [pc, #24]	; (b5d5c <serialEventRun+0x34>)
   b5d42:	b143      	cbz	r3, b5d56 <serialEventRun+0x2e>
   b5d44:	f000 f976 	bl	b6034 <_Z22__fetch_global_Serial1v>
   b5d48:	6803      	ldr	r3, [r0, #0]
   b5d4a:	691b      	ldr	r3, [r3, #16]
   b5d4c:	4798      	blx	r3
   b5d4e:	2800      	cmp	r0, #0
   b5d50:	dd01      	ble.n	b5d56 <serialEventRun+0x2e>
        serialEvent1();
   b5d52:	f3af 8000 	nop.w
}
   b5d56:	bd08      	pop	{r3, pc}
	...

000b5d60 <_post_loop>:
{
   b5d60:	b508      	push	{r3, lr}
	serialEventRun();
   b5d62:	f7ff ffe1 	bl	b5d28 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5d66:	f7fe fc2d 	bl	b45c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5d6a:	4b01      	ldr	r3, [pc, #4]	; (b5d70 <_post_loop+0x10>)
   b5d6c:	6018      	str	r0, [r3, #0]
}
   b5d6e:	bd08      	pop	{r3, pc}
   b5d70:	2003e710 	.word	0x2003e710

000b5d74 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5d74:	4805      	ldr	r0, [pc, #20]	; (b5d8c <_Z33system_initialize_user_backup_ramv+0x18>)
   b5d76:	4a06      	ldr	r2, [pc, #24]	; (b5d90 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5d78:	4906      	ldr	r1, [pc, #24]	; (b5d94 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5d7a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5d7c:	1a12      	subs	r2, r2, r0
   b5d7e:	f000 fe8f 	bl	b6aa0 <memcpy>
    __backup_sram_signature = signature;
   b5d82:	4b05      	ldr	r3, [pc, #20]	; (b5d98 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5d84:	4a05      	ldr	r2, [pc, #20]	; (b5d9c <_Z33system_initialize_user_backup_ramv+0x28>)
   b5d86:	601a      	str	r2, [r3, #0]
}
   b5d88:	bd08      	pop	{r3, pc}
   b5d8a:	bf00      	nop
   b5d8c:	2003f400 	.word	0x2003f400
   b5d90:	2003f404 	.word	0x2003f404
   b5d94:	000b7014 	.word	0x000b7014
   b5d98:	2003f400 	.word	0x2003f400
   b5d9c:	9a271c1e 	.word	0x9a271c1e

000b5da0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5da0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5da2:	2300      	movs	r3, #0
   b5da4:	9300      	str	r3, [sp, #0]
   b5da6:	461a      	mov	r2, r3
   b5da8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5dac:	f7fe fd7c 	bl	b48a8 <system_ctrl_set_result>
}
   b5db0:	b003      	add	sp, #12
   b5db2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5db8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5db8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5dba:	8843      	ldrh	r3, [r0, #2]
   b5dbc:	2b0a      	cmp	r3, #10
   b5dbe:	d008      	beq.n	b5dd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5dc0:	2b50      	cmp	r3, #80	; 0x50
   b5dc2:	d10b      	bne.n	b5ddc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5dc4:	4b09      	ldr	r3, [pc, #36]	; (b5dec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5dc6:	681b      	ldr	r3, [r3, #0]
   b5dc8:	b14b      	cbz	r3, b5dde <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5dca:	b003      	add	sp, #12
   b5dcc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5dd0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5dd2:	f7ff ffe5 	bl	b5da0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5dd6:	b003      	add	sp, #12
   b5dd8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5ddc:	2300      	movs	r3, #0
   b5dde:	9300      	str	r3, [sp, #0]
   b5de0:	461a      	mov	r2, r3
   b5de2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5de6:	f7fe fd5f 	bl	b48a8 <system_ctrl_set_result>
}
   b5dea:	e7f4      	b.n	b5dd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5dec:	2003e70c 	.word	0x2003e70c

000b5df0 <module_user_init_hook>:
{
   b5df0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5df2:	4812      	ldr	r0, [pc, #72]	; (b5e3c <module_user_init_hook+0x4c>)
   b5df4:	2100      	movs	r1, #0
   b5df6:	f7fe fe3d 	bl	b4a74 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5dfa:	4b11      	ldr	r3, [pc, #68]	; (b5e40 <module_user_init_hook+0x50>)
   b5dfc:	681a      	ldr	r2, [r3, #0]
   b5dfe:	4b11      	ldr	r3, [pc, #68]	; (b5e44 <module_user_init_hook+0x54>)
   b5e00:	429a      	cmp	r2, r3
   b5e02:	4b11      	ldr	r3, [pc, #68]	; (b5e48 <module_user_init_hook+0x58>)
   b5e04:	bf0c      	ite	eq
   b5e06:	2201      	moveq	r2, #1
   b5e08:	2200      	movne	r2, #0
   b5e0a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5e0c:	d001      	beq.n	b5e12 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5e0e:	f7ff ffb1 	bl	b5d74 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5e12:	f7fe fbcf 	bl	b45b4 <HAL_RNG_GetRandomNumber>
   b5e16:	4604      	mov	r4, r0
    srand(seed);
   b5e18:	f000 fe58 	bl	b6acc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5e1c:	4b0b      	ldr	r3, [pc, #44]	; (b5e4c <module_user_init_hook+0x5c>)
   b5e1e:	b113      	cbz	r3, b5e26 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5e20:	4620      	mov	r0, r4
   b5e22:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5e26:	2100      	movs	r1, #0
   b5e28:	4808      	ldr	r0, [pc, #32]	; (b5e4c <module_user_init_hook+0x5c>)
   b5e2a:	f7fe fd83 	bl	b4934 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5e32:	4807      	ldr	r0, [pc, #28]	; (b5e50 <module_user_init_hook+0x60>)
   b5e34:	2100      	movs	r1, #0
   b5e36:	f7fe bd2d 	b.w	b4894 <system_ctrl_set_app_request_handler>
   b5e3a:	bf00      	nop
   b5e3c:	000b5d1d 	.word	0x000b5d1d
   b5e40:	2003f400 	.word	0x2003f400
   b5e44:	9a271c1e 	.word	0x9a271c1e
   b5e48:	2003e708 	.word	0x2003e708
   b5e4c:	00000000 	.word	0x00000000
   b5e50:	000b5db9 	.word	0x000b5db9

000b5e54 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5e54:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5e56:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5e58:	d902      	bls.n	b5e60 <pinAvailable+0xc>
    return false;
   b5e5a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5e5c:	b002      	add	sp, #8
   b5e5e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5e60:	f1a0 030b 	sub.w	r3, r0, #11
   b5e64:	2b02      	cmp	r3, #2
   b5e66:	d81a      	bhi.n	b5e9e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5e68:	4c17      	ldr	r4, [pc, #92]	; (b5ec8 <pinAvailable+0x74>)
   b5e6a:	7821      	ldrb	r1, [r4, #0]
   b5e6c:	f3bf 8f5b 	dmb	ish
   b5e70:	f011 0101 	ands.w	r1, r1, #1
   b5e74:	d10b      	bne.n	b5e8e <pinAvailable+0x3a>
   b5e76:	4620      	mov	r0, r4
   b5e78:	9101      	str	r1, [sp, #4]
   b5e7a:	f7fe f912 	bl	b40a2 <__cxa_guard_acquire>
   b5e7e:	9901      	ldr	r1, [sp, #4]
   b5e80:	b128      	cbz	r0, b5e8e <pinAvailable+0x3a>
   b5e82:	4812      	ldr	r0, [pc, #72]	; (b5ecc <pinAvailable+0x78>)
   b5e84:	f7ff fd84 	bl	b5990 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5e88:	4620      	mov	r0, r4
   b5e8a:	f7fe f90f 	bl	b40ac <__cxa_guard_release>
   b5e8e:	4b0f      	ldr	r3, [pc, #60]	; (b5ecc <pinAvailable+0x78>)
   b5e90:	7818      	ldrb	r0, [r3, #0]
   b5e92:	f7fe fc3f 	bl	b4714 <hal_spi_is_enabled>
   b5e96:	2800      	cmp	r0, #0
   b5e98:	d1df      	bne.n	b5e5a <pinAvailable+0x6>
  return true; // 'pin' is available
   b5e9a:	2001      	movs	r0, #1
   b5e9c:	e7de      	b.n	b5e5c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5e9e:	2801      	cmp	r0, #1
   b5ea0:	d809      	bhi.n	b5eb6 <pinAvailable+0x62>
   b5ea2:	f000 f863 	bl	b5f6c <_Z19__fetch_global_Wirev>
   b5ea6:	2100      	movs	r1, #0
   b5ea8:	7c00      	ldrb	r0, [r0, #16]
   b5eaa:	f7fe fbeb 	bl	b4684 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5eae:	f080 0001 	eor.w	r0, r0, #1
   b5eb2:	b2c0      	uxtb	r0, r0
   b5eb4:	e7d2      	b.n	b5e5c <pinAvailable+0x8>
   b5eb6:	3809      	subs	r0, #9
   b5eb8:	2801      	cmp	r0, #1
   b5eba:	d8ee      	bhi.n	b5e9a <pinAvailable+0x46>
   b5ebc:	f000 f8ba 	bl	b6034 <_Z22__fetch_global_Serial1v>
   b5ec0:	7c00      	ldrb	r0, [r0, #16]
   b5ec2:	f7fe fc57 	bl	b4774 <hal_usart_is_enabled>
   b5ec6:	e7f2      	b.n	b5eae <pinAvailable+0x5a>
   b5ec8:	2003e1ac 	.word	0x2003e1ac
   b5ecc:	2003e1b0 	.word	0x2003e1b0

000b5ed0 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b5ed0:	280d      	cmp	r0, #13
{
   b5ed2:	b510      	push	{r4, lr}
   b5ed4:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b5ed6:	bf9c      	itt	ls
   b5ed8:	340e      	addls	r4, #14
   b5eda:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b5edc:	4620      	mov	r0, r4
   b5ede:	f7ff ffb9 	bl	b5e54 <pinAvailable>
   b5ee2:	b150      	cbz	r0, b5efa <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b5ee4:	2103      	movs	r1, #3
   b5ee6:	4620      	mov	r0, r4
   b5ee8:	f7fe fb84 	bl	b45f4 <HAL_Validate_Pin_Function>
   b5eec:	2803      	cmp	r0, #3
   b5eee:	d104      	bne.n	b5efa <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b5ef0:	4620      	mov	r0, r4
}
   b5ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5ef6:	f7fe bb85 	b.w	b4604 <hal_adc_read>
}
   b5efa:	2000      	movs	r0, #0
   b5efc:	bd10      	pop	{r4, pc}

000b5efe <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5efe:	4770      	bx	lr

000b5f00 <__tcf_1>:
   b5f00:	4770      	bx	lr
	...

000b5f04 <_Z17acquireWireBufferv>:
{
   b5f04:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5f06:	4b0a      	ldr	r3, [pc, #40]	; (b5f30 <_Z17acquireWireBufferv+0x2c>)
   b5f08:	6003      	str	r3, [r0, #0]
   b5f0a:	2301      	movs	r3, #1
{
   b5f0c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5f0e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f10:	4908      	ldr	r1, [pc, #32]	; (b5f34 <_Z17acquireWireBufferv+0x30>)
   b5f12:	2020      	movs	r0, #32
   b5f14:	f000 f8b4 	bl	b6080 <_ZnajRKSt9nothrow_t>
	};
   b5f18:	2520      	movs	r5, #32
   b5f1a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f1c:	4905      	ldr	r1, [pc, #20]	; (b5f34 <_Z17acquireWireBufferv+0x30>)
	};
   b5f1e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f20:	4628      	mov	r0, r5
   b5f22:	f000 f8ad 	bl	b6080 <_ZnajRKSt9nothrow_t>
	};
   b5f26:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5f2a:	4620      	mov	r0, r4
   b5f2c:	bd38      	pop	{r3, r4, r5, pc}
   b5f2e:	bf00      	nop
   b5f30:	00010018 	.word	0x00010018
   b5f34:	000b6f4c 	.word	0x000b6f4c

000b5f38 <_Z18acquireWire1Bufferv>:
{
   b5f38:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5f3a:	4b0a      	ldr	r3, [pc, #40]	; (b5f64 <_Z18acquireWire1Bufferv+0x2c>)
   b5f3c:	6003      	str	r3, [r0, #0]
   b5f3e:	2301      	movs	r3, #1
{
   b5f40:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5f42:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f44:	4908      	ldr	r1, [pc, #32]	; (b5f68 <_Z18acquireWire1Bufferv+0x30>)
   b5f46:	2020      	movs	r0, #32
   b5f48:	f000 f89a 	bl	b6080 <_ZnajRKSt9nothrow_t>
	};
   b5f4c:	2520      	movs	r5, #32
   b5f4e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f50:	4905      	ldr	r1, [pc, #20]	; (b5f68 <_Z18acquireWire1Bufferv+0x30>)
	};
   b5f52:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f54:	4628      	mov	r0, r5
   b5f56:	f000 f893 	bl	b6080 <_ZnajRKSt9nothrow_t>
	};
   b5f5a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5f5e:	4620      	mov	r0, r4
   b5f60:	bd38      	pop	{r3, r4, r5, pc}
   b5f62:	bf00      	nop
   b5f64:	00010018 	.word	0x00010018
   b5f68:	000b6f4c 	.word	0x000b6f4c

000b5f6c <_Z19__fetch_global_Wirev>:
{
   b5f6c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5f6e:	4d0e      	ldr	r5, [pc, #56]	; (b5fa8 <_Z19__fetch_global_Wirev+0x3c>)
   b5f70:	7829      	ldrb	r1, [r5, #0]
   b5f72:	f3bf 8f5b 	dmb	ish
   b5f76:	f011 0401 	ands.w	r4, r1, #1
{
   b5f7a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5f7c:	d111      	bne.n	b5fa2 <_Z19__fetch_global_Wirev+0x36>
   b5f7e:	4628      	mov	r0, r5
   b5f80:	f7fe f88f 	bl	b40a2 <__cxa_guard_acquire>
   b5f84:	b168      	cbz	r0, b5fa2 <_Z19__fetch_global_Wirev+0x36>
   b5f86:	4668      	mov	r0, sp
   b5f88:	f7ff ffbc 	bl	b5f04 <_Z17acquireWireBufferv>
   b5f8c:	466a      	mov	r2, sp
   b5f8e:	4621      	mov	r1, r4
   b5f90:	4806      	ldr	r0, [pc, #24]	; (b5fac <_Z19__fetch_global_Wirev+0x40>)
   b5f92:	f7ff f9df 	bl	b5354 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5f96:	4628      	mov	r0, r5
   b5f98:	f7fe f888 	bl	b40ac <__cxa_guard_release>
   b5f9c:	4804      	ldr	r0, [pc, #16]	; (b5fb0 <_Z19__fetch_global_Wirev+0x44>)
   b5f9e:	f000 fd79 	bl	b6a94 <atexit>
	return wire;
}
   b5fa2:	4802      	ldr	r0, [pc, #8]	; (b5fac <_Z19__fetch_global_Wirev+0x40>)
   b5fa4:	b007      	add	sp, #28
   b5fa6:	bd30      	pop	{r4, r5, pc}
   b5fa8:	2003e714 	.word	0x2003e714
   b5fac:	2003e71c 	.word	0x2003e71c
   b5fb0:	000b5eff 	.word	0x000b5eff

000b5fb4 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b5fb4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b5fb6:	4c0e      	ldr	r4, [pc, #56]	; (b5ff0 <_Z20__fetch_global_Wire1v+0x3c>)
   b5fb8:	7823      	ldrb	r3, [r4, #0]
   b5fba:	f3bf 8f5b 	dmb	ish
   b5fbe:	07db      	lsls	r3, r3, #31
{
   b5fc0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b5fc2:	d411      	bmi.n	b5fe8 <_Z20__fetch_global_Wire1v+0x34>
   b5fc4:	4620      	mov	r0, r4
   b5fc6:	f7fe f86c 	bl	b40a2 <__cxa_guard_acquire>
   b5fca:	b168      	cbz	r0, b5fe8 <_Z20__fetch_global_Wire1v+0x34>
   b5fcc:	4668      	mov	r0, sp
   b5fce:	f7ff ffb3 	bl	b5f38 <_Z18acquireWire1Bufferv>
   b5fd2:	466a      	mov	r2, sp
   b5fd4:	2101      	movs	r1, #1
   b5fd6:	4807      	ldr	r0, [pc, #28]	; (b5ff4 <_Z20__fetch_global_Wire1v+0x40>)
   b5fd8:	f7ff f9bc 	bl	b5354 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5fdc:	4620      	mov	r0, r4
   b5fde:	f7fe f865 	bl	b40ac <__cxa_guard_release>
   b5fe2:	4805      	ldr	r0, [pc, #20]	; (b5ff8 <_Z20__fetch_global_Wire1v+0x44>)
   b5fe4:	f000 fd56 	bl	b6a94 <atexit>
	return wire;
}
   b5fe8:	4802      	ldr	r0, [pc, #8]	; (b5ff4 <_Z20__fetch_global_Wire1v+0x40>)
   b5fea:	b006      	add	sp, #24
   b5fec:	bd10      	pop	{r4, pc}
   b5fee:	bf00      	nop
   b5ff0:	2003e718 	.word	0x2003e718
   b5ff4:	2003e730 	.word	0x2003e730
   b5ff8:	000b5f01 	.word	0x000b5f01

000b5ffc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5ffc:	4770      	bx	lr
	...

000b6000 <_Z20acquireSerial1Bufferv>:
{
   b6000:	b538      	push	{r3, r4, r5, lr}
   b6002:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6004:	2514      	movs	r5, #20
   b6006:	462a      	mov	r2, r5
   b6008:	2100      	movs	r1, #0
   b600a:	f000 fd57 	bl	b6abc <memset>
   b600e:	8025      	strh	r5, [r4, #0]
   b6010:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6012:	4907      	ldr	r1, [pc, #28]	; (b6030 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6014:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6016:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6018:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b601a:	f000 f831 	bl	b6080 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b601e:	4904      	ldr	r1, [pc, #16]	; (b6030 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6020:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6022:	4628      	mov	r0, r5
   b6024:	f000 f82c 	bl	b6080 <_ZnajRKSt9nothrow_t>
    };
   b6028:	60e0      	str	r0, [r4, #12]
}
   b602a:	4620      	mov	r0, r4
   b602c:	bd38      	pop	{r3, r4, r5, pc}
   b602e:	bf00      	nop
   b6030:	000b6f4c 	.word	0x000b6f4c

000b6034 <_Z22__fetch_global_Serial1v>:
{
   b6034:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6036:	4d0e      	ldr	r5, [pc, #56]	; (b6070 <_Z22__fetch_global_Serial1v+0x3c>)
   b6038:	7829      	ldrb	r1, [r5, #0]
   b603a:	f3bf 8f5b 	dmb	ish
   b603e:	f011 0401 	ands.w	r4, r1, #1
{
   b6042:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6044:	d111      	bne.n	b606a <_Z22__fetch_global_Serial1v+0x36>
   b6046:	4628      	mov	r0, r5
   b6048:	f7fe f82b 	bl	b40a2 <__cxa_guard_acquire>
   b604c:	b168      	cbz	r0, b606a <_Z22__fetch_global_Serial1v+0x36>
   b604e:	a801      	add	r0, sp, #4
   b6050:	f7ff ffd6 	bl	b6000 <_Z20acquireSerial1Bufferv>
   b6054:	aa01      	add	r2, sp, #4
   b6056:	4621      	mov	r1, r4
   b6058:	4806      	ldr	r0, [pc, #24]	; (b6074 <_Z22__fetch_global_Serial1v+0x40>)
   b605a:	f7ff fdc7 	bl	b5bec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b605e:	4628      	mov	r0, r5
   b6060:	f7fe f824 	bl	b40ac <__cxa_guard_release>
   b6064:	4804      	ldr	r0, [pc, #16]	; (b6078 <_Z22__fetch_global_Serial1v+0x44>)
   b6066:	f000 fd15 	bl	b6a94 <atexit>
    return serial1;
}
   b606a:	4802      	ldr	r0, [pc, #8]	; (b6074 <_Z22__fetch_global_Serial1v+0x40>)
   b606c:	b007      	add	sp, #28
   b606e:	bd30      	pop	{r4, r5, pc}
   b6070:	2003e744 	.word	0x2003e744
   b6074:	2003e748 	.word	0x2003e748
   b6078:	000b5ffd 	.word	0x000b5ffd

000b607c <_ZnwjRKSt9nothrow_t>:
   b607c:	f7fe b80b 	b.w	b4096 <_Znwj>

000b6080 <_ZnajRKSt9nothrow_t>:
   b6080:	f7fe b80b 	b.w	b409a <_Znaj>

000b6084 <_ZSt25__throw_bad_function_callv>:
   b6084:	b508      	push	{r3, lr}
   b6086:	f7fe fcdd 	bl	b4a44 <abort>
	...

000b608c <__aeabi_drsub>:
   b608c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6090:	e002      	b.n	b6098 <__adddf3>
   b6092:	bf00      	nop

000b6094 <__aeabi_dsub>:
   b6094:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6098 <__adddf3>:
   b6098:	b530      	push	{r4, r5, lr}
   b609a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b609e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b60a2:	ea94 0f05 	teq	r4, r5
   b60a6:	bf08      	it	eq
   b60a8:	ea90 0f02 	teqeq	r0, r2
   b60ac:	bf1f      	itttt	ne
   b60ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   b60b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b60b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b60ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b60be:	f000 80e2 	beq.w	b6286 <__adddf3+0x1ee>
   b60c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b60c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b60ca:	bfb8      	it	lt
   b60cc:	426d      	neglt	r5, r5
   b60ce:	dd0c      	ble.n	b60ea <__adddf3+0x52>
   b60d0:	442c      	add	r4, r5
   b60d2:	ea80 0202 	eor.w	r2, r0, r2
   b60d6:	ea81 0303 	eor.w	r3, r1, r3
   b60da:	ea82 0000 	eor.w	r0, r2, r0
   b60de:	ea83 0101 	eor.w	r1, r3, r1
   b60e2:	ea80 0202 	eor.w	r2, r0, r2
   b60e6:	ea81 0303 	eor.w	r3, r1, r3
   b60ea:	2d36      	cmp	r5, #54	; 0x36
   b60ec:	bf88      	it	hi
   b60ee:	bd30      	pophi	{r4, r5, pc}
   b60f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b60f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b60f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b60fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6100:	d002      	beq.n	b6108 <__adddf3+0x70>
   b6102:	4240      	negs	r0, r0
   b6104:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6108:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b610c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6110:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6114:	d002      	beq.n	b611c <__adddf3+0x84>
   b6116:	4252      	negs	r2, r2
   b6118:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b611c:	ea94 0f05 	teq	r4, r5
   b6120:	f000 80a7 	beq.w	b6272 <__adddf3+0x1da>
   b6124:	f1a4 0401 	sub.w	r4, r4, #1
   b6128:	f1d5 0e20 	rsbs	lr, r5, #32
   b612c:	db0d      	blt.n	b614a <__adddf3+0xb2>
   b612e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6132:	fa22 f205 	lsr.w	r2, r2, r5
   b6136:	1880      	adds	r0, r0, r2
   b6138:	f141 0100 	adc.w	r1, r1, #0
   b613c:	fa03 f20e 	lsl.w	r2, r3, lr
   b6140:	1880      	adds	r0, r0, r2
   b6142:	fa43 f305 	asr.w	r3, r3, r5
   b6146:	4159      	adcs	r1, r3
   b6148:	e00e      	b.n	b6168 <__adddf3+0xd0>
   b614a:	f1a5 0520 	sub.w	r5, r5, #32
   b614e:	f10e 0e20 	add.w	lr, lr, #32
   b6152:	2a01      	cmp	r2, #1
   b6154:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6158:	bf28      	it	cs
   b615a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b615e:	fa43 f305 	asr.w	r3, r3, r5
   b6162:	18c0      	adds	r0, r0, r3
   b6164:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6168:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b616c:	d507      	bpl.n	b617e <__adddf3+0xe6>
   b616e:	f04f 0e00 	mov.w	lr, #0
   b6172:	f1dc 0c00 	rsbs	ip, ip, #0
   b6176:	eb7e 0000 	sbcs.w	r0, lr, r0
   b617a:	eb6e 0101 	sbc.w	r1, lr, r1
   b617e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6182:	d31b      	bcc.n	b61bc <__adddf3+0x124>
   b6184:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6188:	d30c      	bcc.n	b61a4 <__adddf3+0x10c>
   b618a:	0849      	lsrs	r1, r1, #1
   b618c:	ea5f 0030 	movs.w	r0, r0, rrx
   b6190:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6194:	f104 0401 	add.w	r4, r4, #1
   b6198:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b619c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b61a0:	f080 809a 	bcs.w	b62d8 <__adddf3+0x240>
   b61a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b61a8:	bf08      	it	eq
   b61aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b61ae:	f150 0000 	adcs.w	r0, r0, #0
   b61b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b61b6:	ea41 0105 	orr.w	r1, r1, r5
   b61ba:	bd30      	pop	{r4, r5, pc}
   b61bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b61c0:	4140      	adcs	r0, r0
   b61c2:	eb41 0101 	adc.w	r1, r1, r1
   b61c6:	3c01      	subs	r4, #1
   b61c8:	bf28      	it	cs
   b61ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b61ce:	d2e9      	bcs.n	b61a4 <__adddf3+0x10c>
   b61d0:	f091 0f00 	teq	r1, #0
   b61d4:	bf04      	itt	eq
   b61d6:	4601      	moveq	r1, r0
   b61d8:	2000      	moveq	r0, #0
   b61da:	fab1 f381 	clz	r3, r1
   b61de:	bf08      	it	eq
   b61e0:	3320      	addeq	r3, #32
   b61e2:	f1a3 030b 	sub.w	r3, r3, #11
   b61e6:	f1b3 0220 	subs.w	r2, r3, #32
   b61ea:	da0c      	bge.n	b6206 <__adddf3+0x16e>
   b61ec:	320c      	adds	r2, #12
   b61ee:	dd08      	ble.n	b6202 <__adddf3+0x16a>
   b61f0:	f102 0c14 	add.w	ip, r2, #20
   b61f4:	f1c2 020c 	rsb	r2, r2, #12
   b61f8:	fa01 f00c 	lsl.w	r0, r1, ip
   b61fc:	fa21 f102 	lsr.w	r1, r1, r2
   b6200:	e00c      	b.n	b621c <__adddf3+0x184>
   b6202:	f102 0214 	add.w	r2, r2, #20
   b6206:	bfd8      	it	le
   b6208:	f1c2 0c20 	rsble	ip, r2, #32
   b620c:	fa01 f102 	lsl.w	r1, r1, r2
   b6210:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6214:	bfdc      	itt	le
   b6216:	ea41 010c 	orrle.w	r1, r1, ip
   b621a:	4090      	lslle	r0, r2
   b621c:	1ae4      	subs	r4, r4, r3
   b621e:	bfa2      	ittt	ge
   b6220:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6224:	4329      	orrge	r1, r5
   b6226:	bd30      	popge	{r4, r5, pc}
   b6228:	ea6f 0404 	mvn.w	r4, r4
   b622c:	3c1f      	subs	r4, #31
   b622e:	da1c      	bge.n	b626a <__adddf3+0x1d2>
   b6230:	340c      	adds	r4, #12
   b6232:	dc0e      	bgt.n	b6252 <__adddf3+0x1ba>
   b6234:	f104 0414 	add.w	r4, r4, #20
   b6238:	f1c4 0220 	rsb	r2, r4, #32
   b623c:	fa20 f004 	lsr.w	r0, r0, r4
   b6240:	fa01 f302 	lsl.w	r3, r1, r2
   b6244:	ea40 0003 	orr.w	r0, r0, r3
   b6248:	fa21 f304 	lsr.w	r3, r1, r4
   b624c:	ea45 0103 	orr.w	r1, r5, r3
   b6250:	bd30      	pop	{r4, r5, pc}
   b6252:	f1c4 040c 	rsb	r4, r4, #12
   b6256:	f1c4 0220 	rsb	r2, r4, #32
   b625a:	fa20 f002 	lsr.w	r0, r0, r2
   b625e:	fa01 f304 	lsl.w	r3, r1, r4
   b6262:	ea40 0003 	orr.w	r0, r0, r3
   b6266:	4629      	mov	r1, r5
   b6268:	bd30      	pop	{r4, r5, pc}
   b626a:	fa21 f004 	lsr.w	r0, r1, r4
   b626e:	4629      	mov	r1, r5
   b6270:	bd30      	pop	{r4, r5, pc}
   b6272:	f094 0f00 	teq	r4, #0
   b6276:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b627a:	bf06      	itte	eq
   b627c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6280:	3401      	addeq	r4, #1
   b6282:	3d01      	subne	r5, #1
   b6284:	e74e      	b.n	b6124 <__adddf3+0x8c>
   b6286:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b628a:	bf18      	it	ne
   b628c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6290:	d029      	beq.n	b62e6 <__adddf3+0x24e>
   b6292:	ea94 0f05 	teq	r4, r5
   b6296:	bf08      	it	eq
   b6298:	ea90 0f02 	teqeq	r0, r2
   b629c:	d005      	beq.n	b62aa <__adddf3+0x212>
   b629e:	ea54 0c00 	orrs.w	ip, r4, r0
   b62a2:	bf04      	itt	eq
   b62a4:	4619      	moveq	r1, r3
   b62a6:	4610      	moveq	r0, r2
   b62a8:	bd30      	pop	{r4, r5, pc}
   b62aa:	ea91 0f03 	teq	r1, r3
   b62ae:	bf1e      	ittt	ne
   b62b0:	2100      	movne	r1, #0
   b62b2:	2000      	movne	r0, #0
   b62b4:	bd30      	popne	{r4, r5, pc}
   b62b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b62ba:	d105      	bne.n	b62c8 <__adddf3+0x230>
   b62bc:	0040      	lsls	r0, r0, #1
   b62be:	4149      	adcs	r1, r1
   b62c0:	bf28      	it	cs
   b62c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b62c6:	bd30      	pop	{r4, r5, pc}
   b62c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b62cc:	bf3c      	itt	cc
   b62ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b62d2:	bd30      	popcc	{r4, r5, pc}
   b62d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b62d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b62dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b62e0:	f04f 0000 	mov.w	r0, #0
   b62e4:	bd30      	pop	{r4, r5, pc}
   b62e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b62ea:	bf1a      	itte	ne
   b62ec:	4619      	movne	r1, r3
   b62ee:	4610      	movne	r0, r2
   b62f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b62f4:	bf1c      	itt	ne
   b62f6:	460b      	movne	r3, r1
   b62f8:	4602      	movne	r2, r0
   b62fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b62fe:	bf06      	itte	eq
   b6300:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6304:	ea91 0f03 	teqeq	r1, r3
   b6308:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b630c:	bd30      	pop	{r4, r5, pc}
   b630e:	bf00      	nop

000b6310 <__aeabi_ui2d>:
   b6310:	f090 0f00 	teq	r0, #0
   b6314:	bf04      	itt	eq
   b6316:	2100      	moveq	r1, #0
   b6318:	4770      	bxeq	lr
   b631a:	b530      	push	{r4, r5, lr}
   b631c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6320:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6324:	f04f 0500 	mov.w	r5, #0
   b6328:	f04f 0100 	mov.w	r1, #0
   b632c:	e750      	b.n	b61d0 <__adddf3+0x138>
   b632e:	bf00      	nop

000b6330 <__aeabi_i2d>:
   b6330:	f090 0f00 	teq	r0, #0
   b6334:	bf04      	itt	eq
   b6336:	2100      	moveq	r1, #0
   b6338:	4770      	bxeq	lr
   b633a:	b530      	push	{r4, r5, lr}
   b633c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6340:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6344:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6348:	bf48      	it	mi
   b634a:	4240      	negmi	r0, r0
   b634c:	f04f 0100 	mov.w	r1, #0
   b6350:	e73e      	b.n	b61d0 <__adddf3+0x138>
   b6352:	bf00      	nop

000b6354 <__aeabi_f2d>:
   b6354:	0042      	lsls	r2, r0, #1
   b6356:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b635a:	ea4f 0131 	mov.w	r1, r1, rrx
   b635e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6362:	bf1f      	itttt	ne
   b6364:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6368:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b636c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6370:	4770      	bxne	lr
   b6372:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6376:	bf08      	it	eq
   b6378:	4770      	bxeq	lr
   b637a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b637e:	bf04      	itt	eq
   b6380:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6384:	4770      	bxeq	lr
   b6386:	b530      	push	{r4, r5, lr}
   b6388:	f44f 7460 	mov.w	r4, #896	; 0x380
   b638c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6390:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6394:	e71c      	b.n	b61d0 <__adddf3+0x138>
   b6396:	bf00      	nop

000b6398 <__aeabi_ul2d>:
   b6398:	ea50 0201 	orrs.w	r2, r0, r1
   b639c:	bf08      	it	eq
   b639e:	4770      	bxeq	lr
   b63a0:	b530      	push	{r4, r5, lr}
   b63a2:	f04f 0500 	mov.w	r5, #0
   b63a6:	e00a      	b.n	b63be <__aeabi_l2d+0x16>

000b63a8 <__aeabi_l2d>:
   b63a8:	ea50 0201 	orrs.w	r2, r0, r1
   b63ac:	bf08      	it	eq
   b63ae:	4770      	bxeq	lr
   b63b0:	b530      	push	{r4, r5, lr}
   b63b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b63b6:	d502      	bpl.n	b63be <__aeabi_l2d+0x16>
   b63b8:	4240      	negs	r0, r0
   b63ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b63be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b63c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b63c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b63ca:	f43f aed8 	beq.w	b617e <__adddf3+0xe6>
   b63ce:	f04f 0203 	mov.w	r2, #3
   b63d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b63d6:	bf18      	it	ne
   b63d8:	3203      	addne	r2, #3
   b63da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b63de:	bf18      	it	ne
   b63e0:	3203      	addne	r2, #3
   b63e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b63e6:	f1c2 0320 	rsb	r3, r2, #32
   b63ea:	fa00 fc03 	lsl.w	ip, r0, r3
   b63ee:	fa20 f002 	lsr.w	r0, r0, r2
   b63f2:	fa01 fe03 	lsl.w	lr, r1, r3
   b63f6:	ea40 000e 	orr.w	r0, r0, lr
   b63fa:	fa21 f102 	lsr.w	r1, r1, r2
   b63fe:	4414      	add	r4, r2
   b6400:	e6bd      	b.n	b617e <__adddf3+0xe6>
   b6402:	bf00      	nop

000b6404 <__aeabi_dmul>:
   b6404:	b570      	push	{r4, r5, r6, lr}
   b6406:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b640a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b640e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6412:	bf1d      	ittte	ne
   b6414:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6418:	ea94 0f0c 	teqne	r4, ip
   b641c:	ea95 0f0c 	teqne	r5, ip
   b6420:	f000 f8de 	bleq	b65e0 <__aeabi_dmul+0x1dc>
   b6424:	442c      	add	r4, r5
   b6426:	ea81 0603 	eor.w	r6, r1, r3
   b642a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b642e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6432:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6436:	bf18      	it	ne
   b6438:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b643c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6444:	d038      	beq.n	b64b8 <__aeabi_dmul+0xb4>
   b6446:	fba0 ce02 	umull	ip, lr, r0, r2
   b644a:	f04f 0500 	mov.w	r5, #0
   b644e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6452:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6456:	fbe0 e503 	umlal	lr, r5, r0, r3
   b645a:	f04f 0600 	mov.w	r6, #0
   b645e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6462:	f09c 0f00 	teq	ip, #0
   b6466:	bf18      	it	ne
   b6468:	f04e 0e01 	orrne.w	lr, lr, #1
   b646c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6470:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6474:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6478:	d204      	bcs.n	b6484 <__aeabi_dmul+0x80>
   b647a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b647e:	416d      	adcs	r5, r5
   b6480:	eb46 0606 	adc.w	r6, r6, r6
   b6484:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6488:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b648c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6490:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6494:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6498:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b649c:	bf88      	it	hi
   b649e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b64a2:	d81e      	bhi.n	b64e2 <__aeabi_dmul+0xde>
   b64a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b64a8:	bf08      	it	eq
   b64aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b64ae:	f150 0000 	adcs.w	r0, r0, #0
   b64b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b64b6:	bd70      	pop	{r4, r5, r6, pc}
   b64b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b64bc:	ea46 0101 	orr.w	r1, r6, r1
   b64c0:	ea40 0002 	orr.w	r0, r0, r2
   b64c4:	ea81 0103 	eor.w	r1, r1, r3
   b64c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b64cc:	bfc2      	ittt	gt
   b64ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   b64d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b64d6:	bd70      	popgt	{r4, r5, r6, pc}
   b64d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b64dc:	f04f 0e00 	mov.w	lr, #0
   b64e0:	3c01      	subs	r4, #1
   b64e2:	f300 80ab 	bgt.w	b663c <__aeabi_dmul+0x238>
   b64e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b64ea:	bfde      	ittt	le
   b64ec:	2000      	movle	r0, #0
   b64ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b64f2:	bd70      	pople	{r4, r5, r6, pc}
   b64f4:	f1c4 0400 	rsb	r4, r4, #0
   b64f8:	3c20      	subs	r4, #32
   b64fa:	da35      	bge.n	b6568 <__aeabi_dmul+0x164>
   b64fc:	340c      	adds	r4, #12
   b64fe:	dc1b      	bgt.n	b6538 <__aeabi_dmul+0x134>
   b6500:	f104 0414 	add.w	r4, r4, #20
   b6504:	f1c4 0520 	rsb	r5, r4, #32
   b6508:	fa00 f305 	lsl.w	r3, r0, r5
   b650c:	fa20 f004 	lsr.w	r0, r0, r4
   b6510:	fa01 f205 	lsl.w	r2, r1, r5
   b6514:	ea40 0002 	orr.w	r0, r0, r2
   b6518:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b651c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6520:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6524:	fa21 f604 	lsr.w	r6, r1, r4
   b6528:	eb42 0106 	adc.w	r1, r2, r6
   b652c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6530:	bf08      	it	eq
   b6532:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6536:	bd70      	pop	{r4, r5, r6, pc}
   b6538:	f1c4 040c 	rsb	r4, r4, #12
   b653c:	f1c4 0520 	rsb	r5, r4, #32
   b6540:	fa00 f304 	lsl.w	r3, r0, r4
   b6544:	fa20 f005 	lsr.w	r0, r0, r5
   b6548:	fa01 f204 	lsl.w	r2, r1, r4
   b654c:	ea40 0002 	orr.w	r0, r0, r2
   b6550:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6554:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6558:	f141 0100 	adc.w	r1, r1, #0
   b655c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6560:	bf08      	it	eq
   b6562:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6566:	bd70      	pop	{r4, r5, r6, pc}
   b6568:	f1c4 0520 	rsb	r5, r4, #32
   b656c:	fa00 f205 	lsl.w	r2, r0, r5
   b6570:	ea4e 0e02 	orr.w	lr, lr, r2
   b6574:	fa20 f304 	lsr.w	r3, r0, r4
   b6578:	fa01 f205 	lsl.w	r2, r1, r5
   b657c:	ea43 0302 	orr.w	r3, r3, r2
   b6580:	fa21 f004 	lsr.w	r0, r1, r4
   b6584:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6588:	fa21 f204 	lsr.w	r2, r1, r4
   b658c:	ea20 0002 	bic.w	r0, r0, r2
   b6590:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6594:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6598:	bf08      	it	eq
   b659a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b659e:	bd70      	pop	{r4, r5, r6, pc}
   b65a0:	f094 0f00 	teq	r4, #0
   b65a4:	d10f      	bne.n	b65c6 <__aeabi_dmul+0x1c2>
   b65a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b65aa:	0040      	lsls	r0, r0, #1
   b65ac:	eb41 0101 	adc.w	r1, r1, r1
   b65b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b65b4:	bf08      	it	eq
   b65b6:	3c01      	subeq	r4, #1
   b65b8:	d0f7      	beq.n	b65aa <__aeabi_dmul+0x1a6>
   b65ba:	ea41 0106 	orr.w	r1, r1, r6
   b65be:	f095 0f00 	teq	r5, #0
   b65c2:	bf18      	it	ne
   b65c4:	4770      	bxne	lr
   b65c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b65ca:	0052      	lsls	r2, r2, #1
   b65cc:	eb43 0303 	adc.w	r3, r3, r3
   b65d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b65d4:	bf08      	it	eq
   b65d6:	3d01      	subeq	r5, #1
   b65d8:	d0f7      	beq.n	b65ca <__aeabi_dmul+0x1c6>
   b65da:	ea43 0306 	orr.w	r3, r3, r6
   b65de:	4770      	bx	lr
   b65e0:	ea94 0f0c 	teq	r4, ip
   b65e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b65e8:	bf18      	it	ne
   b65ea:	ea95 0f0c 	teqne	r5, ip
   b65ee:	d00c      	beq.n	b660a <__aeabi_dmul+0x206>
   b65f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b65f4:	bf18      	it	ne
   b65f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b65fa:	d1d1      	bne.n	b65a0 <__aeabi_dmul+0x19c>
   b65fc:	ea81 0103 	eor.w	r1, r1, r3
   b6600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6604:	f04f 0000 	mov.w	r0, #0
   b6608:	bd70      	pop	{r4, r5, r6, pc}
   b660a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b660e:	bf06      	itte	eq
   b6610:	4610      	moveq	r0, r2
   b6612:	4619      	moveq	r1, r3
   b6614:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6618:	d019      	beq.n	b664e <__aeabi_dmul+0x24a>
   b661a:	ea94 0f0c 	teq	r4, ip
   b661e:	d102      	bne.n	b6626 <__aeabi_dmul+0x222>
   b6620:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6624:	d113      	bne.n	b664e <__aeabi_dmul+0x24a>
   b6626:	ea95 0f0c 	teq	r5, ip
   b662a:	d105      	bne.n	b6638 <__aeabi_dmul+0x234>
   b662c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6630:	bf1c      	itt	ne
   b6632:	4610      	movne	r0, r2
   b6634:	4619      	movne	r1, r3
   b6636:	d10a      	bne.n	b664e <__aeabi_dmul+0x24a>
   b6638:	ea81 0103 	eor.w	r1, r1, r3
   b663c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6640:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6644:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6648:	f04f 0000 	mov.w	r0, #0
   b664c:	bd70      	pop	{r4, r5, r6, pc}
   b664e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6652:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6656:	bd70      	pop	{r4, r5, r6, pc}

000b6658 <__aeabi_ddiv>:
   b6658:	b570      	push	{r4, r5, r6, lr}
   b665a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b665e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6666:	bf1d      	ittte	ne
   b6668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b666c:	ea94 0f0c 	teqne	r4, ip
   b6670:	ea95 0f0c 	teqne	r5, ip
   b6674:	f000 f8a7 	bleq	b67c6 <__aeabi_ddiv+0x16e>
   b6678:	eba4 0405 	sub.w	r4, r4, r5
   b667c:	ea81 0e03 	eor.w	lr, r1, r3
   b6680:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6684:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6688:	f000 8088 	beq.w	b679c <__aeabi_ddiv+0x144>
   b668c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6690:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6694:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6698:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b669c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b66a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b66a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b66a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b66ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b66b0:	429d      	cmp	r5, r3
   b66b2:	bf08      	it	eq
   b66b4:	4296      	cmpeq	r6, r2
   b66b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b66ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b66be:	d202      	bcs.n	b66c6 <__aeabi_ddiv+0x6e>
   b66c0:	085b      	lsrs	r3, r3, #1
   b66c2:	ea4f 0232 	mov.w	r2, r2, rrx
   b66c6:	1ab6      	subs	r6, r6, r2
   b66c8:	eb65 0503 	sbc.w	r5, r5, r3
   b66cc:	085b      	lsrs	r3, r3, #1
   b66ce:	ea4f 0232 	mov.w	r2, r2, rrx
   b66d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b66d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b66da:	ebb6 0e02 	subs.w	lr, r6, r2
   b66de:	eb75 0e03 	sbcs.w	lr, r5, r3
   b66e2:	bf22      	ittt	cs
   b66e4:	1ab6      	subcs	r6, r6, r2
   b66e6:	4675      	movcs	r5, lr
   b66e8:	ea40 000c 	orrcs.w	r0, r0, ip
   b66ec:	085b      	lsrs	r3, r3, #1
   b66ee:	ea4f 0232 	mov.w	r2, r2, rrx
   b66f2:	ebb6 0e02 	subs.w	lr, r6, r2
   b66f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b66fa:	bf22      	ittt	cs
   b66fc:	1ab6      	subcs	r6, r6, r2
   b66fe:	4675      	movcs	r5, lr
   b6700:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6704:	085b      	lsrs	r3, r3, #1
   b6706:	ea4f 0232 	mov.w	r2, r2, rrx
   b670a:	ebb6 0e02 	subs.w	lr, r6, r2
   b670e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6712:	bf22      	ittt	cs
   b6714:	1ab6      	subcs	r6, r6, r2
   b6716:	4675      	movcs	r5, lr
   b6718:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b671c:	085b      	lsrs	r3, r3, #1
   b671e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6722:	ebb6 0e02 	subs.w	lr, r6, r2
   b6726:	eb75 0e03 	sbcs.w	lr, r5, r3
   b672a:	bf22      	ittt	cs
   b672c:	1ab6      	subcs	r6, r6, r2
   b672e:	4675      	movcs	r5, lr
   b6730:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6734:	ea55 0e06 	orrs.w	lr, r5, r6
   b6738:	d018      	beq.n	b676c <__aeabi_ddiv+0x114>
   b673a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b673e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6742:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6746:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b674a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b674e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6752:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6756:	d1c0      	bne.n	b66da <__aeabi_ddiv+0x82>
   b6758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b675c:	d10b      	bne.n	b6776 <__aeabi_ddiv+0x11e>
   b675e:	ea41 0100 	orr.w	r1, r1, r0
   b6762:	f04f 0000 	mov.w	r0, #0
   b6766:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b676a:	e7b6      	b.n	b66da <__aeabi_ddiv+0x82>
   b676c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6770:	bf04      	itt	eq
   b6772:	4301      	orreq	r1, r0
   b6774:	2000      	moveq	r0, #0
   b6776:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b677a:	bf88      	it	hi
   b677c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6780:	f63f aeaf 	bhi.w	b64e2 <__aeabi_dmul+0xde>
   b6784:	ebb5 0c03 	subs.w	ip, r5, r3
   b6788:	bf04      	itt	eq
   b678a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b678e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6792:	f150 0000 	adcs.w	r0, r0, #0
   b6796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b679a:	bd70      	pop	{r4, r5, r6, pc}
   b679c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b67a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b67a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b67a8:	bfc2      	ittt	gt
   b67aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   b67ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b67b2:	bd70      	popgt	{r4, r5, r6, pc}
   b67b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b67b8:	f04f 0e00 	mov.w	lr, #0
   b67bc:	3c01      	subs	r4, #1
   b67be:	e690      	b.n	b64e2 <__aeabi_dmul+0xde>
   b67c0:	ea45 0e06 	orr.w	lr, r5, r6
   b67c4:	e68d      	b.n	b64e2 <__aeabi_dmul+0xde>
   b67c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b67ca:	ea94 0f0c 	teq	r4, ip
   b67ce:	bf08      	it	eq
   b67d0:	ea95 0f0c 	teqeq	r5, ip
   b67d4:	f43f af3b 	beq.w	b664e <__aeabi_dmul+0x24a>
   b67d8:	ea94 0f0c 	teq	r4, ip
   b67dc:	d10a      	bne.n	b67f4 <__aeabi_ddiv+0x19c>
   b67de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b67e2:	f47f af34 	bne.w	b664e <__aeabi_dmul+0x24a>
   b67e6:	ea95 0f0c 	teq	r5, ip
   b67ea:	f47f af25 	bne.w	b6638 <__aeabi_dmul+0x234>
   b67ee:	4610      	mov	r0, r2
   b67f0:	4619      	mov	r1, r3
   b67f2:	e72c      	b.n	b664e <__aeabi_dmul+0x24a>
   b67f4:	ea95 0f0c 	teq	r5, ip
   b67f8:	d106      	bne.n	b6808 <__aeabi_ddiv+0x1b0>
   b67fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b67fe:	f43f aefd 	beq.w	b65fc <__aeabi_dmul+0x1f8>
   b6802:	4610      	mov	r0, r2
   b6804:	4619      	mov	r1, r3
   b6806:	e722      	b.n	b664e <__aeabi_dmul+0x24a>
   b6808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b680c:	bf18      	it	ne
   b680e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6812:	f47f aec5 	bne.w	b65a0 <__aeabi_dmul+0x19c>
   b6816:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b681a:	f47f af0d 	bne.w	b6638 <__aeabi_dmul+0x234>
   b681e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6822:	f47f aeeb 	bne.w	b65fc <__aeabi_dmul+0x1f8>
   b6826:	e712      	b.n	b664e <__aeabi_dmul+0x24a>

000b6828 <__gedf2>:
   b6828:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b682c:	e006      	b.n	b683c <__cmpdf2+0x4>
   b682e:	bf00      	nop

000b6830 <__ledf2>:
   b6830:	f04f 0c01 	mov.w	ip, #1
   b6834:	e002      	b.n	b683c <__cmpdf2+0x4>
   b6836:	bf00      	nop

000b6838 <__cmpdf2>:
   b6838:	f04f 0c01 	mov.w	ip, #1
   b683c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b684c:	bf18      	it	ne
   b684e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6852:	d01b      	beq.n	b688c <__cmpdf2+0x54>
   b6854:	b001      	add	sp, #4
   b6856:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b685a:	bf0c      	ite	eq
   b685c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6860:	ea91 0f03 	teqne	r1, r3
   b6864:	bf02      	ittt	eq
   b6866:	ea90 0f02 	teqeq	r0, r2
   b686a:	2000      	moveq	r0, #0
   b686c:	4770      	bxeq	lr
   b686e:	f110 0f00 	cmn.w	r0, #0
   b6872:	ea91 0f03 	teq	r1, r3
   b6876:	bf58      	it	pl
   b6878:	4299      	cmppl	r1, r3
   b687a:	bf08      	it	eq
   b687c:	4290      	cmpeq	r0, r2
   b687e:	bf2c      	ite	cs
   b6880:	17d8      	asrcs	r0, r3, #31
   b6882:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6886:	f040 0001 	orr.w	r0, r0, #1
   b688a:	4770      	bx	lr
   b688c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6890:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6894:	d102      	bne.n	b689c <__cmpdf2+0x64>
   b6896:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b689a:	d107      	bne.n	b68ac <__cmpdf2+0x74>
   b689c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b68a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b68a4:	d1d6      	bne.n	b6854 <__cmpdf2+0x1c>
   b68a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b68aa:	d0d3      	beq.n	b6854 <__cmpdf2+0x1c>
   b68ac:	f85d 0b04 	ldr.w	r0, [sp], #4
   b68b0:	4770      	bx	lr
   b68b2:	bf00      	nop

000b68b4 <__aeabi_cdrcmple>:
   b68b4:	4684      	mov	ip, r0
   b68b6:	4610      	mov	r0, r2
   b68b8:	4662      	mov	r2, ip
   b68ba:	468c      	mov	ip, r1
   b68bc:	4619      	mov	r1, r3
   b68be:	4663      	mov	r3, ip
   b68c0:	e000      	b.n	b68c4 <__aeabi_cdcmpeq>
   b68c2:	bf00      	nop

000b68c4 <__aeabi_cdcmpeq>:
   b68c4:	b501      	push	{r0, lr}
   b68c6:	f7ff ffb7 	bl	b6838 <__cmpdf2>
   b68ca:	2800      	cmp	r0, #0
   b68cc:	bf48      	it	mi
   b68ce:	f110 0f00 	cmnmi.w	r0, #0
   b68d2:	bd01      	pop	{r0, pc}

000b68d4 <__aeabi_dcmpeq>:
   b68d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b68d8:	f7ff fff4 	bl	b68c4 <__aeabi_cdcmpeq>
   b68dc:	bf0c      	ite	eq
   b68de:	2001      	moveq	r0, #1
   b68e0:	2000      	movne	r0, #0
   b68e2:	f85d fb08 	ldr.w	pc, [sp], #8
   b68e6:	bf00      	nop

000b68e8 <__aeabi_dcmplt>:
   b68e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b68ec:	f7ff ffea 	bl	b68c4 <__aeabi_cdcmpeq>
   b68f0:	bf34      	ite	cc
   b68f2:	2001      	movcc	r0, #1
   b68f4:	2000      	movcs	r0, #0
   b68f6:	f85d fb08 	ldr.w	pc, [sp], #8
   b68fa:	bf00      	nop

000b68fc <__aeabi_dcmple>:
   b68fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6900:	f7ff ffe0 	bl	b68c4 <__aeabi_cdcmpeq>
   b6904:	bf94      	ite	ls
   b6906:	2001      	movls	r0, #1
   b6908:	2000      	movhi	r0, #0
   b690a:	f85d fb08 	ldr.w	pc, [sp], #8
   b690e:	bf00      	nop

000b6910 <__aeabi_dcmpge>:
   b6910:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6914:	f7ff ffce 	bl	b68b4 <__aeabi_cdrcmple>
   b6918:	bf94      	ite	ls
   b691a:	2001      	movls	r0, #1
   b691c:	2000      	movhi	r0, #0
   b691e:	f85d fb08 	ldr.w	pc, [sp], #8
   b6922:	bf00      	nop

000b6924 <__aeabi_dcmpgt>:
   b6924:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6928:	f7ff ffc4 	bl	b68b4 <__aeabi_cdrcmple>
   b692c:	bf34      	ite	cc
   b692e:	2001      	movcc	r0, #1
   b6930:	2000      	movcs	r0, #0
   b6932:	f85d fb08 	ldr.w	pc, [sp], #8
   b6936:	bf00      	nop

000b6938 <__aeabi_dcmpun>:
   b6938:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b693c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6940:	d102      	bne.n	b6948 <__aeabi_dcmpun+0x10>
   b6942:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6946:	d10a      	bne.n	b695e <__aeabi_dcmpun+0x26>
   b6948:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b694c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6950:	d102      	bne.n	b6958 <__aeabi_dcmpun+0x20>
   b6952:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6956:	d102      	bne.n	b695e <__aeabi_dcmpun+0x26>
   b6958:	f04f 0000 	mov.w	r0, #0
   b695c:	4770      	bx	lr
   b695e:	f04f 0001 	mov.w	r0, #1
   b6962:	4770      	bx	lr

000b6964 <__aeabi_d2iz>:
   b6964:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b696c:	d215      	bcs.n	b699a <__aeabi_d2iz+0x36>
   b696e:	d511      	bpl.n	b6994 <__aeabi_d2iz+0x30>
   b6970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6978:	d912      	bls.n	b69a0 <__aeabi_d2iz+0x3c>
   b697a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b697e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b6982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b698a:	fa23 f002 	lsr.w	r0, r3, r2
   b698e:	bf18      	it	ne
   b6990:	4240      	negne	r0, r0
   b6992:	4770      	bx	lr
   b6994:	f04f 0000 	mov.w	r0, #0
   b6998:	4770      	bx	lr
   b699a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b699e:	d105      	bne.n	b69ac <__aeabi_d2iz+0x48>
   b69a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b69a4:	bf08      	it	eq
   b69a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b69aa:	4770      	bx	lr
   b69ac:	f04f 0000 	mov.w	r0, #0
   b69b0:	4770      	bx	lr
   b69b2:	bf00      	nop

000b69b4 <__aeabi_d2uiz>:
   b69b4:	004a      	lsls	r2, r1, #1
   b69b6:	d211      	bcs.n	b69dc <__aeabi_d2uiz+0x28>
   b69b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b69bc:	d211      	bcs.n	b69e2 <__aeabi_d2uiz+0x2e>
   b69be:	d50d      	bpl.n	b69dc <__aeabi_d2uiz+0x28>
   b69c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b69c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b69c8:	d40e      	bmi.n	b69e8 <__aeabi_d2uiz+0x34>
   b69ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b69ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b69d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b69d6:	fa23 f002 	lsr.w	r0, r3, r2
   b69da:	4770      	bx	lr
   b69dc:	f04f 0000 	mov.w	r0, #0
   b69e0:	4770      	bx	lr
   b69e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b69e6:	d102      	bne.n	b69ee <__aeabi_d2uiz+0x3a>
   b69e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b69ec:	4770      	bx	lr
   b69ee:	f04f 0000 	mov.w	r0, #0
   b69f2:	4770      	bx	lr

000b69f4 <__aeabi_d2f>:
   b69f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b69f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b69fc:	bf24      	itt	cs
   b69fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b6a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b6a06:	d90d      	bls.n	b6a24 <__aeabi_d2f+0x30>
   b6a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b6a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b6a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6a1c:	bf08      	it	eq
   b6a1e:	f020 0001 	biceq.w	r0, r0, #1
   b6a22:	4770      	bx	lr
   b6a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b6a28:	d121      	bne.n	b6a6e <__aeabi_d2f+0x7a>
   b6a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b6a2e:	bfbc      	itt	lt
   b6a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6a34:	4770      	bxlt	lr
   b6a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b6a3e:	f1c2 0218 	rsb	r2, r2, #24
   b6a42:	f1c2 0c20 	rsb	ip, r2, #32
   b6a46:	fa10 f30c 	lsls.w	r3, r0, ip
   b6a4a:	fa20 f002 	lsr.w	r0, r0, r2
   b6a4e:	bf18      	it	ne
   b6a50:	f040 0001 	orrne.w	r0, r0, #1
   b6a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b6a60:	ea40 000c 	orr.w	r0, r0, ip
   b6a64:	fa23 f302 	lsr.w	r3, r3, r2
   b6a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6a6c:	e7cc      	b.n	b6a08 <__aeabi_d2f+0x14>
   b6a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b6a72:	d107      	bne.n	b6a84 <__aeabi_d2f+0x90>
   b6a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6a78:	bf1e      	ittt	ne
   b6a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b6a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b6a82:	4770      	bxne	lr
   b6a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b6a90:	4770      	bx	lr
   b6a92:	bf00      	nop

000b6a94 <atexit>:
   b6a94:	2300      	movs	r3, #0
   b6a96:	4601      	mov	r1, r0
   b6a98:	461a      	mov	r2, r3
   b6a9a:	4618      	mov	r0, r3
   b6a9c:	f000 b86a 	b.w	b6b74 <__register_exitproc>

000b6aa0 <memcpy>:
   b6aa0:	440a      	add	r2, r1
   b6aa2:	4291      	cmp	r1, r2
   b6aa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6aa8:	d100      	bne.n	b6aac <memcpy+0xc>
   b6aaa:	4770      	bx	lr
   b6aac:	b510      	push	{r4, lr}
   b6aae:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6ab6:	4291      	cmp	r1, r2
   b6ab8:	d1f9      	bne.n	b6aae <memcpy+0xe>
   b6aba:	bd10      	pop	{r4, pc}

000b6abc <memset>:
   b6abc:	4402      	add	r2, r0
   b6abe:	4603      	mov	r3, r0
   b6ac0:	4293      	cmp	r3, r2
   b6ac2:	d100      	bne.n	b6ac6 <memset+0xa>
   b6ac4:	4770      	bx	lr
   b6ac6:	f803 1b01 	strb.w	r1, [r3], #1
   b6aca:	e7f9      	b.n	b6ac0 <memset+0x4>

000b6acc <srand>:
   b6acc:	b538      	push	{r3, r4, r5, lr}
   b6ace:	4b10      	ldr	r3, [pc, #64]	; (b6b10 <srand+0x44>)
   b6ad0:	681d      	ldr	r5, [r3, #0]
   b6ad2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6ad4:	4604      	mov	r4, r0
   b6ad6:	b9b3      	cbnz	r3, b6b06 <srand+0x3a>
   b6ad8:	2018      	movs	r0, #24
   b6ada:	f7fd ff93 	bl	b4a04 <malloc>
   b6ade:	4602      	mov	r2, r0
   b6ae0:	63a8      	str	r0, [r5, #56]	; 0x38
   b6ae2:	b920      	cbnz	r0, b6aee <srand+0x22>
   b6ae4:	4b0b      	ldr	r3, [pc, #44]	; (b6b14 <srand+0x48>)
   b6ae6:	480c      	ldr	r0, [pc, #48]	; (b6b18 <srand+0x4c>)
   b6ae8:	2142      	movs	r1, #66	; 0x42
   b6aea:	f7fd ffbb 	bl	b4a64 <__assert_func>
   b6aee:	490b      	ldr	r1, [pc, #44]	; (b6b1c <srand+0x50>)
   b6af0:	4b0b      	ldr	r3, [pc, #44]	; (b6b20 <srand+0x54>)
   b6af2:	e9c0 1300 	strd	r1, r3, [r0]
   b6af6:	4b0b      	ldr	r3, [pc, #44]	; (b6b24 <srand+0x58>)
   b6af8:	6083      	str	r3, [r0, #8]
   b6afa:	230b      	movs	r3, #11
   b6afc:	8183      	strh	r3, [r0, #12]
   b6afe:	2100      	movs	r1, #0
   b6b00:	2001      	movs	r0, #1
   b6b02:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6b06:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6b08:	2200      	movs	r2, #0
   b6b0a:	611c      	str	r4, [r3, #16]
   b6b0c:	615a      	str	r2, [r3, #20]
   b6b0e:	bd38      	pop	{r3, r4, r5, pc}
   b6b10:	2003e144 	.word	0x2003e144
   b6b14:	000b6f4d 	.word	0x000b6f4d
   b6b18:	000b6f64 	.word	0x000b6f64
   b6b1c:	abcd330e 	.word	0xabcd330e
   b6b20:	e66d1234 	.word	0xe66d1234
   b6b24:	0005deec 	.word	0x0005deec

000b6b28 <strdup>:
   b6b28:	4b02      	ldr	r3, [pc, #8]	; (b6b34 <strdup+0xc>)
   b6b2a:	4601      	mov	r1, r0
   b6b2c:	6818      	ldr	r0, [r3, #0]
   b6b2e:	f000 b803 	b.w	b6b38 <_strdup_r>
   b6b32:	bf00      	nop
   b6b34:	2003e144 	.word	0x2003e144

000b6b38 <_strdup_r>:
   b6b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b3a:	4604      	mov	r4, r0
   b6b3c:	4608      	mov	r0, r1
   b6b3e:	460d      	mov	r5, r1
   b6b40:	f000 f80f 	bl	b6b62 <strlen>
   b6b44:	1c42      	adds	r2, r0, #1
   b6b46:	4611      	mov	r1, r2
   b6b48:	4620      	mov	r0, r4
   b6b4a:	9201      	str	r2, [sp, #4]
   b6b4c:	f7fd ff82 	bl	b4a54 <_malloc_r>
   b6b50:	4604      	mov	r4, r0
   b6b52:	b118      	cbz	r0, b6b5c <_strdup_r+0x24>
   b6b54:	9a01      	ldr	r2, [sp, #4]
   b6b56:	4629      	mov	r1, r5
   b6b58:	f7ff ffa2 	bl	b6aa0 <memcpy>
   b6b5c:	4620      	mov	r0, r4
   b6b5e:	b003      	add	sp, #12
   b6b60:	bd30      	pop	{r4, r5, pc}

000b6b62 <strlen>:
   b6b62:	4603      	mov	r3, r0
   b6b64:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6b68:	2a00      	cmp	r2, #0
   b6b6a:	d1fb      	bne.n	b6b64 <strlen+0x2>
   b6b6c:	1a18      	subs	r0, r3, r0
   b6b6e:	3801      	subs	r0, #1
   b6b70:	4770      	bx	lr
	...

000b6b74 <__register_exitproc>:
   b6b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6b78:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6c34 <__register_exitproc+0xc0>
   b6b7c:	4606      	mov	r6, r0
   b6b7e:	f8d8 0000 	ldr.w	r0, [r8]
   b6b82:	461f      	mov	r7, r3
   b6b84:	460d      	mov	r5, r1
   b6b86:	4691      	mov	r9, r2
   b6b88:	f000 f856 	bl	b6c38 <__retarget_lock_acquire_recursive>
   b6b8c:	4b25      	ldr	r3, [pc, #148]	; (b6c24 <__register_exitproc+0xb0>)
   b6b8e:	681c      	ldr	r4, [r3, #0]
   b6b90:	b934      	cbnz	r4, b6ba0 <__register_exitproc+0x2c>
   b6b92:	4c25      	ldr	r4, [pc, #148]	; (b6c28 <__register_exitproc+0xb4>)
   b6b94:	601c      	str	r4, [r3, #0]
   b6b96:	4b25      	ldr	r3, [pc, #148]	; (b6c2c <__register_exitproc+0xb8>)
   b6b98:	b113      	cbz	r3, b6ba0 <__register_exitproc+0x2c>
   b6b9a:	681b      	ldr	r3, [r3, #0]
   b6b9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6ba0:	6863      	ldr	r3, [r4, #4]
   b6ba2:	2b1f      	cmp	r3, #31
   b6ba4:	dd07      	ble.n	b6bb6 <__register_exitproc+0x42>
   b6ba6:	f8d8 0000 	ldr.w	r0, [r8]
   b6baa:	f000 f847 	bl	b6c3c <__retarget_lock_release_recursive>
   b6bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6bb6:	b34e      	cbz	r6, b6c0c <__register_exitproc+0x98>
   b6bb8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6bbc:	b988      	cbnz	r0, b6be2 <__register_exitproc+0x6e>
   b6bbe:	4b1c      	ldr	r3, [pc, #112]	; (b6c30 <__register_exitproc+0xbc>)
   b6bc0:	b923      	cbnz	r3, b6bcc <__register_exitproc+0x58>
   b6bc2:	f8d8 0000 	ldr.w	r0, [r8]
   b6bc6:	f000 f838 	bl	b6c3a <__retarget_lock_release>
   b6bca:	e7f0      	b.n	b6bae <__register_exitproc+0x3a>
   b6bcc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6bd0:	f7fd ff18 	bl	b4a04 <malloc>
   b6bd4:	2800      	cmp	r0, #0
   b6bd6:	d0f4      	beq.n	b6bc2 <__register_exitproc+0x4e>
   b6bd8:	2300      	movs	r3, #0
   b6bda:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6bde:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6be2:	6863      	ldr	r3, [r4, #4]
   b6be4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6be8:	2201      	movs	r2, #1
   b6bea:	409a      	lsls	r2, r3
   b6bec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6bf0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6bf4:	4313      	orrs	r3, r2
   b6bf6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6bfa:	2e02      	cmp	r6, #2
   b6bfc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6c00:	bf02      	ittt	eq
   b6c02:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6c06:	4313      	orreq	r3, r2
   b6c08:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6c0c:	6863      	ldr	r3, [r4, #4]
   b6c0e:	f8d8 0000 	ldr.w	r0, [r8]
   b6c12:	1c5a      	adds	r2, r3, #1
   b6c14:	3302      	adds	r3, #2
   b6c16:	6062      	str	r2, [r4, #4]
   b6c18:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6c1c:	f000 f80e 	bl	b6c3c <__retarget_lock_release_recursive>
   b6c20:	2000      	movs	r0, #0
   b6c22:	e7c6      	b.n	b6bb2 <__register_exitproc+0x3e>
   b6c24:	2003e7e8 	.word	0x2003e7e8
   b6c28:	2003e75c 	.word	0x2003e75c
   b6c2c:	00000000 	.word	0x00000000
   b6c30:	000b4a05 	.word	0x000b4a05
   b6c34:	2003e1a8 	.word	0x2003e1a8

000b6c38 <__retarget_lock_acquire_recursive>:
   b6c38:	4770      	bx	lr

000b6c3a <__retarget_lock_release>:
   b6c3a:	4770      	bx	lr

000b6c3c <__retarget_lock_release_recursive>:
   b6c3c:	4770      	bx	lr

000b6c3e <link_code_end>:
	...

000b6c40 <dynalib_user>:
   b6c40:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b6c50:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   b6c60:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   b6c70:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   b6c80:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   b6c90:	4f4d 4544 7525 003e 614d 6278 746f 7869     MODE%u>.Maxbotix
   b6ca0:	5420 7365 0074 002c 7254 6979 676e 7420      Test.,.Trying t
   b6cb0:	206f 6f63 6e6e 6365 0074 6c25 2c69 2e25     o connect.%li,%.
   b6cc0:	6635 252c 302e 6632 252c 302e 6632 7000     5f,%.02f,%.02f.p
   b6cd0:	6275 696c 6873 6e69 2067 6164 6174 6d00     ublishing data.m
   b6ce0:	7861 7420 6d69 2065 6f66 2072 7570 6c62     ax time for publ
   b6cf0:	7369 6968 676e 7220 6165 6863 6465 7720     ishing reached w
   b6d00:	7469 6f68 7475 7320 6375 6563 7373 203b     ithout success; 
   b6d10:	6f67 7420 206f 6c73 6565 0070 6f4e 2074     go to sleep.Not 
   b6d20:	616d 2078 6974 656d 202c 7274 2079 6761     max time, try ag
   b6d30:	6961 206e 6f74 7020 6275 696c 6873 6700     ain to publish.g
   b6d40:	696f 676e 7420 206f 6c73 6565 0070 6546     oing to sleep.Fe
   b6d50:	6c65 6e69 2067 6572 7473 656c 7373 0000     eling restless..

000b6d60 <_ZTVN8particle11SPISettingsE>:
	...
   b6d68:	40e1 000b 40b3 000b 40b5 000b 6553 4c61     .@...@...@..SeaL
   b6d78:	7665 6c65 425f 6f54 6e77 0000               evel_BTown..

000b6d84 <_ZTVN5spark13CellularClassE>:
	...
   b6d8c:	4b8f 000b 4b85 000b 4b7b 000b 4b31 000b     .K...K..{K..1K..
   b6d9c:	4b6f 000b 4b63 000b 555d 000b 5565 000b     oK..cK..]U..eU..
   b6dac:	4b57 000b 4b4f 000b 4b45 000b 4b3b 000b     WK..OK..EK..;K..
   b6dbc:	5595 000b                                   .U..

000b6dc0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6dc8:	4bc9 000b 4bcf 000b 4c0d 000b 4bdd 000b     .K...K...L...K..
   b6dd8:	4bcb 000b                                   .K..

000b6ddc <_ZTVN5spark13EthernetClassE>:
	...
   b6de4:	5157 000b 514d 000b 5143 000b 5139 000b     WQ..MQ..CQ..9Q..
   b6df4:	512d 000b 5121 000b 555d 000b 5565 000b     -Q..!Q..]U..eU..
   b6e04:	5115 000b 510d 000b 5103 000b 50f9 000b     .Q...Q...Q...P..
   b6e14:	5595 000b                                   .U..

000b6e18 <_ZTV7TwoWire>:
	...
   b6e20:	52fd 000b 5347 000b 531f 000b 52ff 000b     .R..GS...S...R..
   b6e30:	5327 000b 532f 000b 5337 000b 533f 000b     'S../S..7S..?S..

000b6e40 <_ZTV9IPAddress>:
	...
   b6e48:	542b 000b 541b 000b 541d 000b 7061 0070     +T...T...T..app.

000b6e58 <_ZTVN5spark12NetworkClassE>:
	...
   b6e60:	551d 000b 5527 000b 5531 000b 553b 000b     .U..'U..1U..;U..
   b6e70:	5545 000b 5551 000b 555d 000b 5565 000b     EU..QU..]U..eU..
   b6e80:	556d 000b 5579 000b 5581 000b 558b 000b     mU..yU...U...U..
   b6e90:	5595 000b 616e 006e 6e69 0066 766f 0066     .U..nan.inf.ovf.
   b6ea0:	6977 6972 676e 5300 7379 6574 206d 6c73     wiring.System sl
   b6eb0:	6565 2070 6f63 666e 6769 7275 7461 6f69     eep configuratio
   b6ec0:	206e 7369 6920 766e 6c61 6469 002e 5925     n is invalid..%Y
   b6ed0:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   b6ee0:	007a 7361 7463 6d69 0065 0000               z.asctime...

000b6eec <_ZTV11USARTSerial>:
	...
   b6ef4:	5b71 000b 5bdd 000b 5bb5 000b 569f 000b     q[...[...[...V..
   b6f04:	5b85 000b 5ba1 000b 5b93 000b 5baf 000b     .[...[...[...[..
   b6f14:	5b73 000b 5b77 000b                         s[..w[..

000b6f1c <_ZTV9USBSerial>:
	...
   b6f24:	5c1b 000b 5c83 000b 5c59 000b 569f 000b     .\...\..Y\...V..
   b6f34:	5c4b 000b 5c1d 000b 5c2d 000b 5c7d 000b     K\...\..-\..}\..
   b6f44:	5c3d 000b 5c15 000b                         =\...\..

000b6f4c <_ZSt7nothrow>:
   b6f4c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6f5c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b6f6c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b6f7c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b6f8c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b6f9c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b6fac:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b6fbd <link_const_variable_data_end>:
   b6fbd:	00          	.byte	0x00
	...

000b6fc0 <link_constructors_location>:
   b6fc0:	000b44b9 	.word	0x000b44b9
   b6fc4:	000b4b21 	.word	0x000b4b21
   b6fc8:	000b4b99 	.word	0x000b4b99
   b6fcc:	000b5161 	.word	0x000b5161
   b6fd0:	000b550d 	.word	0x000b550d
   b6fd4:	000b566d 	.word	0x000b566d
   b6fd8:	000b5985 	.word	0x000b5985
   b6fdc:	000b5ac5 	.word	0x000b5ac5
   b6fe0:	000b5b5d 	.word	0x000b5b5d

000b6fe4 <link_constructors_end>:
	...
