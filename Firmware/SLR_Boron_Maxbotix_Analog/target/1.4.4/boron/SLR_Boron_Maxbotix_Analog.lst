
/Users/pjb/Dropbox/Particle_Projects/Seaport_SLR_Observation/Seaport_Tide-SLR_Maxbotix_Arduino/Firmware/SLR_Boron_Maxbotix_Analog/target/1.4.4/boron/SLR_Boron_Maxbotix_Analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000057a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000198ac  2**0
                  CONTENTS
  4 .data         000000c0  2003deac  000d97c0  0000deac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000884  2003df6c  2003df6c  0001df6c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9880  000d9880  00019880  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d98a8  000d98a8  000198a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0017e56d  00000000  00000000  000198ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001eb64  00000000  00000000  00197e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00029480  00000000  00000000  001b697d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c40  00000000  00000000  001dfdfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000055e8  00000000  00000000  001e2a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004cf43  00000000  00000000  001e8025  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00053f43  00000000  00000000  00234f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010c176  00000000  00000000  00288eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e66c  00000000  00000000  00395024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fc32 	bl	d889a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fc37 	bl	d88b0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003deac 	.word	0x2003deac
   d404c:	000d97c0 	.word	0x000d97c0
   d4050:	2003df6c 	.word	0x2003df6c
   d4054:	2003df6c 	.word	0x2003df6c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fbd3 	bl	d7808 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d97bc 	.word	0x000d97bc
   d4084:	000d9740 	.word	0x000d9740

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b87c 	b.w	d4184 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f88f 	bl	d41b0 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bb85 	b.w	d77a4 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 b875 	b.w	d6188 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b87b 	b.w	d6198 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 b879 	b.w	d6198 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40b6:	7c03      	ldrb	r3, [r0, #16]
   d40b8:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40bc:	4602      	mov	r2, r0
   d40be:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40c2:	b12b      	cbz	r3, d40d0 <_ZN4File9availableEv+0x1a>
   d40c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40c6:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c8:	1a18      	subs	r0, r3, r0
   d40ca:	bf48      	it	mi
   d40cc:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40d0:	4770      	bx	lr

000d40d2 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40d2:	4770      	bx	lr

000d40d4 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d40d4:	3010      	adds	r0, #16
   d40d6:	f000 bcbb 	b.w	d4a50 <_ZN7FatFile4syncEv>

000d40da <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d40da:	3010      	adds	r0, #16
   d40dc:	f000 bbd0 	b.w	d4880 <_ZN7FatFile4peekEv>

000d40e0 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d40e0:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d40e2:	2201      	movs	r2, #1
   d40e4:	f10d 0107 	add.w	r1, sp, #7
   d40e8:	3010      	adds	r0, #16
   d40ea:	f000 fb16 	bl	d471a <_ZN7FatFile4readEPvj>
   d40ee:	2801      	cmp	r0, #1
   d40f0:	bf0c      	ite	eq
   d40f2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d40f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   d40fa:	b003      	add	sp, #12
   d40fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d4100 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4100:	3010      	adds	r0, #16
   d4102:	f000 bd31 	b.w	d4b68 <_ZN7FatFile5writeEPKvj>

000d4106 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4106:	b507      	push	{r0, r1, r2, lr}
   d4108:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d410a:	2201      	movs	r2, #1
   d410c:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4110:	3010      	adds	r0, #16
   d4112:	4619      	mov	r1, r3
   d4114:	f000 fd28 	bl	d4b68 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4118:	b003      	add	sp, #12
   d411a:	f85d fb04 	ldr.w	pc, [sp], #4

000d411e <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d411e:	b510      	push	{r4, lr}
   d4120:	2134      	movs	r1, #52	; 0x34
   d4122:	4604      	mov	r4, r0
   d4124:	f003 fc57 	bl	d79d6 <_ZdlPvj>
   d4128:	4620      	mov	r0, r4
   d412a:	bd10      	pop	{r4, pc}

000d412c <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d412c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d412e:	4602      	mov	r2, r0
   d4130:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4132:	7913      	ldrb	r3, [r2, #4]
   d4134:	6895      	ldr	r5, [r2, #8]
   d4136:	b133      	cbz	r3, d4146 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4138:	b93d      	cbnz	r5, d414a <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d413a:	490c      	ldr	r1, [pc, #48]	; (d416c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d413c:	b004      	add	sp, #16
   d413e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4142:	f002 bf09 	b.w	d6f58 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4146:	4b0a      	ldr	r3, [pc, #40]	; (d4170 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4148:	e000      	b.n	d414c <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d414a:	4b0a      	ldr	r3, [pc, #40]	; (d4174 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d414c:	7b16      	ldrb	r6, [r2, #12]
   d414e:	4c0a      	ldr	r4, [pc, #40]	; (d4178 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4150:	490a      	ldr	r1, [pc, #40]	; (d417c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4152:	7b52      	ldrb	r2, [r2, #13]
   d4154:	9202      	str	r2, [sp, #8]
   d4156:	2e01      	cmp	r6, #1
   d4158:	bf08      	it	eq
   d415a:	4621      	moveq	r1, r4
   d415c:	9101      	str	r1, [sp, #4]
   d415e:	9500      	str	r5, [sp, #0]
   d4160:	4a07      	ldr	r2, [pc, #28]	; (d4180 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4162:	2100      	movs	r1, #0
   d4164:	f003 f828 	bl	d71b8 <_ZN5Print11printf_implEbPKcz>
  }
   d4168:	b004      	add	sp, #16
   d416a:	bd70      	pop	{r4, r5, r6, pc}
   d416c:	000d9131 	.word	0x000d9131
   d4170:	000d93eb 	.word	0x000d93eb
   d4174:	000d9120 	.word	0x000d9120
   d4178:	000d9129 	.word	0x000d9129
   d417c:	000d912d 	.word	0x000d912d
   d4180:	000d9147 	.word	0x000d9147

000d4184 <setup>:
// Various timing constants
const unsigned long MAX_TIME_TO_PUBLISH_MS = 60000; // Only stay awake for 60 seconds trying to connect to the cloud and publish
const unsigned long TIME_AFTER_PUBLISH_MS = 4000; // After publish, wait 4 seconds for data to go out

void setup(void)
{
   d4184:	b508      	push	{r3, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4186:	f001 ff87 	bl	d6098 <spark_cloud_flag_connect>
  Particle.connect();
  // Cellular.off(); turn off cellular for prelim testing (uncomment)

  delay(5000); // to see response from begin command
   d418a:	f241 3088 	movw	r0, #5000	; 0x1388
   d418e:	f002 f833 	bl	d61f8 <delay>

  Serial.begin(9600);
   d4192:	f003 fac3 	bl	d771c <_Z16_fetch_usbserialv>
   d4196:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d419a:	f003 fab3 	bl	d7704 <_ZN9USBSerial5beginEl>
  Serial.println("Maxbotix Test");
   d419e:	f003 fabd 	bl	d771c <_Z16_fetch_usbserialv>
   d41a2:	4902      	ldr	r1, [pc, #8]	; (d41ac <setup+0x28>)

}
   d41a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // Cellular.off(); turn off cellular for prelim testing (uncomment)

  delay(5000); // to see response from begin command

  Serial.begin(9600);
  Serial.println("Maxbotix Test");
   d41a8:	f002 bee9 	b.w	d6f7e <_ZN5Print7printlnEPKc>
   d41ac:	000d9165 	.word	0x000d9165

000d41b0 <loop>:

}

void loop(void)
{
   d41b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Enter state machine
  switch(state) {
   d41b4:	4cc0      	ldr	r4, [pc, #768]	; (d44b8 <loop+0x308>)
   d41b6:	7826      	ldrb	r6, [r4, #0]
  Serial.println("Maxbotix Test");

}

void loop(void)
{
   d41b8:	b0ab      	sub	sp, #172	; 0xac
   d41ba:	4627      	mov	r7, r4
  // Enter state machine
  switch(state) {
   d41bc:	b326      	cbz	r6, d4208 <loop+0x58>
   d41be:	2e01      	cmp	r6, #1
   d41c0:	f040 81c6 	bne.w	d4550 <loop+0x3a0>
  /*** SLEEP_STATE ***/
  /*** Get here from PUBLISH_STATE and go to GPS_WAIT_STATE (if code makes it that far)
  or SLEEP_MODE_DEEP after calculating a wakeup time based off of the current time from the cloud.
  ***/
  case SLEEP_STATE: {
    Serial.println("going to sleep");
   d41c4:	f003 faaa 	bl	d771c <_Z16_fetch_usbserialv>
   d41c8:	49bc      	ldr	r1, [pc, #752]	; (d44bc <loop+0x30c>)
   d41ca:	f002 fed8 	bl	d6f7e <_ZN5Print7printlnEPKc>
    delay(500);
   d41ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d41d2:	f002 f811 	bl	d61f8 <delay>

    // Calculate sleep time
  	int nextSampleMin = 5; // sample at 5 past the hour
  	int currentHour = Time.hour();
   d41d6:	f003 f98f 	bl	d74f8 <_ZN9TimeClass4hourEv>
  	int currentSecond = Time.now()%86400; // in UTC
   d41da:	f003 f985 	bl	d74e8 <_ZN9TimeClass3nowEv>

  	// Calculate seconds since midnight of next sample
  	int nextSampleSec = (currentHour+1)*60*60+nextSampleMin*60; // sample at this time
   	// int secondsToSleep = nextSampleSec - currentSecond;
    int secondsToSleep = 30; // for rapid testing
  	Serial.printf("Sleep for %d seconds\n", secondsToSleep);
   d41de:	f003 fa9d 	bl	d771c <_Z16_fetch_usbserialv>
   d41e2:	231e      	movs	r3, #30
   d41e4:	4ab6      	ldr	r2, [pc, #728]	; (d44c0 <loop+0x310>)
   d41e6:	2100      	movs	r1, #0
   d41e8:	f002 ffe6 	bl	d71b8 <_ZN5Print11printf_implEbPKcz>
   	System.sleep(SLEEP_MODE_DEEP, secondsToSleep);
   d41ec:	4bb5      	ldr	r3, [pc, #724]	; (d44c4 <loop+0x314>)
   d41ee:	221e      	movs	r2, #30
   d41f0:	681b      	ldr	r3, [r3, #0]
   d41f2:	4631      	mov	r1, r6
   d41f4:	a80c      	add	r0, sp, #48	; 0x30
   d41f6:	f003 f8f3 	bl	d73e0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41fa:	f001 fd79 	bl	d5cf0 <HAL_Timer_Get_Milli_Seconds>

    // It'll only make it here if the sleep call doesn't work for some reason
    stateTime = millis();
   d41fe:	4bb2      	ldr	r3, [pc, #712]	; (d44c8 <loop+0x318>)
   d4200:	6018      	str	r0, [r3, #0]
    state = PUBLISH_STATE;
   d4202:	2300      	movs	r3, #0
   d4204:	7023      	strb	r3, [r4, #0]
  }
  break;
   d4206:	e1a3      	b.n	d4550 <loop+0x3a0>
  go to SLEEP_STATE
  If not connected, still get/print value then go to SLEEP_STATE.
  ***/
  case PUBLISH_STATE: {
    // Reinitialize sum variable prior to every loop execution
    dist_in_sum = 0; 
   d4208:	4cb0      	ldr	r4, [pc, #704]	; (d44cc <loop+0x31c>)

    for(j=0; j<100; j++){
   d420a:	4db1      	ldr	r5, [pc, #708]	; (d44d0 <loop+0x320>)
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d420c:	f8df 8304 	ldr.w	r8, [pc, #772]	; d4514 <loop+0x364>
   d4210:	602e      	str	r6, [r5, #0]
  go to SLEEP_STATE
  If not connected, still get/print value then go to SLEEP_STATE.
  ***/
  case PUBLISH_STATE: {
    // Reinitialize sum variable prior to every loop execution
    dist_in_sum = 0; 
   d4212:	2300      	movs	r3, #0
   d4214:	6023      	str	r3, [r4, #0]

    for(j=0; j<100; j++){
   d4216:	682b      	ldr	r3, [r5, #0]
   d4218:	2b63      	cmp	r3, #99	; 0x63
   d421a:	f300 80ac 	bgt.w	d4376 <loop+0x1c6>
      // Read analog value and convert
      //Counts * (V range/count range) * (Inch range/V range)
      dist_in = analogRead(V_ultraS)*(3.3/2048)*(254/3.3);
   d421e:	4bad      	ldr	r3, [pc, #692]	; (d44d4 <loop+0x324>)
   d4220:	f8df 92f4 	ldr.w	r9, [pc, #756]	; d4518 <loop+0x368>
   d4224:	8818      	ldrh	r0, [r3, #0]
   d4226:	f003 fb57 	bl	d78d8 <analogRead>
   d422a:	f003 fe73 	bl	d7f14 <__aeabi_i2d>
   d422e:	a39e      	add	r3, pc, #632	; (adr r3, d44a8 <loop+0x2f8>)
   d4230:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4234:	f003 fed4 	bl	d7fe0 <__aeabi_dmul>
   d4238:	a39d      	add	r3, pc, #628	; (adr r3, d44b0 <loop+0x300>)
   d423a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d423e:	f003 fecf 	bl	d7fe0 <__aeabi_dmul>
   d4242:	f004 f9c5 	bl	d85d0 <__aeabi_d2f>
      
      // Add new distance to cumulative value
      dist_in_sum += dist_in;
   d4246:	edd4 7a00 	vldr	s15, [r4]
    dist_in_sum = 0; 

    for(j=0; j<100; j++){
      // Read analog value and convert
      //Counts * (V range/count range) * (Inch range/V range)
      dist_in = analogRead(V_ultraS)*(3.3/2048)*(254/3.3);
   d424a:	f8c9 0000 	str.w	r0, [r9]
   d424e:	ee07 0a10 	vmov	s14, r0
      
      // Add new distance to cumulative value
      dist_in_sum += dist_in;
   d4252:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4256:	f04f 0a01 	mov.w	sl, #1
   d425a:	edc4 7a00 	vstr	s15, [r4]
      // Print out distance
      // Serial.print("Time: ");
      // Serial.print(Time.now());
      // Serial.print(", Distance(in): ");
      
      Serial.println(dist_in);
   d425e:	f003 fa5d 	bl	d771c <_Z16_fetch_usbserialv>
   d4262:	4606      	mov	r6, r0
   d4264:	f8d9 0000 	ldr.w	r0, [r9]
   d4268:	f003 fe66 	bl	d7f38 <__aeabi_f2d>
   d426c:	ec41 0b10 	vmov	d0, r0, r1
   d4270:	2102      	movs	r1, #2
   d4272:	4630      	mov	r0, r6
   d4274:	f002 ff95 	bl	d71a2 <_ZN5Print7printlnEdi>
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4278:	4e97      	ldr	r6, [pc, #604]	; (d44d8 <loop+0x328>)
   d427a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d427e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4282:	920e      	str	r2, [sp, #56]	; 0x38
 public:
  File() {}
   d4284:	4a95      	ldr	r2, [pc, #596]	; (d44dc <loop+0x32c>)
   d4286:	920c      	str	r2, [sp, #48]	; 0x30
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4288:	2300      	movs	r3, #0
   d428a:	4a95      	ldr	r2, [pc, #596]	; (d44e0 <loop+0x330>)
   d428c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   d4290:	f506 6b8c 	add.w	fp, r6, #1120	; 0x460
   d4294:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4298:	930d      	str	r3, [sp, #52]	; 0x34
   d429a:	9208      	str	r2, [sp, #32]
   d429c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d42a0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   d42a4:	220e      	movs	r2, #14
   d42a6:	ab08      	add	r3, sp, #32
   d42a8:	f206 416c 	addw	r1, r6, #1132	; 0x46c
   d42ac:	4658      	mov	r0, fp
   d42ae:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
   d42b2:	f001 faad 	bl	d5810 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d42b6:	b370      	cbz	r0, d4316 <loop+0x166>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d42b8:	f8c6 b000 	str.w	fp, [r6]
    vwd()->close();
   d42bc:	f206 403c 	addw	r0, r6, #1084	; 0x43c
   d42c0:	f000 fbfc 	bl	d4abc <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d42c4:	4651      	mov	r1, sl
   d42c6:	4630      	mov	r0, r6
   d42c8:	f001 f947 	bl	d555a <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d42cc:	4601      	mov	r1, r0
   d42ce:	b148      	cbz	r0, d42e4 <loop+0x134>
   d42d0:	f8df a204 	ldr.w	sl, [pc, #516]	; d44d8 <loop+0x328>
   d42d4:	f20a 463c 	addw	r6, sl, #1084	; 0x43c
   d42d8:	4651      	mov	r1, sl
   d42da:	4630      	mov	r0, r6
   d42dc:	f000 fa05 	bl	d46ea <_ZN7FatFile8openRootEP9FatVolume>
   d42e0:	b1c8      	cbz	r0, d4316 <loop+0x166>
   d42e2:	e005      	b.n	d42f0 <loop+0x140>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d42e4:	4630      	mov	r0, r6
   d42e6:	f001 f938 	bl	d555a <_ZN9FatVolume4initEh>
   d42ea:	2800      	cmp	r0, #0
   d42ec:	d1f0      	bne.n	d42d0 <loop+0x120>
   d42ee:	e012      	b.n	d4316 <loop+0x166>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d42f0:	f89a 343c 	ldrb.w	r3, [sl, #1084]	; 0x43c
   d42f4:	f013 0f70 	tst.w	r3, #112	; 0x70
   d42f8:	d00d      	beq.n	d4316 <loop+0x166>
      return false;
    }
    m_cwd = dir;
   d42fa:	4b7a      	ldr	r3, [pc, #488]	; (d44e4 <loop+0x334>)
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d42fc:	4a7a      	ldr	r2, [pc, #488]	; (d44e8 <loop+0x338>)
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
      return false;
    }
    m_cwd = dir;
   d42fe:	601e      	str	r6, [r3, #0]
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4300:	4631      	mov	r1, r6
   d4302:	f244 2302 	movw	r3, #16898	; 0x4202
   d4306:	a810      	add	r0, sp, #64	; 0x40
   d4308:	f000 fbdf 	bl	d4aca <_ZN7FatFile4openEPS_PKci>
        Serial.println("failed to open card");
        return;
      }

      // open the file for write at end like the "Native SD library"
      if (!myFile.open("distance.txt", O_RDWR | O_CREAT | O_AT_END)) {
   d430c:	b948      	cbnz	r0, d4322 <loop+0x172>
        Serial.println("opening test.txt for write failed");
   d430e:	f003 fa05 	bl	d771c <_Z16_fetch_usbserialv>
   d4312:	4976      	ldr	r1, [pc, #472]	; (d44ec <loop+0x33c>)
   d4314:	e002      	b.n	d431c <loop+0x16c>
      // Start SD stuff
      File myFile;

      // Initialize the library
      if (!sd.begin(SD_CHIP_SELECT, SPI_FULL_SPEED)) {
        Serial.println("failed to open card");
   d4316:	f003 fa01 	bl	d771c <_Z16_fetch_usbserialv>
   d431a:	4975      	ldr	r1, [pc, #468]	; (d44f0 <loop+0x340>)
        return;
      }

      // open the file for write at end like the "Native SD library"
      if (!myFile.open("distance.txt", O_RDWR | O_CREAT | O_AT_END)) {
        Serial.println("opening test.txt for write failed");
   d431c:	f002 fe2f 	bl	d6f7e <_ZN5Print7printlnEPKc>
        return;
   d4320:	e116      	b.n	d4550 <loop+0x3a0>
      }

      // Save to SD card
      myFile.print(Time.now());
   d4322:	f003 f8e1 	bl	d74e8 <_ZN9TimeClass3nowEv>
   d4326:	220a      	movs	r2, #10
   d4328:	4601      	mov	r1, r0
   d432a:	a80c      	add	r0, sp, #48	; 0x30
   d432c:	f002 fe60 	bl	d6ff0 <_ZN5Print5printEli>
      myFile.print(",");
   d4330:	4970      	ldr	r1, [pc, #448]	; (d44f4 <loop+0x344>)
   d4332:	a80c      	add	r0, sp, #48	; 0x30
   d4334:	f002 fe10 	bl	d6f58 <_ZN5Print5printEPKc>
   d4338:	f001 fcda 	bl	d5cf0 <HAL_Timer_Get_Milli_Seconds>
      myFile.print(millis());
   d433c:	220a      	movs	r2, #10
   d433e:	4601      	mov	r1, r0
   d4340:	a80c      	add	r0, sp, #48	; 0x30
   d4342:	f002 fe46 	bl	d6fd2 <_ZN5Print5printEmi>
      myFile.print(",");
   d4346:	496b      	ldr	r1, [pc, #428]	; (d44f4 <loop+0x344>)
   d4348:	a80c      	add	r0, sp, #48	; 0x30
   d434a:	f002 fe05 	bl	d6f58 <_ZN5Print5printEPKc>
      myFile.println(dist_in);
   d434e:	f8d9 0000 	ldr.w	r0, [r9]
   d4352:	f003 fdf1 	bl	d7f38 <__aeabi_f2d>
   d4356:	ec41 0b10 	vmov	d0, r0, r1
   d435a:	2102      	movs	r1, #2
   d435c:	a80c      	add	r0, sp, #48	; 0x30
   d435e:	f002 ff20 	bl	d71a2 <_ZN5Print7printlnEdi>
      myFile.close();
   d4362:	a810      	add	r0, sp, #64	; 0x40
   d4364:	f000 fbaa 	bl	d4abc <_ZN7FatFile5closeEv>

      delay(100);
   d4368:	2064      	movs	r0, #100	; 0x64
   d436a:	f001 ff45 	bl	d61f8 <delay>
  ***/
  case PUBLISH_STATE: {
    // Reinitialize sum variable prior to every loop execution
    dist_in_sum = 0; 

    for(j=0; j<100; j++){
   d436e:	682b      	ldr	r3, [r5, #0]
   d4370:	3301      	adds	r3, #1
   d4372:	602b      	str	r3, [r5, #0]
   d4374:	e74f      	b.n	d4216 <loop+0x66>

      delay(100);
    }
    
    // Calculate then print average
    dist_in_avg = dist_in_sum/j;
   d4376:	ee07 3a90 	vmov	s15, r3
   d437a:	edd4 6a00 	vldr	s13, [r4]
   d437e:	4d5e      	ldr	r5, [pc, #376]	; (d44f8 <loop+0x348>)
   d4380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d4388:	ed85 7a00 	vstr	s14, [r5]

    Serial.print(j);
   d438c:	f003 f9c6 	bl	d771c <_Z16_fetch_usbserialv>
   d4390:	4b4f      	ldr	r3, [pc, #316]	; (d44d0 <loop+0x320>)
   d4392:	220a      	movs	r2, #10
   d4394:	6819      	ldr	r1, [r3, #0]
   d4396:	f002 fe4d 	bl	d7034 <_ZN5Print5printEii>
    Serial.print(",");
   d439a:	f003 f9bf 	bl	d771c <_Z16_fetch_usbserialv>
   d439e:	4955      	ldr	r1, [pc, #340]	; (d44f4 <loop+0x344>)
   d43a0:	f002 fdda 	bl	d6f58 <_ZN5Print5printEPKc>
    Serial.print(dist_in_sum);
   d43a4:	f003 f9ba 	bl	d771c <_Z16_fetch_usbserialv>
   d43a8:	4606      	mov	r6, r0
   d43aa:	6820      	ldr	r0, [r4, #0]
   d43ac:	f003 fdc4 	bl	d7f38 <__aeabi_f2d>
   d43b0:	ec41 0b10 	vmov	d0, r0, r1
   d43b4:	2102      	movs	r1, #2
   d43b6:	4630      	mov	r0, r6
   d43b8:	f002 fef0 	bl	d719c <_ZN5Print5printEdi>
    Serial.print(",");
   d43bc:	f003 f9ae 	bl	d771c <_Z16_fetch_usbserialv>
   d43c0:	494c      	ldr	r1, [pc, #304]	; (d44f4 <loop+0x344>)
   d43c2:	f002 fdc9 	bl	d6f58 <_ZN5Print5printEPKc>
    Serial.println(dist_in_avg);
   d43c6:	f003 f9a9 	bl	d771c <_Z16_fetch_usbserialv>
   d43ca:	4604      	mov	r4, r0
   d43cc:	6828      	ldr	r0, [r5, #0]
   d43ce:	f003 fdb3 	bl	d7f38 <__aeabi_f2d>
   d43d2:	ec41 0b10 	vmov	d0, r0, r1
   d43d6:	2102      	movs	r1, #2
   d43d8:	4620      	mov	r0, r4
   d43da:	f002 fee2 	bl	d71a2 <_ZN5Print7printlnEdi>

    // Get battery charge if Boron provides it
    float cellVoltage = batteryMonitor.getVCell();
   d43de:	4847      	ldr	r0, [pc, #284]	; (d44fc <loop+0x34c>)
   d43e0:	f002 fb0c 	bl	d69fc <_ZN9FuelGauge8getVCellEv>
    float stateOfCharge = batteryMonitor.getSoC();
   d43e4:	4845      	ldr	r0, [pc, #276]	; (d44fc <loop+0x34c>)
    Serial.print(dist_in_sum);
    Serial.print(",");
    Serial.println(dist_in_avg);

    // Get battery charge if Boron provides it
    float cellVoltage = batteryMonitor.getVCell();
   d43e6:	ee10 6a10 	vmov	r6, s0
    float stateOfCharge = batteryMonitor.getSoC();
   d43ea:	f002 fb1d 	bl	d6a28 <_ZN9FuelGauge6getSoCEv>
   d43ee:	ed8d 0a07 	vstr	s0, [sp, #28]

    char data[120];
    snprintf(data, sizeof(data), "%li,%.5f,%.02f,%.02f",//,%.5f,%.5f,%.5f,%.5f,%.5f,%.02f,%.02f",
   d43f2:	f003 f879 	bl	d74e8 <_ZN9TimeClass3nowEv>
                  Time.now(),
                  dist_in_avg,
                  cellVoltage, stateOfCharge
                );
   d43f6:	ed9d 0a07 	vldr	s0, [sp, #28]
    // Get battery charge if Boron provides it
    float cellVoltage = batteryMonitor.getVCell();
    float stateOfCharge = batteryMonitor.getSoC();

    char data[120];
    snprintf(data, sizeof(data), "%li,%.5f,%.02f,%.02f",//,%.5f,%.5f,%.5f,%.5f,%.5f,%.02f,%.02f",
   d43fa:	4604      	mov	r4, r0
                  Time.now(),
                  dist_in_avg,
                  cellVoltage, stateOfCharge
                );
   d43fc:	ee10 0a10 	vmov	r0, s0
   d4400:	f003 fd9a 	bl	d7f38 <__aeabi_f2d>
   d4404:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4408:	4630      	mov	r0, r6
   d440a:	f003 fd95 	bl	d7f38 <__aeabi_f2d>
   d440e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4412:	6828      	ldr	r0, [r5, #0]
   d4414:	f003 fd90 	bl	d7f38 <__aeabi_f2d>
   d4418:	4623      	mov	r3, r4
   d441a:	e9cd 0100 	strd	r0, r1, [sp]
   d441e:	4a38      	ldr	r2, [pc, #224]	; (d4500 <loop+0x350>)
   d4420:	2178      	movs	r1, #120	; 0x78
   d4422:	a80c      	add	r0, sp, #48	; 0x30
   d4424:	f001 fec8 	bl	d61b8 <snprintf>
   d4428:	f001 fc62 	bl	d5cf0 <HAL_Timer_Get_Milli_Seconds>

    // Prep for cellular transmission
    bool isMaxTime = false;
    stateTime = millis();
   d442c:	4b26      	ldr	r3, [pc, #152]	; (d44c8 <loop+0x318>)
   d442e:	6018      	str	r0, [r3, #0]
   d4430:	461d      	mov	r5, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4432:	f001 fe39 	bl	d60a8 <spark_cloud_flag_connected>

    while(!isMaxTime)
    {
      //connect particle to the cloud
      if (Particle.connected() == false)
   d4436:	b930      	cbnz	r0, d4446 <loop+0x296>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4438:	f001 fe2e 	bl	d6098 <spark_cloud_flag_connect>
      {
        Particle.connect();
        Serial.print("Trying to connect");
   d443c:	f003 f96e 	bl	d771c <_Z16_fetch_usbserialv>
   d4440:	4930      	ldr	r1, [pc, #192]	; (d4504 <loop+0x354>)
   d4442:	f002 fd89 	bl	d6f58 <_ZN5Print5printEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4446:	f001 fe2f 	bl	d60a8 <spark_cloud_flag_connected>
      }

      // If connected, publish data buffer
      if (Particle.connected())
   d444a:	4604      	mov	r4, r0
   d444c:	2800      	cmp	r0, #0
   d444e:	d065      	beq.n	d451c <loop+0x36c>
      {
        Serial.println("publishing data");
   d4450:	f003 f964 	bl	d771c <_Z16_fetch_usbserialv>
   d4454:	492c      	ldr	r1, [pc, #176]	; (d4508 <loop+0x358>)
   d4456:	f002 fd92 	bl	d6f7e <_ZN5Print7printlnEPKc>
        Particle.publish(eventName, data, 60, PRIVATE);
   d445a:	4b2c      	ldr	r3, [pc, #176]	; (d450c <loop+0x35c>)
   d445c:	6819      	ldr	r1, [r3, #0]
   d445e:	4b2c      	ldr	r3, [pc, #176]	; (d4510 <loop+0x360>)
   d4460:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4462:	f88d 3000 	strb.w	r3, [sp]
   d4466:	aa0c      	add	r2, sp, #48	; 0x30
   d4468:	233c      	movs	r3, #60	; 0x3c
   d446a:	a808      	add	r0, sp, #32
   d446c:	f002 f8ac 	bl	d65c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4470:	9c09      	ldr	r4, [sp, #36]	; 0x24
   d4472:	b17c      	cbz	r4, d4494 <loop+0x2e4>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4474:	6863      	ldr	r3, [r4, #4]
   d4476:	3b01      	subs	r3, #1
   d4478:	6063      	str	r3, [r4, #4]
   d447a:	b95b      	cbnz	r3, d4494 <loop+0x2e4>
        {
          _M_dispose();
   d447c:	6823      	ldr	r3, [r4, #0]
   d447e:	4620      	mov	r0, r4
   d4480:	689b      	ldr	r3, [r3, #8]
   d4482:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4484:	68a3      	ldr	r3, [r4, #8]
   d4486:	3b01      	subs	r3, #1
   d4488:	60a3      	str	r3, [r4, #8]
   d448a:	b91b      	cbnz	r3, d4494 <loop+0x2e4>
            _M_destroy();
   d448c:	6823      	ldr	r3, [r4, #0]
   d448e:	4620      	mov	r0, r4
   d4490:	68db      	ldr	r3, [r3, #12]
   d4492:	4798      	blx	r3

        // Wait for the publish data
        delay(TIME_AFTER_PUBLISH_MS);
   d4494:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d4498:	f001 feae 	bl	d61f8 <delay>
        isMaxTime = true;
        state = SLEEP_STATE;
   d449c:	2301      	movs	r3, #1
   d449e:	703b      	strb	r3, [r7, #0]
   d44a0:	e056      	b.n	d4550 <loop+0x3a0>
   d44a2:	bf00      	nop
   d44a4:	f3af 8000 	nop.w
   d44a8:	66666666 	.word	0x66666666
   d44ac:	3f5a6666 	.word	0x3f5a6666
   d44b0:	83e0f83e 	.word	0x83e0f83e
   d44b4:	40533e0f 	.word	0x40533e0f
   d44b8:	2003df7a 	.word	0x2003df7a
   d44bc:	000d924f 	.word	0x000d924f
   d44c0:	000d925e 	.word	0x000d925e
   d44c4:	2003df84 	.word	0x2003df84
   d44c8:	2003df98 	.word	0x2003df98
   d44cc:	2003df94 	.word	0x2003df94
   d44d0:	2003df80 	.word	0x2003df80
   d44d4:	2003deac 	.word	0x2003deac
   d44d8:	2003df9c 	.word	0x2003df9c
   d44dc:	000d9100 	.word	0x000d9100
   d44e0:	000d90f4 	.word	0x000d90f4
   d44e4:	2003e420 	.word	0x2003e420
   d44e8:	000d9173 	.word	0x000d9173
   d44ec:	000d9194 	.word	0x000d9194
   d44f0:	000d9180 	.word	0x000d9180
   d44f4:	000d91b6 	.word	0x000d91b6
   d44f8:	2003df70 	.word	0x2003df70
   d44fc:	2003df88 	.word	0x2003df88
   d4500:	000d91b8 	.word	0x000d91b8
   d4504:	000d91cd 	.word	0x000d91cd
   d4508:	000d91df 	.word	0x000d91df
   d450c:	2003deb0 	.word	0x2003deb0
   d4510:	2003df7b 	.word	0x2003df7b
   d4514:	02faf080 	.word	0x02faf080
   d4518:	2003df7c 	.word	0x2003df7c
   d451c:	f001 fbe8 	bl	d5cf0 <HAL_Timer_Get_Milli_Seconds>
      }
      // If not connected after certain amount of time, go to sleep to save battery
      else
      {
        // Took too long to publish, just go to sleep
        if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS)
   d4520:	682b      	ldr	r3, [r5, #0]
   d4522:	1ac0      	subs	r0, r0, r3
   d4524:	f64e 235f 	movw	r3, #59999	; 0xea5f
   d4528:	4298      	cmp	r0, r3
   d452a:	d906      	bls.n	d453a <loop+0x38a>
        {
          isMaxTime = true;
          state = SLEEP_STATE;
   d452c:	2401      	movs	r4, #1
   d452e:	703c      	strb	r4, [r7, #0]
          Serial.println("max time for publishing reached without success; go to sleep");
   d4530:	f003 f8f4 	bl	d771c <_Z16_fetch_usbserialv>
   d4534:	4908      	ldr	r1, [pc, #32]	; (d4558 <loop+0x3a8>)
   d4536:	f002 fd22 	bl	d6f7e <_ZN5Print7printlnEPKc>
        }
        Serial.println("Not max time, try again to publish");
   d453a:	f003 f8ef 	bl	d771c <_Z16_fetch_usbserialv>
   d453e:	4907      	ldr	r1, [pc, #28]	; (d455c <loop+0x3ac>)
   d4540:	f002 fd1d 	bl	d6f7e <_ZN5Print7printlnEPKc>
        delay(100);
   d4544:	2064      	movs	r0, #100	; 0x64
   d4546:	f001 fe57 	bl	d61f8 <delay>

    // Prep for cellular transmission
    bool isMaxTime = false;
    stateTime = millis();

    while(!isMaxTime)
   d454a:	2c00      	cmp	r4, #0
   d454c:	f43f af71 	beq.w	d4432 <loop+0x282>
  }
  break;

  }

}
   d4550:	b02b      	add	sp, #172	; 0xac
   d4552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4556:	bf00      	nop
   d4558:	000d91ef 	.word	0x000d91ef
   d455c:	000d922c 	.word	0x000d922c

000d4560 <_GLOBAL__sub_I_sd>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4560:	4b22      	ldr	r3, [pc, #136]	; (d45ec <_GLOBAL__sub_I_sd+0x8c>)
   d4562:	b570      	push	{r4, r5, r6, lr}
   d4564:	2400      	movs	r4, #0
   d4566:	601c      	str	r4, [r3, #0]
   d4568:	4b21      	ldr	r3, [pc, #132]	; (d45f0 <_GLOBAL__sub_I_sd+0x90>)
// SYSTEM_MODE(MANUAL); // uncomment for prelim testing
SYSTEM_MODE(SEMI_AUTOMATIC); // uncomment for deployment
SYSTEM_THREAD(ENABLED);

// Global objects
FuelGauge batteryMonitor;
   d456a:	4e22      	ldr	r6, [pc, #136]	; (d45f4 <_GLOBAL__sub_I_sd+0x94>)
   d456c:	2501      	movs	r5, #1
   d456e:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4570:	f001 fbd6 	bl	d5d20 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4574:	4b20      	ldr	r3, [pc, #128]	; (d45f8 <_GLOBAL__sub_I_sd+0x98>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4576:	2264      	movs	r2, #100	; 0x64
   d4578:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d457c:	4a1f      	ldr	r2, [pc, #124]	; (d45fc <_GLOBAL__sub_I_sd+0x9c>)
   d457e:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4582:	4a1f      	ldr	r2, [pc, #124]	; (d4600 <_GLOBAL__sub_I_sd+0xa0>)
   d4584:	71dc      	strb	r4, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4586:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d458a:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d458e:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d4592:	f883 5474 	strb.w	r5, [r3, #1140]	; 0x474
   d4596:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d459a:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d459e:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d45a2:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d45a6:	4b17      	ldr	r3, [pc, #92]	; (d4604 <_GLOBAL__sub_I_sd+0xa4>)
   d45a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d45ac:	701c      	strb	r4, [r3, #0]
   d45ae:	805c      	strh	r4, [r3, #2]
   d45b0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d45b2:	2002      	movs	r0, #2
   d45b4:	f001 fd1c 	bl	d5ff0 <set_system_mode>
unsigned long stateTime = 0;

//------------------Turn off cellular for prelim testing; turn on for deployment
// SYSTEM_MODE(MANUAL); // uncomment for prelim testing
SYSTEM_MODE(SEMI_AUTOMATIC); // uncomment for deployment
SYSTEM_THREAD(ENABLED);
   d45b8:	4628      	mov	r0, r5

// Global objects
FuelGauge batteryMonitor;
   d45ba:	4d13      	ldr	r5, [pc, #76]	; (d4608 <_GLOBAL__sub_I_sd+0xa8>)
unsigned long stateTime = 0;

//------------------Turn off cellular for prelim testing; turn on for deployment
// SYSTEM_MODE(MANUAL); // uncomment for prelim testing
SYSTEM_MODE(SEMI_AUTOMATIC); // uncomment for deployment
SYSTEM_THREAD(ENABLED);
   d45bc:	4621      	mov	r1, r4
   d45be:	f001 fd2f 	bl	d6020 <system_thread_set_state>

// Global objects
FuelGauge batteryMonitor;
   d45c2:	4621      	mov	r1, r4
   d45c4:	4628      	mov	r0, r5
   d45c6:	f002 f9d9 	bl	d697c <_ZN9FuelGaugeC1Eb>
   d45ca:	4628      	mov	r0, r5
PMIC pmic;
   d45cc:	4d0f      	ldr	r5, [pc, #60]	; (d460c <_GLOBAL__sub_I_sd+0xac>)
// SYSTEM_MODE(MANUAL); // uncomment for prelim testing
SYSTEM_MODE(SEMI_AUTOMATIC); // uncomment for deployment
SYSTEM_THREAD(ENABLED);

// Global objects
FuelGauge batteryMonitor;
   d45ce:	4910      	ldr	r1, [pc, #64]	; (d4610 <_GLOBAL__sub_I_sd+0xb0>)
   d45d0:	4632      	mov	r2, r6
   d45d2:	f003 f9fb 	bl	d79cc <__aeabi_atexit>
PMIC pmic;
   d45d6:	4621      	mov	r1, r4
   d45d8:	4628      	mov	r0, r5
   d45da:	f002 fc90 	bl	d6efe <_ZN4PMICC1Eb>
   d45de:	4632      	mov	r2, r6
   d45e0:	4628      	mov	r0, r5
   d45e2:	490c      	ldr	r1, [pc, #48]	; (d4614 <_GLOBAL__sub_I_sd+0xb4>)
  }
  break;

  }

}
   d45e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SYSTEM_MODE(SEMI_AUTOMATIC); // uncomment for deployment
SYSTEM_THREAD(ENABLED);

// Global objects
FuelGauge batteryMonitor;
PMIC pmic;
   d45e8:	f003 b9f0 	b.w	d79cc <__aeabi_atexit>
   d45ec:	2003df84 	.word	0x2003df84
   d45f0:	2003df7b 	.word	0x2003df7b
   d45f4:	2003df6c 	.word	0x2003df6c
   d45f8:	2003df9c 	.word	0x2003df9c
   d45fc:	000d90f4 	.word	0x000d90f4
   d4600:	2003e708 	.word	0x2003e708
   d4604:	2003df74 	.word	0x2003df74
   d4608:	2003df88 	.word	0x2003df88
   d460c:	2003df90 	.word	0x2003df90
   d4610:	000d699b 	.word	0x000d699b
   d4614:	000d6f1d 	.word	0x000d6f1d

000d4618 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d4618:	f001 bb82 	b.w	d5d20 <HAL_Pin_Map>

000d461c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d461c:	b510      	push	{r4, lr}
   d461e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4620:	3024      	adds	r0, #36	; 0x24
   d4622:	f000 fe8b 	bl	d533c <_ZN8FatCache4syncEv>
   d4626:	b128      	cbz	r0, d4634 <_ZN9FatVolume9cacheSyncEv+0x18>
   d4628:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d462c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4630:	f000 be84 	b.w	d533c <_ZN8FatCache4syncEv>
  }
   d4634:	bd10      	pop	{r4, pc}

000d4636 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4636:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4638:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d463a:	f043 0304 	orr.w	r3, r3, #4
   d463e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4640:	f100 0210 	add.w	r2, r0, #16
   d4644:	6880      	ldr	r0, [r0, #8]
   d4646:	f000 bf2f 	b.w	d54a8 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d464c <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d464c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4650:	7803      	ldrb	r3, [r0, #0]
   d4652:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d4656:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4658:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d465c:	b10b      	cbz	r3, d4662 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d465e:	2600      	movs	r6, #0
   d4660:	e02e      	b.n	d46c0 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d4662:	6942      	ldr	r2, [r0, #20]
   d4664:	4b18      	ldr	r3, [pc, #96]	; (d46c8 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d4666:	429a      	cmp	r2, r3
   d4668:	d8f9      	bhi.n	d465e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d466a:	f7ff ffe4 	bl	d4636 <_ZN7FatFile10addClusterEv>
   d466e:	4606      	mov	r6, r0
   d4670:	2800      	cmp	r0, #0
   d4672:	d0f4      	beq.n	d465e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d4674:	6921      	ldr	r1, [r4, #16]
   d4676:	68a0      	ldr	r0, [r4, #8]
   d4678:	f000 feab 	bl	d53d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d467c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d467e:	68a0      	ldr	r0, [r4, #8]
   d4680:	2205      	movs	r2, #5
   d4682:	4639      	mov	r1, r7
   d4684:	3024      	adds	r0, #36	; 0x24
   d4686:	f000 fe80 	bl	d538a <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d468a:	4680      	mov	r8, r0
   d468c:	2800      	cmp	r0, #0
   d468e:	d0e6      	beq.n	d465e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d4690:	4629      	mov	r1, r5
   d4692:	f44f 7200 	mov.w	r2, #512	; 0x200
   d4696:	f004 f90b 	bl	d88b0 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d469a:	2501      	movs	r5, #1
   d469c:	68a3      	ldr	r3, [r4, #8]
   d469e:	791a      	ldrb	r2, [r3, #4]
   d46a0:	42aa      	cmp	r2, r5
   d46a2:	d909      	bls.n	d46b8 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d46a4:	4642      	mov	r2, r8
   d46a6:	19e9      	adds	r1, r5, r7
   d46a8:	6818      	ldr	r0, [r3, #0]
   d46aa:	f001 f9ef 	bl	d5a8c <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d46ae:	2800      	cmp	r0, #0
   d46b0:	d0d5      	beq.n	d465e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d46b2:	3501      	adds	r5, #1
   d46b4:	b2ed      	uxtb	r5, r5
   d46b6:	e7f1      	b.n	d469c <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d46b8:	6963      	ldr	r3, [r4, #20]
   d46ba:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d46be:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d46c0:	4630      	mov	r0, r6
   d46c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d46c6:	bf00      	nop
   d46c8:	001ffdff 	.word	0x001ffdff

000d46cc <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d46cc:	b510      	push	{r4, lr}
   d46ce:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d46d0:	6880      	ldr	r0, [r0, #8]
   d46d2:	460a      	mov	r2, r1
   d46d4:	3024      	adds	r0, #36	; 0x24
   d46d6:	69a1      	ldr	r1, [r4, #24]
   d46d8:	f000 fe57 	bl	d538a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d46dc:	b120      	cbz	r0, d46e8 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d46de:	88a3      	ldrh	r3, [r4, #4]
   d46e0:	f003 030f 	and.w	r3, r3, #15
   d46e4:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d46e8:	bd10      	pop	{r4, pc}

000d46ea <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d46ea:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d46ec:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d46ee:	4605      	mov	r5, r0
   d46f0:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d46f2:	b984      	cbnz	r4, d4716 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d46f4:	2224      	movs	r2, #36	; 0x24
   d46f6:	4621      	mov	r1, r4
   d46f8:	f004 f8da 	bl	d88b0 <memset>

  m_vol = vol;
   d46fc:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d46fe:	79f3      	ldrb	r3, [r6, #7]
   d4700:	2b10      	cmp	r3, #16
   d4702:	d003      	beq.n	d470c <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d4704:	2b20      	cmp	r3, #32
   d4706:	d106      	bne.n	d4716 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d4708:	2340      	movs	r3, #64	; 0x40
   d470a:	e000      	b.n	d470e <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d470c:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d470e:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d4710:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d4712:	70a8      	strb	r0, [r5, #2]
   d4714:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d4716:	2000      	movs	r0, #0
   d4718:	bd70      	pop	{r4, r5, r6, pc}

000d471a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d471a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d471e:	7803      	ldrb	r3, [r0, #0]
   d4720:	4604      	mov	r4, r0
   d4722:	4689      	mov	r9, r1
   d4724:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d4726:	b14b      	cbz	r3, d473c <_ZN7FatFile4readEPvj+0x22>
   d4728:	7882      	ldrb	r2, [r0, #2]
   d472a:	07d1      	lsls	r1, r2, #31
   d472c:	d506      	bpl.n	d473c <_ZN7FatFile4readEPvj+0x22>
   d472e:	e00c      	b.n	d474a <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4730:	465a      	mov	r2, fp
   d4732:	6921      	ldr	r1, [r4, #16]
   d4734:	f000 fe53 	bl	d53de <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d4738:	2800      	cmp	r0, #0
   d473a:	da3d      	bge.n	d47b8 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d473c:	7863      	ldrb	r3, [r4, #1]
   d473e:	f043 0302 	orr.w	r3, r3, #2
   d4742:	7063      	strb	r3, [r4, #1]
  return -1;
   d4744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4748:	e097      	b.n	d487a <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d474a:	071a      	lsls	r2, r3, #28
   d474c:	d503      	bpl.n	d4756 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d474e:	69e3      	ldr	r3, [r4, #28]
   d4750:	6962      	ldr	r2, [r4, #20]
   d4752:	1a9b      	subs	r3, r3, r2
   d4754:	e007      	b.n	d4766 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d4756:	069a      	lsls	r2, r3, #26
   d4758:	d508      	bpl.n	d476c <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d475a:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d475c:	891a      	ldrh	r2, [r3, #8]
   d475e:	6963      	ldr	r3, [r4, #20]
   d4760:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d4764:	b29b      	uxth	r3, r3
   d4766:	429d      	cmp	r5, r3
   d4768:	bf28      	it	cs
   d476a:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d476c:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d476e:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4772:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4776:	2e00      	cmp	r6, #0
   d4778:	d035      	beq.n	d47e6 <_ZN7FatFile4readEPvj+0xcc>
   d477a:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d477c:	6963      	ldr	r3, [r4, #20]
   d477e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d4780:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d4784:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d4788:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d478c:	d002      	beq.n	d4794 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d478e:	6a03      	ldr	r3, [r0, #32]
   d4790:	4419      	add	r1, r3
   d4792:	e01d      	b.n	d47d0 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4794:	f890 8005 	ldrb.w	r8, [r0, #5]
   d4798:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d479c:	f1ba 0f00 	cmp.w	sl, #0
   d47a0:	d110      	bne.n	d47c4 <_ZN7FatFile4readEPvj+0xaa>
   d47a2:	f1b8 0f00 	cmp.w	r8, #0
   d47a6:	d10d      	bne.n	d47c4 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d47a8:	2b00      	cmp	r3, #0
   d47aa:	d1c1      	bne.n	d4730 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d47ac:	0653      	lsls	r3, r2, #25
   d47ae:	bf4c      	ite	mi
   d47b0:	6a03      	ldrmi	r3, [r0, #32]
   d47b2:	6a23      	ldrpl	r3, [r4, #32]
   d47b4:	6123      	str	r3, [r4, #16]
   d47b6:	e005      	b.n	d47c4 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d47b8:	d104      	bne.n	d47c4 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d47ba:	7823      	ldrb	r3, [r4, #0]
   d47bc:	f013 0f70 	tst.w	r3, #112	; 0x70
   d47c0:	d111      	bne.n	d47e6 <_ZN7FatFile4readEPvj+0xcc>
   d47c2:	e7bb      	b.n	d473c <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d47c4:	6921      	ldr	r1, [r4, #16]
   d47c6:	68a0      	ldr	r0, [r4, #8]
   d47c8:	f000 fe03 	bl	d53d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d47cc:	eb08 0100 	add.w	r1, r8, r0
   d47d0:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d47d2:	f1ba 0f00 	cmp.w	sl, #0
   d47d6:	d135      	bne.n	d4844 <_ZN7FatFile4readEPvj+0x12a>
   d47d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d47dc:	d332      	bcc.n	d4844 <_ZN7FatFile4readEPvj+0x12a>
   d47de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d47e0:	4299      	cmp	r1, r3
   d47e2:	d102      	bne.n	d47ea <_ZN7FatFile4readEPvj+0xd0>
   d47e4:	e02e      	b.n	d4844 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d47e6:	1ba8      	subs	r0, r5, r6
   d47e8:	e047      	b.n	d487a <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d47ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d47ee:	d31b      	bcc.n	d4828 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d47f0:	7822      	ldrb	r2, [r4, #0]
   d47f2:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d47f4:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d47f8:	d406      	bmi.n	d4808 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d47fa:	7902      	ldrb	r2, [r0, #4]
   d47fc:	ebc8 0202 	rsb	r2, r8, r2
   d4800:	b2d2      	uxtb	r2, r2
   d4802:	4592      	cmp	sl, r2
   d4804:	bf28      	it	cs
   d4806:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4808:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d480a:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d480e:	d207      	bcs.n	d4820 <_ZN7FatFile4readEPvj+0x106>
   d4810:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d4812:	4653      	mov	r3, sl
   d4814:	464a      	mov	r2, r9
   d4816:	6800      	ldr	r0, [r0, #0]
   d4818:	f001 f8f6 	bl	d5a08 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d481c:	b960      	cbnz	r0, d4838 <_ZN7FatFile4readEPvj+0x11e>
   d481e:	e78d      	b.n	d473c <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4820:	4453      	add	r3, sl
   d4822:	4299      	cmp	r1, r3
   d4824:	d321      	bcc.n	d486a <_ZN7FatFile4readEPvj+0x150>
   d4826:	e7f3      	b.n	d4810 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d4828:	464a      	mov	r2, r9
   d482a:	6800      	ldr	r0, [r0, #0]
   d482c:	f001 f8a4 	bl	d5978 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d4830:	2800      	cmp	r0, #0
   d4832:	d083      	beq.n	d473c <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d4834:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d4838:	6963      	ldr	r3, [r4, #20]
   d483a:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d483c:	44b9      	add	r9, r7
    m_curPosition += n;
   d483e:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d4840:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4842:	e798      	b.n	d4776 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4844:	2200      	movs	r2, #0
   d4846:	3024      	adds	r0, #36	; 0x24
   d4848:	f000 fd9f 	bl	d538a <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d484c:	2800      	cmp	r0, #0
   d484e:	f43f af75 	beq.w	d473c <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d4852:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d4856:	42b7      	cmp	r7, r6
   d4858:	bf28      	it	cs
   d485a:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d485c:	eb00 010a 	add.w	r1, r0, sl
   d4860:	463a      	mov	r2, r7
   d4862:	4648      	mov	r0, r9
   d4864:	f004 f819 	bl	d889a <memcpy>
   d4868:	e7e6      	b.n	d4838 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d486a:	3024      	adds	r0, #36	; 0x24
   d486c:	9101      	str	r1, [sp, #4]
   d486e:	f000 fd65 	bl	d533c <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d4872:	9901      	ldr	r1, [sp, #4]
   d4874:	2800      	cmp	r0, #0
   d4876:	d1cb      	bne.n	d4810 <_ZN7FatFile4readEPvj+0xf6>
   d4878:	e760      	b.n	d473c <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d487a:	b003      	add	sp, #12
   d487c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4880 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d4880:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4882:	2201      	movs	r2, #1
   d4884:	f10d 0107 	add.w	r1, sp, #7
   d4888:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d488a:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d488c:	6905      	ldr	r5, [r0, #16]
   d488e:	f7ff ff44 	bl	d471a <_ZN7FatFile4readEPvj>
   d4892:	2801      	cmp	r0, #1
   d4894:	bf05      	ittet	eq
   d4896:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d489a:	6166      	streq	r6, [r4, #20]
   d489c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curCluster = pos->cluster;
   d48a0:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d48a2:	b002      	add	sp, #8
   d48a4:	bd70      	pop	{r4, r5, r6, pc}

000d48a6 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d48a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d48a8:	6943      	ldr	r3, [r0, #20]
   d48aa:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d48ae:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d48b0:	b105      	cbz	r5, d48b4 <_ZN7FatFile12readDirCacheEb+0xe>
   d48b2:	b969      	cbnz	r1, d48d0 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d48b4:	2201      	movs	r2, #1
   d48b6:	f10d 0107 	add.w	r1, sp, #7
   d48ba:	4620      	mov	r0, r4
   d48bc:	f7ff ff2d 	bl	d471a <_ZN7FatFile4readEPvj>
   d48c0:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d48c2:	2801      	cmp	r0, #1
   d48c4:	d001      	beq.n	d48ca <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d48c6:	2000      	movs	r0, #0
   d48c8:	e008      	b.n	d48dc <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d48ca:	6963      	ldr	r3, [r4, #20]
   d48cc:	331f      	adds	r3, #31
   d48ce:	e000      	b.n	d48d2 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d48d0:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d48d2:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d48d4:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d48d6:	3030      	adds	r0, #48	; 0x30
   d48d8:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d48dc:	b003      	add	sp, #12
   d48de:	bd30      	pop	{r4, r5, pc}

000d48e0 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d48e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d48e4:	460e      	mov	r6, r1
   d48e6:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d48e8:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d48ea:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d48ec:	2900      	cmp	r1, #0
   d48ee:	d039      	beq.n	d4964 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d48f0:	6945      	ldr	r5, [r0, #20]
   d48f2:	42b5      	cmp	r5, r6
   d48f4:	d03a      	beq.n	d496c <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d48f6:	b90e      	cbnz	r6, d48fc <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d48f8:	6106      	str	r6, [r0, #16]
    goto done;
   d48fa:	e031      	b.n	d4960 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d48fc:	070b      	lsls	r3, r1, #28
   d48fe:	d503      	bpl.n	d4908 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d4900:	69c3      	ldr	r3, [r0, #28]
   d4902:	429e      	cmp	r6, r3
   d4904:	d82e      	bhi.n	d4964 <_ZN7FatFile7seekSetEm+0x84>
   d4906:	e007      	b.n	d4918 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d4908:	0688      	lsls	r0, r1, #26
   d490a:	d505      	bpl.n	d4918 <_ZN7FatFile7seekSetEm+0x38>
   d490c:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d490e:	891b      	ldrh	r3, [r3, #8]
   d4910:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d4914:	d826      	bhi.n	d4964 <_ZN7FatFile7seekSetEm+0x84>
   d4916:	e023      	b.n	d4960 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4918:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d491c:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d4920:	1e6a      	subs	r2, r5, #1
   d4922:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4926:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4928:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d492a:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d492c:	429a      	cmp	r2, r3
   d492e:	d800      	bhi.n	d4932 <_ZN7FatFile7seekSetEm+0x52>
   d4930:	b94d      	cbnz	r5, d4946 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4932:	064a      	lsls	r2, r1, #25
   d4934:	bf4c      	ite	mi
   d4936:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d493a:	6a22      	ldrpl	r2, [r4, #32]
   d493c:	6122      	str	r2, [r4, #16]
   d493e:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4940:	f104 0810 	add.w	r8, r4, #16
   d4944:	e00a      	b.n	d495c <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d4946:	1a9b      	subs	r3, r3, r2
   d4948:	e7f9      	b.n	d493e <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d494a:	4642      	mov	r2, r8
   d494c:	6921      	ldr	r1, [r4, #16]
   d494e:	68a0      	ldr	r0, [r4, #8]
   d4950:	f000 fd45 	bl	d53de <_ZN9FatVolume6fatGetEmPm>
   d4954:	2800      	cmp	r0, #0
   d4956:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   d495a:	dd03      	ble.n	d4964 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d495c:	2d00      	cmp	r5, #0
   d495e:	d1f4      	bne.n	d494a <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d4960:	6166      	str	r6, [r4, #20]
   d4962:	e003      	b.n	d496c <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d4964:	6127      	str	r7, [r4, #16]
  return false;
   d4966:	2000      	movs	r0, #0
   d4968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d496c:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d496e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4972 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d4972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4974:	460f      	mov	r7, r1
   d4976:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d4978:	2100      	movs	r1, #0
   d497a:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d497c:	4604      	mov	r4, r0
   d497e:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d4980:	f003 ff96 	bl	d88b0 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d4984:	68b8      	ldr	r0, [r7, #8]
   d4986:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4988:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d498c:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d498e:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d4992:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d4994:	6a3b      	ldr	r3, [r7, #32]
   d4996:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4998:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d499a:	7acb      	ldrb	r3, [r1, #11]
   d499c:	071d      	lsls	r5, r3, #28
   d499e:	d44c      	bmi.n	d4a3a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d49a0:	1883      	adds	r3, r0, r2
   d49a2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d49a6:	f003 0317 	and.w	r3, r3, #23
   d49aa:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d49ac:	7ac9      	ldrb	r1, [r1, #11]
   d49ae:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d49b2:	bf04      	itt	eq
   d49b4:	f043 0308 	orreq.w	r3, r3, #8
   d49b8:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d49ba:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d49be:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d49c0:	f006 0303 	and.w	r3, r6, #3
   d49c4:	2b01      	cmp	r3, #1
   d49c6:	d009      	beq.n	d49dc <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d49c8:	2b02      	cmp	r3, #2
   d49ca:	d005      	beq.n	d49d8 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d49cc:	2b00      	cmp	r3, #0
   d49ce:	d134      	bne.n	d4a3a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d49d0:	0571      	lsls	r1, r6, #21
   d49d2:	d432      	bmi.n	d4a3a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d49d4:	2301      	movs	r3, #1
   d49d6:	e002      	b.n	d49de <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d49d8:	2303      	movs	r3, #3
   d49da:	e000      	b.n	d49de <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d49dc:	2302      	movs	r3, #2
   d49de:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d49e0:	78a1      	ldrb	r1, [r4, #2]
   d49e2:	078b      	lsls	r3, r1, #30
   d49e4:	d503      	bpl.n	d49ee <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d49e6:	7823      	ldrb	r3, [r4, #0]
   d49e8:	f013 0f11 	tst.w	r3, #17
   d49ec:	d125      	bne.n	d4a3a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d49ee:	b24b      	sxtb	r3, r1
   d49f0:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d49f4:	f006 0108 	and.w	r1, r6, #8
   d49f8:	bf14      	ite	ne
   d49fa:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d49fe:	2700      	moveq	r7, #0
   d4a00:	4319      	orrs	r1, r3
   d4a02:	4339      	orrs	r1, r7
   d4a04:	70a1      	strb	r1, [r4, #2]
   d4a06:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d4a08:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d4a0a:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d4a0c:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d4a0e:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d4a12:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d4a16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d4a1a:	d504      	bpl.n	d4a26 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d4a1c:	b181      	cbz	r1, d4a40 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d4a1e:	f000 fd7e 	bl	d551e <_ZN9FatVolume9freeChainEm>
   d4a22:	b968      	cbnz	r0, d4a40 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d4a24:	e009      	b.n	d4a3a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d4a26:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d4a28:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d4a2a:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d4a2c:	0473      	lsls	r3, r6, #17
   d4a2e:	d50c      	bpl.n	d4a4a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d4a30:	69e1      	ldr	r1, [r4, #28]
   d4a32:	4620      	mov	r0, r4
   d4a34:	f7ff ff54 	bl	d48e0 <_ZN7FatFile7seekSetEm>
   d4a38:	b938      	cbnz	r0, d4a4a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d4a3a:	2000      	movs	r0, #0
   d4a3c:	7020      	strb	r0, [r4, #0]
  return false;
   d4a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d4a40:	78a3      	ldrb	r3, [r4, #2]
   d4a42:	f043 0304 	orr.w	r3, r3, #4
   d4a46:	70a3      	strb	r3, [r4, #2]
   d4a48:	e7f0      	b.n	d4a2c <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d4a4a:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d4a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4a50 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4a50:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d4a52:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4a54:	4604      	mov	r4, r0
  if (!isOpen()) {
   d4a56:	b90b      	cbnz	r3, d4a5c <_ZN7FatFile4syncEv+0xc>
    return true;
   d4a58:	2001      	movs	r0, #1
   d4a5a:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d4a5c:	7883      	ldrb	r3, [r0, #2]
   d4a5e:	075a      	lsls	r2, r3, #29
   d4a60:	d523      	bpl.n	d4aaa <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d4a62:	2101      	movs	r1, #1
   d4a64:	f7ff fe32 	bl	d46cc <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4a68:	4605      	mov	r5, r0
   d4a6a:	b928      	cbnz	r0, d4a78 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d4a6c:	7863      	ldrb	r3, [r4, #1]
   d4a6e:	f043 0301 	orr.w	r3, r3, #1
   d4a72:	7063      	strb	r3, [r4, #1]
  return false;
   d4a74:	2000      	movs	r0, #0
   d4a76:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4a78:	7803      	ldrb	r3, [r0, #0]
   d4a7a:	2be5      	cmp	r3, #229	; 0xe5
   d4a7c:	d0f6      	beq.n	d4a6c <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d4a7e:	7823      	ldrb	r3, [r4, #0]
   d4a80:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d4a82:	bf44      	itt	mi
   d4a84:	69e3      	ldrmi	r3, [r4, #28]
   d4a86:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d4a88:	8c23      	ldrh	r3, [r4, #32]
   d4a8a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d4a8c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4a8e:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d4a90:	4b09      	ldr	r3, [pc, #36]	; (d4ab8 <_ZN7FatFile4syncEv+0x68>)
   d4a92:	681b      	ldr	r3, [r3, #0]
   d4a94:	b12b      	cbz	r3, d4aa2 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d4a96:	f100 0116 	add.w	r1, r0, #22
   d4a9a:	3018      	adds	r0, #24
   d4a9c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d4a9e:	8b2b      	ldrh	r3, [r5, #24]
   d4aa0:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d4aa2:	78a3      	ldrb	r3, [r4, #2]
   d4aa4:	f023 0304 	bic.w	r3, r3, #4
   d4aa8:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d4aaa:	68a0      	ldr	r0, [r4, #8]
   d4aac:	f7ff fdb6 	bl	d461c <_ZN9FatVolume9cacheSyncEv>
   d4ab0:	2800      	cmp	r0, #0
   d4ab2:	d0db      	beq.n	d4a6c <_ZN7FatFile4syncEv+0x1c>
   d4ab4:	e7d0      	b.n	d4a58 <_ZN7FatFile4syncEv+0x8>
   d4ab6:	bf00      	nop
   d4ab8:	2003e424 	.word	0x2003e424

000d4abc <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d4abc:	b510      	push	{r4, lr}
   d4abe:	4604      	mov	r4, r0
  bool rtn = sync();
   d4ac0:	f7ff ffc6 	bl	d4a50 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d4ac4:	2300      	movs	r3, #0
   d4ac6:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d4ac8:	bd10      	pop	{r4, pc}

000d4aca <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d4aca:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4acc:	b093      	sub	sp, #76	; 0x4c
   d4ace:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4ad0:	2300      	movs	r3, #0
   d4ad2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d4ad6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d4ada:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d4adc:	9201      	str	r2, [sp, #4]
   d4ade:	4606      	mov	r6, r0
   d4ae0:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d4ae2:	b10b      	cbz	r3, d4ae8 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d4ae4:	2000      	movs	r0, #0
   d4ae6:	e03d      	b.n	d4b64 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d4ae8:	780b      	ldrb	r3, [r1, #0]
   d4aea:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4aee:	d0f9      	beq.n	d4ae4 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d4af0:	7813      	ldrb	r3, [r2, #0]
   d4af2:	2b2f      	cmp	r3, #47	; 0x2f
   d4af4:	d112      	bne.n	d4b1c <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d4af6:	9b01      	ldr	r3, [sp, #4]
   d4af8:	781a      	ldrb	r2, [r3, #0]
   d4afa:	2a2f      	cmp	r2, #47	; 0x2f
   d4afc:	d102      	bne.n	d4b04 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d4afe:	3301      	adds	r3, #1
   d4b00:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d4b02:	e7f8      	b.n	d4af6 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d4b04:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d4b06:	b91a      	cbnz	r2, d4b10 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d4b08:	4630      	mov	r0, r6
   d4b0a:	f7ff fdee 	bl	d46ea <_ZN7FatFile8openRootEP9FatVolume>
   d4b0e:	e029      	b.n	d4b64 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d4b10:	a809      	add	r0, sp, #36	; 0x24
   d4b12:	f7ff fdea 	bl	d46ea <_ZN7FatFile8openRootEP9FatVolume>
   d4b16:	2800      	cmp	r0, #0
   d4b18:	d0e4      	beq.n	d4ae4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d4b1a:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d4b1c:	aa01      	add	r2, sp, #4
   d4b1e:	a903      	add	r1, sp, #12
   d4b20:	9801      	ldr	r0, [sp, #4]
   d4b22:	f000 f8ff 	bl	d4d24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d4b26:	2800      	cmp	r0, #0
   d4b28:	d0dc      	beq.n	d4ae4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d4b2a:	9b01      	ldr	r3, [sp, #4]
   d4b2c:	781b      	ldrb	r3, [r3, #0]
   d4b2e:	b19b      	cbz	r3, d4b58 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d4b30:	2300      	movs	r3, #0
   d4b32:	aa03      	add	r2, sp, #12
   d4b34:	4621      	mov	r1, r4
   d4b36:	4630      	mov	r0, r6
   d4b38:	f000 fa36 	bl	d4fa8 <_ZN7FatFile4openEPS_P7fname_ti>
   d4b3c:	2800      	cmp	r0, #0
   d4b3e:	d0d1      	beq.n	d4ae4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d4b40:	4635      	mov	r5, r6
   d4b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b44:	ac09      	add	r4, sp, #36	; 0x24
   d4b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b4c:	682b      	ldr	r3, [r5, #0]
   d4b4e:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d4b50:	4630      	mov	r0, r6
   d4b52:	f7ff ffb3 	bl	d4abc <_ZN7FatFile5closeEv>
   d4b56:	e7e0      	b.n	d4b1a <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d4b58:	463b      	mov	r3, r7
   d4b5a:	aa03      	add	r2, sp, #12
   d4b5c:	4621      	mov	r1, r4
   d4b5e:	4630      	mov	r0, r6
   d4b60:	f000 fa22 	bl	d4fa8 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d4b64:	b013      	add	sp, #76	; 0x4c
   d4b66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b68 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4b6c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4b6e:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4b70:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4b72:	4604      	mov	r4, r0
   d4b74:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4b76:	d508      	bpl.n	d4b8a <_ZN7FatFile5writeEPKvj+0x22>
   d4b78:	7883      	ldrb	r3, [r0, #2]
   d4b7a:	079a      	lsls	r2, r3, #30
   d4b7c:	d505      	bpl.n	d4b8a <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d4b7e:	071b      	lsls	r3, r3, #28
   d4b80:	d50b      	bpl.n	d4b9a <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d4b82:	69e1      	ldr	r1, [r4, #28]
   d4b84:	f7ff feac 	bl	d48e0 <_ZN7FatFile7seekSetEm>
   d4b88:	b938      	cbnz	r0, d4b9a <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d4b8a:	7863      	ldrb	r3, [r4, #1]
   d4b8c:	f043 0301 	orr.w	r3, r3, #1
   d4b90:	7063      	strb	r3, [r4, #1]
  return -1;
   d4b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d4b9a:	6963      	ldr	r3, [r4, #20]
   d4b9c:	43db      	mvns	r3, r3
   d4b9e:	4598      	cmp	r8, r3
   d4ba0:	d8f3      	bhi.n	d4b8a <_ZN7FatFile5writeEPKvj+0x22>
   d4ba2:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4ba4:	f04f 0a00 	mov.w	sl, #0
   d4ba8:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4baa:	2e00      	cmp	r6, #0
   d4bac:	f000 8081 	beq.w	d4cb2 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d4bb0:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4bb2:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4bb4:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d4bb8:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4bbc:	d11c      	bne.n	d4bf8 <_ZN7FatFile5writeEPKvj+0x90>
   d4bbe:	b9df      	cbnz	r7, d4bf8 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d4bc0:	6921      	ldr	r1, [r4, #16]
   d4bc2:	b171      	cbz	r1, d4be2 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4bc4:	f104 0210 	add.w	r2, r4, #16
   d4bc8:	f000 fc09 	bl	d53de <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d4bcc:	2800      	cmp	r0, #0
   d4bce:	dbdc      	blt.n	d4b8a <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d4bd0:	f040 808e 	bne.w	d4cf0 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	f7ff fd2e 	bl	d4636 <_ZN7FatFile10addClusterEv>
   d4bda:	2800      	cmp	r0, #0
   d4bdc:	f040 8088 	bne.w	d4cf0 <_ZN7FatFile5writeEPKvj+0x188>
   d4be0:	e7d3      	b.n	d4b8a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d4be2:	6a23      	ldr	r3, [r4, #32]
   d4be4:	b93b      	cbnz	r3, d4bf6 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d4be6:	4620      	mov	r0, r4
   d4be8:	f7ff fd25 	bl	d4636 <_ZN7FatFile10addClusterEv>
   d4bec:	2800      	cmp	r0, #0
   d4bee:	d0cc      	beq.n	d4b8a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d4bf0:	6923      	ldr	r3, [r4, #16]
   d4bf2:	6223      	str	r3, [r4, #32]
   d4bf4:	e000      	b.n	d4bf8 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d4bf6:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4bf8:	6921      	ldr	r1, [r4, #16]
   d4bfa:	68a0      	ldr	r0, [r4, #8]
   d4bfc:	f000 fbe9 	bl	d53d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4c00:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d4c02:	b917      	cbnz	r7, d4c0a <_ZN7FatFile5writeEPKvj+0xa2>
   d4c04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d4c08:	d221      	bcs.n	d4c4e <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d4c0a:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d4c0e:	42b5      	cmp	r5, r6
   d4c10:	bf28      	it	cs
   d4c12:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d4c14:	b937      	cbnz	r7, d4c24 <_ZN7FatFile5writeEPKvj+0xbc>
   d4c16:	6963      	ldr	r3, [r4, #20]
   d4c18:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d4c1a:	4293      	cmp	r3, r2
   d4c1c:	bf34      	ite	cc
   d4c1e:	2201      	movcc	r2, #1
   d4c20:	2205      	movcs	r2, #5
   d4c22:	e000      	b.n	d4c26 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d4c24:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4c26:	68a0      	ldr	r0, [r4, #8]
   d4c28:	3024      	adds	r0, #36	; 0x24
   d4c2a:	f000 fbae 	bl	d538a <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d4c2e:	2800      	cmp	r0, #0
   d4c30:	d0ab      	beq.n	d4b8a <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4c32:	4438      	add	r0, r7
   d4c34:	462a      	mov	r2, r5
   d4c36:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d4c38:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4c3a:	f003 fe2e 	bl	d889a <memcpy>
      if (512 == (n + blockOffset)) {
   d4c3e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d4c42:	d130      	bne.n	d4ca6 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d4c44:	68a0      	ldr	r0, [r4, #8]
   d4c46:	3024      	adds	r0, #36	; 0x24
   d4c48:	f000 fb78 	bl	d533c <_ZN8FatCache4syncEv>
   d4c4c:	e017      	b.n	d4c7e <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d4c4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d4c52:	68a0      	ldr	r0, [r4, #8]
   d4c54:	d315      	bcc.n	d4c82 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d4c56:	7902      	ldrb	r2, [r0, #4]
   d4c58:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d4c5a:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d4c5c:	b2d2      	uxtb	r2, r2
   d4c5e:	4293      	cmp	r3, r2
   d4c60:	bf28      	it	cs
   d4c62:	4613      	movcs	r3, r2
   d4c64:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4c66:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d4c68:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4c6c:	d302      	bcc.n	d4c74 <_ZN7FatFile5writeEPKvj+0x10c>
   d4c6e:	441a      	add	r2, r3
   d4c70:	4291      	cmp	r1, r2
   d4c72:	d337      	bcc.n	d4ce4 <_ZN7FatFile5writeEPKvj+0x17c>
   d4c74:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d4c76:	464a      	mov	r2, r9
   d4c78:	6838      	ldr	r0, [r7, #0]
   d4c7a:	f000 ff79 	bl	d5b70 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d4c7e:	b990      	cbnz	r0, d4ca6 <_ZN7FatFile5writeEPKvj+0x13e>
   d4c80:	e783      	b.n	d4b8a <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d4c82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4c84:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4c86:	bf02      	ittt	eq
   d4c88:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4c8c:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4c90:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d4c92:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4c94:	464a      	mov	r2, r9
   d4c96:	6818      	ldr	r0, [r3, #0]
   d4c98:	f000 fef8 	bl	d5a8c <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d4c9c:	2800      	cmp	r0, #0
   d4c9e:	f43f af74 	beq.w	d4b8a <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d4ca2:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d4ca6:	6963      	ldr	r3, [r4, #20]
   d4ca8:	442b      	add	r3, r5
   d4caa:	6163      	str	r3, [r4, #20]
    src += n;
   d4cac:	44a9      	add	r9, r5
    nToWrite -= n;
   d4cae:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4cb0:	e77a      	b.n	d4ba8 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d4cb2:	69e2      	ldr	r2, [r4, #28]
   d4cb4:	4293      	cmp	r3, r2
   d4cb6:	d901      	bls.n	d4cbc <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d4cb8:	61e3      	str	r3, [r4, #28]
   d4cba:	e002      	b.n	d4cc2 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d4cbc:	4b0f      	ldr	r3, [pc, #60]	; (d4cfc <_ZN7FatFile5writeEPKvj+0x194>)
   d4cbe:	681b      	ldr	r3, [r3, #0]
   d4cc0:	b11b      	cbz	r3, d4cca <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d4cc2:	78a3      	ldrb	r3, [r4, #2]
   d4cc4:	f043 0304 	orr.w	r3, r3, #4
   d4cc8:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d4cca:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d4cce:	2b00      	cmp	r3, #0
   d4cd0:	db02      	blt.n	d4cd8 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d4cd2:	4640      	mov	r0, r8
   d4cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d4cd8:	4620      	mov	r0, r4
   d4cda:	f7ff feb9 	bl	d4a50 <_ZN7FatFile4syncEv>
   d4cde:	2800      	cmp	r0, #0
   d4ce0:	d1f7      	bne.n	d4cd2 <_ZN7FatFile5writeEPKvj+0x16a>
   d4ce2:	e752      	b.n	d4b8a <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4ce8:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4cec:	62c2      	str	r2, [r0, #44]	; 0x2c
   d4cee:	e7c1      	b.n	d4c74 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4cf0:	6921      	ldr	r1, [r4, #16]
   d4cf2:	68a0      	ldr	r0, [r4, #8]
   d4cf4:	f000 fb6d 	bl	d53d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4cf8:	4601      	mov	r1, r0
   d4cfa:	e783      	b.n	d4c04 <_ZN7FatFile5writeEPKvj+0x9c>
   d4cfc:	2003e424 	.word	0x2003e424

000d4d00 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d4d00:	f001 b80e 	b.w	d5d20 <HAL_Pin_Map>

000d4d04 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d4d04:	1e41      	subs	r1, r0, #1
   d4d06:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d4d0a:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4d0c:	0843      	lsrs	r3, r0, #1
   d4d0e:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d4d12:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d4d16:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4d1a:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4d1c:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4d1e:	d1f5      	bne.n	d4d0c <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d4d20:	4770      	bx	lr
	...

000d4d24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d4d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d4d28:	7803      	ldrb	r3, [r0, #0]
   d4d2a:	2b20      	cmp	r3, #32
   d4d2c:	f100 0401 	add.w	r4, r0, #1
   d4d30:	d101      	bne.n	d4d36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d4d32:	4620      	mov	r0, r4
   d4d34:	e7f8      	b.n	d4d28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4d36:	4f70      	ldr	r7, [pc, #448]	; (d4ef8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d4d38:	6088      	str	r0, [r1, #8]
   d4d3a:	4605      	mov	r5, r0
   d4d3c:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d4d3e:	462e      	mov	r6, r5
   d4d40:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d4d44:	b30b      	cbz	r3, d4d8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4d46:	2b2f      	cmp	r3, #47	; 0x2f
   d4d48:	d101      	bne.n	d4d4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d4d4a:	1903      	adds	r3, r0, r4
   d4d4c:	e017      	b.n	d4d7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4d4e:	2b5c      	cmp	r3, #92	; 0x5c
   d4d50:	d102      	bne.n	d4d58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d4d52:	2000      	movs	r0, #0
   d4d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4d58:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d4d5c:	b2e4      	uxtb	r4, r4
   d4d5e:	2c1d      	cmp	r4, #29
   d4d60:	d803      	bhi.n	d4d6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d4d62:	fa27 f404 	lsr.w	r4, r7, r4
   d4d66:	07e4      	lsls	r4, r4, #31
   d4d68:	d4f3      	bmi.n	d4d52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d4d6a:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d4d6e:	2c3c      	cmp	r4, #60	; 0x3c
   d4d70:	d0ef      	beq.n	d4d52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d4d72:	3b20      	subs	r3, #32
   d4d74:	2b5e      	cmp	r3, #94	; 0x5e
   d4d76:	d9e1      	bls.n	d4d3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d4d78:	e7eb      	b.n	d4d52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d4d7a:	2d2f      	cmp	r5, #47	; 0x2f
   d4d7c:	d105      	bne.n	d4d8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4d7e:	461e      	mov	r6, r3
   d4d80:	f813 5b01 	ldrb.w	r5, [r3], #1
   d4d84:	2d20      	cmp	r5, #32
   d4d86:	d1f8      	bne.n	d4d7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d4d88:	e7f9      	b.n	d4d7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d4d8a:	6016      	str	r6, [r2, #0]
   d4d8c:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d4d8e:	4298      	cmp	r0, r3
   d4d90:	ebc0 0803 	rsb	r8, r0, r3
   d4d94:	d009      	beq.n	d4daa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d4d96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d4d9a:	2a2e      	cmp	r2, #46	; 0x2e
   d4d9c:	d0f7      	beq.n	d4d8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d4d9e:	2a20      	cmp	r2, #32
   d4da0:	d0f5      	beq.n	d4d8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d4da2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d4da6:	dcd4      	bgt.n	d4d52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d4da8:	e001      	b.n	d4dae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d4daa:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d4dae:	f8c1 8004 	str.w	r8, [r1, #4]
   d4db2:	f101 030c 	add.w	r3, r1, #12
   d4db6:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d4dba:	2420      	movs	r4, #32
   d4dbc:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d4dc0:	4293      	cmp	r3, r2
   d4dc2:	d1fb      	bne.n	d4dbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d4dc4:	4603      	mov	r3, r0
   d4dc6:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d4dc8:	f813 4b01 	ldrb.w	r4, [r3], #1
   d4dcc:	2c2e      	cmp	r4, #46	; 0x2e
   d4dce:	d0fa      	beq.n	d4dc6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d4dd0:	2c20      	cmp	r4, #32
   d4dd2:	d0f8      	beq.n	d4dc6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d4dd4:	fab2 f482 	clz	r4, r2
   d4dd8:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d4dda:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   d4dde:	1c73      	adds	r3, r6, #1
   d4de0:	d107      	bne.n	d4df2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d4de2:	2700      	movs	r7, #0
   d4de4:	f04f 0e07 	mov.w	lr, #7
   d4de8:	463d      	mov	r5, r7
   d4dea:	46ba      	mov	sl, r7
   d4dec:	f04f 0908 	mov.w	r9, #8
   d4df0:	e009      	b.n	d4e06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d4df2:	5d83      	ldrb	r3, [r0, r6]
   d4df4:	2b2e      	cmp	r3, #46	; 0x2e
   d4df6:	d0f4      	beq.n	d4de2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d4df8:	3e01      	subs	r6, #1
   d4dfa:	e7f0      	b.n	d4dde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d4dfc:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d4dfe:	2b20      	cmp	r3, #32
   d4e00:	d104      	bne.n	d4e0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d4e02:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d4e04:	3201      	adds	r2, #1
   d4e06:	4542      	cmp	r2, r8
   d4e08:	dbf8      	blt.n	d4dfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d4e0a:	e04b      	b.n	d4ea4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d4e0c:	2b2e      	cmp	r3, #46	; 0x2e
   d4e0e:	d102      	bne.n	d4e16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d4e10:	42b2      	cmp	r2, r6
   d4e12:	d1f6      	bne.n	d4e02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d4e14:	e003      	b.n	d4e1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d4e16:	2b22      	cmp	r3, #34	; 0x22
   d4e18:	d017      	beq.n	d4e4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d4e1a:	2b7c      	cmp	r3, #124	; 0x7c
   d4e1c:	d015      	beq.n	d4e4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d4e1e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d4e22:	f1bc 0f05 	cmp.w	ip, #5
   d4e26:	d801      	bhi.n	d4e2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d4e28:	2b2d      	cmp	r3, #45	; 0x2d
   d4e2a:	d10e      	bne.n	d4e4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d4e2c:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d4e30:	f1bc 0f05 	cmp.w	ip, #5
   d4e34:	d909      	bls.n	d4e4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d4e36:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d4e3a:	f1bc 0f02 	cmp.w	ip, #2
   d4e3e:	d904      	bls.n	d4e4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d4e40:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d4e44:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d4e48:	d902      	bls.n	d4e50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d4e4a:	42b2      	cmp	r2, r6
   d4e4c:	d10e      	bne.n	d4e6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d4e4e:	e049      	b.n	d4ee4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4e50:	42b2      	cmp	r2, r6
   d4e52:	d047      	beq.n	d4ee4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d4e54:	4575      	cmp	r5, lr
   d4e56:	d821      	bhi.n	d4e9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d4e58:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d4e5c:	f1bc 0f19 	cmp.w	ip, #25
   d4e60:	d808      	bhi.n	d4e74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d4e62:	3b20      	subs	r3, #32
   d4e64:	b2db      	uxtb	r3, r3
        lc |= bit;
   d4e66:	ea49 0707 	orr.w	r7, r9, r7
   d4e6a:	e00a      	b.n	d4e82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4e6c:	4575      	cmp	r5, lr
   d4e6e:	d815      	bhi.n	d4e9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d4e70:	2400      	movs	r4, #0
      c = '_';
   d4e72:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d4e74:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d4e78:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d4e7c:	bf98      	it	ls
   d4e7e:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d4e82:	f105 0c01 	add.w	ip, r5, #1
   d4e86:	fa5f fc8c 	uxtb.w	ip, ip
   d4e8a:	440d      	add	r5, r1
      if (i < 7) {
   d4e8c:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d4e90:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d4e92:	d801      	bhi.n	d4e98 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d4e94:	f881 c00c 	strb.w	ip, [r1, #12]
   d4e98:	4665      	mov	r5, ip
   d4e9a:	e7b3      	b.n	d4e04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4e9c:	f1be 0f0a 	cmp.w	lr, #10
   d4ea0:	d117      	bne.n	d4ed2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d4ea2:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d4ea4:	7b4b      	ldrb	r3, [r1, #13]
   d4ea6:	2b20      	cmp	r3, #32
   d4ea8:	f43f af53 	beq.w	d4d52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d4eac:	b13c      	cbz	r4, d4ebe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d4eae:	ea1a 0f07 	tst.w	sl, r7
   d4eb2:	bf18      	it	ne
   d4eb4:	2702      	movne	r7, #2
   d4eb6:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d4eb8:	2001      	movs	r0, #1
   d4eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d4ebe:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d4ec0:	2001      	movs	r0, #1
   d4ec2:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d4ec4:	4419      	add	r1, r3
   d4ec6:	237e      	movs	r3, #126	; 0x7e
   d4ec8:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d4eca:	2331      	movs	r3, #49	; 0x31
   d4ecc:	738b      	strb	r3, [r1, #14]
   d4ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d4ed2:	42b2      	cmp	r2, r6
   d4ed4:	dce5      	bgt.n	d4ea2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4ed6:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4ed8:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4edc:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4ede:	f04f 0910 	mov.w	r9, #16
   d4ee2:	e78e      	b.n	d4e02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4ee4:	f1be 0f0a 	cmp.w	lr, #10
   d4ee8:	d0db      	beq.n	d4ea2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4eea:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4eec:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4ef0:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4ef2:	f04f 0910 	mov.w	r9, #16
   d4ef6:	e785      	b.n	d4e04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d4ef8:	31000101 	.word	0x31000101

000d4efc <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4f00:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4f04:	4606      	mov	r6, r0
   d4f06:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4f08:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4f0a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4f0c:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d4f10:	6869      	ldr	r1, [r5, #4]
   d4f12:	68aa      	ldr	r2, [r5, #8]
   d4f14:	1863      	adds	r3, r4, r1
   d4f16:	b29b      	uxth	r3, r3
   d4f18:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d4f1a:	4291      	cmp	r1, r2
   d4f1c:	d006      	beq.n	d4f2c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d4f1e:	f812 0b01 	ldrb.w	r0, [r2], #1
   d4f22:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d4f26:	4043      	eors	r3, r0
   d4f28:	b29b      	uxth	r3, r3
   d4f2a:	e7f6      	b.n	d4f1a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d4f2c:	f1b9 0f03 	cmp.w	r9, #3
   d4f30:	bf28      	it	cs
   d4f32:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4f36:	f109 0204 	add.w	r2, r9, #4
   d4f3a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d4f3c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4f40:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4f42:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4f44:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4f46:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4f48:	bf94      	ite	ls
   d4f4a:	3130      	addls	r1, #48	; 0x30
   d4f4c:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4f4e:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4f50:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d4f52:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4f56:	d3f1      	bcc.n	d4f3c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4f58:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d4f5c:	2100      	movs	r1, #0
   d4f5e:	735f      	strb	r7, [r3, #13]
   d4f60:	4630      	mov	r0, r6
   d4f62:	f7ff fcbd 	bl	d48e0 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d4f66:	2101      	movs	r1, #1
   d4f68:	4630      	mov	r0, r6
   d4f6a:	f7ff fc9c 	bl	d48a6 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d4f6e:	4601      	mov	r1, r0
   d4f70:	b928      	cbnz	r0, d4f7e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d4f72:	7870      	ldrb	r0, [r6, #1]
   d4f74:	fab0 f080 	clz	r0, r0
   d4f78:	0940      	lsrs	r0, r0, #5
   d4f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d4f7e:	7803      	ldrb	r3, [r0, #0]
   d4f80:	b14b      	cbz	r3, d4f96 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4f82:	7ac3      	ldrb	r3, [r0, #11]
   d4f84:	071b      	lsls	r3, r3, #28
   d4f86:	d4ee      	bmi.n	d4f66 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4f88:	220b      	movs	r2, #11
   d4f8a:	4640      	mov	r0, r8
   d4f8c:	f003 fc76 	bl	d887c <memcmp>
   d4f90:	2800      	cmp	r0, #0
   d4f92:	d1e8      	bne.n	d4f66 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4f94:	e002      	b.n	d4f9c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d4f96:	2001      	movs	r0, #1
   d4f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4f9c:	3401      	adds	r4, #1
   d4f9e:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d4fa0:	2c64      	cmp	r4, #100	; 0x64
   d4fa2:	d1b5      	bne.n	d4f10 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d4fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4fa8 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4fac:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4fae:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4fb0:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4fb2:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4fb6:	9005      	str	r0, [sp, #20]
   d4fb8:	460e      	mov	r6, r1
   d4fba:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4fbc:	d101      	bne.n	d4fc2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d4fbe:	2000      	movs	r0, #0
   d4fc0:	e1a0      	b.n	d5304 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4fc2:	9b05      	ldr	r3, [sp, #20]
   d4fc4:	781b      	ldrb	r3, [r3, #0]
   d4fc6:	2b00      	cmp	r3, #0
   d4fc8:	d1f9      	bne.n	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d4fca:	6853      	ldr	r3, [r2, #4]
   d4fcc:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d4fce:	7813      	ldrb	r3, [r2, #0]
   d4fd0:	079b      	lsls	r3, r3, #30
   d4fd2:	f000 818d 	beq.w	d52f0 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d4fd6:	9b02      	ldr	r3, [sp, #8]
   d4fd8:	270d      	movs	r7, #13
   d4fda:	330c      	adds	r3, #12
   d4fdc:	fbb3 f7f7 	udiv	r7, r3, r7
   d4fe0:	3701      	adds	r7, #1
   d4fe2:	b2ff      	uxtb	r7, r7
   d4fe4:	2100      	movs	r1, #0
   d4fe6:	4630      	mov	r0, r6
   d4fe8:	f7ff fc7a 	bl	d48e0 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d4fec:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4ff0:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d4ff4:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d4ff8:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d4ffa:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d4ffc:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d4ffe:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5002:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5004:	6972      	ldr	r2, [r6, #20]
   d5006:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d5008:	2101      	movs	r1, #1
   d500a:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d500c:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d5010:	f7ff fc49 	bl	d48a6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5014:	9b07      	ldr	r3, [sp, #28]
   d5016:	b920      	cbnz	r0, d5022 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d5018:	7873      	ldrb	r3, [r6, #1]
   d501a:	2b00      	cmp	r3, #0
   d501c:	f000 8090 	beq.w	d5140 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d5020:	e7cd      	b.n	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d5022:	7802      	ldrb	r2, [r0, #0]
   d5024:	2ae5      	cmp	r2, #229	; 0xe5
   d5026:	d000      	beq.n	d502a <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d5028:	b942      	cbnz	r2, d503c <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d502a:	2c00      	cmp	r4, #0
   d502c:	bf08      	it	eq
   d502e:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d5030:	42bc      	cmp	r4, r7
        freeFound++;
   d5032:	bf3c      	itt	cc
   d5034:	3401      	addcc	r4, #1
   d5036:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d5038:	b922      	cbnz	r2, d5044 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d503a:	e081      	b.n	d5140 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d503c:	42bc      	cmp	r4, r7
   d503e:	bf38      	it	cc
   d5040:	2400      	movcc	r4, #0
   d5042:	e003      	b.n	d504c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5044:	2ae5      	cmp	r2, #229	; 0xe5
   d5046:	d101      	bne.n	d504c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d5048:	2500      	movs	r5, #0
   d504a:	e7db      	b.n	d5004 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d504c:	2a2e      	cmp	r2, #46	; 0x2e
   d504e:	d0fb      	beq.n	d5048 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5050:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d5052:	290f      	cmp	r1, #15
   d5054:	d152      	bne.n	d50fc <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d5056:	b93d      	cbnz	r5, d5068 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d5058:	0651      	lsls	r1, r2, #25
   d505a:	d5d3      	bpl.n	d5004 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d505c:	7b43      	ldrb	r3, [r0, #13]
   d505e:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d5060:	f002 051f 	and.w	r5, r2, #31
   d5064:	462b      	mov	r3, r5
   d5066:	e007      	b.n	d5078 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d5068:	3b01      	subs	r3, #1
   d506a:	b2db      	uxtb	r3, r3
   d506c:	429a      	cmp	r2, r3
   d506e:	d1eb      	bne.n	d5048 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5070:	7b42      	ldrb	r2, [r0, #13]
   d5072:	9903      	ldr	r1, [sp, #12]
   d5074:	4291      	cmp	r1, r2
   d5076:	d1e7      	bne.n	d5048 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d5078:	1e5a      	subs	r2, r3, #1
   d507a:	f04f 0c0d 	mov.w	ip, #13
   d507e:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d5082:	9a02      	ldr	r2, [sp, #8]
   d5084:	4562      	cmp	r2, ip
   d5086:	d9df      	bls.n	d5048 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5088:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d508c:	f1be 0f04 	cmp.w	lr, #4
   d5090:	fa5f f28e 	uxtb.w	r2, lr
   d5094:	d804      	bhi.n	d50a0 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d5096:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d509a:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d509e:	e00c      	b.n	d50ba <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d50a0:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d50a2:	bf95      	itete	ls
   d50a4:	f10e 32ff 	addls.w	r2, lr, #4294967295	; 0xffffffff
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d50a8:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d50ac:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d50b0:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d50b4:	bf94      	ite	ls
   d50b6:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d50b8:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d50ba:	9902      	ldr	r1, [sp, #8]
   d50bc:	4561      	cmp	r1, ip
   d50be:	d103      	bne.n	d50c8 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d50c0:	2a00      	cmp	r2, #0
   d50c2:	bf18      	it	ne
   d50c4:	2500      	movne	r5, #0
   d50c6:	e79d      	b.n	d5004 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d50c8:	2aff      	cmp	r2, #255	; 0xff
   d50ca:	d8bd      	bhi.n	d5048 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d50cc:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d50ce:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d50d2:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d50d4:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d50d8:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d50dc:	bf98      	it	ls
   d50de:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d50e0:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d50e4:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d50e8:	bf98      	it	ls
   d50ea:	b2d2      	uxtbls	r2, r2
   d50ec:	f1bc 0f19 	cmp.w	ip, #25
   d50f0:	bf9c      	itt	ls
   d50f2:	3120      	addls	r1, #32
   d50f4:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d50f6:	4291      	cmp	r1, r2
   d50f8:	d1a6      	bne.n	d5048 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d50fa:	e0fb      	b.n	d52f4 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d50fc:	0709      	lsls	r1, r1, #28
   d50fe:	d4a3      	bmi.n	d5048 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d5100:	b14d      	cbz	r5, d5116 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d5102:	2b01      	cmp	r3, #1
   d5104:	f47f af5b 	bne.w	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5108:	f7ff fdfc 	bl	d4d04 <_ZN7FatFile11lfnChecksumEPh>
   d510c:	9b03      	ldr	r3, [sp, #12]
   d510e:	4283      	cmp	r3, r0
   d5110:	f47f af55 	bne.w	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5114:	e00f      	b.n	d5136 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5116:	220b      	movs	r2, #11
   d5118:	9906      	ldr	r1, [sp, #24]
   d511a:	9307      	str	r3, [sp, #28]
   d511c:	f003 fbae 	bl	d887c <memcmp>
   d5120:	9b07      	ldr	r3, [sp, #28]
   d5122:	2800      	cmp	r0, #0
   d5124:	f47f af6e 	bne.w	d5004 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d5128:	f899 2000 	ldrb.w	r2, [r9]
   d512c:	07d2      	lsls	r2, r2, #31
   d512e:	d502      	bpl.n	d5136 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d5130:	2201      	movs	r2, #1
   d5132:	9204      	str	r2, [sp, #16]
   d5134:	e766      	b.n	d5004 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d5136:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d513a:	f000 80d1 	beq.w	d52e0 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d513e:	e73e      	b.n	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d5140:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d5144:	f43f af3b 	beq.w	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5148:	f00b 0303 	and.w	r3, fp, #3
   d514c:	3b01      	subs	r3, #1
   d514e:	2b01      	cmp	r3, #1
   d5150:	f63f af35 	bhi.w	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d5154:	2c00      	cmp	r4, #0
   d5156:	bf08      	it	eq
   d5158:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d515a:	42bc      	cmp	r4, r7
   d515c:	d302      	bcc.n	d5164 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d515e:	9b04      	ldr	r3, [sp, #16]
   d5160:	b9cb      	cbnz	r3, d5196 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d5162:	e01f      	b.n	d51a4 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d5164:	2100      	movs	r1, #0
   d5166:	4630      	mov	r0, r6
   d5168:	f7ff fb9d 	bl	d48a6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d516c:	b910      	cbnz	r0, d5174 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d516e:	7873      	ldrb	r3, [r6, #1]
   d5170:	b15b      	cbz	r3, d518a <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d5172:	e724      	b.n	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d5174:	3401      	adds	r4, #1
   d5176:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5178:	e7ef      	b.n	d515a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d517a:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d517c:	791b      	ldrb	r3, [r3, #4]
   d517e:	2b01      	cmp	r3, #1
   d5180:	d8ed      	bhi.n	d515e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d5182:	3410      	adds	r4, #16
   d5184:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d5186:	42a7      	cmp	r7, r4
   d5188:	d9e9      	bls.n	d515e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d518a:	4630      	mov	r0, r6
   d518c:	f7ff fa5e 	bl	d464c <_ZN7FatFile13addDirClusterEv>
   d5190:	2800      	cmp	r0, #0
   d5192:	d1f2      	bne.n	d517a <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d5194:	e713      	b.n	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d5196:	4649      	mov	r1, r9
   d5198:	4630      	mov	r0, r6
   d519a:	f7ff feaf 	bl	d4efc <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d519e:	2800      	cmp	r0, #0
   d51a0:	f43f af0d 	beq.w	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d51a4:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d51a8:	4630      	mov	r0, r6
   d51aa:	f7ff fb99 	bl	d48e0 <_ZN7FatFile7seekSetEm>
   d51ae:	2800      	cmp	r0, #0
   d51b0:	f43f af05 	beq.w	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d51b4:	1e7d      	subs	r5, r7, #1
   d51b6:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d51b8:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d51ba:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d51be:	f04f 080f 	mov.w	r8, #15
   d51c2:	e041      	b.n	d5248 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d51c4:	2100      	movs	r1, #0
   d51c6:	4630      	mov	r0, r6
   d51c8:	f7ff fb6d 	bl	d48a6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d51cc:	4607      	mov	r7, r0
   d51ce:	2800      	cmp	r0, #0
   d51d0:	f43f aef5 	beq.w	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d51d4:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d51d6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d51da:	42ac      	cmp	r4, r5
   d51dc:	f043 0301 	orr.w	r3, r3, #1
   d51e0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d51e4:	bf0c      	ite	eq
   d51e6:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d51ea:	4622      	movne	r2, r4
   d51ec:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d51ee:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d51f2:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d51f6:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d51fa:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d51fc:	f7ff fd82 	bl	d4d04 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5200:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5202:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5204:	f887 a01a 	strb.w	sl, [r7, #26]
   d5208:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d520c:	f002 021f 	and.w	r2, r2, #31
   d5210:	230d      	movs	r3, #13
   d5212:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5214:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5218:	435a      	muls	r2, r3
   d521a:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d521c:	9902      	ldr	r1, [sp, #8]
   d521e:	4291      	cmp	r1, r2
   d5220:	d915      	bls.n	d524e <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d5222:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d5226:	2b04      	cmp	r3, #4
   d5228:	fa5f fc83 	uxtb.w	ip, r3
   d522c:	f103 0001 	add.w	r0, r3, #1
   d5230:	d813      	bhi.n	d525a <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d5232:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d5236:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d523a:	280d      	cmp	r0, #13
   d523c:	f102 0201 	add.w	r2, r2, #1
   d5240:	4603      	mov	r3, r0
   d5242:	d1eb      	bne.n	d521c <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5244:	3c01      	subs	r4, #1
   d5246:	b2e4      	uxtb	r4, r4
   d5248:	2c00      	cmp	r4, #0
   d524a:	d1bb      	bne.n	d51c4 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d524c:	e00e      	b.n	d526c <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d524e:	bf14      	ite	ne
   d5250:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d5254:	2100      	moveq	r1, #0
   d5256:	b289      	uxth	r1, r1
   d5258:	e7e5      	b.n	d5226 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d525a:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d525e:	bf94      	ite	ls
   d5260:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d5264:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d5268:	8099      	strh	r1, [r3, #4]
   d526a:	e7e6      	b.n	d523a <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d526c:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d526e:	4621      	mov	r1, r4
   d5270:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5272:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d5276:	f7ff fb16 	bl	d48a6 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d527a:	4607      	mov	r7, r0
   d527c:	2800      	cmp	r0, #0
   d527e:	f43f ae9e 	beq.w	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d5282:	2220      	movs	r2, #32
   d5284:	4621      	mov	r1, r4
   d5286:	f003 fb13 	bl	d88b0 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d528a:	464b      	mov	r3, r9
   d528c:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d5290:	603a      	str	r2, [r7, #0]
   d5292:	685a      	ldr	r2, [r3, #4]
   d5294:	607a      	str	r2, [r7, #4]
   d5296:	891a      	ldrh	r2, [r3, #8]
   d5298:	813a      	strh	r2, [r7, #8]
   d529a:	7a9b      	ldrb	r3, [r3, #10]
   d529c:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d529e:	f899 3000 	ldrb.w	r3, [r9]
   d52a2:	f003 0318 	and.w	r3, r3, #24
   d52a6:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d52a8:	4b18      	ldr	r3, [pc, #96]	; (d530c <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d52aa:	681b      	ldr	r3, [r3, #0]
   d52ac:	b12b      	cbz	r3, d52ba <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d52ae:	f107 010e 	add.w	r1, r7, #14
   d52b2:	f107 0010 	add.w	r0, r7, #16
   d52b6:	4798      	blx	r3
   d52b8:	e006      	b.n	d52c8 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d52ba:	2321      	movs	r3, #33	; 0x21
   d52bc:	743b      	strb	r3, [r7, #16]
   d52be:	2328      	movs	r3, #40	; 0x28
   d52c0:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d52c2:	2308      	movs	r3, #8
   d52c4:	73bc      	strb	r4, [r7, #14]
   d52c6:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d52c8:	8a3b      	ldrh	r3, [r7, #16]
   d52ca:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d52cc:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d52ce:	89fb      	ldrh	r3, [r7, #14]
   d52d0:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d52d2:	68b2      	ldr	r2, [r6, #8]
   d52d4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d52d8:	f043 0301 	orr.w	r3, r3, #1
   d52dc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d52e0:	9500      	str	r5, [sp, #0]
   d52e2:	465b      	mov	r3, fp
   d52e4:	4652      	mov	r2, sl
   d52e6:	4631      	mov	r1, r6
   d52e8:	9805      	ldr	r0, [sp, #20]
   d52ea:	f7ff fb42 	bl	d4972 <_ZN7FatFile15openCachedEntryEPS_tih>
   d52ee:	e009      	b.n	d5304 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d52f0:	2701      	movs	r7, #1
   d52f2:	e677      	b.n	d4fe4 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d52f4:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d52f8:	f1be 0f0d 	cmp.w	lr, #13
   d52fc:	f43f ae82 	beq.w	d5004 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5300:	46d4      	mov	ip, sl
   d5302:	e6c3      	b.n	d508c <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5304:	b009      	add	sp, #36	; 0x24
   d5306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d530a:	bf00      	nop
   d530c:	2003e424 	.word	0x2003e424

000d5310 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5310:	f000 bd06 	b.w	d5d20 <HAL_Pin_Map>

000d5314 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5314:	b570      	push	{r4, r5, r6, lr}
   d5316:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5318:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d531a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d531c:	b149      	cbz	r1, d5332 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d531e:	f003 fb24 	bl	d896a <strlen>
   d5322:	682b      	ldr	r3, [r5, #0]
   d5324:	4602      	mov	r2, r0
   d5326:	4621      	mov	r1, r4
   d5328:	4628      	mov	r0, r5
   d532a:	68db      	ldr	r3, [r3, #12]
    }
   d532c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5330:	4718      	bx	r3
    }
   d5332:	bd70      	pop	{r4, r5, r6, pc}

000d5334 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5334:	f000 bcf4 	b.w	d5d20 <HAL_Pin_Map>

000d5338 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5338:	f000 bcf2 	b.w	d5d20 <HAL_Pin_Map>

000d533c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d533c:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d533e:	7803      	ldrb	r3, [r0, #0]
   d5340:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5342:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5344:	d51e      	bpl.n	d5384 <_ZN8FatCache4syncEv+0x48>
   d5346:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5348:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d534a:	f100 060c 	add.w	r6, r0, #12
   d534e:	4632      	mov	r2, r6
   d5350:	6818      	ldr	r0, [r3, #0]
   d5352:	f000 fb9b 	bl	d5a8c <_ZN9SdSpiCard10writeBlockEmPKh>
   d5356:	4605      	mov	r5, r0
   d5358:	b908      	cbnz	r0, d535e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d535a:	2500      	movs	r5, #0
   d535c:	e013      	b.n	d5386 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d535e:	7823      	ldrb	r3, [r4, #0]
   d5360:	079b      	lsls	r3, r3, #30
   d5362:	d404      	bmi.n	d536e <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5364:	7823      	ldrb	r3, [r4, #0]
   d5366:	f023 0301 	bic.w	r3, r3, #1
   d536a:	7023      	strb	r3, [r4, #0]
   d536c:	e00b      	b.n	d5386 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d536e:	6863      	ldr	r3, [r4, #4]
   d5370:	68a0      	ldr	r0, [r4, #8]
   d5372:	6919      	ldr	r1, [r3, #16]
   d5374:	4632      	mov	r2, r6
   d5376:	4401      	add	r1, r0
   d5378:	6818      	ldr	r0, [r3, #0]
   d537a:	f000 fb87 	bl	d5a8c <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d537e:	2800      	cmp	r0, #0
   d5380:	d1f0      	bne.n	d5364 <_ZN8FatCache4syncEv+0x28>
   d5382:	e7ea      	b.n	d535a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5384:	2501      	movs	r5, #1

fail:
  return false;
}
   d5386:	4628      	mov	r0, r5
   d5388:	bd70      	pop	{r4, r5, r6, pc}

000d538a <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d538a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d538c:	6883      	ldr	r3, [r0, #8]
   d538e:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5390:	4604      	mov	r4, r0
   d5392:	460e      	mov	r6, r1
   d5394:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5396:	d014      	beq.n	d53c2 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5398:	f7ff ffd0 	bl	d533c <_ZN8FatCache4syncEv>
   d539c:	b908      	cbnz	r0, d53a2 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d539e:	2000      	movs	r0, #0
   d53a0:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d53a2:	076b      	lsls	r3, r5, #29
   d53a4:	d503      	bpl.n	d53ae <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d53a6:	2300      	movs	r3, #0
   d53a8:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d53aa:	60a6      	str	r6, [r4, #8]
   d53ac:	e009      	b.n	d53c2 <_ZN8FatCache4readEmh+0x38>
   d53ae:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d53b0:	f104 020c 	add.w	r2, r4, #12
   d53b4:	4631      	mov	r1, r6
   d53b6:	6818      	ldr	r0, [r3, #0]
   d53b8:	f000 fade 	bl	d5978 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d53bc:	2800      	cmp	r0, #0
   d53be:	d1f2      	bne.n	d53a6 <_ZN8FatCache4readEmh+0x1c>
   d53c0:	e7ed      	b.n	d539e <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d53c2:	7823      	ldrb	r3, [r4, #0]
   d53c4:	4620      	mov	r0, r4
   d53c6:	f005 0503 	and.w	r5, r5, #3
   d53ca:	431d      	orrs	r5, r3
   d53cc:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d53d0:	bd70      	pop	{r4, r5, r6, pc}

000d53d2 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d53d2:	7983      	ldrb	r3, [r0, #6]
   d53d4:	6940      	ldr	r0, [r0, #20]
   d53d6:	3902      	subs	r1, #2
   d53d8:	4099      	lsls	r1, r3
}
   d53da:	4408      	add	r0, r1
   d53dc:	4770      	bx	lr

000d53de <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d53de:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d53e0:	b570      	push	{r4, r5, r6, lr}
   d53e2:	4605      	mov	r5, r0
   d53e4:	460c      	mov	r4, r1
   d53e6:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d53e8:	d802      	bhi.n	d53f0 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d53ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d53ee:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d53f0:	69c3      	ldr	r3, [r0, #28]
   d53f2:	4299      	cmp	r1, r3
   d53f4:	d8f9      	bhi.n	d53ea <_ZN9FatVolume6fatGetEmPm+0xc>
   d53f6:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d53f8:	2b20      	cmp	r3, #32
   d53fa:	d110      	bne.n	d541e <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d53fc:	6981      	ldr	r1, [r0, #24]
   d53fe:	2202      	movs	r2, #2
   d5400:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5404:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5408:	f7ff ffbf 	bl	d538a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d540c:	2800      	cmp	r0, #0
   d540e:	d0ec      	beq.n	d53ea <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5410:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5414:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5418:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d541c:	e00f      	b.n	d543e <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d541e:	2b10      	cmp	r3, #16
   d5420:	d1e3      	bne.n	d53ea <_ZN9FatVolume6fatGetEmPm+0xc>
   d5422:	6983      	ldr	r3, [r0, #24]
   d5424:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5428:	2202      	movs	r2, #2
   d542a:	4419      	add	r1, r3
   d542c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5430:	f7ff ffab 	bl	d538a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5434:	2800      	cmp	r0, #0
   d5436:	d0d8      	beq.n	d53ea <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5438:	b2e4      	uxtb	r4, r4
   d543a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d543e:	69ea      	ldr	r2, [r5, #28]
   d5440:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d5442:	bf9a      	itte	ls
   d5444:	6033      	strls	r3, [r6, #0]
  return 1;
   d5446:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5448:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d544a:	bd70      	pop	{r4, r5, r6, pc}

000d544c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d544c:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d544e:	b538      	push	{r3, r4, r5, lr}
   d5450:	460c      	mov	r4, r1
   d5452:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5454:	d801      	bhi.n	d545a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5456:	2000      	movs	r0, #0
   d5458:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d545a:	69c3      	ldr	r3, [r0, #28]
   d545c:	4299      	cmp	r1, r3
   d545e:	d8fa      	bhi.n	d5456 <_ZN9FatVolume6fatPutEmm+0xa>
   d5460:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5462:	2b20      	cmp	r3, #32
   d5464:	d10e      	bne.n	d5484 <_ZN9FatVolume6fatPutEmm+0x38>
   d5466:	6981      	ldr	r1, [r0, #24]
   d5468:	2203      	movs	r2, #3
   d546a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d546e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5472:	f7ff ff8a 	bl	d538a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5476:	2800      	cmp	r0, #0
   d5478:	d0ed      	beq.n	d5456 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d547a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d547e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d5482:	e00f      	b.n	d54a4 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d5484:	2b10      	cmp	r3, #16
   d5486:	d1e6      	bne.n	d5456 <_ZN9FatVolume6fatPutEmm+0xa>
   d5488:	6983      	ldr	r3, [r0, #24]
   d548a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d548e:	2203      	movs	r2, #3
   d5490:	4419      	add	r1, r3
   d5492:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5496:	f7ff ff78 	bl	d538a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d549a:	2800      	cmp	r0, #0
   d549c:	d0db      	beq.n	d5456 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d549e:	b2e4      	uxtb	r4, r4
   d54a0:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d54a4:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d54a6:	bd38      	pop	{r3, r4, r5, pc}

000d54a8 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d54a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d54ac:	68c4      	ldr	r4, [r0, #12]
   d54ae:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d54b0:	4605      	mov	r5, r0
   d54b2:	460e      	mov	r6, r1
   d54b4:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d54b6:	d207      	bcs.n	d54c8 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d54b8:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d54ba:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d54bc:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d54be:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d54c0:	429c      	cmp	r4, r3
   d54c2:	d903      	bls.n	d54cc <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d54c4:	b9cf      	cbnz	r7, d54fa <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d54c6:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d54c8:	2701      	movs	r7, #1
   d54ca:	e7f7      	b.n	d54bc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d54cc:	42a6      	cmp	r6, r4
   d54ce:	d014      	beq.n	d54fa <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d54d0:	aa01      	add	r2, sp, #4
   d54d2:	4621      	mov	r1, r4
   d54d4:	4628      	mov	r0, r5
   d54d6:	f7ff ff82 	bl	d53de <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d54da:	2800      	cmp	r0, #0
   d54dc:	db0d      	blt.n	d54fa <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d54de:	d0ed      	beq.n	d54bc <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d54e0:	9b01      	ldr	r3, [sp, #4]
   d54e2:	2b00      	cmp	r3, #0
   d54e4:	d1ea      	bne.n	d54bc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d54e6:	b107      	cbz	r7, d54ea <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d54e8:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d54ea:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d54ee:	4621      	mov	r1, r4
   d54f0:	4628      	mov	r0, r5
   d54f2:	f7ff ffab 	bl	d544c <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d54f6:	4607      	mov	r7, r0
   d54f8:	b908      	cbnz	r0, d54fe <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d54fa:	2700      	movs	r7, #0
   d54fc:	e00b      	b.n	d5516 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d54fe:	b916      	cbnz	r6, d5506 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5500:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5504:	e007      	b.n	d5516 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d5506:	4622      	mov	r2, r4
   d5508:	4631      	mov	r1, r6
   d550a:	4628      	mov	r0, r5
   d550c:	f7ff ff9e 	bl	d544c <_ZN9FatVolume6fatPutEmm>
   d5510:	2800      	cmp	r0, #0
   d5512:	d1f5      	bne.n	d5500 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5514:	e7f1      	b.n	d54fa <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d5516:	4638      	mov	r0, r7
   d5518:	b002      	add	sp, #8
   d551a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d551e <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d551e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5520:	4605      	mov	r5, r0
   d5522:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d5524:	aa01      	add	r2, sp, #4
   d5526:	4621      	mov	r1, r4
   d5528:	4628      	mov	r0, r5
   d552a:	f7ff ff58 	bl	d53de <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d552e:	1e06      	subs	r6, r0, #0
   d5530:	da01      	bge.n	d5536 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d5532:	2000      	movs	r0, #0
   d5534:	e00f      	b.n	d5556 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d5536:	2200      	movs	r2, #0
   d5538:	4621      	mov	r1, r4
   d553a:	4628      	mov	r0, r5
   d553c:	f7ff ff86 	bl	d544c <_ZN9FatVolume6fatPutEmm>
   d5540:	2800      	cmp	r0, #0
   d5542:	d0f6      	beq.n	d5532 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d5544:	68eb      	ldr	r3, [r5, #12]
   d5546:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d5548:	bf9c      	itt	ls
   d554a:	f104 34ff 	addls.w	r4, r4, #4294967295	; 0xffffffff
   d554e:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d5550:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d5552:	2e00      	cmp	r6, #0
   d5554:	d1e6      	bne.n	d5524 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d5556:	b002      	add	sp, #8
   d5558:	bd70      	pop	{r4, r5, r6, pc}

000d555a <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d555a:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d555c:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d555e:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5560:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d5562:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5568:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d556a:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d556c:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d556e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5572:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5574:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5578:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d557c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d5580:	b1a1      	cbz	r1, d55ac <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d5582:	2904      	cmp	r1, #4
   d5584:	d85d      	bhi.n	d5642 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5586:	4611      	mov	r1, r2
   d5588:	3024      	adds	r0, #36	; 0x24
   d558a:	f7ff fefe 	bl	d538a <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d558e:	2800      	cmp	r0, #0
   d5590:	d057      	beq.n	d5642 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d5592:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d5596:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d559a:	065b      	lsls	r3, r3, #25
   d559c:	d151      	bne.n	d5642 <_ZN9FatVolume4initEh+0xe8>
   d559e:	351b      	adds	r5, #27
   d55a0:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d55a4:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d55a8:	2d00      	cmp	r5, #0
   d55aa:	d04a      	beq.n	d5642 <_ZN9FatVolume4initEh+0xe8>
   d55ac:	2200      	movs	r2, #0
   d55ae:	4629      	mov	r1, r5
   d55b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d55b4:	f7ff fee9 	bl	d538a <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d55b8:	2800      	cmp	r0, #0
   d55ba:	d042      	beq.n	d5642 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d55bc:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d55c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d55c4:	d13d      	bne.n	d5642 <_ZN9FatVolume4initEh+0xe8>
   d55c6:	7c03      	ldrb	r3, [r0, #16]
   d55c8:	2b02      	cmp	r3, #2
   d55ca:	d13a      	bne.n	d5642 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d55cc:	89c3      	ldrh	r3, [r0, #14]
   d55ce:	2b00      	cmp	r3, #0
   d55d0:	d037      	beq.n	d5642 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d55d2:	7b41      	ldrb	r1, [r0, #13]
   d55d4:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d55d6:	1e4b      	subs	r3, r1, #1
   d55d8:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d55da:	2300      	movs	r3, #0
   d55dc:	71a3      	strb	r3, [r4, #6]
   d55de:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d55e0:	2301      	movs	r3, #1
   d55e2:	428b      	cmp	r3, r1
   d55e4:	d007      	beq.n	d55f6 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d55e6:	3e01      	subs	r6, #1
   d55e8:	d02b      	beq.n	d5642 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d55ea:	79a2      	ldrb	r2, [r4, #6]
   d55ec:	005b      	lsls	r3, r3, #1
   d55ee:	3201      	adds	r2, #1
   d55f0:	b2db      	uxtb	r3, r3
   d55f2:	71a2      	strb	r2, [r4, #6]
   d55f4:	e7f5      	b.n	d55e2 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d55f6:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d55f8:	b902      	cbnz	r2, d55fc <_ZN9FatVolume4initEh+0xa2>
   d55fa:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d55fc:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d55fe:	89c6      	ldrh	r6, [r0, #14]
   d5600:	442e      	add	r6, r5
   d5602:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d5604:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d5608:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d560a:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d560e:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d5610:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d5614:	0152      	lsls	r2, r2, #5
   d5616:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d561a:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d561e:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d5620:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d5624:	b903      	cbnz	r3, d5628 <_ZN9FatVolume4initEh+0xce>
   d5626:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d5628:	1aad      	subs	r5, r5, r2
   d562a:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d562c:	79a5      	ldrb	r5, [r4, #6]
   d562e:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d5632:	1c6b      	adds	r3, r5, #1
   d5634:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d5636:	f640 73f4 	movw	r3, #4084	; 0xff4
   d563a:	429d      	cmp	r5, r3
   d563c:	d803      	bhi.n	d5646 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d563e:	230c      	movs	r3, #12
   d5640:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d5642:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d5644:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d5646:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d564a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d564c:	bf85      	ittet	hi
   d564e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d5650:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d5652:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d5654:	2320      	movhi	r3, #32
   d5656:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d5658:	2001      	movs	r0, #1

fail:
  return false;
}
   d565a:	bd70      	pop	{r4, r5, r6, pc}

000d565c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d565c:	f000 bb60 	b.w	d5d20 <HAL_Pin_Map>

000d5660 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5660:	f000 bb5e 	b.w	d5d20 <HAL_Pin_Map>

000d5664 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5664:	f000 bb5c 	b.w	d5d20 <HAL_Pin_Map>

000d5668 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5668:	f000 bb5a 	b.w	d5d20 <HAL_Pin_Map>

000d566c <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d566c:	f000 bb58 	b.w	d5d20 <HAL_Pin_Map>

000d5670 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5670:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5672:	4c0e      	ldr	r4, [pc, #56]	; (d56ac <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5674:	460e      	mov	r6, r1
   d5676:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5678:	f000 fb32 	bl	d5ce0 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d567c:	6823      	ldr	r3, [r4, #0]
   d567e:	1ac0      	subs	r0, r0, r3
   d5680:	4b0b      	ldr	r3, [pc, #44]	; (d56b0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d5682:	4298      	cmp	r0, r3
   d5684:	d908      	bls.n	d5698 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5686:	f000 fb33 	bl	d5cf0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d568a:	4b0a      	ldr	r3, [pc, #40]	; (d56b4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d568c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d568e:	f000 fcfb 	bl	d6088 <spark_process>
   d5692:	f000 fb25 	bl	d5ce0 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d5696:	6020      	str	r0, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5698:	f000 fb2a 	bl	d5cf0 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d569c:	b280      	uxth	r0, r0
   d569e:	1b80      	subs	r0, r0, r6
}
   d56a0:	42a8      	cmp	r0, r5
   d56a2:	bfd4      	ite	le
   d56a4:	2000      	movle	r0, #0
   d56a6:	2001      	movgt	r0, #1
   d56a8:	bd70      	pop	{r4, r5, r6, pc}
   d56aa:	bf00      	nop
   d56ac:	2003e428 	.word	0x2003e428
   d56b0:	000186a0 	.word	0x000186a0
   d56b4:	2003e6d4 	.word	0x2003e6d4

000d56b8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d56b8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d56ba:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d56bc:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d56be:	b94d      	cbnz	r5, d56d4 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d56c0:	6840      	ldr	r0, [r0, #4]
   d56c2:	f000 fa7d 	bl	d5bc0 <_ZN14SdSpiAltDriver8activateEv>
   d56c6:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d56c8:	4629      	mov	r1, r5
   d56ca:	7d18      	ldrb	r0, [r3, #20]
   d56cc:	f002 f8eb 	bl	d78a6 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d56d0:	2301      	movs	r3, #1
   d56d2:	7223      	strb	r3, [r4, #8]
   d56d4:	bd38      	pop	{r3, r4, r5, pc}

000d56d6 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d56d6:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d56d8:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d56da:	4604      	mov	r4, r0
  if (m_spiActive) {
   d56dc:	b16b      	cbz	r3, d56fa <_ZN9SdSpiCard7spiStopEv+0x24>
   d56de:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d56e0:	2101      	movs	r1, #1
   d56e2:	7d18      	ldrb	r0, [r3, #20]
   d56e4:	f002 f8df 	bl	d78a6 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d56e8:	21ff      	movs	r1, #255	; 0xff
   d56ea:	6860      	ldr	r0, [r4, #4]
   d56ec:	f000 fa9a 	bl	d5c24 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d56f0:	6860      	ldr	r0, [r4, #4]
   d56f2:	f000 fa79 	bl	d5be8 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d56f6:	2300      	movs	r3, #0
   d56f8:	7223      	strb	r3, [r4, #8]
   d56fa:	bd10      	pop	{r4, pc}

000d56fc <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d56fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56fe:	4604      	mov	r4, r0
   d5700:	460d      	mov	r5, r1
   d5702:	4616      	mov	r6, r2
   d5704:	f000 faf4 	bl	d5cf0 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d5708:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d570a:	6860      	ldr	r0, [r4, #4]
   d570c:	f000 fa6f 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5710:	28ff      	cmp	r0, #255	; 0xff
   d5712:	7260      	strb	r0, [r4, #9]
   d5714:	d109      	bne.n	d572a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d5716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d571a:	4639      	mov	r1, r7
   d571c:	4620      	mov	r0, r4
   d571e:	f7ff ffa7 	bl	d5670 <_ZN9SdSpiCard10isTimedOutEtt>
   d5722:	2800      	cmp	r0, #0
   d5724:	d0f1      	beq.n	d570a <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5726:	2355      	movs	r3, #85	; 0x55
   d5728:	e00b      	b.n	d5742 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d572a:	28fe      	cmp	r0, #254	; 0xfe
   d572c:	d001      	beq.n	d5732 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d572e:	2350      	movs	r3, #80	; 0x50
   d5730:	e007      	b.n	d5742 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d5732:	4632      	mov	r2, r6
   d5734:	4629      	mov	r1, r5
   d5736:	6860      	ldr	r0, [r4, #4]
   d5738:	f000 fa5e 	bl	d5bf8 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d573c:	7260      	strb	r0, [r4, #9]
   d573e:	b130      	cbz	r0, d574e <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5740:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d5742:	4620      	mov	r0, r4
   d5744:	7023      	strb	r3, [r4, #0]
   d5746:	f7ff ffc6 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d574a:	2000      	movs	r0, #0
}
   d574c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d574e:	6860      	ldr	r0, [r4, #4]
   d5750:	f000 fa4d 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>
   d5754:	6860      	ldr	r0, [r4, #4]
   d5756:	f000 fa4a 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>
   d575a:	2001      	movs	r0, #1
   d575c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d575e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d575e:	b570      	push	{r4, r5, r6, lr}
   d5760:	4604      	mov	r4, r0
   d5762:	460e      	mov	r6, r1
   d5764:	f000 fac4 	bl	d5cf0 <HAL_Timer_Get_Milli_Seconds>
   d5768:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d576a:	4632      	mov	r2, r6
   d576c:	4629      	mov	r1, r5
   d576e:	4620      	mov	r0, r4
   d5770:	f7ff ff7e 	bl	d5670 <_ZN9SdSpiCard10isTimedOutEtt>
   d5774:	b930      	cbnz	r0, d5784 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d5776:	6860      	ldr	r0, [r4, #4]
   d5778:	f000 fa39 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d577c:	28ff      	cmp	r0, #255	; 0xff
   d577e:	d1f4      	bne.n	d576a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d5780:	2001      	movs	r0, #1
   d5782:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d5784:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d5786:	bd70      	pop	{r4, r5, r6, pc}

000d5788 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d578a:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d578c:	9201      	str	r2, [sp, #4]
   d578e:	4604      	mov	r4, r0
   d5790:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d5792:	b90b      	cbnz	r3, d5798 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d5794:	f7ff ff90 	bl	d56b8 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d5798:	b125      	cbz	r5, d57a4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d579a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d579e:	4620      	mov	r0, r4
   d57a0:	f7ff ffdd 	bl	d575e <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d57a4:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d57a8:	6860      	ldr	r0, [r4, #4]
   d57aa:	f000 fa3b 	bl	d5c24 <_ZN14SdSpiAltDriver4sendEh>
   d57ae:	f10d 0607 	add.w	r6, sp, #7
   d57b2:	f10d 0703 	add.w	r7, sp, #3
   d57b6:	f816 1901 	ldrb.w	r1, [r6], #-1
   d57ba:	6860      	ldr	r0, [r4, #4]
   d57bc:	f000 fa32 	bl	d5c24 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d57c0:	42be      	cmp	r6, r7
   d57c2:	d1f8      	bne.n	d57b6 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d57c4:	2d00      	cmp	r5, #0
   d57c6:	bf0c      	ite	eq
   d57c8:	2195      	moveq	r1, #149	; 0x95
   d57ca:	2187      	movne	r1, #135	; 0x87
   d57cc:	6860      	ldr	r0, [r4, #4]
   d57ce:	f000 fa29 	bl	d5c24 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d57d2:	6860      	ldr	r0, [r4, #4]
   d57d4:	f000 fa0b 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>
   d57d8:	250b      	movs	r5, #11
   d57da:	6860      	ldr	r0, [r4, #4]
   d57dc:	f000 fa07 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d57e0:	0603      	lsls	r3, r0, #24
   d57e2:	7260      	strb	r0, [r4, #9]
   d57e4:	d503      	bpl.n	d57ee <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d57e6:	3d01      	subs	r5, #1
   d57e8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d57ec:	d1f5      	bne.n	d57da <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d57ee:	b003      	add	sp, #12
   d57f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d57f2 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d57f2:	b570      	push	{r4, r5, r6, lr}
   d57f4:	4604      	mov	r4, r0
   d57f6:	460d      	mov	r5, r1
   d57f8:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d57fa:	2137      	movs	r1, #55	; 0x37
   d57fc:	2200      	movs	r2, #0
   d57fe:	f7ff ffc3 	bl	d5788 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d5802:	4632      	mov	r2, r6
   d5804:	4629      	mov	r1, r5
   d5806:	4620      	mov	r0, r4
  }
   d5808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d580c:	f7ff bfbc 	b.w	d5788 <_ZN9SdSpiCard11cardCommandEhm>

000d5810 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d5814:	2500      	movs	r5, #0
   d5816:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d5818:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d581a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d581c:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d581e:	4604      	mov	r4, r0
   d5820:	4690      	mov	r8, r2
   d5822:	461e      	mov	r6, r3
   d5824:	f000 fa64 	bl	d5cf0 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d5828:	4641      	mov	r1, r8
   d582a:	4607      	mov	r7, r0
   d582c:	6860      	ldr	r0, [r4, #4]
   d582e:	f000 f9cb 	bl	d5bc8 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d5832:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5834:	4a4f      	ldr	r2, [pc, #316]	; (d5974 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d5836:	721d      	strb	r5, [r3, #8]
   d5838:	f04f 0801 	mov.w	r8, #1
   d583c:	60da      	str	r2, [r3, #12]
   d583e:	745d      	strb	r5, [r3, #17]
   d5840:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d5844:	4620      	mov	r0, r4
   d5846:	f7ff ff37 	bl	d56b8 <_ZN9SdSpiCard8spiStartEv>
   d584a:	6863      	ldr	r3, [r4, #4]
   d584c:	4641      	mov	r1, r8
   d584e:	7d18      	ldrb	r0, [r3, #20]
   d5850:	f002 f829 	bl	d78a6 <digitalWrite>
   d5854:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5856:	21ff      	movs	r1, #255	; 0xff
   d5858:	6860      	ldr	r0, [r4, #4]
   d585a:	3d01      	subs	r5, #1
   d585c:	f000 f9e2 	bl	d5c24 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d5860:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5864:	d1f7      	bne.n	d5856 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d5866:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5868:	4629      	mov	r1, r5
   d586a:	7d18      	ldrb	r0, [r3, #20]
   d586c:	f002 f81b 	bl	d78a6 <digitalWrite>
   d5870:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d5872:	2200      	movs	r2, #0
   d5874:	4611      	mov	r1, r2
   d5876:	4620      	mov	r0, r4
   d5878:	f7ff ff86 	bl	d5788 <_ZN9SdSpiCard11cardCommandEhm>
   d587c:	2801      	cmp	r0, #1
   d587e:	4680      	mov	r8, r0
   d5880:	d012      	beq.n	d58a8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d5882:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d5884:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5888:	d101      	bne.n	d588e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d588a:	2320      	movs	r3, #32
   d588c:	e057      	b.n	d593e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d588e:	21fd      	movs	r1, #253	; 0xfd
   d5890:	6860      	ldr	r0, [r4, #4]
   d5892:	f000 f9c7 	bl	d5c24 <_ZN14SdSpiAltDriver4sendEh>
   d5896:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d589a:	6860      	ldr	r0, [r4, #4]
   d589c:	f000 f9a7 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d58a0:	f1b8 0801 	subs.w	r8, r8, #1
   d58a4:	d1f9      	bne.n	d589a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d58a6:	e7e4      	b.n	d5872 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d58a8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d58ac:	2108      	movs	r1, #8
   d58ae:	4620      	mov	r0, r4
   d58b0:	f7ff ff6a 	bl	d5788 <_ZN9SdSpiCard11cardCommandEhm>
   d58b4:	2805      	cmp	r0, #5
   d58b6:	d102      	bne.n	d58be <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d58b8:	f884 800a 	strb.w	r8, [r4, #10]
   d58bc:	e00f      	b.n	d58de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d58be:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d58c0:	6860      	ldr	r0, [r4, #4]
   d58c2:	f000 f994 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>
   d58c6:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d58c8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d58cc:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d58ce:	d1f7      	bne.n	d58c0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d58d0:	28aa      	cmp	r0, #170	; 0xaa
   d58d2:	d102      	bne.n	d58da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d58d4:	2302      	movs	r3, #2
   d58d6:	72a3      	strb	r3, [r4, #10]
   d58d8:	e001      	b.n	d58de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d58da:	2325      	movs	r3, #37	; 0x25
   d58dc:	e02f      	b.n	d593e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d58de:	7aa3      	ldrb	r3, [r4, #10]
   d58e0:	2b02      	cmp	r3, #2
   d58e2:	bf0c      	ite	eq
   d58e4:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d58e8:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d58ea:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d58ec:	462a      	mov	r2, r5
   d58ee:	2129      	movs	r1, #41	; 0x29
   d58f0:	4620      	mov	r0, r4
   d58f2:	f7ff ff7e 	bl	d57f2 <_ZN9SdSpiCard8cardAcmdEhm>
   d58f6:	4602      	mov	r2, r0
   d58f8:	b148      	cbz	r0, d590e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d58fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d58fe:	4639      	mov	r1, r7
   d5900:	4620      	mov	r0, r4
   d5902:	f7ff feb5 	bl	d5670 <_ZN9SdSpiCard10isTimedOutEtt>
   d5906:	2800      	cmp	r0, #0
   d5908:	d0f0      	beq.n	d58ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d590a:	2343      	movs	r3, #67	; 0x43
   d590c:	e017      	b.n	d593e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d590e:	7aa3      	ldrb	r3, [r4, #10]
   d5910:	2b02      	cmp	r3, #2
   d5912:	d00e      	beq.n	d5932 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d5914:	4620      	mov	r0, r4
   d5916:	f7ff fede 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d591a:	6863      	ldr	r3, [r4, #4]
   d591c:	68b0      	ldr	r0, [r6, #8]
   d591e:	7934      	ldrb	r4, [r6, #4]
   d5920:	7b31      	ldrb	r1, [r6, #12]
   d5922:	7b72      	ldrb	r2, [r6, #13]
   d5924:	745a      	strb	r2, [r3, #17]
   d5926:	60d8      	str	r0, [r3, #12]
   d5928:	721c      	strb	r4, [r3, #8]
   d592a:	7419      	strb	r1, [r3, #16]
  return true;
   d592c:	2001      	movs	r0, #1
   d592e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d5932:	213a      	movs	r1, #58	; 0x3a
   d5934:	4620      	mov	r0, r4
   d5936:	f7ff ff27 	bl	d5788 <_ZN9SdSpiCard11cardCommandEhm>
   d593a:	b138      	cbz	r0, d594c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d593c:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d593e:	4620      	mov	r0, r4
   d5940:	7023      	strb	r3, [r4, #0]
   d5942:	f7ff fec8 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5946:	2000      	movs	r0, #0
}
   d5948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d594c:	6860      	ldr	r0, [r4, #4]
   d594e:	f000 f94e 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d5952:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d5956:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5958:	bf04      	itt	eq
   d595a:	2303      	moveq	r3, #3
   d595c:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d595e:	6860      	ldr	r0, [r4, #4]
   d5960:	f000 f945 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>
   d5964:	6860      	ldr	r0, [r4, #4]
   d5966:	f000 f942 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>
   d596a:	6860      	ldr	r0, [r4, #4]
   d596c:	f000 f93f 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>
   d5970:	e7d0      	b.n	d5914 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d5972:	bf00      	nop
   d5974:	0003d090 	.word	0x0003d090

000d5978 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5978:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d597a:	7a83      	ldrb	r3, [r0, #10]
   d597c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d597e:	bf18      	it	ne
   d5980:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5982:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d5984:	460a      	mov	r2, r1
   d5986:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5988:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d598a:	f7ff fefd 	bl	d5788 <_ZN9SdSpiCard11cardCommandEhm>
   d598e:	b110      	cbz	r0, d5996 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5990:	2330      	movs	r3, #48	; 0x30
   d5992:	7023      	strb	r3, [r4, #0]
   d5994:	e00b      	b.n	d59ae <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d5996:	4629      	mov	r1, r5
   d5998:	f44f 7200 	mov.w	r2, #512	; 0x200
   d599c:	4620      	mov	r0, r4
   d599e:	f7ff fead 	bl	d56fc <_ZN9SdSpiCard8readDataEPhj>
   d59a2:	4605      	mov	r5, r0
   d59a4:	b118      	cbz	r0, d59ae <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d59a6:	4620      	mov	r0, r4
   d59a8:	f7ff fe95 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d59ac:	e003      	b.n	d59b6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d59ae:	4620      	mov	r0, r4
   d59b0:	f7ff fe91 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d59b4:	2500      	movs	r5, #0
}
   d59b6:	4628      	mov	r0, r5
   d59b8:	bd38      	pop	{r3, r4, r5, pc}

000d59ba <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d59ba:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d59bc:	7a83      	ldrb	r3, [r0, #10]
   d59be:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d59c0:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d59c2:	bf18      	it	ne
   d59c4:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d59c6:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d59c8:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d59ca:	f7ff fedd 	bl	d5788 <_ZN9SdSpiCard11cardCommandEhm>
   d59ce:	b130      	cbz	r0, d59de <_ZN9SdSpiCard9readStartEm+0x24>
   d59d0:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d59d2:	4620      	mov	r0, r4
   d59d4:	7023      	strb	r3, [r4, #0]
   d59d6:	f7ff fe7e 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d59da:	2000      	movs	r0, #0
   d59dc:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d59de:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d59e0:	bd10      	pop	{r4, pc}

000d59e2 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d59e2:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d59e4:	2200      	movs	r2, #0
   d59e6:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d59e8:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d59ea:	f7ff fecd 	bl	d5788 <_ZN9SdSpiCard11cardCommandEhm>
   d59ee:	b130      	cbz	r0, d59fe <_ZN9SdSpiCard8readStopEv+0x1c>
   d59f0:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d59f2:	4620      	mov	r0, r4
   d59f4:	7023      	strb	r3, [r4, #0]
   d59f6:	f7ff fe6e 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d59fa:	2000      	movs	r0, #0
   d59fc:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d59fe:	4620      	mov	r0, r4
   d5a00:	f7ff fe69 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5a04:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5a06:	bd10      	pop	{r4, pc}

000d5a08 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d5a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a0a:	4605      	mov	r5, r0
   d5a0c:	4616      	mov	r6, r2
   d5a0e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d5a10:	f7ff ffd3 	bl	d59ba <_ZN9SdSpiCard9readStartEm>
   d5a14:	b198      	cbz	r0, d5a3e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d5a16:	2400      	movs	r4, #0
   d5a18:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d5a1a:	429f      	cmp	r7, r3
   d5a1c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d5a20:	d908      	bls.n	d5a34 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d5a22:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5a26:	4628      	mov	r0, r5
   d5a28:	f7ff fe68 	bl	d56fc <_ZN9SdSpiCard8readDataEPhj>
   d5a2c:	3401      	adds	r4, #1
   d5a2e:	2800      	cmp	r0, #0
   d5a30:	d1f2      	bne.n	d5a18 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d5a32:	e004      	b.n	d5a3e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d5a34:	4628      	mov	r0, r5
}
   d5a36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d5a3a:	f7ff bfd2 	b.w	d59e2 <_ZN9SdSpiCard8readStopEv>
}
   d5a3e:	2000      	movs	r0, #0
   d5a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a42 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d5a42:	b538      	push	{r3, r4, r5, lr}
   d5a44:	4604      	mov	r4, r0
   d5a46:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5a48:	6840      	ldr	r0, [r0, #4]
   d5a4a:	f000 f8eb 	bl	d5c24 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d5a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5a52:	4629      	mov	r1, r5
   d5a54:	6860      	ldr	r0, [r4, #4]
   d5a56:	f000 f8e9 	bl	d5c2c <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5a5a:	21ff      	movs	r1, #255	; 0xff
   d5a5c:	6860      	ldr	r0, [r4, #4]
   d5a5e:	f000 f8e1 	bl	d5c24 <_ZN14SdSpiAltDriver4sendEh>
   d5a62:	21ff      	movs	r1, #255	; 0xff
   d5a64:	6860      	ldr	r0, [r4, #4]
   d5a66:	f000 f8dd 	bl	d5c24 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5a6a:	6860      	ldr	r0, [r4, #4]
   d5a6c:	f000 f8bf 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d5a70:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d5a72:	f000 001f 	and.w	r0, r0, #31
   d5a76:	2805      	cmp	r0, #5
   d5a78:	d006      	beq.n	d5a88 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5a7a:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5a7c:	4620      	mov	r0, r4
   d5a7e:	7023      	strb	r3, [r4, #0]
   d5a80:	f7ff fe29 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5a84:	2000      	movs	r0, #0
   d5a86:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d5a88:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5a8a:	bd38      	pop	{r3, r4, r5, pc}

000d5a8c <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5a8c:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5a8e:	7a83      	ldrb	r3, [r0, #10]
   d5a90:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5a92:	bf18      	it	ne
   d5a94:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5a96:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5a98:	460a      	mov	r2, r1
   d5a9a:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5a9c:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5a9e:	f7ff fe73 	bl	d5788 <_ZN9SdSpiCard11cardCommandEhm>
   d5aa2:	4606      	mov	r6, r0
   d5aa4:	b108      	cbz	r0, d5aaa <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d5aa6:	2332      	movs	r3, #50	; 0x32
   d5aa8:	e01d      	b.n	d5ae6 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d5aaa:	462a      	mov	r2, r5
   d5aac:	21fe      	movs	r1, #254	; 0xfe
   d5aae:	4620      	mov	r0, r4
   d5ab0:	f7ff ffc7 	bl	d5a42 <_ZN9SdSpiCard9writeDataEhPKh>
   d5ab4:	b1c0      	cbz	r0, d5ae8 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5ab6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d5aba:	4620      	mov	r0, r4
   d5abc:	f7ff fe4f 	bl	d575e <_ZN9SdSpiCard11waitNotBusyEt>
   d5ac0:	4605      	mov	r5, r0
   d5ac2:	b908      	cbnz	r0, d5ac8 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d5ac4:	235a      	movs	r3, #90	; 0x5a
   d5ac6:	e00e      	b.n	d5ae6 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d5ac8:	4632      	mov	r2, r6
   d5aca:	210d      	movs	r1, #13
   d5acc:	4620      	mov	r0, r4
   d5ace:	f7ff fe5b 	bl	d5788 <_ZN9SdSpiCard11cardCommandEhm>
   d5ad2:	b938      	cbnz	r0, d5ae4 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5ad4:	6860      	ldr	r0, [r4, #4]
   d5ad6:	f000 f88a 	bl	d5bee <_ZN14SdSpiAltDriver7receiveEv>
   d5ada:	b918      	cbnz	r0, d5ae4 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d5adc:	4620      	mov	r0, r4
   d5ade:	f7ff fdfa 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5ae2:	e005      	b.n	d5af0 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5ae4:	2329      	movs	r3, #41	; 0x29
   d5ae6:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d5ae8:	4620      	mov	r0, r4
   d5aea:	f7ff fdf4 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5aee:	2500      	movs	r5, #0
}
   d5af0:	4628      	mov	r0, r5
   d5af2:	bd70      	pop	{r4, r5, r6, pc}

000d5af4 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5af4:	b538      	push	{r3, r4, r5, lr}
   d5af6:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5af8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5afc:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5afe:	f7ff fe2e 	bl	d575e <_ZN9SdSpiCard11waitNotBusyEt>
   d5b02:	b910      	cbnz	r0, d5b0a <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d5b04:	235b      	movs	r3, #91	; 0x5b
   d5b06:	7023      	strb	r3, [r4, #0]
   d5b08:	e005      	b.n	d5b16 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d5b0a:	462a      	mov	r2, r5
   d5b0c:	21fc      	movs	r1, #252	; 0xfc
   d5b0e:	4620      	mov	r0, r4
   d5b10:	f7ff ff97 	bl	d5a42 <_ZN9SdSpiCard9writeDataEhPKh>
   d5b14:	b918      	cbnz	r0, d5b1e <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5b16:	4620      	mov	r0, r4
   d5b18:	f7ff fddd 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5b1c:	2000      	movs	r0, #0
}
   d5b1e:	bd38      	pop	{r3, r4, r5, pc}

000d5b20 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5b20:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5b22:	7a83      	ldrb	r3, [r0, #10]
   d5b24:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5b26:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5b28:	bf18      	it	ne
   d5b2a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5b2c:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5b2e:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5b30:	f7ff fe2a 	bl	d5788 <_ZN9SdSpiCard11cardCommandEhm>
   d5b34:	b130      	cbz	r0, d5b44 <_ZN9SdSpiCard10writeStartEm+0x24>
   d5b36:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5b38:	4620      	mov	r0, r4
   d5b3a:	7023      	strb	r3, [r4, #0]
   d5b3c:	f7ff fdcb 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5b40:	2000      	movs	r0, #0
   d5b42:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d5b44:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5b46:	bd10      	pop	{r4, pc}

000d5b48 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5b48:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5b4a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5b4e:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5b50:	f7ff fe05 	bl	d575e <_ZN9SdSpiCard11waitNotBusyEt>
   d5b54:	4605      	mov	r5, r0
   d5b56:	b120      	cbz	r0, d5b62 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5b58:	21fd      	movs	r1, #253	; 0xfd
   d5b5a:	6860      	ldr	r0, [r4, #4]
   d5b5c:	f000 f862 	bl	d5c24 <_ZN14SdSpiAltDriver4sendEh>
   d5b60:	e001      	b.n	d5b66 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5b62:	2356      	movs	r3, #86	; 0x56
   d5b64:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d5b66:	4620      	mov	r0, r4
   d5b68:	f7ff fdb5 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5b6c:	4628      	mov	r0, r5
   d5b6e:	bd38      	pop	{r3, r4, r5, pc}

000d5b70 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d5b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b72:	4605      	mov	r5, r0
   d5b74:	4616      	mov	r6, r2
   d5b76:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d5b78:	f7ff ffd2 	bl	d5b20 <_ZN9SdSpiCard10writeStartEm>
   d5b7c:	b170      	cbz	r0, d5b9c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d5b7e:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5b80:	42bc      	cmp	r4, r7
   d5b82:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5b86:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5b88:	d004      	beq.n	d5b94 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d5b8a:	f7ff ffb3 	bl	d5af4 <_ZN9SdSpiCard9writeDataEPKh>
   d5b8e:	b128      	cbz	r0, d5b9c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5b90:	3401      	adds	r4, #1
   d5b92:	e7f5      	b.n	d5b80 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d5b94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5b98:	f7ff bfd6 	b.w	d5b48 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d5b9c:	4628      	mov	r0, r5
   d5b9e:	f7ff fd9a 	bl	d56d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5ba2:	2000      	movs	r0, #0
   d5ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ba6 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d5ba6:	f000 b8bb 	b.w	d5d20 <HAL_Pin_Map>

000d5baa <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d5baa:	f000 b8b9 	b.w	d5d20 <HAL_Pin_Map>

000d5bae <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d5bae:	f000 b8b7 	b.w	d5d20 <HAL_Pin_Map>
	...

000d5bb4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d5bb4:	4b01      	ldr	r3, [pc, #4]	; (d5bbc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d5bb6:	2201      	movs	r2, #1
   d5bb8:	701a      	strb	r2, [r3, #0]
   d5bba:	4770      	bx	lr
   d5bbc:	2003e42c 	.word	0x2003e42c

000d5bc0 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d5bc0:	1d01      	adds	r1, r0, #4
   d5bc2:	6800      	ldr	r0, [r0, #0]
   d5bc4:	f001 bb80 	b.w	d72c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d5bc8 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d5bc8:	b510      	push	{r4, lr}
   d5bca:	4604      	mov	r4, r0
  m_csPin = csPin;
   d5bcc:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d5bce:	6800      	ldr	r0, [r0, #0]
   d5bd0:	f001 fb5c 	bl	d728c <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d5bd4:	7d20      	ldrb	r0, [r4, #20]
   d5bd6:	2101      	movs	r1, #1
   d5bd8:	f001 fe54 	bl	d7884 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d5bdc:	7d20      	ldrb	r0, [r4, #20]
   d5bde:	2101      	movs	r1, #1
}
   d5be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d5be4:	f001 be5f 	b.w	d78a6 <digitalWrite>

000d5be8 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5be8:	6800      	ldr	r0, [r0, #0]
   d5bea:	f001 bb54 	b.w	d7296 <_ZN8SPIClass14endTransactionEv>

000d5bee <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d5bee:	21ff      	movs	r1, #255	; 0xff
   d5bf0:	6800      	ldr	r0, [r0, #0]
   d5bf2:	f001 bbd9 	b.w	d73a8 <_ZN8SPIClass8transferEh>
	...

000d5bf8 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5bfa:	4b08      	ldr	r3, [pc, #32]	; (d5c1c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d5bfc:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5bfe:	2500      	movs	r5, #0
   d5c00:	4c07      	ldr	r4, [pc, #28]	; (d5c20 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5c02:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5c04:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5c06:	4613      	mov	r3, r2
   d5c08:	460a      	mov	r2, r1
   d5c0a:	4629      	mov	r1, r5
   d5c0c:	f001 fbd2 	bl	d73b4 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5c10:	7823      	ldrb	r3, [r4, #0]
   d5c12:	2b00      	cmp	r3, #0
   d5c14:	d0fc      	beq.n	d5c10 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5c16:	2000      	movs	r0, #0
   d5c18:	b003      	add	sp, #12
   d5c1a:	bd30      	pop	{r4, r5, pc}
   d5c1c:	000d5bb5 	.word	0x000d5bb5
   d5c20:	2003e42c 	.word	0x2003e42c

000d5c24 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d5c24:	6800      	ldr	r0, [r0, #0]
   d5c26:	f001 bbbf 	b.w	d73a8 <_ZN8SPIClass8transferEh>
	...

000d5c2c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d5c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5c2e:	4b07      	ldr	r3, [pc, #28]	; (d5c4c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d5c30:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5c32:	2500      	movs	r5, #0
   d5c34:	4c06      	ldr	r4, [pc, #24]	; (d5c50 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5c36:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5c38:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5c3a:	4613      	mov	r3, r2
   d5c3c:	462a      	mov	r2, r5
   d5c3e:	f001 fbb9 	bl	d73b4 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d5c42:	7823      	ldrb	r3, [r4, #0]
   d5c44:	2b00      	cmp	r3, #0
   d5c46:	d0fc      	beq.n	d5c42 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5c48:	b003      	add	sp, #12
   d5c4a:	bd30      	pop	{r4, r5, pc}
   d5c4c:	000d5bb5 	.word	0x000d5bb5
   d5c50:	2003e42c 	.word	0x2003e42c

000d5c54 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d5c54:	f000 b864 	b.w	d5d20 <HAL_Pin_Map>

000d5c58 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d5c58:	f000 b862 	b.w	d5d20 <HAL_Pin_Map>

000d5c5c <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d5c5c:	f000 b860 	b.w	d5d20 <HAL_Pin_Map>

000d5c60 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5c60:	b508      	push	{r3, lr}
   d5c62:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <os_thread_is_current+0xc>)
   d5c64:	681b      	ldr	r3, [r3, #0]
   d5c66:	689b      	ldr	r3, [r3, #8]
   d5c68:	9301      	str	r3, [sp, #4]
   d5c6a:	bd08      	pop	{r3, pc}
   d5c6c:	00030248 	.word	0x00030248

000d5c70 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b02      	ldr	r3, [pc, #8]	; (d5c7c <os_thread_join+0xc>)
   d5c74:	681b      	ldr	r3, [r3, #0]
   d5c76:	691b      	ldr	r3, [r3, #16]
   d5c78:	9301      	str	r3, [sp, #4]
   d5c7a:	bd08      	pop	{r3, pc}
   d5c7c:	00030248 	.word	0x00030248

000d5c80 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <os_thread_cleanup+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	695b      	ldr	r3, [r3, #20]
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	00030248 	.word	0x00030248

000d5c90 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <os_mutex_create+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	00030248 	.word	0x00030248

000d5ca0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <os_mutex_lock+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	00030248 	.word	0x00030248

000d5cb0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <os_mutex_unlock+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	00030248 	.word	0x00030248

000d5cc0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <os_mutex_recursive_create+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	00030248 	.word	0x00030248

000d5cd0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <HAL_RNG_GetRandomNumber+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	685b      	ldr	r3, [r3, #4]
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	00030218 	.word	0x00030218

000d5ce0 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	691b      	ldr	r3, [r3, #16]
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	00030218 	.word	0x00030218

000d5cf0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	695b      	ldr	r3, [r3, #20]
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	00030218 	.word	0x00030218

000d5d00 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <HAL_RTC_Get_UnixTime+0xc>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	69db      	ldr	r3, [r3, #28]
   d5d08:	9301      	str	r3, [sp, #4]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	00030218 	.word	0x00030218

000d5d10 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5d10:	b508      	push	{r3, lr}
   d5d12:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <HAL_RTC_Time_Is_Valid+0xc>)
   d5d14:	681b      	ldr	r3, [r3, #0]
   d5d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5d18:	9301      	str	r3, [sp, #4]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	00030218 	.word	0x00030218

000d5d20 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <HAL_Pin_Map+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	681b      	ldr	r3, [r3, #0]
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	0003022c 	.word	0x0003022c

000d5d30 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5d30:	b508      	push	{r3, lr}
   d5d32:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <HAL_Validate_Pin_Function+0xc>)
   d5d34:	681b      	ldr	r3, [r3, #0]
   d5d36:	685b      	ldr	r3, [r3, #4]
   d5d38:	9301      	str	r3, [sp, #4]
   d5d3a:	bd08      	pop	{r3, pc}
   d5d3c:	0003022c 	.word	0x0003022c

000d5d40 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5d40:	b508      	push	{r3, lr}
   d5d42:	4b02      	ldr	r3, [pc, #8]	; (d5d4c <HAL_Pin_Mode+0xc>)
   d5d44:	681b      	ldr	r3, [r3, #0]
   d5d46:	689b      	ldr	r3, [r3, #8]
   d5d48:	9301      	str	r3, [sp, #4]
   d5d4a:	bd08      	pop	{r3, pc}
   d5d4c:	0003022c 	.word	0x0003022c

000d5d50 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5d50:	b508      	push	{r3, lr}
   d5d52:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <HAL_Get_Pin_Mode+0xc>)
   d5d54:	681b      	ldr	r3, [r3, #0]
   d5d56:	68db      	ldr	r3, [r3, #12]
   d5d58:	9301      	str	r3, [sp, #4]
   d5d5a:	bd08      	pop	{r3, pc}
   d5d5c:	0003022c 	.word	0x0003022c

000d5d60 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5d60:	b508      	push	{r3, lr}
   d5d62:	4b02      	ldr	r3, [pc, #8]	; (d5d6c <HAL_GPIO_Write+0xc>)
   d5d64:	681b      	ldr	r3, [r3, #0]
   d5d66:	691b      	ldr	r3, [r3, #16]
   d5d68:	9301      	str	r3, [sp, #4]
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	0003022c 	.word	0x0003022c

000d5d70 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5d70:	b508      	push	{r3, lr}
   d5d72:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <HAL_ADC_Read+0xc>)
   d5d74:	681b      	ldr	r3, [r3, #0]
   d5d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d78:	9301      	str	r3, [sp, #4]
   d5d7a:	bd08      	pop	{r3, pc}
   d5d7c:	0003022c 	.word	0x0003022c

000d5d80 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <HAL_I2C_Request_Data+0xc>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	695b      	ldr	r3, [r3, #20]
   d5d88:	9301      	str	r3, [sp, #4]
   d5d8a:	bd08      	pop	{r3, pc}
   d5d8c:	00030228 	.word	0x00030228

000d5d90 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4b02      	ldr	r3, [pc, #8]	; (d5d9c <HAL_I2C_Begin_Transmission+0xc>)
   d5d94:	681b      	ldr	r3, [r3, #0]
   d5d96:	699b      	ldr	r3, [r3, #24]
   d5d98:	9301      	str	r3, [sp, #4]
   d5d9a:	bd08      	pop	{r3, pc}
   d5d9c:	00030228 	.word	0x00030228

000d5da0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5da0:	b508      	push	{r3, lr}
   d5da2:	4b02      	ldr	r3, [pc, #8]	; (d5dac <HAL_I2C_End_Transmission+0xc>)
   d5da4:	681b      	ldr	r3, [r3, #0]
   d5da6:	69db      	ldr	r3, [r3, #28]
   d5da8:	9301      	str	r3, [sp, #4]
   d5daa:	bd08      	pop	{r3, pc}
   d5dac:	00030228 	.word	0x00030228

000d5db0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5db0:	b508      	push	{r3, lr}
   d5db2:	4b02      	ldr	r3, [pc, #8]	; (d5dbc <HAL_I2C_Write_Data+0xc>)
   d5db4:	681b      	ldr	r3, [r3, #0]
   d5db6:	6a1b      	ldr	r3, [r3, #32]
   d5db8:	9301      	str	r3, [sp, #4]
   d5dba:	bd08      	pop	{r3, pc}
   d5dbc:	00030228 	.word	0x00030228

000d5dc0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5dc0:	b508      	push	{r3, lr}
   d5dc2:	4b02      	ldr	r3, [pc, #8]	; (d5dcc <HAL_I2C_Available_Data+0xc>)
   d5dc4:	681b      	ldr	r3, [r3, #0]
   d5dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5dc8:	9301      	str	r3, [sp, #4]
   d5dca:	bd08      	pop	{r3, pc}
   d5dcc:	00030228 	.word	0x00030228

000d5dd0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5dd0:	b508      	push	{r3, lr}
   d5dd2:	4b02      	ldr	r3, [pc, #8]	; (d5ddc <HAL_I2C_Read_Data+0xc>)
   d5dd4:	681b      	ldr	r3, [r3, #0]
   d5dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5dd8:	9301      	str	r3, [sp, #4]
   d5dda:	bd08      	pop	{r3, pc}
   d5ddc:	00030228 	.word	0x00030228

000d5de0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5de0:	b508      	push	{r3, lr}
   d5de2:	4b02      	ldr	r3, [pc, #8]	; (d5dec <HAL_I2C_Peek_Data+0xc>)
   d5de4:	681b      	ldr	r3, [r3, #0]
   d5de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5de8:	9301      	str	r3, [sp, #4]
   d5dea:	bd08      	pop	{r3, pc}
   d5dec:	00030228 	.word	0x00030228

000d5df0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5df0:	b508      	push	{r3, lr}
   d5df2:	4b02      	ldr	r3, [pc, #8]	; (d5dfc <HAL_I2C_Flush_Data+0xc>)
   d5df4:	681b      	ldr	r3, [r3, #0]
   d5df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5df8:	9301      	str	r3, [sp, #4]
   d5dfa:	bd08      	pop	{r3, pc}
   d5dfc:	00030228 	.word	0x00030228

000d5e00 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5e00:	b508      	push	{r3, lr}
   d5e02:	4b02      	ldr	r3, [pc, #8]	; (d5e0c <HAL_I2C_Is_Enabled+0xc>)
   d5e04:	681b      	ldr	r3, [r3, #0]
   d5e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e08:	9301      	str	r3, [sp, #4]
   d5e0a:	bd08      	pop	{r3, pc}
   d5e0c:	00030228 	.word	0x00030228

000d5e10 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5e10:	b508      	push	{r3, lr}
   d5e12:	4b02      	ldr	r3, [pc, #8]	; (d5e1c <HAL_I2C_Init+0xc>)
   d5e14:	681b      	ldr	r3, [r3, #0]
   d5e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5e18:	9301      	str	r3, [sp, #4]
   d5e1a:	bd08      	pop	{r3, pc}
   d5e1c:	00030228 	.word	0x00030228

000d5e20 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d5e20:	b508      	push	{r3, lr}
   d5e22:	4b02      	ldr	r3, [pc, #8]	; (d5e2c <HAL_I2C_Acquire+0xc>)
   d5e24:	681b      	ldr	r3, [r3, #0]
   d5e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5e28:	9301      	str	r3, [sp, #4]
   d5e2a:	bd08      	pop	{r3, pc}
   d5e2c:	00030228 	.word	0x00030228

000d5e30 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d5e30:	b508      	push	{r3, lr}
   d5e32:	4b02      	ldr	r3, [pc, #8]	; (d5e3c <HAL_I2C_Release+0xc>)
   d5e34:	681b      	ldr	r3, [r3, #0]
   d5e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5e38:	9301      	str	r3, [sp, #4]
   d5e3a:	bd08      	pop	{r3, pc}
   d5e3c:	00030228 	.word	0x00030228

000d5e40 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5e40:	b508      	push	{r3, lr}
   d5e42:	4b02      	ldr	r3, [pc, #8]	; (d5e4c <inet_inet_ntop+0xc>)
   d5e44:	681b      	ldr	r3, [r3, #0]
   d5e46:	695b      	ldr	r3, [r3, #20]
   d5e48:	9301      	str	r3, [sp, #4]
   d5e4a:	bd08      	pop	{r3, pc}
   d5e4c:	00030264 	.word	0x00030264

000d5e50 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5e50:	b508      	push	{r3, lr}
   d5e52:	4b02      	ldr	r3, [pc, #8]	; (d5e5c <netdb_freeaddrinfo+0xc>)
   d5e54:	681b      	ldr	r3, [r3, #0]
   d5e56:	689b      	ldr	r3, [r3, #8]
   d5e58:	9301      	str	r3, [sp, #4]
   d5e5a:	bd08      	pop	{r3, pc}
   d5e5c:	00030268 	.word	0x00030268

000d5e60 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5e60:	b508      	push	{r3, lr}
   d5e62:	4b02      	ldr	r3, [pc, #8]	; (d5e6c <netdb_getaddrinfo+0xc>)
   d5e64:	681b      	ldr	r3, [r3, #0]
   d5e66:	68db      	ldr	r3, [r3, #12]
   d5e68:	9301      	str	r3, [sp, #4]
   d5e6a:	bd08      	pop	{r3, pc}
   d5e6c:	00030268 	.word	0x00030268

000d5e70 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5e70:	b508      	push	{r3, lr}
   d5e72:	4b02      	ldr	r3, [pc, #8]	; (d5e7c <HAL_SPI_Begin+0xc>)
   d5e74:	681b      	ldr	r3, [r3, #0]
   d5e76:	681b      	ldr	r3, [r3, #0]
   d5e78:	9301      	str	r3, [sp, #4]
   d5e7a:	bd08      	pop	{r3, pc}
   d5e7c:	00030230 	.word	0x00030230

000d5e80 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5e80:	b508      	push	{r3, lr}
   d5e82:	4b02      	ldr	r3, [pc, #8]	; (d5e8c <HAL_SPI_Send_Receive_Data+0xc>)
   d5e84:	681b      	ldr	r3, [r3, #0]
   d5e86:	695b      	ldr	r3, [r3, #20]
   d5e88:	9301      	str	r3, [sp, #4]
   d5e8a:	bd08      	pop	{r3, pc}
   d5e8c:	00030230 	.word	0x00030230

000d5e90 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5e90:	b508      	push	{r3, lr}
   d5e92:	4b02      	ldr	r3, [pc, #8]	; (d5e9c <HAL_SPI_Init+0xc>)
   d5e94:	681b      	ldr	r3, [r3, #0]
   d5e96:	69db      	ldr	r3, [r3, #28]
   d5e98:	9301      	str	r3, [sp, #4]
   d5e9a:	bd08      	pop	{r3, pc}
   d5e9c:	00030230 	.word	0x00030230

000d5ea0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5ea0:	b508      	push	{r3, lr}
   d5ea2:	4b02      	ldr	r3, [pc, #8]	; (d5eac <HAL_SPI_Is_Enabled+0xc>)
   d5ea4:	681b      	ldr	r3, [r3, #0]
   d5ea6:	6a1b      	ldr	r3, [r3, #32]
   d5ea8:	9301      	str	r3, [sp, #4]
   d5eaa:	bd08      	pop	{r3, pc}
   d5eac:	00030230 	.word	0x00030230

000d5eb0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5eb0:	b508      	push	{r3, lr}
   d5eb2:	4b02      	ldr	r3, [pc, #8]	; (d5ebc <HAL_SPI_Info+0xc>)
   d5eb4:	681b      	ldr	r3, [r3, #0]
   d5eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5eb8:	9301      	str	r3, [sp, #4]
   d5eba:	bd08      	pop	{r3, pc}
   d5ebc:	00030230 	.word	0x00030230

000d5ec0 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d5ec0:	b508      	push	{r3, lr}
   d5ec2:	4b02      	ldr	r3, [pc, #8]	; (d5ecc <HAL_SPI_DMA_Transfer+0xc>)
   d5ec4:	681b      	ldr	r3, [r3, #0]
   d5ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ec8:	9301      	str	r3, [sp, #4]
   d5eca:	bd08      	pop	{r3, pc}
   d5ecc:	00030230 	.word	0x00030230

000d5ed0 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d5ed0:	b508      	push	{r3, lr}
   d5ed2:	4b02      	ldr	r3, [pc, #8]	; (d5edc <HAL_SPI_DMA_Transfer_Status+0xc>)
   d5ed4:	681b      	ldr	r3, [r3, #0]
   d5ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5ed8:	9301      	str	r3, [sp, #4]
   d5eda:	bd08      	pop	{r3, pc}
   d5edc:	00030230 	.word	0x00030230

000d5ee0 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5ee0:	b508      	push	{r3, lr}
   d5ee2:	4b02      	ldr	r3, [pc, #8]	; (d5eec <HAL_SPI_Set_Settings+0xc>)
   d5ee4:	681b      	ldr	r3, [r3, #0]
   d5ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5ee8:	9301      	str	r3, [sp, #4]
   d5eea:	bd08      	pop	{r3, pc}
   d5eec:	00030230 	.word	0x00030230

000d5ef0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5ef0:	b508      	push	{r3, lr}
   d5ef2:	4b02      	ldr	r3, [pc, #8]	; (d5efc <HAL_USART_Init+0xc>)
   d5ef4:	681b      	ldr	r3, [r3, #0]
   d5ef6:	681b      	ldr	r3, [r3, #0]
   d5ef8:	9301      	str	r3, [sp, #4]
   d5efa:	bd08      	pop	{r3, pc}
   d5efc:	0003023c 	.word	0x0003023c

000d5f00 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5f00:	b508      	push	{r3, lr}
   d5f02:	4b02      	ldr	r3, [pc, #8]	; (d5f0c <HAL_USART_Write_Data+0xc>)
   d5f04:	681b      	ldr	r3, [r3, #0]
   d5f06:	68db      	ldr	r3, [r3, #12]
   d5f08:	9301      	str	r3, [sp, #4]
   d5f0a:	bd08      	pop	{r3, pc}
   d5f0c:	0003023c 	.word	0x0003023c

000d5f10 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5f10:	b508      	push	{r3, lr}
   d5f12:	4b02      	ldr	r3, [pc, #8]	; (d5f1c <HAL_USART_Available_Data+0xc>)
   d5f14:	681b      	ldr	r3, [r3, #0]
   d5f16:	691b      	ldr	r3, [r3, #16]
   d5f18:	9301      	str	r3, [sp, #4]
   d5f1a:	bd08      	pop	{r3, pc}
   d5f1c:	0003023c 	.word	0x0003023c

000d5f20 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5f20:	b508      	push	{r3, lr}
   d5f22:	4b02      	ldr	r3, [pc, #8]	; (d5f2c <HAL_USART_Read_Data+0xc>)
   d5f24:	681b      	ldr	r3, [r3, #0]
   d5f26:	695b      	ldr	r3, [r3, #20]
   d5f28:	9301      	str	r3, [sp, #4]
   d5f2a:	bd08      	pop	{r3, pc}
   d5f2c:	0003023c 	.word	0x0003023c

000d5f30 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5f30:	b508      	push	{r3, lr}
   d5f32:	4b02      	ldr	r3, [pc, #8]	; (d5f3c <HAL_USART_Peek_Data+0xc>)
   d5f34:	681b      	ldr	r3, [r3, #0]
   d5f36:	699b      	ldr	r3, [r3, #24]
   d5f38:	9301      	str	r3, [sp, #4]
   d5f3a:	bd08      	pop	{r3, pc}
   d5f3c:	0003023c 	.word	0x0003023c

000d5f40 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5f40:	b508      	push	{r3, lr}
   d5f42:	4b02      	ldr	r3, [pc, #8]	; (d5f4c <HAL_USART_Flush_Data+0xc>)
   d5f44:	681b      	ldr	r3, [r3, #0]
   d5f46:	69db      	ldr	r3, [r3, #28]
   d5f48:	9301      	str	r3, [sp, #4]
   d5f4a:	bd08      	pop	{r3, pc}
   d5f4c:	0003023c 	.word	0x0003023c

000d5f50 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5f50:	b508      	push	{r3, lr}
   d5f52:	4b02      	ldr	r3, [pc, #8]	; (d5f5c <HAL_USART_Is_Enabled+0xc>)
   d5f54:	681b      	ldr	r3, [r3, #0]
   d5f56:	6a1b      	ldr	r3, [r3, #32]
   d5f58:	9301      	str	r3, [sp, #4]
   d5f5a:	bd08      	pop	{r3, pc}
   d5f5c:	0003023c 	.word	0x0003023c

000d5f60 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5f60:	b508      	push	{r3, lr}
   d5f62:	4b02      	ldr	r3, [pc, #8]	; (d5f6c <HAL_USART_Available_Data_For_Write+0xc>)
   d5f64:	681b      	ldr	r3, [r3, #0]
   d5f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f68:	9301      	str	r3, [sp, #4]
   d5f6a:	bd08      	pop	{r3, pc}
   d5f6c:	0003023c 	.word	0x0003023c

000d5f70 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5f70:	b508      	push	{r3, lr}
   d5f72:	4b02      	ldr	r3, [pc, #8]	; (d5f7c <HAL_USB_USART_Init+0xc>)
   d5f74:	681b      	ldr	r3, [r3, #0]
   d5f76:	681b      	ldr	r3, [r3, #0]
   d5f78:	9301      	str	r3, [sp, #4]
   d5f7a:	bd08      	pop	{r3, pc}
   d5f7c:	0003024c 	.word	0x0003024c

000d5f80 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5f80:	b508      	push	{r3, lr}
   d5f82:	4b02      	ldr	r3, [pc, #8]	; (d5f8c <HAL_USB_USART_Begin+0xc>)
   d5f84:	681b      	ldr	r3, [r3, #0]
   d5f86:	685b      	ldr	r3, [r3, #4]
   d5f88:	9301      	str	r3, [sp, #4]
   d5f8a:	bd08      	pop	{r3, pc}
   d5f8c:	0003024c 	.word	0x0003024c

000d5f90 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5f90:	b508      	push	{r3, lr}
   d5f92:	4b02      	ldr	r3, [pc, #8]	; (d5f9c <HAL_USB_USART_Available_Data+0xc>)
   d5f94:	681b      	ldr	r3, [r3, #0]
   d5f96:	691b      	ldr	r3, [r3, #16]
   d5f98:	9301      	str	r3, [sp, #4]
   d5f9a:	bd08      	pop	{r3, pc}
   d5f9c:	0003024c 	.word	0x0003024c

000d5fa0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5fa0:	b508      	push	{r3, lr}
   d5fa2:	4b02      	ldr	r3, [pc, #8]	; (d5fac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5fa4:	681b      	ldr	r3, [r3, #0]
   d5fa6:	695b      	ldr	r3, [r3, #20]
   d5fa8:	9301      	str	r3, [sp, #4]
   d5faa:	bd08      	pop	{r3, pc}
   d5fac:	0003024c 	.word	0x0003024c

000d5fb0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5fb0:	b508      	push	{r3, lr}
   d5fb2:	4b02      	ldr	r3, [pc, #8]	; (d5fbc <HAL_USB_USART_Receive_Data+0xc>)
   d5fb4:	681b      	ldr	r3, [r3, #0]
   d5fb6:	699b      	ldr	r3, [r3, #24]
   d5fb8:	9301      	str	r3, [sp, #4]
   d5fba:	bd08      	pop	{r3, pc}
   d5fbc:	0003024c 	.word	0x0003024c

000d5fc0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5fc0:	b508      	push	{r3, lr}
   d5fc2:	4b02      	ldr	r3, [pc, #8]	; (d5fcc <HAL_USB_USART_Send_Data+0xc>)
   d5fc4:	681b      	ldr	r3, [r3, #0]
   d5fc6:	69db      	ldr	r3, [r3, #28]
   d5fc8:	9301      	str	r3, [sp, #4]
   d5fca:	bd08      	pop	{r3, pc}
   d5fcc:	0003024c 	.word	0x0003024c

000d5fd0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5fd0:	b508      	push	{r3, lr}
   d5fd2:	4b02      	ldr	r3, [pc, #8]	; (d5fdc <HAL_USB_USART_Flush_Data+0xc>)
   d5fd4:	681b      	ldr	r3, [r3, #0]
   d5fd6:	6a1b      	ldr	r3, [r3, #32]
   d5fd8:	9301      	str	r3, [sp, #4]
   d5fda:	bd08      	pop	{r3, pc}
   d5fdc:	0003024c 	.word	0x0003024c

000d5fe0 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5fe0:	b508      	push	{r3, lr}
   d5fe2:	4b02      	ldr	r3, [pc, #8]	; (d5fec <system_mode+0xc>)
   d5fe4:	681b      	ldr	r3, [r3, #0]
   d5fe6:	681b      	ldr	r3, [r3, #0]
   d5fe8:	9301      	str	r3, [sp, #4]
   d5fea:	bd08      	pop	{r3, pc}
   d5fec:	00030220 	.word	0x00030220

000d5ff0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5ff0:	b508      	push	{r3, lr}
   d5ff2:	4b02      	ldr	r3, [pc, #8]	; (d5ffc <set_system_mode+0xc>)
   d5ff4:	681b      	ldr	r3, [r3, #0]
   d5ff6:	685b      	ldr	r3, [r3, #4]
   d5ff8:	9301      	str	r3, [sp, #4]
   d5ffa:	bd08      	pop	{r3, pc}
   d5ffc:	00030220 	.word	0x00030220

000d6000 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6000:	b508      	push	{r3, lr}
   d6002:	4b02      	ldr	r3, [pc, #8]	; (d600c <system_delay_ms+0xc>)
   d6004:	681b      	ldr	r3, [r3, #0]
   d6006:	695b      	ldr	r3, [r3, #20]
   d6008:	9301      	str	r3, [sp, #4]
   d600a:	bd08      	pop	{r3, pc}
   d600c:	00030220 	.word	0x00030220

000d6010 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d6010:	b508      	push	{r3, lr}
   d6012:	4b02      	ldr	r3, [pc, #8]	; (d601c <system_sleep+0xc>)
   d6014:	681b      	ldr	r3, [r3, #0]
   d6016:	699b      	ldr	r3, [r3, #24]
   d6018:	9301      	str	r3, [sp, #4]
   d601a:	bd08      	pop	{r3, pc}
   d601c:	00030220 	.word	0x00030220

000d6020 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6020:	b508      	push	{r3, lr}
   d6022:	4b02      	ldr	r3, [pc, #8]	; (d602c <system_thread_set_state+0xc>)
   d6024:	681b      	ldr	r3, [r3, #0]
   d6026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6028:	9301      	str	r3, [sp, #4]
   d602a:	bd08      	pop	{r3, pc}
   d602c:	00030220 	.word	0x00030220

000d6030 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6030:	b508      	push	{r3, lr}
   d6032:	4b02      	ldr	r3, [pc, #8]	; (d603c <application_thread_current+0xc>)
   d6034:	681b      	ldr	r3, [r3, #0]
   d6036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6038:	9301      	str	r3, [sp, #4]
   d603a:	bd08      	pop	{r3, pc}
   d603c:	00030220 	.word	0x00030220

000d6040 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6040:	b508      	push	{r3, lr}
   d6042:	4b02      	ldr	r3, [pc, #8]	; (d604c <application_thread_invoke+0xc>)
   d6044:	681b      	ldr	r3, [r3, #0]
   d6046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6048:	9301      	str	r3, [sp, #4]
   d604a:	bd08      	pop	{r3, pc}
   d604c:	00030220 	.word	0x00030220

000d6050 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6050:	b508      	push	{r3, lr}
   d6052:	4b02      	ldr	r3, [pc, #8]	; (d605c <system_thread_get_state+0xc>)
   d6054:	681b      	ldr	r3, [r3, #0]
   d6056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6058:	9301      	str	r3, [sp, #4]
   d605a:	bd08      	pop	{r3, pc}
   d605c:	00030220 	.word	0x00030220

000d6060 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6060:	b508      	push	{r3, lr}
   d6062:	4b03      	ldr	r3, [pc, #12]	; (d6070 <system_ctrl_set_app_request_handler+0x10>)
   d6064:	681b      	ldr	r3, [r3, #0]
   d6066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d606a:	9301      	str	r3, [sp, #4]
   d606c:	bd08      	pop	{r3, pc}
   d606e:	0000      	.short	0x0000
   d6070:	00030220 	.word	0x00030220

000d6074 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6074:	b508      	push	{r3, lr}
   d6076:	4b03      	ldr	r3, [pc, #12]	; (d6084 <system_ctrl_set_result+0x10>)
   d6078:	681b      	ldr	r3, [r3, #0]
   d607a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d607e:	9301      	str	r3, [sp, #4]
   d6080:	bd08      	pop	{r3, pc}
   d6082:	0000      	.short	0x0000
   d6084:	00030220 	.word	0x00030220

000d6088 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6088:	b508      	push	{r3, lr}
   d608a:	4b02      	ldr	r3, [pc, #8]	; (d6094 <spark_process+0xc>)
   d608c:	681b      	ldr	r3, [r3, #0]
   d608e:	689b      	ldr	r3, [r3, #8]
   d6090:	9301      	str	r3, [sp, #4]
   d6092:	bd08      	pop	{r3, pc}
   d6094:	00030244 	.word	0x00030244

000d6098 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6098:	b508      	push	{r3, lr}
   d609a:	4b02      	ldr	r3, [pc, #8]	; (d60a4 <spark_cloud_flag_connect+0xc>)
   d609c:	681b      	ldr	r3, [r3, #0]
   d609e:	68db      	ldr	r3, [r3, #12]
   d60a0:	9301      	str	r3, [sp, #4]
   d60a2:	bd08      	pop	{r3, pc}
   d60a4:	00030244 	.word	0x00030244

000d60a8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d60a8:	b508      	push	{r3, lr}
   d60aa:	4b02      	ldr	r3, [pc, #8]	; (d60b4 <spark_cloud_flag_connected+0xc>)
   d60ac:	681b      	ldr	r3, [r3, #0]
   d60ae:	695b      	ldr	r3, [r3, #20]
   d60b0:	9301      	str	r3, [sp, #4]
   d60b2:	bd08      	pop	{r3, pc}
   d60b4:	00030244 	.word	0x00030244

000d60b8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d60b8:	b508      	push	{r3, lr}
   d60ba:	4b02      	ldr	r3, [pc, #8]	; (d60c4 <spark_send_event+0xc>)
   d60bc:	681b      	ldr	r3, [r3, #0]
   d60be:	6a1b      	ldr	r3, [r3, #32]
   d60c0:	9301      	str	r3, [sp, #4]
   d60c2:	bd08      	pop	{r3, pc}
   d60c4:	00030244 	.word	0x00030244

000d60c8 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d60c8:	b508      	push	{r3, lr}
   d60ca:	4b02      	ldr	r3, [pc, #8]	; (d60d4 <spark_sync_time_pending+0xc>)
   d60cc:	681b      	ldr	r3, [r3, #0]
   d60ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d60d0:	9301      	str	r3, [sp, #4]
   d60d2:	bd08      	pop	{r3, pc}
   d60d4:	00030244 	.word	0x00030244

000d60d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d60d8:	b508      	push	{r3, lr}
   d60da:	4b02      	ldr	r3, [pc, #8]	; (d60e4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d60dc:	681b      	ldr	r3, [r3, #0]
   d60de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d60e0:	9301      	str	r3, [sp, #4]
   d60e2:	bd08      	pop	{r3, pc}
   d60e4:	00030244 	.word	0x00030244

000d60e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d60e8:	b508      	push	{r3, lr}
   d60ea:	4b02      	ldr	r3, [pc, #8]	; (d60f4 <network_connect+0xc>)
   d60ec:	681b      	ldr	r3, [r3, #0]
   d60ee:	685b      	ldr	r3, [r3, #4]
   d60f0:	9301      	str	r3, [sp, #4]
   d60f2:	bd08      	pop	{r3, pc}
   d60f4:	00030240 	.word	0x00030240

000d60f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d60f8:	b508      	push	{r3, lr}
   d60fa:	4b02      	ldr	r3, [pc, #8]	; (d6104 <network_connecting+0xc>)
   d60fc:	681b      	ldr	r3, [r3, #0]
   d60fe:	689b      	ldr	r3, [r3, #8]
   d6100:	9301      	str	r3, [sp, #4]
   d6102:	bd08      	pop	{r3, pc}
   d6104:	00030240 	.word	0x00030240

000d6108 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6108:	b508      	push	{r3, lr}
   d610a:	4b02      	ldr	r3, [pc, #8]	; (d6114 <network_disconnect+0xc>)
   d610c:	681b      	ldr	r3, [r3, #0]
   d610e:	68db      	ldr	r3, [r3, #12]
   d6110:	9301      	str	r3, [sp, #4]
   d6112:	bd08      	pop	{r3, pc}
   d6114:	00030240 	.word	0x00030240

000d6118 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6118:	b508      	push	{r3, lr}
   d611a:	4b02      	ldr	r3, [pc, #8]	; (d6124 <network_ready+0xc>)
   d611c:	681b      	ldr	r3, [r3, #0]
   d611e:	691b      	ldr	r3, [r3, #16]
   d6120:	9301      	str	r3, [sp, #4]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	00030240 	.word	0x00030240

000d6128 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b02      	ldr	r3, [pc, #8]	; (d6134 <network_on+0xc>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	695b      	ldr	r3, [r3, #20]
   d6130:	9301      	str	r3, [sp, #4]
   d6132:	bd08      	pop	{r3, pc}
   d6134:	00030240 	.word	0x00030240

000d6138 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6138:	b508      	push	{r3, lr}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <network_off+0xc>)
   d613c:	681b      	ldr	r3, [r3, #0]
   d613e:	699b      	ldr	r3, [r3, #24]
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	00030240 	.word	0x00030240

000d6148 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b02      	ldr	r3, [pc, #8]	; (d6154 <network_listen+0xc>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	69db      	ldr	r3, [r3, #28]
   d6150:	9301      	str	r3, [sp, #4]
   d6152:	bd08      	pop	{r3, pc}
   d6154:	00030240 	.word	0x00030240

000d6158 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6158:	b508      	push	{r3, lr}
   d615a:	4b02      	ldr	r3, [pc, #8]	; (d6164 <network_listening+0xc>)
   d615c:	681b      	ldr	r3, [r3, #0]
   d615e:	6a1b      	ldr	r3, [r3, #32]
   d6160:	9301      	str	r3, [sp, #4]
   d6162:	bd08      	pop	{r3, pc}
   d6164:	00030240 	.word	0x00030240

000d6168 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6168:	b508      	push	{r3, lr}
   d616a:	4b02      	ldr	r3, [pc, #8]	; (d6174 <network_set_listen_timeout+0xc>)
   d616c:	681b      	ldr	r3, [r3, #0]
   d616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6170:	9301      	str	r3, [sp, #4]
   d6172:	bd08      	pop	{r3, pc}
   d6174:	00030240 	.word	0x00030240

000d6178 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6178:	b508      	push	{r3, lr}
   d617a:	4b02      	ldr	r3, [pc, #8]	; (d6184 <network_get_listen_timeout+0xc>)
   d617c:	681b      	ldr	r3, [r3, #0]
   d617e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6180:	9301      	str	r3, [sp, #4]
   d6182:	bd08      	pop	{r3, pc}
   d6184:	00030240 	.word	0x00030240

000d6188 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6188:	b508      	push	{r3, lr}
   d618a:	4b02      	ldr	r3, [pc, #8]	; (d6194 <malloc+0xc>)
   d618c:	681b      	ldr	r3, [r3, #0]
   d618e:	681b      	ldr	r3, [r3, #0]
   d6190:	9301      	str	r3, [sp, #4]
   d6192:	bd08      	pop	{r3, pc}
   d6194:	0003021c 	.word	0x0003021c

000d6198 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6198:	b508      	push	{r3, lr}
   d619a:	4b02      	ldr	r3, [pc, #8]	; (d61a4 <free+0xc>)
   d619c:	681b      	ldr	r3, [r3, #0]
   d619e:	685b      	ldr	r3, [r3, #4]
   d61a0:	9301      	str	r3, [sp, #4]
   d61a2:	bd08      	pop	{r3, pc}
   d61a4:	0003021c 	.word	0x0003021c

000d61a8 <siscanf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d61a8:	b508      	push	{r3, lr}
   d61aa:	4b02      	ldr	r3, [pc, #8]	; (d61b4 <siscanf+0xc>)
   d61ac:	681b      	ldr	r3, [r3, #0]
   d61ae:	699b      	ldr	r3, [r3, #24]
   d61b0:	9301      	str	r3, [sp, #4]
   d61b2:	bd08      	pop	{r3, pc}
   d61b4:	0003021c 	.word	0x0003021c

000d61b8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d61b8:	b508      	push	{r3, lr}
   d61ba:	4b02      	ldr	r3, [pc, #8]	; (d61c4 <snprintf+0xc>)
   d61bc:	681b      	ldr	r3, [r3, #0]
   d61be:	69db      	ldr	r3, [r3, #28]
   d61c0:	9301      	str	r3, [sp, #4]
   d61c2:	bd08      	pop	{r3, pc}
   d61c4:	0003021c 	.word	0x0003021c

000d61c8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d61c8:	b508      	push	{r3, lr}
   d61ca:	4b02      	ldr	r3, [pc, #8]	; (d61d4 <vsnprintf+0xc>)
   d61cc:	681b      	ldr	r3, [r3, #0]
   d61ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d61d0:	9301      	str	r3, [sp, #4]
   d61d2:	bd08      	pop	{r3, pc}
   d61d4:	0003021c 	.word	0x0003021c

000d61d8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d61d8:	b508      	push	{r3, lr}
   d61da:	4b02      	ldr	r3, [pc, #8]	; (d61e4 <abort+0xc>)
   d61dc:	681b      	ldr	r3, [r3, #0]
   d61de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d61e0:	9301      	str	r3, [sp, #4]
   d61e2:	bd08      	pop	{r3, pc}
   d61e4:	0003021c 	.word	0x0003021c

000d61e8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d61e8:	b508      	push	{r3, lr}
   d61ea:	4b02      	ldr	r3, [pc, #8]	; (d61f4 <_malloc_r+0xc>)
   d61ec:	681b      	ldr	r3, [r3, #0]
   d61ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61f0:	9301      	str	r3, [sp, #4]
   d61f2:	bd08      	pop	{r3, pc}
   d61f4:	0003021c 	.word	0x0003021c

000d61f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d61f8:	2100      	movs	r1, #0
   d61fa:	f7ff bf01 	b.w	d6000 <system_delay_ms>

000d61fe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d61fe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6200:	6883      	ldr	r3, [r0, #8]
   d6202:	4604      	mov	r4, r0
   d6204:	b90b      	cbnz	r3, d620a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6206:	f001 fbe8 	bl	d79da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d620a:	68c3      	ldr	r3, [r0, #12]
   d620c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d620e:	68a3      	ldr	r3, [r4, #8]
   d6210:	b11b      	cbz	r3, d621a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6212:	2203      	movs	r2, #3
   d6214:	4621      	mov	r1, r4
   d6216:	4620      	mov	r0, r4
   d6218:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d621a:	4620      	mov	r0, r4
   d621c:	2110      	movs	r1, #16
}
   d621e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6222:	f001 bbd8 	b.w	d79d6 <_ZdlPvj>

000d6226 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6226:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6228:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d622a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d622c:	689b      	ldr	r3, [r3, #8]
   d622e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6230:	68a3      	ldr	r3, [r4, #8]
   d6232:	3b01      	subs	r3, #1
   d6234:	60a3      	str	r3, [r4, #8]
   d6236:	b92b      	cbnz	r3, d6244 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d6238:	6823      	ldr	r3, [r4, #0]
   d623a:	4620      	mov	r0, r4
   d623c:	68db      	ldr	r3, [r3, #12]
        }
    }
   d623e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6242:	4718      	bx	r3
   d6244:	bd10      	pop	{r4, pc}

000d6246 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6246:	680b      	ldr	r3, [r1, #0]
   d6248:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d624a:	b113      	cbz	r3, d6252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d624c:	685a      	ldr	r2, [r3, #4]
   d624e:	3201      	adds	r2, #1
   d6250:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6252:	4770      	bx	lr

000d6254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d6254:	b510      	push	{r4, lr}
   d6256:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d6258:	6800      	ldr	r0, [r0, #0]
   d625a:	b128      	cbz	r0, d6268 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d625c:	6843      	ldr	r3, [r0, #4]
   d625e:	3b01      	subs	r3, #1
   d6260:	6043      	str	r3, [r0, #4]
   d6262:	b90b      	cbnz	r3, d6268 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6264:	f7ff ffdf 	bl	d6226 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d6268:	4620      	mov	r0, r4
   d626a:	bd10      	pop	{r4, pc}

000d626c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d626c:	4802      	ldr	r0, [pc, #8]	; (d6278 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d626e:	2300      	movs	r3, #0
   d6270:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6272:	f7ff bd25 	b.w	d5cc0 <os_mutex_recursive_create>
   d6276:	bf00      	nop
   d6278:	2003e430 	.word	0x2003e430

000d627c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d627c:	2200      	movs	r2, #0
   d627e:	4611      	mov	r1, r2
   d6280:	6840      	ldr	r0, [r0, #4]
   d6282:	f7ff bf49 	b.w	d6118 <network_ready>

000d6286 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6286:	2200      	movs	r2, #0
   d6288:	4611      	mov	r1, r2
   d628a:	6840      	ldr	r0, [r0, #4]
   d628c:	f7ff bf64 	b.w	d6158 <network_listening>

000d6290 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6290:	2200      	movs	r2, #0
   d6292:	4611      	mov	r1, r2
   d6294:	6840      	ldr	r0, [r0, #4]
   d6296:	f7ff bf6f 	b.w	d6178 <network_get_listen_timeout>

000d629a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d629a:	2200      	movs	r2, #0
   d629c:	6840      	ldr	r0, [r0, #4]
   d629e:	f7ff bf63 	b.w	d6168 <network_set_listen_timeout>

000d62a2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d62a2:	2200      	movs	r2, #0
   d62a4:	f081 0101 	eor.w	r1, r1, #1
   d62a8:	6840      	ldr	r0, [r0, #4]
   d62aa:	f7ff bf4d 	b.w	d6148 <network_listen>

000d62ae <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d62ae:	2300      	movs	r3, #0
   d62b0:	461a      	mov	r2, r3
   d62b2:	4619      	mov	r1, r3
   d62b4:	6840      	ldr	r0, [r0, #4]
   d62b6:	f7ff bf3f 	b.w	d6138 <network_off>

000d62ba <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d62ba:	2300      	movs	r3, #0
   d62bc:	461a      	mov	r2, r3
   d62be:	4619      	mov	r1, r3
   d62c0:	6840      	ldr	r0, [r0, #4]
   d62c2:	f7ff bf31 	b.w	d6128 <network_on>

000d62c6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d62c6:	2200      	movs	r2, #0
   d62c8:	4611      	mov	r1, r2
   d62ca:	6840      	ldr	r0, [r0, #4]
   d62cc:	f7ff bf14 	b.w	d60f8 <network_connecting>

000d62d0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d62d0:	2200      	movs	r2, #0
   d62d2:	2102      	movs	r1, #2
   d62d4:	6840      	ldr	r0, [r0, #4]
   d62d6:	f7ff bf17 	b.w	d6108 <network_disconnect>

000d62da <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d62da:	2300      	movs	r3, #0
   d62dc:	461a      	mov	r2, r3
   d62de:	6840      	ldr	r0, [r0, #4]
   d62e0:	f7ff bf02 	b.w	d60e8 <network_connect>

000d62e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d62e4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d62e6:	4c08      	ldr	r4, [pc, #32]	; (d6308 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d62e8:	2528      	movs	r5, #40	; 0x28
   d62ea:	462a      	mov	r2, r5
   d62ec:	2100      	movs	r1, #0
   d62ee:	4620      	mov	r0, r4
   d62f0:	f002 fade 	bl	d88b0 <memset>
        cid = -1;
   d62f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d62f8:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d62fa:	4b04      	ldr	r3, [pc, #16]	; (d630c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d62fc:	8025      	strh	r5, [r4, #0]
   d62fe:	2204      	movs	r2, #4
   d6300:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6302:	4a03      	ldr	r2, [pc, #12]	; (d6310 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6304:	601a      	str	r2, [r3, #0]
   d6306:	bd38      	pop	{r3, r4, r5, pc}
   d6308:	2003e43c 	.word	0x2003e43c
   d630c:	2003e434 	.word	0x2003e434
   d6310:	000d928c 	.word	0x000d928c

000d6314 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6314:	4770      	bx	lr

000d6316 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6316:	2000      	movs	r0, #0
   d6318:	4770      	bx	lr

000d631a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d631a:	b510      	push	{r4, lr}
   d631c:	2110      	movs	r1, #16
   d631e:	4604      	mov	r4, r0
   d6320:	f001 fb59 	bl	d79d6 <_ZdlPvj>
   d6324:	4620      	mov	r0, r4
   d6326:	bd10      	pop	{r4, pc}

000d6328 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6328:	b508      	push	{r3, lr}
      { delete this; }
   d632a:	b108      	cbz	r0, d6330 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d632c:	f7ff fff5 	bl	d631a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6330:	bd08      	pop	{r3, pc}

000d6332 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6332:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6334:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6336:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6338:	b113      	cbz	r3, d6340 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d633a:	2203      	movs	r2, #3
   d633c:	4601      	mov	r1, r0
   d633e:	4798      	blx	r3
    }
   d6340:	4620      	mov	r0, r4
   d6342:	bd10      	pop	{r4, pc}

000d6344 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6344:	2200      	movs	r2, #0
   d6346:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6348:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d634a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d634e:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6350:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6354:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6356:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6358:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d635a:	680c      	ldr	r4, [r1, #0]
   d635c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d635e:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6360:	bd10      	pop	{r4, pc}

000d6362 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6362:	b510      	push	{r4, lr}
   d6364:	4604      	mov	r4, r0
    free((void*)msg_);
   d6366:	6800      	ldr	r0, [r0, #0]
   d6368:	f7ff ff16 	bl	d6198 <free>
}
   d636c:	4620      	mov	r0, r4
   d636e:	bd10      	pop	{r4, pc}

000d6370 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6370:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6372:	68c4      	ldr	r4, [r0, #12]
   d6374:	b1f4      	cbz	r4, d63b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6376:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6378:	2b02      	cmp	r3, #2
   d637a:	d103      	bne.n	d6384 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d637c:	f104 000c 	add.w	r0, r4, #12
   d6380:	f7ff ffef 	bl	d6362 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6384:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6386:	b135      	cbz	r5, d6396 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6388:	4628      	mov	r0, r5
   d638a:	f7ff ffd2 	bl	d6332 <_ZNSt14_Function_baseD1Ev>
   d638e:	2110      	movs	r1, #16
   d6390:	4628      	mov	r0, r5
   d6392:	f001 fb20 	bl	d79d6 <_ZdlPvj>
   d6396:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6398:	b135      	cbz	r5, d63a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d639a:	4628      	mov	r0, r5
   d639c:	f7ff ffc9 	bl	d6332 <_ZNSt14_Function_baseD1Ev>
   d63a0:	2110      	movs	r1, #16
   d63a2:	4628      	mov	r0, r5
   d63a4:	f001 fb17 	bl	d79d6 <_ZdlPvj>
   d63a8:	4620      	mov	r0, r4
   d63aa:	2114      	movs	r1, #20
   d63ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d63b0:	f001 bb11 	b.w	d79d6 <_ZdlPvj>
   d63b4:	bd38      	pop	{r3, r4, r5, pc}

000d63b6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d63b6:	b513      	push	{r0, r1, r4, lr}
   d63b8:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d63ba:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d63be:	2300      	movs	r3, #0
   d63c0:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d63c2:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d63c4:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d63c6:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63c8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d63ca:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d63cc:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63ce:	f7ff ff41 	bl	d6254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63d2:	4620      	mov	r0, r4
   d63d4:	b002      	add	sp, #8
   d63d6:	bd10      	pop	{r4, pc}

000d63d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d63d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63da:	460c      	mov	r4, r1
   d63dc:	ad02      	add	r5, sp, #8
   d63de:	f854 3b04 	ldr.w	r3, [r4], #4
   d63e2:	f845 3d08 	str.w	r3, [r5, #-8]!
   d63e6:	4606      	mov	r6, r0
   d63e8:	460f      	mov	r7, r1
   d63ea:	a801      	add	r0, sp, #4
   d63ec:	4621      	mov	r1, r4
   d63ee:	f7ff ff2a 	bl	d6246 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d63f2:	4629      	mov	r1, r5
   d63f4:	4630      	mov	r0, r6
   d63f6:	f7ff ffde 	bl	d63b6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63fa:	a801      	add	r0, sp, #4
   d63fc:	f7ff ff2a 	bl	d6254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6400:	4620      	mov	r0, r4
   d6402:	f7ff ff27 	bl	d6254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6406:	4638      	mov	r0, r7
   d6408:	2108      	movs	r1, #8
   d640a:	f001 fae4 	bl	d79d6 <_ZdlPvj>
        return p;
    }
   d640e:	4630      	mov	r0, r6
   d6410:	b003      	add	sp, #12
   d6412:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6414 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6414:	b513      	push	{r0, r1, r4, lr}
   d6416:	460b      	mov	r3, r1
   d6418:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d641a:	c803      	ldmia	r0, {r0, r1}
   d641c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6420:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6424:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6428:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d642c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6430:	b002      	add	sp, #8
   d6432:	bd10      	pop	{r4, pc}

000d6434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6434:	b538      	push	{r3, r4, r5, lr}
   d6436:	2300      	movs	r3, #0
   d6438:	4604      	mov	r4, r0
   d643a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d643c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d643e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6440:	f7fd fe2b 	bl	d409a <_Znwj>
   d6444:	b128      	cbz	r0, d6452 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6446:	2301      	movs	r3, #1
   d6448:	6043      	str	r3, [r0, #4]
   d644a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d644c:	4b02      	ldr	r3, [pc, #8]	; (d6458 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d644e:	6003      	str	r3, [r0, #0]
   d6450:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6452:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6454:	4620      	mov	r0, r4
   d6456:	bd38      	pop	{r3, r4, r5, pc}
   d6458:	000d92c0 	.word	0x000d92c0

000d645c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d645c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d645e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6460:	b90a      	cbnz	r2, d6466 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6462:	f001 faba 	bl	d79da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6466:	68c3      	ldr	r3, [r0, #12]
    }
   d6468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d646c:	4718      	bx	r3

000d646e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d646e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6470:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6472:	f100 0110 	add.w	r1, r0, #16
   d6476:	f7ff fff1 	bl	d645c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d647a:	bd08      	pop	{r3, pc}

000d647c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d647c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d647e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6480:	b90a      	cbnz	r2, d6486 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6482:	f001 faaa 	bl	d79da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6486:	68c3      	ldr	r3, [r0, #12]
    }
   d6488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d648c:	4718      	bx	r3

000d648e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d648e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6490:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6492:	f100 0110 	add.w	r1, r0, #16
   d6496:	f7ff fff1 	bl	d647c <_ZNKSt8functionIFvRKbEEclES1_>
   d649a:	bd08      	pop	{r3, pc}

000d649c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d649c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d649e:	2300      	movs	r3, #0
   d64a0:	6083      	str	r3, [r0, #8]
   d64a2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d64a4:	4604      	mov	r4, r0
   d64a6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d64a8:	b12b      	cbz	r3, d64b6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d64aa:	2202      	movs	r2, #2
   d64ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d64ae:	68eb      	ldr	r3, [r5, #12]
   d64b0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d64b2:	68ab      	ldr	r3, [r5, #8]
   d64b4:	60a3      	str	r3, [r4, #8]
	}
    }
   d64b6:	4620      	mov	r0, r4
   d64b8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d64bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d64bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d64be:	b089      	sub	sp, #36	; 0x24
   d64c0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d64c2:	4668      	mov	r0, sp
   d64c4:	f7ff ff3e 	bl	d6344 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d64c8:	2300      	movs	r3, #0
   d64ca:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d64ce:	f04f 0202 	mov.w	r2, #2
   d64d2:	e8d4 3f4f 	ldrexb	r3, [r4]
   d64d6:	2b00      	cmp	r3, #0
   d64d8:	d103      	bne.n	d64e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d64da:	e8c4 2f41 	strexb	r1, r2, [r4]
   d64de:	2900      	cmp	r1, #0
   d64e0:	d1f7      	bne.n	d64d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d64e2:	d002      	beq.n	d64ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d64e4:	f88d 3008 	strb.w	r3, [sp, #8]
   d64e8:	e063      	b.n	d65b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d64ea:	f114 050c 	adds.w	r5, r4, #12
   d64ee:	d003      	beq.n	d64f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d64f0:	4669      	mov	r1, sp
   d64f2:	4628      	mov	r0, r5
   d64f4:	f7ff ff26 	bl	d6344 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d64f8:	f3bf 8f5f 	dmb	sy
   d64fc:	2301      	movs	r3, #1
   d64fe:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6500:	2000      	movs	r0, #0
   d6502:	f104 0308 	add.w	r3, r4, #8
   d6506:	f3bf 8f5f 	dmb	sy
   d650a:	e853 6f00 	ldrex	r6, [r3]
   d650e:	e843 0200 	strex	r2, r0, [r3]
   d6512:	2a00      	cmp	r2, #0
   d6514:	d1f9      	bne.n	d650a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6516:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d651a:	2e00      	cmp	r6, #0
   d651c:	d049      	beq.n	d65b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d651e:	f7ff fd87 	bl	d6030 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6522:	b120      	cbz	r0, d652e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6524:	4629      	mov	r1, r5
   d6526:	4630      	mov	r0, r6
   d6528:	f7ff ff98 	bl	d645c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d652c:	e03a      	b.n	d65a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d652e:	4631      	mov	r1, r6
   d6530:	a802      	add	r0, sp, #8
   d6532:	f7ff ffb3 	bl	d649c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6536:	68e0      	ldr	r0, [r4, #12]
   d6538:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d653c:	b108      	cbz	r0, d6542 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d653e:	f002 f9f9 	bl	d8934 <strdup>
   d6542:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6544:	2010      	movs	r0, #16
   d6546:	f8ad 501c 	strh.w	r5, [sp, #28]
   d654a:	f7fd fda6 	bl	d409a <_Znwj>
   d654e:	4605      	mov	r5, r0
   d6550:	b1e8      	cbz	r0, d658e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6552:	2700      	movs	r7, #0
   d6554:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6556:	2018      	movs	r0, #24
   d6558:	f7fd fd9f 	bl	d409a <_Znwj>
   d655c:	4604      	mov	r4, r0
   d655e:	b188      	cbz	r0, d6584 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6560:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6562:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6564:	a802      	add	r0, sp, #8
   d6566:	f7ff ff55 	bl	d6414 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d656a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d656c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d656e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6570:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6572:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6574:	a906      	add	r1, sp, #24
   d6576:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6578:	60e3      	str	r3, [r4, #12]
   d657a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d657e:	9205      	str	r2, [sp, #20]
   d6580:	f7ff fee0 	bl	d6344 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6584:	4b0d      	ldr	r3, [pc, #52]	; (d65bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6586:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6588:	4b0d      	ldr	r3, [pc, #52]	; (d65c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d658a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d658c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d658e:	a806      	add	r0, sp, #24
   d6590:	f7ff fee7 	bl	d6362 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6594:	a802      	add	r0, sp, #8
   d6596:	f7ff fecc 	bl	d6332 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d659a:	2200      	movs	r2, #0
   d659c:	4629      	mov	r1, r5
   d659e:	4809      	ldr	r0, [pc, #36]	; (d65c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d65a0:	f7ff fd4e 	bl	d6040 <application_thread_invoke>
   d65a4:	4630      	mov	r0, r6
   d65a6:	f7ff fec4 	bl	d6332 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d65aa:	2110      	movs	r1, #16
   d65ac:	4630      	mov	r0, r6
   d65ae:	f001 fa12 	bl	d79d6 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d65b2:	4668      	mov	r0, sp
   d65b4:	f7ff fed5 	bl	d6362 <_ZN8particle5ErrorD1Ev>
    }
   d65b8:	b009      	add	sp, #36	; 0x24
   d65ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d65bc:	000d646f 	.word	0x000d646f
   d65c0:	000d66e5 	.word	0x000d66e5
   d65c4:	000d61ff 	.word	0x000d61ff

000d65c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d65c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65cc:	b08b      	sub	sp, #44	; 0x2c
   d65ce:	4606      	mov	r6, r0
   d65d0:	460f      	mov	r7, r1
   d65d2:	4690      	mov	r8, r2
   d65d4:	4699      	mov	r9, r3
   d65d6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d65da:	f7ff fd65 	bl	d60a8 <spark_cloud_flag_connected>
   d65de:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d65e0:	4683      	mov	fp, r0
   d65e2:	bb30      	cbnz	r0, d6632 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d65e4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d65e8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d65ea:	a905      	add	r1, sp, #20
   d65ec:	4628      	mov	r0, r5
   d65ee:	f8ad 3018 	strh.w	r3, [sp, #24]
   d65f2:	f7ff fea7 	bl	d6344 <_ZN8particle5ErrorC1EOS0_>
   d65f6:	2014      	movs	r0, #20
   d65f8:	f7fd fd4f 	bl	d409a <_Znwj>
   d65fc:	4604      	mov	r4, r0
   d65fe:	b158      	cbz	r0, d6618 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6600:	2302      	movs	r3, #2
   d6602:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6604:	2301      	movs	r3, #1
   d6606:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6608:	f8c0 b004 	str.w	fp, [r0, #4]
   d660c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6610:	4629      	mov	r1, r5
   d6612:	300c      	adds	r0, #12
   d6614:	f7ff fe96 	bl	d6344 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6618:	4630      	mov	r0, r6
   d661a:	4621      	mov	r1, r4
   d661c:	f840 4b04 	str.w	r4, [r0], #4
   d6620:	f7ff ff08 	bl	d6434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6624:	4628      	mov	r0, r5
   d6626:	f7ff fe9c 	bl	d6362 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d662a:	a805      	add	r0, sp, #20
   d662c:	f7ff fe99 	bl	d6362 <_ZN8particle5ErrorD1Ev>
   d6630:	e052      	b.n	d66d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6632:	2400      	movs	r4, #0
   d6634:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6636:	2014      	movs	r0, #20
   d6638:	606c      	str	r4, [r5, #4]
   d663a:	60ac      	str	r4, [r5, #8]
   d663c:	9307      	str	r3, [sp, #28]
   d663e:	f7fd fd2c 	bl	d409a <_Znwj>
   d6642:	4601      	mov	r1, r0
   d6644:	b118      	cbz	r0, d664e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6646:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6648:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d664a:	6044      	str	r4, [r0, #4]
   d664c:	6084      	str	r4, [r0, #8]
   d664e:	a804      	add	r0, sp, #16
   d6650:	9103      	str	r1, [sp, #12]
   d6652:	f7ff feef 	bl	d6434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6656:	4b22      	ldr	r3, [pc, #136]	; (d66e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6658:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d665a:	2008      	movs	r0, #8
   d665c:	f7fd fd1d 	bl	d409a <_Znwj>
   d6660:	4604      	mov	r4, r0
   d6662:	b128      	cbz	r0, d6670 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6664:	9b03      	ldr	r3, [sp, #12]
   d6666:	f840 3b04 	str.w	r3, [r0], #4
   d666a:	a904      	add	r1, sp, #16
   d666c:	f7ff fdeb 	bl	d6246 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6670:	9500      	str	r5, [sp, #0]
   d6672:	fa5f f38a 	uxtb.w	r3, sl
   d6676:	464a      	mov	r2, r9
   d6678:	4641      	mov	r1, r8
   d667a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d667c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d667e:	f7ff fd1b 	bl	d60b8 <spark_send_event>
   d6682:	b920      	cbnz	r0, d668e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6684:	9b03      	ldr	r3, [sp, #12]
   d6686:	785b      	ldrb	r3, [r3, #1]
   d6688:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d668c:	b183      	cbz	r3, d66b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d668e:	9b03      	ldr	r3, [sp, #12]
   d6690:	9305      	str	r3, [sp, #20]
   d6692:	a904      	add	r1, sp, #16
   d6694:	a806      	add	r0, sp, #24
   d6696:	f7ff fdd6 	bl	d6246 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d669a:	a905      	add	r1, sp, #20
   d669c:	4630      	mov	r0, r6
   d669e:	f7ff fe8a 	bl	d63b6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d66a2:	a806      	add	r0, sp, #24
   d66a4:	f7ff fdd6 	bl	d6254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66a8:	a804      	add	r0, sp, #16
   d66aa:	f7ff fdd3 	bl	d6254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66ae:	e013      	b.n	d66d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d66b0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d66b4:	a905      	add	r1, sp, #20
   d66b6:	a803      	add	r0, sp, #12
   d66b8:	9205      	str	r2, [sp, #20]
   d66ba:	f8ad 3018 	strh.w	r3, [sp, #24]
   d66be:	f7ff fefd 	bl	d64bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d66c2:	a805      	add	r0, sp, #20
   d66c4:	f7ff fe4d 	bl	d6362 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d66c8:	a805      	add	r0, sp, #20
   d66ca:	9909      	ldr	r1, [sp, #36]	; 0x24
   d66cc:	f7ff fe84 	bl	d63d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d66d0:	a806      	add	r0, sp, #24
   d66d2:	f7ff fdbf 	bl	d6254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66d6:	e7da      	b.n	d668e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d66d8:	4630      	mov	r0, r6
   d66da:	b00b      	add	sp, #44	; 0x2c
   d66dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d66e0:	000d6855 	.word	0x000d6855

000d66e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d66e4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d66e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66e8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d66ea:	d006      	beq.n	d66fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d66ec:	2a03      	cmp	r2, #3
   d66ee:	d017      	beq.n	d6720 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d66f0:	2a01      	cmp	r2, #1
   d66f2:	d122      	bne.n	d673a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d66f4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d66f6:	6003      	str	r3, [r0, #0]
	      break;
   d66f8:	e01f      	b.n	d673a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d66fa:	2018      	movs	r0, #24
   d66fc:	680e      	ldr	r6, [r1, #0]
   d66fe:	f7fd fccc 	bl	d409a <_Znwj>
   d6702:	4605      	mov	r5, r0
   d6704:	b150      	cbz	r0, d671c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6706:	4631      	mov	r1, r6
   d6708:	f7ff fec8 	bl	d649c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d670c:	6930      	ldr	r0, [r6, #16]
   d670e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6712:	b108      	cbz	r0, d6718 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6714:	f002 f90e 	bl	d8934 <strdup>
   d6718:	6128      	str	r0, [r5, #16]
   d671a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d671c:	6025      	str	r5, [r4, #0]
   d671e:	e00c      	b.n	d673a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6720:	6804      	ldr	r4, [r0, #0]
   d6722:	b154      	cbz	r4, d673a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6724:	f104 0010 	add.w	r0, r4, #16
   d6728:	f7ff fe1b 	bl	d6362 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d672c:	4620      	mov	r0, r4
   d672e:	f7ff fe00 	bl	d6332 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6732:	2118      	movs	r1, #24
   d6734:	4620      	mov	r0, r4
   d6736:	f001 f94e 	bl	d79d6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d673a:	2000      	movs	r0, #0
   d673c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d673e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d673e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6740:	2300      	movs	r3, #0
   d6742:	6083      	str	r3, [r0, #8]
   d6744:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6746:	4604      	mov	r4, r0
   d6748:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d674a:	b12b      	cbz	r3, d6758 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d674c:	2202      	movs	r2, #2
   d674e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6750:	68eb      	ldr	r3, [r5, #12]
   d6752:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6754:	68ab      	ldr	r3, [r5, #8]
   d6756:	60a3      	str	r3, [r4, #8]
	}
    }
   d6758:	4620      	mov	r0, r4
   d675a:	bd38      	pop	{r3, r4, r5, pc}

000d675c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d675c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d675e:	b570      	push	{r4, r5, r6, lr}
   d6760:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6762:	d006      	beq.n	d6772 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6764:	2a03      	cmp	r2, #3
   d6766:	d011      	beq.n	d678c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6768:	2a01      	cmp	r2, #1
   d676a:	d118      	bne.n	d679e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d676c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d676e:	6003      	str	r3, [r0, #0]
	      break;
   d6770:	e015      	b.n	d679e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6772:	2014      	movs	r0, #20
   d6774:	680e      	ldr	r6, [r1, #0]
   d6776:	f7fd fc90 	bl	d409a <_Znwj>
   d677a:	4605      	mov	r5, r0
   d677c:	b120      	cbz	r0, d6788 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d677e:	4631      	mov	r1, r6
   d6780:	f7ff ffdd 	bl	d673e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6784:	7c33      	ldrb	r3, [r6, #16]
   d6786:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6788:	6025      	str	r5, [r4, #0]
   d678a:	e008      	b.n	d679e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d678c:	6804      	ldr	r4, [r0, #0]
   d678e:	b134      	cbz	r4, d679e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6790:	4620      	mov	r0, r4
   d6792:	f7ff fdce 	bl	d6332 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6796:	2114      	movs	r1, #20
   d6798:	4620      	mov	r0, r4
   d679a:	f001 f91c 	bl	d79d6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d679e:	2000      	movs	r0, #0
   d67a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d67a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d67a4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d67a6:	2300      	movs	r3, #0
   d67a8:	b087      	sub	sp, #28
   d67aa:	460c      	mov	r4, r1
   d67ac:	f3bf 8f5f 	dmb	sy
   d67b0:	e850 6f00 	ldrex	r6, [r0]
   d67b4:	e840 3200 	strex	r2, r3, [r0]
   d67b8:	2a00      	cmp	r2, #0
   d67ba:	d1f9      	bne.n	d67b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d67bc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d67c0:	2e00      	cmp	r6, #0
   d67c2:	d03f      	beq.n	d6844 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d67c4:	4618      	mov	r0, r3
   d67c6:	f7ff fc33 	bl	d6030 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d67ca:	4607      	mov	r7, r0
   d67cc:	b120      	cbz	r0, d67d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d67ce:	4621      	mov	r1, r4
   d67d0:	4630      	mov	r0, r6
   d67d2:	f7ff fe53 	bl	d647c <_ZNKSt8functionIFvRKbEEclES1_>
   d67d6:	e02e      	b.n	d6836 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d67d8:	4631      	mov	r1, r6
   d67da:	a801      	add	r0, sp, #4
   d67dc:	f7ff ffaf 	bl	d673e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d67e0:	7823      	ldrb	r3, [r4, #0]
   d67e2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d67e6:	2010      	movs	r0, #16
   d67e8:	f7fd fc57 	bl	d409a <_Znwj>
   d67ec:	4605      	mov	r5, r0
   d67ee:	b1d0      	cbz	r0, d6826 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d67f0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d67f2:	2014      	movs	r0, #20
   d67f4:	f7fd fc51 	bl	d409a <_Znwj>
   d67f8:	4604      	mov	r4, r0
   d67fa:	b178      	cbz	r0, d681c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d67fc:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d67fe:	4601      	mov	r1, r0
   d6800:	a801      	add	r0, sp, #4
   d6802:	f7ff fe07 	bl	d6414 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6806:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6808:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d680a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d680c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d680e:	9203      	str	r2, [sp, #12]
   d6810:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6812:	60e3      	str	r3, [r4, #12]
   d6814:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6818:	9204      	str	r2, [sp, #16]
   d681a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d681c:	4b0a      	ldr	r3, [pc, #40]	; (d6848 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d681e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6820:	4b0a      	ldr	r3, [pc, #40]	; (d684c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6822:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6824:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6826:	a801      	add	r0, sp, #4
   d6828:	f7ff fd83 	bl	d6332 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d682c:	2200      	movs	r2, #0
   d682e:	4629      	mov	r1, r5
   d6830:	4807      	ldr	r0, [pc, #28]	; (d6850 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6832:	f7ff fc05 	bl	d6040 <application_thread_invoke>
   d6836:	4630      	mov	r0, r6
   d6838:	f7ff fd7b 	bl	d6332 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d683c:	2110      	movs	r1, #16
   d683e:	4630      	mov	r0, r6
   d6840:	f001 f8c9 	bl	d79d6 <_ZdlPvj>
        }
    }
   d6844:	b007      	add	sp, #28
   d6846:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6848:	000d648f 	.word	0x000d648f
   d684c:	000d675d 	.word	0x000d675d
   d6850:	000d61ff 	.word	0x000d61ff

000d6854 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6854:	b530      	push	{r4, r5, lr}
   d6856:	b085      	sub	sp, #20
   d6858:	4604      	mov	r4, r0
   d685a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d685c:	4668      	mov	r0, sp
   d685e:	4611      	mov	r1, r2
   d6860:	f7ff fdba 	bl	d63d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6864:	b17c      	cbz	r4, d6886 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6866:	b224      	sxth	r4, r4
   d6868:	4628      	mov	r0, r5
   d686a:	b10d      	cbz	r5, d6870 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d686c:	f002 f862 	bl	d8934 <strdup>
   d6870:	9002      	str	r0, [sp, #8]
   d6872:	a902      	add	r1, sp, #8
   d6874:	4668      	mov	r0, sp
   d6876:	f8ad 400c 	strh.w	r4, [sp, #12]
   d687a:	f7ff fe1f 	bl	d64bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d687e:	a802      	add	r0, sp, #8
   d6880:	f7ff fd6f 	bl	d6362 <_ZN8particle5ErrorD1Ev>
   d6884:	e01d      	b.n	d68c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6886:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6888:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d688c:	f04f 0201 	mov.w	r2, #1
   d6890:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6894:	42a3      	cmp	r3, r4
   d6896:	d103      	bne.n	d68a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6898:	e8c0 2f41 	strexb	r1, r2, [r0]
   d689c:	2900      	cmp	r1, #0
   d689e:	d1f7      	bne.n	d6890 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d68a0:	d002      	beq.n	d68a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d68a2:	f88d 3008 	strb.w	r3, [sp, #8]
   d68a6:	e00c      	b.n	d68c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d68a8:	f110 010c 	adds.w	r1, r0, #12
   d68ac:	f04f 0301 	mov.w	r3, #1
   d68b0:	bf18      	it	ne
   d68b2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d68b4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d68b8:	3004      	adds	r0, #4
   d68ba:	f800 3c03 	strb.w	r3, [r0, #-3]
   d68be:	f7ff ff71 	bl	d67a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d68c2:	a801      	add	r0, sp, #4
   d68c4:	f7ff fcc6 	bl	d6254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d68c8:	b005      	add	sp, #20
   d68ca:	bd30      	pop	{r4, r5, pc}

000d68cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d68cc:	2200      	movs	r2, #0
   d68ce:	4611      	mov	r1, r2
   d68d0:	6840      	ldr	r0, [r0, #4]
   d68d2:	f7ff bc41 	b.w	d6158 <network_listening>

000d68d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d68d6:	2200      	movs	r2, #0
   d68d8:	4611      	mov	r1, r2
   d68da:	6840      	ldr	r0, [r0, #4]
   d68dc:	f7ff bc4c 	b.w	d6178 <network_get_listen_timeout>

000d68e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d68e0:	2200      	movs	r2, #0
   d68e2:	6840      	ldr	r0, [r0, #4]
   d68e4:	f7ff bc40 	b.w	d6168 <network_set_listen_timeout>

000d68e8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d68e8:	2200      	movs	r2, #0
   d68ea:	f081 0101 	eor.w	r1, r1, #1
   d68ee:	6840      	ldr	r0, [r0, #4]
   d68f0:	f7ff bc2a 	b.w	d6148 <network_listen>

000d68f4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d68f4:	2300      	movs	r3, #0
   d68f6:	461a      	mov	r2, r3
   d68f8:	4619      	mov	r1, r3
   d68fa:	6840      	ldr	r0, [r0, #4]
   d68fc:	f7ff bc1c 	b.w	d6138 <network_off>

000d6900 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6900:	2300      	movs	r3, #0
   d6902:	461a      	mov	r2, r3
   d6904:	4619      	mov	r1, r3
   d6906:	6840      	ldr	r0, [r0, #4]
   d6908:	f7ff bc0e 	b.w	d6128 <network_on>

000d690c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d690c:	2200      	movs	r2, #0
   d690e:	4611      	mov	r1, r2
   d6910:	6840      	ldr	r0, [r0, #4]
   d6912:	f7ff bc01 	b.w	d6118 <network_ready>

000d6916 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6916:	2200      	movs	r2, #0
   d6918:	4611      	mov	r1, r2
   d691a:	6840      	ldr	r0, [r0, #4]
   d691c:	f7ff bbec 	b.w	d60f8 <network_connecting>

000d6920 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6920:	2200      	movs	r2, #0
   d6922:	2102      	movs	r1, #2
   d6924:	6840      	ldr	r0, [r0, #4]
   d6926:	f7ff bbef 	b.w	d6108 <network_disconnect>

000d692a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d692a:	2300      	movs	r3, #0
   d692c:	461a      	mov	r2, r3
   d692e:	6840      	ldr	r0, [r0, #4]
   d6930:	f7ff bbda 	b.w	d60e8 <network_connect>

000d6934 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6934:	4b02      	ldr	r3, [pc, #8]	; (d6940 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6936:	2203      	movs	r2, #3
   d6938:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d693a:	4a02      	ldr	r2, [pc, #8]	; (d6944 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d693c:	601a      	str	r2, [r3, #0]
   d693e:	4770      	bx	lr
   d6940:	2003e464 	.word	0x2003e464
   d6944:	000d92dc 	.word	0x000d92dc

000d6948 <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d6948:	0909      	lsrs	r1, r1, #4
   d694a:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d694e:	ee07 0a90 	vmov	s15, r0
   d6952:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d6956:	eddf 7a02 	vldr	s15, [pc, #8]	; d6960 <_ZN6detail9_getVCellEhh+0x18>
   d695a:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d695e:	4770      	bx	lr
   d6960:	44480000 	.word	0x44480000

000d6964 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d6964:	6800      	ldr	r0, [r0, #0]
   d6966:	f000 b8e0 	b.w	d6b2a <_ZN7TwoWire4lockEv>

000d696a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d696a:	b510      	push	{r4, lr}
   d696c:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d696e:	6001      	str	r1, [r0, #0]
   d6970:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d6972:	b10a      	cbz	r2, d6978 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d6974:	f7ff fff6 	bl	d6964 <_ZN9FuelGauge4lockEv>
    }
}
   d6978:	4620      	mov	r0, r4
   d697a:	bd10      	pop	{r4, pc}

000d697c <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d697c:	b538      	push	{r3, r4, r5, lr}
   d697e:	4604      	mov	r4, r0
   d6980:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6982:	f000 ffe1 	bl	d7948 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d6986:	462a      	mov	r2, r5
   d6988:	4601      	mov	r1, r0
   d698a:	4620      	mov	r0, r4
   d698c:	f7ff ffed 	bl	d696a <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d6990:	4620      	mov	r0, r4
   d6992:	bd38      	pop	{r3, r4, r5, pc}

000d6994 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d6994:	6800      	ldr	r0, [r0, #0]
   d6996:	f000 b8d1 	b.w	d6b3c <_ZN7TwoWire6unlockEv>

000d699a <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d699a:	b510      	push	{r4, lr}
{
    if (lock_) {
   d699c:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d699e:	4604      	mov	r4, r0
{
    if (lock_) {
   d69a0:	b10b      	cbz	r3, d69a6 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d69a2:	f7ff fff7 	bl	d6994 <_ZN9FuelGauge6unlockEv>
    }
}
   d69a6:	4620      	mov	r0, r4
   d69a8:	bd10      	pop	{r4, pc}

000d69aa <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d69aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69ac:	4604      	mov	r4, r0
   d69ae:	4616      	mov	r6, r2
   d69b0:	461d      	mov	r5, r3
   d69b2:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d69b4:	f7ff ffd6 	bl	d6964 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d69b8:	6820      	ldr	r0, [r4, #0]
   d69ba:	2136      	movs	r1, #54	; 0x36
   d69bc:	f000 f8aa 	bl	d6b14 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d69c0:	6820      	ldr	r0, [r4, #0]
   d69c2:	6803      	ldr	r3, [r0, #0]
   d69c4:	4639      	mov	r1, r7
   d69c6:	689b      	ldr	r3, [r3, #8]
   d69c8:	4798      	blx	r3
    i2c_.endTransmission(true);
   d69ca:	2101      	movs	r1, #1
   d69cc:	6820      	ldr	r0, [r4, #0]
   d69ce:	f000 f8a4 	bl	d6b1a <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d69d2:	2202      	movs	r2, #2
   d69d4:	2136      	movs	r1, #54	; 0x36
   d69d6:	2301      	movs	r3, #1
   d69d8:	6820      	ldr	r0, [r4, #0]
   d69da:	f000 f892 	bl	d6b02 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d69de:	6820      	ldr	r0, [r4, #0]
   d69e0:	6803      	ldr	r3, [r0, #0]
   d69e2:	695b      	ldr	r3, [r3, #20]
   d69e4:	4798      	blx	r3
   d69e6:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d69e8:	6820      	ldr	r0, [r4, #0]
   d69ea:	6803      	ldr	r3, [r0, #0]
   d69ec:	695b      	ldr	r3, [r3, #20]
   d69ee:	4798      	blx	r3
   d69f0:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d69f2:	4620      	mov	r0, r4
}
   d69f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d69f8:	f7ff bfcc 	b.w	d6994 <_ZN9FuelGauge6unlockEv>

000d69fc <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d69fc:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d69fe:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d6a00:	2200      	movs	r2, #0
   d6a02:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d6a06:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d6a0a:	2102      	movs	r1, #2
   d6a0c:	f10d 0206 	add.w	r2, sp, #6
   d6a10:	f7ff ffcb 	bl	d69aa <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d6a14:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6a18:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d6a1c:	b003      	add	sp, #12
   d6a1e:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d6a22:	f7ff bf91 	b.w	d6948 <_ZN6detail9_getVCellEhh>
	...

000d6a28 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d6a28:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d6a2a:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d6a2c:	2200      	movs	r2, #0
	byte LSB = 0;
   d6a2e:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d6a32:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d6a36:	2104      	movs	r1, #4
   d6a38:	f10d 0206 	add.w	r2, sp, #6
   d6a3c:	f7ff ffb5 	bl	d69aa <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6a40:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6a44:	f001 fa66 	bl	d7f14 <__aeabi_i2d>
   d6a48:	2200      	movs	r2, #0
   d6a4a:	4b09      	ldr	r3, [pc, #36]	; (d6a70 <_ZN9FuelGauge6getSoCEv+0x48>)
   d6a4c:	f001 fac8 	bl	d7fe0 <__aeabi_dmul>
   d6a50:	f001 fdbe 	bl	d85d0 <__aeabi_d2f>
   d6a54:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d6a58:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d6a5c:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6a60:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d6a64:	ee37 0a80 	vadd.f32	s0, s15, s0
   d6a68:	b003      	add	sp, #12
   d6a6a:	f85d fb04 	ldr.w	pc, [sp], #4
   d6a6e:	bf00      	nop
   d6a70:	3f700000 	.word	0x3f700000

000d6a74 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6a74:	4770      	bx	lr

000d6a76 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a78:	4606      	mov	r6, r0
   d6a7a:	4615      	mov	r5, r2
   d6a7c:	460c      	mov	r4, r1
   d6a7e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6a80:	42bc      	cmp	r4, r7
   d6a82:	d006      	beq.n	d6a92 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6a84:	6833      	ldr	r3, [r6, #0]
   d6a86:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6a8a:	689b      	ldr	r3, [r3, #8]
   d6a8c:	4630      	mov	r0, r6
   d6a8e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6a90:	e7f6      	b.n	d6a80 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6a92:	4628      	mov	r0, r5
   d6a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a96 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6a96:	2200      	movs	r2, #0
   d6a98:	7c00      	ldrb	r0, [r0, #16]
   d6a9a:	f7ff b989 	b.w	d5db0 <HAL_I2C_Write_Data>

000d6a9e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6a9e:	2100      	movs	r1, #0
   d6aa0:	7c00      	ldrb	r0, [r0, #16]
   d6aa2:	f7ff b98d 	b.w	d5dc0 <HAL_I2C_Available_Data>

000d6aa6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6aa6:	2100      	movs	r1, #0
   d6aa8:	7c00      	ldrb	r0, [r0, #16]
   d6aaa:	f7ff b991 	b.w	d5dd0 <HAL_I2C_Read_Data>

000d6aae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6aae:	2100      	movs	r1, #0
   d6ab0:	7c00      	ldrb	r0, [r0, #16]
   d6ab2:	f7ff b995 	b.w	d5de0 <HAL_I2C_Peek_Data>

000d6ab6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6ab6:	2100      	movs	r1, #0
   d6ab8:	7c00      	ldrb	r0, [r0, #16]
   d6aba:	f7ff b999 	b.w	d5df0 <HAL_I2C_Flush_Data>

000d6abe <_ZN7TwoWireD0Ev>:
   d6abe:	b510      	push	{r4, lr}
   d6ac0:	2114      	movs	r1, #20
   d6ac2:	4604      	mov	r4, r0
   d6ac4:	f000 ff87 	bl	d79d6 <_ZdlPvj>
   d6ac8:	4620      	mov	r0, r4
   d6aca:	bd10      	pop	{r4, pc}

000d6acc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6acc:	b510      	push	{r4, lr}
   d6ace:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ad4:	4608      	mov	r0, r1
   d6ad6:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6ad8:	2100      	movs	r1, #0
   d6ada:	4b04      	ldr	r3, [pc, #16]	; (d6aec <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6adc:	7420      	strb	r0, [r4, #16]
   d6ade:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6ae0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6ae2:	f7ff f995 	bl	d5e10 <HAL_I2C_Init>

}
   d6ae6:	4620      	mov	r0, r4
   d6ae8:	bd10      	pop	{r4, pc}
   d6aea:	bf00      	nop
   d6aec:	000d9310 	.word	0x000d9310

000d6af0 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d6af0:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d6af2:	2400      	movs	r4, #0
   d6af4:	7c00      	ldrb	r0, [r0, #16]
   d6af6:	9400      	str	r4, [sp, #0]
   d6af8:	f7ff f942 	bl	d5d80 <HAL_I2C_Request_Data>
  return result;
}
   d6afc:	b2c0      	uxtb	r0, r0
   d6afe:	b002      	add	sp, #8
   d6b00:	bd10      	pop	{r4, pc}

000d6b02 <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d6b02:	b2db      	uxtb	r3, r3
   d6b04:	b2d2      	uxtb	r2, r2
   d6b06:	b2c9      	uxtb	r1, r1
   d6b08:	f7ff bff2 	b.w	d6af0 <_ZN7TwoWire11requestFromEhhh>

000d6b0c <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6b0c:	2200      	movs	r2, #0
   d6b0e:	7c00      	ldrb	r0, [r0, #16]
   d6b10:	f7ff b93e 	b.w	d5d90 <HAL_I2C_Begin_Transmission>

000d6b14 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6b14:	b2c9      	uxtb	r1, r1
   d6b16:	f7ff bff9 	b.w	d6b0c <_ZN7TwoWire17beginTransmissionEh>

000d6b1a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6b1a:	2200      	movs	r2, #0
   d6b1c:	7c00      	ldrb	r0, [r0, #16]
   d6b1e:	f7ff b93f 	b.w	d5da0 <HAL_I2C_End_Transmission>

000d6b22 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6b22:	2100      	movs	r1, #0
   d6b24:	7c00      	ldrb	r0, [r0, #16]
   d6b26:	f7ff b96b 	b.w	d5e00 <HAL_I2C_Is_Enabled>

000d6b2a <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6b2a:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d6b2c:	2100      	movs	r1, #0
   d6b2e:	7c00      	ldrb	r0, [r0, #16]
   d6b30:	f7ff f976 	bl	d5e20 <HAL_I2C_Acquire>
}
   d6b34:	fab0 f080 	clz	r0, r0
   d6b38:	0940      	lsrs	r0, r0, #5
   d6b3a:	bd08      	pop	{r3, pc}

000d6b3c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6b3c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d6b3e:	2100      	movs	r1, #0
   d6b40:	7c00      	ldrb	r0, [r0, #16]
   d6b42:	f7ff f975 	bl	d5e30 <HAL_I2C_Release>
}
   d6b46:	fab0 f080 	clz	r0, r0
   d6b4a:	0940      	lsrs	r0, r0, #5
   d6b4c:	bd08      	pop	{r3, pc}

000d6b4e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6b4e:	4770      	bx	lr

000d6b50 <_ZN9IPAddressD0Ev>:
   d6b50:	b510      	push	{r4, lr}
   d6b52:	2118      	movs	r1, #24
   d6b54:	4604      	mov	r4, r0
   d6b56:	f000 ff3e 	bl	d79d6 <_ZdlPvj>
   d6b5a:	4620      	mov	r0, r4
   d6b5c:	bd10      	pop	{r4, pc}

000d6b5e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6b60:	7d03      	ldrb	r3, [r0, #20]
   d6b62:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6b64:	b08d      	sub	sp, #52	; 0x34
   d6b66:	460e      	mov	r6, r1
   d6b68:	f100 0704 	add.w	r7, r0, #4
   d6b6c:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6b70:	d002      	beq.n	d6b78 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6b72:	f100 0508 	add.w	r5, r0, #8
   d6b76:	e018      	b.n	d6baa <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6b78:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b7a:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6b7c:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b80:	232f      	movs	r3, #47	; 0x2f
   d6b82:	462a      	mov	r2, r5
   d6b84:	200a      	movs	r0, #10
   d6b86:	f7ff f95b 	bl	d5e40 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6b8a:	4628      	mov	r0, r5
   d6b8c:	f001 feed 	bl	d896a <strlen>
   d6b90:	6833      	ldr	r3, [r6, #0]
   d6b92:	4602      	mov	r2, r0
   d6b94:	68db      	ldr	r3, [r3, #12]
   d6b96:	4629      	mov	r1, r5
   d6b98:	4630      	mov	r0, r6
   d6b9a:	4798      	blx	r3
   d6b9c:	e00f      	b.n	d6bbe <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6b9e:	b124      	cbz	r4, d6baa <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6ba0:	212e      	movs	r1, #46	; 0x2e
   d6ba2:	4630      	mov	r0, r6
   d6ba4:	f000 f9dc 	bl	d6f60 <_ZN5Print5printEc>
   d6ba8:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6baa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6bae:	220a      	movs	r2, #10
   d6bb0:	4630      	mov	r0, r6
   d6bb2:	f000 fa1b 	bl	d6fec <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6bb6:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6bb8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6bba:	d1f0      	bne.n	d6b9e <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6bbc:	4620      	mov	r0, r4
    }
    return n;
}
   d6bbe:	b00d      	add	sp, #52	; 0x34
   d6bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6bc4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6bc4:	b510      	push	{r4, lr}
   d6bc6:	4b05      	ldr	r3, [pc, #20]	; (d6bdc <_ZN9IPAddressC1Ev+0x18>)
   d6bc8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6bca:	2211      	movs	r2, #17
   d6bcc:	f840 3b04 	str.w	r3, [r0], #4
   d6bd0:	2100      	movs	r1, #0
   d6bd2:	f001 fe6d 	bl	d88b0 <memset>
{
    clear();
}
   d6bd6:	4620      	mov	r0, r4
   d6bd8:	bd10      	pop	{r4, pc}
   d6bda:	bf00      	nop
   d6bdc:	000d9338 	.word	0x000d9338

000d6be0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6be0:	4603      	mov	r3, r0
   d6be2:	4a07      	ldr	r2, [pc, #28]	; (d6c00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6be4:	b510      	push	{r4, lr}
   d6be6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6bea:	f101 0210 	add.w	r2, r1, #16
   d6bee:	f851 4b04 	ldr.w	r4, [r1], #4
   d6bf2:	f843 4b04 	str.w	r4, [r3], #4
   d6bf6:	4291      	cmp	r1, r2
   d6bf8:	d1f9      	bne.n	d6bee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6bfa:	780a      	ldrb	r2, [r1, #0]
   d6bfc:	701a      	strb	r2, [r3, #0]
}
   d6bfe:	bd10      	pop	{r4, pc}
   d6c00:	000d9338 	.word	0x000d9338

000d6c04 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6c04:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6c06:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6c0a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6c0e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6c12:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6c16:	2304      	movs	r3, #4
   d6c18:	6041      	str	r1, [r0, #4]
   d6c1a:	7503      	strb	r3, [r0, #20]
   d6c1c:	bd10      	pop	{r4, pc}

000d6c1e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6c1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6c20:	780d      	ldrb	r5, [r1, #0]
   d6c22:	788b      	ldrb	r3, [r1, #2]
   d6c24:	784a      	ldrb	r2, [r1, #1]
   d6c26:	78c9      	ldrb	r1, [r1, #3]
   d6c28:	9100      	str	r1, [sp, #0]
   d6c2a:	4629      	mov	r1, r5
   d6c2c:	f7ff ffea 	bl	d6c04 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6c30:	b003      	add	sp, #12
   d6c32:	bd30      	pop	{r4, r5, pc}

000d6c34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6c34:	4b01      	ldr	r3, [pc, #4]	; (d6c3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6c36:	4a02      	ldr	r2, [pc, #8]	; (d6c40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6c38:	601a      	str	r2, [r3, #0]
   d6c3a:	4770      	bx	lr
   d6c3c:	2003e46c 	.word	0x2003e46c
   d6c40:	000d93b7 	.word	0x000d93b7

000d6c44 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6c44:	2200      	movs	r2, #0
   d6c46:	4611      	mov	r1, r2
   d6c48:	6840      	ldr	r0, [r0, #4]
   d6c4a:	f7ff ba85 	b.w	d6158 <network_listening>

000d6c4e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6c4e:	2200      	movs	r2, #0
   d6c50:	4611      	mov	r1, r2
   d6c52:	6840      	ldr	r0, [r0, #4]
   d6c54:	f7ff ba90 	b.w	d6178 <network_get_listen_timeout>

000d6c58 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6c58:	2200      	movs	r2, #0
   d6c5a:	6840      	ldr	r0, [r0, #4]
   d6c5c:	f7ff ba84 	b.w	d6168 <network_set_listen_timeout>

000d6c60 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6c60:	2200      	movs	r2, #0
   d6c62:	f081 0101 	eor.w	r1, r1, #1
   d6c66:	6840      	ldr	r0, [r0, #4]
   d6c68:	f7ff ba6e 	b.w	d6148 <network_listen>

000d6c6c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6c6c:	2300      	movs	r3, #0
   d6c6e:	461a      	mov	r2, r3
   d6c70:	2101      	movs	r1, #1
   d6c72:	6840      	ldr	r0, [r0, #4]
   d6c74:	f7ff ba60 	b.w	d6138 <network_off>

000d6c78 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6c78:	2300      	movs	r3, #0
   d6c7a:	461a      	mov	r2, r3
   d6c7c:	4619      	mov	r1, r3
   d6c7e:	6840      	ldr	r0, [r0, #4]
   d6c80:	f7ff ba52 	b.w	d6128 <network_on>

000d6c84 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6c84:	2200      	movs	r2, #0
   d6c86:	4611      	mov	r1, r2
   d6c88:	6840      	ldr	r0, [r0, #4]
   d6c8a:	f7ff ba45 	b.w	d6118 <network_ready>

000d6c8e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6c8e:	2200      	movs	r2, #0
   d6c90:	4611      	mov	r1, r2
   d6c92:	6840      	ldr	r0, [r0, #4]
   d6c94:	f7ff ba30 	b.w	d60f8 <network_connecting>

000d6c98 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6c98:	2200      	movs	r2, #0
   d6c9a:	2102      	movs	r1, #2
   d6c9c:	6840      	ldr	r0, [r0, #4]
   d6c9e:	f7ff ba33 	b.w	d6108 <network_disconnect>

000d6ca2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6ca2:	2300      	movs	r3, #0
   d6ca4:	461a      	mov	r2, r3
   d6ca6:	6840      	ldr	r0, [r0, #4]
   d6ca8:	f7ff ba1e 	b.w	d60e8 <network_connect>

000d6cac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6cac:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6cae:	4605      	mov	r5, r0
   d6cb0:	b188      	cbz	r0, d6cd6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6cb2:	6804      	ldr	r4, [r0, #0]
   d6cb4:	b14c      	cbz	r4, d6cca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6cb6:	68a3      	ldr	r3, [r4, #8]
   d6cb8:	b11b      	cbz	r3, d6cc2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6cba:	2203      	movs	r2, #3
   d6cbc:	4621      	mov	r1, r4
   d6cbe:	4620      	mov	r0, r4
   d6cc0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6cc2:	2110      	movs	r1, #16
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	f000 fe86 	bl	d79d6 <_ZdlPvj>
   d6cca:	4628      	mov	r0, r5
   d6ccc:	2114      	movs	r1, #20
      }
   d6cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6cd2:	f000 be80 	b.w	d79d6 <_ZdlPvj>
   d6cd6:	bd38      	pop	{r3, r4, r5, pc}

000d6cd8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6cd8:	b110      	cbz	r0, d6ce0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6cda:	6803      	ldr	r3, [r0, #0]
   d6cdc:	685b      	ldr	r3, [r3, #4]
   d6cde:	4718      	bx	r3
   d6ce0:	4770      	bx	lr

000d6ce2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6ce2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6ce4:	6803      	ldr	r3, [r0, #0]
   d6ce6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6ce8:	b1bb      	cbz	r3, d6d1a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6cea:	6858      	ldr	r0, [r3, #4]
   d6cec:	f7fe ffb8 	bl	d5c60 <os_thread_is_current>
   d6cf0:	b978      	cbnz	r0, d6d12 <_ZN6ThreadD1Ev+0x30>
   d6cf2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6cf4:	7c5a      	ldrb	r2, [r3, #17]
   d6cf6:	b912      	cbnz	r2, d6cfe <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6cf8:	6858      	ldr	r0, [r3, #4]
   d6cfa:	f7fe ffb9 	bl	d5c70 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6cfe:	6823      	ldr	r3, [r4, #0]
   d6d00:	6858      	ldr	r0, [r3, #4]
   d6d02:	f7fe ffbd 	bl	d5c80 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d06:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6d08:	2300      	movs	r3, #0
   d6d0a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6d0c:	b128      	cbz	r0, d6d1a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6d0e:	f7ff ffcd 	bl	d6cac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d12:	6820      	ldr	r0, [r4, #0]
   d6d14:	b108      	cbz	r0, d6d1a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6d16:	f7ff ffc9 	bl	d6cac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6d1a:	4620      	mov	r0, r4
   d6d1c:	bd10      	pop	{r4, pc}
	...

000d6d20 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6d20:	b538      	push	{r3, r4, r5, lr}
   d6d22:	4b0c      	ldr	r3, [pc, #48]	; (d6d54 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6d24:	6003      	str	r3, [r0, #0]
   d6d26:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d28:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6d2c:	b108      	cbz	r0, d6d32 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6d2e:	f7fd f9b8 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d32:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6d36:	b135      	cbz	r5, d6d46 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6d38:	4628      	mov	r0, r5
   d6d3a:	f7ff ffd2 	bl	d6ce2 <_ZN6ThreadD1Ev>
   d6d3e:	2104      	movs	r1, #4
   d6d40:	4628      	mov	r0, r5
   d6d42:	f000 fe48 	bl	d79d6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d46:	68a0      	ldr	r0, [r4, #8]
   d6d48:	b108      	cbz	r0, d6d4e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6d4a:	f7ff ffc5 	bl	d6cd8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6d4e:	4620      	mov	r0, r4
   d6d50:	bd38      	pop	{r3, r4, r5, pc}
   d6d52:	bf00      	nop
   d6d54:	000d942c 	.word	0x000d942c

000d6d58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6d58:	b538      	push	{r3, r4, r5, lr}
   d6d5a:	4c0e      	ldr	r4, [pc, #56]	; (d6d94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6d5c:	4b0e      	ldr	r3, [pc, #56]	; (d6d98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6d5e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6d60:	2500      	movs	r5, #0
   d6d62:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6d64:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6d68:	6063      	str	r3, [r4, #4]
   d6d6a:	60a5      	str	r5, [r4, #8]
   d6d6c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6d70:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6d74:	f7fe ffa4 	bl	d5cc0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6d78:	4b08      	ldr	r3, [pc, #32]	; (d6d9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6d7a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6d7e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6d82:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6d84:	4620      	mov	r0, r4
   d6d86:	4a06      	ldr	r2, [pc, #24]	; (d6da0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6d88:	4906      	ldr	r1, [pc, #24]	; (d6da4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6d8e:	f000 be1d 	b.w	d79cc <__aeabi_atexit>
   d6d92:	bf00      	nop
   d6d94:	2003e470 	.word	0x2003e470
   d6d98:	000d9460 	.word	0x000d9460
   d6d9c:	000d942c 	.word	0x000d942c
   d6da0:	2003df6c 	.word	0x2003df6c
   d6da4:	000d6d21 	.word	0x000d6d21

000d6da8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6da8:	2300      	movs	r3, #0
   d6daa:	461a      	mov	r2, r3
   d6dac:	6840      	ldr	r0, [r0, #4]
   d6dae:	f7ff b99b 	b.w	d60e8 <network_connect>

000d6db2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6db2:	2200      	movs	r2, #0
   d6db4:	2102      	movs	r1, #2
   d6db6:	6840      	ldr	r0, [r0, #4]
   d6db8:	f7ff b9a6 	b.w	d6108 <network_disconnect>

000d6dbc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6dbc:	2200      	movs	r2, #0
   d6dbe:	4611      	mov	r1, r2
   d6dc0:	6840      	ldr	r0, [r0, #4]
   d6dc2:	f7ff b999 	b.w	d60f8 <network_connecting>

000d6dc6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6dc6:	2200      	movs	r2, #0
   d6dc8:	4611      	mov	r1, r2
   d6dca:	6840      	ldr	r0, [r0, #4]
   d6dcc:	f7ff b9a4 	b.w	d6118 <network_ready>

000d6dd0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6dd0:	2300      	movs	r3, #0
   d6dd2:	461a      	mov	r2, r3
   d6dd4:	4619      	mov	r1, r3
   d6dd6:	6840      	ldr	r0, [r0, #4]
   d6dd8:	f7ff b9a6 	b.w	d6128 <network_on>

000d6ddc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6ddc:	2300      	movs	r3, #0
   d6dde:	461a      	mov	r2, r3
   d6de0:	4619      	mov	r1, r3
   d6de2:	6840      	ldr	r0, [r0, #4]
   d6de4:	f7ff b9a8 	b.w	d6138 <network_off>

000d6de8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6de8:	2200      	movs	r2, #0
   d6dea:	f081 0101 	eor.w	r1, r1, #1
   d6dee:	6840      	ldr	r0, [r0, #4]
   d6df0:	f7ff b9aa 	b.w	d6148 <network_listen>

000d6df4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6df4:	2200      	movs	r2, #0
   d6df6:	6840      	ldr	r0, [r0, #4]
   d6df8:	f7ff b9b6 	b.w	d6168 <network_set_listen_timeout>

000d6dfc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6dfc:	2200      	movs	r2, #0
   d6dfe:	4611      	mov	r1, r2
   d6e00:	6840      	ldr	r0, [r0, #4]
   d6e02:	f7ff b9b9 	b.w	d6178 <network_get_listen_timeout>

000d6e06 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6e06:	2200      	movs	r2, #0
   d6e08:	4611      	mov	r1, r2
   d6e0a:	6840      	ldr	r0, [r0, #4]
   d6e0c:	f7ff b9a4 	b.w	d6158 <network_listening>

000d6e10 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6e14:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6e16:	b095      	sub	sp, #84	; 0x54
   d6e18:	4616      	mov	r6, r2
   d6e1a:	460d      	mov	r5, r1
   d6e1c:	4607      	mov	r7, r0
    IPAddress addr;
   d6e1e:	f7ff fed1 	bl	d6bc4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6e22:	4621      	mov	r1, r4
   d6e24:	2220      	movs	r2, #32
   d6e26:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6e28:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6e2a:	f001 fd41 	bl	d88b0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6e2e:	2340      	movs	r3, #64	; 0x40
   d6e30:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6e32:	4621      	mov	r1, r4
   d6e34:	466b      	mov	r3, sp
   d6e36:	aa0c      	add	r2, sp, #48	; 0x30
   d6e38:	4630      	mov	r0, r6
   d6e3a:	f7ff f811 	bl	d5e60 <netdb_getaddrinfo>
    if (!r) {
   d6e3e:	4604      	mov	r4, r0
   d6e40:	2800      	cmp	r0, #0
   d6e42:	d144      	bne.n	d6ece <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6e44:	4602      	mov	r2, r0
   d6e46:	2101      	movs	r1, #1
   d6e48:	6868      	ldr	r0, [r5, #4]
   d6e4a:	f7ff f965 	bl	d6118 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6e4e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6e50:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6e52:	4622      	mov	r2, r4
   d6e54:	6868      	ldr	r0, [r5, #4]
   d6e56:	f7ff f95f 	bl	d6118 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6e5a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6e5c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6e5e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6e60:	2e00      	cmp	r6, #0
   d6e62:	d034      	beq.n	d6ece <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6e64:	2900      	cmp	r1, #0
   d6e66:	d132      	bne.n	d6ece <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6e68:	6873      	ldr	r3, [r6, #4]
   d6e6a:	2b02      	cmp	r3, #2
   d6e6c:	d002      	beq.n	d6e74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6e6e:	2b0a      	cmp	r3, #10
   d6e70:	d009      	beq.n	d6e86 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6e72:	e02a      	b.n	d6eca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6e74:	f1b8 0f00 	cmp.w	r8, #0
   d6e78:	d027      	beq.n	d6eca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6e7a:	6971      	ldr	r1, [r6, #20]
   d6e7c:	4638      	mov	r0, r7
   d6e7e:	3104      	adds	r1, #4
   d6e80:	f7ff fecd 	bl	d6c1e <_ZN9IPAddressaSEPKh>
   d6e84:	e020      	b.n	d6ec8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6e86:	f1b9 0f00 	cmp.w	r9, #0
   d6e8a:	d01e      	beq.n	d6eca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6e8c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6e8e:	2211      	movs	r2, #17
   d6e90:	a801      	add	r0, sp, #4
   d6e92:	f001 fd0d 	bl	d88b0 <memset>
                    a.v = 6;
   d6e96:	2306      	movs	r3, #6
   d6e98:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6e9c:	ad01      	add	r5, sp, #4
   d6e9e:	f104 0308 	add.w	r3, r4, #8
   d6ea2:	3418      	adds	r4, #24
   d6ea4:	6818      	ldr	r0, [r3, #0]
   d6ea6:	6859      	ldr	r1, [r3, #4]
   d6ea8:	462a      	mov	r2, r5
   d6eaa:	c203      	stmia	r2!, {r0, r1}
   d6eac:	3308      	adds	r3, #8
   d6eae:	42a3      	cmp	r3, r4
   d6eb0:	4615      	mov	r5, r2
   d6eb2:	d1f7      	bne.n	d6ea4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6eb4:	a901      	add	r1, sp, #4
   d6eb6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6eb8:	ad07      	add	r5, sp, #28
   d6eba:	f7ff fe91 	bl	d6be0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ec0:	1d3c      	adds	r4, r7, #4
   d6ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ec4:	682b      	ldr	r3, [r5, #0]
   d6ec6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6ec8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6eca:	69f6      	ldr	r6, [r6, #28]
   d6ecc:	e7c8      	b.n	d6e60 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6ece:	9800      	ldr	r0, [sp, #0]
   d6ed0:	f7fe ffbe 	bl	d5e50 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6ed4:	4638      	mov	r0, r7
   d6ed6:	b015      	add	sp, #84	; 0x54
   d6ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6edc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6edc:	4b02      	ldr	r3, [pc, #8]	; (d6ee8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6ede:	4a03      	ldr	r2, [pc, #12]	; (d6eec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6ee0:	601a      	str	r2, [r3, #0]
   d6ee2:	2200      	movs	r2, #0
   d6ee4:	605a      	str	r2, [r3, #4]
   d6ee6:	4770      	bx	lr
   d6ee8:	2003e644 	.word	0x2003e644
   d6eec:	000d9460 	.word	0x000d9460

000d6ef0 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d6ef0:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6ef2:	f000 fd29 	bl	d7948 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d6ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d6efa:	f7ff be16 	b.w	d6b2a <_ZN7TwoWire4lockEv>

000d6efe <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d6efe:	b510      	push	{r4, lr}
   d6f00:	4604      	mov	r4, r0
    lock_(_lock)
   d6f02:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d6f04:	b109      	cbz	r1, d6f0a <_ZN4PMICC1Eb+0xc>
        lock();
   d6f06:	f7ff fff3 	bl	d6ef0 <_ZN4PMIC4lockEv>
    }
}
   d6f0a:	4620      	mov	r0, r4
   d6f0c:	bd10      	pop	{r4, pc}

000d6f0e <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d6f0e:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6f10:	f000 fd1a 	bl	d7948 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d6f14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d6f18:	f7ff be10 	b.w	d6b3c <_ZN7TwoWire6unlockEv>

000d6f1c <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d6f1c:	b510      	push	{r4, lr}
{
    if (lock_) {
   d6f1e:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d6f20:	4604      	mov	r4, r0
{
    if (lock_) {
   d6f22:	b10b      	cbz	r3, d6f28 <_ZN4PMICD1Ev+0xc>
        unlock();
   d6f24:	f7ff fff3 	bl	d6f0e <_ZN4PMIC6unlockEv>
    }
}
   d6f28:	4620      	mov	r0, r4
   d6f2a:	bd10      	pop	{r4, pc}

000d6f2c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f2e:	4606      	mov	r6, r0
   d6f30:	460d      	mov	r5, r1
   d6f32:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6f34:	2400      	movs	r4, #0
  while (size--) {
   d6f36:	42bd      	cmp	r5, r7
   d6f38:	d00c      	beq.n	d6f54 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6f3a:	6833      	ldr	r3, [r6, #0]
   d6f3c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6f40:	689b      	ldr	r3, [r3, #8]
   d6f42:	4630      	mov	r0, r6
   d6f44:	4798      	blx	r3
     if (chunk>=0)
   d6f46:	2800      	cmp	r0, #0
   d6f48:	db01      	blt.n	d6f4e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6f4a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6f4c:	e7f3      	b.n	d6f36 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6f4e:	2c00      	cmp	r4, #0
   d6f50:	bf08      	it	eq
   d6f52:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6f54:	4620      	mov	r0, r4
   d6f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f58 <_ZN5Print5printEPKc>:
   d6f58:	b508      	push	{r3, lr}
   d6f5a:	f7fe f9db 	bl	d5314 <_ZN5Print5writeEPKc>
   d6f5e:	bd08      	pop	{r3, pc}

000d6f60 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6f60:	6803      	ldr	r3, [r0, #0]
   d6f62:	689b      	ldr	r3, [r3, #8]
   d6f64:	4718      	bx	r3

000d6f66 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6f66:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6f68:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6f6a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6f6c:	f7ff fff8 	bl	d6f60 <_ZN5Print5printEc>
  n += print('\n');
   d6f70:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6f72:	4604      	mov	r4, r0
  n += print('\n');
   d6f74:	4628      	mov	r0, r5
   d6f76:	f7ff fff3 	bl	d6f60 <_ZN5Print5printEc>
  return n;
}
   d6f7a:	4420      	add	r0, r4
   d6f7c:	bd38      	pop	{r3, r4, r5, pc}

000d6f7e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6f7e:	b538      	push	{r3, r4, r5, lr}
   d6f80:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6f82:	f7fe f9c7 	bl	d5314 <_ZN5Print5writeEPKc>
   d6f86:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6f88:	4628      	mov	r0, r5
   d6f8a:	f7ff ffec 	bl	d6f66 <_ZN5Print7printlnEv>
  return n;
}
   d6f8e:	4420      	add	r0, r4
   d6f90:	bd38      	pop	{r3, r4, r5, pc}

000d6f92 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6f92:	b530      	push	{r4, r5, lr}
   d6f94:	b08b      	sub	sp, #44	; 0x2c
   d6f96:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6f98:	2100      	movs	r1, #0
   d6f9a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6f9e:	2a01      	cmp	r2, #1
   d6fa0:	bf98      	it	ls
   d6fa2:	220a      	movls	r2, #10
   d6fa4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6fa8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6fac:	fb05 3312 	mls	r3, r5, r2, r3
   d6fb0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6fb4:	2b09      	cmp	r3, #9
   d6fb6:	bf94      	ite	ls
   d6fb8:	3330      	addls	r3, #48	; 0x30
   d6fba:	3337      	addhi	r3, #55	; 0x37
   d6fbc:	b2db      	uxtb	r3, r3
   d6fbe:	4621      	mov	r1, r4
   d6fc0:	f804 3901 	strb.w	r3, [r4], #-1
   d6fc4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6fc6:	2d00      	cmp	r5, #0
   d6fc8:	d1ee      	bne.n	d6fa8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6fca:	f7fe f9a3 	bl	d5314 <_ZN5Print5writeEPKc>
}
   d6fce:	b00b      	add	sp, #44	; 0x2c
   d6fd0:	bd30      	pop	{r4, r5, pc}

000d6fd2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6fd2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6fd4:	b92a      	cbnz	r2, d6fe2 <_ZN5Print5printEmi+0x10>
   d6fd6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6fdc:	689b      	ldr	r3, [r3, #8]
   d6fde:	b2c9      	uxtb	r1, r1
   d6fe0:	4718      	bx	r3
  else return printNumber(n, base);
   d6fe2:	b2d2      	uxtb	r2, r2
}
   d6fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6fe8:	f7ff bfd3 	b.w	d6f92 <_ZN5Print11printNumberEmh>

000d6fec <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6fec:	f7ff bff1 	b.w	d6fd2 <_ZN5Print5printEmi>

000d6ff0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ff4:	4607      	mov	r7, r0
   d6ff6:	460e      	mov	r6, r1
  if (base == 0) {
   d6ff8:	4615      	mov	r5, r2
   d6ffa:	b92a      	cbnz	r2, d7008 <_ZN5Print5printEli+0x18>
    return write(n);
   d6ffc:	6803      	ldr	r3, [r0, #0]
   d6ffe:	b2c9      	uxtb	r1, r1
   d7000:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d7002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d7006:	4718      	bx	r3
  } else if (base == 10) {
   d7008:	2a0a      	cmp	r2, #10
   d700a:	d102      	bne.n	d7012 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d700c:	2900      	cmp	r1, #0
   d700e:	da01      	bge.n	d7014 <_ZN5Print5printEli+0x24>
   d7010:	e004      	b.n	d701c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d7012:	b2d2      	uxtb	r2, r2
  }
}
   d7014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d7018:	f7ff bfbb 	b.w	d6f92 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d701c:	212d      	movs	r1, #45	; 0x2d
   d701e:	f7ff ff9f 	bl	d6f60 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d7022:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d7024:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d7026:	4271      	negs	r1, r6
   d7028:	4638      	mov	r0, r7
   d702a:	f7ff ffb2 	bl	d6f92 <_ZN5Print11printNumberEmh>
   d702e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d7030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7034 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d7034:	f7ff bfdc 	b.w	d6ff0 <_ZN5Print5printEli>

000d7038 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d703c:	ec57 6b10 	vmov	r6, r7, d0
   d7040:	4682      	mov	sl, r0
   d7042:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7044:	ee10 2a10 	vmov	r2, s0
   d7048:	463b      	mov	r3, r7
   d704a:	ee10 0a10 	vmov	r0, s0
   d704e:	4639      	mov	r1, r7
   d7050:	f001 fa60 	bl	d8514 <__aeabi_dcmpun>
   d7054:	b108      	cbz	r0, d705a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7056:	4948      	ldr	r1, [pc, #288]	; (d7178 <_ZN5Print10printFloatEdh+0x140>)
   d7058:	e012      	b.n	d7080 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d705a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d705e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7062:	4b46      	ldr	r3, [pc, #280]	; (d717c <_ZN5Print10printFloatEdh+0x144>)
   d7064:	4630      	mov	r0, r6
   d7066:	4649      	mov	r1, r9
   d7068:	f001 fa54 	bl	d8514 <__aeabi_dcmpun>
   d706c:	b968      	cbnz	r0, d708a <_ZN5Print10printFloatEdh+0x52>
   d706e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7072:	4b42      	ldr	r3, [pc, #264]	; (d717c <_ZN5Print10printFloatEdh+0x144>)
   d7074:	4630      	mov	r0, r6
   d7076:	4649      	mov	r1, r9
   d7078:	f001 fa2e 	bl	d84d8 <__aeabi_dcmple>
   d707c:	b928      	cbnz	r0, d708a <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d707e:	4940      	ldr	r1, [pc, #256]	; (d7180 <_ZN5Print10printFloatEdh+0x148>)
   d7080:	4650      	mov	r0, sl
   d7082:	f7fe f947 	bl	d5314 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d7086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d708a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d708e:	4b3d      	ldr	r3, [pc, #244]	; (d7184 <_ZN5Print10printFloatEdh+0x14c>)
   d7090:	4630      	mov	r0, r6
   d7092:	4639      	mov	r1, r7
   d7094:	f001 fa34 	bl	d8500 <__aeabi_dcmpgt>
   d7098:	b108      	cbz	r0, d709e <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d709a:	493b      	ldr	r1, [pc, #236]	; (d7188 <_ZN5Print10printFloatEdh+0x150>)
   d709c:	e7f0      	b.n	d7080 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d709e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d70a2:	4b3a      	ldr	r3, [pc, #232]	; (d718c <_ZN5Print10printFloatEdh+0x154>)
   d70a4:	4630      	mov	r0, r6
   d70a6:	4639      	mov	r1, r7
   d70a8:	f001 fa0c 	bl	d84c4 <__aeabi_dcmplt>
   d70ac:	2800      	cmp	r0, #0
   d70ae:	d1f4      	bne.n	d709a <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d70b0:	2200      	movs	r2, #0
   d70b2:	2300      	movs	r3, #0
   d70b4:	4630      	mov	r0, r6
   d70b6:	4639      	mov	r1, r7
   d70b8:	f001 fa04 	bl	d84c4 <__aeabi_dcmplt>
   d70bc:	b140      	cbz	r0, d70d0 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d70be:	212d      	movs	r1, #45	; 0x2d
   d70c0:	4650      	mov	r0, sl
   d70c2:	f7ff ff4d 	bl	d6f60 <_ZN5Print5printEc>
     number = -number;
   d70c6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d70ca:	4604      	mov	r4, r0
     number = -number;
   d70cc:	461f      	mov	r7, r3
   d70ce:	e000      	b.n	d70d2 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d70d0:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d70d2:	492f      	ldr	r1, [pc, #188]	; (d7190 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d70d4:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d70d8:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d70da:	fa5f f388 	uxtb.w	r3, r8
   d70de:	429d      	cmp	r5, r3
   d70e0:	d906      	bls.n	d70f0 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d70e2:	2200      	movs	r2, #0
   d70e4:	4b2b      	ldr	r3, [pc, #172]	; (d7194 <_ZN5Print10printFloatEdh+0x15c>)
   d70e6:	f001 f8a5 	bl	d8234 <__aeabi_ddiv>
   d70ea:	f108 0801 	add.w	r8, r8, #1
   d70ee:	e7f4      	b.n	d70da <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d70f0:	4632      	mov	r2, r6
   d70f2:	463b      	mov	r3, r7
   d70f4:	f000 fdc2 	bl	d7c7c <__adddf3>
   d70f8:	460f      	mov	r7, r1
   d70fa:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d70fc:	f001 fa48 	bl	d8590 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7100:	220a      	movs	r2, #10
   d7102:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d7104:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7106:	4650      	mov	r0, sl
   d7108:	f7ff ff43 	bl	d6f92 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d710c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d710e:	b37d      	cbz	r5, d7170 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d7110:	4640      	mov	r0, r8
   d7112:	f000 feef 	bl	d7ef4 <__aeabi_ui2d>
   d7116:	4602      	mov	r2, r0
   d7118:	460b      	mov	r3, r1
   d711a:	4630      	mov	r0, r6
   d711c:	4639      	mov	r1, r7
   d711e:	f000 fdab 	bl	d7c78 <__aeabi_dsub>
   d7122:	4606      	mov	r6, r0
   d7124:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7126:	4650      	mov	r0, sl
   d7128:	491b      	ldr	r1, [pc, #108]	; (d7198 <_ZN5Print10printFloatEdh+0x160>)
   d712a:	f7fe f8f3 	bl	d5314 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d712e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d7130:	4b18      	ldr	r3, [pc, #96]	; (d7194 <_ZN5Print10printFloatEdh+0x15c>)
   d7132:	2200      	movs	r2, #0
   d7134:	4630      	mov	r0, r6
   d7136:	4639      	mov	r1, r7
   d7138:	f000 ff52 	bl	d7fe0 <__aeabi_dmul>
   d713c:	460f      	mov	r7, r1
   d713e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d7140:	f001 f9fe 	bl	d8540 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d7144:	220a      	movs	r2, #10
   d7146:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d7148:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d714a:	4650      	mov	r0, sl
   d714c:	f7ff ff50 	bl	d6ff0 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d7150:	4404      	add	r4, r0
    remainder -= toPrint;
   d7152:	4640      	mov	r0, r8
   d7154:	f000 fede 	bl	d7f14 <__aeabi_i2d>
   d7158:	4602      	mov	r2, r0
   d715a:	460b      	mov	r3, r1
   d715c:	4630      	mov	r0, r6
   d715e:	4639      	mov	r1, r7
   d7160:	f000 fd8a 	bl	d7c78 <__aeabi_dsub>
   d7164:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d7166:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d716a:	4606      	mov	r6, r0
   d716c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d716e:	d1df      	bne.n	d7130 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d7170:	4620      	mov	r0, r4
   d7172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7176:	bf00      	nop
   d7178:	000d948c 	.word	0x000d948c
   d717c:	7fefffff 	.word	0x7fefffff
   d7180:	000d9496 	.word	0x000d9496
   d7184:	41efffff 	.word	0x41efffff
   d7188:	000d9490 	.word	0x000d9490
   d718c:	c1efffff 	.word	0xc1efffff
   d7190:	3fe00000 	.word	0x3fe00000
   d7194:	40240000 	.word	0x40240000
   d7198:	000d9494 	.word	0x000d9494

000d719c <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d719c:	b2c9      	uxtb	r1, r1
   d719e:	f7ff bf4b 	b.w	d7038 <_ZN5Print10printFloatEdh>

000d71a2 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d71a2:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d71a4:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d71a6:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d71a8:	f7ff ff46 	bl	d7038 <_ZN5Print10printFloatEdh>
   d71ac:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d71ae:	4628      	mov	r0, r5
   d71b0:	f7ff fed9 	bl	d6f66 <_ZN5Print7printlnEv>
  return n;
}
   d71b4:	4420      	add	r0, r4
   d71b6:	bd38      	pop	{r3, r4, r5, pc}

000d71b8 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d71b8:	b40c      	push	{r2, r3}
   d71ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d71be:	b087      	sub	sp, #28
   d71c0:	af00      	add	r7, sp, #0
   d71c2:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d71c6:	4605      	mov	r5, r0
   d71c8:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d71cc:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d71ce:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d71d0:	4623      	mov	r3, r4
   d71d2:	464a      	mov	r2, r9
   d71d4:	2114      	movs	r1, #20
   d71d6:	1d38      	adds	r0, r7, #4
   d71d8:	f7fe fff6 	bl	d61c8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d71dc:	2813      	cmp	r0, #19
   d71de:	d805      	bhi.n	d71ec <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d71e0:	1d39      	adds	r1, r7, #4
   d71e2:	4628      	mov	r0, r5
   d71e4:	f7fe f896 	bl	d5314 <_ZN5Print5writeEPKc>
   d71e8:	4604      	mov	r4, r0
   d71ea:	e013      	b.n	d7214 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d71ec:	f100 0308 	add.w	r3, r0, #8
   d71f0:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d71f4:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d71f6:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d71fa:	1c41      	adds	r1, r0, #1
   d71fc:	4623      	mov	r3, r4
   d71fe:	464a      	mov	r2, r9
   d7200:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7202:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7204:	f7fe ffe0 	bl	d61c8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7208:	4669      	mov	r1, sp
   d720a:	4628      	mov	r0, r5
   d720c:	f7fe f882 	bl	d5314 <_ZN5Print5writeEPKc>
   d7210:	4604      	mov	r4, r0
   d7212:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7214:	b11e      	cbz	r6, d721e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7216:	4628      	mov	r0, r5
   d7218:	f7ff fea5 	bl	d6f66 <_ZN5Print7printlnEv>
   d721c:	4404      	add	r4, r0
    return n;
}
   d721e:	4620      	mov	r0, r4
   d7220:	371c      	adds	r7, #28
   d7222:	46bd      	mov	sp, r7
   d7224:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7228:	b002      	add	sp, #8
   d722a:	4770      	bx	lr

000d722c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d722c:	b510      	push	{r4, lr}
   d722e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7230:	f7ff f87f 	bl	d6332 <_ZNSt14_Function_baseD1Ev>
   d7234:	4620      	mov	r0, r4
   d7236:	bd10      	pop	{r4, pc}

000d7238 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7238:	4803      	ldr	r0, [pc, #12]	; (d7248 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d723a:	4a04      	ldr	r2, [pc, #16]	; (d724c <_GLOBAL__sub_I_RGB+0x14>)
   d723c:	4904      	ldr	r1, [pc, #16]	; (d7250 <_GLOBAL__sub_I_RGB+0x18>)
   d723e:	2300      	movs	r3, #0
   d7240:	6083      	str	r3, [r0, #8]
   d7242:	f000 bbc3 	b.w	d79cc <__aeabi_atexit>
   d7246:	bf00      	nop
   d7248:	2003e64c 	.word	0x2003e64c
   d724c:	2003df6c 	.word	0x2003df6c
   d7250:	000d722d 	.word	0x000d722d

000d7254 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d7254:	4770      	bx	lr

000d7256 <_ZN8SPIClassD0Ev>:
   d7256:	b510      	push	{r4, lr}
   d7258:	2110      	movs	r1, #16
   d725a:	4604      	mov	r4, r0
   d725c:	f000 fbbb 	bl	d79d6 <_ZdlPvj>
   d7260:	4620      	mov	r0, r4
   d7262:	bd10      	pop	{r4, pc}

000d7264 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7264:	b570      	push	{r4, r5, r6, lr}
   d7266:	4b08      	ldr	r3, [pc, #32]	; (d7288 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d7268:	6003      	str	r3, [r0, #0]
   d726a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d726c:	2500      	movs	r5, #0
   d726e:	460e      	mov	r6, r1
   d7270:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d7274:	f7fe fd0c 	bl	d5c90 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d7278:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d727a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d727c:	f7fe fe08 	bl	d5e90 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d7280:	60a5      	str	r5, [r4, #8]
}
   d7282:	4620      	mov	r0, r4
   d7284:	bd70      	pop	{r4, r5, r6, pc}
   d7286:	bf00      	nop
   d7288:	000d94a4 	.word	0x000d94a4

000d728c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d728c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7290:	7900      	ldrb	r0, [r0, #4]
   d7292:	f7fe bded 	b.w	d5e70 <HAL_SPI_Begin>

000d7296 <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
   d7296:	68c0      	ldr	r0, [r0, #12]
   d7298:	f7fe bd0a 	b.w	d5cb0 <os_mutex_unlock>

000d729c <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d729c:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d729e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d72a0:	6018      	str	r0, [r3, #0]
   d72a2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d72a4:	6818      	ldr	r0, [r3, #0]
   d72a6:	4288      	cmp	r0, r1
   d72a8:	b2e5      	uxtb	r5, r4
   d72aa:	d906      	bls.n	d72ba <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d72ac:	3401      	adds	r4, #1
   d72ae:	2c08      	cmp	r4, #8
   d72b0:	d002      	beq.n	d72b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d72b2:	0840      	lsrs	r0, r0, #1
   d72b4:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d72b6:	e7f5      	b.n	d72a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d72b8:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d72ba:	4b02      	ldr	r3, [pc, #8]	; (d72c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d72bc:	5d5b      	ldrb	r3, [r3, r5]
   d72be:	7013      	strb	r3, [r2, #0]
   d72c0:	bd30      	pop	{r4, r5, pc}
   d72c2:	bf00      	nop
   d72c4:	000d94ac 	.word	0x000d94ac

000d72c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d72c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d72cc:	4680      	mov	r8, r0
   d72ce:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
   d72d0:	68c0      	ldr	r0, [r0, #12]
   d72d2:	460f      	mov	r7, r1
   d72d4:	f7fe fce4 	bl	d5ca0 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
   d72d8:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d72dc:	2214      	movs	r2, #20
   d72de:	2100      	movs	r1, #0
   d72e0:	a809      	add	r0, sp, #36	; 0x24
   d72e2:	f001 fae5 	bl	d88b0 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d72e6:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d72e8:	4620      	mov	r0, r4
   d72ea:	2200      	movs	r2, #0
   d72ec:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d72ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
   d72f2:	f7fe fddd 	bl	d5eb0 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
   d72f6:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d72fa:	b14c      	cbz	r4, d7310 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
   d72fc:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7300:	b92d      	cbnz	r5, d730e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d7302:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d7304:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7308:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d730c:	e003      	b.n	d7316 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d730e:	2400      	movs	r4, #0
   d7310:	46a1      	mov	r9, r4
   d7312:	4626      	mov	r6, r4
   d7314:	2501      	movs	r5, #1
   d7316:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7318:	b10d      	cbz	r5, d731e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
   d731a:	2b00      	cmp	r3, #0
   d731c:	d140      	bne.n	d73a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
   d731e:	429d      	cmp	r5, r3
   d7320:	d10b      	bne.n	d733a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
   d7322:	68ba      	ldr	r2, [r7, #8]
   d7324:	42b2      	cmp	r2, r6
   d7326:	d108      	bne.n	d733a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7328:	f88d 9020 	strb.w	r9, [sp, #32]
   d732c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7330:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d7334:	89ba      	ldrh	r2, [r7, #12]
   d7336:	4291      	cmp	r1, r2
   d7338:	d032      	beq.n	d73a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
   d733a:	bb23      	cbnz	r3, d7386 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
   d733c:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
   d7340:	f10d 020f 	add.w	r2, sp, #15
   d7344:	ab04      	add	r3, sp, #16
   d7346:	68b9      	ldr	r1, [r7, #8]
   d7348:	980a      	ldr	r0, [sp, #40]	; 0x28
   d734a:	f7ff ffa7 	bl	d729c <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d734e:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7350:	b105      	cbz	r5, d7354 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
   d7352:	bb13      	cbnz	r3, d739a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d7354:	42ab      	cmp	r3, r5
   d7356:	d009      	beq.n	d736c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
   d7358:	2100      	movs	r1, #0
   d735a:	7b3b      	ldrb	r3, [r7, #12]
   d735c:	9101      	str	r1, [sp, #4]
   d735e:	7b7c      	ldrb	r4, [r7, #13]
   d7360:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d7364:	f898 0004 	ldrb.w	r0, [r8, #4]
   d7368:	9400      	str	r4, [sp, #0]
   d736a:	e013      	b.n	d7394 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
   d736c:	68bb      	ldr	r3, [r7, #8]
   d736e:	42b3      	cmp	r3, r6
   d7370:	d3f2      	bcc.n	d7358 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7372:	f88d 9020 	strb.w	r9, [sp, #32]
   d7376:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d737a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d737e:	89bb      	ldrh	r3, [r7, #12]
   d7380:	429a      	cmp	r2, r3
   d7382:	d1e9      	bne.n	d7358 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
   d7384:	e009      	b.n	d739a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
   d7386:	2300      	movs	r3, #0
   d7388:	f898 0004 	ldrb.w	r0, [r8, #4]
   d738c:	9301      	str	r3, [sp, #4]
   d738e:	9300      	str	r3, [sp, #0]
   d7390:	461a      	mov	r2, r3
   d7392:	2101      	movs	r1, #1
   d7394:	f7fe fda4 	bl	d5ee0 <HAL_SPI_Set_Settings>
   d7398:	e002      	b.n	d73a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
   d739a:	9b04      	ldr	r3, [sp, #16]
   d739c:	42b3      	cmp	r3, r6
   d739e:	d1db      	bne.n	d7358 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
   d73a0:	2000      	movs	r0, #0
   d73a2:	b00f      	add	sp, #60	; 0x3c
   d73a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d73a8 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d73a8:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d73aa:	7900      	ldrb	r0, [r0, #4]
   d73ac:	f7fe fd68 	bl	d5e80 <HAL_SPI_Send_Receive_Data>
}
   d73b0:	b2c0      	uxtb	r0, r0
   d73b2:	bd08      	pop	{r3, pc}

000d73b4 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d73b4:	b530      	push	{r4, r5, lr}
   d73b6:	b087      	sub	sp, #28
   d73b8:	4604      	mov	r4, r0
   d73ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d73bc:	7900      	ldrb	r0, [r0, #4]
   d73be:	9500      	str	r5, [sp, #0]
   d73c0:	f7fe fd7e 	bl	d5ec0 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
   d73c4:	b93d      	cbnz	r5, d73d6 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d73c6:	a902      	add	r1, sp, #8
   d73c8:	7920      	ldrb	r0, [r4, #4]
   d73ca:	f7fe fd81 	bl	d5ed0 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
   d73ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d73d2:	07db      	lsls	r3, r3, #31
   d73d4:	d4f7      	bmi.n	d73c6 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
   d73d6:	b007      	add	sp, #28
   d73d8:	bd30      	pop	{r4, r5, pc}

000d73da <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d73da:	7900      	ldrb	r0, [r0, #4]
   d73dc:	f7fe bd60 	b.w	d5ea0 <HAL_SPI_Is_Enabled>

000d73e0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d73e0:	b510      	push	{r4, lr}
   d73e2:	4604      	mov	r4, r0
   d73e4:	4608      	mov	r0, r1
   d73e6:	4611      	mov	r1, r2
   d73e8:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d73ea:	2300      	movs	r3, #0
   d73ec:	f7fe fe10 	bl	d6010 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d73f0:	4b06      	ldr	r3, [pc, #24]	; (d740c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d73f2:	2200      	movs	r2, #0
   d73f4:	701a      	strb	r2, [r3, #0]
   d73f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d73fa:	8058      	strh	r0, [r3, #2]
   d73fc:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d73fe:	681a      	ldr	r2, [r3, #0]
   d7400:	889b      	ldrh	r3, [r3, #4]
   d7402:	6022      	str	r2, [r4, #0]
   d7404:	80a3      	strh	r3, [r4, #4]
}
   d7406:	4620      	mov	r0, r4
   d7408:	bd10      	pop	{r4, pc}
   d740a:	bf00      	nop
   d740c:	2003e65c 	.word	0x2003e65c

000d7410 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7410:	4b04      	ldr	r3, [pc, #16]	; (d7424 <_GLOBAL__sub_I_System+0x14>)
   d7412:	2000      	movs	r0, #0
   d7414:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7418:	7018      	strb	r0, [r3, #0]
   d741a:	8058      	strh	r0, [r3, #2]
   d741c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d741e:	f7fe bde7 	b.w	d5ff0 <set_system_mode>
   d7422:	bf00      	nop
   d7424:	2003e65c 	.word	0x2003e65c

000d7428 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7428:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d742a:	4b14      	ldr	r3, [pc, #80]	; (d747c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d742c:	4f14      	ldr	r7, [pc, #80]	; (d7480 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d742e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d7430:	4b14      	ldr	r3, [pc, #80]	; (d7484 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7432:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d7434:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d7436:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d7438:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d743a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d743c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d743e:	d01b      	beq.n	d7478 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d7440:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d7442:	ad01      	add	r5, sp, #4
   d7444:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d7448:	f001 f920 	bl	d868c <localtime>
	calendar_time->tm_year += 1900;
   d744c:	6943      	ldr	r3, [r0, #20]
   d744e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d7452:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d7454:	4604      	mov	r4, r0
   d7456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d745a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d745c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d745e:	f8d4 e000 	ldr.w	lr, [r4]
   d7462:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7466:	ad01      	add	r5, sp, #4
   d7468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d746a:	4c07      	ldr	r4, [pc, #28]	; (d7488 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d746c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d746e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7472:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7474:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d7478:	b00b      	add	sp, #44	; 0x2c
   d747a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d747c:	2003e694 	.word	0x2003e694
   d7480:	2003e690 	.word	0x2003e690
   d7484:	2003e68c 	.word	0x2003e68c
   d7488:	2003e664 	.word	0x2003e664

000d748c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d748c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d748e:	2000      	movs	r0, #0
   d7490:	f7fe fe1a 	bl	d60c8 <spark_sync_time_pending>
   d7494:	b128      	cbz	r0, d74a2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7496:	f7fe fe07 	bl	d60a8 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d749a:	f080 0001 	eor.w	r0, r0, #1
   d749e:	b2c0      	uxtb	r0, r0
   d74a0:	bd08      	pop	{r3, pc}
   d74a2:	2001      	movs	r0, #1
    }
   d74a4:	bd08      	pop	{r3, pc}

000d74a6 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d74a6:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d74a8:	2000      	movs	r0, #0
   d74aa:	f7fe fc31 	bl	d5d10 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d74ae:	4604      	mov	r4, r0
   d74b0:	b968      	cbnz	r0, d74ce <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d74b2:	f7fe fd95 	bl	d5fe0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d74b6:	2801      	cmp	r0, #1
   d74b8:	d10b      	bne.n	d74d2 <_ZN9TimeClass7isValidEv+0x2c>
   d74ba:	4620      	mov	r0, r4
   d74bc:	f7fe fdc8 	bl	d6050 <system_thread_get_state>
   d74c0:	b938      	cbnz	r0, d74d2 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d74c2:	f7ff ffe3 	bl	d748c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d74c6:	b930      	cbnz	r0, d74d6 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d74c8:	f7fe fdde 	bl	d6088 <spark_process>
   d74cc:	e7f9      	b.n	d74c2 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d74ce:	2001      	movs	r0, #1
   d74d0:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d74d2:	2000      	movs	r0, #0
   d74d4:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d74d6:	f7ff ffd9 	bl	d748c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d74da:	2000      	movs	r0, #0
   d74dc:	f7fe fc18 	bl	d5d10 <HAL_RTC_Time_Is_Valid>
   d74e0:	3000      	adds	r0, #0
   d74e2:	bf18      	it	ne
   d74e4:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d74e6:	bd10      	pop	{r4, pc}

000d74e8 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d74e8:	b508      	push	{r3, lr}
    (void)isValid();
   d74ea:	f7ff ffdc 	bl	d74a6 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d74ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d74f2:	f7fe bc05 	b.w	d5d00 <HAL_RTC_Get_UnixTime>
	...

000d74f8 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d74f8:	b508      	push	{r3, lr}
	return hour(now());
   d74fa:	f7ff fff5 	bl	d74e8 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d74fe:	f7ff ff93 	bl	d7428 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d7502:	4b01      	ldr	r3, [pc, #4]	; (d7508 <_ZN9TimeClass4hourEv+0x10>)
   d7504:	6898      	ldr	r0, [r3, #8]
   d7506:	bd08      	pop	{r3, pc}
   d7508:	2003e664 	.word	0x2003e664

000d750c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d750c:	4b02      	ldr	r3, [pc, #8]	; (d7518 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d750e:	681a      	ldr	r2, [r3, #0]
   d7510:	4b02      	ldr	r3, [pc, #8]	; (d751c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7512:	601a      	str	r2, [r3, #0]
   d7514:	4770      	bx	lr
   d7516:	bf00      	nop
   d7518:	2003deb4 	.word	0x2003deb4
   d751c:	2003e688 	.word	0x2003e688

000d7520 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7520:	4770      	bx	lr

000d7522 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7522:	7441      	strb	r1, [r0, #17]
   d7524:	4770      	bx	lr

000d7526 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7526:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7528:	7c00      	ldrb	r0, [r0, #16]
   d752a:	f7fe fd19 	bl	d5f60 <HAL_USART_Available_Data_For_Write>
}
   d752e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7532:	bd08      	pop	{r3, pc}

000d7534 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7534:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7536:	7c00      	ldrb	r0, [r0, #16]
   d7538:	f7fe fcea 	bl	d5f10 <HAL_USART_Available_Data>
}
   d753c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7540:	bd08      	pop	{r3, pc}

000d7542 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7542:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7544:	7c00      	ldrb	r0, [r0, #16]
   d7546:	f7fe fcf3 	bl	d5f30 <HAL_USART_Peek_Data>
}
   d754a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d754e:	bf28      	it	cs
   d7550:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7554:	bd08      	pop	{r3, pc}

000d7556 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7556:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7558:	7c00      	ldrb	r0, [r0, #16]
   d755a:	f7fe fce1 	bl	d5f20 <HAL_USART_Read_Data>
}
   d755e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7562:	bf28      	it	cs
   d7564:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7568:	bd08      	pop	{r3, pc}

000d756a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d756a:	7c00      	ldrb	r0, [r0, #16]
   d756c:	f7fe bce8 	b.w	d5f40 <HAL_USART_Flush_Data>

000d7570 <_ZN11USARTSerialD0Ev>:
   d7570:	b510      	push	{r4, lr}
   d7572:	2114      	movs	r1, #20
   d7574:	4604      	mov	r4, r0
   d7576:	f000 fa2e 	bl	d79d6 <_ZdlPvj>
   d757a:	4620      	mov	r0, r4
   d757c:	bd10      	pop	{r4, pc}

000d757e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d757e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7580:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7582:	4604      	mov	r4, r0
   d7584:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7586:	b925      	cbnz	r5, d7592 <_ZN11USARTSerial5writeEh+0x14>
   d7588:	7c00      	ldrb	r0, [r0, #16]
   d758a:	f7fe fce9 	bl	d5f60 <HAL_USART_Available_Data_For_Write>
   d758e:	2800      	cmp	r0, #0
   d7590:	dd05      	ble.n	d759e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7592:	4631      	mov	r1, r6
   d7594:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d759a:	f7fe bcb1 	b.w	d5f00 <HAL_USART_Write_Data>
  }
  return 0;
}
   d759e:	4628      	mov	r0, r5
   d75a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d75a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d75a4:	b510      	push	{r4, lr}
   d75a6:	4604      	mov	r4, r0
   d75a8:	4608      	mov	r0, r1
   d75aa:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d75ac:	2200      	movs	r2, #0
   d75ae:	6062      	str	r2, [r4, #4]
   d75b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d75b4:	60a2      	str	r2, [r4, #8]
   d75b6:	4a05      	ldr	r2, [pc, #20]	; (d75cc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d75b8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d75ba:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d75bc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d75be:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d75c0:	461a      	mov	r2, r3
   d75c2:	f7fe fc95 	bl	d5ef0 <HAL_USART_Init>
}
   d75c6:	4620      	mov	r0, r4
   d75c8:	bd10      	pop	{r4, pc}
   d75ca:	bf00      	nop
   d75cc:	000d94e4 	.word	0x000d94e4

000d75d0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d75d0:	7c00      	ldrb	r0, [r0, #16]
   d75d2:	f7fe bcbd 	b.w	d5f50 <HAL_USART_Is_Enabled>
	...

000d75d8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d75d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d75da:	4c19      	ldr	r4, [pc, #100]	; (d7640 <_Z22__fetch_global_Serial1v+0x68>)
   d75dc:	6825      	ldr	r5, [r4, #0]
   d75de:	b94d      	cbnz	r5, d75f4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d75e0:	2084      	movs	r0, #132	; 0x84
   d75e2:	f7fc fd5a 	bl	d409a <_Znwj>
   d75e6:	4606      	mov	r6, r0
   d75e8:	b118      	cbz	r0, d75f2 <_Z22__fetch_global_Serial1v+0x1a>
   d75ea:	2284      	movs	r2, #132	; 0x84
   d75ec:	4629      	mov	r1, r5
   d75ee:	f001 f95f 	bl	d88b0 <memset>
   d75f2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d75f4:	4d13      	ldr	r5, [pc, #76]	; (d7644 <_Z22__fetch_global_Serial1v+0x6c>)
   d75f6:	682e      	ldr	r6, [r5, #0]
   d75f8:	b94e      	cbnz	r6, d760e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d75fa:	2084      	movs	r0, #132	; 0x84
   d75fc:	f7fc fd4d 	bl	d409a <_Znwj>
   d7600:	4607      	mov	r7, r0
   d7602:	b118      	cbz	r0, d760c <_Z22__fetch_global_Serial1v+0x34>
   d7604:	2284      	movs	r2, #132	; 0x84
   d7606:	4631      	mov	r1, r6
   d7608:	f001 f952 	bl	d88b0 <memset>
   d760c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d760e:	4f0e      	ldr	r7, [pc, #56]	; (d7648 <_Z22__fetch_global_Serial1v+0x70>)
   d7610:	6839      	ldr	r1, [r7, #0]
   d7612:	f011 0601 	ands.w	r6, r1, #1
   d7616:	d111      	bne.n	d763c <_Z22__fetch_global_Serial1v+0x64>
   d7618:	4638      	mov	r0, r7
   d761a:	f7fc fd44 	bl	d40a6 <__cxa_guard_acquire>
   d761e:	b168      	cbz	r0, d763c <_Z22__fetch_global_Serial1v+0x64>
   d7620:	6822      	ldr	r2, [r4, #0]
   d7622:	682b      	ldr	r3, [r5, #0]
   d7624:	4809      	ldr	r0, [pc, #36]	; (d764c <_Z22__fetch_global_Serial1v+0x74>)
   d7626:	4631      	mov	r1, r6
   d7628:	f7ff ffbc 	bl	d75a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d762c:	4638      	mov	r0, r7
   d762e:	f7fc fd3f 	bl	d40b0 <__cxa_guard_release>
   d7632:	4a07      	ldr	r2, [pc, #28]	; (d7650 <_Z22__fetch_global_Serial1v+0x78>)
   d7634:	4907      	ldr	r1, [pc, #28]	; (d7654 <_Z22__fetch_global_Serial1v+0x7c>)
   d7636:	4805      	ldr	r0, [pc, #20]	; (d764c <_Z22__fetch_global_Serial1v+0x74>)
   d7638:	f000 f9c8 	bl	d79cc <__aeabi_atexit>
#endif
	return serial1;
}
   d763c:	4803      	ldr	r0, [pc, #12]	; (d764c <_Z22__fetch_global_Serial1v+0x74>)
   d763e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7640:	2003e6b4 	.word	0x2003e6b4
   d7644:	2003e6ac 	.word	0x2003e6ac
   d7648:	2003e6b0 	.word	0x2003e6b0
   d764c:	2003e698 	.word	0x2003e698
   d7650:	2003df6c 	.word	0x2003df6c
   d7654:	000d7521 	.word	0x000d7521

000d7658 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7658:	7441      	strb	r1, [r0, #17]
   d765a:	4770      	bx	lr

000d765c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d765c:	4770      	bx	lr

000d765e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d765e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7660:	2100      	movs	r1, #0
   d7662:	7c00      	ldrb	r0, [r0, #16]
   d7664:	f7fe fca4 	bl	d5fb0 <HAL_USB_USART_Receive_Data>
}
   d7668:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d766c:	bf28      	it	cs
   d766e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7672:	bd08      	pop	{r3, pc}

000d7674 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7674:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7676:	2101      	movs	r1, #1
   d7678:	7c00      	ldrb	r0, [r0, #16]
   d767a:	f7fe fc99 	bl	d5fb0 <HAL_USB_USART_Receive_Data>
}
   d767e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7682:	bf28      	it	cs
   d7684:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7688:	bd08      	pop	{r3, pc}

000d768a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d768a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d768c:	7c00      	ldrb	r0, [r0, #16]
   d768e:	f7fe fc87 	bl	d5fa0 <HAL_USB_USART_Available_Data_For_Write>
}
   d7692:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7696:	bd08      	pop	{r3, pc}

000d7698 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7698:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d769a:	7c00      	ldrb	r0, [r0, #16]
   d769c:	f7fe fc78 	bl	d5f90 <HAL_USB_USART_Available_Data>
}
   d76a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d76a4:	bd08      	pop	{r3, pc}

000d76a6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d76a6:	7c00      	ldrb	r0, [r0, #16]
   d76a8:	f7fe bc92 	b.w	d5fd0 <HAL_USB_USART_Flush_Data>

000d76ac <_ZN9USBSerialD0Ev>:
   d76ac:	b510      	push	{r4, lr}
   d76ae:	2114      	movs	r1, #20
   d76b0:	4604      	mov	r4, r0
   d76b2:	f000 f990 	bl	d79d6 <_ZdlPvj>
   d76b6:	4620      	mov	r0, r4
   d76b8:	bd10      	pop	{r4, pc}

000d76ba <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d76ba:	b538      	push	{r3, r4, r5, lr}
   d76bc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d76be:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d76c0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d76c2:	f7fe fc6d 	bl	d5fa0 <HAL_USB_USART_Available_Data_For_Write>
   d76c6:	2800      	cmp	r0, #0
   d76c8:	dc01      	bgt.n	d76ce <_ZN9USBSerial5writeEh+0x14>
   d76ca:	7c60      	ldrb	r0, [r4, #17]
   d76cc:	b128      	cbz	r0, d76da <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d76ce:	4629      	mov	r1, r5
   d76d0:	7c20      	ldrb	r0, [r4, #16]
   d76d2:	f7fe fc75 	bl	d5fc0 <HAL_USB_USART_Send_Data>
   d76d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d76da:	bd38      	pop	{r3, r4, r5, pc}

000d76dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d76dc:	b510      	push	{r4, lr}
   d76de:	4604      	mov	r4, r0
   d76e0:	2300      	movs	r3, #0
   d76e2:	6063      	str	r3, [r4, #4]
   d76e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d76e8:	60a3      	str	r3, [r4, #8]
   d76ea:	4b05      	ldr	r3, [pc, #20]	; (d7700 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d76ec:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d76ee:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d76f0:	4608      	mov	r0, r1
{
  _serial = serial;
   d76f2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d76f4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d76f6:	4611      	mov	r1, r2
   d76f8:	f7fe fc3a 	bl	d5f70 <HAL_USB_USART_Init>
}
   d76fc:	4620      	mov	r0, r4
   d76fe:	bd10      	pop	{r4, pc}
   d7700:	000d9514 	.word	0x000d9514

000d7704 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7704:	2200      	movs	r2, #0
   d7706:	7c00      	ldrb	r0, [r0, #16]
   d7708:	f7fe bc3a 	b.w	d5f80 <HAL_USB_USART_Begin>

000d770c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d770c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d770e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7710:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7712:	2100      	movs	r1, #0
   d7714:	f001 f8cc 	bl	d88b0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7718:	4620      	mov	r0, r4
   d771a:	bd10      	pop	{r4, pc}

000d771c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d771c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d771e:	4d0e      	ldr	r5, [pc, #56]	; (d7758 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7720:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7722:	a801      	add	r0, sp, #4
   d7724:	f7ff fff2 	bl	d770c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7728:	6829      	ldr	r1, [r5, #0]
   d772a:	f011 0401 	ands.w	r4, r1, #1
   d772e:	d110      	bne.n	d7752 <_Z16_fetch_usbserialv+0x36>
   d7730:	4628      	mov	r0, r5
   d7732:	f7fc fcb8 	bl	d40a6 <__cxa_guard_acquire>
   d7736:	b160      	cbz	r0, d7752 <_Z16_fetch_usbserialv+0x36>
   d7738:	aa01      	add	r2, sp, #4
   d773a:	4621      	mov	r1, r4
   d773c:	4807      	ldr	r0, [pc, #28]	; (d775c <_Z16_fetch_usbserialv+0x40>)
   d773e:	f7ff ffcd 	bl	d76dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7742:	4628      	mov	r0, r5
   d7744:	f7fc fcb4 	bl	d40b0 <__cxa_guard_release>
   d7748:	4a05      	ldr	r2, [pc, #20]	; (d7760 <_Z16_fetch_usbserialv+0x44>)
   d774a:	4906      	ldr	r1, [pc, #24]	; (d7764 <_Z16_fetch_usbserialv+0x48>)
   d774c:	4803      	ldr	r0, [pc, #12]	; (d775c <_Z16_fetch_usbserialv+0x40>)
   d774e:	f000 f93d 	bl	d79cc <__aeabi_atexit>
	return _usbserial;
}
   d7752:	4802      	ldr	r0, [pc, #8]	; (d775c <_Z16_fetch_usbserialv+0x40>)
   d7754:	b007      	add	sp, #28
   d7756:	bd30      	pop	{r4, r5, pc}
   d7758:	2003e6b8 	.word	0x2003e6b8
   d775c:	2003e6bc 	.word	0x2003e6bc
   d7760:	2003df6c 	.word	0x2003df6c
   d7764:	000d765d 	.word	0x000d765d

000d7768 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7768:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d776a:	4b0c      	ldr	r3, [pc, #48]	; (d779c <serialEventRun+0x34>)
   d776c:	b133      	cbz	r3, d777c <serialEventRun+0x14>
   d776e:	f7ff ffd5 	bl	d771c <_Z16_fetch_usbserialv>
   d7772:	6803      	ldr	r3, [r0, #0]
   d7774:	691b      	ldr	r3, [r3, #16]
   d7776:	4798      	blx	r3
   d7778:	2800      	cmp	r0, #0
   d777a:	dc09      	bgt.n	d7790 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d777c:	4b08      	ldr	r3, [pc, #32]	; (d77a0 <serialEventRun+0x38>)
   d777e:	b163      	cbz	r3, d779a <serialEventRun+0x32>
   d7780:	f7ff ff2a 	bl	d75d8 <_Z22__fetch_global_Serial1v>
   d7784:	6803      	ldr	r3, [r0, #0]
   d7786:	691b      	ldr	r3, [r3, #16]
   d7788:	4798      	blx	r3
   d778a:	2800      	cmp	r0, #0
   d778c:	dc03      	bgt.n	d7796 <serialEventRun+0x2e>
   d778e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7790:	f3af 8000 	nop.w
   d7794:	e7f2      	b.n	d777c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7796:	f3af 8000 	nop.w
   d779a:	bd08      	pop	{r3, pc}
	...

000d77a4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d77a4:	b508      	push	{r3, lr}
	serialEventRun();
   d77a6:	f7ff ffdf 	bl	d7768 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d77aa:	f7fe faa1 	bl	d5cf0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d77ae:	4b01      	ldr	r3, [pc, #4]	; (d77b4 <_post_loop+0x10>)
   d77b0:	6018      	str	r0, [r3, #0]
   d77b2:	bd08      	pop	{r3, pc}
   d77b4:	2003e6d4 	.word	0x2003e6d4

000d77b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d77b8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d77ba:	2300      	movs	r3, #0
   d77bc:	9300      	str	r3, [sp, #0]
   d77be:	461a      	mov	r2, r3
   d77c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d77c4:	f7fe fc56 	bl	d6074 <system_ctrl_set_result>
}
   d77c8:	b003      	add	sp, #12
   d77ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d77d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d77d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d77d2:	8843      	ldrh	r3, [r0, #2]
   d77d4:	2b0a      	cmp	r3, #10
   d77d6:	d008      	beq.n	d77ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d77d8:	2b50      	cmp	r3, #80	; 0x50
   d77da:	d109      	bne.n	d77f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d77dc:	4b09      	ldr	r3, [pc, #36]	; (d7804 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d77de:	681b      	ldr	r3, [r3, #0]
   d77e0:	b13b      	cbz	r3, d77f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d77e2:	b003      	add	sp, #12
   d77e4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d77e8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d77ea:	f7ff ffe5 	bl	d77b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d77ee:	e006      	b.n	d77fe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d77f0:	2300      	movs	r3, #0
   d77f2:	9300      	str	r3, [sp, #0]
   d77f4:	461a      	mov	r2, r3
   d77f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d77fa:	f7fe fc3b 	bl	d6074 <system_ctrl_set_result>
        break;
    }
}
   d77fe:	b003      	add	sp, #12
   d7800:	f85d fb04 	ldr.w	pc, [sp], #4
   d7804:	2003e6d0 	.word	0x2003e6d0

000d7808 <module_user_init_hook>:

void module_user_init_hook()
{
   d7808:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d780a:	f7fe fa61 	bl	d5cd0 <HAL_RNG_GetRandomNumber>
   d780e:	4604      	mov	r4, r0
    srand(seed);
   d7810:	f001 f856 	bl	d88c0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7814:	4b07      	ldr	r3, [pc, #28]	; (d7834 <module_user_init_hook+0x2c>)
   d7816:	b113      	cbz	r3, d781e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d7818:	4620      	mov	r0, r4
   d781a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d781e:	2100      	movs	r1, #0
   d7820:	4804      	ldr	r0, [pc, #16]	; (d7834 <module_user_init_hook+0x2c>)
   d7822:	f7fe fc59 	bl	d60d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7826:	2100      	movs	r1, #0
   d7828:	4803      	ldr	r0, [pc, #12]	; (d7838 <module_user_init_hook+0x30>)
}
   d782a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d782e:	f7fe bc17 	b.w	d6060 <system_ctrl_set_app_request_handler>
   d7832:	bf00      	nop
   d7834:	00000000 	.word	0x00000000
   d7838:	000d77d1 	.word	0x000d77d1

000d783c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d783c:	b510      	push	{r4, lr}
   d783e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7840:	480f      	ldr	r0, [pc, #60]	; (d7880 <pinAvailable+0x44>)
   d7842:	f7ff fdca 	bl	d73da <_ZN8SPIClass9isEnabledEv>
   d7846:	b128      	cbz	r0, d7854 <pinAvailable+0x18>
   d7848:	f1a4 030b 	sub.w	r3, r4, #11
   d784c:	2b02      	cmp	r3, #2
   d784e:	d801      	bhi.n	d7854 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7850:	2000      	movs	r0, #0
   d7852:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7854:	f000 f858 	bl	d7908 <_Z19__fetch_global_Wirev>
   d7858:	f7ff f963 	bl	d6b22 <_ZN7TwoWire9isEnabledEv>
   d785c:	b108      	cbz	r0, d7862 <pinAvailable+0x26>
   d785e:	2c01      	cmp	r4, #1
   d7860:	d9f6      	bls.n	d7850 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7862:	f7ff feb9 	bl	d75d8 <_Z22__fetch_global_Serial1v>
   d7866:	f7ff feb3 	bl	d75d0 <_ZN11USARTSerial9isEnabledEv>
   d786a:	b118      	cbz	r0, d7874 <pinAvailable+0x38>
   d786c:	f1a4 0309 	sub.w	r3, r4, #9
   d7870:	2b01      	cmp	r3, #1
   d7872:	d9ed      	bls.n	d7850 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7874:	2c23      	cmp	r4, #35	; 0x23
   d7876:	bf8c      	ite	hi
   d7878:	2000      	movhi	r0, #0
   d787a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d787c:	bd10      	pop	{r4, pc}
   d787e:	bf00      	nop
   d7880:	2003e708 	.word	0x2003e708

000d7884 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7884:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7886:	b538      	push	{r3, r4, r5, lr}
   d7888:	4604      	mov	r4, r0
   d788a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d788c:	d80a      	bhi.n	d78a4 <pinMode+0x20>
   d788e:	29ff      	cmp	r1, #255	; 0xff
   d7890:	d008      	beq.n	d78a4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7892:	f7ff ffd3 	bl	d783c <pinAvailable>
   d7896:	b128      	cbz	r0, d78a4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7898:	4629      	mov	r1, r5
   d789a:	4620      	mov	r0, r4
}
   d789c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d78a0:	f7fe ba4e 	b.w	d5d40 <HAL_Pin_Mode>
   d78a4:	bd38      	pop	{r3, r4, r5, pc}

000d78a6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d78a6:	b538      	push	{r3, r4, r5, lr}
   d78a8:	4604      	mov	r4, r0
   d78aa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d78ac:	f7fe fa50 	bl	d5d50 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d78b0:	28ff      	cmp	r0, #255	; 0xff
   d78b2:	d010      	beq.n	d78d6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d78b4:	2806      	cmp	r0, #6
   d78b6:	d804      	bhi.n	d78c2 <digitalWrite+0x1c>
   d78b8:	234d      	movs	r3, #77	; 0x4d
   d78ba:	fa23 f000 	lsr.w	r0, r3, r0
   d78be:	07c3      	lsls	r3, r0, #31
   d78c0:	d409      	bmi.n	d78d6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d78c2:	4620      	mov	r0, r4
   d78c4:	f7ff ffba 	bl	d783c <pinAvailable>
   d78c8:	b128      	cbz	r0, d78d6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d78ca:	4629      	mov	r1, r5
   d78cc:	4620      	mov	r0, r4
}
   d78ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d78d2:	f7fe ba45 	b.w	d5d60 <HAL_GPIO_Write>
   d78d6:	bd38      	pop	{r3, r4, r5, pc}

000d78d8 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d78d8:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d78da:	b510      	push	{r4, lr}
   d78dc:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d78de:	bf9c      	itt	ls
   d78e0:	340e      	addls	r4, #14
   d78e2:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d78e4:	4620      	mov	r0, r4
   d78e6:	f7ff ffa9 	bl	d783c <pinAvailable>
   d78ea:	b150      	cbz	r0, d7902 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d78ec:	2103      	movs	r1, #3
   d78ee:	4620      	mov	r0, r4
   d78f0:	f7fe fa1e 	bl	d5d30 <HAL_Validate_Pin_Function>
   d78f4:	2803      	cmp	r0, #3
   d78f6:	d104      	bne.n	d7902 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d78f8:	4620      	mov	r0, r4
}
   d78fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d78fe:	f7fe ba37 	b.w	d5d70 <HAL_ADC_Read>
}
   d7902:	2000      	movs	r0, #0
   d7904:	bd10      	pop	{r4, pc}
	...

000d7908 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7908:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d790a:	4d0b      	ldr	r5, [pc, #44]	; (d7938 <_Z19__fetch_global_Wirev+0x30>)
   d790c:	6829      	ldr	r1, [r5, #0]
   d790e:	f011 0401 	ands.w	r4, r1, #1
   d7912:	d10f      	bne.n	d7934 <_Z19__fetch_global_Wirev+0x2c>
   d7914:	4628      	mov	r0, r5
   d7916:	f7fc fbc6 	bl	d40a6 <__cxa_guard_acquire>
   d791a:	b158      	cbz	r0, d7934 <_Z19__fetch_global_Wirev+0x2c>
   d791c:	4621      	mov	r1, r4
   d791e:	4807      	ldr	r0, [pc, #28]	; (d793c <_Z19__fetch_global_Wirev+0x34>)
   d7920:	f7ff f8d4 	bl	d6acc <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7924:	4628      	mov	r0, r5
   d7926:	f7fc fbc3 	bl	d40b0 <__cxa_guard_release>
   d792a:	4a05      	ldr	r2, [pc, #20]	; (d7940 <_Z19__fetch_global_Wirev+0x38>)
   d792c:	4905      	ldr	r1, [pc, #20]	; (d7944 <_Z19__fetch_global_Wirev+0x3c>)
   d792e:	4803      	ldr	r0, [pc, #12]	; (d793c <_Z19__fetch_global_Wirev+0x34>)
   d7930:	f000 f84c 	bl	d79cc <__aeabi_atexit>
	return wire;
}
   d7934:	4801      	ldr	r0, [pc, #4]	; (d793c <_Z19__fetch_global_Wirev+0x34>)
   d7936:	bd38      	pop	{r3, r4, r5, pc}
   d7938:	2003e6d8 	.word	0x2003e6d8
   d793c:	2003e6f0 	.word	0x2003e6f0
   d7940:	2003df6c 	.word	0x2003df6c
   d7944:	000d6a75 	.word	0x000d6a75

000d7948 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7948:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d794a:	4c0b      	ldr	r4, [pc, #44]	; (d7978 <_Z20__fetch_global_Wire1v+0x30>)
   d794c:	6823      	ldr	r3, [r4, #0]
   d794e:	07db      	lsls	r3, r3, #31
   d7950:	d40f      	bmi.n	d7972 <_Z20__fetch_global_Wire1v+0x2a>
   d7952:	4620      	mov	r0, r4
   d7954:	f7fc fba7 	bl	d40a6 <__cxa_guard_acquire>
   d7958:	b158      	cbz	r0, d7972 <_Z20__fetch_global_Wire1v+0x2a>
   d795a:	2101      	movs	r1, #1
   d795c:	4807      	ldr	r0, [pc, #28]	; (d797c <_Z20__fetch_global_Wire1v+0x34>)
   d795e:	f7ff f8b5 	bl	d6acc <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7962:	4620      	mov	r0, r4
   d7964:	f7fc fba4 	bl	d40b0 <__cxa_guard_release>
   d7968:	4a05      	ldr	r2, [pc, #20]	; (d7980 <_Z20__fetch_global_Wire1v+0x38>)
   d796a:	4906      	ldr	r1, [pc, #24]	; (d7984 <_Z20__fetch_global_Wire1v+0x3c>)
   d796c:	4803      	ldr	r0, [pc, #12]	; (d797c <_Z20__fetch_global_Wire1v+0x34>)
   d796e:	f000 f82d 	bl	d79cc <__aeabi_atexit>
	return wire;
}
   d7972:	4802      	ldr	r0, [pc, #8]	; (d797c <_Z20__fetch_global_Wire1v+0x34>)
   d7974:	bd10      	pop	{r4, pc}
   d7976:	bf00      	nop
   d7978:	2003e704 	.word	0x2003e704
   d797c:	2003e6dc 	.word	0x2003e6dc
   d7980:	2003df6c 	.word	0x2003df6c
   d7984:	000d6a75 	.word	0x000d6a75

000d7988 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7988:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d798a:	4c0c      	ldr	r4, [pc, #48]	; (d79bc <_GLOBAL__sub_I_SPI+0x34>)
   d798c:	4e0c      	ldr	r6, [pc, #48]	; (d79c0 <_GLOBAL__sub_I_SPI+0x38>)
   d798e:	4d0d      	ldr	r5, [pc, #52]	; (d79c4 <_GLOBAL__sub_I_SPI+0x3c>)
   d7990:	2100      	movs	r1, #0
   d7992:	4620      	mov	r0, r4
   d7994:	f7ff fc66 	bl	d7264 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7998:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d799a:	4c0b      	ldr	r4, [pc, #44]	; (d79c8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d799c:	4632      	mov	r2, r6
   d799e:	4629      	mov	r1, r5
   d79a0:	f000 f814 	bl	d79cc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d79a4:	2101      	movs	r1, #1
   d79a6:	4620      	mov	r0, r4
   d79a8:	f7ff fc5c 	bl	d7264 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d79ac:	4632      	mov	r2, r6
   d79ae:	4629      	mov	r1, r5
   d79b0:	4620      	mov	r0, r4
   d79b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d79b6:	f000 b809 	b.w	d79cc <__aeabi_atexit>
   d79ba:	bf00      	nop
   d79bc:	2003e708 	.word	0x2003e708
   d79c0:	2003df6c 	.word	0x2003df6c
   d79c4:	000d7255 	.word	0x000d7255
   d79c8:	2003e718 	.word	0x2003e718

000d79cc <__aeabi_atexit>:
   d79cc:	460b      	mov	r3, r1
   d79ce:	4601      	mov	r1, r0
   d79d0:	4618      	mov	r0, r3
   d79d2:	f000 be4d 	b.w	d8670 <__cxa_atexit>

000d79d6 <_ZdlPvj>:
   d79d6:	f7fc bb62 	b.w	d409e <_ZdlPv>

000d79da <_ZSt25__throw_bad_function_callv>:
   d79da:	b508      	push	{r3, lr}
   d79dc:	f7fe fbfc 	bl	d61d8 <abort>

000d79e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d79e0:	4b24      	ldr	r3, [pc, #144]	; (d7a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d79e2:	681a      	ldr	r2, [r3, #0]
   d79e4:	07d0      	lsls	r0, r2, #31
   d79e6:	bf5c      	itt	pl
   d79e8:	2201      	movpl	r2, #1
   d79ea:	601a      	strpl	r2, [r3, #0]
   d79ec:	4b22      	ldr	r3, [pc, #136]	; (d7a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d79ee:	681a      	ldr	r2, [r3, #0]
   d79f0:	07d1      	lsls	r1, r2, #31
   d79f2:	bf5c      	itt	pl
   d79f4:	2201      	movpl	r2, #1
   d79f6:	601a      	strpl	r2, [r3, #0]
   d79f8:	4b20      	ldr	r3, [pc, #128]	; (d7a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d79fa:	681a      	ldr	r2, [r3, #0]
   d79fc:	07d2      	lsls	r2, r2, #31
   d79fe:	bf5c      	itt	pl
   d7a00:	2201      	movpl	r2, #1
   d7a02:	601a      	strpl	r2, [r3, #0]
   d7a04:	4b1e      	ldr	r3, [pc, #120]	; (d7a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7a06:	681a      	ldr	r2, [r3, #0]
   d7a08:	07d0      	lsls	r0, r2, #31
   d7a0a:	bf5c      	itt	pl
   d7a0c:	2201      	movpl	r2, #1
   d7a0e:	601a      	strpl	r2, [r3, #0]
   d7a10:	4b1c      	ldr	r3, [pc, #112]	; (d7a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7a12:	681a      	ldr	r2, [r3, #0]
   d7a14:	07d1      	lsls	r1, r2, #31
   d7a16:	bf5c      	itt	pl
   d7a18:	2201      	movpl	r2, #1
   d7a1a:	601a      	strpl	r2, [r3, #0]
   d7a1c:	4b1a      	ldr	r3, [pc, #104]	; (d7a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7a1e:	681a      	ldr	r2, [r3, #0]
   d7a20:	07d2      	lsls	r2, r2, #31
   d7a22:	bf5c      	itt	pl
   d7a24:	2201      	movpl	r2, #1
   d7a26:	601a      	strpl	r2, [r3, #0]
   d7a28:	4b18      	ldr	r3, [pc, #96]	; (d7a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7a2a:	681a      	ldr	r2, [r3, #0]
   d7a2c:	07d0      	lsls	r0, r2, #31
   d7a2e:	bf5c      	itt	pl
   d7a30:	2201      	movpl	r2, #1
   d7a32:	601a      	strpl	r2, [r3, #0]
   d7a34:	4b16      	ldr	r3, [pc, #88]	; (d7a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7a36:	681a      	ldr	r2, [r3, #0]
   d7a38:	07d1      	lsls	r1, r2, #31
   d7a3a:	bf5c      	itt	pl
   d7a3c:	2201      	movpl	r2, #1
   d7a3e:	601a      	strpl	r2, [r3, #0]
   d7a40:	4b14      	ldr	r3, [pc, #80]	; (d7a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7a42:	681a      	ldr	r2, [r3, #0]
   d7a44:	07d2      	lsls	r2, r2, #31
   d7a46:	bf5c      	itt	pl
   d7a48:	2201      	movpl	r2, #1
   d7a4a:	601a      	strpl	r2, [r3, #0]
   d7a4c:	4b12      	ldr	r3, [pc, #72]	; (d7a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7a4e:	681a      	ldr	r2, [r3, #0]
   d7a50:	07d0      	lsls	r0, r2, #31
   d7a52:	bf5c      	itt	pl
   d7a54:	2201      	movpl	r2, #1
   d7a56:	601a      	strpl	r2, [r3, #0]
   d7a58:	4b10      	ldr	r3, [pc, #64]	; (d7a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7a5a:	681a      	ldr	r2, [r3, #0]
   d7a5c:	07d1      	lsls	r1, r2, #31
   d7a5e:	bf5c      	itt	pl
   d7a60:	2201      	movpl	r2, #1
   d7a62:	601a      	strpl	r2, [r3, #0]
   d7a64:	4b0e      	ldr	r3, [pc, #56]	; (d7aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7a66:	681a      	ldr	r2, [r3, #0]
   d7a68:	07d2      	lsls	r2, r2, #31
   d7a6a:	bf5c      	itt	pl
   d7a6c:	2201      	movpl	r2, #1
   d7a6e:	601a      	strpl	r2, [r3, #0]
   d7a70:	4770      	bx	lr
   d7a72:	bf00      	nop
   d7a74:	2003e754 	.word	0x2003e754
   d7a78:	2003e750 	.word	0x2003e750
   d7a7c:	2003e74c 	.word	0x2003e74c
   d7a80:	2003e748 	.word	0x2003e748
   d7a84:	2003e744 	.word	0x2003e744
   d7a88:	2003e740 	.word	0x2003e740
   d7a8c:	2003e73c 	.word	0x2003e73c
   d7a90:	2003e738 	.word	0x2003e738
   d7a94:	2003e734 	.word	0x2003e734
   d7a98:	2003e730 	.word	0x2003e730
   d7a9c:	2003e72c 	.word	0x2003e72c
   d7aa0:	2003e728 	.word	0x2003e728

000d7aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7aa4:	4b18      	ldr	r3, [pc, #96]	; (d7b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7aa6:	681a      	ldr	r2, [r3, #0]
   d7aa8:	07d1      	lsls	r1, r2, #31
   d7aaa:	bf5c      	itt	pl
   d7aac:	2201      	movpl	r2, #1
   d7aae:	601a      	strpl	r2, [r3, #0]
   d7ab0:	4b16      	ldr	r3, [pc, #88]	; (d7b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7ab2:	681a      	ldr	r2, [r3, #0]
   d7ab4:	07d2      	lsls	r2, r2, #31
   d7ab6:	bf5c      	itt	pl
   d7ab8:	2201      	movpl	r2, #1
   d7aba:	601a      	strpl	r2, [r3, #0]
   d7abc:	4b14      	ldr	r3, [pc, #80]	; (d7b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7abe:	681a      	ldr	r2, [r3, #0]
   d7ac0:	07d0      	lsls	r0, r2, #31
   d7ac2:	bf5c      	itt	pl
   d7ac4:	2201      	movpl	r2, #1
   d7ac6:	601a      	strpl	r2, [r3, #0]
   d7ac8:	4b12      	ldr	r3, [pc, #72]	; (d7b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7aca:	681a      	ldr	r2, [r3, #0]
   d7acc:	07d1      	lsls	r1, r2, #31
   d7ace:	bf5c      	itt	pl
   d7ad0:	2201      	movpl	r2, #1
   d7ad2:	601a      	strpl	r2, [r3, #0]
   d7ad4:	4b10      	ldr	r3, [pc, #64]	; (d7b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7ad6:	681a      	ldr	r2, [r3, #0]
   d7ad8:	07d2      	lsls	r2, r2, #31
   d7ada:	bf5c      	itt	pl
   d7adc:	2201      	movpl	r2, #1
   d7ade:	601a      	strpl	r2, [r3, #0]
   d7ae0:	4b0e      	ldr	r3, [pc, #56]	; (d7b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7ae2:	681a      	ldr	r2, [r3, #0]
   d7ae4:	07d0      	lsls	r0, r2, #31
   d7ae6:	bf5c      	itt	pl
   d7ae8:	2201      	movpl	r2, #1
   d7aea:	601a      	strpl	r2, [r3, #0]
   d7aec:	4b0c      	ldr	r3, [pc, #48]	; (d7b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7aee:	681a      	ldr	r2, [r3, #0]
   d7af0:	07d1      	lsls	r1, r2, #31
   d7af2:	bf5c      	itt	pl
   d7af4:	2201      	movpl	r2, #1
   d7af6:	601a      	strpl	r2, [r3, #0]
   d7af8:	4b0a      	ldr	r3, [pc, #40]	; (d7b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7afa:	681a      	ldr	r2, [r3, #0]
   d7afc:	07d2      	lsls	r2, r2, #31
   d7afe:	bf5c      	itt	pl
   d7b00:	2201      	movpl	r2, #1
   d7b02:	601a      	strpl	r2, [r3, #0]
   d7b04:	4770      	bx	lr
   d7b06:	bf00      	nop
   d7b08:	2003e774 	.word	0x2003e774
   d7b0c:	2003e770 	.word	0x2003e770
   d7b10:	2003e76c 	.word	0x2003e76c
   d7b14:	2003e768 	.word	0x2003e768
   d7b18:	2003e764 	.word	0x2003e764
   d7b1c:	2003e760 	.word	0x2003e760
   d7b20:	2003e75c 	.word	0x2003e75c
   d7b24:	2003e758 	.word	0x2003e758

000d7b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7b28:	4b18      	ldr	r3, [pc, #96]	; (d7b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7b2a:	681a      	ldr	r2, [r3, #0]
   d7b2c:	07d1      	lsls	r1, r2, #31
   d7b2e:	bf5c      	itt	pl
   d7b30:	2201      	movpl	r2, #1
   d7b32:	601a      	strpl	r2, [r3, #0]
   d7b34:	4b16      	ldr	r3, [pc, #88]	; (d7b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7b36:	681a      	ldr	r2, [r3, #0]
   d7b38:	07d2      	lsls	r2, r2, #31
   d7b3a:	bf5c      	itt	pl
   d7b3c:	2201      	movpl	r2, #1
   d7b3e:	601a      	strpl	r2, [r3, #0]
   d7b40:	4b14      	ldr	r3, [pc, #80]	; (d7b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7b42:	681a      	ldr	r2, [r3, #0]
   d7b44:	07d0      	lsls	r0, r2, #31
   d7b46:	bf5c      	itt	pl
   d7b48:	2201      	movpl	r2, #1
   d7b4a:	601a      	strpl	r2, [r3, #0]
   d7b4c:	4b12      	ldr	r3, [pc, #72]	; (d7b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7b4e:	681a      	ldr	r2, [r3, #0]
   d7b50:	07d1      	lsls	r1, r2, #31
   d7b52:	bf5c      	itt	pl
   d7b54:	2201      	movpl	r2, #1
   d7b56:	601a      	strpl	r2, [r3, #0]
   d7b58:	4b10      	ldr	r3, [pc, #64]	; (d7b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7b5a:	681a      	ldr	r2, [r3, #0]
   d7b5c:	07d2      	lsls	r2, r2, #31
   d7b5e:	bf5c      	itt	pl
   d7b60:	2201      	movpl	r2, #1
   d7b62:	601a      	strpl	r2, [r3, #0]
   d7b64:	4b0e      	ldr	r3, [pc, #56]	; (d7ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7b66:	681a      	ldr	r2, [r3, #0]
   d7b68:	07d0      	lsls	r0, r2, #31
   d7b6a:	bf5c      	itt	pl
   d7b6c:	2201      	movpl	r2, #1
   d7b6e:	601a      	strpl	r2, [r3, #0]
   d7b70:	4b0c      	ldr	r3, [pc, #48]	; (d7ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7b72:	681a      	ldr	r2, [r3, #0]
   d7b74:	07d1      	lsls	r1, r2, #31
   d7b76:	bf5c      	itt	pl
   d7b78:	2201      	movpl	r2, #1
   d7b7a:	601a      	strpl	r2, [r3, #0]
   d7b7c:	4b0a      	ldr	r3, [pc, #40]	; (d7ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7b7e:	681a      	ldr	r2, [r3, #0]
   d7b80:	07d2      	lsls	r2, r2, #31
   d7b82:	bf5c      	itt	pl
   d7b84:	2201      	movpl	r2, #1
   d7b86:	601a      	strpl	r2, [r3, #0]
   d7b88:	4770      	bx	lr
   d7b8a:	bf00      	nop
   d7b8c:	2003e794 	.word	0x2003e794
   d7b90:	2003e790 	.word	0x2003e790
   d7b94:	2003e78c 	.word	0x2003e78c
   d7b98:	2003e788 	.word	0x2003e788
   d7b9c:	2003e784 	.word	0x2003e784
   d7ba0:	2003e780 	.word	0x2003e780
   d7ba4:	2003e77c 	.word	0x2003e77c
   d7ba8:	2003e778 	.word	0x2003e778

000d7bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7bac:	4b24      	ldr	r3, [pc, #144]	; (d7c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7bae:	681a      	ldr	r2, [r3, #0]
   d7bb0:	07d0      	lsls	r0, r2, #31
   d7bb2:	bf5c      	itt	pl
   d7bb4:	2201      	movpl	r2, #1
   d7bb6:	601a      	strpl	r2, [r3, #0]
   d7bb8:	4b22      	ldr	r3, [pc, #136]	; (d7c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7bba:	681a      	ldr	r2, [r3, #0]
   d7bbc:	07d1      	lsls	r1, r2, #31
   d7bbe:	bf5c      	itt	pl
   d7bc0:	2201      	movpl	r2, #1
   d7bc2:	601a      	strpl	r2, [r3, #0]
   d7bc4:	4b20      	ldr	r3, [pc, #128]	; (d7c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7bc6:	681a      	ldr	r2, [r3, #0]
   d7bc8:	07d2      	lsls	r2, r2, #31
   d7bca:	bf5c      	itt	pl
   d7bcc:	2201      	movpl	r2, #1
   d7bce:	601a      	strpl	r2, [r3, #0]
   d7bd0:	4b1e      	ldr	r3, [pc, #120]	; (d7c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7bd2:	681a      	ldr	r2, [r3, #0]
   d7bd4:	07d0      	lsls	r0, r2, #31
   d7bd6:	bf5c      	itt	pl
   d7bd8:	2201      	movpl	r2, #1
   d7bda:	601a      	strpl	r2, [r3, #0]
   d7bdc:	4b1c      	ldr	r3, [pc, #112]	; (d7c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7bde:	681a      	ldr	r2, [r3, #0]
   d7be0:	07d1      	lsls	r1, r2, #31
   d7be2:	bf5c      	itt	pl
   d7be4:	2201      	movpl	r2, #1
   d7be6:	601a      	strpl	r2, [r3, #0]
   d7be8:	4b1a      	ldr	r3, [pc, #104]	; (d7c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7bea:	681a      	ldr	r2, [r3, #0]
   d7bec:	07d2      	lsls	r2, r2, #31
   d7bee:	bf5c      	itt	pl
   d7bf0:	2201      	movpl	r2, #1
   d7bf2:	601a      	strpl	r2, [r3, #0]
   d7bf4:	4b18      	ldr	r3, [pc, #96]	; (d7c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7bf6:	681a      	ldr	r2, [r3, #0]
   d7bf8:	07d0      	lsls	r0, r2, #31
   d7bfa:	bf5c      	itt	pl
   d7bfc:	2201      	movpl	r2, #1
   d7bfe:	601a      	strpl	r2, [r3, #0]
   d7c00:	4b16      	ldr	r3, [pc, #88]	; (d7c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7c02:	681a      	ldr	r2, [r3, #0]
   d7c04:	07d1      	lsls	r1, r2, #31
   d7c06:	bf5c      	itt	pl
   d7c08:	2201      	movpl	r2, #1
   d7c0a:	601a      	strpl	r2, [r3, #0]
   d7c0c:	4b14      	ldr	r3, [pc, #80]	; (d7c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7c0e:	681a      	ldr	r2, [r3, #0]
   d7c10:	07d2      	lsls	r2, r2, #31
   d7c12:	bf5c      	itt	pl
   d7c14:	2201      	movpl	r2, #1
   d7c16:	601a      	strpl	r2, [r3, #0]
   d7c18:	4b12      	ldr	r3, [pc, #72]	; (d7c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7c1a:	681a      	ldr	r2, [r3, #0]
   d7c1c:	07d0      	lsls	r0, r2, #31
   d7c1e:	bf5c      	itt	pl
   d7c20:	2201      	movpl	r2, #1
   d7c22:	601a      	strpl	r2, [r3, #0]
   d7c24:	4b10      	ldr	r3, [pc, #64]	; (d7c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7c26:	681a      	ldr	r2, [r3, #0]
   d7c28:	07d1      	lsls	r1, r2, #31
   d7c2a:	bf5c      	itt	pl
   d7c2c:	2201      	movpl	r2, #1
   d7c2e:	601a      	strpl	r2, [r3, #0]
   d7c30:	4b0e      	ldr	r3, [pc, #56]	; (d7c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7c32:	681a      	ldr	r2, [r3, #0]
   d7c34:	07d2      	lsls	r2, r2, #31
   d7c36:	bf5c      	itt	pl
   d7c38:	2201      	movpl	r2, #1
   d7c3a:	601a      	strpl	r2, [r3, #0]
   d7c3c:	4770      	bx	lr
   d7c3e:	bf00      	nop
   d7c40:	2003e7c4 	.word	0x2003e7c4
   d7c44:	2003e7c0 	.word	0x2003e7c0
   d7c48:	2003e7bc 	.word	0x2003e7bc
   d7c4c:	2003e7b8 	.word	0x2003e7b8
   d7c50:	2003e7b4 	.word	0x2003e7b4
   d7c54:	2003e7b0 	.word	0x2003e7b0
   d7c58:	2003e7ac 	.word	0x2003e7ac
   d7c5c:	2003e7a8 	.word	0x2003e7a8
   d7c60:	2003e7a4 	.word	0x2003e7a4
   d7c64:	2003e7a0 	.word	0x2003e7a0
   d7c68:	2003e79c 	.word	0x2003e79c
   d7c6c:	2003e798 	.word	0x2003e798

000d7c70 <__aeabi_drsub>:
   d7c70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7c74:	e002      	b.n	d7c7c <__adddf3>
   d7c76:	bf00      	nop

000d7c78 <__aeabi_dsub>:
   d7c78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7c7c <__adddf3>:
   d7c7c:	b530      	push	{r4, r5, lr}
   d7c7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7c82:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7c86:	ea94 0f05 	teq	r4, r5
   d7c8a:	bf08      	it	eq
   d7c8c:	ea90 0f02 	teqeq	r0, r2
   d7c90:	bf1f      	itttt	ne
   d7c92:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7c96:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7c9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7c9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7ca2:	f000 80e2 	beq.w	d7e6a <__adddf3+0x1ee>
   d7ca6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7caa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7cae:	bfb8      	it	lt
   d7cb0:	426d      	neglt	r5, r5
   d7cb2:	dd0c      	ble.n	d7cce <__adddf3+0x52>
   d7cb4:	442c      	add	r4, r5
   d7cb6:	ea80 0202 	eor.w	r2, r0, r2
   d7cba:	ea81 0303 	eor.w	r3, r1, r3
   d7cbe:	ea82 0000 	eor.w	r0, r2, r0
   d7cc2:	ea83 0101 	eor.w	r1, r3, r1
   d7cc6:	ea80 0202 	eor.w	r2, r0, r2
   d7cca:	ea81 0303 	eor.w	r3, r1, r3
   d7cce:	2d36      	cmp	r5, #54	; 0x36
   d7cd0:	bf88      	it	hi
   d7cd2:	bd30      	pophi	{r4, r5, pc}
   d7cd4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7cd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7cdc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7ce0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7ce4:	d002      	beq.n	d7cec <__adddf3+0x70>
   d7ce6:	4240      	negs	r0, r0
   d7ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7cec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7cf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7cf4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7cf8:	d002      	beq.n	d7d00 <__adddf3+0x84>
   d7cfa:	4252      	negs	r2, r2
   d7cfc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7d00:	ea94 0f05 	teq	r4, r5
   d7d04:	f000 80a7 	beq.w	d7e56 <__adddf3+0x1da>
   d7d08:	f1a4 0401 	sub.w	r4, r4, #1
   d7d0c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7d10:	db0d      	blt.n	d7d2e <__adddf3+0xb2>
   d7d12:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7d16:	fa22 f205 	lsr.w	r2, r2, r5
   d7d1a:	1880      	adds	r0, r0, r2
   d7d1c:	f141 0100 	adc.w	r1, r1, #0
   d7d20:	fa03 f20e 	lsl.w	r2, r3, lr
   d7d24:	1880      	adds	r0, r0, r2
   d7d26:	fa43 f305 	asr.w	r3, r3, r5
   d7d2a:	4159      	adcs	r1, r3
   d7d2c:	e00e      	b.n	d7d4c <__adddf3+0xd0>
   d7d2e:	f1a5 0520 	sub.w	r5, r5, #32
   d7d32:	f10e 0e20 	add.w	lr, lr, #32
   d7d36:	2a01      	cmp	r2, #1
   d7d38:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7d3c:	bf28      	it	cs
   d7d3e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7d42:	fa43 f305 	asr.w	r3, r3, r5
   d7d46:	18c0      	adds	r0, r0, r3
   d7d48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7d4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7d50:	d507      	bpl.n	d7d62 <__adddf3+0xe6>
   d7d52:	f04f 0e00 	mov.w	lr, #0
   d7d56:	f1dc 0c00 	rsbs	ip, ip, #0
   d7d5a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7d5e:	eb6e 0101 	sbc.w	r1, lr, r1
   d7d62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7d66:	d31b      	bcc.n	d7da0 <__adddf3+0x124>
   d7d68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7d6c:	d30c      	bcc.n	d7d88 <__adddf3+0x10c>
   d7d6e:	0849      	lsrs	r1, r1, #1
   d7d70:	ea5f 0030 	movs.w	r0, r0, rrx
   d7d74:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7d78:	f104 0401 	add.w	r4, r4, #1
   d7d7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7d80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7d84:	f080 809a 	bcs.w	d7ebc <__adddf3+0x240>
   d7d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7d8c:	bf08      	it	eq
   d7d8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7d92:	f150 0000 	adcs.w	r0, r0, #0
   d7d96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7d9a:	ea41 0105 	orr.w	r1, r1, r5
   d7d9e:	bd30      	pop	{r4, r5, pc}
   d7da0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7da4:	4140      	adcs	r0, r0
   d7da6:	eb41 0101 	adc.w	r1, r1, r1
   d7daa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7dae:	f1a4 0401 	sub.w	r4, r4, #1
   d7db2:	d1e9      	bne.n	d7d88 <__adddf3+0x10c>
   d7db4:	f091 0f00 	teq	r1, #0
   d7db8:	bf04      	itt	eq
   d7dba:	4601      	moveq	r1, r0
   d7dbc:	2000      	moveq	r0, #0
   d7dbe:	fab1 f381 	clz	r3, r1
   d7dc2:	bf08      	it	eq
   d7dc4:	3320      	addeq	r3, #32
   d7dc6:	f1a3 030b 	sub.w	r3, r3, #11
   d7dca:	f1b3 0220 	subs.w	r2, r3, #32
   d7dce:	da0c      	bge.n	d7dea <__adddf3+0x16e>
   d7dd0:	320c      	adds	r2, #12
   d7dd2:	dd08      	ble.n	d7de6 <__adddf3+0x16a>
   d7dd4:	f102 0c14 	add.w	ip, r2, #20
   d7dd8:	f1c2 020c 	rsb	r2, r2, #12
   d7ddc:	fa01 f00c 	lsl.w	r0, r1, ip
   d7de0:	fa21 f102 	lsr.w	r1, r1, r2
   d7de4:	e00c      	b.n	d7e00 <__adddf3+0x184>
   d7de6:	f102 0214 	add.w	r2, r2, #20
   d7dea:	bfd8      	it	le
   d7dec:	f1c2 0c20 	rsble	ip, r2, #32
   d7df0:	fa01 f102 	lsl.w	r1, r1, r2
   d7df4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7df8:	bfdc      	itt	le
   d7dfa:	ea41 010c 	orrle.w	r1, r1, ip
   d7dfe:	4090      	lslle	r0, r2
   d7e00:	1ae4      	subs	r4, r4, r3
   d7e02:	bfa2      	ittt	ge
   d7e04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7e08:	4329      	orrge	r1, r5
   d7e0a:	bd30      	popge	{r4, r5, pc}
   d7e0c:	ea6f 0404 	mvn.w	r4, r4
   d7e10:	3c1f      	subs	r4, #31
   d7e12:	da1c      	bge.n	d7e4e <__adddf3+0x1d2>
   d7e14:	340c      	adds	r4, #12
   d7e16:	dc0e      	bgt.n	d7e36 <__adddf3+0x1ba>
   d7e18:	f104 0414 	add.w	r4, r4, #20
   d7e1c:	f1c4 0220 	rsb	r2, r4, #32
   d7e20:	fa20 f004 	lsr.w	r0, r0, r4
   d7e24:	fa01 f302 	lsl.w	r3, r1, r2
   d7e28:	ea40 0003 	orr.w	r0, r0, r3
   d7e2c:	fa21 f304 	lsr.w	r3, r1, r4
   d7e30:	ea45 0103 	orr.w	r1, r5, r3
   d7e34:	bd30      	pop	{r4, r5, pc}
   d7e36:	f1c4 040c 	rsb	r4, r4, #12
   d7e3a:	f1c4 0220 	rsb	r2, r4, #32
   d7e3e:	fa20 f002 	lsr.w	r0, r0, r2
   d7e42:	fa01 f304 	lsl.w	r3, r1, r4
   d7e46:	ea40 0003 	orr.w	r0, r0, r3
   d7e4a:	4629      	mov	r1, r5
   d7e4c:	bd30      	pop	{r4, r5, pc}
   d7e4e:	fa21 f004 	lsr.w	r0, r1, r4
   d7e52:	4629      	mov	r1, r5
   d7e54:	bd30      	pop	{r4, r5, pc}
   d7e56:	f094 0f00 	teq	r4, #0
   d7e5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7e5e:	bf06      	itte	eq
   d7e60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7e64:	3401      	addeq	r4, #1
   d7e66:	3d01      	subne	r5, #1
   d7e68:	e74e      	b.n	d7d08 <__adddf3+0x8c>
   d7e6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7e6e:	bf18      	it	ne
   d7e70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7e74:	d029      	beq.n	d7eca <__adddf3+0x24e>
   d7e76:	ea94 0f05 	teq	r4, r5
   d7e7a:	bf08      	it	eq
   d7e7c:	ea90 0f02 	teqeq	r0, r2
   d7e80:	d005      	beq.n	d7e8e <__adddf3+0x212>
   d7e82:	ea54 0c00 	orrs.w	ip, r4, r0
   d7e86:	bf04      	itt	eq
   d7e88:	4619      	moveq	r1, r3
   d7e8a:	4610      	moveq	r0, r2
   d7e8c:	bd30      	pop	{r4, r5, pc}
   d7e8e:	ea91 0f03 	teq	r1, r3
   d7e92:	bf1e      	ittt	ne
   d7e94:	2100      	movne	r1, #0
   d7e96:	2000      	movne	r0, #0
   d7e98:	bd30      	popne	{r4, r5, pc}
   d7e9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7e9e:	d105      	bne.n	d7eac <__adddf3+0x230>
   d7ea0:	0040      	lsls	r0, r0, #1
   d7ea2:	4149      	adcs	r1, r1
   d7ea4:	bf28      	it	cs
   d7ea6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7eaa:	bd30      	pop	{r4, r5, pc}
   d7eac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7eb0:	bf3c      	itt	cc
   d7eb2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7eb6:	bd30      	popcc	{r4, r5, pc}
   d7eb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7ebc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7ec0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7ec4:	f04f 0000 	mov.w	r0, #0
   d7ec8:	bd30      	pop	{r4, r5, pc}
   d7eca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7ece:	bf1a      	itte	ne
   d7ed0:	4619      	movne	r1, r3
   d7ed2:	4610      	movne	r0, r2
   d7ed4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7ed8:	bf1c      	itt	ne
   d7eda:	460b      	movne	r3, r1
   d7edc:	4602      	movne	r2, r0
   d7ede:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7ee2:	bf06      	itte	eq
   d7ee4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7ee8:	ea91 0f03 	teqeq	r1, r3
   d7eec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7ef0:	bd30      	pop	{r4, r5, pc}
   d7ef2:	bf00      	nop

000d7ef4 <__aeabi_ui2d>:
   d7ef4:	f090 0f00 	teq	r0, #0
   d7ef8:	bf04      	itt	eq
   d7efa:	2100      	moveq	r1, #0
   d7efc:	4770      	bxeq	lr
   d7efe:	b530      	push	{r4, r5, lr}
   d7f00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7f04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7f08:	f04f 0500 	mov.w	r5, #0
   d7f0c:	f04f 0100 	mov.w	r1, #0
   d7f10:	e750      	b.n	d7db4 <__adddf3+0x138>
   d7f12:	bf00      	nop

000d7f14 <__aeabi_i2d>:
   d7f14:	f090 0f00 	teq	r0, #0
   d7f18:	bf04      	itt	eq
   d7f1a:	2100      	moveq	r1, #0
   d7f1c:	4770      	bxeq	lr
   d7f1e:	b530      	push	{r4, r5, lr}
   d7f20:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7f24:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7f28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7f2c:	bf48      	it	mi
   d7f2e:	4240      	negmi	r0, r0
   d7f30:	f04f 0100 	mov.w	r1, #0
   d7f34:	e73e      	b.n	d7db4 <__adddf3+0x138>
   d7f36:	bf00      	nop

000d7f38 <__aeabi_f2d>:
   d7f38:	0042      	lsls	r2, r0, #1
   d7f3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7f3e:	ea4f 0131 	mov.w	r1, r1, rrx
   d7f42:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7f46:	bf1f      	itttt	ne
   d7f48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7f4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7f50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7f54:	4770      	bxne	lr
   d7f56:	f092 0f00 	teq	r2, #0
   d7f5a:	bf14      	ite	ne
   d7f5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7f60:	4770      	bxeq	lr
   d7f62:	b530      	push	{r4, r5, lr}
   d7f64:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7f68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7f6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7f70:	e720      	b.n	d7db4 <__adddf3+0x138>
   d7f72:	bf00      	nop

000d7f74 <__aeabi_ul2d>:
   d7f74:	ea50 0201 	orrs.w	r2, r0, r1
   d7f78:	bf08      	it	eq
   d7f7a:	4770      	bxeq	lr
   d7f7c:	b530      	push	{r4, r5, lr}
   d7f7e:	f04f 0500 	mov.w	r5, #0
   d7f82:	e00a      	b.n	d7f9a <__aeabi_l2d+0x16>

000d7f84 <__aeabi_l2d>:
   d7f84:	ea50 0201 	orrs.w	r2, r0, r1
   d7f88:	bf08      	it	eq
   d7f8a:	4770      	bxeq	lr
   d7f8c:	b530      	push	{r4, r5, lr}
   d7f8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7f92:	d502      	bpl.n	d7f9a <__aeabi_l2d+0x16>
   d7f94:	4240      	negs	r0, r0
   d7f96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7f9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7f9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7fa2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7fa6:	f43f aedc 	beq.w	d7d62 <__adddf3+0xe6>
   d7faa:	f04f 0203 	mov.w	r2, #3
   d7fae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7fb2:	bf18      	it	ne
   d7fb4:	3203      	addne	r2, #3
   d7fb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7fba:	bf18      	it	ne
   d7fbc:	3203      	addne	r2, #3
   d7fbe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7fc2:	f1c2 0320 	rsb	r3, r2, #32
   d7fc6:	fa00 fc03 	lsl.w	ip, r0, r3
   d7fca:	fa20 f002 	lsr.w	r0, r0, r2
   d7fce:	fa01 fe03 	lsl.w	lr, r1, r3
   d7fd2:	ea40 000e 	orr.w	r0, r0, lr
   d7fd6:	fa21 f102 	lsr.w	r1, r1, r2
   d7fda:	4414      	add	r4, r2
   d7fdc:	e6c1      	b.n	d7d62 <__adddf3+0xe6>
   d7fde:	bf00      	nop

000d7fe0 <__aeabi_dmul>:
   d7fe0:	b570      	push	{r4, r5, r6, lr}
   d7fe2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7fe6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7fea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7fee:	bf1d      	ittte	ne
   d7ff0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7ff4:	ea94 0f0c 	teqne	r4, ip
   d7ff8:	ea95 0f0c 	teqne	r5, ip
   d7ffc:	f000 f8de 	bleq	d81bc <__aeabi_dmul+0x1dc>
   d8000:	442c      	add	r4, r5
   d8002:	ea81 0603 	eor.w	r6, r1, r3
   d8006:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d800a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d800e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8012:	bf18      	it	ne
   d8014:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8018:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d801c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8020:	d038      	beq.n	d8094 <__aeabi_dmul+0xb4>
   d8022:	fba0 ce02 	umull	ip, lr, r0, r2
   d8026:	f04f 0500 	mov.w	r5, #0
   d802a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d802e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8032:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8036:	f04f 0600 	mov.w	r6, #0
   d803a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d803e:	f09c 0f00 	teq	ip, #0
   d8042:	bf18      	it	ne
   d8044:	f04e 0e01 	orrne.w	lr, lr, #1
   d8048:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d804c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8050:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8054:	d204      	bcs.n	d8060 <__aeabi_dmul+0x80>
   d8056:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d805a:	416d      	adcs	r5, r5
   d805c:	eb46 0606 	adc.w	r6, r6, r6
   d8060:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8064:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8068:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d806c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8070:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8074:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8078:	bf88      	it	hi
   d807a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d807e:	d81e      	bhi.n	d80be <__aeabi_dmul+0xde>
   d8080:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8084:	bf08      	it	eq
   d8086:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d808a:	f150 0000 	adcs.w	r0, r0, #0
   d808e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8092:	bd70      	pop	{r4, r5, r6, pc}
   d8094:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8098:	ea46 0101 	orr.w	r1, r6, r1
   d809c:	ea40 0002 	orr.w	r0, r0, r2
   d80a0:	ea81 0103 	eor.w	r1, r1, r3
   d80a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d80a8:	bfc2      	ittt	gt
   d80aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d80ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d80b2:	bd70      	popgt	{r4, r5, r6, pc}
   d80b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d80b8:	f04f 0e00 	mov.w	lr, #0
   d80bc:	3c01      	subs	r4, #1
   d80be:	f300 80ab 	bgt.w	d8218 <__aeabi_dmul+0x238>
   d80c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d80c6:	bfde      	ittt	le
   d80c8:	2000      	movle	r0, #0
   d80ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d80ce:	bd70      	pople	{r4, r5, r6, pc}
   d80d0:	f1c4 0400 	rsb	r4, r4, #0
   d80d4:	3c20      	subs	r4, #32
   d80d6:	da35      	bge.n	d8144 <__aeabi_dmul+0x164>
   d80d8:	340c      	adds	r4, #12
   d80da:	dc1b      	bgt.n	d8114 <__aeabi_dmul+0x134>
   d80dc:	f104 0414 	add.w	r4, r4, #20
   d80e0:	f1c4 0520 	rsb	r5, r4, #32
   d80e4:	fa00 f305 	lsl.w	r3, r0, r5
   d80e8:	fa20 f004 	lsr.w	r0, r0, r4
   d80ec:	fa01 f205 	lsl.w	r2, r1, r5
   d80f0:	ea40 0002 	orr.w	r0, r0, r2
   d80f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d80f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d80fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8100:	fa21 f604 	lsr.w	r6, r1, r4
   d8104:	eb42 0106 	adc.w	r1, r2, r6
   d8108:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d810c:	bf08      	it	eq
   d810e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8112:	bd70      	pop	{r4, r5, r6, pc}
   d8114:	f1c4 040c 	rsb	r4, r4, #12
   d8118:	f1c4 0520 	rsb	r5, r4, #32
   d811c:	fa00 f304 	lsl.w	r3, r0, r4
   d8120:	fa20 f005 	lsr.w	r0, r0, r5
   d8124:	fa01 f204 	lsl.w	r2, r1, r4
   d8128:	ea40 0002 	orr.w	r0, r0, r2
   d812c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8130:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8134:	f141 0100 	adc.w	r1, r1, #0
   d8138:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d813c:	bf08      	it	eq
   d813e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8142:	bd70      	pop	{r4, r5, r6, pc}
   d8144:	f1c4 0520 	rsb	r5, r4, #32
   d8148:	fa00 f205 	lsl.w	r2, r0, r5
   d814c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8150:	fa20 f304 	lsr.w	r3, r0, r4
   d8154:	fa01 f205 	lsl.w	r2, r1, r5
   d8158:	ea43 0302 	orr.w	r3, r3, r2
   d815c:	fa21 f004 	lsr.w	r0, r1, r4
   d8160:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8164:	fa21 f204 	lsr.w	r2, r1, r4
   d8168:	ea20 0002 	bic.w	r0, r0, r2
   d816c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8170:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8174:	bf08      	it	eq
   d8176:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d817a:	bd70      	pop	{r4, r5, r6, pc}
   d817c:	f094 0f00 	teq	r4, #0
   d8180:	d10f      	bne.n	d81a2 <__aeabi_dmul+0x1c2>
   d8182:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8186:	0040      	lsls	r0, r0, #1
   d8188:	eb41 0101 	adc.w	r1, r1, r1
   d818c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8190:	bf08      	it	eq
   d8192:	3c01      	subeq	r4, #1
   d8194:	d0f7      	beq.n	d8186 <__aeabi_dmul+0x1a6>
   d8196:	ea41 0106 	orr.w	r1, r1, r6
   d819a:	f095 0f00 	teq	r5, #0
   d819e:	bf18      	it	ne
   d81a0:	4770      	bxne	lr
   d81a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d81a6:	0052      	lsls	r2, r2, #1
   d81a8:	eb43 0303 	adc.w	r3, r3, r3
   d81ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d81b0:	bf08      	it	eq
   d81b2:	3d01      	subeq	r5, #1
   d81b4:	d0f7      	beq.n	d81a6 <__aeabi_dmul+0x1c6>
   d81b6:	ea43 0306 	orr.w	r3, r3, r6
   d81ba:	4770      	bx	lr
   d81bc:	ea94 0f0c 	teq	r4, ip
   d81c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d81c4:	bf18      	it	ne
   d81c6:	ea95 0f0c 	teqne	r5, ip
   d81ca:	d00c      	beq.n	d81e6 <__aeabi_dmul+0x206>
   d81cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d81d0:	bf18      	it	ne
   d81d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d81d6:	d1d1      	bne.n	d817c <__aeabi_dmul+0x19c>
   d81d8:	ea81 0103 	eor.w	r1, r1, r3
   d81dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d81e0:	f04f 0000 	mov.w	r0, #0
   d81e4:	bd70      	pop	{r4, r5, r6, pc}
   d81e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d81ea:	bf06      	itte	eq
   d81ec:	4610      	moveq	r0, r2
   d81ee:	4619      	moveq	r1, r3
   d81f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d81f4:	d019      	beq.n	d822a <__aeabi_dmul+0x24a>
   d81f6:	ea94 0f0c 	teq	r4, ip
   d81fa:	d102      	bne.n	d8202 <__aeabi_dmul+0x222>
   d81fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8200:	d113      	bne.n	d822a <__aeabi_dmul+0x24a>
   d8202:	ea95 0f0c 	teq	r5, ip
   d8206:	d105      	bne.n	d8214 <__aeabi_dmul+0x234>
   d8208:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d820c:	bf1c      	itt	ne
   d820e:	4610      	movne	r0, r2
   d8210:	4619      	movne	r1, r3
   d8212:	d10a      	bne.n	d822a <__aeabi_dmul+0x24a>
   d8214:	ea81 0103 	eor.w	r1, r1, r3
   d8218:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d821c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8220:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8224:	f04f 0000 	mov.w	r0, #0
   d8228:	bd70      	pop	{r4, r5, r6, pc}
   d822a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d822e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8232:	bd70      	pop	{r4, r5, r6, pc}

000d8234 <__aeabi_ddiv>:
   d8234:	b570      	push	{r4, r5, r6, lr}
   d8236:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d823a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d823e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8242:	bf1d      	ittte	ne
   d8244:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8248:	ea94 0f0c 	teqne	r4, ip
   d824c:	ea95 0f0c 	teqne	r5, ip
   d8250:	f000 f8a7 	bleq	d83a2 <__aeabi_ddiv+0x16e>
   d8254:	eba4 0405 	sub.w	r4, r4, r5
   d8258:	ea81 0e03 	eor.w	lr, r1, r3
   d825c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8260:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8264:	f000 8088 	beq.w	d8378 <__aeabi_ddiv+0x144>
   d8268:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d826c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8270:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8274:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8278:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d827c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8280:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8284:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8288:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d828c:	429d      	cmp	r5, r3
   d828e:	bf08      	it	eq
   d8290:	4296      	cmpeq	r6, r2
   d8292:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8296:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d829a:	d202      	bcs.n	d82a2 <__aeabi_ddiv+0x6e>
   d829c:	085b      	lsrs	r3, r3, #1
   d829e:	ea4f 0232 	mov.w	r2, r2, rrx
   d82a2:	1ab6      	subs	r6, r6, r2
   d82a4:	eb65 0503 	sbc.w	r5, r5, r3
   d82a8:	085b      	lsrs	r3, r3, #1
   d82aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d82ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d82b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d82b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d82ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d82be:	bf22      	ittt	cs
   d82c0:	1ab6      	subcs	r6, r6, r2
   d82c2:	4675      	movcs	r5, lr
   d82c4:	ea40 000c 	orrcs.w	r0, r0, ip
   d82c8:	085b      	lsrs	r3, r3, #1
   d82ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d82ce:	ebb6 0e02 	subs.w	lr, r6, r2
   d82d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d82d6:	bf22      	ittt	cs
   d82d8:	1ab6      	subcs	r6, r6, r2
   d82da:	4675      	movcs	r5, lr
   d82dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d82e0:	085b      	lsrs	r3, r3, #1
   d82e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d82e6:	ebb6 0e02 	subs.w	lr, r6, r2
   d82ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d82ee:	bf22      	ittt	cs
   d82f0:	1ab6      	subcs	r6, r6, r2
   d82f2:	4675      	movcs	r5, lr
   d82f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d82f8:	085b      	lsrs	r3, r3, #1
   d82fa:	ea4f 0232 	mov.w	r2, r2, rrx
   d82fe:	ebb6 0e02 	subs.w	lr, r6, r2
   d8302:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8306:	bf22      	ittt	cs
   d8308:	1ab6      	subcs	r6, r6, r2
   d830a:	4675      	movcs	r5, lr
   d830c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8310:	ea55 0e06 	orrs.w	lr, r5, r6
   d8314:	d018      	beq.n	d8348 <__aeabi_ddiv+0x114>
   d8316:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d831a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d831e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8322:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8326:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d832a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d832e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8332:	d1c0      	bne.n	d82b6 <__aeabi_ddiv+0x82>
   d8334:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8338:	d10b      	bne.n	d8352 <__aeabi_ddiv+0x11e>
   d833a:	ea41 0100 	orr.w	r1, r1, r0
   d833e:	f04f 0000 	mov.w	r0, #0
   d8342:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8346:	e7b6      	b.n	d82b6 <__aeabi_ddiv+0x82>
   d8348:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d834c:	bf04      	itt	eq
   d834e:	4301      	orreq	r1, r0
   d8350:	2000      	moveq	r0, #0
   d8352:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8356:	bf88      	it	hi
   d8358:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d835c:	f63f aeaf 	bhi.w	d80be <__aeabi_dmul+0xde>
   d8360:	ebb5 0c03 	subs.w	ip, r5, r3
   d8364:	bf04      	itt	eq
   d8366:	ebb6 0c02 	subseq.w	ip, r6, r2
   d836a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d836e:	f150 0000 	adcs.w	r0, r0, #0
   d8372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8376:	bd70      	pop	{r4, r5, r6, pc}
   d8378:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d837c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8380:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8384:	bfc2      	ittt	gt
   d8386:	ebd4 050c 	rsbsgt	r5, r4, ip
   d838a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d838e:	bd70      	popgt	{r4, r5, r6, pc}
   d8390:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8394:	f04f 0e00 	mov.w	lr, #0
   d8398:	3c01      	subs	r4, #1
   d839a:	e690      	b.n	d80be <__aeabi_dmul+0xde>
   d839c:	ea45 0e06 	orr.w	lr, r5, r6
   d83a0:	e68d      	b.n	d80be <__aeabi_dmul+0xde>
   d83a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d83a6:	ea94 0f0c 	teq	r4, ip
   d83aa:	bf08      	it	eq
   d83ac:	ea95 0f0c 	teqeq	r5, ip
   d83b0:	f43f af3b 	beq.w	d822a <__aeabi_dmul+0x24a>
   d83b4:	ea94 0f0c 	teq	r4, ip
   d83b8:	d10a      	bne.n	d83d0 <__aeabi_ddiv+0x19c>
   d83ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d83be:	f47f af34 	bne.w	d822a <__aeabi_dmul+0x24a>
   d83c2:	ea95 0f0c 	teq	r5, ip
   d83c6:	f47f af25 	bne.w	d8214 <__aeabi_dmul+0x234>
   d83ca:	4610      	mov	r0, r2
   d83cc:	4619      	mov	r1, r3
   d83ce:	e72c      	b.n	d822a <__aeabi_dmul+0x24a>
   d83d0:	ea95 0f0c 	teq	r5, ip
   d83d4:	d106      	bne.n	d83e4 <__aeabi_ddiv+0x1b0>
   d83d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d83da:	f43f aefd 	beq.w	d81d8 <__aeabi_dmul+0x1f8>
   d83de:	4610      	mov	r0, r2
   d83e0:	4619      	mov	r1, r3
   d83e2:	e722      	b.n	d822a <__aeabi_dmul+0x24a>
   d83e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d83e8:	bf18      	it	ne
   d83ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d83ee:	f47f aec5 	bne.w	d817c <__aeabi_dmul+0x19c>
   d83f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d83f6:	f47f af0d 	bne.w	d8214 <__aeabi_dmul+0x234>
   d83fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d83fe:	f47f aeeb 	bne.w	d81d8 <__aeabi_dmul+0x1f8>
   d8402:	e712      	b.n	d822a <__aeabi_dmul+0x24a>

000d8404 <__gedf2>:
   d8404:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8408:	e006      	b.n	d8418 <__cmpdf2+0x4>
   d840a:	bf00      	nop

000d840c <__ledf2>:
   d840c:	f04f 0c01 	mov.w	ip, #1
   d8410:	e002      	b.n	d8418 <__cmpdf2+0x4>
   d8412:	bf00      	nop

000d8414 <__cmpdf2>:
   d8414:	f04f 0c01 	mov.w	ip, #1
   d8418:	f84d cd04 	str.w	ip, [sp, #-4]!
   d841c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8420:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8424:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8428:	bf18      	it	ne
   d842a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d842e:	d01b      	beq.n	d8468 <__cmpdf2+0x54>
   d8430:	b001      	add	sp, #4
   d8432:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8436:	bf0c      	ite	eq
   d8438:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d843c:	ea91 0f03 	teqne	r1, r3
   d8440:	bf02      	ittt	eq
   d8442:	ea90 0f02 	teqeq	r0, r2
   d8446:	2000      	moveq	r0, #0
   d8448:	4770      	bxeq	lr
   d844a:	f110 0f00 	cmn.w	r0, #0
   d844e:	ea91 0f03 	teq	r1, r3
   d8452:	bf58      	it	pl
   d8454:	4299      	cmppl	r1, r3
   d8456:	bf08      	it	eq
   d8458:	4290      	cmpeq	r0, r2
   d845a:	bf2c      	ite	cs
   d845c:	17d8      	asrcs	r0, r3, #31
   d845e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8462:	f040 0001 	orr.w	r0, r0, #1
   d8466:	4770      	bx	lr
   d8468:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d846c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8470:	d102      	bne.n	d8478 <__cmpdf2+0x64>
   d8472:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8476:	d107      	bne.n	d8488 <__cmpdf2+0x74>
   d8478:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d847c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8480:	d1d6      	bne.n	d8430 <__cmpdf2+0x1c>
   d8482:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8486:	d0d3      	beq.n	d8430 <__cmpdf2+0x1c>
   d8488:	f85d 0b04 	ldr.w	r0, [sp], #4
   d848c:	4770      	bx	lr
   d848e:	bf00      	nop

000d8490 <__aeabi_cdrcmple>:
   d8490:	4684      	mov	ip, r0
   d8492:	4610      	mov	r0, r2
   d8494:	4662      	mov	r2, ip
   d8496:	468c      	mov	ip, r1
   d8498:	4619      	mov	r1, r3
   d849a:	4663      	mov	r3, ip
   d849c:	e000      	b.n	d84a0 <__aeabi_cdcmpeq>
   d849e:	bf00      	nop

000d84a0 <__aeabi_cdcmpeq>:
   d84a0:	b501      	push	{r0, lr}
   d84a2:	f7ff ffb7 	bl	d8414 <__cmpdf2>
   d84a6:	2800      	cmp	r0, #0
   d84a8:	bf48      	it	mi
   d84aa:	f110 0f00 	cmnmi.w	r0, #0
   d84ae:	bd01      	pop	{r0, pc}

000d84b0 <__aeabi_dcmpeq>:
   d84b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d84b4:	f7ff fff4 	bl	d84a0 <__aeabi_cdcmpeq>
   d84b8:	bf0c      	ite	eq
   d84ba:	2001      	moveq	r0, #1
   d84bc:	2000      	movne	r0, #0
   d84be:	f85d fb08 	ldr.w	pc, [sp], #8
   d84c2:	bf00      	nop

000d84c4 <__aeabi_dcmplt>:
   d84c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d84c8:	f7ff ffea 	bl	d84a0 <__aeabi_cdcmpeq>
   d84cc:	bf34      	ite	cc
   d84ce:	2001      	movcc	r0, #1
   d84d0:	2000      	movcs	r0, #0
   d84d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d84d6:	bf00      	nop

000d84d8 <__aeabi_dcmple>:
   d84d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d84dc:	f7ff ffe0 	bl	d84a0 <__aeabi_cdcmpeq>
   d84e0:	bf94      	ite	ls
   d84e2:	2001      	movls	r0, #1
   d84e4:	2000      	movhi	r0, #0
   d84e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d84ea:	bf00      	nop

000d84ec <__aeabi_dcmpge>:
   d84ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d84f0:	f7ff ffce 	bl	d8490 <__aeabi_cdrcmple>
   d84f4:	bf94      	ite	ls
   d84f6:	2001      	movls	r0, #1
   d84f8:	2000      	movhi	r0, #0
   d84fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d84fe:	bf00      	nop

000d8500 <__aeabi_dcmpgt>:
   d8500:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8504:	f7ff ffc4 	bl	d8490 <__aeabi_cdrcmple>
   d8508:	bf34      	ite	cc
   d850a:	2001      	movcc	r0, #1
   d850c:	2000      	movcs	r0, #0
   d850e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8512:	bf00      	nop

000d8514 <__aeabi_dcmpun>:
   d8514:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8518:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d851c:	d102      	bne.n	d8524 <__aeabi_dcmpun+0x10>
   d851e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8522:	d10a      	bne.n	d853a <__aeabi_dcmpun+0x26>
   d8524:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8528:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d852c:	d102      	bne.n	d8534 <__aeabi_dcmpun+0x20>
   d852e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8532:	d102      	bne.n	d853a <__aeabi_dcmpun+0x26>
   d8534:	f04f 0000 	mov.w	r0, #0
   d8538:	4770      	bx	lr
   d853a:	f04f 0001 	mov.w	r0, #1
   d853e:	4770      	bx	lr

000d8540 <__aeabi_d2iz>:
   d8540:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8544:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8548:	d215      	bcs.n	d8576 <__aeabi_d2iz+0x36>
   d854a:	d511      	bpl.n	d8570 <__aeabi_d2iz+0x30>
   d854c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8550:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8554:	d912      	bls.n	d857c <__aeabi_d2iz+0x3c>
   d8556:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d855a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d855e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8562:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8566:	fa23 f002 	lsr.w	r0, r3, r2
   d856a:	bf18      	it	ne
   d856c:	4240      	negne	r0, r0
   d856e:	4770      	bx	lr
   d8570:	f04f 0000 	mov.w	r0, #0
   d8574:	4770      	bx	lr
   d8576:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d857a:	d105      	bne.n	d8588 <__aeabi_d2iz+0x48>
   d857c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8580:	bf08      	it	eq
   d8582:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8586:	4770      	bx	lr
   d8588:	f04f 0000 	mov.w	r0, #0
   d858c:	4770      	bx	lr
   d858e:	bf00      	nop

000d8590 <__aeabi_d2uiz>:
   d8590:	004a      	lsls	r2, r1, #1
   d8592:	d211      	bcs.n	d85b8 <__aeabi_d2uiz+0x28>
   d8594:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8598:	d211      	bcs.n	d85be <__aeabi_d2uiz+0x2e>
   d859a:	d50d      	bpl.n	d85b8 <__aeabi_d2uiz+0x28>
   d859c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d85a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d85a4:	d40e      	bmi.n	d85c4 <__aeabi_d2uiz+0x34>
   d85a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d85aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d85ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d85b2:	fa23 f002 	lsr.w	r0, r3, r2
   d85b6:	4770      	bx	lr
   d85b8:	f04f 0000 	mov.w	r0, #0
   d85bc:	4770      	bx	lr
   d85be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d85c2:	d102      	bne.n	d85ca <__aeabi_d2uiz+0x3a>
   d85c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d85c8:	4770      	bx	lr
   d85ca:	f04f 0000 	mov.w	r0, #0
   d85ce:	4770      	bx	lr

000d85d0 <__aeabi_d2f>:
   d85d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d85d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d85d8:	bf24      	itt	cs
   d85da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d85de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d85e2:	d90d      	bls.n	d8600 <__aeabi_d2f+0x30>
   d85e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d85e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d85ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d85f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d85f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d85f8:	bf08      	it	eq
   d85fa:	f020 0001 	biceq.w	r0, r0, #1
   d85fe:	4770      	bx	lr
   d8600:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8604:	d121      	bne.n	d864a <__aeabi_d2f+0x7a>
   d8606:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d860a:	bfbc      	itt	lt
   d860c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8610:	4770      	bxlt	lr
   d8612:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8616:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d861a:	f1c2 0218 	rsb	r2, r2, #24
   d861e:	f1c2 0c20 	rsb	ip, r2, #32
   d8622:	fa10 f30c 	lsls.w	r3, r0, ip
   d8626:	fa20 f002 	lsr.w	r0, r0, r2
   d862a:	bf18      	it	ne
   d862c:	f040 0001 	orrne.w	r0, r0, #1
   d8630:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8634:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8638:	fa03 fc0c 	lsl.w	ip, r3, ip
   d863c:	ea40 000c 	orr.w	r0, r0, ip
   d8640:	fa23 f302 	lsr.w	r3, r3, r2
   d8644:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8648:	e7cc      	b.n	d85e4 <__aeabi_d2f+0x14>
   d864a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d864e:	d107      	bne.n	d8660 <__aeabi_d2f+0x90>
   d8650:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8654:	bf1e      	ittt	ne
   d8656:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d865a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d865e:	4770      	bxne	lr
   d8660:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8664:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8668:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d866c:	4770      	bx	lr
   d866e:	bf00      	nop

000d8670 <__cxa_atexit>:
   d8670:	b510      	push	{r4, lr}
   d8672:	4c05      	ldr	r4, [pc, #20]	; (d8688 <__cxa_atexit+0x18>)
   d8674:	4613      	mov	r3, r2
   d8676:	b12c      	cbz	r4, d8684 <__cxa_atexit+0x14>
   d8678:	460a      	mov	r2, r1
   d867a:	4601      	mov	r1, r0
   d867c:	2002      	movs	r0, #2
   d867e:	f3af 8000 	nop.w
   d8682:	bd10      	pop	{r4, pc}
   d8684:	4620      	mov	r0, r4
   d8686:	bd10      	pop	{r4, pc}
   d8688:	00000000 	.word	0x00000000

000d868c <localtime>:
   d868c:	b538      	push	{r3, r4, r5, lr}
   d868e:	4b07      	ldr	r3, [pc, #28]	; (d86ac <localtime+0x20>)
   d8690:	681c      	ldr	r4, [r3, #0]
   d8692:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8694:	4605      	mov	r5, r0
   d8696:	b91b      	cbnz	r3, d86a0 <localtime+0x14>
   d8698:	2024      	movs	r0, #36	; 0x24
   d869a:	f7fd fd75 	bl	d6188 <malloc>
   d869e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d86a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d86a2:	4628      	mov	r0, r5
   d86a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d86a8:	f000 b802 	b.w	d86b0 <localtime_r>
   d86ac:	2003df1c 	.word	0x2003df1c

000d86b0 <localtime_r>:
   d86b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d86b4:	460c      	mov	r4, r1
   d86b6:	4680      	mov	r8, r0
   d86b8:	f000 fc70 	bl	d8f9c <__gettzinfo>
   d86bc:	4621      	mov	r1, r4
   d86be:	4607      	mov	r7, r0
   d86c0:	4640      	mov	r0, r8
   d86c2:	f000 fc6f 	bl	d8fa4 <gmtime_r>
   d86c6:	6946      	ldr	r6, [r0, #20]
   d86c8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d86cc:	07b3      	lsls	r3, r6, #30
   d86ce:	4604      	mov	r4, r0
   d86d0:	d105      	bne.n	d86de <localtime_r+0x2e>
   d86d2:	2264      	movs	r2, #100	; 0x64
   d86d4:	fb96 f3f2 	sdiv	r3, r6, r2
   d86d8:	fb02 6313 	mls	r3, r2, r3, r6
   d86dc:	b94b      	cbnz	r3, d86f2 <localtime_r+0x42>
   d86de:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d86e2:	fb96 f3f5 	sdiv	r3, r6, r5
   d86e6:	fb05 6513 	mls	r5, r5, r3, r6
   d86ea:	fab5 f385 	clz	r3, r5
   d86ee:	095b      	lsrs	r3, r3, #5
   d86f0:	e000      	b.n	d86f4 <localtime_r+0x44>
   d86f2:	2301      	movs	r3, #1
   d86f4:	4a5f      	ldr	r2, [pc, #380]	; (d8874 <localtime_r+0x1c4>)
   d86f6:	2530      	movs	r5, #48	; 0x30
   d86f8:	fb05 2503 	mla	r5, r5, r3, r2
   d86fc:	f000 fa82 	bl	d8c04 <__tz_lock>
   d8700:	f000 fa82 	bl	d8c08 <_tzset_unlocked>
   d8704:	4b5c      	ldr	r3, [pc, #368]	; (d8878 <localtime_r+0x1c8>)
   d8706:	681b      	ldr	r3, [r3, #0]
   d8708:	b1f3      	cbz	r3, d8748 <localtime_r+0x98>
   d870a:	687b      	ldr	r3, [r7, #4]
   d870c:	429e      	cmp	r6, r3
   d870e:	d105      	bne.n	d871c <localtime_r+0x6c>
   d8710:	6839      	ldr	r1, [r7, #0]
   d8712:	f8d8 3000 	ldr.w	r3, [r8]
   d8716:	69fa      	ldr	r2, [r7, #28]
   d8718:	b941      	cbnz	r1, d872c <localtime_r+0x7c>
   d871a:	e00a      	b.n	d8732 <localtime_r+0x82>
   d871c:	4630      	mov	r0, r6
   d871e:	f000 f9c9 	bl	d8ab4 <__tzcalc_limits>
   d8722:	2800      	cmp	r0, #0
   d8724:	d1f4      	bne.n	d8710 <localtime_r+0x60>
   d8726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d872a:	e00d      	b.n	d8748 <localtime_r+0x98>
   d872c:	4293      	cmp	r3, r2
   d872e:	db08      	blt.n	d8742 <localtime_r+0x92>
   d8730:	e001      	b.n	d8736 <localtime_r+0x86>
   d8732:	4293      	cmp	r3, r2
   d8734:	da07      	bge.n	d8746 <localtime_r+0x96>
   d8736:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8738:	4293      	cmp	r3, r2
   d873a:	bfac      	ite	ge
   d873c:	2300      	movge	r3, #0
   d873e:	2301      	movlt	r3, #1
   d8740:	e002      	b.n	d8748 <localtime_r+0x98>
   d8742:	2300      	movs	r3, #0
   d8744:	e000      	b.n	d8748 <localtime_r+0x98>
   d8746:	2301      	movs	r3, #1
   d8748:	6223      	str	r3, [r4, #32]
   d874a:	6a23      	ldr	r3, [r4, #32]
   d874c:	2b01      	cmp	r3, #1
   d874e:	bf0c      	ite	eq
   d8750:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d8752:	6a39      	ldrne	r1, [r7, #32]
   d8754:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8758:	203c      	movs	r0, #60	; 0x3c
   d875a:	fb91 f6f3 	sdiv	r6, r1, r3
   d875e:	fb03 1316 	mls	r3, r3, r6, r1
   d8762:	6861      	ldr	r1, [r4, #4]
   d8764:	fb93 f2f0 	sdiv	r2, r3, r0
   d8768:	fb00 3012 	mls	r0, r0, r2, r3
   d876c:	6823      	ldr	r3, [r4, #0]
   d876e:	1a89      	subs	r1, r1, r2
   d8770:	68a2      	ldr	r2, [r4, #8]
   d8772:	6061      	str	r1, [r4, #4]
   d8774:	1a1b      	subs	r3, r3, r0
   d8776:	1b92      	subs	r2, r2, r6
   d8778:	2b3b      	cmp	r3, #59	; 0x3b
   d877a:	6023      	str	r3, [r4, #0]
   d877c:	60a2      	str	r2, [r4, #8]
   d877e:	dd03      	ble.n	d8788 <localtime_r+0xd8>
   d8780:	3101      	adds	r1, #1
   d8782:	6061      	str	r1, [r4, #4]
   d8784:	3b3c      	subs	r3, #60	; 0x3c
   d8786:	e004      	b.n	d8792 <localtime_r+0xe2>
   d8788:	2b00      	cmp	r3, #0
   d878a:	da03      	bge.n	d8794 <localtime_r+0xe4>
   d878c:	3901      	subs	r1, #1
   d878e:	6061      	str	r1, [r4, #4]
   d8790:	333c      	adds	r3, #60	; 0x3c
   d8792:	6023      	str	r3, [r4, #0]
   d8794:	6863      	ldr	r3, [r4, #4]
   d8796:	2b3b      	cmp	r3, #59	; 0x3b
   d8798:	dd03      	ble.n	d87a2 <localtime_r+0xf2>
   d879a:	3201      	adds	r2, #1
   d879c:	60a2      	str	r2, [r4, #8]
   d879e:	3b3c      	subs	r3, #60	; 0x3c
   d87a0:	e004      	b.n	d87ac <localtime_r+0xfc>
   d87a2:	2b00      	cmp	r3, #0
   d87a4:	da03      	bge.n	d87ae <localtime_r+0xfe>
   d87a6:	3a01      	subs	r2, #1
   d87a8:	60a2      	str	r2, [r4, #8]
   d87aa:	333c      	adds	r3, #60	; 0x3c
   d87ac:	6063      	str	r3, [r4, #4]
   d87ae:	68a3      	ldr	r3, [r4, #8]
   d87b0:	2b17      	cmp	r3, #23
   d87b2:	dd22      	ble.n	d87fa <localtime_r+0x14a>
   d87b4:	69e2      	ldr	r2, [r4, #28]
   d87b6:	3201      	adds	r2, #1
   d87b8:	61e2      	str	r2, [r4, #28]
   d87ba:	69a2      	ldr	r2, [r4, #24]
   d87bc:	3201      	adds	r2, #1
   d87be:	2a06      	cmp	r2, #6
   d87c0:	bfc8      	it	gt
   d87c2:	2200      	movgt	r2, #0
   d87c4:	61a2      	str	r2, [r4, #24]
   d87c6:	68e2      	ldr	r2, [r4, #12]
   d87c8:	3b18      	subs	r3, #24
   d87ca:	3201      	adds	r2, #1
   d87cc:	60a3      	str	r3, [r4, #8]
   d87ce:	6923      	ldr	r3, [r4, #16]
   d87d0:	60e2      	str	r2, [r4, #12]
   d87d2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d87d6:	428a      	cmp	r2, r1
   d87d8:	dd46      	ble.n	d8868 <localtime_r+0x1b8>
   d87da:	3301      	adds	r3, #1
   d87dc:	2b0c      	cmp	r3, #12
   d87de:	bf0c      	ite	eq
   d87e0:	6963      	ldreq	r3, [r4, #20]
   d87e2:	6123      	strne	r3, [r4, #16]
   d87e4:	eba2 0201 	sub.w	r2, r2, r1
   d87e8:	60e2      	str	r2, [r4, #12]
   d87ea:	bf01      	itttt	eq
   d87ec:	3301      	addeq	r3, #1
   d87ee:	2200      	moveq	r2, #0
   d87f0:	6122      	streq	r2, [r4, #16]
   d87f2:	6163      	streq	r3, [r4, #20]
   d87f4:	bf08      	it	eq
   d87f6:	61e2      	streq	r2, [r4, #28]
   d87f8:	e036      	b.n	d8868 <localtime_r+0x1b8>
   d87fa:	2b00      	cmp	r3, #0
   d87fc:	da34      	bge.n	d8868 <localtime_r+0x1b8>
   d87fe:	69e2      	ldr	r2, [r4, #28]
   d8800:	3a01      	subs	r2, #1
   d8802:	61e2      	str	r2, [r4, #28]
   d8804:	69a2      	ldr	r2, [r4, #24]
   d8806:	3a01      	subs	r2, #1
   d8808:	bf48      	it	mi
   d880a:	2206      	movmi	r2, #6
   d880c:	61a2      	str	r2, [r4, #24]
   d880e:	68e2      	ldr	r2, [r4, #12]
   d8810:	3318      	adds	r3, #24
   d8812:	3a01      	subs	r2, #1
   d8814:	60e2      	str	r2, [r4, #12]
   d8816:	60a3      	str	r3, [r4, #8]
   d8818:	bb32      	cbnz	r2, d8868 <localtime_r+0x1b8>
   d881a:	6923      	ldr	r3, [r4, #16]
   d881c:	3b01      	subs	r3, #1
   d881e:	d401      	bmi.n	d8824 <localtime_r+0x174>
   d8820:	6123      	str	r3, [r4, #16]
   d8822:	e01d      	b.n	d8860 <localtime_r+0x1b0>
   d8824:	230b      	movs	r3, #11
   d8826:	6123      	str	r3, [r4, #16]
   d8828:	6963      	ldr	r3, [r4, #20]
   d882a:	1e5a      	subs	r2, r3, #1
   d882c:	f012 0f03 	tst.w	r2, #3
   d8830:	6162      	str	r2, [r4, #20]
   d8832:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d8836:	d105      	bne.n	d8844 <localtime_r+0x194>
   d8838:	2164      	movs	r1, #100	; 0x64
   d883a:	fb93 f2f1 	sdiv	r2, r3, r1
   d883e:	fb01 3212 	mls	r2, r1, r2, r3
   d8842:	b94a      	cbnz	r2, d8858 <localtime_r+0x1a8>
   d8844:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8848:	fb93 f2f1 	sdiv	r2, r3, r1
   d884c:	fb01 3312 	mls	r3, r1, r2, r3
   d8850:	fab3 f383 	clz	r3, r3
   d8854:	095b      	lsrs	r3, r3, #5
   d8856:	e000      	b.n	d885a <localtime_r+0x1aa>
   d8858:	2301      	movs	r3, #1
   d885a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d885e:	61e3      	str	r3, [r4, #28]
   d8860:	6923      	ldr	r3, [r4, #16]
   d8862:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d8866:	60e3      	str	r3, [r4, #12]
   d8868:	f000 f9cd 	bl	d8c06 <__tz_unlock>
   d886c:	4620      	mov	r0, r4
   d886e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8872:	bf00      	nop
   d8874:	000d96a4 	.word	0x000d96a4
   d8878:	2003e7e4 	.word	0x2003e7e4

000d887c <memcmp>:
   d887c:	b510      	push	{r4, lr}
   d887e:	3901      	subs	r1, #1
   d8880:	4402      	add	r2, r0
   d8882:	4290      	cmp	r0, r2
   d8884:	d007      	beq.n	d8896 <memcmp+0x1a>
   d8886:	f810 3b01 	ldrb.w	r3, [r0], #1
   d888a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d888e:	42a3      	cmp	r3, r4
   d8890:	d0f7      	beq.n	d8882 <memcmp+0x6>
   d8892:	1b18      	subs	r0, r3, r4
   d8894:	bd10      	pop	{r4, pc}
   d8896:	2000      	movs	r0, #0
   d8898:	bd10      	pop	{r4, pc}

000d889a <memcpy>:
   d889a:	b510      	push	{r4, lr}
   d889c:	1e43      	subs	r3, r0, #1
   d889e:	440a      	add	r2, r1
   d88a0:	4291      	cmp	r1, r2
   d88a2:	d004      	beq.n	d88ae <memcpy+0x14>
   d88a4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d88a8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d88ac:	e7f8      	b.n	d88a0 <memcpy+0x6>
   d88ae:	bd10      	pop	{r4, pc}

000d88b0 <memset>:
   d88b0:	4402      	add	r2, r0
   d88b2:	4603      	mov	r3, r0
   d88b4:	4293      	cmp	r3, r2
   d88b6:	d002      	beq.n	d88be <memset+0xe>
   d88b8:	f803 1b01 	strb.w	r1, [r3], #1
   d88bc:	e7fa      	b.n	d88b4 <memset+0x4>
   d88be:	4770      	bx	lr

000d88c0 <srand>:
   d88c0:	b538      	push	{r3, r4, r5, lr}
   d88c2:	4b12      	ldr	r3, [pc, #72]	; (d890c <srand+0x4c>)
   d88c4:	681c      	ldr	r4, [r3, #0]
   d88c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d88c8:	4605      	mov	r5, r0
   d88ca:	b9d3      	cbnz	r3, d8902 <srand+0x42>
   d88cc:	2018      	movs	r0, #24
   d88ce:	f7fd fc5b 	bl	d6188 <malloc>
   d88d2:	f243 330e 	movw	r3, #13070	; 0x330e
   d88d6:	63a0      	str	r0, [r4, #56]	; 0x38
   d88d8:	8003      	strh	r3, [r0, #0]
   d88da:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d88de:	8043      	strh	r3, [r0, #2]
   d88e0:	f241 2334 	movw	r3, #4660	; 0x1234
   d88e4:	8083      	strh	r3, [r0, #4]
   d88e6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d88ea:	80c3      	strh	r3, [r0, #6]
   d88ec:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d88f0:	8103      	strh	r3, [r0, #8]
   d88f2:	2305      	movs	r3, #5
   d88f4:	8143      	strh	r3, [r0, #10]
   d88f6:	230b      	movs	r3, #11
   d88f8:	8183      	strh	r3, [r0, #12]
   d88fa:	2201      	movs	r2, #1
   d88fc:	2300      	movs	r3, #0
   d88fe:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8904:	2200      	movs	r2, #0
   d8906:	611d      	str	r5, [r3, #16]
   d8908:	615a      	str	r2, [r3, #20]
   d890a:	bd38      	pop	{r3, r4, r5, pc}
   d890c:	2003df1c 	.word	0x2003df1c

000d8910 <strcmp>:
   d8910:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8914:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8918:	2a01      	cmp	r2, #1
   d891a:	bf28      	it	cs
   d891c:	429a      	cmpcs	r2, r3
   d891e:	d0f7      	beq.n	d8910 <strcmp>
   d8920:	1ad0      	subs	r0, r2, r3
   d8922:	4770      	bx	lr

000d8924 <strcpy>:
   d8924:	4603      	mov	r3, r0
   d8926:	f811 2b01 	ldrb.w	r2, [r1], #1
   d892a:	f803 2b01 	strb.w	r2, [r3], #1
   d892e:	2a00      	cmp	r2, #0
   d8930:	d1f9      	bne.n	d8926 <strcpy+0x2>
   d8932:	4770      	bx	lr

000d8934 <strdup>:
   d8934:	4b02      	ldr	r3, [pc, #8]	; (d8940 <strdup+0xc>)
   d8936:	4601      	mov	r1, r0
   d8938:	6818      	ldr	r0, [r3, #0]
   d893a:	f000 b803 	b.w	d8944 <_strdup_r>
   d893e:	bf00      	nop
   d8940:	2003df1c 	.word	0x2003df1c

000d8944 <_strdup_r>:
   d8944:	b570      	push	{r4, r5, r6, lr}
   d8946:	4606      	mov	r6, r0
   d8948:	4608      	mov	r0, r1
   d894a:	460c      	mov	r4, r1
   d894c:	f000 f80d 	bl	d896a <strlen>
   d8950:	1c45      	adds	r5, r0, #1
   d8952:	4629      	mov	r1, r5
   d8954:	4630      	mov	r0, r6
   d8956:	f7fd fc47 	bl	d61e8 <_malloc_r>
   d895a:	4606      	mov	r6, r0
   d895c:	b118      	cbz	r0, d8966 <_strdup_r+0x22>
   d895e:	462a      	mov	r2, r5
   d8960:	4621      	mov	r1, r4
   d8962:	f7ff ff9a 	bl	d889a <memcpy>
   d8966:	4630      	mov	r0, r6
   d8968:	bd70      	pop	{r4, r5, r6, pc}

000d896a <strlen>:
   d896a:	4603      	mov	r3, r0
   d896c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8970:	2a00      	cmp	r2, #0
   d8972:	d1fb      	bne.n	d896c <strlen+0x2>
   d8974:	1a18      	subs	r0, r3, r0
   d8976:	3801      	subs	r0, #1
   d8978:	4770      	bx	lr

000d897a <strncmp>:
   d897a:	b530      	push	{r4, r5, lr}
   d897c:	b182      	cbz	r2, d89a0 <strncmp+0x26>
   d897e:	1e45      	subs	r5, r0, #1
   d8980:	3901      	subs	r1, #1
   d8982:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8986:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d898a:	42a3      	cmp	r3, r4
   d898c:	d106      	bne.n	d899c <strncmp+0x22>
   d898e:	43ec      	mvns	r4, r5
   d8990:	4414      	add	r4, r2
   d8992:	42e0      	cmn	r0, r4
   d8994:	d001      	beq.n	d899a <strncmp+0x20>
   d8996:	2b00      	cmp	r3, #0
   d8998:	d1f3      	bne.n	d8982 <strncmp+0x8>
   d899a:	461c      	mov	r4, r3
   d899c:	1b18      	subs	r0, r3, r4
   d899e:	bd30      	pop	{r4, r5, pc}
   d89a0:	4610      	mov	r0, r2
   d89a2:	bd30      	pop	{r4, r5, pc}

000d89a4 <_strtoul_r>:
   d89a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d89a8:	4680      	mov	r8, r0
   d89aa:	483c      	ldr	r0, [pc, #240]	; (d8a9c <_strtoul_r+0xf8>)
   d89ac:	f8d0 9000 	ldr.w	r9, [r0]
   d89b0:	460e      	mov	r6, r1
   d89b2:	4635      	mov	r5, r6
   d89b4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d89b8:	eb09 0004 	add.w	r0, r9, r4
   d89bc:	7840      	ldrb	r0, [r0, #1]
   d89be:	f000 0008 	and.w	r0, r0, #8
   d89c2:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d89c6:	b108      	cbz	r0, d89cc <_strtoul_r+0x28>
   d89c8:	462e      	mov	r6, r5
   d89ca:	e7f2      	b.n	d89b2 <_strtoul_r+0xe>
   d89cc:	2c2d      	cmp	r4, #45	; 0x2d
   d89ce:	d103      	bne.n	d89d8 <_strtoul_r+0x34>
   d89d0:	1cb5      	adds	r5, r6, #2
   d89d2:	7874      	ldrb	r4, [r6, #1]
   d89d4:	2701      	movs	r7, #1
   d89d6:	e003      	b.n	d89e0 <_strtoul_r+0x3c>
   d89d8:	2c2b      	cmp	r4, #43	; 0x2b
   d89da:	bf04      	itt	eq
   d89dc:	7874      	ldrbeq	r4, [r6, #1]
   d89de:	1cb5      	addeq	r5, r6, #2
   d89e0:	b113      	cbz	r3, d89e8 <_strtoul_r+0x44>
   d89e2:	2b10      	cmp	r3, #16
   d89e4:	d10a      	bne.n	d89fc <_strtoul_r+0x58>
   d89e6:	e053      	b.n	d8a90 <_strtoul_r+0xec>
   d89e8:	2c30      	cmp	r4, #48	; 0x30
   d89ea:	d14f      	bne.n	d8a8c <_strtoul_r+0xe8>
   d89ec:	7828      	ldrb	r0, [r5, #0]
   d89ee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d89f2:	2858      	cmp	r0, #88	; 0x58
   d89f4:	d145      	bne.n	d8a82 <_strtoul_r+0xde>
   d89f6:	786c      	ldrb	r4, [r5, #1]
   d89f8:	2310      	movs	r3, #16
   d89fa:	3502      	adds	r5, #2
   d89fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8a00:	2600      	movs	r6, #0
   d8a02:	fbbc fcf3 	udiv	ip, ip, r3
   d8a06:	fb03 fa0c 	mul.w	sl, r3, ip
   d8a0a:	ea6f 0a0a 	mvn.w	sl, sl
   d8a0e:	4630      	mov	r0, r6
   d8a10:	eb09 0e04 	add.w	lr, r9, r4
   d8a14:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8a18:	f01e 0f04 	tst.w	lr, #4
   d8a1c:	d001      	beq.n	d8a22 <_strtoul_r+0x7e>
   d8a1e:	3c30      	subs	r4, #48	; 0x30
   d8a20:	e00b      	b.n	d8a3a <_strtoul_r+0x96>
   d8a22:	f01e 0e03 	ands.w	lr, lr, #3
   d8a26:	d01a      	beq.n	d8a5e <_strtoul_r+0xba>
   d8a28:	f1be 0f01 	cmp.w	lr, #1
   d8a2c:	bf0c      	ite	eq
   d8a2e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8a32:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8a36:	ebce 0404 	rsb	r4, lr, r4
   d8a3a:	42a3      	cmp	r3, r4
   d8a3c:	dd0f      	ble.n	d8a5e <_strtoul_r+0xba>
   d8a3e:	2e00      	cmp	r6, #0
   d8a40:	db08      	blt.n	d8a54 <_strtoul_r+0xb0>
   d8a42:	4560      	cmp	r0, ip
   d8a44:	d806      	bhi.n	d8a54 <_strtoul_r+0xb0>
   d8a46:	d101      	bne.n	d8a4c <_strtoul_r+0xa8>
   d8a48:	4554      	cmp	r4, sl
   d8a4a:	dc03      	bgt.n	d8a54 <_strtoul_r+0xb0>
   d8a4c:	fb03 4000 	mla	r0, r3, r0, r4
   d8a50:	2601      	movs	r6, #1
   d8a52:	e001      	b.n	d8a58 <_strtoul_r+0xb4>
   d8a54:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8a58:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8a5c:	e7d8      	b.n	d8a10 <_strtoul_r+0x6c>
   d8a5e:	2e00      	cmp	r6, #0
   d8a60:	da07      	bge.n	d8a72 <_strtoul_r+0xce>
   d8a62:	2322      	movs	r3, #34	; 0x22
   d8a64:	f8c8 3000 	str.w	r3, [r8]
   d8a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8a6c:	b92a      	cbnz	r2, d8a7a <_strtoul_r+0xd6>
   d8a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8a72:	b107      	cbz	r7, d8a76 <_strtoul_r+0xd2>
   d8a74:	4240      	negs	r0, r0
   d8a76:	b172      	cbz	r2, d8a96 <_strtoul_r+0xf2>
   d8a78:	b106      	cbz	r6, d8a7c <_strtoul_r+0xd8>
   d8a7a:	1e69      	subs	r1, r5, #1
   d8a7c:	6011      	str	r1, [r2, #0]
   d8a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8a82:	2430      	movs	r4, #48	; 0x30
   d8a84:	2b00      	cmp	r3, #0
   d8a86:	d1b9      	bne.n	d89fc <_strtoul_r+0x58>
   d8a88:	2308      	movs	r3, #8
   d8a8a:	e7b7      	b.n	d89fc <_strtoul_r+0x58>
   d8a8c:	230a      	movs	r3, #10
   d8a8e:	e7b5      	b.n	d89fc <_strtoul_r+0x58>
   d8a90:	2c30      	cmp	r4, #48	; 0x30
   d8a92:	d0ab      	beq.n	d89ec <_strtoul_r+0x48>
   d8a94:	e7b2      	b.n	d89fc <_strtoul_r+0x58>
   d8a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8a9a:	bf00      	nop
   d8a9c:	2003deb8 	.word	0x2003deb8

000d8aa0 <strtoul>:
   d8aa0:	4613      	mov	r3, r2
   d8aa2:	460a      	mov	r2, r1
   d8aa4:	4601      	mov	r1, r0
   d8aa6:	4802      	ldr	r0, [pc, #8]	; (d8ab0 <strtoul+0x10>)
   d8aa8:	6800      	ldr	r0, [r0, #0]
   d8aaa:	f7ff bf7b 	b.w	d89a4 <_strtoul_r>
   d8aae:	bf00      	nop
   d8ab0:	2003df1c 	.word	0x2003df1c

000d8ab4 <__tzcalc_limits>:
   d8ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ab8:	4604      	mov	r4, r0
   d8aba:	f000 fa6f 	bl	d8f9c <__gettzinfo>
   d8abe:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d8ac2:	429c      	cmp	r4, r3
   d8ac4:	f340 8096 	ble.w	d8bf4 <__tzcalc_limits+0x140>
   d8ac8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d8acc:	18e3      	adds	r3, r4, r3
   d8ace:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d8ad2:	109b      	asrs	r3, r3, #2
   d8ad4:	f240 156d 	movw	r5, #365	; 0x16d
   d8ad8:	fb05 3502 	mla	r5, r5, r2, r3
   d8adc:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d8ae0:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d8ae4:	fb92 f3f3 	sdiv	r3, r2, r3
   d8ae8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d8aec:	442b      	add	r3, r5
   d8aee:	18a5      	adds	r5, r4, r2
   d8af0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8af4:	fb95 f5f2 	sdiv	r5, r5, r2
   d8af8:	441d      	add	r5, r3
   d8afa:	2364      	movs	r3, #100	; 0x64
   d8afc:	fb94 f7f2 	sdiv	r7, r4, r2
   d8b00:	fb94 f6f3 	sdiv	r6, r4, r3
   d8b04:	fb02 4717 	mls	r7, r2, r7, r4
   d8b08:	fb03 4616 	mls	r6, r3, r6, r4
   d8b0c:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d8b10:	fab7 fe87 	clz	lr, r7
   d8b14:	9301      	str	r3, [sp, #4]
   d8b16:	f004 0303 	and.w	r3, r4, #3
   d8b1a:	6044      	str	r4, [r0, #4]
   d8b1c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d8b20:	4601      	mov	r1, r0
   d8b22:	9300      	str	r3, [sp, #0]
   d8b24:	f04f 0c07 	mov.w	ip, #7
   d8b28:	7a0b      	ldrb	r3, [r1, #8]
   d8b2a:	2b4a      	cmp	r3, #74	; 0x4a
   d8b2c:	d10e      	bne.n	d8b4c <__tzcalc_limits+0x98>
   d8b2e:	694b      	ldr	r3, [r1, #20]
   d8b30:	9a00      	ldr	r2, [sp, #0]
   d8b32:	18ec      	adds	r4, r5, r3
   d8b34:	b902      	cbnz	r2, d8b38 <__tzcalc_limits+0x84>
   d8b36:	b906      	cbnz	r6, d8b3a <__tzcalc_limits+0x86>
   d8b38:	b927      	cbnz	r7, d8b44 <__tzcalc_limits+0x90>
   d8b3a:	2b3b      	cmp	r3, #59	; 0x3b
   d8b3c:	bfd4      	ite	le
   d8b3e:	2300      	movle	r3, #0
   d8b40:	2301      	movgt	r3, #1
   d8b42:	e000      	b.n	d8b46 <__tzcalc_limits+0x92>
   d8b44:	2300      	movs	r3, #0
   d8b46:	4423      	add	r3, r4
   d8b48:	3b01      	subs	r3, #1
   d8b4a:	e03f      	b.n	d8bcc <__tzcalc_limits+0x118>
   d8b4c:	2b44      	cmp	r3, #68	; 0x44
   d8b4e:	d102      	bne.n	d8b56 <__tzcalc_limits+0xa2>
   d8b50:	694b      	ldr	r3, [r1, #20]
   d8b52:	442b      	add	r3, r5
   d8b54:	e03a      	b.n	d8bcc <__tzcalc_limits+0x118>
   d8b56:	9b00      	ldr	r3, [sp, #0]
   d8b58:	b92b      	cbnz	r3, d8b66 <__tzcalc_limits+0xb2>
   d8b5a:	2e00      	cmp	r6, #0
   d8b5c:	bf0c      	ite	eq
   d8b5e:	46f0      	moveq	r8, lr
   d8b60:	f04f 0801 	movne.w	r8, #1
   d8b64:	e000      	b.n	d8b68 <__tzcalc_limits+0xb4>
   d8b66:	46f0      	mov	r8, lr
   d8b68:	4b24      	ldr	r3, [pc, #144]	; (d8bfc <__tzcalc_limits+0x148>)
   d8b6a:	68cc      	ldr	r4, [r1, #12]
   d8b6c:	2230      	movs	r2, #48	; 0x30
   d8b6e:	fb02 3808 	mla	r8, r2, r8, r3
   d8b72:	f1a8 0a04 	sub.w	sl, r8, #4
   d8b76:	46a9      	mov	r9, r5
   d8b78:	2301      	movs	r3, #1
   d8b7a:	42a3      	cmp	r3, r4
   d8b7c:	da04      	bge.n	d8b88 <__tzcalc_limits+0xd4>
   d8b7e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d8b82:	3301      	adds	r3, #1
   d8b84:	44d9      	add	r9, fp
   d8b86:	e7f8      	b.n	d8b7a <__tzcalc_limits+0xc6>
   d8b88:	f109 0304 	add.w	r3, r9, #4
   d8b8c:	fb93 fbfc 	sdiv	fp, r3, ip
   d8b90:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d8b94:	2c01      	cmp	r4, #1
   d8b96:	ebca 0a03 	rsb	sl, sl, r3
   d8b9a:	694b      	ldr	r3, [r1, #20]
   d8b9c:	bfb8      	it	lt
   d8b9e:	2401      	movlt	r4, #1
   d8ba0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d8ba4:	ebb3 0a0a 	subs.w	sl, r3, sl
   d8ba8:	690b      	ldr	r3, [r1, #16]
   d8baa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d8bae:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d8bb2:	bf48      	it	mi
   d8bb4:	f10a 0a07 	addmi.w	sl, sl, #7
   d8bb8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8bbc:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d8bc0:	4453      	add	r3, sl
   d8bc2:	42a3      	cmp	r3, r4
   d8bc4:	db01      	blt.n	d8bca <__tzcalc_limits+0x116>
   d8bc6:	3b07      	subs	r3, #7
   d8bc8:	e7fb      	b.n	d8bc2 <__tzcalc_limits+0x10e>
   d8bca:	444b      	add	r3, r9
   d8bcc:	698c      	ldr	r4, [r1, #24]
   d8bce:	4a0c      	ldr	r2, [pc, #48]	; (d8c00 <__tzcalc_limits+0x14c>)
   d8bd0:	fb02 4303 	mla	r3, r2, r3, r4
   d8bd4:	6a0c      	ldr	r4, [r1, #32]
   d8bd6:	4423      	add	r3, r4
   d8bd8:	f841 3f1c 	str.w	r3, [r1, #28]!
   d8bdc:	9b01      	ldr	r3, [sp, #4]
   d8bde:	4299      	cmp	r1, r3
   d8be0:	d1a2      	bne.n	d8b28 <__tzcalc_limits+0x74>
   d8be2:	69c3      	ldr	r3, [r0, #28]
   d8be4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d8be6:	4293      	cmp	r3, r2
   d8be8:	bfac      	ite	ge
   d8bea:	2300      	movge	r3, #0
   d8bec:	2301      	movlt	r3, #1
   d8bee:	6003      	str	r3, [r0, #0]
   d8bf0:	2001      	movs	r0, #1
   d8bf2:	e000      	b.n	d8bf6 <__tzcalc_limits+0x142>
   d8bf4:	2000      	movs	r0, #0
   d8bf6:	b003      	add	sp, #12
   d8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8bfc:	000d96a4 	.word	0x000d96a4
   d8c00:	00015180 	.word	0x00015180

000d8c04 <__tz_lock>:
   d8c04:	4770      	bx	lr

000d8c06 <__tz_unlock>:
   d8c06:	4770      	bx	lr

000d8c08 <_tzset_unlocked>:
   d8c08:	4b01      	ldr	r3, [pc, #4]	; (d8c10 <_tzset_unlocked+0x8>)
   d8c0a:	6818      	ldr	r0, [r3, #0]
   d8c0c:	f000 b802 	b.w	d8c14 <_tzset_unlocked_r>
   d8c10:	2003df1c 	.word	0x2003df1c

000d8c14 <_tzset_unlocked_r>:
   d8c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8c18:	b08d      	sub	sp, #52	; 0x34
   d8c1a:	4607      	mov	r7, r0
   d8c1c:	f000 f9be 	bl	d8f9c <__gettzinfo>
   d8c20:	49b0      	ldr	r1, [pc, #704]	; (d8ee4 <_tzset_unlocked_r+0x2d0>)
   d8c22:	4eb1      	ldr	r6, [pc, #708]	; (d8ee8 <_tzset_unlocked_r+0x2d4>)
   d8c24:	4604      	mov	r4, r0
   d8c26:	4638      	mov	r0, r7
   d8c28:	f000 f9b0 	bl	d8f8c <_getenv_r>
   d8c2c:	4605      	mov	r5, r0
   d8c2e:	b960      	cbnz	r0, d8c4a <_tzset_unlocked_r+0x36>
   d8c30:	4bae      	ldr	r3, [pc, #696]	; (d8eec <_tzset_unlocked_r+0x2d8>)
   d8c32:	4aaf      	ldr	r2, [pc, #700]	; (d8ef0 <_tzset_unlocked_r+0x2dc>)
   d8c34:	6018      	str	r0, [r3, #0]
   d8c36:	4baf      	ldr	r3, [pc, #700]	; (d8ef4 <_tzset_unlocked_r+0x2e0>)
   d8c38:	6018      	str	r0, [r3, #0]
   d8c3a:	4baf      	ldr	r3, [pc, #700]	; (d8ef8 <_tzset_unlocked_r+0x2e4>)
   d8c3c:	6830      	ldr	r0, [r6, #0]
   d8c3e:	601a      	str	r2, [r3, #0]
   d8c40:	605a      	str	r2, [r3, #4]
   d8c42:	f7fd faa9 	bl	d6198 <free>
   d8c46:	6035      	str	r5, [r6, #0]
   d8c48:	e148      	b.n	d8edc <_tzset_unlocked_r+0x2c8>
   d8c4a:	6831      	ldr	r1, [r6, #0]
   d8c4c:	b979      	cbnz	r1, d8c6e <_tzset_unlocked_r+0x5a>
   d8c4e:	6830      	ldr	r0, [r6, #0]
   d8c50:	f7fd faa2 	bl	d6198 <free>
   d8c54:	4628      	mov	r0, r5
   d8c56:	f7ff fe88 	bl	d896a <strlen>
   d8c5a:	1c41      	adds	r1, r0, #1
   d8c5c:	4638      	mov	r0, r7
   d8c5e:	f7fd fac3 	bl	d61e8 <_malloc_r>
   d8c62:	6030      	str	r0, [r6, #0]
   d8c64:	b148      	cbz	r0, d8c7a <_tzset_unlocked_r+0x66>
   d8c66:	4629      	mov	r1, r5
   d8c68:	f7ff fe5c 	bl	d8924 <strcpy>
   d8c6c:	e005      	b.n	d8c7a <_tzset_unlocked_r+0x66>
   d8c6e:	f7ff fe4f 	bl	d8910 <strcmp>
   d8c72:	2800      	cmp	r0, #0
   d8c74:	f000 8132 	beq.w	d8edc <_tzset_unlocked_r+0x2c8>
   d8c78:	e7e9      	b.n	d8c4e <_tzset_unlocked_r+0x3a>
   d8c7a:	782b      	ldrb	r3, [r5, #0]
   d8c7c:	4a9f      	ldr	r2, [pc, #636]	; (d8efc <_tzset_unlocked_r+0x2e8>)
   d8c7e:	49a0      	ldr	r1, [pc, #640]	; (d8f00 <_tzset_unlocked_r+0x2ec>)
   d8c80:	2b3a      	cmp	r3, #58	; 0x3a
   d8c82:	bf08      	it	eq
   d8c84:	3501      	addeq	r5, #1
   d8c86:	ae0a      	add	r6, sp, #40	; 0x28
   d8c88:	4633      	mov	r3, r6
   d8c8a:	4628      	mov	r0, r5
   d8c8c:	f7fd fa8c 	bl	d61a8 <siscanf>
   d8c90:	2800      	cmp	r0, #0
   d8c92:	f340 8123 	ble.w	d8edc <_tzset_unlocked_r+0x2c8>
   d8c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8c98:	18ef      	adds	r7, r5, r3
   d8c9a:	5ceb      	ldrb	r3, [r5, r3]
   d8c9c:	2b2d      	cmp	r3, #45	; 0x2d
   d8c9e:	d103      	bne.n	d8ca8 <_tzset_unlocked_r+0x94>
   d8ca0:	3701      	adds	r7, #1
   d8ca2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8ca6:	e003      	b.n	d8cb0 <_tzset_unlocked_r+0x9c>
   d8ca8:	2b2b      	cmp	r3, #43	; 0x2b
   d8caa:	bf08      	it	eq
   d8cac:	3701      	addeq	r7, #1
   d8cae:	2501      	movs	r5, #1
   d8cb0:	f10d 0a20 	add.w	sl, sp, #32
   d8cb4:	f10d 0b1e 	add.w	fp, sp, #30
   d8cb8:	f04f 0800 	mov.w	r8, #0
   d8cbc:	9603      	str	r6, [sp, #12]
   d8cbe:	f8cd a008 	str.w	sl, [sp, #8]
   d8cc2:	9601      	str	r6, [sp, #4]
   d8cc4:	f8cd b000 	str.w	fp, [sp]
   d8cc8:	4633      	mov	r3, r6
   d8cca:	aa07      	add	r2, sp, #28
   d8ccc:	498d      	ldr	r1, [pc, #564]	; (d8f04 <_tzset_unlocked_r+0x2f0>)
   d8cce:	f8ad 801e 	strh.w	r8, [sp, #30]
   d8cd2:	4638      	mov	r0, r7
   d8cd4:	f8ad 8020 	strh.w	r8, [sp, #32]
   d8cd8:	f7fd fa66 	bl	d61a8 <siscanf>
   d8cdc:	4540      	cmp	r0, r8
   d8cde:	f340 80fd 	ble.w	d8edc <_tzset_unlocked_r+0x2c8>
   d8ce2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8ce6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8cea:	f8df 9224 	ldr.w	r9, [pc, #548]	; d8f10 <_tzset_unlocked_r+0x2fc>
   d8cee:	213c      	movs	r1, #60	; 0x3c
   d8cf0:	fb01 3302 	mla	r3, r1, r2, r3
   d8cf4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8cf8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8cfc:	fb01 3302 	mla	r3, r1, r2, r3
   d8d00:	435d      	muls	r5, r3
   d8d02:	6225      	str	r5, [r4, #32]
   d8d04:	4d7c      	ldr	r5, [pc, #496]	; (d8ef8 <_tzset_unlocked_r+0x2e4>)
   d8d06:	4b7d      	ldr	r3, [pc, #500]	; (d8efc <_tzset_unlocked_r+0x2e8>)
   d8d08:	602b      	str	r3, [r5, #0]
   d8d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8d0c:	497c      	ldr	r1, [pc, #496]	; (d8f00 <_tzset_unlocked_r+0x2ec>)
   d8d0e:	441f      	add	r7, r3
   d8d10:	464a      	mov	r2, r9
   d8d12:	4633      	mov	r3, r6
   d8d14:	4638      	mov	r0, r7
   d8d16:	f7fd fa47 	bl	d61a8 <siscanf>
   d8d1a:	4540      	cmp	r0, r8
   d8d1c:	dc08      	bgt.n	d8d30 <_tzset_unlocked_r+0x11c>
   d8d1e:	682b      	ldr	r3, [r5, #0]
   d8d20:	606b      	str	r3, [r5, #4]
   d8d22:	4b72      	ldr	r3, [pc, #456]	; (d8eec <_tzset_unlocked_r+0x2d8>)
   d8d24:	6a22      	ldr	r2, [r4, #32]
   d8d26:	601a      	str	r2, [r3, #0]
   d8d28:	4b72      	ldr	r3, [pc, #456]	; (d8ef4 <_tzset_unlocked_r+0x2e0>)
   d8d2a:	f8c3 8000 	str.w	r8, [r3]
   d8d2e:	e0d5      	b.n	d8edc <_tzset_unlocked_r+0x2c8>
   d8d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8d32:	f8c5 9004 	str.w	r9, [r5, #4]
   d8d36:	18fd      	adds	r5, r7, r3
   d8d38:	5cfb      	ldrb	r3, [r7, r3]
   d8d3a:	2b2d      	cmp	r3, #45	; 0x2d
   d8d3c:	d103      	bne.n	d8d46 <_tzset_unlocked_r+0x132>
   d8d3e:	3501      	adds	r5, #1
   d8d40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8d44:	e003      	b.n	d8d4e <_tzset_unlocked_r+0x13a>
   d8d46:	2b2b      	cmp	r3, #43	; 0x2b
   d8d48:	bf08      	it	eq
   d8d4a:	3501      	addeq	r5, #1
   d8d4c:	2701      	movs	r7, #1
   d8d4e:	2300      	movs	r3, #0
   d8d50:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8d54:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8d58:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8d5c:	930a      	str	r3, [sp, #40]	; 0x28
   d8d5e:	9603      	str	r6, [sp, #12]
   d8d60:	f8cd a008 	str.w	sl, [sp, #8]
   d8d64:	9601      	str	r6, [sp, #4]
   d8d66:	f8cd b000 	str.w	fp, [sp]
   d8d6a:	4633      	mov	r3, r6
   d8d6c:	aa07      	add	r2, sp, #28
   d8d6e:	4965      	ldr	r1, [pc, #404]	; (d8f04 <_tzset_unlocked_r+0x2f0>)
   d8d70:	4628      	mov	r0, r5
   d8d72:	f7fd fa19 	bl	d61a8 <siscanf>
   d8d76:	2800      	cmp	r0, #0
   d8d78:	dc04      	bgt.n	d8d84 <_tzset_unlocked_r+0x170>
   d8d7a:	6a23      	ldr	r3, [r4, #32]
   d8d7c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d8d80:	63e3      	str	r3, [r4, #60]	; 0x3c
   d8d82:	e00e      	b.n	d8da2 <_tzset_unlocked_r+0x18e>
   d8d84:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8d88:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8d8c:	213c      	movs	r1, #60	; 0x3c
   d8d8e:	fb01 3302 	mla	r3, r1, r2, r3
   d8d92:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8d96:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8d9a:	fb01 3302 	mla	r3, r1, r2, r3
   d8d9e:	435f      	muls	r7, r3
   d8da0:	63e7      	str	r7, [r4, #60]	; 0x3c
   d8da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8da4:	4627      	mov	r7, r4
   d8da6:	441d      	add	r5, r3
   d8da8:	f04f 0900 	mov.w	r9, #0
   d8dac:	782b      	ldrb	r3, [r5, #0]
   d8dae:	2b2c      	cmp	r3, #44	; 0x2c
   d8db0:	bf08      	it	eq
   d8db2:	3501      	addeq	r5, #1
   d8db4:	f895 8000 	ldrb.w	r8, [r5]
   d8db8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d8dbc:	d126      	bne.n	d8e0c <_tzset_unlocked_r+0x1f8>
   d8dbe:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d8dc2:	9302      	str	r3, [sp, #8]
   d8dc4:	ab09      	add	r3, sp, #36	; 0x24
   d8dc6:	9300      	str	r3, [sp, #0]
   d8dc8:	9603      	str	r6, [sp, #12]
   d8dca:	9601      	str	r6, [sp, #4]
   d8dcc:	4633      	mov	r3, r6
   d8dce:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d8dd2:	494d      	ldr	r1, [pc, #308]	; (d8f08 <_tzset_unlocked_r+0x2f4>)
   d8dd4:	4628      	mov	r0, r5
   d8dd6:	f7fd f9e7 	bl	d61a8 <siscanf>
   d8dda:	2803      	cmp	r0, #3
   d8ddc:	d17e      	bne.n	d8edc <_tzset_unlocked_r+0x2c8>
   d8dde:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d8de2:	1e4b      	subs	r3, r1, #1
   d8de4:	2b0b      	cmp	r3, #11
   d8de6:	d879      	bhi.n	d8edc <_tzset_unlocked_r+0x2c8>
   d8de8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d8dec:	1e53      	subs	r3, r2, #1
   d8dee:	2b04      	cmp	r3, #4
   d8df0:	d874      	bhi.n	d8edc <_tzset_unlocked_r+0x2c8>
   d8df2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d8df6:	2b06      	cmp	r3, #6
   d8df8:	d870      	bhi.n	d8edc <_tzset_unlocked_r+0x2c8>
   d8dfa:	f887 8008 	strb.w	r8, [r7, #8]
   d8dfe:	60f9      	str	r1, [r7, #12]
   d8e00:	613a      	str	r2, [r7, #16]
   d8e02:	617b      	str	r3, [r7, #20]
   d8e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8e06:	eb05 0803 	add.w	r8, r5, r3
   d8e0a:	e02a      	b.n	d8e62 <_tzset_unlocked_r+0x24e>
   d8e0c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d8e10:	bf06      	itte	eq
   d8e12:	3501      	addeq	r5, #1
   d8e14:	4643      	moveq	r3, r8
   d8e16:	2344      	movne	r3, #68	; 0x44
   d8e18:	220a      	movs	r2, #10
   d8e1a:	a90b      	add	r1, sp, #44	; 0x2c
   d8e1c:	4628      	mov	r0, r5
   d8e1e:	9305      	str	r3, [sp, #20]
   d8e20:	f7ff fe3e 	bl	d8aa0 <strtoul>
   d8e24:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d8e28:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d8e2c:	4545      	cmp	r5, r8
   d8e2e:	9b05      	ldr	r3, [sp, #20]
   d8e30:	d114      	bne.n	d8e5c <_tzset_unlocked_r+0x248>
   d8e32:	234d      	movs	r3, #77	; 0x4d
   d8e34:	f1b9 0f00 	cmp.w	r9, #0
   d8e38:	d107      	bne.n	d8e4a <_tzset_unlocked_r+0x236>
   d8e3a:	7223      	strb	r3, [r4, #8]
   d8e3c:	2303      	movs	r3, #3
   d8e3e:	60e3      	str	r3, [r4, #12]
   d8e40:	2302      	movs	r3, #2
   d8e42:	6123      	str	r3, [r4, #16]
   d8e44:	f8c4 9014 	str.w	r9, [r4, #20]
   d8e48:	e00b      	b.n	d8e62 <_tzset_unlocked_r+0x24e>
   d8e4a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d8e4e:	230b      	movs	r3, #11
   d8e50:	62a3      	str	r3, [r4, #40]	; 0x28
   d8e52:	2301      	movs	r3, #1
   d8e54:	62e3      	str	r3, [r4, #44]	; 0x2c
   d8e56:	2300      	movs	r3, #0
   d8e58:	6323      	str	r3, [r4, #48]	; 0x30
   d8e5a:	e002      	b.n	d8e62 <_tzset_unlocked_r+0x24e>
   d8e5c:	b280      	uxth	r0, r0
   d8e5e:	723b      	strb	r3, [r7, #8]
   d8e60:	6178      	str	r0, [r7, #20]
   d8e62:	2302      	movs	r3, #2
   d8e64:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8e68:	2300      	movs	r3, #0
   d8e6a:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8e6e:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8e72:	930a      	str	r3, [sp, #40]	; 0x28
   d8e74:	f898 3000 	ldrb.w	r3, [r8]
   d8e78:	2b2f      	cmp	r3, #47	; 0x2f
   d8e7a:	d10b      	bne.n	d8e94 <_tzset_unlocked_r+0x280>
   d8e7c:	9603      	str	r6, [sp, #12]
   d8e7e:	f8cd a008 	str.w	sl, [sp, #8]
   d8e82:	9601      	str	r6, [sp, #4]
   d8e84:	f8cd b000 	str.w	fp, [sp]
   d8e88:	4633      	mov	r3, r6
   d8e8a:	aa07      	add	r2, sp, #28
   d8e8c:	491f      	ldr	r1, [pc, #124]	; (d8f0c <_tzset_unlocked_r+0x2f8>)
   d8e8e:	4640      	mov	r0, r8
   d8e90:	f7fd f98a 	bl	d61a8 <siscanf>
   d8e94:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8e98:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8e9c:	213c      	movs	r1, #60	; 0x3c
   d8e9e:	fb01 3302 	mla	r3, r1, r2, r3
   d8ea2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8ea6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8eaa:	fb01 3302 	mla	r3, r1, r2, r3
   d8eae:	61bb      	str	r3, [r7, #24]
   d8eb0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d8eb2:	f109 0901 	add.w	r9, r9, #1
   d8eb6:	f1b9 0f02 	cmp.w	r9, #2
   d8eba:	4445      	add	r5, r8
   d8ebc:	f107 071c 	add.w	r7, r7, #28
   d8ec0:	f47f af74 	bne.w	d8dac <_tzset_unlocked_r+0x198>
   d8ec4:	6860      	ldr	r0, [r4, #4]
   d8ec6:	f7ff fdf5 	bl	d8ab4 <__tzcalc_limits>
   d8eca:	4b08      	ldr	r3, [pc, #32]	; (d8eec <_tzset_unlocked_r+0x2d8>)
   d8ecc:	6a22      	ldr	r2, [r4, #32]
   d8ece:	601a      	str	r2, [r3, #0]
   d8ed0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8ed2:	1a9b      	subs	r3, r3, r2
   d8ed4:	4a07      	ldr	r2, [pc, #28]	; (d8ef4 <_tzset_unlocked_r+0x2e0>)
   d8ed6:	bf18      	it	ne
   d8ed8:	2301      	movne	r3, #1
   d8eda:	6013      	str	r3, [r2, #0]
   d8edc:	b00d      	add	sp, #52	; 0x34
   d8ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8ee2:	bf00      	nop
   d8ee4:	000d9704 	.word	0x000d9704
   d8ee8:	2003e7e0 	.word	0x2003e7e0
   d8eec:	2003e7e8 	.word	0x2003e7e8
   d8ef0:	000d9707 	.word	0x000d9707
   d8ef4:	2003e7e4 	.word	0x2003e7e4
   d8ef8:	2003df20 	.word	0x2003df20
   d8efc:	2003e7d3 	.word	0x2003e7d3
   d8f00:	000d970b 	.word	0x000d970b
   d8f04:	000d972e 	.word	0x000d972e
   d8f08:	000d971a 	.word	0x000d971a
   d8f0c:	000d972d 	.word	0x000d972d
   d8f10:	2003e7c8 	.word	0x2003e7c8

000d8f14 <_findenv_r>:
   d8f14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8f18:	4607      	mov	r7, r0
   d8f1a:	468b      	mov	fp, r1
   d8f1c:	4690      	mov	r8, r2
   d8f1e:	f000 f8d9 	bl	d90d4 <__env_lock>
   d8f22:	4b19      	ldr	r3, [pc, #100]	; (d8f88 <_findenv_r+0x74>)
   d8f24:	681d      	ldr	r5, [r3, #0]
   d8f26:	469a      	mov	sl, r3
   d8f28:	b13d      	cbz	r5, d8f3a <_findenv_r+0x26>
   d8f2a:	465c      	mov	r4, fp
   d8f2c:	4623      	mov	r3, r4
   d8f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8f32:	b142      	cbz	r2, d8f46 <_findenv_r+0x32>
   d8f34:	2a3d      	cmp	r2, #61	; 0x3d
   d8f36:	461c      	mov	r4, r3
   d8f38:	d1f8      	bne.n	d8f2c <_findenv_r+0x18>
   d8f3a:	4638      	mov	r0, r7
   d8f3c:	f000 f8cb 	bl	d90d6 <__env_unlock>
   d8f40:	2000      	movs	r0, #0
   d8f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8f46:	ebcb 0404 	rsb	r4, fp, r4
   d8f4a:	46a9      	mov	r9, r5
   d8f4c:	f859 0b04 	ldr.w	r0, [r9], #4
   d8f50:	2800      	cmp	r0, #0
   d8f52:	d0f2      	beq.n	d8f3a <_findenv_r+0x26>
   d8f54:	4622      	mov	r2, r4
   d8f56:	4659      	mov	r1, fp
   d8f58:	f7ff fd0f 	bl	d897a <strncmp>
   d8f5c:	b988      	cbnz	r0, d8f82 <_findenv_r+0x6e>
   d8f5e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d8f62:	191e      	adds	r6, r3, r4
   d8f64:	5d1b      	ldrb	r3, [r3, r4]
   d8f66:	2b3d      	cmp	r3, #61	; 0x3d
   d8f68:	d10b      	bne.n	d8f82 <_findenv_r+0x6e>
   d8f6a:	f8da 3000 	ldr.w	r3, [sl]
   d8f6e:	1aed      	subs	r5, r5, r3
   d8f70:	10ad      	asrs	r5, r5, #2
   d8f72:	4638      	mov	r0, r7
   d8f74:	f8c8 5000 	str.w	r5, [r8]
   d8f78:	f000 f8ad 	bl	d90d6 <__env_unlock>
   d8f7c:	1c70      	adds	r0, r6, #1
   d8f7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8f82:	464d      	mov	r5, r9
   d8f84:	e7e1      	b.n	d8f4a <_findenv_r+0x36>
   d8f86:	bf00      	nop
   d8f88:	2003df68 	.word	0x2003df68

000d8f8c <_getenv_r>:
   d8f8c:	b507      	push	{r0, r1, r2, lr}
   d8f8e:	aa01      	add	r2, sp, #4
   d8f90:	f7ff ffc0 	bl	d8f14 <_findenv_r>
   d8f94:	b003      	add	sp, #12
   d8f96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8f9c <__gettzinfo>:
   d8f9c:	4800      	ldr	r0, [pc, #0]	; (d8fa0 <__gettzinfo+0x4>)
   d8f9e:	4770      	bx	lr
   d8fa0:	2003df28 	.word	0x2003df28

000d8fa4 <gmtime_r>:
   d8fa4:	6802      	ldr	r2, [r0, #0]
   d8fa6:	4b47      	ldr	r3, [pc, #284]	; (d90c4 <gmtime_r+0x120>)
   d8fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8faa:	fb92 f4f3 	sdiv	r4, r2, r3
   d8fae:	fb03 2214 	mls	r2, r3, r4, r2
   d8fb2:	2a00      	cmp	r2, #0
   d8fb4:	bfbc      	itt	lt
   d8fb6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d8fba:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d8fbe:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d8fc2:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d8fc6:	fb92 f3f0 	sdiv	r3, r2, r0
   d8fca:	fb00 2213 	mls	r2, r0, r3, r2
   d8fce:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d8fd2:	bfac      	ite	ge
   d8fd4:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d8fd8:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d8fdc:	608b      	str	r3, [r1, #8]
   d8fde:	fb92 f3f0 	sdiv	r3, r2, r0
   d8fe2:	fb00 2213 	mls	r2, r0, r3, r2
   d8fe6:	604b      	str	r3, [r1, #4]
   d8fe8:	600a      	str	r2, [r1, #0]
   d8fea:	2307      	movs	r3, #7
   d8fec:	1ce2      	adds	r2, r4, #3
   d8fee:	fb92 f3f3 	sdiv	r3, r2, r3
   d8ff2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8ff6:	1ad3      	subs	r3, r2, r3
   d8ff8:	618b      	str	r3, [r1, #24]
   d8ffa:	4b33      	ldr	r3, [pc, #204]	; (d90c8 <gmtime_r+0x124>)
   d8ffc:	4d33      	ldr	r5, [pc, #204]	; (d90cc <gmtime_r+0x128>)
   d8ffe:	fb94 f5f5 	sdiv	r5, r4, r5
   d9002:	fb03 4405 	mla	r4, r3, r5, r4
   d9006:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d900a:	fbb4 f2f2 	udiv	r2, r4, r2
   d900e:	4422      	add	r2, r4
   d9010:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d9014:	fbb4 f3f7 	udiv	r3, r4, r7
   d9018:	1ad2      	subs	r2, r2, r3
   d901a:	482d      	ldr	r0, [pc, #180]	; (d90d0 <gmtime_r+0x12c>)
   d901c:	fbb4 f0f0 	udiv	r0, r4, r0
   d9020:	f648 6694 	movw	r6, #36500	; 0x8e94
   d9024:	1a13      	subs	r3, r2, r0
   d9026:	fbb3 f6f6 	udiv	r6, r3, r6
   d902a:	4434      	add	r4, r6
   d902c:	f240 126d 	movw	r2, #365	; 0x16d
   d9030:	fbb3 f0f2 	udiv	r0, r3, r2
   d9034:	fbb3 f3f7 	udiv	r3, r3, r7
   d9038:	1ae3      	subs	r3, r4, r3
   d903a:	fb02 3310 	mls	r3, r2, r0, r3
   d903e:	2499      	movs	r4, #153	; 0x99
   d9040:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d9044:	3202      	adds	r2, #2
   d9046:	fbb2 f2f4 	udiv	r2, r2, r4
   d904a:	2a0a      	cmp	r2, #10
   d904c:	fb04 f402 	mul.w	r4, r4, r2
   d9050:	f104 0602 	add.w	r6, r4, #2
   d9054:	f04f 0405 	mov.w	r4, #5
   d9058:	fbb6 f4f4 	udiv	r4, r6, r4
   d905c:	bf34      	ite	cc
   d905e:	2602      	movcc	r6, #2
   d9060:	f06f 0609 	mvncs.w	r6, #9
   d9064:	4416      	add	r6, r2
   d9066:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d906a:	fb02 0505 	mla	r5, r2, r5, r0
   d906e:	1c5f      	adds	r7, r3, #1
   d9070:	2e01      	cmp	r6, #1
   d9072:	bf98      	it	ls
   d9074:	3501      	addls	r5, #1
   d9076:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d907a:	eba7 0704 	sub.w	r7, r7, r4
   d907e:	d302      	bcc.n	d9086 <gmtime_r+0xe2>
   d9080:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d9084:	e014      	b.n	d90b0 <gmtime_r+0x10c>
   d9086:	0782      	lsls	r2, r0, #30
   d9088:	d105      	bne.n	d9096 <gmtime_r+0xf2>
   d908a:	2464      	movs	r4, #100	; 0x64
   d908c:	fbb0 f2f4 	udiv	r2, r0, r4
   d9090:	fb04 0212 	mls	r2, r4, r2, r0
   d9094:	b94a      	cbnz	r2, d90aa <gmtime_r+0x106>
   d9096:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d909a:	fbb0 f4f2 	udiv	r4, r0, r2
   d909e:	fb02 0014 	mls	r0, r2, r4, r0
   d90a2:	fab0 f280 	clz	r2, r0
   d90a6:	0952      	lsrs	r2, r2, #5
   d90a8:	e000      	b.n	d90ac <gmtime_r+0x108>
   d90aa:	2201      	movs	r2, #1
   d90ac:	333b      	adds	r3, #59	; 0x3b
   d90ae:	441a      	add	r2, r3
   d90b0:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d90b4:	2300      	movs	r3, #0
   d90b6:	61ca      	str	r2, [r1, #28]
   d90b8:	614d      	str	r5, [r1, #20]
   d90ba:	610e      	str	r6, [r1, #16]
   d90bc:	60cf      	str	r7, [r1, #12]
   d90be:	620b      	str	r3, [r1, #32]
   d90c0:	4608      	mov	r0, r1
   d90c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d90c4:	00015180 	.word	0x00015180
   d90c8:	fffdc54f 	.word	0xfffdc54f
   d90cc:	00023ab1 	.word	0x00023ab1
   d90d0:	00023ab0 	.word	0x00023ab0

000d90d4 <__env_lock>:
   d90d4:	4770      	bx	lr

000d90d6 <__env_unlock>:
   d90d6:	4770      	bx	lr

000d90d8 <dynalib_user>:
   d90d8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d90e8:	0000 0000                                   ....

000d90ec <_ZTVN8particle13__SPISettingsE>:
	...
   d90f4:	412d 000d                                   -A..

000d90f8 <_ZTV4File>:
	...
   d9100:	40d3 000d 411f 000d 4107 000d 4101 000d     .@...A...A...A..
   d9110:	40b7 000d 40e1 000d 40db 000d 40d5 000d     .@...@...@...@..
   d9120:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d9130:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d9140:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d9150:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   d9160:	2545 3e64 4d00 7861 6f62 6974 2078 6554     E%d>.Maxbotix Te
   d9170:	7473 6400 7369 6174 636e 2e65 7874 0074     st.distance.txt.
   d9180:	6166 6c69 6465 7420 206f 706f 6e65 6320     failed to open c
   d9190:	7261 0064 706f 6e65 6e69 2067 6574 7473     ard.opening test
   d91a0:	742e 7478 6620 726f 7720 6972 6574 6620     .txt for write f
   d91b0:	6961 656c 0064 002c 6c25 2c69 2e25 6635     ailed.,.%li,%.5f
   d91c0:	252c 302e 6632 252c 302e 6632 5400 7972     ,%.02f,%.02f.Try
   d91d0:	6e69 2067 6f74 6320 6e6f 656e 7463 7000     ing to connect.p
   d91e0:	6275 696c 6873 6e69 2067 6164 6174 6d00     ublishing data.m
   d91f0:	7861 7420 6d69 2065 6f66 2072 7570 6c62     ax time for publ
   d9200:	7369 6968 676e 7220 6165 6863 6465 7720     ishing reached w
   d9210:	7469 6f68 7475 7320 6375 6563 7373 203b     ithout success; 
   d9220:	6f67 7420 206f 6c73 6565 0070 6f4e 2074     go to sleep.Not 
   d9230:	616d 2078 6974 656d 202c 7274 2079 6761     max time, try ag
   d9240:	6961 206e 6f74 7020 6275 696c 6873 6700     ain to publish.g
   d9250:	696f 676e 7420 206f 6c73 6565 0070 6c53     oing to sleep.Sl
   d9260:	6565 2070 6f66 2072 6425 7320 6365 6e6f     eep for %d secon
   d9270:	7364 000a 6553 4c61 7665 6c65 425f 6f54     ds..SeaLevel_BTo
   d9280:	6e77 0000                                   wn..

000d9284 <_ZTVN5spark13CellularClassE>:
	...
   d928c:	62db 000d 62d1 000d 62c7 000d 627d 000d     .b...b...b..}b..
   d929c:	62bb 000d 62af 000d 62a3 000d 629b 000d     .b...b...b...b..
   d92ac:	6291 000d 6287 000d 6e11 000d               .b...b...n..

000d92b8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d92c0:	6315 000d 631b 000d 6371 000d 6329 000d     .c...c..qc..)c..
   d92d0:	6317 000d                                   .c..

000d92d4 <_ZTVN5spark13EthernetClassE>:
	...
   d92dc:	692b 000d 6921 000d 6917 000d 690d 000d     +i..!i...i...i..
   d92ec:	6901 000d 68f5 000d 68e9 000d 68e1 000d     .i...h...h...h..
   d92fc:	68d7 000d 68cd 000d 6e11 000d               .h...h...n..

000d9308 <_ZTV7TwoWire>:
	...
   d9310:	6a75 000d 6abf 000d 6a97 000d 6a77 000d     uj...j...j..wj..
   d9320:	6a9f 000d 6aa7 000d 6aaf 000d 6ab7 000d     .j...j...j...j..

000d9330 <_ZTV9IPAddress>:
	...
   d9338:	6b5f 000d 6b4f 000d 6b51 000d 6162 6475     _k..Ok..Qk..baud
   d9348:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9358:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9368:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d9378:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d9388:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d9398:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d93a8:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d93b8:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d93c8:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d93d8:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d93e8:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d93f8:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d9408:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d9418:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d9424 <_ZTVN5spark9MeshClassE>:
	...
   d942c:	6ca3 000d 6c99 000d 6c8f 000d 6c85 000d     .l...l...l...l..
   d943c:	6c79 000d 6c6d 000d 6c61 000d 6c59 000d     yl..ml..al..Yl..
   d944c:	6c4f 000d 6c45 000d 6e11 000d               Ol..El...n..

000d9458 <_ZTVN5spark12NetworkClassE>:
	...
   d9460:	6da9 000d 6db3 000d 6dbd 000d 6dc7 000d     .m...m...m...m..
   d9470:	6dd1 000d 6ddd 000d 6de9 000d 6df5 000d     .m...m...m...m..
   d9480:	6dfd 000d 6e07 000d 6e11 000d 616e 006e     .m...n...n..nan.
   d9490:	766f 0066 002e 6e69 0066 0000               ovf...inf...

000d949c <_ZTV8SPIClass>:
	...
   d94a4:	7255 000d 7257 000d                         Ur..Wr..

000d94ac <_ZL14clock_divisors>:
   d94ac:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
   d94bc:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d94cc:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d94dc <_ZTV11USARTSerial>:
	...
   d94e4:	7521 000d 7571 000d 757f 000d 6f2d 000d     !u..qu...u..-o..
   d94f4:	7535 000d 7557 000d 7543 000d 756b 000d     5u..Wu..Cu..ku..
   d9504:	7523 000d 7527 000d                         #u..'u..

000d950c <_ZTV9USBSerial>:
	...
   d9514:	765d 000d 76ad 000d 76bb 000d 6f2d 000d     ]v...v...v..-o..
   d9524:	7699 000d 765f 000d 7675 000d 76a7 000d     .v.._v..uv...v..
   d9534:	768b 000d 7659 000d                         .v..Yv..

000d953c <_ctype_>:
   d953c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d954c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d955c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d956c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d957c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d958c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d959c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d95ac:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d95bc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d9640 <__sf_fake_stdin>:
	...

000d9660 <__sf_fake_stdout>:
	...

000d9680 <__sf_fake_stderr>:
	...
   d96a0:	0043 0000                                   C...

000d96a4 <__month_lengths>:
   d96a4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d96b4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d96c4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d96d4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d96e4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d96f4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d9704:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d9714:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d9724:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d9734:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d9740 <link_const_variable_data_end>:
   d9740:	000d4561 	.word	0x000d4561
   d9744:	000d4619 	.word	0x000d4619
   d9748:	000d4d01 	.word	0x000d4d01
   d974c:	000d5311 	.word	0x000d5311
   d9750:	000d5335 	.word	0x000d5335
   d9754:	000d5339 	.word	0x000d5339
   d9758:	000d565d 	.word	0x000d565d
   d975c:	000d5661 	.word	0x000d5661
   d9760:	000d5665 	.word	0x000d5665
   d9764:	000d5669 	.word	0x000d5669
   d9768:	000d566d 	.word	0x000d566d
   d976c:	000d5ba7 	.word	0x000d5ba7
   d9770:	000d5bab 	.word	0x000d5bab
   d9774:	000d5baf 	.word	0x000d5baf
   d9778:	000d5c55 	.word	0x000d5c55
   d977c:	000d5c59 	.word	0x000d5c59
   d9780:	000d5c5d 	.word	0x000d5c5d
   d9784:	000d626d 	.word	0x000d626d
   d9788:	000d62e5 	.word	0x000d62e5
   d978c:	000d6935 	.word	0x000d6935
   d9790:	000d6c35 	.word	0x000d6c35
   d9794:	000d6d59 	.word	0x000d6d59
   d9798:	000d6edd 	.word	0x000d6edd
   d979c:	000d7239 	.word	0x000d7239
   d97a0:	000d7411 	.word	0x000d7411
   d97a4:	000d750d 	.word	0x000d750d
   d97a8:	000d7989 	.word	0x000d7989
   d97ac:	000d79e1 	.word	0x000d79e1
   d97b0:	000d7aa5 	.word	0x000d7aa5
   d97b4:	000d7b29 	.word	0x000d7b29
   d97b8:	000d7bad 	.word	0x000d7bad

000d97bc <link_constructors_end>:
   d97bc:	00000000 	.word	0x00000000
