
/Users/pjb/Dropbox/Particle_Projects/Seaport_SLR_Observation/Seaport_Tide-SLR_Maxbotix_Arduino/Firmware/SLR_Boron_Maxbotix_Analog/target/1.4.4/boron/SLR_Boron_Maxbotix_Analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003fd0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00018088  2**0
                  CONTENTS
  4 .data         0000006c  2003df90  000d7ff0  0000df90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000007f4  2003dffc  2003dffc  0001dffc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d805c  000d805c  0001805c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8084  000d8084  00018084  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0016e193  00000000  00000000  00018088  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001cf77  00000000  00000000  0018621b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00026e8c  00000000  00000000  001a3192  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029d8  00000000  00000000  001ca01e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005128  00000000  00000000  001cc9f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004a502  00000000  00000000  001d1b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004f15b  00000000  00000000  0021c020  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010aca2  00000000  00000000  0026b17b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000da50  00000000  00000000  00375e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fd58 	bl	d7ae6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fd5d 	bl	d7afc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003df90 	.word	0x2003df90
   d404c:	000d7ff0 	.word	0x000d7ff0
   d4050:	2003dffc 	.word	0x2003dffc
   d4054:	2003dffc 	.word	0x2003dffc
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fe13 	bl	d6c88 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7fe4 	.word	0x000d7fe4
   d4084:	000d7f68 	.word	0x000d7f68

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b8bc 	b.w	d4204 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8d7 	bl	d4240 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 bdc5 	b.w	d6c24 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bf15 	b.w	d5ec8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bf1b 	b.w	d5ed8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bf19 	b.w	d5ed8 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40b6:	7c03      	ldrb	r3, [r0, #16]
   d40b8:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40bc:	4602      	mov	r2, r0
   d40be:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40c2:	b12b      	cbz	r3, d40d0 <_ZN4File9availableEv+0x1a>
   d40c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40c6:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c8:	1a18      	subs	r0, r3, r0
   d40ca:	bf48      	it	mi
   d40cc:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40d0:	4770      	bx	lr

000d40d2 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40d2:	4770      	bx	lr

000d40d4 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d40d4:	3010      	adds	r0, #16
   d40d6:	f000 bbb3 	b.w	d4840 <_ZN7FatFile4syncEv>

000d40da <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d40da:	3010      	adds	r0, #16
   d40dc:	f000 bac8 	b.w	d4670 <_ZN7FatFile4peekEv>

000d40e0 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d40e0:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d40e2:	2201      	movs	r2, #1
   d40e4:	f10d 0107 	add.w	r1, sp, #7
   d40e8:	3010      	adds	r0, #16
   d40ea:	f000 fa0e 	bl	d450a <_ZN7FatFile4readEPvj>
   d40ee:	2801      	cmp	r0, #1
   d40f0:	bf0c      	ite	eq
   d40f2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d40f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   d40fa:	b003      	add	sp, #12
   d40fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d4100 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4100:	3010      	adds	r0, #16
   d4102:	f000 bc29 	b.w	d4958 <_ZN7FatFile5writeEPKvj>

000d4106 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4106:	b507      	push	{r0, r1, r2, lr}
   d4108:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d410a:	2201      	movs	r2, #1
   d410c:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4110:	3010      	adds	r0, #16
   d4112:	4619      	mov	r1, r3
   d4114:	f000 fc20 	bl	d4958 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4118:	b003      	add	sp, #12
   d411a:	f85d fb04 	ldr.w	pc, [sp], #4

000d411e <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d411e:	b510      	push	{r4, lr}
   d4120:	2134      	movs	r1, #52	; 0x34
   d4122:	4604      	mov	r4, r0
   d4124:	f002 fe77 	bl	d6e16 <_ZdlPvj>
   d4128:	4620      	mov	r0, r4
   d412a:	bd10      	pop	{r4, pc}

000d412c <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d412c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d412e:	4602      	mov	r2, r0
   d4130:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4132:	7913      	ldrb	r3, [r2, #4]
   d4134:	6895      	ldr	r5, [r2, #8]
   d4136:	b133      	cbz	r3, d4146 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4138:	b93d      	cbnz	r5, d414a <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d413a:	490c      	ldr	r1, [pc, #48]	; (d416c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d413c:	b004      	add	sp, #16
   d413e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4142:	f002 b9a1 	b.w	d6488 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4146:	4b0a      	ldr	r3, [pc, #40]	; (d4170 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4148:	e000      	b.n	d414c <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d414a:	4b0a      	ldr	r3, [pc, #40]	; (d4174 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d414c:	7b16      	ldrb	r6, [r2, #12]
   d414e:	4c0a      	ldr	r4, [pc, #40]	; (d4178 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4150:	490a      	ldr	r1, [pc, #40]	; (d417c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4152:	7b52      	ldrb	r2, [r2, #13]
   d4154:	9202      	str	r2, [sp, #8]
   d4156:	2e01      	cmp	r6, #1
   d4158:	bf08      	it	eq
   d415a:	4621      	moveq	r1, r4
   d415c:	9101      	str	r1, [sp, #4]
   d415e:	9500      	str	r5, [sp, #0]
   d4160:	4a07      	ldr	r2, [pc, #28]	; (d4180 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4162:	2100      	movs	r1, #0
   d4164:	f002 fabb 	bl	d66de <_ZN5Print11printf_implEbPKcz>
  }
   d4168:	b004      	add	sp, #16
   d416a:	bd70      	pop	{r4, r5, r6, pc}
   d416c:	000d7bc5 	.word	0x000d7bc5
   d4170:	000d7daf 	.word	0x000d7daf
   d4174:	000d7bb4 	.word	0x000d7bb4
   d4178:	000d7bbd 	.word	0x000d7bbd
   d417c:	000d7bc1 	.word	0x000d7bc1
   d4180:	000d7bdb 	.word	0x000d7bdb

000d4184 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4184:	b530      	push	{r4, r5, lr}
   d4186:	b085      	sub	sp, #20
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4188:	4b1c      	ldr	r3, [pc, #112]	; (d41fc <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d418a:	9300      	str	r3, [sp, #0]
   d418c:	7913      	ldrb	r3, [r2, #4]
   d418e:	f88d 3004 	strb.w	r3, [sp, #4]
   d4192:	6893      	ldr	r3, [r2, #8]
   d4194:	9302      	str	r3, [sp, #8]
   d4196:	7b13      	ldrb	r3, [r2, #12]
   d4198:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d419c:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d41a0:	7b53      	ldrb	r3, [r2, #13]
   d41a2:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41a6:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41a8:	460a      	mov	r2, r1
   d41aa:	466b      	mov	r3, sp
   d41ac:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d41b0:	4628      	mov	r0, r5
   d41b2:	f001 fa25 	bl	d5600 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d41b6:	b1f0      	cbz	r0, d41f6 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d41b8:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d41ba:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d41be:	4628      	mov	r0, r5
   d41c0:	f000 fb74 	bl	d48ac <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d41c4:	2101      	movs	r1, #1
   d41c6:	4620      	mov	r0, r4
   d41c8:	f001 f8bf 	bl	d534a <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d41cc:	4601      	mov	r1, r0
   d41ce:	b168      	cbz	r0, d41ec <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d41d0:	4621      	mov	r1, r4
   d41d2:	4628      	mov	r0, r5
   d41d4:	f000 f981 	bl	d44da <_ZN7FatFile8openRootEP9FatVolume>
   d41d8:	b168      	cbz	r0, d41f6 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d41da:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d41de:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d41e2:	bf16      	itet	ne
   d41e4:	4b06      	ldrne	r3, [pc, #24]	; (d4200 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d41e6:	4618      	moveq	r0, r3
   d41e8:	601d      	strne	r5, [r3, #0]
   d41ea:	e005      	b.n	d41f8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d41ec:	4620      	mov	r0, r4
   d41ee:	f001 f8ac 	bl	d534a <_ZN9FatVolume4initEh>
   d41f2:	2800      	cmp	r0, #0
   d41f4:	d1ec      	bne.n	d41d0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d41f6:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d41f8:	b005      	add	sp, #20
   d41fa:	bd30      	pop	{r4, r5, pc}
   d41fc:	000d7b88 	.word	0x000d7b88
   d4200:	2003e490 	.word	0x2003e490

000d4204 <setup>:
//------------------Turn off cellular for prelim testing
SYSTEM_MODE(MANUAL);
// SYSTEM_THREAD(ENABLED);

void setup(void)
{
   d4204:	b508      	push	{r3, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4206:	480c      	ldr	r0, [pc, #48]	; (d4238 <setup+0x34>)
   d4208:	2300      	movs	r3, #0
   d420a:	4619      	mov	r1, r3
   d420c:	461a      	mov	r2, r3
   d420e:	6840      	ldr	r0, [r0, #4]
   d4210:	f001 fe32 	bl	d5e78 <network_off>
  Cellular.off();

  delay(5000); // to see response from begin command
   d4214:	f241 3088 	movw	r0, #5000	; 0x1388
   d4218:	f001 fe6e 	bl	d5ef8 <delay>

  Serial.begin(9600);
   d421c:	f002 fcbe 	bl	d6b9c <_Z16_fetch_usbserialv>
   d4220:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4224:	f002 fcae 	bl	d6b84 <_ZN9USBSerial5beginEl>
  Serial.println("Maxbotix Test");
   d4228:	f002 fcb8 	bl	d6b9c <_Z16_fetch_usbserialv>
   d422c:	4903      	ldr	r1, [pc, #12]	; (d423c <setup+0x38>)

}
   d422e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Cellular.off();

  delay(5000); // to see response from begin command

  Serial.begin(9600);
  Serial.println("Maxbotix Test");
   d4232:	f002 b93c 	b.w	d64ae <_ZN5Print7printlnEPKc>
   d4236:	bf00      	nop
   d4238:	2003e4a4 	.word	0x2003e4a4
   d423c:	000d7bf9 	.word	0x000d7bf9

000d4240 <loop>:

}

void loop(void)
{
   d4240:	b530      	push	{r4, r5, lr}
  // Read analog value and convert
  //Counts * (V range/count range) * (Inch range/V range)
  dist_in = analogRead(V_ultraS)*(3.3/2048)*(254/3.3);
   d4242:	4b4b      	ldr	r3, [pc, #300]	; (d4370 <loop+0x130>)
   d4244:	4c4b      	ldr	r4, [pc, #300]	; (d4374 <loop+0x134>)
   d4246:	8818      	ldrh	r0, [r3, #0]
  Serial.println("Maxbotix Test");

}

void loop(void)
{
   d4248:	b093      	sub	sp, #76	; 0x4c
  // Read analog value and convert
  //Counts * (V range/count range) * (Inch range/V range)
  dist_in = analogRead(V_ultraS)*(3.3/2048)*(254/3.3);
   d424a:	f002 fd85 	bl	d6d58 <analogRead>
   d424e:	f003 f87f 	bl	d7350 <__aeabi_i2d>
   d4252:	a343      	add	r3, pc, #268	; (adr r3, d4360 <loop+0x120>)
   d4254:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4258:	f003 f8e0 	bl	d741c <__aeabi_dmul>
   d425c:	a342      	add	r3, pc, #264	; (adr r3, d4368 <loop+0x128>)
   d425e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4262:	f003 f8db 	bl	d741c <__aeabi_dmul>
   d4266:	f003 fbd1 	bl	d7a0c <__aeabi_d2f>
   d426a:	6020      	str	r0, [r4, #0]

  // Print out distance
  Serial.print("Time: ");
   d426c:	f002 fc96 	bl	d6b9c <_Z16_fetch_usbserialv>
   d4270:	4941      	ldr	r1, [pc, #260]	; (d4378 <loop+0x138>)
   d4272:	f002 f909 	bl	d6488 <_ZN5Print5printEPKc>
  Serial.print(Time.now());
   d4276:	f002 fc91 	bl	d6b9c <_Z16_fetch_usbserialv>
   d427a:	4605      	mov	r5, r0
   d427c:	f002 fb7e 	bl	d697c <_ZN9TimeClass3nowEv>
   d4280:	220a      	movs	r2, #10
   d4282:	4601      	mov	r1, r0
   d4284:	4628      	mov	r0, r5
   d4286:	f002 f94b 	bl	d6520 <_ZN5Print5printEli>
  Serial.print(", Distance(in): ");
   d428a:	f002 fc87 	bl	d6b9c <_Z16_fetch_usbserialv>
   d428e:	493b      	ldr	r1, [pc, #236]	; (d437c <loop+0x13c>)
   d4290:	f002 f8fa 	bl	d6488 <_ZN5Print5printEPKc>
  
  Serial.println(dist_in);
   d4294:	f002 fc82 	bl	d6b9c <_Z16_fetch_usbserialv>
   d4298:	4605      	mov	r5, r0
   d429a:	6820      	ldr	r0, [r4, #0]
   d429c:	f003 f86a 	bl	d7374 <__aeabi_f2d>
   d42a0:	ec41 0b10 	vmov	d0, r0, r1
   d42a4:	2102      	movs	r1, #2
   d42a6:	4628      	mov	r0, r5
   d42a8:	f002 fa0e 	bl	d66c8 <_ZN5Print7printlnEdi>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d42ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d42b0:	9207      	str	r2, [sp, #28]
 public:
  File() {}
   d42b2:	4a33      	ldr	r2, [pc, #204]	; (d4380 <loop+0x140>)
   d42b4:	9205      	str	r2, [sp, #20]
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d42b6:	4a33      	ldr	r2, [pc, #204]	; (d4384 <loop+0x144>)
   d42b8:	9201      	str	r2, [sp, #4]
   d42ba:	4a33      	ldr	r2, [pc, #204]	; (d4388 <loop+0x148>)
   d42bc:	9203      	str	r2, [sp, #12]
   d42be:	2201      	movs	r2, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d42c0:	2300      	movs	r3, #0
   d42c2:	f88d 2010 	strb.w	r2, [sp, #16]

  // Start SD stuff
	File myFile;

	// Initialize the library
	if (!sd.begin(SD_CHIP_SELECT, SPI_FULL_SPEED)) {
   d42c6:	210e      	movs	r1, #14
   d42c8:	aa01      	add	r2, sp, #4
   d42ca:	4830      	ldr	r0, [pc, #192]	; (d438c <loop+0x14c>)
   d42cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d42d0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d42d4:	9306      	str	r3, [sp, #24]
   d42d6:	f88d 3008 	strb.w	r3, [sp, #8]
   d42da:	f88d 3011 	strb.w	r3, [sp, #17]
   d42de:	f7ff ff51 	bl	d4184 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d42e2:	b918      	cbnz	r0, d42ec <loop+0xac>
		Serial.println("failed to open card");
   d42e4:	f002 fc5a 	bl	d6b9c <_Z16_fetch_usbserialv>
   d42e8:	4929      	ldr	r1, [pc, #164]	; (d4390 <loop+0x150>)
   d42ea:	e00b      	b.n	d4304 <loop+0xc4>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d42ec:	4929      	ldr	r1, [pc, #164]	; (d4394 <loop+0x154>)
   d42ee:	4a2a      	ldr	r2, [pc, #168]	; (d4398 <loop+0x158>)
   d42f0:	6809      	ldr	r1, [r1, #0]
   d42f2:	f244 2302 	movw	r3, #16898	; 0x4202
   d42f6:	a809      	add	r0, sp, #36	; 0x24
   d42f8:	f000 fadf 	bl	d48ba <_ZN7FatFile4openEPS_PKci>
		return;
	}

	// open the file for write at end like the "Native SD library"
	if (!myFile.open("distance.txt", O_RDWR | O_CREAT | O_AT_END)) {
   d42fc:	b928      	cbnz	r0, d430a <loop+0xca>
		Serial.println("opening test.txt for write failed");
   d42fe:	f002 fc4d 	bl	d6b9c <_Z16_fetch_usbserialv>
   d4302:	4926      	ldr	r1, [pc, #152]	; (d439c <loop+0x15c>)
   d4304:	f002 f8d3 	bl	d64ae <_ZN5Print7printlnEPKc>
		return;
   d4308:	e025      	b.n	d4356 <loop+0x116>
	}

  // Save to SD card
  myFile.print(Time.now());
   d430a:	f002 fb37 	bl	d697c <_ZN9TimeClass3nowEv>
   d430e:	220a      	movs	r2, #10
   d4310:	4601      	mov	r1, r0
   d4312:	a805      	add	r0, sp, #20
   d4314:	f002 f904 	bl	d6520 <_ZN5Print5printEli>
  myFile.print(",");
   d4318:	4921      	ldr	r1, [pc, #132]	; (d43a0 <loop+0x160>)
   d431a:	a805      	add	r0, sp, #20
   d431c:	f002 f8b4 	bl	d6488 <_ZN5Print5printEPKc>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4320:	f001 fbde 	bl	d5ae0 <HAL_Timer_Get_Milli_Seconds>
  myFile.print(millis());
   d4324:	220a      	movs	r2, #10
   d4326:	4601      	mov	r1, r0
   d4328:	a805      	add	r0, sp, #20
   d432a:	f002 f8ea 	bl	d6502 <_ZN5Print5printEmi>
  myFile.print(",");
   d432e:	491c      	ldr	r1, [pc, #112]	; (d43a0 <loop+0x160>)
   d4330:	a805      	add	r0, sp, #20
   d4332:	f002 f8a9 	bl	d6488 <_ZN5Print5printEPKc>
  myFile.println(dist_in);
   d4336:	6820      	ldr	r0, [r4, #0]
   d4338:	f003 f81c 	bl	d7374 <__aeabi_f2d>
   d433c:	ec41 0b10 	vmov	d0, r0, r1
   d4340:	2102      	movs	r1, #2
   d4342:	a805      	add	r0, sp, #20
   d4344:	f002 f9c0 	bl	d66c8 <_ZN5Print7printlnEdi>
  myFile.close();
   d4348:	a809      	add	r0, sp, #36	; 0x24
   d434a:	f000 faaf 	bl	d48ac <_ZN7FatFile5closeEv>

  delay(5000);
   d434e:	f241 3088 	movw	r0, #5000	; 0x1388
   d4352:	f001 fdd1 	bl	d5ef8 <delay>
}
   d4356:	b013      	add	sp, #76	; 0x4c
   d4358:	bd30      	pop	{r4, r5, pc}
   d435a:	bf00      	nop
   d435c:	f3af 8000 	nop.w
   d4360:	66666666 	.word	0x66666666
   d4364:	3f5a6666 	.word	0x3f5a6666
   d4368:	83e0f83e 	.word	0x83e0f83e
   d436c:	40533e0f 	.word	0x40533e0f
   d4370:	2003df90 	.word	0x2003df90
   d4374:	2003e000 	.word	0x2003e000
   d4378:	000d7c07 	.word	0x000d7c07
   d437c:	000d7c0e 	.word	0x000d7c0e
   d4380:	000d7b94 	.word	0x000d7b94
   d4384:	000d7b88 	.word	0x000d7b88
   d4388:	02faf080 	.word	0x02faf080
   d438c:	2003e00c 	.word	0x2003e00c
   d4390:	000d7c1f 	.word	0x000d7c1f
   d4394:	2003e490 	.word	0x2003e490
   d4398:	000d7c33 	.word	0x000d7c33
   d439c:	000d7c40 	.word	0x000d7c40
   d43a0:	000d7c62 	.word	0x000d7c62

000d43a4 <_GLOBAL__sub_I_sd>:
   d43a4:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43a6:	f001 fbb3 	bl	d5b10 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d43aa:	4b13      	ldr	r3, [pc, #76]	; (d43f8 <_GLOBAL__sub_I_sd+0x54>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d43ac:	2164      	movs	r1, #100	; 0x64
   d43ae:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d43b2:	4912      	ldr	r1, [pc, #72]	; (d43fc <_GLOBAL__sub_I_sd+0x58>)
   d43b4:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d43b8:	2101      	movs	r1, #1
   d43ba:	2200      	movs	r2, #0
   d43bc:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d43c0:	490f      	ldr	r1, [pc, #60]	; (d4400 <_GLOBAL__sub_I_sd+0x5c>)
   d43c2:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d43c4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d43c8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d43cc:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d43d0:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d43d4:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d43d8:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d43dc:	f8c3 146c 	str.w	r1, [r3, #1132]	; 0x46c
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d43e0:	4b08      	ldr	r3, [pc, #32]	; (d4404 <_GLOBAL__sub_I_sd+0x60>)
   d43e2:	701a      	strb	r2, [r3, #0]
   d43e4:	805a      	strh	r2, [r3, #2]
   d43e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d43ea:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d43ec:	2003      	movs	r0, #3
   d43ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d43f2:	f001 bccd 	b.w	d5d90 <set_system_mode>
   d43f6:	bf00      	nop
   d43f8:	2003e00c 	.word	0x2003e00c
   d43fc:	000d7b88 	.word	0x000d7b88
   d4400:	2003e730 	.word	0x2003e730
   d4404:	2003e004 	.word	0x2003e004

000d4408 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d4408:	f001 bb82 	b.w	d5b10 <HAL_Pin_Map>

000d440c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d440c:	b510      	push	{r4, lr}
   d440e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4410:	3024      	adds	r0, #36	; 0x24
   d4412:	f000 fe8b 	bl	d512c <_ZN8FatCache4syncEv>
   d4416:	b128      	cbz	r0, d4424 <_ZN9FatVolume9cacheSyncEv+0x18>
   d4418:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d441c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4420:	f000 be84 	b.w	d512c <_ZN8FatCache4syncEv>
  }
   d4424:	bd10      	pop	{r4, pc}

000d4426 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4426:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4428:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d442a:	f043 0304 	orr.w	r3, r3, #4
   d442e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4430:	f100 0210 	add.w	r2, r0, #16
   d4434:	6880      	ldr	r0, [r0, #8]
   d4436:	f000 bf2f 	b.w	d5298 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d443c <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d443c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4440:	7803      	ldrb	r3, [r0, #0]
   d4442:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d4446:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4448:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d444c:	b10b      	cbz	r3, d4452 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d444e:	2600      	movs	r6, #0
   d4450:	e02e      	b.n	d44b0 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d4452:	6942      	ldr	r2, [r0, #20]
   d4454:	4b18      	ldr	r3, [pc, #96]	; (d44b8 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d4456:	429a      	cmp	r2, r3
   d4458:	d8f9      	bhi.n	d444e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d445a:	f7ff ffe4 	bl	d4426 <_ZN7FatFile10addClusterEv>
   d445e:	4606      	mov	r6, r0
   d4460:	2800      	cmp	r0, #0
   d4462:	d0f4      	beq.n	d444e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d4464:	6921      	ldr	r1, [r4, #16]
   d4466:	68a0      	ldr	r0, [r4, #8]
   d4468:	f000 feab 	bl	d51c2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d446c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d446e:	68a0      	ldr	r0, [r4, #8]
   d4470:	2205      	movs	r2, #5
   d4472:	4639      	mov	r1, r7
   d4474:	3024      	adds	r0, #36	; 0x24
   d4476:	f000 fe80 	bl	d517a <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d447a:	4680      	mov	r8, r0
   d447c:	2800      	cmp	r0, #0
   d447e:	d0e6      	beq.n	d444e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d4480:	4629      	mov	r1, r5
   d4482:	f44f 7200 	mov.w	r2, #512	; 0x200
   d4486:	f003 fb39 	bl	d7afc <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d448a:	2501      	movs	r5, #1
   d448c:	68a3      	ldr	r3, [r4, #8]
   d448e:	791a      	ldrb	r2, [r3, #4]
   d4490:	42aa      	cmp	r2, r5
   d4492:	d909      	bls.n	d44a8 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4494:	4642      	mov	r2, r8
   d4496:	19e9      	adds	r1, r5, r7
   d4498:	6818      	ldr	r0, [r3, #0]
   d449a:	f001 f9ef 	bl	d587c <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d449e:	2800      	cmp	r0, #0
   d44a0:	d0d5      	beq.n	d444e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d44a2:	3501      	adds	r5, #1
   d44a4:	b2ed      	uxtb	r5, r5
   d44a6:	e7f1      	b.n	d448c <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d44a8:	6963      	ldr	r3, [r4, #20]
   d44aa:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d44ae:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d44b0:	4630      	mov	r0, r6
   d44b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d44b6:	bf00      	nop
   d44b8:	001ffdff 	.word	0x001ffdff

000d44bc <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d44bc:	b510      	push	{r4, lr}
   d44be:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d44c0:	6880      	ldr	r0, [r0, #8]
   d44c2:	460a      	mov	r2, r1
   d44c4:	3024      	adds	r0, #36	; 0x24
   d44c6:	69a1      	ldr	r1, [r4, #24]
   d44c8:	f000 fe57 	bl	d517a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d44cc:	b120      	cbz	r0, d44d8 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d44ce:	88a3      	ldrh	r3, [r4, #4]
   d44d0:	f003 030f 	and.w	r3, r3, #15
   d44d4:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d44d8:	bd10      	pop	{r4, pc}

000d44da <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d44da:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d44dc:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d44de:	4605      	mov	r5, r0
   d44e0:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d44e2:	b984      	cbnz	r4, d4506 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d44e4:	2224      	movs	r2, #36	; 0x24
   d44e6:	4621      	mov	r1, r4
   d44e8:	f003 fb08 	bl	d7afc <memset>

  m_vol = vol;
   d44ec:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d44ee:	79f3      	ldrb	r3, [r6, #7]
   d44f0:	2b10      	cmp	r3, #16
   d44f2:	d003      	beq.n	d44fc <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d44f4:	2b20      	cmp	r3, #32
   d44f6:	d106      	bne.n	d4506 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d44f8:	2340      	movs	r3, #64	; 0x40
   d44fa:	e000      	b.n	d44fe <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d44fc:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d44fe:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d4500:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d4502:	70a8      	strb	r0, [r5, #2]
   d4504:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d4506:	2000      	movs	r0, #0
   d4508:	bd70      	pop	{r4, r5, r6, pc}

000d450a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d450a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d450e:	7803      	ldrb	r3, [r0, #0]
   d4510:	4604      	mov	r4, r0
   d4512:	4689      	mov	r9, r1
   d4514:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d4516:	b14b      	cbz	r3, d452c <_ZN7FatFile4readEPvj+0x22>
   d4518:	7882      	ldrb	r2, [r0, #2]
   d451a:	07d1      	lsls	r1, r2, #31
   d451c:	d506      	bpl.n	d452c <_ZN7FatFile4readEPvj+0x22>
   d451e:	e00c      	b.n	d453a <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4520:	465a      	mov	r2, fp
   d4522:	6921      	ldr	r1, [r4, #16]
   d4524:	f000 fe53 	bl	d51ce <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d4528:	2800      	cmp	r0, #0
   d452a:	da3d      	bge.n	d45a8 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d452c:	7863      	ldrb	r3, [r4, #1]
   d452e:	f043 0302 	orr.w	r3, r3, #2
   d4532:	7063      	strb	r3, [r4, #1]
  return -1;
   d4534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4538:	e097      	b.n	d466a <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d453a:	071a      	lsls	r2, r3, #28
   d453c:	d503      	bpl.n	d4546 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d453e:	69e3      	ldr	r3, [r4, #28]
   d4540:	6962      	ldr	r2, [r4, #20]
   d4542:	1a9b      	subs	r3, r3, r2
   d4544:	e007      	b.n	d4556 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d4546:	069a      	lsls	r2, r3, #26
   d4548:	d508      	bpl.n	d455c <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d454a:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d454c:	891a      	ldrh	r2, [r3, #8]
   d454e:	6963      	ldr	r3, [r4, #20]
   d4550:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d4554:	b29b      	uxth	r3, r3
   d4556:	429d      	cmp	r5, r3
   d4558:	bf28      	it	cs
   d455a:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d455c:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d455e:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4562:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4566:	2e00      	cmp	r6, #0
   d4568:	d035      	beq.n	d45d6 <_ZN7FatFile4readEPvj+0xcc>
   d456a:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d456c:	6963      	ldr	r3, [r4, #20]
   d456e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d4570:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d4574:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d4578:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d457c:	d002      	beq.n	d4584 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d457e:	6a03      	ldr	r3, [r0, #32]
   d4580:	4419      	add	r1, r3
   d4582:	e01d      	b.n	d45c0 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4584:	f890 8005 	ldrb.w	r8, [r0, #5]
   d4588:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d458c:	f1ba 0f00 	cmp.w	sl, #0
   d4590:	d110      	bne.n	d45b4 <_ZN7FatFile4readEPvj+0xaa>
   d4592:	f1b8 0f00 	cmp.w	r8, #0
   d4596:	d10d      	bne.n	d45b4 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d4598:	2b00      	cmp	r3, #0
   d459a:	d1c1      	bne.n	d4520 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d459c:	0653      	lsls	r3, r2, #25
   d459e:	bf4c      	ite	mi
   d45a0:	6a03      	ldrmi	r3, [r0, #32]
   d45a2:	6a23      	ldrpl	r3, [r4, #32]
   d45a4:	6123      	str	r3, [r4, #16]
   d45a6:	e005      	b.n	d45b4 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d45a8:	d104      	bne.n	d45b4 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d45aa:	7823      	ldrb	r3, [r4, #0]
   d45ac:	f013 0f70 	tst.w	r3, #112	; 0x70
   d45b0:	d111      	bne.n	d45d6 <_ZN7FatFile4readEPvj+0xcc>
   d45b2:	e7bb      	b.n	d452c <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d45b4:	6921      	ldr	r1, [r4, #16]
   d45b6:	68a0      	ldr	r0, [r4, #8]
   d45b8:	f000 fe03 	bl	d51c2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d45bc:	eb08 0100 	add.w	r1, r8, r0
   d45c0:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d45c2:	f1ba 0f00 	cmp.w	sl, #0
   d45c6:	d135      	bne.n	d4634 <_ZN7FatFile4readEPvj+0x12a>
   d45c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d45cc:	d332      	bcc.n	d4634 <_ZN7FatFile4readEPvj+0x12a>
   d45ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d45d0:	4299      	cmp	r1, r3
   d45d2:	d102      	bne.n	d45da <_ZN7FatFile4readEPvj+0xd0>
   d45d4:	e02e      	b.n	d4634 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d45d6:	1ba8      	subs	r0, r5, r6
   d45d8:	e047      	b.n	d466a <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d45da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d45de:	d31b      	bcc.n	d4618 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d45e0:	7822      	ldrb	r2, [r4, #0]
   d45e2:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d45e4:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d45e8:	d406      	bmi.n	d45f8 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d45ea:	7902      	ldrb	r2, [r0, #4]
   d45ec:	ebc8 0202 	rsb	r2, r8, r2
   d45f0:	b2d2      	uxtb	r2, r2
   d45f2:	4592      	cmp	sl, r2
   d45f4:	bf28      	it	cs
   d45f6:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d45f8:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d45fa:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d45fe:	d207      	bcs.n	d4610 <_ZN7FatFile4readEPvj+0x106>
   d4600:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d4602:	4653      	mov	r3, sl
   d4604:	464a      	mov	r2, r9
   d4606:	6800      	ldr	r0, [r0, #0]
   d4608:	f001 f8f6 	bl	d57f8 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d460c:	b960      	cbnz	r0, d4628 <_ZN7FatFile4readEPvj+0x11e>
   d460e:	e78d      	b.n	d452c <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4610:	4453      	add	r3, sl
   d4612:	4299      	cmp	r1, r3
   d4614:	d321      	bcc.n	d465a <_ZN7FatFile4readEPvj+0x150>
   d4616:	e7f3      	b.n	d4600 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d4618:	464a      	mov	r2, r9
   d461a:	6800      	ldr	r0, [r0, #0]
   d461c:	f001 f8a4 	bl	d5768 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d4620:	2800      	cmp	r0, #0
   d4622:	d083      	beq.n	d452c <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d4624:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d4628:	6963      	ldr	r3, [r4, #20]
   d462a:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d462c:	44b9      	add	r9, r7
    m_curPosition += n;
   d462e:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d4630:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4632:	e798      	b.n	d4566 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4634:	2200      	movs	r2, #0
   d4636:	3024      	adds	r0, #36	; 0x24
   d4638:	f000 fd9f 	bl	d517a <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d463c:	2800      	cmp	r0, #0
   d463e:	f43f af75 	beq.w	d452c <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d4642:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d4646:	42b7      	cmp	r7, r6
   d4648:	bf28      	it	cs
   d464a:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d464c:	eb00 010a 	add.w	r1, r0, sl
   d4650:	463a      	mov	r2, r7
   d4652:	4648      	mov	r0, r9
   d4654:	f003 fa47 	bl	d7ae6 <memcpy>
   d4658:	e7e6      	b.n	d4628 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d465a:	3024      	adds	r0, #36	; 0x24
   d465c:	9101      	str	r1, [sp, #4]
   d465e:	f000 fd65 	bl	d512c <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d4662:	9901      	ldr	r1, [sp, #4]
   d4664:	2800      	cmp	r0, #0
   d4666:	d1cb      	bne.n	d4600 <_ZN7FatFile4readEPvj+0xf6>
   d4668:	e760      	b.n	d452c <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d466a:	b003      	add	sp, #12
   d466c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4670 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d4670:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4672:	2201      	movs	r2, #1
   d4674:	f10d 0107 	add.w	r1, sp, #7
   d4678:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d467a:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d467c:	6905      	ldr	r5, [r0, #16]
   d467e:	f7ff ff44 	bl	d450a <_ZN7FatFile4readEPvj>
   d4682:	2801      	cmp	r0, #1
   d4684:	bf05      	ittet	eq
   d4686:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d468a:	6166      	streq	r6, [r4, #20]
   d468c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curCluster = pos->cluster;
   d4690:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d4692:	b002      	add	sp, #8
   d4694:	bd70      	pop	{r4, r5, r6, pc}

000d4696 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d4696:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d4698:	6943      	ldr	r3, [r0, #20]
   d469a:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d469e:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d46a0:	b105      	cbz	r5, d46a4 <_ZN7FatFile12readDirCacheEb+0xe>
   d46a2:	b969      	cbnz	r1, d46c0 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d46a4:	2201      	movs	r2, #1
   d46a6:	f10d 0107 	add.w	r1, sp, #7
   d46aa:	4620      	mov	r0, r4
   d46ac:	f7ff ff2d 	bl	d450a <_ZN7FatFile4readEPvj>
   d46b0:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d46b2:	2801      	cmp	r0, #1
   d46b4:	d001      	beq.n	d46ba <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d46b6:	2000      	movs	r0, #0
   d46b8:	e008      	b.n	d46cc <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d46ba:	6963      	ldr	r3, [r4, #20]
   d46bc:	331f      	adds	r3, #31
   d46be:	e000      	b.n	d46c2 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d46c0:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d46c2:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d46c4:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d46c6:	3030      	adds	r0, #48	; 0x30
   d46c8:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d46cc:	b003      	add	sp, #12
   d46ce:	bd30      	pop	{r4, r5, pc}

000d46d0 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d46d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d46d4:	460e      	mov	r6, r1
   d46d6:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d46d8:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d46da:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d46dc:	2900      	cmp	r1, #0
   d46de:	d039      	beq.n	d4754 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d46e0:	6945      	ldr	r5, [r0, #20]
   d46e2:	42b5      	cmp	r5, r6
   d46e4:	d03a      	beq.n	d475c <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d46e6:	b90e      	cbnz	r6, d46ec <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d46e8:	6106      	str	r6, [r0, #16]
    goto done;
   d46ea:	e031      	b.n	d4750 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d46ec:	070b      	lsls	r3, r1, #28
   d46ee:	d503      	bpl.n	d46f8 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d46f0:	69c3      	ldr	r3, [r0, #28]
   d46f2:	429e      	cmp	r6, r3
   d46f4:	d82e      	bhi.n	d4754 <_ZN7FatFile7seekSetEm+0x84>
   d46f6:	e007      	b.n	d4708 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d46f8:	0688      	lsls	r0, r1, #26
   d46fa:	d505      	bpl.n	d4708 <_ZN7FatFile7seekSetEm+0x38>
   d46fc:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d46fe:	891b      	ldrh	r3, [r3, #8]
   d4700:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d4704:	d826      	bhi.n	d4754 <_ZN7FatFile7seekSetEm+0x84>
   d4706:	e023      	b.n	d4750 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4708:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d470c:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d4710:	1e6a      	subs	r2, r5, #1
   d4712:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4716:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4718:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d471a:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d471c:	429a      	cmp	r2, r3
   d471e:	d800      	bhi.n	d4722 <_ZN7FatFile7seekSetEm+0x52>
   d4720:	b94d      	cbnz	r5, d4736 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4722:	064a      	lsls	r2, r1, #25
   d4724:	bf4c      	ite	mi
   d4726:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d472a:	6a22      	ldrpl	r2, [r4, #32]
   d472c:	6122      	str	r2, [r4, #16]
   d472e:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4730:	f104 0810 	add.w	r8, r4, #16
   d4734:	e00a      	b.n	d474c <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d4736:	1a9b      	subs	r3, r3, r2
   d4738:	e7f9      	b.n	d472e <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d473a:	4642      	mov	r2, r8
   d473c:	6921      	ldr	r1, [r4, #16]
   d473e:	68a0      	ldr	r0, [r4, #8]
   d4740:	f000 fd45 	bl	d51ce <_ZN9FatVolume6fatGetEmPm>
   d4744:	2800      	cmp	r0, #0
   d4746:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   d474a:	dd03      	ble.n	d4754 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d474c:	2d00      	cmp	r5, #0
   d474e:	d1f4      	bne.n	d473a <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d4750:	6166      	str	r6, [r4, #20]
   d4752:	e003      	b.n	d475c <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d4754:	6127      	str	r7, [r4, #16]
  return false;
   d4756:	2000      	movs	r0, #0
   d4758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d475c:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d475e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4762 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d4762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4764:	460f      	mov	r7, r1
   d4766:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d4768:	2100      	movs	r1, #0
   d476a:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d476c:	4604      	mov	r4, r0
   d476e:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d4770:	f003 f9c4 	bl	d7afc <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d4774:	68b8      	ldr	r0, [r7, #8]
   d4776:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4778:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d477c:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d477e:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d4782:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d4784:	6a3b      	ldr	r3, [r7, #32]
   d4786:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4788:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d478a:	7acb      	ldrb	r3, [r1, #11]
   d478c:	071d      	lsls	r5, r3, #28
   d478e:	d44c      	bmi.n	d482a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d4790:	1883      	adds	r3, r0, r2
   d4792:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d4796:	f003 0317 	and.w	r3, r3, #23
   d479a:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d479c:	7ac9      	ldrb	r1, [r1, #11]
   d479e:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d47a2:	bf04      	itt	eq
   d47a4:	f043 0308 	orreq.w	r3, r3, #8
   d47a8:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d47aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d47ae:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d47b0:	f006 0303 	and.w	r3, r6, #3
   d47b4:	2b01      	cmp	r3, #1
   d47b6:	d009      	beq.n	d47cc <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d47b8:	2b02      	cmp	r3, #2
   d47ba:	d005      	beq.n	d47c8 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d47bc:	2b00      	cmp	r3, #0
   d47be:	d134      	bne.n	d482a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d47c0:	0571      	lsls	r1, r6, #21
   d47c2:	d432      	bmi.n	d482a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d47c4:	2301      	movs	r3, #1
   d47c6:	e002      	b.n	d47ce <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d47c8:	2303      	movs	r3, #3
   d47ca:	e000      	b.n	d47ce <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d47cc:	2302      	movs	r3, #2
   d47ce:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d47d0:	78a1      	ldrb	r1, [r4, #2]
   d47d2:	078b      	lsls	r3, r1, #30
   d47d4:	d503      	bpl.n	d47de <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d47d6:	7823      	ldrb	r3, [r4, #0]
   d47d8:	f013 0f11 	tst.w	r3, #17
   d47dc:	d125      	bne.n	d482a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d47de:	b24b      	sxtb	r3, r1
   d47e0:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d47e4:	f006 0108 	and.w	r1, r6, #8
   d47e8:	bf14      	ite	ne
   d47ea:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d47ee:	2700      	moveq	r7, #0
   d47f0:	4319      	orrs	r1, r3
   d47f2:	4339      	orrs	r1, r7
   d47f4:	70a1      	strb	r1, [r4, #2]
   d47f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d47f8:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d47fa:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d47fc:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d47fe:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d4802:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d4806:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d480a:	d504      	bpl.n	d4816 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d480c:	b181      	cbz	r1, d4830 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d480e:	f000 fd7e 	bl	d530e <_ZN9FatVolume9freeChainEm>
   d4812:	b968      	cbnz	r0, d4830 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d4814:	e009      	b.n	d482a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d4816:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d4818:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d481a:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d481c:	0473      	lsls	r3, r6, #17
   d481e:	d50c      	bpl.n	d483a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d4820:	69e1      	ldr	r1, [r4, #28]
   d4822:	4620      	mov	r0, r4
   d4824:	f7ff ff54 	bl	d46d0 <_ZN7FatFile7seekSetEm>
   d4828:	b938      	cbnz	r0, d483a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d482a:	2000      	movs	r0, #0
   d482c:	7020      	strb	r0, [r4, #0]
  return false;
   d482e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d4830:	78a3      	ldrb	r3, [r4, #2]
   d4832:	f043 0304 	orr.w	r3, r3, #4
   d4836:	70a3      	strb	r3, [r4, #2]
   d4838:	e7f0      	b.n	d481c <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d483a:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d483c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4840 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4840:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d4842:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4844:	4604      	mov	r4, r0
  if (!isOpen()) {
   d4846:	b90b      	cbnz	r3, d484c <_ZN7FatFile4syncEv+0xc>
    return true;
   d4848:	2001      	movs	r0, #1
   d484a:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d484c:	7883      	ldrb	r3, [r0, #2]
   d484e:	075a      	lsls	r2, r3, #29
   d4850:	d523      	bpl.n	d489a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d4852:	2101      	movs	r1, #1
   d4854:	f7ff fe32 	bl	d44bc <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4858:	4605      	mov	r5, r0
   d485a:	b928      	cbnz	r0, d4868 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d485c:	7863      	ldrb	r3, [r4, #1]
   d485e:	f043 0301 	orr.w	r3, r3, #1
   d4862:	7063      	strb	r3, [r4, #1]
  return false;
   d4864:	2000      	movs	r0, #0
   d4866:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4868:	7803      	ldrb	r3, [r0, #0]
   d486a:	2be5      	cmp	r3, #229	; 0xe5
   d486c:	d0f6      	beq.n	d485c <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d486e:	7823      	ldrb	r3, [r4, #0]
   d4870:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d4872:	bf44      	itt	mi
   d4874:	69e3      	ldrmi	r3, [r4, #28]
   d4876:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d4878:	8c23      	ldrh	r3, [r4, #32]
   d487a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d487c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d487e:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d4880:	4b09      	ldr	r3, [pc, #36]	; (d48a8 <_ZN7FatFile4syncEv+0x68>)
   d4882:	681b      	ldr	r3, [r3, #0]
   d4884:	b12b      	cbz	r3, d4892 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d4886:	f100 0116 	add.w	r1, r0, #22
   d488a:	3018      	adds	r0, #24
   d488c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d488e:	8b2b      	ldrh	r3, [r5, #24]
   d4890:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d4892:	78a3      	ldrb	r3, [r4, #2]
   d4894:	f023 0304 	bic.w	r3, r3, #4
   d4898:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d489a:	68a0      	ldr	r0, [r4, #8]
   d489c:	f7ff fdb6 	bl	d440c <_ZN9FatVolume9cacheSyncEv>
   d48a0:	2800      	cmp	r0, #0
   d48a2:	d0db      	beq.n	d485c <_ZN7FatFile4syncEv+0x1c>
   d48a4:	e7d0      	b.n	d4848 <_ZN7FatFile4syncEv+0x8>
   d48a6:	bf00      	nop
   d48a8:	2003e494 	.word	0x2003e494

000d48ac <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d48ac:	b510      	push	{r4, lr}
   d48ae:	4604      	mov	r4, r0
  bool rtn = sync();
   d48b0:	f7ff ffc6 	bl	d4840 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d48b4:	2300      	movs	r3, #0
   d48b6:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d48b8:	bd10      	pop	{r4, pc}

000d48ba <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d48ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   d48bc:	b093      	sub	sp, #76	; 0x4c
   d48be:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d48c0:	2300      	movs	r3, #0
   d48c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d48c6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d48ca:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d48cc:	9201      	str	r2, [sp, #4]
   d48ce:	4606      	mov	r6, r0
   d48d0:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d48d2:	b10b      	cbz	r3, d48d8 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d48d4:	2000      	movs	r0, #0
   d48d6:	e03d      	b.n	d4954 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d48d8:	780b      	ldrb	r3, [r1, #0]
   d48da:	f013 0f70 	tst.w	r3, #112	; 0x70
   d48de:	d0f9      	beq.n	d48d4 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d48e0:	7813      	ldrb	r3, [r2, #0]
   d48e2:	2b2f      	cmp	r3, #47	; 0x2f
   d48e4:	d112      	bne.n	d490c <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d48e6:	9b01      	ldr	r3, [sp, #4]
   d48e8:	781a      	ldrb	r2, [r3, #0]
   d48ea:	2a2f      	cmp	r2, #47	; 0x2f
   d48ec:	d102      	bne.n	d48f4 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d48ee:	3301      	adds	r3, #1
   d48f0:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d48f2:	e7f8      	b.n	d48e6 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d48f4:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d48f6:	b91a      	cbnz	r2, d4900 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d48f8:	4630      	mov	r0, r6
   d48fa:	f7ff fdee 	bl	d44da <_ZN7FatFile8openRootEP9FatVolume>
   d48fe:	e029      	b.n	d4954 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d4900:	a809      	add	r0, sp, #36	; 0x24
   d4902:	f7ff fdea 	bl	d44da <_ZN7FatFile8openRootEP9FatVolume>
   d4906:	2800      	cmp	r0, #0
   d4908:	d0e4      	beq.n	d48d4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d490a:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d490c:	aa01      	add	r2, sp, #4
   d490e:	a903      	add	r1, sp, #12
   d4910:	9801      	ldr	r0, [sp, #4]
   d4912:	f000 f8ff 	bl	d4b14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d4916:	2800      	cmp	r0, #0
   d4918:	d0dc      	beq.n	d48d4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d491a:	9b01      	ldr	r3, [sp, #4]
   d491c:	781b      	ldrb	r3, [r3, #0]
   d491e:	b19b      	cbz	r3, d4948 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d4920:	2300      	movs	r3, #0
   d4922:	aa03      	add	r2, sp, #12
   d4924:	4621      	mov	r1, r4
   d4926:	4630      	mov	r0, r6
   d4928:	f000 fa36 	bl	d4d98 <_ZN7FatFile4openEPS_P7fname_ti>
   d492c:	2800      	cmp	r0, #0
   d492e:	d0d1      	beq.n	d48d4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d4930:	4635      	mov	r5, r6
   d4932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4934:	ac09      	add	r4, sp, #36	; 0x24
   d4936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d493a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d493c:	682b      	ldr	r3, [r5, #0]
   d493e:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d4940:	4630      	mov	r0, r6
   d4942:	f7ff ffb3 	bl	d48ac <_ZN7FatFile5closeEv>
   d4946:	e7e0      	b.n	d490a <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d4948:	463b      	mov	r3, r7
   d494a:	aa03      	add	r2, sp, #12
   d494c:	4621      	mov	r1, r4
   d494e:	4630      	mov	r0, r6
   d4950:	f000 fa22 	bl	d4d98 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d4954:	b013      	add	sp, #76	; 0x4c
   d4956:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4958 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d495c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d495e:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4960:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4962:	4604      	mov	r4, r0
   d4964:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4966:	d508      	bpl.n	d497a <_ZN7FatFile5writeEPKvj+0x22>
   d4968:	7883      	ldrb	r3, [r0, #2]
   d496a:	079a      	lsls	r2, r3, #30
   d496c:	d505      	bpl.n	d497a <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d496e:	071b      	lsls	r3, r3, #28
   d4970:	d50b      	bpl.n	d498a <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d4972:	69e1      	ldr	r1, [r4, #28]
   d4974:	f7ff feac 	bl	d46d0 <_ZN7FatFile7seekSetEm>
   d4978:	b938      	cbnz	r0, d498a <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d497a:	7863      	ldrb	r3, [r4, #1]
   d497c:	f043 0301 	orr.w	r3, r3, #1
   d4980:	7063      	strb	r3, [r4, #1]
  return -1;
   d4982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d498a:	6963      	ldr	r3, [r4, #20]
   d498c:	43db      	mvns	r3, r3
   d498e:	4598      	cmp	r8, r3
   d4990:	d8f3      	bhi.n	d497a <_ZN7FatFile5writeEPKvj+0x22>
   d4992:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4994:	f04f 0a00 	mov.w	sl, #0
   d4998:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d499a:	2e00      	cmp	r6, #0
   d499c:	f000 8081 	beq.w	d4aa2 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d49a0:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d49a2:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d49a4:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d49a8:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d49ac:	d11c      	bne.n	d49e8 <_ZN7FatFile5writeEPKvj+0x90>
   d49ae:	b9df      	cbnz	r7, d49e8 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d49b0:	6921      	ldr	r1, [r4, #16]
   d49b2:	b171      	cbz	r1, d49d2 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d49b4:	f104 0210 	add.w	r2, r4, #16
   d49b8:	f000 fc09 	bl	d51ce <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d49bc:	2800      	cmp	r0, #0
   d49be:	dbdc      	blt.n	d497a <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d49c0:	f040 808e 	bne.w	d4ae0 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d49c4:	4620      	mov	r0, r4
   d49c6:	f7ff fd2e 	bl	d4426 <_ZN7FatFile10addClusterEv>
   d49ca:	2800      	cmp	r0, #0
   d49cc:	f040 8088 	bne.w	d4ae0 <_ZN7FatFile5writeEPKvj+0x188>
   d49d0:	e7d3      	b.n	d497a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d49d2:	6a23      	ldr	r3, [r4, #32]
   d49d4:	b93b      	cbnz	r3, d49e6 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d49d6:	4620      	mov	r0, r4
   d49d8:	f7ff fd25 	bl	d4426 <_ZN7FatFile10addClusterEv>
   d49dc:	2800      	cmp	r0, #0
   d49de:	d0cc      	beq.n	d497a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d49e0:	6923      	ldr	r3, [r4, #16]
   d49e2:	6223      	str	r3, [r4, #32]
   d49e4:	e000      	b.n	d49e8 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d49e6:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d49e8:	6921      	ldr	r1, [r4, #16]
   d49ea:	68a0      	ldr	r0, [r4, #8]
   d49ec:	f000 fbe9 	bl	d51c2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d49f0:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d49f2:	b917      	cbnz	r7, d49fa <_ZN7FatFile5writeEPKvj+0xa2>
   d49f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d49f8:	d221      	bcs.n	d4a3e <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d49fa:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d49fe:	42b5      	cmp	r5, r6
   d4a00:	bf28      	it	cs
   d4a02:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d4a04:	b937      	cbnz	r7, d4a14 <_ZN7FatFile5writeEPKvj+0xbc>
   d4a06:	6963      	ldr	r3, [r4, #20]
   d4a08:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d4a0a:	4293      	cmp	r3, r2
   d4a0c:	bf34      	ite	cc
   d4a0e:	2201      	movcc	r2, #1
   d4a10:	2205      	movcs	r2, #5
   d4a12:	e000      	b.n	d4a16 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d4a14:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4a16:	68a0      	ldr	r0, [r4, #8]
   d4a18:	3024      	adds	r0, #36	; 0x24
   d4a1a:	f000 fbae 	bl	d517a <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d4a1e:	2800      	cmp	r0, #0
   d4a20:	d0ab      	beq.n	d497a <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4a22:	4438      	add	r0, r7
   d4a24:	462a      	mov	r2, r5
   d4a26:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d4a28:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4a2a:	f003 f85c 	bl	d7ae6 <memcpy>
      if (512 == (n + blockOffset)) {
   d4a2e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d4a32:	d130      	bne.n	d4a96 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d4a34:	68a0      	ldr	r0, [r4, #8]
   d4a36:	3024      	adds	r0, #36	; 0x24
   d4a38:	f000 fb78 	bl	d512c <_ZN8FatCache4syncEv>
   d4a3c:	e017      	b.n	d4a6e <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d4a3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d4a42:	68a0      	ldr	r0, [r4, #8]
   d4a44:	d315      	bcc.n	d4a72 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d4a46:	7902      	ldrb	r2, [r0, #4]
   d4a48:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d4a4a:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d4a4c:	b2d2      	uxtb	r2, r2
   d4a4e:	4293      	cmp	r3, r2
   d4a50:	bf28      	it	cs
   d4a52:	4613      	movcs	r3, r2
   d4a54:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4a56:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d4a58:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4a5c:	d302      	bcc.n	d4a64 <_ZN7FatFile5writeEPKvj+0x10c>
   d4a5e:	441a      	add	r2, r3
   d4a60:	4291      	cmp	r1, r2
   d4a62:	d337      	bcc.n	d4ad4 <_ZN7FatFile5writeEPKvj+0x17c>
   d4a64:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d4a66:	464a      	mov	r2, r9
   d4a68:	6838      	ldr	r0, [r7, #0]
   d4a6a:	f000 ff79 	bl	d5960 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d4a6e:	b990      	cbnz	r0, d4a96 <_ZN7FatFile5writeEPKvj+0x13e>
   d4a70:	e783      	b.n	d497a <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d4a72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4a74:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4a76:	bf02      	ittt	eq
   d4a78:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4a7c:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4a80:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d4a82:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4a84:	464a      	mov	r2, r9
   d4a86:	6818      	ldr	r0, [r3, #0]
   d4a88:	f000 fef8 	bl	d587c <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d4a8c:	2800      	cmp	r0, #0
   d4a8e:	f43f af74 	beq.w	d497a <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d4a92:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d4a96:	6963      	ldr	r3, [r4, #20]
   d4a98:	442b      	add	r3, r5
   d4a9a:	6163      	str	r3, [r4, #20]
    src += n;
   d4a9c:	44a9      	add	r9, r5
    nToWrite -= n;
   d4a9e:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4aa0:	e77a      	b.n	d4998 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d4aa2:	69e2      	ldr	r2, [r4, #28]
   d4aa4:	4293      	cmp	r3, r2
   d4aa6:	d901      	bls.n	d4aac <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d4aa8:	61e3      	str	r3, [r4, #28]
   d4aaa:	e002      	b.n	d4ab2 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d4aac:	4b0f      	ldr	r3, [pc, #60]	; (d4aec <_ZN7FatFile5writeEPKvj+0x194>)
   d4aae:	681b      	ldr	r3, [r3, #0]
   d4ab0:	b11b      	cbz	r3, d4aba <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d4ab2:	78a3      	ldrb	r3, [r4, #2]
   d4ab4:	f043 0304 	orr.w	r3, r3, #4
   d4ab8:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d4aba:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d4abe:	2b00      	cmp	r3, #0
   d4ac0:	db02      	blt.n	d4ac8 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d4ac2:	4640      	mov	r0, r8
   d4ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d4ac8:	4620      	mov	r0, r4
   d4aca:	f7ff feb9 	bl	d4840 <_ZN7FatFile4syncEv>
   d4ace:	2800      	cmp	r0, #0
   d4ad0:	d1f7      	bne.n	d4ac2 <_ZN7FatFile5writeEPKvj+0x16a>
   d4ad2:	e752      	b.n	d497a <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4ad8:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4adc:	62c2      	str	r2, [r0, #44]	; 0x2c
   d4ade:	e7c1      	b.n	d4a64 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4ae0:	6921      	ldr	r1, [r4, #16]
   d4ae2:	68a0      	ldr	r0, [r4, #8]
   d4ae4:	f000 fb6d 	bl	d51c2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4ae8:	4601      	mov	r1, r0
   d4aea:	e783      	b.n	d49f4 <_ZN7FatFile5writeEPKvj+0x9c>
   d4aec:	2003e494 	.word	0x2003e494

000d4af0 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d4af0:	f001 b80e 	b.w	d5b10 <HAL_Pin_Map>

000d4af4 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d4af4:	1e41      	subs	r1, r0, #1
   d4af6:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d4afa:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4afc:	0843      	lsrs	r3, r0, #1
   d4afe:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d4b02:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d4b06:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4b0a:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4b0c:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4b0e:	d1f5      	bne.n	d4afc <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d4b10:	4770      	bx	lr
	...

000d4b14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d4b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d4b18:	7803      	ldrb	r3, [r0, #0]
   d4b1a:	2b20      	cmp	r3, #32
   d4b1c:	f100 0401 	add.w	r4, r0, #1
   d4b20:	d101      	bne.n	d4b26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d4b22:	4620      	mov	r0, r4
   d4b24:	e7f8      	b.n	d4b18 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4b26:	4f70      	ldr	r7, [pc, #448]	; (d4ce8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d4b28:	6088      	str	r0, [r1, #8]
   d4b2a:	4605      	mov	r5, r0
   d4b2c:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d4b2e:	462e      	mov	r6, r5
   d4b30:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d4b34:	b30b      	cbz	r3, d4b7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4b36:	2b2f      	cmp	r3, #47	; 0x2f
   d4b38:	d101      	bne.n	d4b3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d4b3a:	1903      	adds	r3, r0, r4
   d4b3c:	e017      	b.n	d4b6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4b3e:	2b5c      	cmp	r3, #92	; 0x5c
   d4b40:	d102      	bne.n	d4b48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d4b42:	2000      	movs	r0, #0
   d4b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4b48:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d4b4c:	b2e4      	uxtb	r4, r4
   d4b4e:	2c1d      	cmp	r4, #29
   d4b50:	d803      	bhi.n	d4b5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d4b52:	fa27 f404 	lsr.w	r4, r7, r4
   d4b56:	07e4      	lsls	r4, r4, #31
   d4b58:	d4f3      	bmi.n	d4b42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d4b5a:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d4b5e:	2c3c      	cmp	r4, #60	; 0x3c
   d4b60:	d0ef      	beq.n	d4b42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d4b62:	3b20      	subs	r3, #32
   d4b64:	2b5e      	cmp	r3, #94	; 0x5e
   d4b66:	d9e1      	bls.n	d4b2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d4b68:	e7eb      	b.n	d4b42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d4b6a:	2d2f      	cmp	r5, #47	; 0x2f
   d4b6c:	d105      	bne.n	d4b7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4b6e:	461e      	mov	r6, r3
   d4b70:	f813 5b01 	ldrb.w	r5, [r3], #1
   d4b74:	2d20      	cmp	r5, #32
   d4b76:	d1f8      	bne.n	d4b6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d4b78:	e7f9      	b.n	d4b6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d4b7a:	6016      	str	r6, [r2, #0]
   d4b7c:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d4b7e:	4298      	cmp	r0, r3
   d4b80:	ebc0 0803 	rsb	r8, r0, r3
   d4b84:	d009      	beq.n	d4b9a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d4b86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d4b8a:	2a2e      	cmp	r2, #46	; 0x2e
   d4b8c:	d0f7      	beq.n	d4b7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d4b8e:	2a20      	cmp	r2, #32
   d4b90:	d0f5      	beq.n	d4b7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d4b92:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d4b96:	dcd4      	bgt.n	d4b42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d4b98:	e001      	b.n	d4b9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d4b9a:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d4b9e:	f8c1 8004 	str.w	r8, [r1, #4]
   d4ba2:	f101 030c 	add.w	r3, r1, #12
   d4ba6:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d4baa:	2420      	movs	r4, #32
   d4bac:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d4bb0:	4293      	cmp	r3, r2
   d4bb2:	d1fb      	bne.n	d4bac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d4bb4:	4603      	mov	r3, r0
   d4bb6:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d4bb8:	f813 4b01 	ldrb.w	r4, [r3], #1
   d4bbc:	2c2e      	cmp	r4, #46	; 0x2e
   d4bbe:	d0fa      	beq.n	d4bb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d4bc0:	2c20      	cmp	r4, #32
   d4bc2:	d0f8      	beq.n	d4bb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d4bc4:	fab2 f482 	clz	r4, r2
   d4bc8:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d4bca:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   d4bce:	1c73      	adds	r3, r6, #1
   d4bd0:	d107      	bne.n	d4be2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d4bd2:	2700      	movs	r7, #0
   d4bd4:	f04f 0e07 	mov.w	lr, #7
   d4bd8:	463d      	mov	r5, r7
   d4bda:	46ba      	mov	sl, r7
   d4bdc:	f04f 0908 	mov.w	r9, #8
   d4be0:	e009      	b.n	d4bf6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d4be2:	5d83      	ldrb	r3, [r0, r6]
   d4be4:	2b2e      	cmp	r3, #46	; 0x2e
   d4be6:	d0f4      	beq.n	d4bd2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d4be8:	3e01      	subs	r6, #1
   d4bea:	e7f0      	b.n	d4bce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d4bec:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d4bee:	2b20      	cmp	r3, #32
   d4bf0:	d104      	bne.n	d4bfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d4bf2:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d4bf4:	3201      	adds	r2, #1
   d4bf6:	4542      	cmp	r2, r8
   d4bf8:	dbf8      	blt.n	d4bec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d4bfa:	e04b      	b.n	d4c94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d4bfc:	2b2e      	cmp	r3, #46	; 0x2e
   d4bfe:	d102      	bne.n	d4c06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d4c00:	42b2      	cmp	r2, r6
   d4c02:	d1f6      	bne.n	d4bf2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d4c04:	e003      	b.n	d4c0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d4c06:	2b22      	cmp	r3, #34	; 0x22
   d4c08:	d017      	beq.n	d4c3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d4c0a:	2b7c      	cmp	r3, #124	; 0x7c
   d4c0c:	d015      	beq.n	d4c3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d4c0e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d4c12:	f1bc 0f05 	cmp.w	ip, #5
   d4c16:	d801      	bhi.n	d4c1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d4c18:	2b2d      	cmp	r3, #45	; 0x2d
   d4c1a:	d10e      	bne.n	d4c3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d4c1c:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d4c20:	f1bc 0f05 	cmp.w	ip, #5
   d4c24:	d909      	bls.n	d4c3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d4c26:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d4c2a:	f1bc 0f02 	cmp.w	ip, #2
   d4c2e:	d904      	bls.n	d4c3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d4c30:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d4c34:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d4c38:	d902      	bls.n	d4c40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d4c3a:	42b2      	cmp	r2, r6
   d4c3c:	d10e      	bne.n	d4c5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d4c3e:	e049      	b.n	d4cd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4c40:	42b2      	cmp	r2, r6
   d4c42:	d047      	beq.n	d4cd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d4c44:	4575      	cmp	r5, lr
   d4c46:	d821      	bhi.n	d4c8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d4c48:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d4c4c:	f1bc 0f19 	cmp.w	ip, #25
   d4c50:	d808      	bhi.n	d4c64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d4c52:	3b20      	subs	r3, #32
   d4c54:	b2db      	uxtb	r3, r3
        lc |= bit;
   d4c56:	ea49 0707 	orr.w	r7, r9, r7
   d4c5a:	e00a      	b.n	d4c72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4c5c:	4575      	cmp	r5, lr
   d4c5e:	d815      	bhi.n	d4c8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d4c60:	2400      	movs	r4, #0
      c = '_';
   d4c62:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d4c64:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d4c68:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d4c6c:	bf98      	it	ls
   d4c6e:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d4c72:	f105 0c01 	add.w	ip, r5, #1
   d4c76:	fa5f fc8c 	uxtb.w	ip, ip
   d4c7a:	440d      	add	r5, r1
      if (i < 7) {
   d4c7c:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d4c80:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d4c82:	d801      	bhi.n	d4c88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d4c84:	f881 c00c 	strb.w	ip, [r1, #12]
   d4c88:	4665      	mov	r5, ip
   d4c8a:	e7b3      	b.n	d4bf4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4c8c:	f1be 0f0a 	cmp.w	lr, #10
   d4c90:	d117      	bne.n	d4cc2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d4c92:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d4c94:	7b4b      	ldrb	r3, [r1, #13]
   d4c96:	2b20      	cmp	r3, #32
   d4c98:	f43f af53 	beq.w	d4b42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d4c9c:	b13c      	cbz	r4, d4cae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d4c9e:	ea1a 0f07 	tst.w	sl, r7
   d4ca2:	bf18      	it	ne
   d4ca4:	2702      	movne	r7, #2
   d4ca6:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d4ca8:	2001      	movs	r0, #1
   d4caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d4cae:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d4cb0:	2001      	movs	r0, #1
   d4cb2:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d4cb4:	4419      	add	r1, r3
   d4cb6:	237e      	movs	r3, #126	; 0x7e
   d4cb8:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d4cba:	2331      	movs	r3, #49	; 0x31
   d4cbc:	738b      	strb	r3, [r1, #14]
   d4cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d4cc2:	42b2      	cmp	r2, r6
   d4cc4:	dce5      	bgt.n	d4c92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4cc6:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4cc8:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4ccc:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4cce:	f04f 0910 	mov.w	r9, #16
   d4cd2:	e78e      	b.n	d4bf2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4cd4:	f1be 0f0a 	cmp.w	lr, #10
   d4cd8:	d0db      	beq.n	d4c92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4cda:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4cdc:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4ce0:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4ce2:	f04f 0910 	mov.w	r9, #16
   d4ce6:	e785      	b.n	d4bf4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d4ce8:	31000101 	.word	0x31000101

000d4cec <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4cf0:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4cf4:	4606      	mov	r6, r0
   d4cf6:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4cf8:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4cfa:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4cfc:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d4d00:	6869      	ldr	r1, [r5, #4]
   d4d02:	68aa      	ldr	r2, [r5, #8]
   d4d04:	1863      	adds	r3, r4, r1
   d4d06:	b29b      	uxth	r3, r3
   d4d08:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d4d0a:	4291      	cmp	r1, r2
   d4d0c:	d006      	beq.n	d4d1c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d4d0e:	f812 0b01 	ldrb.w	r0, [r2], #1
   d4d12:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d4d16:	4043      	eors	r3, r0
   d4d18:	b29b      	uxth	r3, r3
   d4d1a:	e7f6      	b.n	d4d0a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d4d1c:	f1b9 0f03 	cmp.w	r9, #3
   d4d20:	bf28      	it	cs
   d4d22:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4d26:	f109 0204 	add.w	r2, r9, #4
   d4d2a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d4d2c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4d30:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4d32:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4d34:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4d36:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4d38:	bf94      	ite	ls
   d4d3a:	3130      	addls	r1, #48	; 0x30
   d4d3c:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4d3e:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4d40:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d4d42:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4d46:	d3f1      	bcc.n	d4d2c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4d48:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d4d4c:	2100      	movs	r1, #0
   d4d4e:	735f      	strb	r7, [r3, #13]
   d4d50:	4630      	mov	r0, r6
   d4d52:	f7ff fcbd 	bl	d46d0 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d4d56:	2101      	movs	r1, #1
   d4d58:	4630      	mov	r0, r6
   d4d5a:	f7ff fc9c 	bl	d4696 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d4d5e:	4601      	mov	r1, r0
   d4d60:	b928      	cbnz	r0, d4d6e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d4d62:	7870      	ldrb	r0, [r6, #1]
   d4d64:	fab0 f080 	clz	r0, r0
   d4d68:	0940      	lsrs	r0, r0, #5
   d4d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d4d6e:	7803      	ldrb	r3, [r0, #0]
   d4d70:	b14b      	cbz	r3, d4d86 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4d72:	7ac3      	ldrb	r3, [r0, #11]
   d4d74:	071b      	lsls	r3, r3, #28
   d4d76:	d4ee      	bmi.n	d4d56 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4d78:	220b      	movs	r2, #11
   d4d7a:	4640      	mov	r0, r8
   d4d7c:	f002 fea4 	bl	d7ac8 <memcmp>
   d4d80:	2800      	cmp	r0, #0
   d4d82:	d1e8      	bne.n	d4d56 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4d84:	e002      	b.n	d4d8c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d4d86:	2001      	movs	r0, #1
   d4d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4d8c:	3401      	adds	r4, #1
   d4d8e:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d4d90:	2c64      	cmp	r4, #100	; 0x64
   d4d92:	d1b5      	bne.n	d4d00 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d4d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4d98 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d9c:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4d9e:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4da0:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4da2:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4da6:	9005      	str	r0, [sp, #20]
   d4da8:	460e      	mov	r6, r1
   d4daa:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4dac:	d101      	bne.n	d4db2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d4dae:	2000      	movs	r0, #0
   d4db0:	e1a0      	b.n	d50f4 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4db2:	9b05      	ldr	r3, [sp, #20]
   d4db4:	781b      	ldrb	r3, [r3, #0]
   d4db6:	2b00      	cmp	r3, #0
   d4db8:	d1f9      	bne.n	d4dae <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d4dba:	6853      	ldr	r3, [r2, #4]
   d4dbc:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d4dbe:	7813      	ldrb	r3, [r2, #0]
   d4dc0:	079b      	lsls	r3, r3, #30
   d4dc2:	f000 818d 	beq.w	d50e0 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d4dc6:	9b02      	ldr	r3, [sp, #8]
   d4dc8:	270d      	movs	r7, #13
   d4dca:	330c      	adds	r3, #12
   d4dcc:	fbb3 f7f7 	udiv	r7, r3, r7
   d4dd0:	3701      	adds	r7, #1
   d4dd2:	b2ff      	uxtb	r7, r7
   d4dd4:	2100      	movs	r1, #0
   d4dd6:	4630      	mov	r0, r6
   d4dd8:	f7ff fc7a 	bl	d46d0 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d4ddc:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4de0:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d4de4:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d4de8:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d4dea:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d4dec:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d4dee:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4df2:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4df4:	6972      	ldr	r2, [r6, #20]
   d4df6:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d4df8:	2101      	movs	r1, #1
   d4dfa:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4dfc:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d4e00:	f7ff fc49 	bl	d4696 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d4e04:	9b07      	ldr	r3, [sp, #28]
   d4e06:	b920      	cbnz	r0, d4e12 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d4e08:	7873      	ldrb	r3, [r6, #1]
   d4e0a:	2b00      	cmp	r3, #0
   d4e0c:	f000 8090 	beq.w	d4f30 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d4e10:	e7cd      	b.n	d4dae <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d4e12:	7802      	ldrb	r2, [r0, #0]
   d4e14:	2ae5      	cmp	r2, #229	; 0xe5
   d4e16:	d000      	beq.n	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d4e18:	b942      	cbnz	r2, d4e2c <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4e1a:	2c00      	cmp	r4, #0
   d4e1c:	bf08      	it	eq
   d4e1e:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d4e20:	42bc      	cmp	r4, r7
        freeFound++;
   d4e22:	bf3c      	itt	cc
   d4e24:	3401      	addcc	r4, #1
   d4e26:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d4e28:	b922      	cbnz	r2, d4e34 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d4e2a:	e081      	b.n	d4f30 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d4e2c:	42bc      	cmp	r4, r7
   d4e2e:	bf38      	it	cc
   d4e30:	2400      	movcc	r4, #0
   d4e32:	e003      	b.n	d4e3c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d4e34:	2ae5      	cmp	r2, #229	; 0xe5
   d4e36:	d101      	bne.n	d4e3c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d4e38:	2500      	movs	r5, #0
   d4e3a:	e7db      	b.n	d4df4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d4e3c:	2a2e      	cmp	r2, #46	; 0x2e
   d4e3e:	d0fb      	beq.n	d4e38 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4e40:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d4e42:	290f      	cmp	r1, #15
   d4e44:	d152      	bne.n	d4eec <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d4e46:	b93d      	cbnz	r5, d4e58 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d4e48:	0651      	lsls	r1, r2, #25
   d4e4a:	d5d3      	bpl.n	d4df4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d4e4c:	7b43      	ldrb	r3, [r0, #13]
   d4e4e:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d4e50:	f002 051f 	and.w	r5, r2, #31
   d4e54:	462b      	mov	r3, r5
   d4e56:	e007      	b.n	d4e68 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d4e58:	3b01      	subs	r3, #1
   d4e5a:	b2db      	uxtb	r3, r3
   d4e5c:	429a      	cmp	r2, r3
   d4e5e:	d1eb      	bne.n	d4e38 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4e60:	7b42      	ldrb	r2, [r0, #13]
   d4e62:	9903      	ldr	r1, [sp, #12]
   d4e64:	4291      	cmp	r1, r2
   d4e66:	d1e7      	bne.n	d4e38 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d4e68:	1e5a      	subs	r2, r3, #1
   d4e6a:	f04f 0c0d 	mov.w	ip, #13
   d4e6e:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d4e72:	9a02      	ldr	r2, [sp, #8]
   d4e74:	4562      	cmp	r2, ip
   d4e76:	d9df      	bls.n	d4e38 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4e78:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d4e7c:	f1be 0f04 	cmp.w	lr, #4
   d4e80:	fa5f f28e 	uxtb.w	r2, lr
   d4e84:	d804      	bhi.n	d4e90 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d4e86:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d4e8a:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d4e8e:	e00c      	b.n	d4eaa <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d4e90:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4e92:	bf95      	itete	ls
   d4e94:	f10e 32ff 	addls.w	r2, lr, #4294967295	; 0xffffffff
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4e98:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4e9c:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4ea0:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4ea4:	bf94      	ite	ls
   d4ea6:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4ea8:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d4eaa:	9902      	ldr	r1, [sp, #8]
   d4eac:	4561      	cmp	r1, ip
   d4eae:	d103      	bne.n	d4eb8 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d4eb0:	2a00      	cmp	r2, #0
   d4eb2:	bf18      	it	ne
   d4eb4:	2500      	movne	r5, #0
   d4eb6:	e79d      	b.n	d4df4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4eb8:	2aff      	cmp	r2, #255	; 0xff
   d4eba:	d8bd      	bhi.n	d4e38 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4ebc:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4ebe:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d4ec2:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4ec4:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d4ec8:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4ecc:	bf98      	it	ls
   d4ece:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4ed0:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4ed4:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d4ed8:	bf98      	it	ls
   d4eda:	b2d2      	uxtbls	r2, r2
   d4edc:	f1bc 0f19 	cmp.w	ip, #25
   d4ee0:	bf9c      	itt	ls
   d4ee2:	3120      	addls	r1, #32
   d4ee4:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4ee6:	4291      	cmp	r1, r2
   d4ee8:	d1a6      	bne.n	d4e38 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4eea:	e0fb      	b.n	d50e4 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d4eec:	0709      	lsls	r1, r1, #28
   d4eee:	d4a3      	bmi.n	d4e38 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d4ef0:	b14d      	cbz	r5, d4f06 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d4ef2:	2b01      	cmp	r3, #1
   d4ef4:	f47f af5b 	bne.w	d4dae <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d4ef8:	f7ff fdfc 	bl	d4af4 <_ZN7FatFile11lfnChecksumEPh>
   d4efc:	9b03      	ldr	r3, [sp, #12]
   d4efe:	4283      	cmp	r3, r0
   d4f00:	f47f af55 	bne.w	d4dae <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d4f04:	e00f      	b.n	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4f06:	220b      	movs	r2, #11
   d4f08:	9906      	ldr	r1, [sp, #24]
   d4f0a:	9307      	str	r3, [sp, #28]
   d4f0c:	f002 fddc 	bl	d7ac8 <memcmp>
   d4f10:	9b07      	ldr	r3, [sp, #28]
   d4f12:	2800      	cmp	r0, #0
   d4f14:	f47f af6e 	bne.w	d4df4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d4f18:	f899 2000 	ldrb.w	r2, [r9]
   d4f1c:	07d2      	lsls	r2, r2, #31
   d4f1e:	d502      	bpl.n	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d4f20:	2201      	movs	r2, #1
   d4f22:	9204      	str	r2, [sp, #16]
   d4f24:	e766      	b.n	d4df4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d4f26:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d4f2a:	f000 80d1 	beq.w	d50d0 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d4f2e:	e73e      	b.n	d4dae <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d4f30:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d4f34:	f43f af3b 	beq.w	d4dae <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d4f38:	f00b 0303 	and.w	r3, fp, #3
   d4f3c:	3b01      	subs	r3, #1
   d4f3e:	2b01      	cmp	r3, #1
   d4f40:	f63f af35 	bhi.w	d4dae <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d4f44:	2c00      	cmp	r4, #0
   d4f46:	bf08      	it	eq
   d4f48:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d4f4a:	42bc      	cmp	r4, r7
   d4f4c:	d302      	bcc.n	d4f54 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d4f4e:	9b04      	ldr	r3, [sp, #16]
   d4f50:	b9cb      	cbnz	r3, d4f86 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d4f52:	e01f      	b.n	d4f94 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d4f54:	2100      	movs	r1, #0
   d4f56:	4630      	mov	r0, r6
   d4f58:	f7ff fb9d 	bl	d4696 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d4f5c:	b910      	cbnz	r0, d4f64 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d4f5e:	7873      	ldrb	r3, [r6, #1]
   d4f60:	b15b      	cbz	r3, d4f7a <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d4f62:	e724      	b.n	d4dae <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d4f64:	3401      	adds	r4, #1
   d4f66:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d4f68:	e7ef      	b.n	d4f4a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d4f6a:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d4f6c:	791b      	ldrb	r3, [r3, #4]
   d4f6e:	2b01      	cmp	r3, #1
   d4f70:	d8ed      	bhi.n	d4f4e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d4f72:	3410      	adds	r4, #16
   d4f74:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d4f76:	42a7      	cmp	r7, r4
   d4f78:	d9e9      	bls.n	d4f4e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d4f7a:	4630      	mov	r0, r6
   d4f7c:	f7ff fa5e 	bl	d443c <_ZN7FatFile13addDirClusterEv>
   d4f80:	2800      	cmp	r0, #0
   d4f82:	d1f2      	bne.n	d4f6a <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d4f84:	e713      	b.n	d4dae <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d4f86:	4649      	mov	r1, r9
   d4f88:	4630      	mov	r0, r6
   d4f8a:	f7ff feaf 	bl	d4cec <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d4f8e:	2800      	cmp	r0, #0
   d4f90:	f43f af0d 	beq.w	d4dae <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d4f94:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d4f98:	4630      	mov	r0, r6
   d4f9a:	f7ff fb99 	bl	d46d0 <_ZN7FatFile7seekSetEm>
   d4f9e:	2800      	cmp	r0, #0
   d4fa0:	f43f af05 	beq.w	d4dae <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d4fa4:	1e7d      	subs	r5, r7, #1
   d4fa6:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d4fa8:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d4faa:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d4fae:	f04f 080f 	mov.w	r8, #15
   d4fb2:	e041      	b.n	d5038 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d4fb4:	2100      	movs	r1, #0
   d4fb6:	4630      	mov	r0, r6
   d4fb8:	f7ff fb6d 	bl	d4696 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d4fbc:	4607      	mov	r7, r0
   d4fbe:	2800      	cmp	r0, #0
   d4fc0:	f43f aef5 	beq.w	d4dae <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d4fc4:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d4fc6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d4fca:	42ac      	cmp	r4, r5
   d4fcc:	f043 0301 	orr.w	r3, r3, #1
   d4fd0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d4fd4:	bf0c      	ite	eq
   d4fd6:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d4fda:	4622      	movne	r2, r4
   d4fdc:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d4fde:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d4fe2:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d4fe6:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d4fea:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d4fec:	f7ff fd82 	bl	d4af4 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d4ff0:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d4ff2:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d4ff4:	f887 a01a 	strb.w	sl, [r7, #26]
   d4ff8:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d4ffc:	f002 021f 	and.w	r2, r2, #31
   d5000:	230d      	movs	r3, #13
   d5002:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5004:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5008:	435a      	muls	r2, r3
   d500a:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d500c:	9902      	ldr	r1, [sp, #8]
   d500e:	4291      	cmp	r1, r2
   d5010:	d915      	bls.n	d503e <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d5012:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d5016:	2b04      	cmp	r3, #4
   d5018:	fa5f fc83 	uxtb.w	ip, r3
   d501c:	f103 0001 	add.w	r0, r3, #1
   d5020:	d813      	bhi.n	d504a <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d5022:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d5026:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d502a:	280d      	cmp	r0, #13
   d502c:	f102 0201 	add.w	r2, r2, #1
   d5030:	4603      	mov	r3, r0
   d5032:	d1eb      	bne.n	d500c <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5034:	3c01      	subs	r4, #1
   d5036:	b2e4      	uxtb	r4, r4
   d5038:	2c00      	cmp	r4, #0
   d503a:	d1bb      	bne.n	d4fb4 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d503c:	e00e      	b.n	d505c <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d503e:	bf14      	ite	ne
   d5040:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d5044:	2100      	moveq	r1, #0
   d5046:	b289      	uxth	r1, r1
   d5048:	e7e5      	b.n	d5016 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d504a:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d504e:	bf94      	ite	ls
   d5050:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d5054:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d5058:	8099      	strh	r1, [r3, #4]
   d505a:	e7e6      	b.n	d502a <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d505c:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d505e:	4621      	mov	r1, r4
   d5060:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5062:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d5066:	f7ff fb16 	bl	d4696 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d506a:	4607      	mov	r7, r0
   d506c:	2800      	cmp	r0, #0
   d506e:	f43f ae9e 	beq.w	d4dae <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d5072:	2220      	movs	r2, #32
   d5074:	4621      	mov	r1, r4
   d5076:	f002 fd41 	bl	d7afc <memset>
  memcpy(dir->name, fname->sfn, 11);
   d507a:	464b      	mov	r3, r9
   d507c:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d5080:	603a      	str	r2, [r7, #0]
   d5082:	685a      	ldr	r2, [r3, #4]
   d5084:	607a      	str	r2, [r7, #4]
   d5086:	891a      	ldrh	r2, [r3, #8]
   d5088:	813a      	strh	r2, [r7, #8]
   d508a:	7a9b      	ldrb	r3, [r3, #10]
   d508c:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d508e:	f899 3000 	ldrb.w	r3, [r9]
   d5092:	f003 0318 	and.w	r3, r3, #24
   d5096:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d5098:	4b18      	ldr	r3, [pc, #96]	; (d50fc <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d509a:	681b      	ldr	r3, [r3, #0]
   d509c:	b12b      	cbz	r3, d50aa <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d509e:	f107 010e 	add.w	r1, r7, #14
   d50a2:	f107 0010 	add.w	r0, r7, #16
   d50a6:	4798      	blx	r3
   d50a8:	e006      	b.n	d50b8 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d50aa:	2321      	movs	r3, #33	; 0x21
   d50ac:	743b      	strb	r3, [r7, #16]
   d50ae:	2328      	movs	r3, #40	; 0x28
   d50b0:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d50b2:	2308      	movs	r3, #8
   d50b4:	73bc      	strb	r4, [r7, #14]
   d50b6:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d50b8:	8a3b      	ldrh	r3, [r7, #16]
   d50ba:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d50bc:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d50be:	89fb      	ldrh	r3, [r7, #14]
   d50c0:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d50c2:	68b2      	ldr	r2, [r6, #8]
   d50c4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d50c8:	f043 0301 	orr.w	r3, r3, #1
   d50cc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d50d0:	9500      	str	r5, [sp, #0]
   d50d2:	465b      	mov	r3, fp
   d50d4:	4652      	mov	r2, sl
   d50d6:	4631      	mov	r1, r6
   d50d8:	9805      	ldr	r0, [sp, #20]
   d50da:	f7ff fb42 	bl	d4762 <_ZN7FatFile15openCachedEntryEPS_tih>
   d50de:	e009      	b.n	d50f4 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d50e0:	2701      	movs	r7, #1
   d50e2:	e677      	b.n	d4dd4 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d50e4:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d50e8:	f1be 0f0d 	cmp.w	lr, #13
   d50ec:	f43f ae82 	beq.w	d4df4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d50f0:	46d4      	mov	ip, sl
   d50f2:	e6c3      	b.n	d4e7c <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d50f4:	b009      	add	sp, #36	; 0x24
   d50f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d50fa:	bf00      	nop
   d50fc:	2003e494 	.word	0x2003e494

000d5100 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5100:	f000 bd06 	b.w	d5b10 <HAL_Pin_Map>

000d5104 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5104:	b570      	push	{r4, r5, r6, lr}
   d5106:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5108:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d510a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d510c:	b149      	cbz	r1, d5122 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d510e:	f002 fd25 	bl	d7b5c <strlen>
   d5112:	682b      	ldr	r3, [r5, #0]
   d5114:	4602      	mov	r2, r0
   d5116:	4621      	mov	r1, r4
   d5118:	4628      	mov	r0, r5
   d511a:	68db      	ldr	r3, [r3, #12]
    }
   d511c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5120:	4718      	bx	r3
    }
   d5122:	bd70      	pop	{r4, r5, r6, pc}

000d5124 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5124:	f000 bcf4 	b.w	d5b10 <HAL_Pin_Map>

000d5128 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5128:	f000 bcf2 	b.w	d5b10 <HAL_Pin_Map>

000d512c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d512c:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d512e:	7803      	ldrb	r3, [r0, #0]
   d5130:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5132:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5134:	d51e      	bpl.n	d5174 <_ZN8FatCache4syncEv+0x48>
   d5136:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5138:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d513a:	f100 060c 	add.w	r6, r0, #12
   d513e:	4632      	mov	r2, r6
   d5140:	6818      	ldr	r0, [r3, #0]
   d5142:	f000 fb9b 	bl	d587c <_ZN9SdSpiCard10writeBlockEmPKh>
   d5146:	4605      	mov	r5, r0
   d5148:	b908      	cbnz	r0, d514e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d514a:	2500      	movs	r5, #0
   d514c:	e013      	b.n	d5176 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d514e:	7823      	ldrb	r3, [r4, #0]
   d5150:	079b      	lsls	r3, r3, #30
   d5152:	d404      	bmi.n	d515e <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5154:	7823      	ldrb	r3, [r4, #0]
   d5156:	f023 0301 	bic.w	r3, r3, #1
   d515a:	7023      	strb	r3, [r4, #0]
   d515c:	e00b      	b.n	d5176 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d515e:	6863      	ldr	r3, [r4, #4]
   d5160:	68a0      	ldr	r0, [r4, #8]
   d5162:	6919      	ldr	r1, [r3, #16]
   d5164:	4632      	mov	r2, r6
   d5166:	4401      	add	r1, r0
   d5168:	6818      	ldr	r0, [r3, #0]
   d516a:	f000 fb87 	bl	d587c <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d516e:	2800      	cmp	r0, #0
   d5170:	d1f0      	bne.n	d5154 <_ZN8FatCache4syncEv+0x28>
   d5172:	e7ea      	b.n	d514a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5174:	2501      	movs	r5, #1

fail:
  return false;
}
   d5176:	4628      	mov	r0, r5
   d5178:	bd70      	pop	{r4, r5, r6, pc}

000d517a <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d517a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d517c:	6883      	ldr	r3, [r0, #8]
   d517e:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5180:	4604      	mov	r4, r0
   d5182:	460e      	mov	r6, r1
   d5184:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5186:	d014      	beq.n	d51b2 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5188:	f7ff ffd0 	bl	d512c <_ZN8FatCache4syncEv>
   d518c:	b908      	cbnz	r0, d5192 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d518e:	2000      	movs	r0, #0
   d5190:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5192:	076b      	lsls	r3, r5, #29
   d5194:	d503      	bpl.n	d519e <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d5196:	2300      	movs	r3, #0
   d5198:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d519a:	60a6      	str	r6, [r4, #8]
   d519c:	e009      	b.n	d51b2 <_ZN8FatCache4readEmh+0x38>
   d519e:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d51a0:	f104 020c 	add.w	r2, r4, #12
   d51a4:	4631      	mov	r1, r6
   d51a6:	6818      	ldr	r0, [r3, #0]
   d51a8:	f000 fade 	bl	d5768 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d51ac:	2800      	cmp	r0, #0
   d51ae:	d1f2      	bne.n	d5196 <_ZN8FatCache4readEmh+0x1c>
   d51b0:	e7ed      	b.n	d518e <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d51b2:	7823      	ldrb	r3, [r4, #0]
   d51b4:	4620      	mov	r0, r4
   d51b6:	f005 0503 	and.w	r5, r5, #3
   d51ba:	431d      	orrs	r5, r3
   d51bc:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d51c0:	bd70      	pop	{r4, r5, r6, pc}

000d51c2 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d51c2:	7983      	ldrb	r3, [r0, #6]
   d51c4:	6940      	ldr	r0, [r0, #20]
   d51c6:	3902      	subs	r1, #2
   d51c8:	4099      	lsls	r1, r3
}
   d51ca:	4408      	add	r0, r1
   d51cc:	4770      	bx	lr

000d51ce <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d51ce:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d51d0:	b570      	push	{r4, r5, r6, lr}
   d51d2:	4605      	mov	r5, r0
   d51d4:	460c      	mov	r4, r1
   d51d6:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d51d8:	d802      	bhi.n	d51e0 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d51da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d51de:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d51e0:	69c3      	ldr	r3, [r0, #28]
   d51e2:	4299      	cmp	r1, r3
   d51e4:	d8f9      	bhi.n	d51da <_ZN9FatVolume6fatGetEmPm+0xc>
   d51e6:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d51e8:	2b20      	cmp	r3, #32
   d51ea:	d110      	bne.n	d520e <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d51ec:	6981      	ldr	r1, [r0, #24]
   d51ee:	2202      	movs	r2, #2
   d51f0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d51f4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d51f8:	f7ff ffbf 	bl	d517a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d51fc:	2800      	cmp	r0, #0
   d51fe:	d0ec      	beq.n	d51da <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5200:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5204:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5208:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d520c:	e00f      	b.n	d522e <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d520e:	2b10      	cmp	r3, #16
   d5210:	d1e3      	bne.n	d51da <_ZN9FatVolume6fatGetEmPm+0xc>
   d5212:	6983      	ldr	r3, [r0, #24]
   d5214:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5218:	2202      	movs	r2, #2
   d521a:	4419      	add	r1, r3
   d521c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5220:	f7ff ffab 	bl	d517a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5224:	2800      	cmp	r0, #0
   d5226:	d0d8      	beq.n	d51da <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5228:	b2e4      	uxtb	r4, r4
   d522a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d522e:	69ea      	ldr	r2, [r5, #28]
   d5230:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d5232:	bf9a      	itte	ls
   d5234:	6033      	strls	r3, [r6, #0]
  return 1;
   d5236:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5238:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d523a:	bd70      	pop	{r4, r5, r6, pc}

000d523c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d523c:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d523e:	b538      	push	{r3, r4, r5, lr}
   d5240:	460c      	mov	r4, r1
   d5242:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5244:	d801      	bhi.n	d524a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5246:	2000      	movs	r0, #0
   d5248:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d524a:	69c3      	ldr	r3, [r0, #28]
   d524c:	4299      	cmp	r1, r3
   d524e:	d8fa      	bhi.n	d5246 <_ZN9FatVolume6fatPutEmm+0xa>
   d5250:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5252:	2b20      	cmp	r3, #32
   d5254:	d10e      	bne.n	d5274 <_ZN9FatVolume6fatPutEmm+0x38>
   d5256:	6981      	ldr	r1, [r0, #24]
   d5258:	2203      	movs	r2, #3
   d525a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d525e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5262:	f7ff ff8a 	bl	d517a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5266:	2800      	cmp	r0, #0
   d5268:	d0ed      	beq.n	d5246 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d526a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d526e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d5272:	e00f      	b.n	d5294 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d5274:	2b10      	cmp	r3, #16
   d5276:	d1e6      	bne.n	d5246 <_ZN9FatVolume6fatPutEmm+0xa>
   d5278:	6983      	ldr	r3, [r0, #24]
   d527a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d527e:	2203      	movs	r2, #3
   d5280:	4419      	add	r1, r3
   d5282:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5286:	f7ff ff78 	bl	d517a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d528a:	2800      	cmp	r0, #0
   d528c:	d0db      	beq.n	d5246 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d528e:	b2e4      	uxtb	r4, r4
   d5290:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d5294:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d5296:	bd38      	pop	{r3, r4, r5, pc}

000d5298 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d529c:	68c4      	ldr	r4, [r0, #12]
   d529e:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d52a0:	4605      	mov	r5, r0
   d52a2:	460e      	mov	r6, r1
   d52a4:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d52a6:	d207      	bcs.n	d52b8 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d52a8:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d52aa:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d52ac:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d52ae:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d52b0:	429c      	cmp	r4, r3
   d52b2:	d903      	bls.n	d52bc <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d52b4:	b9cf      	cbnz	r7, d52ea <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d52b6:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d52b8:	2701      	movs	r7, #1
   d52ba:	e7f7      	b.n	d52ac <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d52bc:	42a6      	cmp	r6, r4
   d52be:	d014      	beq.n	d52ea <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d52c0:	aa01      	add	r2, sp, #4
   d52c2:	4621      	mov	r1, r4
   d52c4:	4628      	mov	r0, r5
   d52c6:	f7ff ff82 	bl	d51ce <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d52ca:	2800      	cmp	r0, #0
   d52cc:	db0d      	blt.n	d52ea <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d52ce:	d0ed      	beq.n	d52ac <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d52d0:	9b01      	ldr	r3, [sp, #4]
   d52d2:	2b00      	cmp	r3, #0
   d52d4:	d1ea      	bne.n	d52ac <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d52d6:	b107      	cbz	r7, d52da <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d52d8:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d52da:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d52de:	4621      	mov	r1, r4
   d52e0:	4628      	mov	r0, r5
   d52e2:	f7ff ffab 	bl	d523c <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d52e6:	4607      	mov	r7, r0
   d52e8:	b908      	cbnz	r0, d52ee <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d52ea:	2700      	movs	r7, #0
   d52ec:	e00b      	b.n	d5306 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d52ee:	b916      	cbnz	r6, d52f6 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d52f0:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d52f4:	e007      	b.n	d5306 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d52f6:	4622      	mov	r2, r4
   d52f8:	4631      	mov	r1, r6
   d52fa:	4628      	mov	r0, r5
   d52fc:	f7ff ff9e 	bl	d523c <_ZN9FatVolume6fatPutEmm>
   d5300:	2800      	cmp	r0, #0
   d5302:	d1f5      	bne.n	d52f0 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5304:	e7f1      	b.n	d52ea <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d5306:	4638      	mov	r0, r7
   d5308:	b002      	add	sp, #8
   d530a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d530e <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d530e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5310:	4605      	mov	r5, r0
   d5312:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d5314:	aa01      	add	r2, sp, #4
   d5316:	4621      	mov	r1, r4
   d5318:	4628      	mov	r0, r5
   d531a:	f7ff ff58 	bl	d51ce <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d531e:	1e06      	subs	r6, r0, #0
   d5320:	da01      	bge.n	d5326 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d5322:	2000      	movs	r0, #0
   d5324:	e00f      	b.n	d5346 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d5326:	2200      	movs	r2, #0
   d5328:	4621      	mov	r1, r4
   d532a:	4628      	mov	r0, r5
   d532c:	f7ff ff86 	bl	d523c <_ZN9FatVolume6fatPutEmm>
   d5330:	2800      	cmp	r0, #0
   d5332:	d0f6      	beq.n	d5322 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d5334:	68eb      	ldr	r3, [r5, #12]
   d5336:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d5338:	bf9c      	itt	ls
   d533a:	f104 34ff 	addls.w	r4, r4, #4294967295	; 0xffffffff
   d533e:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d5340:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d5342:	2e00      	cmp	r6, #0
   d5344:	d1e6      	bne.n	d5314 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d5346:	b002      	add	sp, #8
   d5348:	bd70      	pop	{r4, r5, r6, pc}

000d534a <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d534a:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d534c:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d534e:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5350:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d5352:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5358:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d535a:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d535c:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d535e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5362:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5364:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5368:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d536c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d5370:	b1a1      	cbz	r1, d539c <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d5372:	2904      	cmp	r1, #4
   d5374:	d85d      	bhi.n	d5432 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5376:	4611      	mov	r1, r2
   d5378:	3024      	adds	r0, #36	; 0x24
   d537a:	f7ff fefe 	bl	d517a <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d537e:	2800      	cmp	r0, #0
   d5380:	d057      	beq.n	d5432 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d5382:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d5386:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d538a:	065b      	lsls	r3, r3, #25
   d538c:	d151      	bne.n	d5432 <_ZN9FatVolume4initEh+0xe8>
   d538e:	351b      	adds	r5, #27
   d5390:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d5394:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d5398:	2d00      	cmp	r5, #0
   d539a:	d04a      	beq.n	d5432 <_ZN9FatVolume4initEh+0xe8>
   d539c:	2200      	movs	r2, #0
   d539e:	4629      	mov	r1, r5
   d53a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d53a4:	f7ff fee9 	bl	d517a <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d53a8:	2800      	cmp	r0, #0
   d53aa:	d042      	beq.n	d5432 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d53ac:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d53b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d53b4:	d13d      	bne.n	d5432 <_ZN9FatVolume4initEh+0xe8>
   d53b6:	7c03      	ldrb	r3, [r0, #16]
   d53b8:	2b02      	cmp	r3, #2
   d53ba:	d13a      	bne.n	d5432 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d53bc:	89c3      	ldrh	r3, [r0, #14]
   d53be:	2b00      	cmp	r3, #0
   d53c0:	d037      	beq.n	d5432 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d53c2:	7b41      	ldrb	r1, [r0, #13]
   d53c4:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d53c6:	1e4b      	subs	r3, r1, #1
   d53c8:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d53ca:	2300      	movs	r3, #0
   d53cc:	71a3      	strb	r3, [r4, #6]
   d53ce:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d53d0:	2301      	movs	r3, #1
   d53d2:	428b      	cmp	r3, r1
   d53d4:	d007      	beq.n	d53e6 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d53d6:	3e01      	subs	r6, #1
   d53d8:	d02b      	beq.n	d5432 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d53da:	79a2      	ldrb	r2, [r4, #6]
   d53dc:	005b      	lsls	r3, r3, #1
   d53de:	3201      	adds	r2, #1
   d53e0:	b2db      	uxtb	r3, r3
   d53e2:	71a2      	strb	r2, [r4, #6]
   d53e4:	e7f5      	b.n	d53d2 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d53e6:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d53e8:	b902      	cbnz	r2, d53ec <_ZN9FatVolume4initEh+0xa2>
   d53ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d53ec:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d53ee:	89c6      	ldrh	r6, [r0, #14]
   d53f0:	442e      	add	r6, r5
   d53f2:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d53f4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d53f8:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d53fa:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d53fe:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d5400:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d5404:	0152      	lsls	r2, r2, #5
   d5406:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d540a:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d540e:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d5410:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d5414:	b903      	cbnz	r3, d5418 <_ZN9FatVolume4initEh+0xce>
   d5416:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d5418:	1aad      	subs	r5, r5, r2
   d541a:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d541c:	79a5      	ldrb	r5, [r4, #6]
   d541e:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d5422:	1c6b      	adds	r3, r5, #1
   d5424:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d5426:	f640 73f4 	movw	r3, #4084	; 0xff4
   d542a:	429d      	cmp	r5, r3
   d542c:	d803      	bhi.n	d5436 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d542e:	230c      	movs	r3, #12
   d5430:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d5432:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d5434:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d5436:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d543a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d543c:	bf85      	ittet	hi
   d543e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d5440:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d5442:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d5444:	2320      	movhi	r3, #32
   d5446:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d5448:	2001      	movs	r0, #1

fail:
  return false;
}
   d544a:	bd70      	pop	{r4, r5, r6, pc}

000d544c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d544c:	f000 bb60 	b.w	d5b10 <HAL_Pin_Map>

000d5450 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5450:	f000 bb5e 	b.w	d5b10 <HAL_Pin_Map>

000d5454 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5454:	f000 bb5c 	b.w	d5b10 <HAL_Pin_Map>

000d5458 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5458:	f000 bb5a 	b.w	d5b10 <HAL_Pin_Map>

000d545c <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d545c:	f000 bb58 	b.w	d5b10 <HAL_Pin_Map>

000d5460 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5460:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5462:	4c0e      	ldr	r4, [pc, #56]	; (d549c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5464:	460e      	mov	r6, r1
   d5466:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5468:	f000 fb32 	bl	d5ad0 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d546c:	6823      	ldr	r3, [r4, #0]
   d546e:	1ac0      	subs	r0, r0, r3
   d5470:	4b0b      	ldr	r3, [pc, #44]	; (d54a0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d5472:	4298      	cmp	r0, r3
   d5474:	d908      	bls.n	d5488 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5476:	f000 fb33 	bl	d5ae0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d547a:	4b0a      	ldr	r3, [pc, #40]	; (d54a4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d547c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d547e:	f000 fcb3 	bl	d5de8 <spark_process>
   d5482:	f000 fb25 	bl	d5ad0 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d5486:	6020      	str	r0, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5488:	f000 fb2a 	bl	d5ae0 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d548c:	b280      	uxth	r0, r0
   d548e:	1b80      	subs	r0, r0, r6
}
   d5490:	42a8      	cmp	r0, r5
   d5492:	bfd4      	ite	le
   d5494:	2000      	movle	r0, #0
   d5496:	2001      	movgt	r0, #1
   d5498:	bd70      	pop	{r4, r5, r6, pc}
   d549a:	bf00      	nop
   d549c:	2003e498 	.word	0x2003e498
   d54a0:	000186a0 	.word	0x000186a0
   d54a4:	2003e714 	.word	0x2003e714

000d54a8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d54a8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d54aa:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d54ac:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d54ae:	b94d      	cbnz	r5, d54c4 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d54b0:	6840      	ldr	r0, [r0, #4]
   d54b2:	f000 fa7d 	bl	d59b0 <_ZN14SdSpiAltDriver8activateEv>
   d54b6:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d54b8:	4629      	mov	r1, r5
   d54ba:	7d18      	ldrb	r0, [r3, #20]
   d54bc:	f001 fc33 	bl	d6d26 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d54c0:	2301      	movs	r3, #1
   d54c2:	7223      	strb	r3, [r4, #8]
   d54c4:	bd38      	pop	{r3, r4, r5, pc}

000d54c6 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d54c6:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d54c8:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d54ca:	4604      	mov	r4, r0
  if (m_spiActive) {
   d54cc:	b16b      	cbz	r3, d54ea <_ZN9SdSpiCard7spiStopEv+0x24>
   d54ce:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d54d0:	2101      	movs	r1, #1
   d54d2:	7d18      	ldrb	r0, [r3, #20]
   d54d4:	f001 fc27 	bl	d6d26 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d54d8:	21ff      	movs	r1, #255	; 0xff
   d54da:	6860      	ldr	r0, [r4, #4]
   d54dc:	f000 fa9a 	bl	d5a14 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d54e0:	6860      	ldr	r0, [r4, #4]
   d54e2:	f000 fa79 	bl	d59d8 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d54e6:	2300      	movs	r3, #0
   d54e8:	7223      	strb	r3, [r4, #8]
   d54ea:	bd10      	pop	{r4, pc}

000d54ec <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d54ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54ee:	4604      	mov	r4, r0
   d54f0:	460d      	mov	r5, r1
   d54f2:	4616      	mov	r6, r2
   d54f4:	f000 faf4 	bl	d5ae0 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d54f8:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d54fa:	6860      	ldr	r0, [r4, #4]
   d54fc:	f000 fa6f 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5500:	28ff      	cmp	r0, #255	; 0xff
   d5502:	7260      	strb	r0, [r4, #9]
   d5504:	d109      	bne.n	d551a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d5506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d550a:	4639      	mov	r1, r7
   d550c:	4620      	mov	r0, r4
   d550e:	f7ff ffa7 	bl	d5460 <_ZN9SdSpiCard10isTimedOutEtt>
   d5512:	2800      	cmp	r0, #0
   d5514:	d0f1      	beq.n	d54fa <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5516:	2355      	movs	r3, #85	; 0x55
   d5518:	e00b      	b.n	d5532 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d551a:	28fe      	cmp	r0, #254	; 0xfe
   d551c:	d001      	beq.n	d5522 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d551e:	2350      	movs	r3, #80	; 0x50
   d5520:	e007      	b.n	d5532 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d5522:	4632      	mov	r2, r6
   d5524:	4629      	mov	r1, r5
   d5526:	6860      	ldr	r0, [r4, #4]
   d5528:	f000 fa5e 	bl	d59e8 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d552c:	7260      	strb	r0, [r4, #9]
   d552e:	b130      	cbz	r0, d553e <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5530:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d5532:	4620      	mov	r0, r4
   d5534:	7023      	strb	r3, [r4, #0]
   d5536:	f7ff ffc6 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d553a:	2000      	movs	r0, #0
}
   d553c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d553e:	6860      	ldr	r0, [r4, #4]
   d5540:	f000 fa4d 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>
   d5544:	6860      	ldr	r0, [r4, #4]
   d5546:	f000 fa4a 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>
   d554a:	2001      	movs	r0, #1
   d554c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d554e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d554e:	b570      	push	{r4, r5, r6, lr}
   d5550:	4604      	mov	r4, r0
   d5552:	460e      	mov	r6, r1
   d5554:	f000 fac4 	bl	d5ae0 <HAL_Timer_Get_Milli_Seconds>
   d5558:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d555a:	4632      	mov	r2, r6
   d555c:	4629      	mov	r1, r5
   d555e:	4620      	mov	r0, r4
   d5560:	f7ff ff7e 	bl	d5460 <_ZN9SdSpiCard10isTimedOutEtt>
   d5564:	b930      	cbnz	r0, d5574 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d5566:	6860      	ldr	r0, [r4, #4]
   d5568:	f000 fa39 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d556c:	28ff      	cmp	r0, #255	; 0xff
   d556e:	d1f4      	bne.n	d555a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d5570:	2001      	movs	r0, #1
   d5572:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d5574:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d5576:	bd70      	pop	{r4, r5, r6, pc}

000d5578 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d557a:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d557c:	9201      	str	r2, [sp, #4]
   d557e:	4604      	mov	r4, r0
   d5580:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d5582:	b90b      	cbnz	r3, d5588 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d5584:	f7ff ff90 	bl	d54a8 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d5588:	b125      	cbz	r5, d5594 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d558a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d558e:	4620      	mov	r0, r4
   d5590:	f7ff ffdd 	bl	d554e <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5594:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d5598:	6860      	ldr	r0, [r4, #4]
   d559a:	f000 fa3b 	bl	d5a14 <_ZN14SdSpiAltDriver4sendEh>
   d559e:	f10d 0607 	add.w	r6, sp, #7
   d55a2:	f10d 0703 	add.w	r7, sp, #3
   d55a6:	f816 1901 	ldrb.w	r1, [r6], #-1
   d55aa:	6860      	ldr	r0, [r4, #4]
   d55ac:	f000 fa32 	bl	d5a14 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d55b0:	42be      	cmp	r6, r7
   d55b2:	d1f8      	bne.n	d55a6 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d55b4:	2d00      	cmp	r5, #0
   d55b6:	bf0c      	ite	eq
   d55b8:	2195      	moveq	r1, #149	; 0x95
   d55ba:	2187      	movne	r1, #135	; 0x87
   d55bc:	6860      	ldr	r0, [r4, #4]
   d55be:	f000 fa29 	bl	d5a14 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d55c2:	6860      	ldr	r0, [r4, #4]
   d55c4:	f000 fa0b 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>
   d55c8:	250b      	movs	r5, #11
   d55ca:	6860      	ldr	r0, [r4, #4]
   d55cc:	f000 fa07 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d55d0:	0603      	lsls	r3, r0, #24
   d55d2:	7260      	strb	r0, [r4, #9]
   d55d4:	d503      	bpl.n	d55de <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d55d6:	3d01      	subs	r5, #1
   d55d8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d55dc:	d1f5      	bne.n	d55ca <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d55de:	b003      	add	sp, #12
   d55e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d55e2 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d55e2:	b570      	push	{r4, r5, r6, lr}
   d55e4:	4604      	mov	r4, r0
   d55e6:	460d      	mov	r5, r1
   d55e8:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d55ea:	2137      	movs	r1, #55	; 0x37
   d55ec:	2200      	movs	r2, #0
   d55ee:	f7ff ffc3 	bl	d5578 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d55f2:	4632      	mov	r2, r6
   d55f4:	4629      	mov	r1, r5
   d55f6:	4620      	mov	r0, r4
  }
   d55f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d55fc:	f7ff bfbc 	b.w	d5578 <_ZN9SdSpiCard11cardCommandEhm>

000d5600 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d5604:	2500      	movs	r5, #0
   d5606:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d5608:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d560a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d560c:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d560e:	4604      	mov	r4, r0
   d5610:	4690      	mov	r8, r2
   d5612:	461e      	mov	r6, r3
   d5614:	f000 fa64 	bl	d5ae0 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d5618:	4641      	mov	r1, r8
   d561a:	4607      	mov	r7, r0
   d561c:	6860      	ldr	r0, [r4, #4]
   d561e:	f000 f9cb 	bl	d59b8 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d5622:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5624:	4a4f      	ldr	r2, [pc, #316]	; (d5764 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d5626:	721d      	strb	r5, [r3, #8]
   d5628:	f04f 0801 	mov.w	r8, #1
   d562c:	60da      	str	r2, [r3, #12]
   d562e:	745d      	strb	r5, [r3, #17]
   d5630:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d5634:	4620      	mov	r0, r4
   d5636:	f7ff ff37 	bl	d54a8 <_ZN9SdSpiCard8spiStartEv>
   d563a:	6863      	ldr	r3, [r4, #4]
   d563c:	4641      	mov	r1, r8
   d563e:	7d18      	ldrb	r0, [r3, #20]
   d5640:	f001 fb71 	bl	d6d26 <digitalWrite>
   d5644:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5646:	21ff      	movs	r1, #255	; 0xff
   d5648:	6860      	ldr	r0, [r4, #4]
   d564a:	3d01      	subs	r5, #1
   d564c:	f000 f9e2 	bl	d5a14 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d5650:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5654:	d1f7      	bne.n	d5646 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d5656:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5658:	4629      	mov	r1, r5
   d565a:	7d18      	ldrb	r0, [r3, #20]
   d565c:	f001 fb63 	bl	d6d26 <digitalWrite>
   d5660:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d5662:	2200      	movs	r2, #0
   d5664:	4611      	mov	r1, r2
   d5666:	4620      	mov	r0, r4
   d5668:	f7ff ff86 	bl	d5578 <_ZN9SdSpiCard11cardCommandEhm>
   d566c:	2801      	cmp	r0, #1
   d566e:	4680      	mov	r8, r0
   d5670:	d012      	beq.n	d5698 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d5672:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d5674:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5678:	d101      	bne.n	d567e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d567a:	2320      	movs	r3, #32
   d567c:	e057      	b.n	d572e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d567e:	21fd      	movs	r1, #253	; 0xfd
   d5680:	6860      	ldr	r0, [r4, #4]
   d5682:	f000 f9c7 	bl	d5a14 <_ZN14SdSpiAltDriver4sendEh>
   d5686:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d568a:	6860      	ldr	r0, [r4, #4]
   d568c:	f000 f9a7 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d5690:	f1b8 0801 	subs.w	r8, r8, #1
   d5694:	d1f9      	bne.n	d568a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d5696:	e7e4      	b.n	d5662 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d5698:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d569c:	2108      	movs	r1, #8
   d569e:	4620      	mov	r0, r4
   d56a0:	f7ff ff6a 	bl	d5578 <_ZN9SdSpiCard11cardCommandEhm>
   d56a4:	2805      	cmp	r0, #5
   d56a6:	d102      	bne.n	d56ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d56a8:	f884 800a 	strb.w	r8, [r4, #10]
   d56ac:	e00f      	b.n	d56ce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d56ae:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d56b0:	6860      	ldr	r0, [r4, #4]
   d56b2:	f000 f994 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>
   d56b6:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d56b8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d56bc:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d56be:	d1f7      	bne.n	d56b0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d56c0:	28aa      	cmp	r0, #170	; 0xaa
   d56c2:	d102      	bne.n	d56ca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d56c4:	2302      	movs	r3, #2
   d56c6:	72a3      	strb	r3, [r4, #10]
   d56c8:	e001      	b.n	d56ce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d56ca:	2325      	movs	r3, #37	; 0x25
   d56cc:	e02f      	b.n	d572e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d56ce:	7aa3      	ldrb	r3, [r4, #10]
   d56d0:	2b02      	cmp	r3, #2
   d56d2:	bf0c      	ite	eq
   d56d4:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d56d8:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d56da:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d56dc:	462a      	mov	r2, r5
   d56de:	2129      	movs	r1, #41	; 0x29
   d56e0:	4620      	mov	r0, r4
   d56e2:	f7ff ff7e 	bl	d55e2 <_ZN9SdSpiCard8cardAcmdEhm>
   d56e6:	4602      	mov	r2, r0
   d56e8:	b148      	cbz	r0, d56fe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d56ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d56ee:	4639      	mov	r1, r7
   d56f0:	4620      	mov	r0, r4
   d56f2:	f7ff feb5 	bl	d5460 <_ZN9SdSpiCard10isTimedOutEtt>
   d56f6:	2800      	cmp	r0, #0
   d56f8:	d0f0      	beq.n	d56dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d56fa:	2343      	movs	r3, #67	; 0x43
   d56fc:	e017      	b.n	d572e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d56fe:	7aa3      	ldrb	r3, [r4, #10]
   d5700:	2b02      	cmp	r3, #2
   d5702:	d00e      	beq.n	d5722 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d5704:	4620      	mov	r0, r4
   d5706:	f7ff fede 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d570a:	6863      	ldr	r3, [r4, #4]
   d570c:	68b0      	ldr	r0, [r6, #8]
   d570e:	7934      	ldrb	r4, [r6, #4]
   d5710:	7b31      	ldrb	r1, [r6, #12]
   d5712:	7b72      	ldrb	r2, [r6, #13]
   d5714:	745a      	strb	r2, [r3, #17]
   d5716:	60d8      	str	r0, [r3, #12]
   d5718:	721c      	strb	r4, [r3, #8]
   d571a:	7419      	strb	r1, [r3, #16]
  return true;
   d571c:	2001      	movs	r0, #1
   d571e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d5722:	213a      	movs	r1, #58	; 0x3a
   d5724:	4620      	mov	r0, r4
   d5726:	f7ff ff27 	bl	d5578 <_ZN9SdSpiCard11cardCommandEhm>
   d572a:	b138      	cbz	r0, d573c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d572c:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d572e:	4620      	mov	r0, r4
   d5730:	7023      	strb	r3, [r4, #0]
   d5732:	f7ff fec8 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5736:	2000      	movs	r0, #0
}
   d5738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d573c:	6860      	ldr	r0, [r4, #4]
   d573e:	f000 f94e 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d5742:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d5746:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5748:	bf04      	itt	eq
   d574a:	2303      	moveq	r3, #3
   d574c:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d574e:	6860      	ldr	r0, [r4, #4]
   d5750:	f000 f945 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>
   d5754:	6860      	ldr	r0, [r4, #4]
   d5756:	f000 f942 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>
   d575a:	6860      	ldr	r0, [r4, #4]
   d575c:	f000 f93f 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>
   d5760:	e7d0      	b.n	d5704 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d5762:	bf00      	nop
   d5764:	0003d090 	.word	0x0003d090

000d5768 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5768:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d576a:	7a83      	ldrb	r3, [r0, #10]
   d576c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d576e:	bf18      	it	ne
   d5770:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5772:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d5774:	460a      	mov	r2, r1
   d5776:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5778:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d577a:	f7ff fefd 	bl	d5578 <_ZN9SdSpiCard11cardCommandEhm>
   d577e:	b110      	cbz	r0, d5786 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5780:	2330      	movs	r3, #48	; 0x30
   d5782:	7023      	strb	r3, [r4, #0]
   d5784:	e00b      	b.n	d579e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d5786:	4629      	mov	r1, r5
   d5788:	f44f 7200 	mov.w	r2, #512	; 0x200
   d578c:	4620      	mov	r0, r4
   d578e:	f7ff fead 	bl	d54ec <_ZN9SdSpiCard8readDataEPhj>
   d5792:	4605      	mov	r5, r0
   d5794:	b118      	cbz	r0, d579e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d5796:	4620      	mov	r0, r4
   d5798:	f7ff fe95 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d579c:	e003      	b.n	d57a6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d579e:	4620      	mov	r0, r4
   d57a0:	f7ff fe91 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d57a4:	2500      	movs	r5, #0
}
   d57a6:	4628      	mov	r0, r5
   d57a8:	bd38      	pop	{r3, r4, r5, pc}

000d57aa <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d57aa:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d57ac:	7a83      	ldrb	r3, [r0, #10]
   d57ae:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d57b0:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d57b2:	bf18      	it	ne
   d57b4:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d57b6:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d57b8:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d57ba:	f7ff fedd 	bl	d5578 <_ZN9SdSpiCard11cardCommandEhm>
   d57be:	b130      	cbz	r0, d57ce <_ZN9SdSpiCard9readStartEm+0x24>
   d57c0:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d57c2:	4620      	mov	r0, r4
   d57c4:	7023      	strb	r3, [r4, #0]
   d57c6:	f7ff fe7e 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d57ca:	2000      	movs	r0, #0
   d57cc:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d57ce:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d57d0:	bd10      	pop	{r4, pc}

000d57d2 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d57d2:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d57d4:	2200      	movs	r2, #0
   d57d6:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d57d8:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d57da:	f7ff fecd 	bl	d5578 <_ZN9SdSpiCard11cardCommandEhm>
   d57de:	b130      	cbz	r0, d57ee <_ZN9SdSpiCard8readStopEv+0x1c>
   d57e0:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d57e2:	4620      	mov	r0, r4
   d57e4:	7023      	strb	r3, [r4, #0]
   d57e6:	f7ff fe6e 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d57ea:	2000      	movs	r0, #0
   d57ec:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d57ee:	4620      	mov	r0, r4
   d57f0:	f7ff fe69 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d57f4:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d57f6:	bd10      	pop	{r4, pc}

000d57f8 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d57f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57fa:	4605      	mov	r5, r0
   d57fc:	4616      	mov	r6, r2
   d57fe:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d5800:	f7ff ffd3 	bl	d57aa <_ZN9SdSpiCard9readStartEm>
   d5804:	b198      	cbz	r0, d582e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d5806:	2400      	movs	r4, #0
   d5808:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d580a:	429f      	cmp	r7, r3
   d580c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d5810:	d908      	bls.n	d5824 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d5812:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5816:	4628      	mov	r0, r5
   d5818:	f7ff fe68 	bl	d54ec <_ZN9SdSpiCard8readDataEPhj>
   d581c:	3401      	adds	r4, #1
   d581e:	2800      	cmp	r0, #0
   d5820:	d1f2      	bne.n	d5808 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d5822:	e004      	b.n	d582e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d5824:	4628      	mov	r0, r5
}
   d5826:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d582a:	f7ff bfd2 	b.w	d57d2 <_ZN9SdSpiCard8readStopEv>
}
   d582e:	2000      	movs	r0, #0
   d5830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5832 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d5832:	b538      	push	{r3, r4, r5, lr}
   d5834:	4604      	mov	r4, r0
   d5836:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5838:	6840      	ldr	r0, [r0, #4]
   d583a:	f000 f8eb 	bl	d5a14 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d583e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5842:	4629      	mov	r1, r5
   d5844:	6860      	ldr	r0, [r4, #4]
   d5846:	f000 f8e9 	bl	d5a1c <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d584a:	21ff      	movs	r1, #255	; 0xff
   d584c:	6860      	ldr	r0, [r4, #4]
   d584e:	f000 f8e1 	bl	d5a14 <_ZN14SdSpiAltDriver4sendEh>
   d5852:	21ff      	movs	r1, #255	; 0xff
   d5854:	6860      	ldr	r0, [r4, #4]
   d5856:	f000 f8dd 	bl	d5a14 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d585a:	6860      	ldr	r0, [r4, #4]
   d585c:	f000 f8bf 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d5860:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d5862:	f000 001f 	and.w	r0, r0, #31
   d5866:	2805      	cmp	r0, #5
   d5868:	d006      	beq.n	d5878 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d586a:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d586c:	4620      	mov	r0, r4
   d586e:	7023      	strb	r3, [r4, #0]
   d5870:	f7ff fe29 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5874:	2000      	movs	r0, #0
   d5876:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d5878:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d587a:	bd38      	pop	{r3, r4, r5, pc}

000d587c <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d587c:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d587e:	7a83      	ldrb	r3, [r0, #10]
   d5880:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5882:	bf18      	it	ne
   d5884:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5886:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5888:	460a      	mov	r2, r1
   d588a:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d588c:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d588e:	f7ff fe73 	bl	d5578 <_ZN9SdSpiCard11cardCommandEhm>
   d5892:	4606      	mov	r6, r0
   d5894:	b108      	cbz	r0, d589a <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d5896:	2332      	movs	r3, #50	; 0x32
   d5898:	e01d      	b.n	d58d6 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d589a:	462a      	mov	r2, r5
   d589c:	21fe      	movs	r1, #254	; 0xfe
   d589e:	4620      	mov	r0, r4
   d58a0:	f7ff ffc7 	bl	d5832 <_ZN9SdSpiCard9writeDataEhPKh>
   d58a4:	b1c0      	cbz	r0, d58d8 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d58a6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d58aa:	4620      	mov	r0, r4
   d58ac:	f7ff fe4f 	bl	d554e <_ZN9SdSpiCard11waitNotBusyEt>
   d58b0:	4605      	mov	r5, r0
   d58b2:	b908      	cbnz	r0, d58b8 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d58b4:	235a      	movs	r3, #90	; 0x5a
   d58b6:	e00e      	b.n	d58d6 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d58b8:	4632      	mov	r2, r6
   d58ba:	210d      	movs	r1, #13
   d58bc:	4620      	mov	r0, r4
   d58be:	f7ff fe5b 	bl	d5578 <_ZN9SdSpiCard11cardCommandEhm>
   d58c2:	b938      	cbnz	r0, d58d4 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d58c4:	6860      	ldr	r0, [r4, #4]
   d58c6:	f000 f88a 	bl	d59de <_ZN14SdSpiAltDriver7receiveEv>
   d58ca:	b918      	cbnz	r0, d58d4 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d58cc:	4620      	mov	r0, r4
   d58ce:	f7ff fdfa 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d58d2:	e005      	b.n	d58e0 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d58d4:	2329      	movs	r3, #41	; 0x29
   d58d6:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d58d8:	4620      	mov	r0, r4
   d58da:	f7ff fdf4 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d58de:	2500      	movs	r5, #0
}
   d58e0:	4628      	mov	r0, r5
   d58e2:	bd70      	pop	{r4, r5, r6, pc}

000d58e4 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d58e4:	b538      	push	{r3, r4, r5, lr}
   d58e6:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d58e8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d58ec:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d58ee:	f7ff fe2e 	bl	d554e <_ZN9SdSpiCard11waitNotBusyEt>
   d58f2:	b910      	cbnz	r0, d58fa <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d58f4:	235b      	movs	r3, #91	; 0x5b
   d58f6:	7023      	strb	r3, [r4, #0]
   d58f8:	e005      	b.n	d5906 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d58fa:	462a      	mov	r2, r5
   d58fc:	21fc      	movs	r1, #252	; 0xfc
   d58fe:	4620      	mov	r0, r4
   d5900:	f7ff ff97 	bl	d5832 <_ZN9SdSpiCard9writeDataEhPKh>
   d5904:	b918      	cbnz	r0, d590e <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5906:	4620      	mov	r0, r4
   d5908:	f7ff fddd 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d590c:	2000      	movs	r0, #0
}
   d590e:	bd38      	pop	{r3, r4, r5, pc}

000d5910 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5910:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5912:	7a83      	ldrb	r3, [r0, #10]
   d5914:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5916:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5918:	bf18      	it	ne
   d591a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d591c:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d591e:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5920:	f7ff fe2a 	bl	d5578 <_ZN9SdSpiCard11cardCommandEhm>
   d5924:	b130      	cbz	r0, d5934 <_ZN9SdSpiCard10writeStartEm+0x24>
   d5926:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5928:	4620      	mov	r0, r4
   d592a:	7023      	strb	r3, [r4, #0]
   d592c:	f7ff fdcb 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5930:	2000      	movs	r0, #0
   d5932:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d5934:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5936:	bd10      	pop	{r4, pc}

000d5938 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5938:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d593a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d593e:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5940:	f7ff fe05 	bl	d554e <_ZN9SdSpiCard11waitNotBusyEt>
   d5944:	4605      	mov	r5, r0
   d5946:	b120      	cbz	r0, d5952 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5948:	21fd      	movs	r1, #253	; 0xfd
   d594a:	6860      	ldr	r0, [r4, #4]
   d594c:	f000 f862 	bl	d5a14 <_ZN14SdSpiAltDriver4sendEh>
   d5950:	e001      	b.n	d5956 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5952:	2356      	movs	r3, #86	; 0x56
   d5954:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d5956:	4620      	mov	r0, r4
   d5958:	f7ff fdb5 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d595c:	4628      	mov	r0, r5
   d595e:	bd38      	pop	{r3, r4, r5, pc}

000d5960 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d5960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5962:	4605      	mov	r5, r0
   d5964:	4616      	mov	r6, r2
   d5966:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d5968:	f7ff ffd2 	bl	d5910 <_ZN9SdSpiCard10writeStartEm>
   d596c:	b170      	cbz	r0, d598c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d596e:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5970:	42bc      	cmp	r4, r7
   d5972:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5976:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5978:	d004      	beq.n	d5984 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d597a:	f7ff ffb3 	bl	d58e4 <_ZN9SdSpiCard9writeDataEPKh>
   d597e:	b128      	cbz	r0, d598c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5980:	3401      	adds	r4, #1
   d5982:	e7f5      	b.n	d5970 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d5984:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5988:	f7ff bfd6 	b.w	d5938 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d598c:	4628      	mov	r0, r5
   d598e:	f7ff fd9a 	bl	d54c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5992:	2000      	movs	r0, #0
   d5994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5996 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d5996:	f000 b8bb 	b.w	d5b10 <HAL_Pin_Map>

000d599a <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d599a:	f000 b8b9 	b.w	d5b10 <HAL_Pin_Map>

000d599e <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d599e:	f000 b8b7 	b.w	d5b10 <HAL_Pin_Map>
	...

000d59a4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d59a4:	4b01      	ldr	r3, [pc, #4]	; (d59ac <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d59a6:	2201      	movs	r2, #1
   d59a8:	701a      	strb	r2, [r3, #0]
   d59aa:	4770      	bx	lr
   d59ac:	2003e49c 	.word	0x2003e49c

000d59b0 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d59b0:	1d01      	adds	r1, r0, #4
   d59b2:	6800      	ldr	r0, [r0, #0]
   d59b4:	f000 bf1c 	b.w	d67f0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d59b8 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d59b8:	b510      	push	{r4, lr}
   d59ba:	4604      	mov	r4, r0
  m_csPin = csPin;
   d59bc:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d59be:	6800      	ldr	r0, [r0, #0]
   d59c0:	f000 fef8 	bl	d67b4 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d59c4:	7d20      	ldrb	r0, [r4, #20]
   d59c6:	2101      	movs	r1, #1
   d59c8:	f001 f99c 	bl	d6d04 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d59cc:	7d20      	ldrb	r0, [r4, #20]
   d59ce:	2101      	movs	r1, #1
}
   d59d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d59d4:	f001 b9a7 	b.w	d6d26 <digitalWrite>

000d59d8 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d59d8:	6800      	ldr	r0, [r0, #0]
   d59da:	f000 bef0 	b.w	d67be <_ZN8SPIClass14endTransactionEv>

000d59de <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d59de:	21ff      	movs	r1, #255	; 0xff
   d59e0:	6800      	ldr	r0, [r0, #0]
   d59e2:	f000 bf75 	b.w	d68d0 <_ZN8SPIClass8transferEh>
	...

000d59e8 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d59e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d59ea:	4b08      	ldr	r3, [pc, #32]	; (d5a0c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d59ec:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d59ee:	2500      	movs	r5, #0
   d59f0:	4c07      	ldr	r4, [pc, #28]	; (d5a10 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d59f2:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d59f4:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d59f6:	4613      	mov	r3, r2
   d59f8:	460a      	mov	r2, r1
   d59fa:	4629      	mov	r1, r5
   d59fc:	f000 ff6e 	bl	d68dc <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5a00:	7823      	ldrb	r3, [r4, #0]
   d5a02:	2b00      	cmp	r3, #0
   d5a04:	d0fc      	beq.n	d5a00 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5a06:	2000      	movs	r0, #0
   d5a08:	b003      	add	sp, #12
   d5a0a:	bd30      	pop	{r4, r5, pc}
   d5a0c:	000d59a5 	.word	0x000d59a5
   d5a10:	2003e49c 	.word	0x2003e49c

000d5a14 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d5a14:	6800      	ldr	r0, [r0, #0]
   d5a16:	f000 bf5b 	b.w	d68d0 <_ZN8SPIClass8transferEh>
	...

000d5a1c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d5a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5a1e:	4b07      	ldr	r3, [pc, #28]	; (d5a3c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d5a20:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5a22:	2500      	movs	r5, #0
   d5a24:	4c06      	ldr	r4, [pc, #24]	; (d5a40 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5a26:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5a28:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5a2a:	4613      	mov	r3, r2
   d5a2c:	462a      	mov	r2, r5
   d5a2e:	f000 ff55 	bl	d68dc <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d5a32:	7823      	ldrb	r3, [r4, #0]
   d5a34:	2b00      	cmp	r3, #0
   d5a36:	d0fc      	beq.n	d5a32 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5a38:	b003      	add	sp, #12
   d5a3a:	bd30      	pop	{r4, r5, pc}
   d5a3c:	000d59a5 	.word	0x000d59a5
   d5a40:	2003e49c 	.word	0x2003e49c

000d5a44 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d5a44:	f000 b864 	b.w	d5b10 <HAL_Pin_Map>

000d5a48 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d5a48:	f000 b862 	b.w	d5b10 <HAL_Pin_Map>

000d5a4c <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d5a4c:	f000 b860 	b.w	d5b10 <HAL_Pin_Map>

000d5a50 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <os_thread_is_current+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	689b      	ldr	r3, [r3, #8]
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	00030248 	.word	0x00030248

000d5a60 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <os_thread_join+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	691b      	ldr	r3, [r3, #16]
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030248 	.word	0x00030248

000d5a70 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <os_thread_cleanup+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	695b      	ldr	r3, [r3, #20]
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030248 	.word	0x00030248

000d5a80 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <os_mutex_create+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030248 	.word	0x00030248

000d5a90 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <os_mutex_lock+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	00030248 	.word	0x00030248

000d5aa0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <os_mutex_unlock+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	00030248 	.word	0x00030248

000d5ab0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <os_mutex_recursive_create+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	00030248 	.word	0x00030248

000d5ac0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <HAL_RNG_GetRandomNumber+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	685b      	ldr	r3, [r3, #4]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	00030218 	.word	0x00030218

000d5ad0 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	691b      	ldr	r3, [r3, #16]
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	00030218 	.word	0x00030218

000d5ae0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	695b      	ldr	r3, [r3, #20]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	00030218 	.word	0x00030218

000d5af0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <HAL_RTC_Get_UnixTime+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	69db      	ldr	r3, [r3, #28]
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	00030218 	.word	0x00030218

000d5b00 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <HAL_RTC_Time_Is_Valid+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	00030218 	.word	0x00030218

000d5b10 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <HAL_Pin_Map+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	681b      	ldr	r3, [r3, #0]
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	0003022c 	.word	0x0003022c

000d5b20 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <HAL_Validate_Pin_Function+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	685b      	ldr	r3, [r3, #4]
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	0003022c 	.word	0x0003022c

000d5b30 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <HAL_Pin_Mode+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	689b      	ldr	r3, [r3, #8]
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	0003022c 	.word	0x0003022c

000d5b40 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <HAL_Get_Pin_Mode+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	68db      	ldr	r3, [r3, #12]
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	0003022c 	.word	0x0003022c

000d5b50 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <HAL_GPIO_Write+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	691b      	ldr	r3, [r3, #16]
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	0003022c 	.word	0x0003022c

000d5b60 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <HAL_ADC_Read+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	0003022c 	.word	0x0003022c

000d5b70 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <HAL_I2C_Write_Data+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	6a1b      	ldr	r3, [r3, #32]
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	00030228 	.word	0x00030228

000d5b80 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <HAL_I2C_Available_Data+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	00030228 	.word	0x00030228

000d5b90 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <HAL_I2C_Read_Data+0xc>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b98:	9301      	str	r3, [sp, #4]
   d5b9a:	bd08      	pop	{r3, pc}
   d5b9c:	00030228 	.word	0x00030228

000d5ba0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5ba0:	b508      	push	{r3, lr}
   d5ba2:	4b02      	ldr	r3, [pc, #8]	; (d5bac <HAL_I2C_Peek_Data+0xc>)
   d5ba4:	681b      	ldr	r3, [r3, #0]
   d5ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ba8:	9301      	str	r3, [sp, #4]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	00030228 	.word	0x00030228

000d5bb0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5bb0:	b508      	push	{r3, lr}
   d5bb2:	4b02      	ldr	r3, [pc, #8]	; (d5bbc <HAL_I2C_Flush_Data+0xc>)
   d5bb4:	681b      	ldr	r3, [r3, #0]
   d5bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	bd08      	pop	{r3, pc}
   d5bbc:	00030228 	.word	0x00030228

000d5bc0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <HAL_I2C_Is_Enabled+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	00030228 	.word	0x00030228

000d5bd0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <HAL_I2C_Init+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	00030228 	.word	0x00030228

000d5be0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <inet_inet_ntop+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	695b      	ldr	r3, [r3, #20]
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	00030264 	.word	0x00030264

000d5bf0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <netdb_freeaddrinfo+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	689b      	ldr	r3, [r3, #8]
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	00030268 	.word	0x00030268

000d5c00 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <netdb_getaddrinfo+0xc>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	68db      	ldr	r3, [r3, #12]
   d5c08:	9301      	str	r3, [sp, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	00030268 	.word	0x00030268

000d5c10 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5c10:	b508      	push	{r3, lr}
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <HAL_SPI_Begin+0xc>)
   d5c14:	681b      	ldr	r3, [r3, #0]
   d5c16:	681b      	ldr	r3, [r3, #0]
   d5c18:	9301      	str	r3, [sp, #4]
   d5c1a:	bd08      	pop	{r3, pc}
   d5c1c:	00030230 	.word	0x00030230

000d5c20 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5c20:	b508      	push	{r3, lr}
   d5c22:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <HAL_SPI_Send_Receive_Data+0xc>)
   d5c24:	681b      	ldr	r3, [r3, #0]
   d5c26:	695b      	ldr	r3, [r3, #20]
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	bd08      	pop	{r3, pc}
   d5c2c:	00030230 	.word	0x00030230

000d5c30 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <HAL_SPI_Init+0xc>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	69db      	ldr	r3, [r3, #28]
   d5c38:	9301      	str	r3, [sp, #4]
   d5c3a:	bd08      	pop	{r3, pc}
   d5c3c:	00030230 	.word	0x00030230

000d5c40 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <HAL_SPI_Is_Enabled+0xc>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	6a1b      	ldr	r3, [r3, #32]
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	bd08      	pop	{r3, pc}
   d5c4c:	00030230 	.word	0x00030230

000d5c50 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5c50:	b508      	push	{r3, lr}
   d5c52:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <HAL_SPI_Info+0xc>)
   d5c54:	681b      	ldr	r3, [r3, #0]
   d5c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c58:	9301      	str	r3, [sp, #4]
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	00030230 	.word	0x00030230

000d5c60 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d5c60:	b508      	push	{r3, lr}
   d5c62:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <HAL_SPI_DMA_Transfer+0xc>)
   d5c64:	681b      	ldr	r3, [r3, #0]
   d5c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c68:	9301      	str	r3, [sp, #4]
   d5c6a:	bd08      	pop	{r3, pc}
   d5c6c:	00030230 	.word	0x00030230

000d5c70 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b02      	ldr	r3, [pc, #8]	; (d5c7c <HAL_SPI_DMA_Transfer_Status+0xc>)
   d5c74:	681b      	ldr	r3, [r3, #0]
   d5c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5c78:	9301      	str	r3, [sp, #4]
   d5c7a:	bd08      	pop	{r3, pc}
   d5c7c:	00030230 	.word	0x00030230

000d5c80 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <HAL_SPI_Set_Settings+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	00030230 	.word	0x00030230

000d5c90 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <HAL_USART_Init+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	681b      	ldr	r3, [r3, #0]
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	0003023c 	.word	0x0003023c

000d5ca0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <HAL_USART_Write_Data+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	68db      	ldr	r3, [r3, #12]
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	0003023c 	.word	0x0003023c

000d5cb0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <HAL_USART_Available_Data+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	691b      	ldr	r3, [r3, #16]
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	0003023c 	.word	0x0003023c

000d5cc0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <HAL_USART_Read_Data+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	695b      	ldr	r3, [r3, #20]
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	0003023c 	.word	0x0003023c

000d5cd0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <HAL_USART_Peek_Data+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	699b      	ldr	r3, [r3, #24]
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	0003023c 	.word	0x0003023c

000d5ce0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <HAL_USART_Flush_Data+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	69db      	ldr	r3, [r3, #28]
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	0003023c 	.word	0x0003023c

000d5cf0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <HAL_USART_Is_Enabled+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	6a1b      	ldr	r3, [r3, #32]
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	0003023c 	.word	0x0003023c

000d5d00 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <HAL_USART_Available_Data_For_Write+0xc>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d08:	9301      	str	r3, [sp, #4]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	0003023c 	.word	0x0003023c

000d5d10 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5d10:	b508      	push	{r3, lr}
   d5d12:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <HAL_USB_USART_Init+0xc>)
   d5d14:	681b      	ldr	r3, [r3, #0]
   d5d16:	681b      	ldr	r3, [r3, #0]
   d5d18:	9301      	str	r3, [sp, #4]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	0003024c 	.word	0x0003024c

000d5d20 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <HAL_USB_USART_Begin+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	685b      	ldr	r3, [r3, #4]
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	0003024c 	.word	0x0003024c

000d5d30 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5d30:	b508      	push	{r3, lr}
   d5d32:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <HAL_USB_USART_Available_Data+0xc>)
   d5d34:	681b      	ldr	r3, [r3, #0]
   d5d36:	691b      	ldr	r3, [r3, #16]
   d5d38:	9301      	str	r3, [sp, #4]
   d5d3a:	bd08      	pop	{r3, pc}
   d5d3c:	0003024c 	.word	0x0003024c

000d5d40 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5d40:	b508      	push	{r3, lr}
   d5d42:	4b02      	ldr	r3, [pc, #8]	; (d5d4c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5d44:	681b      	ldr	r3, [r3, #0]
   d5d46:	695b      	ldr	r3, [r3, #20]
   d5d48:	9301      	str	r3, [sp, #4]
   d5d4a:	bd08      	pop	{r3, pc}
   d5d4c:	0003024c 	.word	0x0003024c

000d5d50 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d50:	b508      	push	{r3, lr}
   d5d52:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <HAL_USB_USART_Receive_Data+0xc>)
   d5d54:	681b      	ldr	r3, [r3, #0]
   d5d56:	699b      	ldr	r3, [r3, #24]
   d5d58:	9301      	str	r3, [sp, #4]
   d5d5a:	bd08      	pop	{r3, pc}
   d5d5c:	0003024c 	.word	0x0003024c

000d5d60 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d60:	b508      	push	{r3, lr}
   d5d62:	4b02      	ldr	r3, [pc, #8]	; (d5d6c <HAL_USB_USART_Send_Data+0xc>)
   d5d64:	681b      	ldr	r3, [r3, #0]
   d5d66:	69db      	ldr	r3, [r3, #28]
   d5d68:	9301      	str	r3, [sp, #4]
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	0003024c 	.word	0x0003024c

000d5d70 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5d70:	b508      	push	{r3, lr}
   d5d72:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <HAL_USB_USART_Flush_Data+0xc>)
   d5d74:	681b      	ldr	r3, [r3, #0]
   d5d76:	6a1b      	ldr	r3, [r3, #32]
   d5d78:	9301      	str	r3, [sp, #4]
   d5d7a:	bd08      	pop	{r3, pc}
   d5d7c:	0003024c 	.word	0x0003024c

000d5d80 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <system_mode+0xc>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	681b      	ldr	r3, [r3, #0]
   d5d88:	9301      	str	r3, [sp, #4]
   d5d8a:	bd08      	pop	{r3, pc}
   d5d8c:	00030220 	.word	0x00030220

000d5d90 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4b02      	ldr	r3, [pc, #8]	; (d5d9c <set_system_mode+0xc>)
   d5d94:	681b      	ldr	r3, [r3, #0]
   d5d96:	685b      	ldr	r3, [r3, #4]
   d5d98:	9301      	str	r3, [sp, #4]
   d5d9a:	bd08      	pop	{r3, pc}
   d5d9c:	00030220 	.word	0x00030220

000d5da0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5da0:	b508      	push	{r3, lr}
   d5da2:	4b02      	ldr	r3, [pc, #8]	; (d5dac <system_delay_ms+0xc>)
   d5da4:	681b      	ldr	r3, [r3, #0]
   d5da6:	695b      	ldr	r3, [r3, #20]
   d5da8:	9301      	str	r3, [sp, #4]
   d5daa:	bd08      	pop	{r3, pc}
   d5dac:	00030220 	.word	0x00030220

000d5db0 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5db0:	b508      	push	{r3, lr}
   d5db2:	4b02      	ldr	r3, [pc, #8]	; (d5dbc <system_thread_get_state+0xc>)
   d5db4:	681b      	ldr	r3, [r3, #0]
   d5db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5db8:	9301      	str	r3, [sp, #4]
   d5dba:	bd08      	pop	{r3, pc}
   d5dbc:	00030220 	.word	0x00030220

000d5dc0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5dc0:	b508      	push	{r3, lr}
   d5dc2:	4b03      	ldr	r3, [pc, #12]	; (d5dd0 <system_ctrl_set_app_request_handler+0x10>)
   d5dc4:	681b      	ldr	r3, [r3, #0]
   d5dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5dca:	9301      	str	r3, [sp, #4]
   d5dcc:	bd08      	pop	{r3, pc}
   d5dce:	0000      	.short	0x0000
   d5dd0:	00030220 	.word	0x00030220

000d5dd4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b03      	ldr	r3, [pc, #12]	; (d5de4 <system_ctrl_set_result+0x10>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5dde:	9301      	str	r3, [sp, #4]
   d5de0:	bd08      	pop	{r3, pc}
   d5de2:	0000      	.short	0x0000
   d5de4:	00030220 	.word	0x00030220

000d5de8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b02      	ldr	r3, [pc, #8]	; (d5df4 <spark_process+0xc>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	689b      	ldr	r3, [r3, #8]
   d5df0:	9301      	str	r3, [sp, #4]
   d5df2:	bd08      	pop	{r3, pc}
   d5df4:	00030244 	.word	0x00030244

000d5df8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <spark_cloud_flag_connected+0xc>)
   d5dfc:	681b      	ldr	r3, [r3, #0]
   d5dfe:	695b      	ldr	r3, [r3, #20]
   d5e00:	9301      	str	r3, [sp, #4]
   d5e02:	bd08      	pop	{r3, pc}
   d5e04:	00030244 	.word	0x00030244

000d5e08 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5e08:	b508      	push	{r3, lr}
   d5e0a:	4b02      	ldr	r3, [pc, #8]	; (d5e14 <spark_sync_time_pending+0xc>)
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e10:	9301      	str	r3, [sp, #4]
   d5e12:	bd08      	pop	{r3, pc}
   d5e14:	00030244 	.word	0x00030244

000d5e18 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5e18:	b508      	push	{r3, lr}
   d5e1a:	4b02      	ldr	r3, [pc, #8]	; (d5e24 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5e1c:	681b      	ldr	r3, [r3, #0]
   d5e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e20:	9301      	str	r3, [sp, #4]
   d5e22:	bd08      	pop	{r3, pc}
   d5e24:	00030244 	.word	0x00030244

000d5e28 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e28:	b508      	push	{r3, lr}
   d5e2a:	4b02      	ldr	r3, [pc, #8]	; (d5e34 <network_connect+0xc>)
   d5e2c:	681b      	ldr	r3, [r3, #0]
   d5e2e:	685b      	ldr	r3, [r3, #4]
   d5e30:	9301      	str	r3, [sp, #4]
   d5e32:	bd08      	pop	{r3, pc}
   d5e34:	00030240 	.word	0x00030240

000d5e38 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b02      	ldr	r3, [pc, #8]	; (d5e44 <network_connecting+0xc>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	689b      	ldr	r3, [r3, #8]
   d5e40:	9301      	str	r3, [sp, #4]
   d5e42:	bd08      	pop	{r3, pc}
   d5e44:	00030240 	.word	0x00030240

000d5e48 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <network_disconnect+0xc>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	68db      	ldr	r3, [r3, #12]
   d5e50:	9301      	str	r3, [sp, #4]
   d5e52:	bd08      	pop	{r3, pc}
   d5e54:	00030240 	.word	0x00030240

000d5e58 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <network_ready+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	691b      	ldr	r3, [r3, #16]
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	00030240 	.word	0x00030240

000d5e68 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <network_on+0xc>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	695b      	ldr	r3, [r3, #20]
   d5e70:	9301      	str	r3, [sp, #4]
   d5e72:	bd08      	pop	{r3, pc}
   d5e74:	00030240 	.word	0x00030240

000d5e78 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e78:	b508      	push	{r3, lr}
   d5e7a:	4b02      	ldr	r3, [pc, #8]	; (d5e84 <network_off+0xc>)
   d5e7c:	681b      	ldr	r3, [r3, #0]
   d5e7e:	699b      	ldr	r3, [r3, #24]
   d5e80:	9301      	str	r3, [sp, #4]
   d5e82:	bd08      	pop	{r3, pc}
   d5e84:	00030240 	.word	0x00030240

000d5e88 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <network_listen+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	69db      	ldr	r3, [r3, #28]
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	00030240 	.word	0x00030240

000d5e98 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <network_listening+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	6a1b      	ldr	r3, [r3, #32]
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	00030240 	.word	0x00030240

000d5ea8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5ea8:	b508      	push	{r3, lr}
   d5eaa:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <network_set_listen_timeout+0xc>)
   d5eac:	681b      	ldr	r3, [r3, #0]
   d5eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5eb0:	9301      	str	r3, [sp, #4]
   d5eb2:	bd08      	pop	{r3, pc}
   d5eb4:	00030240 	.word	0x00030240

000d5eb8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5eb8:	b508      	push	{r3, lr}
   d5eba:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <network_get_listen_timeout+0xc>)
   d5ebc:	681b      	ldr	r3, [r3, #0]
   d5ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ec0:	9301      	str	r3, [sp, #4]
   d5ec2:	bd08      	pop	{r3, pc}
   d5ec4:	00030240 	.word	0x00030240

000d5ec8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5ec8:	b508      	push	{r3, lr}
   d5eca:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <malloc+0xc>)
   d5ecc:	681b      	ldr	r3, [r3, #0]
   d5ece:	681b      	ldr	r3, [r3, #0]
   d5ed0:	9301      	str	r3, [sp, #4]
   d5ed2:	bd08      	pop	{r3, pc}
   d5ed4:	0003021c 	.word	0x0003021c

000d5ed8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5ed8:	b508      	push	{r3, lr}
   d5eda:	4b02      	ldr	r3, [pc, #8]	; (d5ee4 <free+0xc>)
   d5edc:	681b      	ldr	r3, [r3, #0]
   d5ede:	685b      	ldr	r3, [r3, #4]
   d5ee0:	9301      	str	r3, [sp, #4]
   d5ee2:	bd08      	pop	{r3, pc}
   d5ee4:	0003021c 	.word	0x0003021c

000d5ee8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5ee8:	b508      	push	{r3, lr}
   d5eea:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <vsnprintf+0xc>)
   d5eec:	681b      	ldr	r3, [r3, #0]
   d5eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ef0:	9301      	str	r3, [sp, #4]
   d5ef2:	bd08      	pop	{r3, pc}
   d5ef4:	0003021c 	.word	0x0003021c

000d5ef8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5ef8:	2100      	movs	r1, #0
   d5efa:	f7ff bf51 	b.w	d5da0 <system_delay_ms>
	...

000d5f00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5f00:	4802      	ldr	r0, [pc, #8]	; (d5f0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5f02:	2300      	movs	r3, #0
   d5f04:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5f06:	f7ff bdd3 	b.w	d5ab0 <os_mutex_recursive_create>
   d5f0a:	bf00      	nop
   d5f0c:	2003e4a0 	.word	0x2003e4a0

000d5f10 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5f10:	2200      	movs	r2, #0
   d5f12:	4611      	mov	r1, r2
   d5f14:	6840      	ldr	r0, [r0, #4]
   d5f16:	f7ff bf9f 	b.w	d5e58 <network_ready>

000d5f1a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f1a:	2200      	movs	r2, #0
   d5f1c:	4611      	mov	r1, r2
   d5f1e:	6840      	ldr	r0, [r0, #4]
   d5f20:	f7ff bfba 	b.w	d5e98 <network_listening>

000d5f24 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5f24:	2200      	movs	r2, #0
   d5f26:	4611      	mov	r1, r2
   d5f28:	6840      	ldr	r0, [r0, #4]
   d5f2a:	f7ff bfc5 	b.w	d5eb8 <network_get_listen_timeout>

000d5f2e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5f2e:	2200      	movs	r2, #0
   d5f30:	6840      	ldr	r0, [r0, #4]
   d5f32:	f7ff bfb9 	b.w	d5ea8 <network_set_listen_timeout>

000d5f36 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f36:	2200      	movs	r2, #0
   d5f38:	f081 0101 	eor.w	r1, r1, #1
   d5f3c:	6840      	ldr	r0, [r0, #4]
   d5f3e:	f7ff bfa3 	b.w	d5e88 <network_listen>

000d5f42 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5f42:	2300      	movs	r3, #0
   d5f44:	461a      	mov	r2, r3
   d5f46:	4619      	mov	r1, r3
   d5f48:	6840      	ldr	r0, [r0, #4]
   d5f4a:	f7ff bf95 	b.w	d5e78 <network_off>

000d5f4e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5f4e:	2300      	movs	r3, #0
   d5f50:	461a      	mov	r2, r3
   d5f52:	4619      	mov	r1, r3
   d5f54:	6840      	ldr	r0, [r0, #4]
   d5f56:	f7ff bf87 	b.w	d5e68 <network_on>

000d5f5a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5f5a:	2200      	movs	r2, #0
   d5f5c:	4611      	mov	r1, r2
   d5f5e:	6840      	ldr	r0, [r0, #4]
   d5f60:	f7ff bf6a 	b.w	d5e38 <network_connecting>

000d5f64 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f64:	2200      	movs	r2, #0
   d5f66:	2102      	movs	r1, #2
   d5f68:	6840      	ldr	r0, [r0, #4]
   d5f6a:	f7ff bf6d 	b.w	d5e48 <network_disconnect>

000d5f6e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5f6e:	2300      	movs	r3, #0
   d5f70:	461a      	mov	r2, r3
   d5f72:	6840      	ldr	r0, [r0, #4]
   d5f74:	f7ff bf58 	b.w	d5e28 <network_connect>

000d5f78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5f78:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5f7a:	4c08      	ldr	r4, [pc, #32]	; (d5f9c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5f7c:	2528      	movs	r5, #40	; 0x28
   d5f7e:	462a      	mov	r2, r5
   d5f80:	2100      	movs	r1, #0
   d5f82:	4620      	mov	r0, r4
   d5f84:	f001 fdba 	bl	d7afc <memset>
        cid = -1;
   d5f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5f8c:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5f8e:	4b04      	ldr	r3, [pc, #16]	; (d5fa0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5f90:	8025      	strh	r5, [r4, #0]
   d5f92:	2204      	movs	r2, #4
   d5f94:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5f96:	4a03      	ldr	r2, [pc, #12]	; (d5fa4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5f98:	601a      	str	r2, [r3, #0]
   d5f9a:	bd38      	pop	{r3, r4, r5, pc}
   d5f9c:	2003e4ac 	.word	0x2003e4ac
   d5fa0:	2003e4a4 	.word	0x2003e4a4
   d5fa4:	000d7c6c 	.word	0x000d7c6c

000d5fa8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5fa8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5faa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5fac:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5fae:	b113      	cbz	r3, d5fb6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5fb0:	2203      	movs	r2, #3
   d5fb2:	4601      	mov	r1, r0
   d5fb4:	4798      	blx	r3
    }
   d5fb6:	4620      	mov	r0, r4
   d5fb8:	bd10      	pop	{r4, pc}

000d5fba <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5fba:	2200      	movs	r2, #0
   d5fbc:	4611      	mov	r1, r2
   d5fbe:	6840      	ldr	r0, [r0, #4]
   d5fc0:	f7ff bf6a 	b.w	d5e98 <network_listening>

000d5fc4 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5fc4:	2200      	movs	r2, #0
   d5fc6:	4611      	mov	r1, r2
   d5fc8:	6840      	ldr	r0, [r0, #4]
   d5fca:	f7ff bf75 	b.w	d5eb8 <network_get_listen_timeout>

000d5fce <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5fce:	2200      	movs	r2, #0
   d5fd0:	6840      	ldr	r0, [r0, #4]
   d5fd2:	f7ff bf69 	b.w	d5ea8 <network_set_listen_timeout>

000d5fd6 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5fd6:	2200      	movs	r2, #0
   d5fd8:	f081 0101 	eor.w	r1, r1, #1
   d5fdc:	6840      	ldr	r0, [r0, #4]
   d5fde:	f7ff bf53 	b.w	d5e88 <network_listen>

000d5fe2 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5fe2:	2300      	movs	r3, #0
   d5fe4:	461a      	mov	r2, r3
   d5fe6:	4619      	mov	r1, r3
   d5fe8:	6840      	ldr	r0, [r0, #4]
   d5fea:	f7ff bf45 	b.w	d5e78 <network_off>

000d5fee <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5fee:	2300      	movs	r3, #0
   d5ff0:	461a      	mov	r2, r3
   d5ff2:	4619      	mov	r1, r3
   d5ff4:	6840      	ldr	r0, [r0, #4]
   d5ff6:	f7ff bf37 	b.w	d5e68 <network_on>

000d5ffa <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ffa:	2200      	movs	r2, #0
   d5ffc:	4611      	mov	r1, r2
   d5ffe:	6840      	ldr	r0, [r0, #4]
   d6000:	f7ff bf2a 	b.w	d5e58 <network_ready>

000d6004 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6004:	2200      	movs	r2, #0
   d6006:	4611      	mov	r1, r2
   d6008:	6840      	ldr	r0, [r0, #4]
   d600a:	f7ff bf15 	b.w	d5e38 <network_connecting>

000d600e <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d600e:	2200      	movs	r2, #0
   d6010:	2102      	movs	r1, #2
   d6012:	6840      	ldr	r0, [r0, #4]
   d6014:	f7ff bf18 	b.w	d5e48 <network_disconnect>

000d6018 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6018:	2300      	movs	r3, #0
   d601a:	461a      	mov	r2, r3
   d601c:	6840      	ldr	r0, [r0, #4]
   d601e:	f7ff bf03 	b.w	d5e28 <network_connect>
	...

000d6024 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6024:	4b02      	ldr	r3, [pc, #8]	; (d6030 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6026:	2203      	movs	r2, #3
   d6028:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d602a:	4a02      	ldr	r2, [pc, #8]	; (d6034 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d602c:	601a      	str	r2, [r3, #0]
   d602e:	4770      	bx	lr
   d6030:	2003e4d4 	.word	0x2003e4d4
   d6034:	000d7ca0 	.word	0x000d7ca0

000d6038 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6038:	4770      	bx	lr

000d603a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d603a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d603c:	4606      	mov	r6, r0
   d603e:	4615      	mov	r5, r2
   d6040:	460c      	mov	r4, r1
   d6042:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6044:	42bc      	cmp	r4, r7
   d6046:	d006      	beq.n	d6056 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6048:	6833      	ldr	r3, [r6, #0]
   d604a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d604e:	689b      	ldr	r3, [r3, #8]
   d6050:	4630      	mov	r0, r6
   d6052:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6054:	e7f6      	b.n	d6044 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6056:	4628      	mov	r0, r5
   d6058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d605a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d605a:	2200      	movs	r2, #0
   d605c:	7c00      	ldrb	r0, [r0, #16]
   d605e:	f7ff bd87 	b.w	d5b70 <HAL_I2C_Write_Data>

000d6062 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6062:	2100      	movs	r1, #0
   d6064:	7c00      	ldrb	r0, [r0, #16]
   d6066:	f7ff bd8b 	b.w	d5b80 <HAL_I2C_Available_Data>

000d606a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d606a:	2100      	movs	r1, #0
   d606c:	7c00      	ldrb	r0, [r0, #16]
   d606e:	f7ff bd8f 	b.w	d5b90 <HAL_I2C_Read_Data>

000d6072 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6072:	2100      	movs	r1, #0
   d6074:	7c00      	ldrb	r0, [r0, #16]
   d6076:	f7ff bd93 	b.w	d5ba0 <HAL_I2C_Peek_Data>

000d607a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d607a:	2100      	movs	r1, #0
   d607c:	7c00      	ldrb	r0, [r0, #16]
   d607e:	f7ff bd97 	b.w	d5bb0 <HAL_I2C_Flush_Data>

000d6082 <_ZN7TwoWireD0Ev>:
   d6082:	b510      	push	{r4, lr}
   d6084:	2114      	movs	r1, #20
   d6086:	4604      	mov	r4, r0
   d6088:	f000 fec5 	bl	d6e16 <_ZdlPvj>
   d608c:	4620      	mov	r0, r4
   d608e:	bd10      	pop	{r4, pc}

000d6090 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6090:	b510      	push	{r4, lr}
   d6092:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6098:	4608      	mov	r0, r1
   d609a:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d609c:	2100      	movs	r1, #0
   d609e:	4b04      	ldr	r3, [pc, #16]	; (d60b0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d60a0:	7420      	strb	r0, [r4, #16]
   d60a2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d60a4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d60a6:	f7ff fd93 	bl	d5bd0 <HAL_I2C_Init>

}
   d60aa:	4620      	mov	r0, r4
   d60ac:	bd10      	pop	{r4, pc}
   d60ae:	bf00      	nop
   d60b0:	000d7cd4 	.word	0x000d7cd4

000d60b4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d60b4:	2100      	movs	r1, #0
   d60b6:	7c00      	ldrb	r0, [r0, #16]
   d60b8:	f7ff bd82 	b.w	d5bc0 <HAL_I2C_Is_Enabled>

000d60bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d60bc:	4770      	bx	lr

000d60be <_ZN9IPAddressD0Ev>:
   d60be:	b510      	push	{r4, lr}
   d60c0:	2118      	movs	r1, #24
   d60c2:	4604      	mov	r4, r0
   d60c4:	f000 fea7 	bl	d6e16 <_ZdlPvj>
   d60c8:	4620      	mov	r0, r4
   d60ca:	bd10      	pop	{r4, pc}

000d60cc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d60cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d60ce:	7d03      	ldrb	r3, [r0, #20]
   d60d0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d60d2:	b08d      	sub	sp, #52	; 0x34
   d60d4:	460e      	mov	r6, r1
   d60d6:	f100 0704 	add.w	r7, r0, #4
   d60da:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d60de:	d002      	beq.n	d60e6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d60e0:	f100 0508 	add.w	r5, r0, #8
   d60e4:	e018      	b.n	d6118 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d60e6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d60e8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d60ea:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d60ee:	232f      	movs	r3, #47	; 0x2f
   d60f0:	462a      	mov	r2, r5
   d60f2:	200a      	movs	r0, #10
   d60f4:	f7ff fd74 	bl	d5be0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d60f8:	4628      	mov	r0, r5
   d60fa:	f001 fd2f 	bl	d7b5c <strlen>
   d60fe:	6833      	ldr	r3, [r6, #0]
   d6100:	4602      	mov	r2, r0
   d6102:	68db      	ldr	r3, [r3, #12]
   d6104:	4629      	mov	r1, r5
   d6106:	4630      	mov	r0, r6
   d6108:	4798      	blx	r3
   d610a:	e00f      	b.n	d612c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d610c:	b124      	cbz	r4, d6118 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d610e:	212e      	movs	r1, #46	; 0x2e
   d6110:	4630      	mov	r0, r6
   d6112:	f000 f9bd 	bl	d6490 <_ZN5Print5printEc>
   d6116:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6118:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d611c:	220a      	movs	r2, #10
   d611e:	4630      	mov	r0, r6
   d6120:	f000 f9fc 	bl	d651c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6124:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6126:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6128:	d1f0      	bne.n	d610c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d612a:	4620      	mov	r0, r4
    }
    return n;
}
   d612c:	b00d      	add	sp, #52	; 0x34
   d612e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6130 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6130:	b510      	push	{r4, lr}
   d6132:	4b05      	ldr	r3, [pc, #20]	; (d6148 <_ZN9IPAddressC1Ev+0x18>)
   d6134:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6136:	2211      	movs	r2, #17
   d6138:	f840 3b04 	str.w	r3, [r0], #4
   d613c:	2100      	movs	r1, #0
   d613e:	f001 fcdd 	bl	d7afc <memset>
{
    clear();
}
   d6142:	4620      	mov	r0, r4
   d6144:	bd10      	pop	{r4, pc}
   d6146:	bf00      	nop
   d6148:	000d7cfc 	.word	0x000d7cfc

000d614c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d614c:	4603      	mov	r3, r0
   d614e:	4a07      	ldr	r2, [pc, #28]	; (d616c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6150:	b510      	push	{r4, lr}
   d6152:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6156:	f101 0210 	add.w	r2, r1, #16
   d615a:	f851 4b04 	ldr.w	r4, [r1], #4
   d615e:	f843 4b04 	str.w	r4, [r3], #4
   d6162:	4291      	cmp	r1, r2
   d6164:	d1f9      	bne.n	d615a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6166:	780a      	ldrb	r2, [r1, #0]
   d6168:	701a      	strb	r2, [r3, #0]
}
   d616a:	bd10      	pop	{r4, pc}
   d616c:	000d7cfc 	.word	0x000d7cfc

000d6170 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6170:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6172:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6176:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d617a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d617e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6182:	2304      	movs	r3, #4
   d6184:	6041      	str	r1, [r0, #4]
   d6186:	7503      	strb	r3, [r0, #20]
   d6188:	bd10      	pop	{r4, pc}

000d618a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d618a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d618c:	780d      	ldrb	r5, [r1, #0]
   d618e:	788b      	ldrb	r3, [r1, #2]
   d6190:	784a      	ldrb	r2, [r1, #1]
   d6192:	78c9      	ldrb	r1, [r1, #3]
   d6194:	9100      	str	r1, [sp, #0]
   d6196:	4629      	mov	r1, r5
   d6198:	f7ff ffea 	bl	d6170 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d619c:	b003      	add	sp, #12
   d619e:	bd30      	pop	{r4, r5, pc}

000d61a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d61a0:	4b01      	ldr	r3, [pc, #4]	; (d61a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d61a2:	4a02      	ldr	r2, [pc, #8]	; (d61ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d61a4:	601a      	str	r2, [r3, #0]
   d61a6:	4770      	bx	lr
   d61a8:	2003e4dc 	.word	0x2003e4dc
   d61ac:	000d7d7b 	.word	0x000d7d7b

000d61b0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d61b0:	2200      	movs	r2, #0
   d61b2:	4611      	mov	r1, r2
   d61b4:	6840      	ldr	r0, [r0, #4]
   d61b6:	f7ff be6f 	b.w	d5e98 <network_listening>

000d61ba <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d61ba:	2200      	movs	r2, #0
   d61bc:	4611      	mov	r1, r2
   d61be:	6840      	ldr	r0, [r0, #4]
   d61c0:	f7ff be7a 	b.w	d5eb8 <network_get_listen_timeout>

000d61c4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d61c4:	2200      	movs	r2, #0
   d61c6:	6840      	ldr	r0, [r0, #4]
   d61c8:	f7ff be6e 	b.w	d5ea8 <network_set_listen_timeout>

000d61cc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d61cc:	2200      	movs	r2, #0
   d61ce:	f081 0101 	eor.w	r1, r1, #1
   d61d2:	6840      	ldr	r0, [r0, #4]
   d61d4:	f7ff be58 	b.w	d5e88 <network_listen>

000d61d8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d61d8:	2300      	movs	r3, #0
   d61da:	461a      	mov	r2, r3
   d61dc:	2101      	movs	r1, #1
   d61de:	6840      	ldr	r0, [r0, #4]
   d61e0:	f7ff be4a 	b.w	d5e78 <network_off>

000d61e4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d61e4:	2300      	movs	r3, #0
   d61e6:	461a      	mov	r2, r3
   d61e8:	4619      	mov	r1, r3
   d61ea:	6840      	ldr	r0, [r0, #4]
   d61ec:	f7ff be3c 	b.w	d5e68 <network_on>

000d61f0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d61f0:	2200      	movs	r2, #0
   d61f2:	4611      	mov	r1, r2
   d61f4:	6840      	ldr	r0, [r0, #4]
   d61f6:	f7ff be2f 	b.w	d5e58 <network_ready>

000d61fa <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d61fa:	2200      	movs	r2, #0
   d61fc:	4611      	mov	r1, r2
   d61fe:	6840      	ldr	r0, [r0, #4]
   d6200:	f7ff be1a 	b.w	d5e38 <network_connecting>

000d6204 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6204:	2200      	movs	r2, #0
   d6206:	2102      	movs	r1, #2
   d6208:	6840      	ldr	r0, [r0, #4]
   d620a:	f7ff be1d 	b.w	d5e48 <network_disconnect>

000d620e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d620e:	2300      	movs	r3, #0
   d6210:	461a      	mov	r2, r3
   d6212:	6840      	ldr	r0, [r0, #4]
   d6214:	f7ff be08 	b.w	d5e28 <network_connect>

000d6218 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6218:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d621a:	4605      	mov	r5, r0
   d621c:	b188      	cbz	r0, d6242 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d621e:	6804      	ldr	r4, [r0, #0]
   d6220:	b14c      	cbz	r4, d6236 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6222:	68a3      	ldr	r3, [r4, #8]
   d6224:	b11b      	cbz	r3, d622e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6226:	2203      	movs	r2, #3
   d6228:	4621      	mov	r1, r4
   d622a:	4620      	mov	r0, r4
   d622c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d622e:	2110      	movs	r1, #16
   d6230:	4620      	mov	r0, r4
   d6232:	f000 fdf0 	bl	d6e16 <_ZdlPvj>
   d6236:	4628      	mov	r0, r5
   d6238:	2114      	movs	r1, #20
      }
   d623a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d623e:	f000 bdea 	b.w	d6e16 <_ZdlPvj>
   d6242:	bd38      	pop	{r3, r4, r5, pc}

000d6244 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6244:	b110      	cbz	r0, d624c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6246:	6803      	ldr	r3, [r0, #0]
   d6248:	685b      	ldr	r3, [r3, #4]
   d624a:	4718      	bx	r3
   d624c:	4770      	bx	lr

000d624e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d624e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6250:	6803      	ldr	r3, [r0, #0]
   d6252:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6254:	b1bb      	cbz	r3, d6286 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6256:	6858      	ldr	r0, [r3, #4]
   d6258:	f7ff fbfa 	bl	d5a50 <os_thread_is_current>
   d625c:	b978      	cbnz	r0, d627e <_ZN6ThreadD1Ev+0x30>
   d625e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6260:	7c5a      	ldrb	r2, [r3, #17]
   d6262:	b912      	cbnz	r2, d626a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6264:	6858      	ldr	r0, [r3, #4]
   d6266:	f7ff fbfb 	bl	d5a60 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d626a:	6823      	ldr	r3, [r4, #0]
   d626c:	6858      	ldr	r0, [r3, #4]
   d626e:	f7ff fbff 	bl	d5a70 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6272:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6274:	2300      	movs	r3, #0
   d6276:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6278:	b128      	cbz	r0, d6286 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d627a:	f7ff ffcd 	bl	d6218 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d627e:	6820      	ldr	r0, [r4, #0]
   d6280:	b108      	cbz	r0, d6286 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6282:	f7ff ffc9 	bl	d6218 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6286:	4620      	mov	r0, r4
   d6288:	bd10      	pop	{r4, pc}
	...

000d628c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d628c:	b538      	push	{r3, r4, r5, lr}
   d628e:	4b0c      	ldr	r3, [pc, #48]	; (d62c0 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6290:	6003      	str	r3, [r0, #0]
   d6292:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6294:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6298:	b108      	cbz	r0, d629e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d629a:	f7fd ff02 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d629e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d62a2:	b135      	cbz	r5, d62b2 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62a4:	4628      	mov	r0, r5
   d62a6:	f7ff ffd2 	bl	d624e <_ZN6ThreadD1Ev>
   d62aa:	2104      	movs	r1, #4
   d62ac:	4628      	mov	r0, r5
   d62ae:	f000 fdb2 	bl	d6e16 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62b2:	68a0      	ldr	r0, [r4, #8]
   d62b4:	b108      	cbz	r0, d62ba <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d62b6:	f7ff ffc5 	bl	d6244 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d62ba:	4620      	mov	r0, r4
   d62bc:	bd38      	pop	{r3, r4, r5, pc}
   d62be:	bf00      	nop
   d62c0:	000d7df0 	.word	0x000d7df0

000d62c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d62c4:	b538      	push	{r3, r4, r5, lr}
   d62c6:	4c0e      	ldr	r4, [pc, #56]	; (d6300 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d62c8:	4b0e      	ldr	r3, [pc, #56]	; (d6304 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d62ca:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d62cc:	2500      	movs	r5, #0
   d62ce:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d62d0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d62d4:	6063      	str	r3, [r4, #4]
   d62d6:	60a5      	str	r5, [r4, #8]
   d62d8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d62dc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d62e0:	f7ff fbe6 	bl	d5ab0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d62e4:	4b08      	ldr	r3, [pc, #32]	; (d6308 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d62e6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d62ea:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d62ee:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d62f0:	4620      	mov	r0, r4
   d62f2:	4a06      	ldr	r2, [pc, #24]	; (d630c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d62f4:	4906      	ldr	r1, [pc, #24]	; (d6310 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d62f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d62fa:	f000 bd87 	b.w	d6e0c <__aeabi_atexit>
   d62fe:	bf00      	nop
   d6300:	2003e4e0 	.word	0x2003e4e0
   d6304:	000d7e24 	.word	0x000d7e24
   d6308:	000d7df0 	.word	0x000d7df0
   d630c:	2003dffc 	.word	0x2003dffc
   d6310:	000d628d 	.word	0x000d628d

000d6314 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6314:	2300      	movs	r3, #0
   d6316:	461a      	mov	r2, r3
   d6318:	6840      	ldr	r0, [r0, #4]
   d631a:	f7ff bd85 	b.w	d5e28 <network_connect>

000d631e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d631e:	2200      	movs	r2, #0
   d6320:	2102      	movs	r1, #2
   d6322:	6840      	ldr	r0, [r0, #4]
   d6324:	f7ff bd90 	b.w	d5e48 <network_disconnect>

000d6328 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6328:	2200      	movs	r2, #0
   d632a:	4611      	mov	r1, r2
   d632c:	6840      	ldr	r0, [r0, #4]
   d632e:	f7ff bd83 	b.w	d5e38 <network_connecting>

000d6332 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6332:	2200      	movs	r2, #0
   d6334:	4611      	mov	r1, r2
   d6336:	6840      	ldr	r0, [r0, #4]
   d6338:	f7ff bd8e 	b.w	d5e58 <network_ready>

000d633c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d633c:	2300      	movs	r3, #0
   d633e:	461a      	mov	r2, r3
   d6340:	4619      	mov	r1, r3
   d6342:	6840      	ldr	r0, [r0, #4]
   d6344:	f7ff bd90 	b.w	d5e68 <network_on>

000d6348 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6348:	2300      	movs	r3, #0
   d634a:	461a      	mov	r2, r3
   d634c:	4619      	mov	r1, r3
   d634e:	6840      	ldr	r0, [r0, #4]
   d6350:	f7ff bd92 	b.w	d5e78 <network_off>

000d6354 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6354:	2200      	movs	r2, #0
   d6356:	f081 0101 	eor.w	r1, r1, #1
   d635a:	6840      	ldr	r0, [r0, #4]
   d635c:	f7ff bd94 	b.w	d5e88 <network_listen>

000d6360 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6360:	2200      	movs	r2, #0
   d6362:	6840      	ldr	r0, [r0, #4]
   d6364:	f7ff bda0 	b.w	d5ea8 <network_set_listen_timeout>

000d6368 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6368:	2200      	movs	r2, #0
   d636a:	4611      	mov	r1, r2
   d636c:	6840      	ldr	r0, [r0, #4]
   d636e:	f7ff bda3 	b.w	d5eb8 <network_get_listen_timeout>

000d6372 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6372:	2200      	movs	r2, #0
   d6374:	4611      	mov	r1, r2
   d6376:	6840      	ldr	r0, [r0, #4]
   d6378:	f7ff bd8e 	b.w	d5e98 <network_listening>

000d637c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d637c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6380:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6382:	b095      	sub	sp, #84	; 0x54
   d6384:	4616      	mov	r6, r2
   d6386:	460d      	mov	r5, r1
   d6388:	4607      	mov	r7, r0
    IPAddress addr;
   d638a:	f7ff fed1 	bl	d6130 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d638e:	4621      	mov	r1, r4
   d6390:	2220      	movs	r2, #32
   d6392:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6394:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6396:	f001 fbb1 	bl	d7afc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d639a:	2340      	movs	r3, #64	; 0x40
   d639c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d639e:	4621      	mov	r1, r4
   d63a0:	466b      	mov	r3, sp
   d63a2:	aa0c      	add	r2, sp, #48	; 0x30
   d63a4:	4630      	mov	r0, r6
   d63a6:	f7ff fc2b 	bl	d5c00 <netdb_getaddrinfo>
    if (!r) {
   d63aa:	4604      	mov	r4, r0
   d63ac:	2800      	cmp	r0, #0
   d63ae:	d144      	bne.n	d643a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63b0:	4602      	mov	r2, r0
   d63b2:	2101      	movs	r1, #1
   d63b4:	6868      	ldr	r0, [r5, #4]
   d63b6:	f7ff fd4f 	bl	d5e58 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63ba:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63bc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63be:	4622      	mov	r2, r4
   d63c0:	6868      	ldr	r0, [r5, #4]
   d63c2:	f7ff fd49 	bl	d5e58 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63c6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63c8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d63ca:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63cc:	2e00      	cmp	r6, #0
   d63ce:	d034      	beq.n	d643a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d63d0:	2900      	cmp	r1, #0
   d63d2:	d132      	bne.n	d643a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d63d4:	6873      	ldr	r3, [r6, #4]
   d63d6:	2b02      	cmp	r3, #2
   d63d8:	d002      	beq.n	d63e0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d63da:	2b0a      	cmp	r3, #10
   d63dc:	d009      	beq.n	d63f2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d63de:	e02a      	b.n	d6436 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d63e0:	f1b8 0f00 	cmp.w	r8, #0
   d63e4:	d027      	beq.n	d6436 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d63e6:	6971      	ldr	r1, [r6, #20]
   d63e8:	4638      	mov	r0, r7
   d63ea:	3104      	adds	r1, #4
   d63ec:	f7ff fecd 	bl	d618a <_ZN9IPAddressaSEPKh>
   d63f0:	e020      	b.n	d6434 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d63f2:	f1b9 0f00 	cmp.w	r9, #0
   d63f6:	d01e      	beq.n	d6436 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d63f8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d63fa:	2211      	movs	r2, #17
   d63fc:	a801      	add	r0, sp, #4
   d63fe:	f001 fb7d 	bl	d7afc <memset>
                    a.v = 6;
   d6402:	2306      	movs	r3, #6
   d6404:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6408:	ad01      	add	r5, sp, #4
   d640a:	f104 0308 	add.w	r3, r4, #8
   d640e:	3418      	adds	r4, #24
   d6410:	6818      	ldr	r0, [r3, #0]
   d6412:	6859      	ldr	r1, [r3, #4]
   d6414:	462a      	mov	r2, r5
   d6416:	c203      	stmia	r2!, {r0, r1}
   d6418:	3308      	adds	r3, #8
   d641a:	42a3      	cmp	r3, r4
   d641c:	4615      	mov	r5, r2
   d641e:	d1f7      	bne.n	d6410 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6420:	a901      	add	r1, sp, #4
   d6422:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6424:	ad07      	add	r5, sp, #28
   d6426:	f7ff fe91 	bl	d614c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d642a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d642c:	1d3c      	adds	r4, r7, #4
   d642e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6430:	682b      	ldr	r3, [r5, #0]
   d6432:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6434:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6436:	69f6      	ldr	r6, [r6, #28]
   d6438:	e7c8      	b.n	d63cc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d643a:	9800      	ldr	r0, [sp, #0]
   d643c:	f7ff fbd8 	bl	d5bf0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6440:	4638      	mov	r0, r7
   d6442:	b015      	add	sp, #84	; 0x54
   d6444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6448 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6448:	4b02      	ldr	r3, [pc, #8]	; (d6454 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d644a:	4a03      	ldr	r2, [pc, #12]	; (d6458 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d644c:	601a      	str	r2, [r3, #0]
   d644e:	2200      	movs	r2, #0
   d6450:	605a      	str	r2, [r3, #4]
   d6452:	4770      	bx	lr
   d6454:	2003e6b4 	.word	0x2003e6b4
   d6458:	000d7e24 	.word	0x000d7e24

000d645c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d645e:	4606      	mov	r6, r0
   d6460:	460d      	mov	r5, r1
   d6462:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6464:	2400      	movs	r4, #0
  while (size--) {
   d6466:	42bd      	cmp	r5, r7
   d6468:	d00c      	beq.n	d6484 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d646a:	6833      	ldr	r3, [r6, #0]
   d646c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6470:	689b      	ldr	r3, [r3, #8]
   d6472:	4630      	mov	r0, r6
   d6474:	4798      	blx	r3
     if (chunk>=0)
   d6476:	2800      	cmp	r0, #0
   d6478:	db01      	blt.n	d647e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d647a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d647c:	e7f3      	b.n	d6466 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d647e:	2c00      	cmp	r4, #0
   d6480:	bf08      	it	eq
   d6482:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6484:	4620      	mov	r0, r4
   d6486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6488 <_ZN5Print5printEPKc>:
   d6488:	b508      	push	{r3, lr}
   d648a:	f7fe fe3b 	bl	d5104 <_ZN5Print5writeEPKc>
   d648e:	bd08      	pop	{r3, pc}

000d6490 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6490:	6803      	ldr	r3, [r0, #0]
   d6492:	689b      	ldr	r3, [r3, #8]
   d6494:	4718      	bx	r3

000d6496 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6496:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6498:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d649a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d649c:	f7ff fff8 	bl	d6490 <_ZN5Print5printEc>
  n += print('\n');
   d64a0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d64a2:	4604      	mov	r4, r0
  n += print('\n');
   d64a4:	4628      	mov	r0, r5
   d64a6:	f7ff fff3 	bl	d6490 <_ZN5Print5printEc>
  return n;
}
   d64aa:	4420      	add	r0, r4
   d64ac:	bd38      	pop	{r3, r4, r5, pc}

000d64ae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d64ae:	b538      	push	{r3, r4, r5, lr}
   d64b0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64b2:	f7fe fe27 	bl	d5104 <_ZN5Print5writeEPKc>
   d64b6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d64b8:	4628      	mov	r0, r5
   d64ba:	f7ff ffec 	bl	d6496 <_ZN5Print7printlnEv>
  return n;
}
   d64be:	4420      	add	r0, r4
   d64c0:	bd38      	pop	{r3, r4, r5, pc}

000d64c2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d64c2:	b530      	push	{r4, r5, lr}
   d64c4:	b08b      	sub	sp, #44	; 0x2c
   d64c6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d64c8:	2100      	movs	r1, #0
   d64ca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d64ce:	2a01      	cmp	r2, #1
   d64d0:	bf98      	it	ls
   d64d2:	220a      	movls	r2, #10
   d64d4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d64d8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d64dc:	fb05 3312 	mls	r3, r5, r2, r3
   d64e0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d64e4:	2b09      	cmp	r3, #9
   d64e6:	bf94      	ite	ls
   d64e8:	3330      	addls	r3, #48	; 0x30
   d64ea:	3337      	addhi	r3, #55	; 0x37
   d64ec:	b2db      	uxtb	r3, r3
   d64ee:	4621      	mov	r1, r4
   d64f0:	f804 3901 	strb.w	r3, [r4], #-1
   d64f4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d64f6:	2d00      	cmp	r5, #0
   d64f8:	d1ee      	bne.n	d64d8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d64fa:	f7fe fe03 	bl	d5104 <_ZN5Print5writeEPKc>
}
   d64fe:	b00b      	add	sp, #44	; 0x2c
   d6500:	bd30      	pop	{r4, r5, pc}

000d6502 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6502:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6504:	b92a      	cbnz	r2, d6512 <_ZN5Print5printEmi+0x10>
   d6506:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6508:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d650c:	689b      	ldr	r3, [r3, #8]
   d650e:	b2c9      	uxtb	r1, r1
   d6510:	4718      	bx	r3
  else return printNumber(n, base);
   d6512:	b2d2      	uxtb	r2, r2
}
   d6514:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6518:	f7ff bfd3 	b.w	d64c2 <_ZN5Print11printNumberEmh>

000d651c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d651c:	f7ff bff1 	b.w	d6502 <_ZN5Print5printEmi>

000d6520 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6524:	4607      	mov	r7, r0
   d6526:	460e      	mov	r6, r1
  if (base == 0) {
   d6528:	4615      	mov	r5, r2
   d652a:	b92a      	cbnz	r2, d6538 <_ZN5Print5printEli+0x18>
    return write(n);
   d652c:	6803      	ldr	r3, [r0, #0]
   d652e:	b2c9      	uxtb	r1, r1
   d6530:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d6536:	4718      	bx	r3
  } else if (base == 10) {
   d6538:	2a0a      	cmp	r2, #10
   d653a:	d102      	bne.n	d6542 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d653c:	2900      	cmp	r1, #0
   d653e:	da01      	bge.n	d6544 <_ZN5Print5printEli+0x24>
   d6540:	e004      	b.n	d654c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6542:	b2d2      	uxtb	r2, r2
  }
}
   d6544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6548:	f7ff bfbb 	b.w	d64c2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d654c:	212d      	movs	r1, #45	; 0x2d
   d654e:	f7ff ff9f 	bl	d6490 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d6552:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6554:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d6556:	4271      	negs	r1, r6
   d6558:	4638      	mov	r0, r7
   d655a:	f7ff ffb2 	bl	d64c2 <_ZN5Print11printNumberEmh>
   d655e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6564 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6568:	ec57 6b10 	vmov	r6, r7, d0
   d656c:	4682      	mov	sl, r0
   d656e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6570:	ee10 2a10 	vmov	r2, s0
   d6574:	463b      	mov	r3, r7
   d6576:	ee10 0a10 	vmov	r0, s0
   d657a:	4639      	mov	r1, r7
   d657c:	f001 f9e8 	bl	d7950 <__aeabi_dcmpun>
   d6580:	b108      	cbz	r0, d6586 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6582:	4948      	ldr	r1, [pc, #288]	; (d66a4 <_ZN5Print10printFloatEdh+0x140>)
   d6584:	e012      	b.n	d65ac <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6586:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d658a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d658e:	4b46      	ldr	r3, [pc, #280]	; (d66a8 <_ZN5Print10printFloatEdh+0x144>)
   d6590:	4630      	mov	r0, r6
   d6592:	4649      	mov	r1, r9
   d6594:	f001 f9dc 	bl	d7950 <__aeabi_dcmpun>
   d6598:	b968      	cbnz	r0, d65b6 <_ZN5Print10printFloatEdh+0x52>
   d659a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d659e:	4b42      	ldr	r3, [pc, #264]	; (d66a8 <_ZN5Print10printFloatEdh+0x144>)
   d65a0:	4630      	mov	r0, r6
   d65a2:	4649      	mov	r1, r9
   d65a4:	f001 f9b6 	bl	d7914 <__aeabi_dcmple>
   d65a8:	b928      	cbnz	r0, d65b6 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d65aa:	4940      	ldr	r1, [pc, #256]	; (d66ac <_ZN5Print10printFloatEdh+0x148>)
   d65ac:	4650      	mov	r0, sl
   d65ae:	f7fe fda9 	bl	d5104 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d65b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d65b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d65ba:	4b3d      	ldr	r3, [pc, #244]	; (d66b0 <_ZN5Print10printFloatEdh+0x14c>)
   d65bc:	4630      	mov	r0, r6
   d65be:	4639      	mov	r1, r7
   d65c0:	f001 f9bc 	bl	d793c <__aeabi_dcmpgt>
   d65c4:	b108      	cbz	r0, d65ca <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d65c6:	493b      	ldr	r1, [pc, #236]	; (d66b4 <_ZN5Print10printFloatEdh+0x150>)
   d65c8:	e7f0      	b.n	d65ac <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d65ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d65ce:	4b3a      	ldr	r3, [pc, #232]	; (d66b8 <_ZN5Print10printFloatEdh+0x154>)
   d65d0:	4630      	mov	r0, r6
   d65d2:	4639      	mov	r1, r7
   d65d4:	f001 f994 	bl	d7900 <__aeabi_dcmplt>
   d65d8:	2800      	cmp	r0, #0
   d65da:	d1f4      	bne.n	d65c6 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d65dc:	2200      	movs	r2, #0
   d65de:	2300      	movs	r3, #0
   d65e0:	4630      	mov	r0, r6
   d65e2:	4639      	mov	r1, r7
   d65e4:	f001 f98c 	bl	d7900 <__aeabi_dcmplt>
   d65e8:	b140      	cbz	r0, d65fc <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d65ea:	212d      	movs	r1, #45	; 0x2d
   d65ec:	4650      	mov	r0, sl
   d65ee:	f7ff ff4f 	bl	d6490 <_ZN5Print5printEc>
     number = -number;
   d65f2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d65f6:	4604      	mov	r4, r0
     number = -number;
   d65f8:	461f      	mov	r7, r3
   d65fa:	e000      	b.n	d65fe <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d65fc:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d65fe:	492f      	ldr	r1, [pc, #188]	; (d66bc <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6600:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6604:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d6606:	fa5f f388 	uxtb.w	r3, r8
   d660a:	429d      	cmp	r5, r3
   d660c:	d906      	bls.n	d661c <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d660e:	2200      	movs	r2, #0
   d6610:	4b2b      	ldr	r3, [pc, #172]	; (d66c0 <_ZN5Print10printFloatEdh+0x15c>)
   d6612:	f001 f82d 	bl	d7670 <__aeabi_ddiv>
   d6616:	f108 0801 	add.w	r8, r8, #1
   d661a:	e7f4      	b.n	d6606 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d661c:	4632      	mov	r2, r6
   d661e:	463b      	mov	r3, r7
   d6620:	f000 fd4a 	bl	d70b8 <__adddf3>
   d6624:	460f      	mov	r7, r1
   d6626:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6628:	f001 f9d0 	bl	d79cc <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d662c:	220a      	movs	r2, #10
   d662e:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6630:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6632:	4650      	mov	r0, sl
   d6634:	f7ff ff45 	bl	d64c2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6638:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d663a:	b37d      	cbz	r5, d669c <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d663c:	4640      	mov	r0, r8
   d663e:	f000 fe77 	bl	d7330 <__aeabi_ui2d>
   d6642:	4602      	mov	r2, r0
   d6644:	460b      	mov	r3, r1
   d6646:	4630      	mov	r0, r6
   d6648:	4639      	mov	r1, r7
   d664a:	f000 fd33 	bl	d70b4 <__aeabi_dsub>
   d664e:	4606      	mov	r6, r0
   d6650:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6652:	4650      	mov	r0, sl
   d6654:	491b      	ldr	r1, [pc, #108]	; (d66c4 <_ZN5Print10printFloatEdh+0x160>)
   d6656:	f7fe fd55 	bl	d5104 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d665a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d665c:	4b18      	ldr	r3, [pc, #96]	; (d66c0 <_ZN5Print10printFloatEdh+0x15c>)
   d665e:	2200      	movs	r2, #0
   d6660:	4630      	mov	r0, r6
   d6662:	4639      	mov	r1, r7
   d6664:	f000 feda 	bl	d741c <__aeabi_dmul>
   d6668:	460f      	mov	r7, r1
   d666a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d666c:	f001 f986 	bl	d797c <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6670:	220a      	movs	r2, #10
   d6672:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d6674:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6676:	4650      	mov	r0, sl
   d6678:	f7ff ff52 	bl	d6520 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d667c:	4404      	add	r4, r0
    remainder -= toPrint;
   d667e:	4640      	mov	r0, r8
   d6680:	f000 fe66 	bl	d7350 <__aeabi_i2d>
   d6684:	4602      	mov	r2, r0
   d6686:	460b      	mov	r3, r1
   d6688:	4630      	mov	r0, r6
   d668a:	4639      	mov	r1, r7
   d668c:	f000 fd12 	bl	d70b4 <__aeabi_dsub>
   d6690:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6692:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d6696:	4606      	mov	r6, r0
   d6698:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d669a:	d1df      	bne.n	d665c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d669c:	4620      	mov	r0, r4
   d669e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d66a2:	bf00      	nop
   d66a4:	000d7e50 	.word	0x000d7e50
   d66a8:	7fefffff 	.word	0x7fefffff
   d66ac:	000d7e5a 	.word	0x000d7e5a
   d66b0:	41efffff 	.word	0x41efffff
   d66b4:	000d7e54 	.word	0x000d7e54
   d66b8:	c1efffff 	.word	0xc1efffff
   d66bc:	3fe00000 	.word	0x3fe00000
   d66c0:	40240000 	.word	0x40240000
   d66c4:	000d7e58 	.word	0x000d7e58

000d66c8 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d66c8:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d66ca:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d66cc:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d66ce:	f7ff ff49 	bl	d6564 <_ZN5Print10printFloatEdh>
   d66d2:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d66d4:	4628      	mov	r0, r5
   d66d6:	f7ff fede 	bl	d6496 <_ZN5Print7printlnEv>
  return n;
}
   d66da:	4420      	add	r0, r4
   d66dc:	bd38      	pop	{r3, r4, r5, pc}

000d66de <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d66de:	b40c      	push	{r2, r3}
   d66e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d66e4:	b087      	sub	sp, #28
   d66e6:	af00      	add	r7, sp, #0
   d66e8:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d66ec:	4605      	mov	r5, r0
   d66ee:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d66f2:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d66f4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d66f6:	4623      	mov	r3, r4
   d66f8:	464a      	mov	r2, r9
   d66fa:	2114      	movs	r1, #20
   d66fc:	1d38      	adds	r0, r7, #4
   d66fe:	f7ff fbf3 	bl	d5ee8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6702:	2813      	cmp	r0, #19
   d6704:	d805      	bhi.n	d6712 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6706:	1d39      	adds	r1, r7, #4
   d6708:	4628      	mov	r0, r5
   d670a:	f7fe fcfb 	bl	d5104 <_ZN5Print5writeEPKc>
   d670e:	4604      	mov	r4, r0
   d6710:	e013      	b.n	d673a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6712:	f100 0308 	add.w	r3, r0, #8
   d6716:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d671a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d671c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6720:	1c41      	adds	r1, r0, #1
   d6722:	4623      	mov	r3, r4
   d6724:	464a      	mov	r2, r9
   d6726:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6728:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d672a:	f7ff fbdd 	bl	d5ee8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d672e:	4669      	mov	r1, sp
   d6730:	4628      	mov	r0, r5
   d6732:	f7fe fce7 	bl	d5104 <_ZN5Print5writeEPKc>
   d6736:	4604      	mov	r4, r0
   d6738:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d673a:	b11e      	cbz	r6, d6744 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d673c:	4628      	mov	r0, r5
   d673e:	f7ff feaa 	bl	d6496 <_ZN5Print7printlnEv>
   d6742:	4404      	add	r4, r0
    return n;
}
   d6744:	4620      	mov	r0, r4
   d6746:	371c      	adds	r7, #28
   d6748:	46bd      	mov	sp, r7
   d674a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d674e:	b002      	add	sp, #8
   d6750:	4770      	bx	lr

000d6752 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6752:	b510      	push	{r4, lr}
   d6754:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6756:	f7ff fc27 	bl	d5fa8 <_ZNSt14_Function_baseD1Ev>
   d675a:	4620      	mov	r0, r4
   d675c:	bd10      	pop	{r4, pc}
	...

000d6760 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6760:	4803      	ldr	r0, [pc, #12]	; (d6770 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6762:	4a04      	ldr	r2, [pc, #16]	; (d6774 <_GLOBAL__sub_I_RGB+0x14>)
   d6764:	4904      	ldr	r1, [pc, #16]	; (d6778 <_GLOBAL__sub_I_RGB+0x18>)
   d6766:	2300      	movs	r3, #0
   d6768:	6083      	str	r3, [r0, #8]
   d676a:	f000 bb4f 	b.w	d6e0c <__aeabi_atexit>
   d676e:	bf00      	nop
   d6770:	2003e6bc 	.word	0x2003e6bc
   d6774:	2003dffc 	.word	0x2003dffc
   d6778:	000d6753 	.word	0x000d6753

000d677c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d677c:	4770      	bx	lr

000d677e <_ZN8SPIClassD0Ev>:
   d677e:	b510      	push	{r4, lr}
   d6780:	2110      	movs	r1, #16
   d6782:	4604      	mov	r4, r0
   d6784:	f000 fb47 	bl	d6e16 <_ZdlPvj>
   d6788:	4620      	mov	r0, r4
   d678a:	bd10      	pop	{r4, pc}

000d678c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d678c:	b570      	push	{r4, r5, r6, lr}
   d678e:	4b08      	ldr	r3, [pc, #32]	; (d67b0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6790:	6003      	str	r3, [r0, #0]
   d6792:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6794:	2500      	movs	r5, #0
   d6796:	460e      	mov	r6, r1
   d6798:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d679c:	f7ff f970 	bl	d5a80 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d67a0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d67a2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d67a4:	f7ff fa44 	bl	d5c30 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d67a8:	60a5      	str	r5, [r4, #8]
}
   d67aa:	4620      	mov	r0, r4
   d67ac:	bd70      	pop	{r4, r5, r6, pc}
   d67ae:	bf00      	nop
   d67b0:	000d7e68 	.word	0x000d7e68

000d67b4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d67b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d67b8:	7900      	ldrb	r0, [r0, #4]
   d67ba:	f7ff ba29 	b.w	d5c10 <HAL_SPI_Begin>

000d67be <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
   d67be:	68c0      	ldr	r0, [r0, #12]
   d67c0:	f7ff b96e 	b.w	d5aa0 <os_mutex_unlock>

000d67c4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d67c4:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d67c6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d67c8:	6018      	str	r0, [r3, #0]
   d67ca:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d67cc:	6818      	ldr	r0, [r3, #0]
   d67ce:	4288      	cmp	r0, r1
   d67d0:	b2e5      	uxtb	r5, r4
   d67d2:	d906      	bls.n	d67e2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d67d4:	3401      	adds	r4, #1
   d67d6:	2c08      	cmp	r4, #8
   d67d8:	d002      	beq.n	d67e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d67da:	0840      	lsrs	r0, r0, #1
   d67dc:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d67de:	e7f5      	b.n	d67cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d67e0:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d67e2:	4b02      	ldr	r3, [pc, #8]	; (d67ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d67e4:	5d5b      	ldrb	r3, [r3, r5]
   d67e6:	7013      	strb	r3, [r2, #0]
   d67e8:	bd30      	pop	{r4, r5, pc}
   d67ea:	bf00      	nop
   d67ec:	000d7e70 	.word	0x000d7e70

000d67f0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d67f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d67f4:	4680      	mov	r8, r0
   d67f6:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
   d67f8:	68c0      	ldr	r0, [r0, #12]
   d67fa:	460f      	mov	r7, r1
   d67fc:	f7ff f948 	bl	d5a90 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
   d6800:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d6804:	2214      	movs	r2, #20
   d6806:	2100      	movs	r1, #0
   d6808:	a809      	add	r0, sp, #36	; 0x24
   d680a:	f001 f977 	bl	d7afc <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d680e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d6810:	4620      	mov	r0, r4
   d6812:	2200      	movs	r2, #0
   d6814:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d6816:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
   d681a:	f7ff fa19 	bl	d5c50 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
   d681e:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6822:	b14c      	cbz	r4, d6838 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
   d6824:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6828:	b92d      	cbnz	r5, d6836 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d682a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d682c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6830:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6834:	e003      	b.n	d683e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d6836:	2400      	movs	r4, #0
   d6838:	46a1      	mov	r9, r4
   d683a:	4626      	mov	r6, r4
   d683c:	2501      	movs	r5, #1
   d683e:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6840:	b10d      	cbz	r5, d6846 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
   d6842:	2b00      	cmp	r3, #0
   d6844:	d140      	bne.n	d68c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
   d6846:	429d      	cmp	r5, r3
   d6848:	d10b      	bne.n	d6862 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
   d684a:	68ba      	ldr	r2, [r7, #8]
   d684c:	42b2      	cmp	r2, r6
   d684e:	d108      	bne.n	d6862 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6850:	f88d 9020 	strb.w	r9, [sp, #32]
   d6854:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6858:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d685c:	89ba      	ldrh	r2, [r7, #12]
   d685e:	4291      	cmp	r1, r2
   d6860:	d032      	beq.n	d68c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
   d6862:	bb23      	cbnz	r3, d68ae <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
   d6864:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
   d6868:	f10d 020f 	add.w	r2, sp, #15
   d686c:	ab04      	add	r3, sp, #16
   d686e:	68b9      	ldr	r1, [r7, #8]
   d6870:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6872:	f7ff ffa7 	bl	d67c4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6876:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6878:	b105      	cbz	r5, d687c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
   d687a:	bb13      	cbnz	r3, d68c2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d687c:	42ab      	cmp	r3, r5
   d687e:	d009      	beq.n	d6894 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
   d6880:	2100      	movs	r1, #0
   d6882:	7b3b      	ldrb	r3, [r7, #12]
   d6884:	9101      	str	r1, [sp, #4]
   d6886:	7b7c      	ldrb	r4, [r7, #13]
   d6888:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d688c:	f898 0004 	ldrb.w	r0, [r8, #4]
   d6890:	9400      	str	r4, [sp, #0]
   d6892:	e013      	b.n	d68bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
   d6894:	68bb      	ldr	r3, [r7, #8]
   d6896:	42b3      	cmp	r3, r6
   d6898:	d3f2      	bcc.n	d6880 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d689a:	f88d 9020 	strb.w	r9, [sp, #32]
   d689e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d68a2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d68a6:	89bb      	ldrh	r3, [r7, #12]
   d68a8:	429a      	cmp	r2, r3
   d68aa:	d1e9      	bne.n	d6880 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
   d68ac:	e009      	b.n	d68c2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
   d68ae:	2300      	movs	r3, #0
   d68b0:	f898 0004 	ldrb.w	r0, [r8, #4]
   d68b4:	9301      	str	r3, [sp, #4]
   d68b6:	9300      	str	r3, [sp, #0]
   d68b8:	461a      	mov	r2, r3
   d68ba:	2101      	movs	r1, #1
   d68bc:	f7ff f9e0 	bl	d5c80 <HAL_SPI_Set_Settings>
   d68c0:	e002      	b.n	d68c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
   d68c2:	9b04      	ldr	r3, [sp, #16]
   d68c4:	42b3      	cmp	r3, r6
   d68c6:	d1db      	bne.n	d6880 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
   d68c8:	2000      	movs	r0, #0
   d68ca:	b00f      	add	sp, #60	; 0x3c
   d68cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d68d0 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d68d0:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d68d2:	7900      	ldrb	r0, [r0, #4]
   d68d4:	f7ff f9a4 	bl	d5c20 <HAL_SPI_Send_Receive_Data>
}
   d68d8:	b2c0      	uxtb	r0, r0
   d68da:	bd08      	pop	{r3, pc}

000d68dc <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d68dc:	b530      	push	{r4, r5, lr}
   d68de:	b087      	sub	sp, #28
   d68e0:	4604      	mov	r4, r0
   d68e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d68e4:	7900      	ldrb	r0, [r0, #4]
   d68e6:	9500      	str	r5, [sp, #0]
   d68e8:	f7ff f9ba 	bl	d5c60 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
   d68ec:	b93d      	cbnz	r5, d68fe <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d68ee:	a902      	add	r1, sp, #8
   d68f0:	7920      	ldrb	r0, [r4, #4]
   d68f2:	f7ff f9bd 	bl	d5c70 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
   d68f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d68fa:	07db      	lsls	r3, r3, #31
   d68fc:	d4f7      	bmi.n	d68ee <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
   d68fe:	b007      	add	sp, #28
   d6900:	bd30      	pop	{r4, r5, pc}

000d6902 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6902:	7900      	ldrb	r0, [r0, #4]
   d6904:	f7ff b99c 	b.w	d5c40 <HAL_SPI_Is_Enabled>

000d6908 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6908:	4b04      	ldr	r3, [pc, #16]	; (d691c <_GLOBAL__sub_I_System+0x14>)
   d690a:	2000      	movs	r0, #0
   d690c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6910:	7018      	strb	r0, [r3, #0]
   d6912:	8058      	strh	r0, [r3, #2]
   d6914:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6916:	f7ff ba3b 	b.w	d5d90 <set_system_mode>
   d691a:	bf00      	nop
   d691c:	2003e6cc 	.word	0x2003e6cc

000d6920 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d6920:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d6922:	2000      	movs	r0, #0
   d6924:	f7ff fa70 	bl	d5e08 <spark_sync_time_pending>
   d6928:	b128      	cbz	r0, d6936 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d692a:	f7ff fa65 	bl	d5df8 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d692e:	f080 0001 	eor.w	r0, r0, #1
   d6932:	b2c0      	uxtb	r0, r0
   d6934:	bd08      	pop	{r3, pc}
   d6936:	2001      	movs	r0, #1
    }
   d6938:	bd08      	pop	{r3, pc}

000d693a <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d693a:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d693c:	2000      	movs	r0, #0
   d693e:	f7ff f8df 	bl	d5b00 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d6942:	4604      	mov	r4, r0
   d6944:	b968      	cbnz	r0, d6962 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6946:	f7ff fa1b 	bl	d5d80 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d694a:	2801      	cmp	r0, #1
   d694c:	d10b      	bne.n	d6966 <_ZN9TimeClass7isValidEv+0x2c>
   d694e:	4620      	mov	r0, r4
   d6950:	f7ff fa2e 	bl	d5db0 <system_thread_get_state>
   d6954:	b938      	cbnz	r0, d6966 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d6956:	f7ff ffe3 	bl	d6920 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d695a:	b930      	cbnz	r0, d696a <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d695c:	f7ff fa44 	bl	d5de8 <spark_process>
   d6960:	e7f9      	b.n	d6956 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d6962:	2001      	movs	r0, #1
   d6964:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d6966:	2000      	movs	r0, #0
   d6968:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d696a:	f7ff ffd9 	bl	d6920 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d696e:	2000      	movs	r0, #0
   d6970:	f7ff f8c6 	bl	d5b00 <HAL_RTC_Time_Is_Valid>
   d6974:	3000      	adds	r0, #0
   d6976:	bf18      	it	ne
   d6978:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d697a:	bd10      	pop	{r4, pc}

000d697c <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d697c:	b508      	push	{r3, lr}
    (void)isValid();
   d697e:	f7ff ffdc 	bl	d693a <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d6982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d6986:	f7ff b8b3 	b.w	d5af0 <HAL_RTC_Get_UnixTime>
	...

000d698c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d698c:	4b02      	ldr	r3, [pc, #8]	; (d6998 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d698e:	681a      	ldr	r2, [r3, #0]
   d6990:	4b02      	ldr	r3, [pc, #8]	; (d699c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6992:	601a      	str	r2, [r3, #0]
   d6994:	4770      	bx	lr
   d6996:	bf00      	nop
   d6998:	2003df94 	.word	0x2003df94
   d699c:	2003e6d4 	.word	0x2003e6d4

000d69a0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d69a0:	4770      	bx	lr

000d69a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d69a2:	7441      	strb	r1, [r0, #17]
   d69a4:	4770      	bx	lr

000d69a6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d69a6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d69a8:	7c00      	ldrb	r0, [r0, #16]
   d69aa:	f7ff f9a9 	bl	d5d00 <HAL_USART_Available_Data_For_Write>
}
   d69ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69b2:	bd08      	pop	{r3, pc}

000d69b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d69b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d69b6:	7c00      	ldrb	r0, [r0, #16]
   d69b8:	f7ff f97a 	bl	d5cb0 <HAL_USART_Available_Data>
}
   d69bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69c0:	bd08      	pop	{r3, pc}

000d69c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d69c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d69c4:	7c00      	ldrb	r0, [r0, #16]
   d69c6:	f7ff f983 	bl	d5cd0 <HAL_USART_Peek_Data>
}
   d69ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d69ce:	bf28      	it	cs
   d69d0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d69d4:	bd08      	pop	{r3, pc}

000d69d6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d69d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d69d8:	7c00      	ldrb	r0, [r0, #16]
   d69da:	f7ff f971 	bl	d5cc0 <HAL_USART_Read_Data>
}
   d69de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d69e2:	bf28      	it	cs
   d69e4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d69e8:	bd08      	pop	{r3, pc}

000d69ea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d69ea:	7c00      	ldrb	r0, [r0, #16]
   d69ec:	f7ff b978 	b.w	d5ce0 <HAL_USART_Flush_Data>

000d69f0 <_ZN11USARTSerialD0Ev>:
   d69f0:	b510      	push	{r4, lr}
   d69f2:	2114      	movs	r1, #20
   d69f4:	4604      	mov	r4, r0
   d69f6:	f000 fa0e 	bl	d6e16 <_ZdlPvj>
   d69fa:	4620      	mov	r0, r4
   d69fc:	bd10      	pop	{r4, pc}

000d69fe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d69fe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6a00:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6a02:	4604      	mov	r4, r0
   d6a04:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6a06:	b925      	cbnz	r5, d6a12 <_ZN11USARTSerial5writeEh+0x14>
   d6a08:	7c00      	ldrb	r0, [r0, #16]
   d6a0a:	f7ff f979 	bl	d5d00 <HAL_USART_Available_Data_For_Write>
   d6a0e:	2800      	cmp	r0, #0
   d6a10:	dd05      	ble.n	d6a1e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6a12:	4631      	mov	r1, r6
   d6a14:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6a1a:	f7ff b941 	b.w	d5ca0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6a1e:	4628      	mov	r0, r5
   d6a20:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6a24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6a24:	b510      	push	{r4, lr}
   d6a26:	4604      	mov	r4, r0
   d6a28:	4608      	mov	r0, r1
   d6a2a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6a2c:	2200      	movs	r2, #0
   d6a2e:	6062      	str	r2, [r4, #4]
   d6a30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6a34:	60a2      	str	r2, [r4, #8]
   d6a36:	4a05      	ldr	r2, [pc, #20]	; (d6a4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6a38:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6a3a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6a3c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6a3e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6a40:	461a      	mov	r2, r3
   d6a42:	f7ff f925 	bl	d5c90 <HAL_USART_Init>
}
   d6a46:	4620      	mov	r0, r4
   d6a48:	bd10      	pop	{r4, pc}
   d6a4a:	bf00      	nop
   d6a4c:	000d7eac 	.word	0x000d7eac

000d6a50 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6a50:	7c00      	ldrb	r0, [r0, #16]
   d6a52:	f7ff b94d 	b.w	d5cf0 <HAL_USART_Is_Enabled>
	...

000d6a58 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d6a5a:	4c19      	ldr	r4, [pc, #100]	; (d6ac0 <_Z22__fetch_global_Serial1v+0x68>)
   d6a5c:	6825      	ldr	r5, [r4, #0]
   d6a5e:	b94d      	cbnz	r5, d6a74 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d6a60:	2084      	movs	r0, #132	; 0x84
   d6a62:	f7fd fb1a 	bl	d409a <_Znwj>
   d6a66:	4606      	mov	r6, r0
   d6a68:	b118      	cbz	r0, d6a72 <_Z22__fetch_global_Serial1v+0x1a>
   d6a6a:	2284      	movs	r2, #132	; 0x84
   d6a6c:	4629      	mov	r1, r5
   d6a6e:	f001 f845 	bl	d7afc <memset>
   d6a72:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d6a74:	4d13      	ldr	r5, [pc, #76]	; (d6ac4 <_Z22__fetch_global_Serial1v+0x6c>)
   d6a76:	682e      	ldr	r6, [r5, #0]
   d6a78:	b94e      	cbnz	r6, d6a8e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d6a7a:	2084      	movs	r0, #132	; 0x84
   d6a7c:	f7fd fb0d 	bl	d409a <_Znwj>
   d6a80:	4607      	mov	r7, r0
   d6a82:	b118      	cbz	r0, d6a8c <_Z22__fetch_global_Serial1v+0x34>
   d6a84:	2284      	movs	r2, #132	; 0x84
   d6a86:	4631      	mov	r1, r6
   d6a88:	f001 f838 	bl	d7afc <memset>
   d6a8c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d6a8e:	4f0e      	ldr	r7, [pc, #56]	; (d6ac8 <_Z22__fetch_global_Serial1v+0x70>)
   d6a90:	6839      	ldr	r1, [r7, #0]
   d6a92:	f011 0601 	ands.w	r6, r1, #1
   d6a96:	d111      	bne.n	d6abc <_Z22__fetch_global_Serial1v+0x64>
   d6a98:	4638      	mov	r0, r7
   d6a9a:	f7fd fb04 	bl	d40a6 <__cxa_guard_acquire>
   d6a9e:	b168      	cbz	r0, d6abc <_Z22__fetch_global_Serial1v+0x64>
   d6aa0:	6822      	ldr	r2, [r4, #0]
   d6aa2:	682b      	ldr	r3, [r5, #0]
   d6aa4:	4809      	ldr	r0, [pc, #36]	; (d6acc <_Z22__fetch_global_Serial1v+0x74>)
   d6aa6:	4631      	mov	r1, r6
   d6aa8:	f7ff ffbc 	bl	d6a24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6aac:	4638      	mov	r0, r7
   d6aae:	f7fd faff 	bl	d40b0 <__cxa_guard_release>
   d6ab2:	4a07      	ldr	r2, [pc, #28]	; (d6ad0 <_Z22__fetch_global_Serial1v+0x78>)
   d6ab4:	4907      	ldr	r1, [pc, #28]	; (d6ad4 <_Z22__fetch_global_Serial1v+0x7c>)
   d6ab6:	4805      	ldr	r0, [pc, #20]	; (d6acc <_Z22__fetch_global_Serial1v+0x74>)
   d6ab8:	f000 f9a8 	bl	d6e0c <__aeabi_atexit>
#endif
	return serial1;
}
   d6abc:	4803      	ldr	r0, [pc, #12]	; (d6acc <_Z22__fetch_global_Serial1v+0x74>)
   d6abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6ac0:	2003e6f4 	.word	0x2003e6f4
   d6ac4:	2003e6ec 	.word	0x2003e6ec
   d6ac8:	2003e6f0 	.word	0x2003e6f0
   d6acc:	2003e6d8 	.word	0x2003e6d8
   d6ad0:	2003dffc 	.word	0x2003dffc
   d6ad4:	000d69a1 	.word	0x000d69a1

000d6ad8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6ad8:	7441      	strb	r1, [r0, #17]
   d6ada:	4770      	bx	lr

000d6adc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6adc:	4770      	bx	lr

000d6ade <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6ade:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6ae0:	2100      	movs	r1, #0
   d6ae2:	7c00      	ldrb	r0, [r0, #16]
   d6ae4:	f7ff f934 	bl	d5d50 <HAL_USB_USART_Receive_Data>
}
   d6ae8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6aec:	bf28      	it	cs
   d6aee:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6af2:	bd08      	pop	{r3, pc}

000d6af4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6af4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6af6:	2101      	movs	r1, #1
   d6af8:	7c00      	ldrb	r0, [r0, #16]
   d6afa:	f7ff f929 	bl	d5d50 <HAL_USB_USART_Receive_Data>
}
   d6afe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b02:	bf28      	it	cs
   d6b04:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6b08:	bd08      	pop	{r3, pc}

000d6b0a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6b0a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6b0c:	7c00      	ldrb	r0, [r0, #16]
   d6b0e:	f7ff f917 	bl	d5d40 <HAL_USB_USART_Available_Data_For_Write>
}
   d6b12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b16:	bd08      	pop	{r3, pc}

000d6b18 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6b18:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6b1a:	7c00      	ldrb	r0, [r0, #16]
   d6b1c:	f7ff f908 	bl	d5d30 <HAL_USB_USART_Available_Data>
}
   d6b20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b24:	bd08      	pop	{r3, pc}

000d6b26 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6b26:	7c00      	ldrb	r0, [r0, #16]
   d6b28:	f7ff b922 	b.w	d5d70 <HAL_USB_USART_Flush_Data>

000d6b2c <_ZN9USBSerialD0Ev>:
   d6b2c:	b510      	push	{r4, lr}
   d6b2e:	2114      	movs	r1, #20
   d6b30:	4604      	mov	r4, r0
   d6b32:	f000 f970 	bl	d6e16 <_ZdlPvj>
   d6b36:	4620      	mov	r0, r4
   d6b38:	bd10      	pop	{r4, pc}

000d6b3a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6b3a:	b538      	push	{r3, r4, r5, lr}
   d6b3c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b3e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6b40:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b42:	f7ff f8fd 	bl	d5d40 <HAL_USB_USART_Available_Data_For_Write>
   d6b46:	2800      	cmp	r0, #0
   d6b48:	dc01      	bgt.n	d6b4e <_ZN9USBSerial5writeEh+0x14>
   d6b4a:	7c60      	ldrb	r0, [r4, #17]
   d6b4c:	b128      	cbz	r0, d6b5a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6b4e:	4629      	mov	r1, r5
   d6b50:	7c20      	ldrb	r0, [r4, #16]
   d6b52:	f7ff f905 	bl	d5d60 <HAL_USB_USART_Send_Data>
   d6b56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6b5a:	bd38      	pop	{r3, r4, r5, pc}

000d6b5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6b5c:	b510      	push	{r4, lr}
   d6b5e:	4604      	mov	r4, r0
   d6b60:	2300      	movs	r3, #0
   d6b62:	6063      	str	r3, [r4, #4]
   d6b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6b68:	60a3      	str	r3, [r4, #8]
   d6b6a:	4b05      	ldr	r3, [pc, #20]	; (d6b80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6b6c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6b6e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6b70:	4608      	mov	r0, r1
{
  _serial = serial;
   d6b72:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6b74:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6b76:	4611      	mov	r1, r2
   d6b78:	f7ff f8ca 	bl	d5d10 <HAL_USB_USART_Init>
}
   d6b7c:	4620      	mov	r0, r4
   d6b7e:	bd10      	pop	{r4, pc}
   d6b80:	000d7edc 	.word	0x000d7edc

000d6b84 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6b84:	2200      	movs	r2, #0
   d6b86:	7c00      	ldrb	r0, [r0, #16]
   d6b88:	f7ff b8ca 	b.w	d5d20 <HAL_USB_USART_Begin>

000d6b8c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6b8c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6b8e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6b90:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6b92:	2100      	movs	r1, #0
   d6b94:	f000 ffb2 	bl	d7afc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6b98:	4620      	mov	r0, r4
   d6b9a:	bd10      	pop	{r4, pc}

000d6b9c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6b9c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6b9e:	4d0e      	ldr	r5, [pc, #56]	; (d6bd8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6ba0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6ba2:	a801      	add	r0, sp, #4
   d6ba4:	f7ff fff2 	bl	d6b8c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6ba8:	6829      	ldr	r1, [r5, #0]
   d6baa:	f011 0401 	ands.w	r4, r1, #1
   d6bae:	d110      	bne.n	d6bd2 <_Z16_fetch_usbserialv+0x36>
   d6bb0:	4628      	mov	r0, r5
   d6bb2:	f7fd fa78 	bl	d40a6 <__cxa_guard_acquire>
   d6bb6:	b160      	cbz	r0, d6bd2 <_Z16_fetch_usbserialv+0x36>
   d6bb8:	aa01      	add	r2, sp, #4
   d6bba:	4621      	mov	r1, r4
   d6bbc:	4807      	ldr	r0, [pc, #28]	; (d6bdc <_Z16_fetch_usbserialv+0x40>)
   d6bbe:	f7ff ffcd 	bl	d6b5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6bc2:	4628      	mov	r0, r5
   d6bc4:	f7fd fa74 	bl	d40b0 <__cxa_guard_release>
   d6bc8:	4a05      	ldr	r2, [pc, #20]	; (d6be0 <_Z16_fetch_usbserialv+0x44>)
   d6bca:	4906      	ldr	r1, [pc, #24]	; (d6be4 <_Z16_fetch_usbserialv+0x48>)
   d6bcc:	4803      	ldr	r0, [pc, #12]	; (d6bdc <_Z16_fetch_usbserialv+0x40>)
   d6bce:	f000 f91d 	bl	d6e0c <__aeabi_atexit>
	return _usbserial;
}
   d6bd2:	4802      	ldr	r0, [pc, #8]	; (d6bdc <_Z16_fetch_usbserialv+0x40>)
   d6bd4:	b007      	add	sp, #28
   d6bd6:	bd30      	pop	{r4, r5, pc}
   d6bd8:	2003e6f8 	.word	0x2003e6f8
   d6bdc:	2003e6fc 	.word	0x2003e6fc
   d6be0:	2003dffc 	.word	0x2003dffc
   d6be4:	000d6add 	.word	0x000d6add

000d6be8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6be8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6bea:	4b0c      	ldr	r3, [pc, #48]	; (d6c1c <serialEventRun+0x34>)
   d6bec:	b133      	cbz	r3, d6bfc <serialEventRun+0x14>
   d6bee:	f7ff ffd5 	bl	d6b9c <_Z16_fetch_usbserialv>
   d6bf2:	6803      	ldr	r3, [r0, #0]
   d6bf4:	691b      	ldr	r3, [r3, #16]
   d6bf6:	4798      	blx	r3
   d6bf8:	2800      	cmp	r0, #0
   d6bfa:	dc09      	bgt.n	d6c10 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6bfc:	4b08      	ldr	r3, [pc, #32]	; (d6c20 <serialEventRun+0x38>)
   d6bfe:	b163      	cbz	r3, d6c1a <serialEventRun+0x32>
   d6c00:	f7ff ff2a 	bl	d6a58 <_Z22__fetch_global_Serial1v>
   d6c04:	6803      	ldr	r3, [r0, #0]
   d6c06:	691b      	ldr	r3, [r3, #16]
   d6c08:	4798      	blx	r3
   d6c0a:	2800      	cmp	r0, #0
   d6c0c:	dc03      	bgt.n	d6c16 <serialEventRun+0x2e>
   d6c0e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6c10:	f3af 8000 	nop.w
   d6c14:	e7f2      	b.n	d6bfc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6c16:	f3af 8000 	nop.w
   d6c1a:	bd08      	pop	{r3, pc}
	...

000d6c24 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6c24:	b508      	push	{r3, lr}
	serialEventRun();
   d6c26:	f7ff ffdf 	bl	d6be8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6c2a:	f7fe ff59 	bl	d5ae0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6c2e:	4b01      	ldr	r3, [pc, #4]	; (d6c34 <_post_loop+0x10>)
   d6c30:	6018      	str	r0, [r3, #0]
   d6c32:	bd08      	pop	{r3, pc}
   d6c34:	2003e714 	.word	0x2003e714

000d6c38 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6c38:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6c3a:	2300      	movs	r3, #0
   d6c3c:	9300      	str	r3, [sp, #0]
   d6c3e:	461a      	mov	r2, r3
   d6c40:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6c44:	f7ff f8c6 	bl	d5dd4 <system_ctrl_set_result>
}
   d6c48:	b003      	add	sp, #12
   d6c4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6c50 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6c50:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6c52:	8843      	ldrh	r3, [r0, #2]
   d6c54:	2b0a      	cmp	r3, #10
   d6c56:	d008      	beq.n	d6c6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6c58:	2b50      	cmp	r3, #80	; 0x50
   d6c5a:	d109      	bne.n	d6c70 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6c5c:	4b09      	ldr	r3, [pc, #36]	; (d6c84 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6c5e:	681b      	ldr	r3, [r3, #0]
   d6c60:	b13b      	cbz	r3, d6c72 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6c62:	b003      	add	sp, #12
   d6c64:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6c68:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6c6a:	f7ff ffe5 	bl	d6c38 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6c6e:	e006      	b.n	d6c7e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6c70:	2300      	movs	r3, #0
   d6c72:	9300      	str	r3, [sp, #0]
   d6c74:	461a      	mov	r2, r3
   d6c76:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6c7a:	f7ff f8ab 	bl	d5dd4 <system_ctrl_set_result>
        break;
    }
}
   d6c7e:	b003      	add	sp, #12
   d6c80:	f85d fb04 	ldr.w	pc, [sp], #4
   d6c84:	2003e710 	.word	0x2003e710

000d6c88 <module_user_init_hook>:

void module_user_init_hook()
{
   d6c88:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6c8a:	f7fe ff19 	bl	d5ac0 <HAL_RNG_GetRandomNumber>
   d6c8e:	4604      	mov	r4, r0
    srand(seed);
   d6c90:	f000 ff3c 	bl	d7b0c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6c94:	4b07      	ldr	r3, [pc, #28]	; (d6cb4 <module_user_init_hook+0x2c>)
   d6c96:	b113      	cbz	r3, d6c9e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6c98:	4620      	mov	r0, r4
   d6c9a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6c9e:	2100      	movs	r1, #0
   d6ca0:	4804      	ldr	r0, [pc, #16]	; (d6cb4 <module_user_init_hook+0x2c>)
   d6ca2:	f7ff f8b9 	bl	d5e18 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6ca6:	2100      	movs	r1, #0
   d6ca8:	4803      	ldr	r0, [pc, #12]	; (d6cb8 <module_user_init_hook+0x30>)
}
   d6caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6cae:	f7ff b887 	b.w	d5dc0 <system_ctrl_set_app_request_handler>
   d6cb2:	bf00      	nop
   d6cb4:	00000000 	.word	0x00000000
   d6cb8:	000d6c51 	.word	0x000d6c51

000d6cbc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6cbc:	b510      	push	{r4, lr}
   d6cbe:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6cc0:	480f      	ldr	r0, [pc, #60]	; (d6d00 <pinAvailable+0x44>)
   d6cc2:	f7ff fe1e 	bl	d6902 <_ZN8SPIClass9isEnabledEv>
   d6cc6:	b128      	cbz	r0, d6cd4 <pinAvailable+0x18>
   d6cc8:	f1a4 030b 	sub.w	r3, r4, #11
   d6ccc:	2b02      	cmp	r3, #2
   d6cce:	d801      	bhi.n	d6cd4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6cd0:	2000      	movs	r0, #0
   d6cd2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6cd4:	f000 f858 	bl	d6d88 <_Z19__fetch_global_Wirev>
   d6cd8:	f7ff f9ec 	bl	d60b4 <_ZN7TwoWire9isEnabledEv>
   d6cdc:	b108      	cbz	r0, d6ce2 <pinAvailable+0x26>
   d6cde:	2c01      	cmp	r4, #1
   d6ce0:	d9f6      	bls.n	d6cd0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6ce2:	f7ff feb9 	bl	d6a58 <_Z22__fetch_global_Serial1v>
   d6ce6:	f7ff feb3 	bl	d6a50 <_ZN11USARTSerial9isEnabledEv>
   d6cea:	b118      	cbz	r0, d6cf4 <pinAvailable+0x38>
   d6cec:	f1a4 0309 	sub.w	r3, r4, #9
   d6cf0:	2b01      	cmp	r3, #1
   d6cf2:	d9ed      	bls.n	d6cd0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6cf4:	2c23      	cmp	r4, #35	; 0x23
   d6cf6:	bf8c      	ite	hi
   d6cf8:	2000      	movhi	r0, #0
   d6cfa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6cfc:	bd10      	pop	{r4, pc}
   d6cfe:	bf00      	nop
   d6d00:	2003e730 	.word	0x2003e730

000d6d04 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6d04:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6d06:	b538      	push	{r3, r4, r5, lr}
   d6d08:	4604      	mov	r4, r0
   d6d0a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6d0c:	d80a      	bhi.n	d6d24 <pinMode+0x20>
   d6d0e:	29ff      	cmp	r1, #255	; 0xff
   d6d10:	d008      	beq.n	d6d24 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6d12:	f7ff ffd3 	bl	d6cbc <pinAvailable>
   d6d16:	b128      	cbz	r0, d6d24 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6d18:	4629      	mov	r1, r5
   d6d1a:	4620      	mov	r0, r4
}
   d6d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6d20:	f7fe bf06 	b.w	d5b30 <HAL_Pin_Mode>
   d6d24:	bd38      	pop	{r3, r4, r5, pc}

000d6d26 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6d26:	b538      	push	{r3, r4, r5, lr}
   d6d28:	4604      	mov	r4, r0
   d6d2a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6d2c:	f7fe ff08 	bl	d5b40 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6d30:	28ff      	cmp	r0, #255	; 0xff
   d6d32:	d010      	beq.n	d6d56 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6d34:	2806      	cmp	r0, #6
   d6d36:	d804      	bhi.n	d6d42 <digitalWrite+0x1c>
   d6d38:	234d      	movs	r3, #77	; 0x4d
   d6d3a:	fa23 f000 	lsr.w	r0, r3, r0
   d6d3e:	07c3      	lsls	r3, r0, #31
   d6d40:	d409      	bmi.n	d6d56 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6d42:	4620      	mov	r0, r4
   d6d44:	f7ff ffba 	bl	d6cbc <pinAvailable>
   d6d48:	b128      	cbz	r0, d6d56 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6d4a:	4629      	mov	r1, r5
   d6d4c:	4620      	mov	r0, r4
}
   d6d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6d52:	f7fe befd 	b.w	d5b50 <HAL_GPIO_Write>
   d6d56:	bd38      	pop	{r3, r4, r5, pc}

000d6d58 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6d58:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6d5a:	b510      	push	{r4, lr}
   d6d5c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6d5e:	bf9c      	itt	ls
   d6d60:	340e      	addls	r4, #14
   d6d62:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6d64:	4620      	mov	r0, r4
   d6d66:	f7ff ffa9 	bl	d6cbc <pinAvailable>
   d6d6a:	b150      	cbz	r0, d6d82 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6d6c:	2103      	movs	r1, #3
   d6d6e:	4620      	mov	r0, r4
   d6d70:	f7fe fed6 	bl	d5b20 <HAL_Validate_Pin_Function>
   d6d74:	2803      	cmp	r0, #3
   d6d76:	d104      	bne.n	d6d82 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6d78:	4620      	mov	r0, r4
}
   d6d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6d7e:	f7fe beef 	b.w	d5b60 <HAL_ADC_Read>
}
   d6d82:	2000      	movs	r0, #0
   d6d84:	bd10      	pop	{r4, pc}
	...

000d6d88 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6d88:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6d8a:	4d0b      	ldr	r5, [pc, #44]	; (d6db8 <_Z19__fetch_global_Wirev+0x30>)
   d6d8c:	6829      	ldr	r1, [r5, #0]
   d6d8e:	f011 0401 	ands.w	r4, r1, #1
   d6d92:	d10f      	bne.n	d6db4 <_Z19__fetch_global_Wirev+0x2c>
   d6d94:	4628      	mov	r0, r5
   d6d96:	f7fd f986 	bl	d40a6 <__cxa_guard_acquire>
   d6d9a:	b158      	cbz	r0, d6db4 <_Z19__fetch_global_Wirev+0x2c>
   d6d9c:	4621      	mov	r1, r4
   d6d9e:	4807      	ldr	r0, [pc, #28]	; (d6dbc <_Z19__fetch_global_Wirev+0x34>)
   d6da0:	f7ff f976 	bl	d6090 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6da4:	4628      	mov	r0, r5
   d6da6:	f7fd f983 	bl	d40b0 <__cxa_guard_release>
   d6daa:	4a05      	ldr	r2, [pc, #20]	; (d6dc0 <_Z19__fetch_global_Wirev+0x38>)
   d6dac:	4905      	ldr	r1, [pc, #20]	; (d6dc4 <_Z19__fetch_global_Wirev+0x3c>)
   d6dae:	4803      	ldr	r0, [pc, #12]	; (d6dbc <_Z19__fetch_global_Wirev+0x34>)
   d6db0:	f000 f82c 	bl	d6e0c <__aeabi_atexit>
	return wire;
}
   d6db4:	4801      	ldr	r0, [pc, #4]	; (d6dbc <_Z19__fetch_global_Wirev+0x34>)
   d6db6:	bd38      	pop	{r3, r4, r5, pc}
   d6db8:	2003e718 	.word	0x2003e718
   d6dbc:	2003e71c 	.word	0x2003e71c
   d6dc0:	2003dffc 	.word	0x2003dffc
   d6dc4:	000d6039 	.word	0x000d6039

000d6dc8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6dc8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6dca:	4c0c      	ldr	r4, [pc, #48]	; (d6dfc <_GLOBAL__sub_I_SPI+0x34>)
   d6dcc:	4e0c      	ldr	r6, [pc, #48]	; (d6e00 <_GLOBAL__sub_I_SPI+0x38>)
   d6dce:	4d0d      	ldr	r5, [pc, #52]	; (d6e04 <_GLOBAL__sub_I_SPI+0x3c>)
   d6dd0:	2100      	movs	r1, #0
   d6dd2:	4620      	mov	r0, r4
   d6dd4:	f7ff fcda 	bl	d678c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6dd8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6dda:	4c0b      	ldr	r4, [pc, #44]	; (d6e08 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6ddc:	4632      	mov	r2, r6
   d6dde:	4629      	mov	r1, r5
   d6de0:	f000 f814 	bl	d6e0c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6de4:	2101      	movs	r1, #1
   d6de6:	4620      	mov	r0, r4
   d6de8:	f7ff fcd0 	bl	d678c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6dec:	4632      	mov	r2, r6
   d6dee:	4629      	mov	r1, r5
   d6df0:	4620      	mov	r0, r4
   d6df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6df6:	f000 b809 	b.w	d6e0c <__aeabi_atexit>
   d6dfa:	bf00      	nop
   d6dfc:	2003e730 	.word	0x2003e730
   d6e00:	2003dffc 	.word	0x2003dffc
   d6e04:	000d677d 	.word	0x000d677d
   d6e08:	2003e740 	.word	0x2003e740

000d6e0c <__aeabi_atexit>:
   d6e0c:	460b      	mov	r3, r1
   d6e0e:	4601      	mov	r1, r0
   d6e10:	4618      	mov	r0, r3
   d6e12:	f000 be4b 	b.w	d7aac <__cxa_atexit>

000d6e16 <_ZdlPvj>:
   d6e16:	f7fd b942 	b.w	d409e <_ZdlPv>
	...

000d6e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6e1c:	4b24      	ldr	r3, [pc, #144]	; (d6eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6e1e:	681a      	ldr	r2, [r3, #0]
   d6e20:	07d0      	lsls	r0, r2, #31
   d6e22:	bf5c      	itt	pl
   d6e24:	2201      	movpl	r2, #1
   d6e26:	601a      	strpl	r2, [r3, #0]
   d6e28:	4b22      	ldr	r3, [pc, #136]	; (d6eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6e2a:	681a      	ldr	r2, [r3, #0]
   d6e2c:	07d1      	lsls	r1, r2, #31
   d6e2e:	bf5c      	itt	pl
   d6e30:	2201      	movpl	r2, #1
   d6e32:	601a      	strpl	r2, [r3, #0]
   d6e34:	4b20      	ldr	r3, [pc, #128]	; (d6eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6e36:	681a      	ldr	r2, [r3, #0]
   d6e38:	07d2      	lsls	r2, r2, #31
   d6e3a:	bf5c      	itt	pl
   d6e3c:	2201      	movpl	r2, #1
   d6e3e:	601a      	strpl	r2, [r3, #0]
   d6e40:	4b1e      	ldr	r3, [pc, #120]	; (d6ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6e42:	681a      	ldr	r2, [r3, #0]
   d6e44:	07d0      	lsls	r0, r2, #31
   d6e46:	bf5c      	itt	pl
   d6e48:	2201      	movpl	r2, #1
   d6e4a:	601a      	strpl	r2, [r3, #0]
   d6e4c:	4b1c      	ldr	r3, [pc, #112]	; (d6ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6e4e:	681a      	ldr	r2, [r3, #0]
   d6e50:	07d1      	lsls	r1, r2, #31
   d6e52:	bf5c      	itt	pl
   d6e54:	2201      	movpl	r2, #1
   d6e56:	601a      	strpl	r2, [r3, #0]
   d6e58:	4b1a      	ldr	r3, [pc, #104]	; (d6ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6e5a:	681a      	ldr	r2, [r3, #0]
   d6e5c:	07d2      	lsls	r2, r2, #31
   d6e5e:	bf5c      	itt	pl
   d6e60:	2201      	movpl	r2, #1
   d6e62:	601a      	strpl	r2, [r3, #0]
   d6e64:	4b18      	ldr	r3, [pc, #96]	; (d6ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6e66:	681a      	ldr	r2, [r3, #0]
   d6e68:	07d0      	lsls	r0, r2, #31
   d6e6a:	bf5c      	itt	pl
   d6e6c:	2201      	movpl	r2, #1
   d6e6e:	601a      	strpl	r2, [r3, #0]
   d6e70:	4b16      	ldr	r3, [pc, #88]	; (d6ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6e72:	681a      	ldr	r2, [r3, #0]
   d6e74:	07d1      	lsls	r1, r2, #31
   d6e76:	bf5c      	itt	pl
   d6e78:	2201      	movpl	r2, #1
   d6e7a:	601a      	strpl	r2, [r3, #0]
   d6e7c:	4b14      	ldr	r3, [pc, #80]	; (d6ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6e7e:	681a      	ldr	r2, [r3, #0]
   d6e80:	07d2      	lsls	r2, r2, #31
   d6e82:	bf5c      	itt	pl
   d6e84:	2201      	movpl	r2, #1
   d6e86:	601a      	strpl	r2, [r3, #0]
   d6e88:	4b12      	ldr	r3, [pc, #72]	; (d6ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6e8a:	681a      	ldr	r2, [r3, #0]
   d6e8c:	07d0      	lsls	r0, r2, #31
   d6e8e:	bf5c      	itt	pl
   d6e90:	2201      	movpl	r2, #1
   d6e92:	601a      	strpl	r2, [r3, #0]
   d6e94:	4b10      	ldr	r3, [pc, #64]	; (d6ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6e96:	681a      	ldr	r2, [r3, #0]
   d6e98:	07d1      	lsls	r1, r2, #31
   d6e9a:	bf5c      	itt	pl
   d6e9c:	2201      	movpl	r2, #1
   d6e9e:	601a      	strpl	r2, [r3, #0]
   d6ea0:	4b0e      	ldr	r3, [pc, #56]	; (d6edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6ea2:	681a      	ldr	r2, [r3, #0]
   d6ea4:	07d2      	lsls	r2, r2, #31
   d6ea6:	bf5c      	itt	pl
   d6ea8:	2201      	movpl	r2, #1
   d6eaa:	601a      	strpl	r2, [r3, #0]
   d6eac:	4770      	bx	lr
   d6eae:	bf00      	nop
   d6eb0:	2003e77c 	.word	0x2003e77c
   d6eb4:	2003e778 	.word	0x2003e778
   d6eb8:	2003e774 	.word	0x2003e774
   d6ebc:	2003e770 	.word	0x2003e770
   d6ec0:	2003e76c 	.word	0x2003e76c
   d6ec4:	2003e768 	.word	0x2003e768
   d6ec8:	2003e764 	.word	0x2003e764
   d6ecc:	2003e760 	.word	0x2003e760
   d6ed0:	2003e75c 	.word	0x2003e75c
   d6ed4:	2003e758 	.word	0x2003e758
   d6ed8:	2003e754 	.word	0x2003e754
   d6edc:	2003e750 	.word	0x2003e750

000d6ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6ee0:	4b18      	ldr	r3, [pc, #96]	; (d6f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6ee2:	681a      	ldr	r2, [r3, #0]
   d6ee4:	07d1      	lsls	r1, r2, #31
   d6ee6:	bf5c      	itt	pl
   d6ee8:	2201      	movpl	r2, #1
   d6eea:	601a      	strpl	r2, [r3, #0]
   d6eec:	4b16      	ldr	r3, [pc, #88]	; (d6f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6eee:	681a      	ldr	r2, [r3, #0]
   d6ef0:	07d2      	lsls	r2, r2, #31
   d6ef2:	bf5c      	itt	pl
   d6ef4:	2201      	movpl	r2, #1
   d6ef6:	601a      	strpl	r2, [r3, #0]
   d6ef8:	4b14      	ldr	r3, [pc, #80]	; (d6f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6efa:	681a      	ldr	r2, [r3, #0]
   d6efc:	07d0      	lsls	r0, r2, #31
   d6efe:	bf5c      	itt	pl
   d6f00:	2201      	movpl	r2, #1
   d6f02:	601a      	strpl	r2, [r3, #0]
   d6f04:	4b12      	ldr	r3, [pc, #72]	; (d6f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6f06:	681a      	ldr	r2, [r3, #0]
   d6f08:	07d1      	lsls	r1, r2, #31
   d6f0a:	bf5c      	itt	pl
   d6f0c:	2201      	movpl	r2, #1
   d6f0e:	601a      	strpl	r2, [r3, #0]
   d6f10:	4b10      	ldr	r3, [pc, #64]	; (d6f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6f12:	681a      	ldr	r2, [r3, #0]
   d6f14:	07d2      	lsls	r2, r2, #31
   d6f16:	bf5c      	itt	pl
   d6f18:	2201      	movpl	r2, #1
   d6f1a:	601a      	strpl	r2, [r3, #0]
   d6f1c:	4b0e      	ldr	r3, [pc, #56]	; (d6f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6f1e:	681a      	ldr	r2, [r3, #0]
   d6f20:	07d0      	lsls	r0, r2, #31
   d6f22:	bf5c      	itt	pl
   d6f24:	2201      	movpl	r2, #1
   d6f26:	601a      	strpl	r2, [r3, #0]
   d6f28:	4b0c      	ldr	r3, [pc, #48]	; (d6f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6f2a:	681a      	ldr	r2, [r3, #0]
   d6f2c:	07d1      	lsls	r1, r2, #31
   d6f2e:	bf5c      	itt	pl
   d6f30:	2201      	movpl	r2, #1
   d6f32:	601a      	strpl	r2, [r3, #0]
   d6f34:	4b0a      	ldr	r3, [pc, #40]	; (d6f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6f36:	681a      	ldr	r2, [r3, #0]
   d6f38:	07d2      	lsls	r2, r2, #31
   d6f3a:	bf5c      	itt	pl
   d6f3c:	2201      	movpl	r2, #1
   d6f3e:	601a      	strpl	r2, [r3, #0]
   d6f40:	4770      	bx	lr
   d6f42:	bf00      	nop
   d6f44:	2003e79c 	.word	0x2003e79c
   d6f48:	2003e798 	.word	0x2003e798
   d6f4c:	2003e794 	.word	0x2003e794
   d6f50:	2003e790 	.word	0x2003e790
   d6f54:	2003e78c 	.word	0x2003e78c
   d6f58:	2003e788 	.word	0x2003e788
   d6f5c:	2003e784 	.word	0x2003e784
   d6f60:	2003e780 	.word	0x2003e780

000d6f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6f64:	4b18      	ldr	r3, [pc, #96]	; (d6fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6f66:	681a      	ldr	r2, [r3, #0]
   d6f68:	07d1      	lsls	r1, r2, #31
   d6f6a:	bf5c      	itt	pl
   d6f6c:	2201      	movpl	r2, #1
   d6f6e:	601a      	strpl	r2, [r3, #0]
   d6f70:	4b16      	ldr	r3, [pc, #88]	; (d6fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6f72:	681a      	ldr	r2, [r3, #0]
   d6f74:	07d2      	lsls	r2, r2, #31
   d6f76:	bf5c      	itt	pl
   d6f78:	2201      	movpl	r2, #1
   d6f7a:	601a      	strpl	r2, [r3, #0]
   d6f7c:	4b14      	ldr	r3, [pc, #80]	; (d6fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6f7e:	681a      	ldr	r2, [r3, #0]
   d6f80:	07d0      	lsls	r0, r2, #31
   d6f82:	bf5c      	itt	pl
   d6f84:	2201      	movpl	r2, #1
   d6f86:	601a      	strpl	r2, [r3, #0]
   d6f88:	4b12      	ldr	r3, [pc, #72]	; (d6fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6f8a:	681a      	ldr	r2, [r3, #0]
   d6f8c:	07d1      	lsls	r1, r2, #31
   d6f8e:	bf5c      	itt	pl
   d6f90:	2201      	movpl	r2, #1
   d6f92:	601a      	strpl	r2, [r3, #0]
   d6f94:	4b10      	ldr	r3, [pc, #64]	; (d6fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6f96:	681a      	ldr	r2, [r3, #0]
   d6f98:	07d2      	lsls	r2, r2, #31
   d6f9a:	bf5c      	itt	pl
   d6f9c:	2201      	movpl	r2, #1
   d6f9e:	601a      	strpl	r2, [r3, #0]
   d6fa0:	4b0e      	ldr	r3, [pc, #56]	; (d6fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6fa2:	681a      	ldr	r2, [r3, #0]
   d6fa4:	07d0      	lsls	r0, r2, #31
   d6fa6:	bf5c      	itt	pl
   d6fa8:	2201      	movpl	r2, #1
   d6faa:	601a      	strpl	r2, [r3, #0]
   d6fac:	4b0c      	ldr	r3, [pc, #48]	; (d6fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6fae:	681a      	ldr	r2, [r3, #0]
   d6fb0:	07d1      	lsls	r1, r2, #31
   d6fb2:	bf5c      	itt	pl
   d6fb4:	2201      	movpl	r2, #1
   d6fb6:	601a      	strpl	r2, [r3, #0]
   d6fb8:	4b0a      	ldr	r3, [pc, #40]	; (d6fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6fba:	681a      	ldr	r2, [r3, #0]
   d6fbc:	07d2      	lsls	r2, r2, #31
   d6fbe:	bf5c      	itt	pl
   d6fc0:	2201      	movpl	r2, #1
   d6fc2:	601a      	strpl	r2, [r3, #0]
   d6fc4:	4770      	bx	lr
   d6fc6:	bf00      	nop
   d6fc8:	2003e7bc 	.word	0x2003e7bc
   d6fcc:	2003e7b8 	.word	0x2003e7b8
   d6fd0:	2003e7b4 	.word	0x2003e7b4
   d6fd4:	2003e7b0 	.word	0x2003e7b0
   d6fd8:	2003e7ac 	.word	0x2003e7ac
   d6fdc:	2003e7a8 	.word	0x2003e7a8
   d6fe0:	2003e7a4 	.word	0x2003e7a4
   d6fe4:	2003e7a0 	.word	0x2003e7a0

000d6fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6fe8:	4b24      	ldr	r3, [pc, #144]	; (d707c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6fea:	681a      	ldr	r2, [r3, #0]
   d6fec:	07d0      	lsls	r0, r2, #31
   d6fee:	bf5c      	itt	pl
   d6ff0:	2201      	movpl	r2, #1
   d6ff2:	601a      	strpl	r2, [r3, #0]
   d6ff4:	4b22      	ldr	r3, [pc, #136]	; (d7080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6ff6:	681a      	ldr	r2, [r3, #0]
   d6ff8:	07d1      	lsls	r1, r2, #31
   d6ffa:	bf5c      	itt	pl
   d6ffc:	2201      	movpl	r2, #1
   d6ffe:	601a      	strpl	r2, [r3, #0]
   d7000:	4b20      	ldr	r3, [pc, #128]	; (d7084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7002:	681a      	ldr	r2, [r3, #0]
   d7004:	07d2      	lsls	r2, r2, #31
   d7006:	bf5c      	itt	pl
   d7008:	2201      	movpl	r2, #1
   d700a:	601a      	strpl	r2, [r3, #0]
   d700c:	4b1e      	ldr	r3, [pc, #120]	; (d7088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d700e:	681a      	ldr	r2, [r3, #0]
   d7010:	07d0      	lsls	r0, r2, #31
   d7012:	bf5c      	itt	pl
   d7014:	2201      	movpl	r2, #1
   d7016:	601a      	strpl	r2, [r3, #0]
   d7018:	4b1c      	ldr	r3, [pc, #112]	; (d708c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d701a:	681a      	ldr	r2, [r3, #0]
   d701c:	07d1      	lsls	r1, r2, #31
   d701e:	bf5c      	itt	pl
   d7020:	2201      	movpl	r2, #1
   d7022:	601a      	strpl	r2, [r3, #0]
   d7024:	4b1a      	ldr	r3, [pc, #104]	; (d7090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7026:	681a      	ldr	r2, [r3, #0]
   d7028:	07d2      	lsls	r2, r2, #31
   d702a:	bf5c      	itt	pl
   d702c:	2201      	movpl	r2, #1
   d702e:	601a      	strpl	r2, [r3, #0]
   d7030:	4b18      	ldr	r3, [pc, #96]	; (d7094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7032:	681a      	ldr	r2, [r3, #0]
   d7034:	07d0      	lsls	r0, r2, #31
   d7036:	bf5c      	itt	pl
   d7038:	2201      	movpl	r2, #1
   d703a:	601a      	strpl	r2, [r3, #0]
   d703c:	4b16      	ldr	r3, [pc, #88]	; (d7098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d703e:	681a      	ldr	r2, [r3, #0]
   d7040:	07d1      	lsls	r1, r2, #31
   d7042:	bf5c      	itt	pl
   d7044:	2201      	movpl	r2, #1
   d7046:	601a      	strpl	r2, [r3, #0]
   d7048:	4b14      	ldr	r3, [pc, #80]	; (d709c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d704a:	681a      	ldr	r2, [r3, #0]
   d704c:	07d2      	lsls	r2, r2, #31
   d704e:	bf5c      	itt	pl
   d7050:	2201      	movpl	r2, #1
   d7052:	601a      	strpl	r2, [r3, #0]
   d7054:	4b12      	ldr	r3, [pc, #72]	; (d70a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7056:	681a      	ldr	r2, [r3, #0]
   d7058:	07d0      	lsls	r0, r2, #31
   d705a:	bf5c      	itt	pl
   d705c:	2201      	movpl	r2, #1
   d705e:	601a      	strpl	r2, [r3, #0]
   d7060:	4b10      	ldr	r3, [pc, #64]	; (d70a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7062:	681a      	ldr	r2, [r3, #0]
   d7064:	07d1      	lsls	r1, r2, #31
   d7066:	bf5c      	itt	pl
   d7068:	2201      	movpl	r2, #1
   d706a:	601a      	strpl	r2, [r3, #0]
   d706c:	4b0e      	ldr	r3, [pc, #56]	; (d70a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d706e:	681a      	ldr	r2, [r3, #0]
   d7070:	07d2      	lsls	r2, r2, #31
   d7072:	bf5c      	itt	pl
   d7074:	2201      	movpl	r2, #1
   d7076:	601a      	strpl	r2, [r3, #0]
   d7078:	4770      	bx	lr
   d707a:	bf00      	nop
   d707c:	2003e7ec 	.word	0x2003e7ec
   d7080:	2003e7e8 	.word	0x2003e7e8
   d7084:	2003e7e4 	.word	0x2003e7e4
   d7088:	2003e7e0 	.word	0x2003e7e0
   d708c:	2003e7dc 	.word	0x2003e7dc
   d7090:	2003e7d8 	.word	0x2003e7d8
   d7094:	2003e7d4 	.word	0x2003e7d4
   d7098:	2003e7d0 	.word	0x2003e7d0
   d709c:	2003e7cc 	.word	0x2003e7cc
   d70a0:	2003e7c8 	.word	0x2003e7c8
   d70a4:	2003e7c4 	.word	0x2003e7c4
   d70a8:	2003e7c0 	.word	0x2003e7c0

000d70ac <__aeabi_drsub>:
   d70ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d70b0:	e002      	b.n	d70b8 <__adddf3>
   d70b2:	bf00      	nop

000d70b4 <__aeabi_dsub>:
   d70b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d70b8 <__adddf3>:
   d70b8:	b530      	push	{r4, r5, lr}
   d70ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d70be:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d70c2:	ea94 0f05 	teq	r4, r5
   d70c6:	bf08      	it	eq
   d70c8:	ea90 0f02 	teqeq	r0, r2
   d70cc:	bf1f      	itttt	ne
   d70ce:	ea54 0c00 	orrsne.w	ip, r4, r0
   d70d2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d70d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d70da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d70de:	f000 80e2 	beq.w	d72a6 <__adddf3+0x1ee>
   d70e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d70e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d70ea:	bfb8      	it	lt
   d70ec:	426d      	neglt	r5, r5
   d70ee:	dd0c      	ble.n	d710a <__adddf3+0x52>
   d70f0:	442c      	add	r4, r5
   d70f2:	ea80 0202 	eor.w	r2, r0, r2
   d70f6:	ea81 0303 	eor.w	r3, r1, r3
   d70fa:	ea82 0000 	eor.w	r0, r2, r0
   d70fe:	ea83 0101 	eor.w	r1, r3, r1
   d7102:	ea80 0202 	eor.w	r2, r0, r2
   d7106:	ea81 0303 	eor.w	r3, r1, r3
   d710a:	2d36      	cmp	r5, #54	; 0x36
   d710c:	bf88      	it	hi
   d710e:	bd30      	pophi	{r4, r5, pc}
   d7110:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7114:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7118:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d711c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7120:	d002      	beq.n	d7128 <__adddf3+0x70>
   d7122:	4240      	negs	r0, r0
   d7124:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7128:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d712c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7130:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7134:	d002      	beq.n	d713c <__adddf3+0x84>
   d7136:	4252      	negs	r2, r2
   d7138:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d713c:	ea94 0f05 	teq	r4, r5
   d7140:	f000 80a7 	beq.w	d7292 <__adddf3+0x1da>
   d7144:	f1a4 0401 	sub.w	r4, r4, #1
   d7148:	f1d5 0e20 	rsbs	lr, r5, #32
   d714c:	db0d      	blt.n	d716a <__adddf3+0xb2>
   d714e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7152:	fa22 f205 	lsr.w	r2, r2, r5
   d7156:	1880      	adds	r0, r0, r2
   d7158:	f141 0100 	adc.w	r1, r1, #0
   d715c:	fa03 f20e 	lsl.w	r2, r3, lr
   d7160:	1880      	adds	r0, r0, r2
   d7162:	fa43 f305 	asr.w	r3, r3, r5
   d7166:	4159      	adcs	r1, r3
   d7168:	e00e      	b.n	d7188 <__adddf3+0xd0>
   d716a:	f1a5 0520 	sub.w	r5, r5, #32
   d716e:	f10e 0e20 	add.w	lr, lr, #32
   d7172:	2a01      	cmp	r2, #1
   d7174:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7178:	bf28      	it	cs
   d717a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d717e:	fa43 f305 	asr.w	r3, r3, r5
   d7182:	18c0      	adds	r0, r0, r3
   d7184:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7188:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d718c:	d507      	bpl.n	d719e <__adddf3+0xe6>
   d718e:	f04f 0e00 	mov.w	lr, #0
   d7192:	f1dc 0c00 	rsbs	ip, ip, #0
   d7196:	eb7e 0000 	sbcs.w	r0, lr, r0
   d719a:	eb6e 0101 	sbc.w	r1, lr, r1
   d719e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d71a2:	d31b      	bcc.n	d71dc <__adddf3+0x124>
   d71a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d71a8:	d30c      	bcc.n	d71c4 <__adddf3+0x10c>
   d71aa:	0849      	lsrs	r1, r1, #1
   d71ac:	ea5f 0030 	movs.w	r0, r0, rrx
   d71b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d71b4:	f104 0401 	add.w	r4, r4, #1
   d71b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d71bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d71c0:	f080 809a 	bcs.w	d72f8 <__adddf3+0x240>
   d71c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d71c8:	bf08      	it	eq
   d71ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d71ce:	f150 0000 	adcs.w	r0, r0, #0
   d71d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d71d6:	ea41 0105 	orr.w	r1, r1, r5
   d71da:	bd30      	pop	{r4, r5, pc}
   d71dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d71e0:	4140      	adcs	r0, r0
   d71e2:	eb41 0101 	adc.w	r1, r1, r1
   d71e6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d71ea:	f1a4 0401 	sub.w	r4, r4, #1
   d71ee:	d1e9      	bne.n	d71c4 <__adddf3+0x10c>
   d71f0:	f091 0f00 	teq	r1, #0
   d71f4:	bf04      	itt	eq
   d71f6:	4601      	moveq	r1, r0
   d71f8:	2000      	moveq	r0, #0
   d71fa:	fab1 f381 	clz	r3, r1
   d71fe:	bf08      	it	eq
   d7200:	3320      	addeq	r3, #32
   d7202:	f1a3 030b 	sub.w	r3, r3, #11
   d7206:	f1b3 0220 	subs.w	r2, r3, #32
   d720a:	da0c      	bge.n	d7226 <__adddf3+0x16e>
   d720c:	320c      	adds	r2, #12
   d720e:	dd08      	ble.n	d7222 <__adddf3+0x16a>
   d7210:	f102 0c14 	add.w	ip, r2, #20
   d7214:	f1c2 020c 	rsb	r2, r2, #12
   d7218:	fa01 f00c 	lsl.w	r0, r1, ip
   d721c:	fa21 f102 	lsr.w	r1, r1, r2
   d7220:	e00c      	b.n	d723c <__adddf3+0x184>
   d7222:	f102 0214 	add.w	r2, r2, #20
   d7226:	bfd8      	it	le
   d7228:	f1c2 0c20 	rsble	ip, r2, #32
   d722c:	fa01 f102 	lsl.w	r1, r1, r2
   d7230:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7234:	bfdc      	itt	le
   d7236:	ea41 010c 	orrle.w	r1, r1, ip
   d723a:	4090      	lslle	r0, r2
   d723c:	1ae4      	subs	r4, r4, r3
   d723e:	bfa2      	ittt	ge
   d7240:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7244:	4329      	orrge	r1, r5
   d7246:	bd30      	popge	{r4, r5, pc}
   d7248:	ea6f 0404 	mvn.w	r4, r4
   d724c:	3c1f      	subs	r4, #31
   d724e:	da1c      	bge.n	d728a <__adddf3+0x1d2>
   d7250:	340c      	adds	r4, #12
   d7252:	dc0e      	bgt.n	d7272 <__adddf3+0x1ba>
   d7254:	f104 0414 	add.w	r4, r4, #20
   d7258:	f1c4 0220 	rsb	r2, r4, #32
   d725c:	fa20 f004 	lsr.w	r0, r0, r4
   d7260:	fa01 f302 	lsl.w	r3, r1, r2
   d7264:	ea40 0003 	orr.w	r0, r0, r3
   d7268:	fa21 f304 	lsr.w	r3, r1, r4
   d726c:	ea45 0103 	orr.w	r1, r5, r3
   d7270:	bd30      	pop	{r4, r5, pc}
   d7272:	f1c4 040c 	rsb	r4, r4, #12
   d7276:	f1c4 0220 	rsb	r2, r4, #32
   d727a:	fa20 f002 	lsr.w	r0, r0, r2
   d727e:	fa01 f304 	lsl.w	r3, r1, r4
   d7282:	ea40 0003 	orr.w	r0, r0, r3
   d7286:	4629      	mov	r1, r5
   d7288:	bd30      	pop	{r4, r5, pc}
   d728a:	fa21 f004 	lsr.w	r0, r1, r4
   d728e:	4629      	mov	r1, r5
   d7290:	bd30      	pop	{r4, r5, pc}
   d7292:	f094 0f00 	teq	r4, #0
   d7296:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d729a:	bf06      	itte	eq
   d729c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d72a0:	3401      	addeq	r4, #1
   d72a2:	3d01      	subne	r5, #1
   d72a4:	e74e      	b.n	d7144 <__adddf3+0x8c>
   d72a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d72aa:	bf18      	it	ne
   d72ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d72b0:	d029      	beq.n	d7306 <__adddf3+0x24e>
   d72b2:	ea94 0f05 	teq	r4, r5
   d72b6:	bf08      	it	eq
   d72b8:	ea90 0f02 	teqeq	r0, r2
   d72bc:	d005      	beq.n	d72ca <__adddf3+0x212>
   d72be:	ea54 0c00 	orrs.w	ip, r4, r0
   d72c2:	bf04      	itt	eq
   d72c4:	4619      	moveq	r1, r3
   d72c6:	4610      	moveq	r0, r2
   d72c8:	bd30      	pop	{r4, r5, pc}
   d72ca:	ea91 0f03 	teq	r1, r3
   d72ce:	bf1e      	ittt	ne
   d72d0:	2100      	movne	r1, #0
   d72d2:	2000      	movne	r0, #0
   d72d4:	bd30      	popne	{r4, r5, pc}
   d72d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d72da:	d105      	bne.n	d72e8 <__adddf3+0x230>
   d72dc:	0040      	lsls	r0, r0, #1
   d72de:	4149      	adcs	r1, r1
   d72e0:	bf28      	it	cs
   d72e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d72e6:	bd30      	pop	{r4, r5, pc}
   d72e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d72ec:	bf3c      	itt	cc
   d72ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d72f2:	bd30      	popcc	{r4, r5, pc}
   d72f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d72f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d72fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7300:	f04f 0000 	mov.w	r0, #0
   d7304:	bd30      	pop	{r4, r5, pc}
   d7306:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d730a:	bf1a      	itte	ne
   d730c:	4619      	movne	r1, r3
   d730e:	4610      	movne	r0, r2
   d7310:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7314:	bf1c      	itt	ne
   d7316:	460b      	movne	r3, r1
   d7318:	4602      	movne	r2, r0
   d731a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d731e:	bf06      	itte	eq
   d7320:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7324:	ea91 0f03 	teqeq	r1, r3
   d7328:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d732c:	bd30      	pop	{r4, r5, pc}
   d732e:	bf00      	nop

000d7330 <__aeabi_ui2d>:
   d7330:	f090 0f00 	teq	r0, #0
   d7334:	bf04      	itt	eq
   d7336:	2100      	moveq	r1, #0
   d7338:	4770      	bxeq	lr
   d733a:	b530      	push	{r4, r5, lr}
   d733c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7340:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7344:	f04f 0500 	mov.w	r5, #0
   d7348:	f04f 0100 	mov.w	r1, #0
   d734c:	e750      	b.n	d71f0 <__adddf3+0x138>
   d734e:	bf00      	nop

000d7350 <__aeabi_i2d>:
   d7350:	f090 0f00 	teq	r0, #0
   d7354:	bf04      	itt	eq
   d7356:	2100      	moveq	r1, #0
   d7358:	4770      	bxeq	lr
   d735a:	b530      	push	{r4, r5, lr}
   d735c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7360:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7364:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7368:	bf48      	it	mi
   d736a:	4240      	negmi	r0, r0
   d736c:	f04f 0100 	mov.w	r1, #0
   d7370:	e73e      	b.n	d71f0 <__adddf3+0x138>
   d7372:	bf00      	nop

000d7374 <__aeabi_f2d>:
   d7374:	0042      	lsls	r2, r0, #1
   d7376:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d737a:	ea4f 0131 	mov.w	r1, r1, rrx
   d737e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7382:	bf1f      	itttt	ne
   d7384:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7388:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d738c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7390:	4770      	bxne	lr
   d7392:	f092 0f00 	teq	r2, #0
   d7396:	bf14      	ite	ne
   d7398:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d739c:	4770      	bxeq	lr
   d739e:	b530      	push	{r4, r5, lr}
   d73a0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d73a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d73a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d73ac:	e720      	b.n	d71f0 <__adddf3+0x138>
   d73ae:	bf00      	nop

000d73b0 <__aeabi_ul2d>:
   d73b0:	ea50 0201 	orrs.w	r2, r0, r1
   d73b4:	bf08      	it	eq
   d73b6:	4770      	bxeq	lr
   d73b8:	b530      	push	{r4, r5, lr}
   d73ba:	f04f 0500 	mov.w	r5, #0
   d73be:	e00a      	b.n	d73d6 <__aeabi_l2d+0x16>

000d73c0 <__aeabi_l2d>:
   d73c0:	ea50 0201 	orrs.w	r2, r0, r1
   d73c4:	bf08      	it	eq
   d73c6:	4770      	bxeq	lr
   d73c8:	b530      	push	{r4, r5, lr}
   d73ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d73ce:	d502      	bpl.n	d73d6 <__aeabi_l2d+0x16>
   d73d0:	4240      	negs	r0, r0
   d73d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d73d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d73da:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d73de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d73e2:	f43f aedc 	beq.w	d719e <__adddf3+0xe6>
   d73e6:	f04f 0203 	mov.w	r2, #3
   d73ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d73ee:	bf18      	it	ne
   d73f0:	3203      	addne	r2, #3
   d73f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d73f6:	bf18      	it	ne
   d73f8:	3203      	addne	r2, #3
   d73fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d73fe:	f1c2 0320 	rsb	r3, r2, #32
   d7402:	fa00 fc03 	lsl.w	ip, r0, r3
   d7406:	fa20 f002 	lsr.w	r0, r0, r2
   d740a:	fa01 fe03 	lsl.w	lr, r1, r3
   d740e:	ea40 000e 	orr.w	r0, r0, lr
   d7412:	fa21 f102 	lsr.w	r1, r1, r2
   d7416:	4414      	add	r4, r2
   d7418:	e6c1      	b.n	d719e <__adddf3+0xe6>
   d741a:	bf00      	nop

000d741c <__aeabi_dmul>:
   d741c:	b570      	push	{r4, r5, r6, lr}
   d741e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7422:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7426:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d742a:	bf1d      	ittte	ne
   d742c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7430:	ea94 0f0c 	teqne	r4, ip
   d7434:	ea95 0f0c 	teqne	r5, ip
   d7438:	f000 f8de 	bleq	d75f8 <__aeabi_dmul+0x1dc>
   d743c:	442c      	add	r4, r5
   d743e:	ea81 0603 	eor.w	r6, r1, r3
   d7442:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7446:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d744a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d744e:	bf18      	it	ne
   d7450:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7454:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d745c:	d038      	beq.n	d74d0 <__aeabi_dmul+0xb4>
   d745e:	fba0 ce02 	umull	ip, lr, r0, r2
   d7462:	f04f 0500 	mov.w	r5, #0
   d7466:	fbe1 e502 	umlal	lr, r5, r1, r2
   d746a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d746e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7472:	f04f 0600 	mov.w	r6, #0
   d7476:	fbe1 5603 	umlal	r5, r6, r1, r3
   d747a:	f09c 0f00 	teq	ip, #0
   d747e:	bf18      	it	ne
   d7480:	f04e 0e01 	orrne.w	lr, lr, #1
   d7484:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7488:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d748c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7490:	d204      	bcs.n	d749c <__aeabi_dmul+0x80>
   d7492:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7496:	416d      	adcs	r5, r5
   d7498:	eb46 0606 	adc.w	r6, r6, r6
   d749c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d74a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d74a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d74a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d74ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d74b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d74b4:	bf88      	it	hi
   d74b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d74ba:	d81e      	bhi.n	d74fa <__aeabi_dmul+0xde>
   d74bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d74c0:	bf08      	it	eq
   d74c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d74c6:	f150 0000 	adcs.w	r0, r0, #0
   d74ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d74ce:	bd70      	pop	{r4, r5, r6, pc}
   d74d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d74d4:	ea46 0101 	orr.w	r1, r6, r1
   d74d8:	ea40 0002 	orr.w	r0, r0, r2
   d74dc:	ea81 0103 	eor.w	r1, r1, r3
   d74e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d74e4:	bfc2      	ittt	gt
   d74e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d74ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d74ee:	bd70      	popgt	{r4, r5, r6, pc}
   d74f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d74f4:	f04f 0e00 	mov.w	lr, #0
   d74f8:	3c01      	subs	r4, #1
   d74fa:	f300 80ab 	bgt.w	d7654 <__aeabi_dmul+0x238>
   d74fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7502:	bfde      	ittt	le
   d7504:	2000      	movle	r0, #0
   d7506:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d750a:	bd70      	pople	{r4, r5, r6, pc}
   d750c:	f1c4 0400 	rsb	r4, r4, #0
   d7510:	3c20      	subs	r4, #32
   d7512:	da35      	bge.n	d7580 <__aeabi_dmul+0x164>
   d7514:	340c      	adds	r4, #12
   d7516:	dc1b      	bgt.n	d7550 <__aeabi_dmul+0x134>
   d7518:	f104 0414 	add.w	r4, r4, #20
   d751c:	f1c4 0520 	rsb	r5, r4, #32
   d7520:	fa00 f305 	lsl.w	r3, r0, r5
   d7524:	fa20 f004 	lsr.w	r0, r0, r4
   d7528:	fa01 f205 	lsl.w	r2, r1, r5
   d752c:	ea40 0002 	orr.w	r0, r0, r2
   d7530:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7538:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d753c:	fa21 f604 	lsr.w	r6, r1, r4
   d7540:	eb42 0106 	adc.w	r1, r2, r6
   d7544:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7548:	bf08      	it	eq
   d754a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d754e:	bd70      	pop	{r4, r5, r6, pc}
   d7550:	f1c4 040c 	rsb	r4, r4, #12
   d7554:	f1c4 0520 	rsb	r5, r4, #32
   d7558:	fa00 f304 	lsl.w	r3, r0, r4
   d755c:	fa20 f005 	lsr.w	r0, r0, r5
   d7560:	fa01 f204 	lsl.w	r2, r1, r4
   d7564:	ea40 0002 	orr.w	r0, r0, r2
   d7568:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d756c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7570:	f141 0100 	adc.w	r1, r1, #0
   d7574:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7578:	bf08      	it	eq
   d757a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d757e:	bd70      	pop	{r4, r5, r6, pc}
   d7580:	f1c4 0520 	rsb	r5, r4, #32
   d7584:	fa00 f205 	lsl.w	r2, r0, r5
   d7588:	ea4e 0e02 	orr.w	lr, lr, r2
   d758c:	fa20 f304 	lsr.w	r3, r0, r4
   d7590:	fa01 f205 	lsl.w	r2, r1, r5
   d7594:	ea43 0302 	orr.w	r3, r3, r2
   d7598:	fa21 f004 	lsr.w	r0, r1, r4
   d759c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d75a0:	fa21 f204 	lsr.w	r2, r1, r4
   d75a4:	ea20 0002 	bic.w	r0, r0, r2
   d75a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d75ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d75b0:	bf08      	it	eq
   d75b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d75b6:	bd70      	pop	{r4, r5, r6, pc}
   d75b8:	f094 0f00 	teq	r4, #0
   d75bc:	d10f      	bne.n	d75de <__aeabi_dmul+0x1c2>
   d75be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d75c2:	0040      	lsls	r0, r0, #1
   d75c4:	eb41 0101 	adc.w	r1, r1, r1
   d75c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d75cc:	bf08      	it	eq
   d75ce:	3c01      	subeq	r4, #1
   d75d0:	d0f7      	beq.n	d75c2 <__aeabi_dmul+0x1a6>
   d75d2:	ea41 0106 	orr.w	r1, r1, r6
   d75d6:	f095 0f00 	teq	r5, #0
   d75da:	bf18      	it	ne
   d75dc:	4770      	bxne	lr
   d75de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d75e2:	0052      	lsls	r2, r2, #1
   d75e4:	eb43 0303 	adc.w	r3, r3, r3
   d75e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d75ec:	bf08      	it	eq
   d75ee:	3d01      	subeq	r5, #1
   d75f0:	d0f7      	beq.n	d75e2 <__aeabi_dmul+0x1c6>
   d75f2:	ea43 0306 	orr.w	r3, r3, r6
   d75f6:	4770      	bx	lr
   d75f8:	ea94 0f0c 	teq	r4, ip
   d75fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7600:	bf18      	it	ne
   d7602:	ea95 0f0c 	teqne	r5, ip
   d7606:	d00c      	beq.n	d7622 <__aeabi_dmul+0x206>
   d7608:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d760c:	bf18      	it	ne
   d760e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7612:	d1d1      	bne.n	d75b8 <__aeabi_dmul+0x19c>
   d7614:	ea81 0103 	eor.w	r1, r1, r3
   d7618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d761c:	f04f 0000 	mov.w	r0, #0
   d7620:	bd70      	pop	{r4, r5, r6, pc}
   d7622:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7626:	bf06      	itte	eq
   d7628:	4610      	moveq	r0, r2
   d762a:	4619      	moveq	r1, r3
   d762c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7630:	d019      	beq.n	d7666 <__aeabi_dmul+0x24a>
   d7632:	ea94 0f0c 	teq	r4, ip
   d7636:	d102      	bne.n	d763e <__aeabi_dmul+0x222>
   d7638:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d763c:	d113      	bne.n	d7666 <__aeabi_dmul+0x24a>
   d763e:	ea95 0f0c 	teq	r5, ip
   d7642:	d105      	bne.n	d7650 <__aeabi_dmul+0x234>
   d7644:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7648:	bf1c      	itt	ne
   d764a:	4610      	movne	r0, r2
   d764c:	4619      	movne	r1, r3
   d764e:	d10a      	bne.n	d7666 <__aeabi_dmul+0x24a>
   d7650:	ea81 0103 	eor.w	r1, r1, r3
   d7654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7658:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d765c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7660:	f04f 0000 	mov.w	r0, #0
   d7664:	bd70      	pop	{r4, r5, r6, pc}
   d7666:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d766a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d766e:	bd70      	pop	{r4, r5, r6, pc}

000d7670 <__aeabi_ddiv>:
   d7670:	b570      	push	{r4, r5, r6, lr}
   d7672:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7676:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d767a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d767e:	bf1d      	ittte	ne
   d7680:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7684:	ea94 0f0c 	teqne	r4, ip
   d7688:	ea95 0f0c 	teqne	r5, ip
   d768c:	f000 f8a7 	bleq	d77de <__aeabi_ddiv+0x16e>
   d7690:	eba4 0405 	sub.w	r4, r4, r5
   d7694:	ea81 0e03 	eor.w	lr, r1, r3
   d7698:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d769c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d76a0:	f000 8088 	beq.w	d77b4 <__aeabi_ddiv+0x144>
   d76a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d76a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d76ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d76b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d76b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d76b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d76bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d76c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d76c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d76c8:	429d      	cmp	r5, r3
   d76ca:	bf08      	it	eq
   d76cc:	4296      	cmpeq	r6, r2
   d76ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d76d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d76d6:	d202      	bcs.n	d76de <__aeabi_ddiv+0x6e>
   d76d8:	085b      	lsrs	r3, r3, #1
   d76da:	ea4f 0232 	mov.w	r2, r2, rrx
   d76de:	1ab6      	subs	r6, r6, r2
   d76e0:	eb65 0503 	sbc.w	r5, r5, r3
   d76e4:	085b      	lsrs	r3, r3, #1
   d76e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d76ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d76ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d76f2:	ebb6 0e02 	subs.w	lr, r6, r2
   d76f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d76fa:	bf22      	ittt	cs
   d76fc:	1ab6      	subcs	r6, r6, r2
   d76fe:	4675      	movcs	r5, lr
   d7700:	ea40 000c 	orrcs.w	r0, r0, ip
   d7704:	085b      	lsrs	r3, r3, #1
   d7706:	ea4f 0232 	mov.w	r2, r2, rrx
   d770a:	ebb6 0e02 	subs.w	lr, r6, r2
   d770e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7712:	bf22      	ittt	cs
   d7714:	1ab6      	subcs	r6, r6, r2
   d7716:	4675      	movcs	r5, lr
   d7718:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d771c:	085b      	lsrs	r3, r3, #1
   d771e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7722:	ebb6 0e02 	subs.w	lr, r6, r2
   d7726:	eb75 0e03 	sbcs.w	lr, r5, r3
   d772a:	bf22      	ittt	cs
   d772c:	1ab6      	subcs	r6, r6, r2
   d772e:	4675      	movcs	r5, lr
   d7730:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7734:	085b      	lsrs	r3, r3, #1
   d7736:	ea4f 0232 	mov.w	r2, r2, rrx
   d773a:	ebb6 0e02 	subs.w	lr, r6, r2
   d773e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7742:	bf22      	ittt	cs
   d7744:	1ab6      	subcs	r6, r6, r2
   d7746:	4675      	movcs	r5, lr
   d7748:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d774c:	ea55 0e06 	orrs.w	lr, r5, r6
   d7750:	d018      	beq.n	d7784 <__aeabi_ddiv+0x114>
   d7752:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7756:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d775a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d775e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7762:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7766:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d776a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d776e:	d1c0      	bne.n	d76f2 <__aeabi_ddiv+0x82>
   d7770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7774:	d10b      	bne.n	d778e <__aeabi_ddiv+0x11e>
   d7776:	ea41 0100 	orr.w	r1, r1, r0
   d777a:	f04f 0000 	mov.w	r0, #0
   d777e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7782:	e7b6      	b.n	d76f2 <__aeabi_ddiv+0x82>
   d7784:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7788:	bf04      	itt	eq
   d778a:	4301      	orreq	r1, r0
   d778c:	2000      	moveq	r0, #0
   d778e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7792:	bf88      	it	hi
   d7794:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7798:	f63f aeaf 	bhi.w	d74fa <__aeabi_dmul+0xde>
   d779c:	ebb5 0c03 	subs.w	ip, r5, r3
   d77a0:	bf04      	itt	eq
   d77a2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d77a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d77aa:	f150 0000 	adcs.w	r0, r0, #0
   d77ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d77b2:	bd70      	pop	{r4, r5, r6, pc}
   d77b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d77b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d77bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d77c0:	bfc2      	ittt	gt
   d77c2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d77c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d77ca:	bd70      	popgt	{r4, r5, r6, pc}
   d77cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d77d0:	f04f 0e00 	mov.w	lr, #0
   d77d4:	3c01      	subs	r4, #1
   d77d6:	e690      	b.n	d74fa <__aeabi_dmul+0xde>
   d77d8:	ea45 0e06 	orr.w	lr, r5, r6
   d77dc:	e68d      	b.n	d74fa <__aeabi_dmul+0xde>
   d77de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d77e2:	ea94 0f0c 	teq	r4, ip
   d77e6:	bf08      	it	eq
   d77e8:	ea95 0f0c 	teqeq	r5, ip
   d77ec:	f43f af3b 	beq.w	d7666 <__aeabi_dmul+0x24a>
   d77f0:	ea94 0f0c 	teq	r4, ip
   d77f4:	d10a      	bne.n	d780c <__aeabi_ddiv+0x19c>
   d77f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d77fa:	f47f af34 	bne.w	d7666 <__aeabi_dmul+0x24a>
   d77fe:	ea95 0f0c 	teq	r5, ip
   d7802:	f47f af25 	bne.w	d7650 <__aeabi_dmul+0x234>
   d7806:	4610      	mov	r0, r2
   d7808:	4619      	mov	r1, r3
   d780a:	e72c      	b.n	d7666 <__aeabi_dmul+0x24a>
   d780c:	ea95 0f0c 	teq	r5, ip
   d7810:	d106      	bne.n	d7820 <__aeabi_ddiv+0x1b0>
   d7812:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7816:	f43f aefd 	beq.w	d7614 <__aeabi_dmul+0x1f8>
   d781a:	4610      	mov	r0, r2
   d781c:	4619      	mov	r1, r3
   d781e:	e722      	b.n	d7666 <__aeabi_dmul+0x24a>
   d7820:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7824:	bf18      	it	ne
   d7826:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d782a:	f47f aec5 	bne.w	d75b8 <__aeabi_dmul+0x19c>
   d782e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7832:	f47f af0d 	bne.w	d7650 <__aeabi_dmul+0x234>
   d7836:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d783a:	f47f aeeb 	bne.w	d7614 <__aeabi_dmul+0x1f8>
   d783e:	e712      	b.n	d7666 <__aeabi_dmul+0x24a>

000d7840 <__gedf2>:
   d7840:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7844:	e006      	b.n	d7854 <__cmpdf2+0x4>
   d7846:	bf00      	nop

000d7848 <__ledf2>:
   d7848:	f04f 0c01 	mov.w	ip, #1
   d784c:	e002      	b.n	d7854 <__cmpdf2+0x4>
   d784e:	bf00      	nop

000d7850 <__cmpdf2>:
   d7850:	f04f 0c01 	mov.w	ip, #1
   d7854:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7858:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d785c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7864:	bf18      	it	ne
   d7866:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d786a:	d01b      	beq.n	d78a4 <__cmpdf2+0x54>
   d786c:	b001      	add	sp, #4
   d786e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7872:	bf0c      	ite	eq
   d7874:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7878:	ea91 0f03 	teqne	r1, r3
   d787c:	bf02      	ittt	eq
   d787e:	ea90 0f02 	teqeq	r0, r2
   d7882:	2000      	moveq	r0, #0
   d7884:	4770      	bxeq	lr
   d7886:	f110 0f00 	cmn.w	r0, #0
   d788a:	ea91 0f03 	teq	r1, r3
   d788e:	bf58      	it	pl
   d7890:	4299      	cmppl	r1, r3
   d7892:	bf08      	it	eq
   d7894:	4290      	cmpeq	r0, r2
   d7896:	bf2c      	ite	cs
   d7898:	17d8      	asrcs	r0, r3, #31
   d789a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d789e:	f040 0001 	orr.w	r0, r0, #1
   d78a2:	4770      	bx	lr
   d78a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d78a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d78ac:	d102      	bne.n	d78b4 <__cmpdf2+0x64>
   d78ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d78b2:	d107      	bne.n	d78c4 <__cmpdf2+0x74>
   d78b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d78b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d78bc:	d1d6      	bne.n	d786c <__cmpdf2+0x1c>
   d78be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d78c2:	d0d3      	beq.n	d786c <__cmpdf2+0x1c>
   d78c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d78c8:	4770      	bx	lr
   d78ca:	bf00      	nop

000d78cc <__aeabi_cdrcmple>:
   d78cc:	4684      	mov	ip, r0
   d78ce:	4610      	mov	r0, r2
   d78d0:	4662      	mov	r2, ip
   d78d2:	468c      	mov	ip, r1
   d78d4:	4619      	mov	r1, r3
   d78d6:	4663      	mov	r3, ip
   d78d8:	e000      	b.n	d78dc <__aeabi_cdcmpeq>
   d78da:	bf00      	nop

000d78dc <__aeabi_cdcmpeq>:
   d78dc:	b501      	push	{r0, lr}
   d78de:	f7ff ffb7 	bl	d7850 <__cmpdf2>
   d78e2:	2800      	cmp	r0, #0
   d78e4:	bf48      	it	mi
   d78e6:	f110 0f00 	cmnmi.w	r0, #0
   d78ea:	bd01      	pop	{r0, pc}

000d78ec <__aeabi_dcmpeq>:
   d78ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d78f0:	f7ff fff4 	bl	d78dc <__aeabi_cdcmpeq>
   d78f4:	bf0c      	ite	eq
   d78f6:	2001      	moveq	r0, #1
   d78f8:	2000      	movne	r0, #0
   d78fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d78fe:	bf00      	nop

000d7900 <__aeabi_dcmplt>:
   d7900:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7904:	f7ff ffea 	bl	d78dc <__aeabi_cdcmpeq>
   d7908:	bf34      	ite	cc
   d790a:	2001      	movcc	r0, #1
   d790c:	2000      	movcs	r0, #0
   d790e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7912:	bf00      	nop

000d7914 <__aeabi_dcmple>:
   d7914:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7918:	f7ff ffe0 	bl	d78dc <__aeabi_cdcmpeq>
   d791c:	bf94      	ite	ls
   d791e:	2001      	movls	r0, #1
   d7920:	2000      	movhi	r0, #0
   d7922:	f85d fb08 	ldr.w	pc, [sp], #8
   d7926:	bf00      	nop

000d7928 <__aeabi_dcmpge>:
   d7928:	f84d ed08 	str.w	lr, [sp, #-8]!
   d792c:	f7ff ffce 	bl	d78cc <__aeabi_cdrcmple>
   d7930:	bf94      	ite	ls
   d7932:	2001      	movls	r0, #1
   d7934:	2000      	movhi	r0, #0
   d7936:	f85d fb08 	ldr.w	pc, [sp], #8
   d793a:	bf00      	nop

000d793c <__aeabi_dcmpgt>:
   d793c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7940:	f7ff ffc4 	bl	d78cc <__aeabi_cdrcmple>
   d7944:	bf34      	ite	cc
   d7946:	2001      	movcc	r0, #1
   d7948:	2000      	movcs	r0, #0
   d794a:	f85d fb08 	ldr.w	pc, [sp], #8
   d794e:	bf00      	nop

000d7950 <__aeabi_dcmpun>:
   d7950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7958:	d102      	bne.n	d7960 <__aeabi_dcmpun+0x10>
   d795a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d795e:	d10a      	bne.n	d7976 <__aeabi_dcmpun+0x26>
   d7960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7968:	d102      	bne.n	d7970 <__aeabi_dcmpun+0x20>
   d796a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d796e:	d102      	bne.n	d7976 <__aeabi_dcmpun+0x26>
   d7970:	f04f 0000 	mov.w	r0, #0
   d7974:	4770      	bx	lr
   d7976:	f04f 0001 	mov.w	r0, #1
   d797a:	4770      	bx	lr

000d797c <__aeabi_d2iz>:
   d797c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7984:	d215      	bcs.n	d79b2 <__aeabi_d2iz+0x36>
   d7986:	d511      	bpl.n	d79ac <__aeabi_d2iz+0x30>
   d7988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d798c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7990:	d912      	bls.n	d79b8 <__aeabi_d2iz+0x3c>
   d7992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d799a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d799e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d79a2:	fa23 f002 	lsr.w	r0, r3, r2
   d79a6:	bf18      	it	ne
   d79a8:	4240      	negne	r0, r0
   d79aa:	4770      	bx	lr
   d79ac:	f04f 0000 	mov.w	r0, #0
   d79b0:	4770      	bx	lr
   d79b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d79b6:	d105      	bne.n	d79c4 <__aeabi_d2iz+0x48>
   d79b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d79bc:	bf08      	it	eq
   d79be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d79c2:	4770      	bx	lr
   d79c4:	f04f 0000 	mov.w	r0, #0
   d79c8:	4770      	bx	lr
   d79ca:	bf00      	nop

000d79cc <__aeabi_d2uiz>:
   d79cc:	004a      	lsls	r2, r1, #1
   d79ce:	d211      	bcs.n	d79f4 <__aeabi_d2uiz+0x28>
   d79d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d79d4:	d211      	bcs.n	d79fa <__aeabi_d2uiz+0x2e>
   d79d6:	d50d      	bpl.n	d79f4 <__aeabi_d2uiz+0x28>
   d79d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d79dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d79e0:	d40e      	bmi.n	d7a00 <__aeabi_d2uiz+0x34>
   d79e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d79e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d79ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d79ee:	fa23 f002 	lsr.w	r0, r3, r2
   d79f2:	4770      	bx	lr
   d79f4:	f04f 0000 	mov.w	r0, #0
   d79f8:	4770      	bx	lr
   d79fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d79fe:	d102      	bne.n	d7a06 <__aeabi_d2uiz+0x3a>
   d7a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7a04:	4770      	bx	lr
   d7a06:	f04f 0000 	mov.w	r0, #0
   d7a0a:	4770      	bx	lr

000d7a0c <__aeabi_d2f>:
   d7a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7a14:	bf24      	itt	cs
   d7a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7a1e:	d90d      	bls.n	d7a3c <__aeabi_d2f+0x30>
   d7a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7a34:	bf08      	it	eq
   d7a36:	f020 0001 	biceq.w	r0, r0, #1
   d7a3a:	4770      	bx	lr
   d7a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7a40:	d121      	bne.n	d7a86 <__aeabi_d2f+0x7a>
   d7a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7a46:	bfbc      	itt	lt
   d7a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7a4c:	4770      	bxlt	lr
   d7a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7a56:	f1c2 0218 	rsb	r2, r2, #24
   d7a5a:	f1c2 0c20 	rsb	ip, r2, #32
   d7a5e:	fa10 f30c 	lsls.w	r3, r0, ip
   d7a62:	fa20 f002 	lsr.w	r0, r0, r2
   d7a66:	bf18      	it	ne
   d7a68:	f040 0001 	orrne.w	r0, r0, #1
   d7a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7a74:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7a78:	ea40 000c 	orr.w	r0, r0, ip
   d7a7c:	fa23 f302 	lsr.w	r3, r3, r2
   d7a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7a84:	e7cc      	b.n	d7a20 <__aeabi_d2f+0x14>
   d7a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7a8a:	d107      	bne.n	d7a9c <__aeabi_d2f+0x90>
   d7a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7a90:	bf1e      	ittt	ne
   d7a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7a9a:	4770      	bxne	lr
   d7a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7aa8:	4770      	bx	lr
   d7aaa:	bf00      	nop

000d7aac <__cxa_atexit>:
   d7aac:	b510      	push	{r4, lr}
   d7aae:	4c05      	ldr	r4, [pc, #20]	; (d7ac4 <__cxa_atexit+0x18>)
   d7ab0:	4613      	mov	r3, r2
   d7ab2:	b12c      	cbz	r4, d7ac0 <__cxa_atexit+0x14>
   d7ab4:	460a      	mov	r2, r1
   d7ab6:	4601      	mov	r1, r0
   d7ab8:	2002      	movs	r0, #2
   d7aba:	f3af 8000 	nop.w
   d7abe:	bd10      	pop	{r4, pc}
   d7ac0:	4620      	mov	r0, r4
   d7ac2:	bd10      	pop	{r4, pc}
   d7ac4:	00000000 	.word	0x00000000

000d7ac8 <memcmp>:
   d7ac8:	b510      	push	{r4, lr}
   d7aca:	3901      	subs	r1, #1
   d7acc:	4402      	add	r2, r0
   d7ace:	4290      	cmp	r0, r2
   d7ad0:	d007      	beq.n	d7ae2 <memcmp+0x1a>
   d7ad2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7ad6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7ada:	42a3      	cmp	r3, r4
   d7adc:	d0f7      	beq.n	d7ace <memcmp+0x6>
   d7ade:	1b18      	subs	r0, r3, r4
   d7ae0:	bd10      	pop	{r4, pc}
   d7ae2:	2000      	movs	r0, #0
   d7ae4:	bd10      	pop	{r4, pc}

000d7ae6 <memcpy>:
   d7ae6:	b510      	push	{r4, lr}
   d7ae8:	1e43      	subs	r3, r0, #1
   d7aea:	440a      	add	r2, r1
   d7aec:	4291      	cmp	r1, r2
   d7aee:	d004      	beq.n	d7afa <memcpy+0x14>
   d7af0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7af4:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7af8:	e7f8      	b.n	d7aec <memcpy+0x6>
   d7afa:	bd10      	pop	{r4, pc}

000d7afc <memset>:
   d7afc:	4402      	add	r2, r0
   d7afe:	4603      	mov	r3, r0
   d7b00:	4293      	cmp	r3, r2
   d7b02:	d002      	beq.n	d7b0a <memset+0xe>
   d7b04:	f803 1b01 	strb.w	r1, [r3], #1
   d7b08:	e7fa      	b.n	d7b00 <memset+0x4>
   d7b0a:	4770      	bx	lr

000d7b0c <srand>:
   d7b0c:	b538      	push	{r3, r4, r5, lr}
   d7b0e:	4b12      	ldr	r3, [pc, #72]	; (d7b58 <srand+0x4c>)
   d7b10:	681c      	ldr	r4, [r3, #0]
   d7b12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7b14:	4605      	mov	r5, r0
   d7b16:	b9d3      	cbnz	r3, d7b4e <srand+0x42>
   d7b18:	2018      	movs	r0, #24
   d7b1a:	f7fe f9d5 	bl	d5ec8 <malloc>
   d7b1e:	f243 330e 	movw	r3, #13070	; 0x330e
   d7b22:	63a0      	str	r0, [r4, #56]	; 0x38
   d7b24:	8003      	strh	r3, [r0, #0]
   d7b26:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7b2a:	8043      	strh	r3, [r0, #2]
   d7b2c:	f241 2334 	movw	r3, #4660	; 0x1234
   d7b30:	8083      	strh	r3, [r0, #4]
   d7b32:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7b36:	80c3      	strh	r3, [r0, #6]
   d7b38:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7b3c:	8103      	strh	r3, [r0, #8]
   d7b3e:	2305      	movs	r3, #5
   d7b40:	8143      	strh	r3, [r0, #10]
   d7b42:	230b      	movs	r3, #11
   d7b44:	8183      	strh	r3, [r0, #12]
   d7b46:	2201      	movs	r2, #1
   d7b48:	2300      	movs	r3, #0
   d7b4a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7b4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7b50:	2200      	movs	r2, #0
   d7b52:	611d      	str	r5, [r3, #16]
   d7b54:	615a      	str	r2, [r3, #20]
   d7b56:	bd38      	pop	{r3, r4, r5, pc}
   d7b58:	2003dff8 	.word	0x2003dff8

000d7b5c <strlen>:
   d7b5c:	4603      	mov	r3, r0
   d7b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7b62:	2a00      	cmp	r2, #0
   d7b64:	d1fb      	bne.n	d7b5e <strlen+0x2>
   d7b66:	1a18      	subs	r0, r3, r0
   d7b68:	3801      	subs	r0, #1
   d7b6a:	4770      	bx	lr

000d7b6c <dynalib_user>:
   d7b6c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d7b7c:	0000 0000                                   ....

000d7b80 <_ZTVN8particle13__SPISettingsE>:
	...
   d7b88:	412d 000d                                   -A..

000d7b8c <_ZTV4File>:
	...
   d7b94:	40d3 000d 411f 000d 4107 000d 4101 000d     .@...A...A...A..
   d7ba4:	40b7 000d 40e1 000d 40db 000d 40d5 000d     .@...@...@...@..
   d7bb4:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d7bc4:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d7bd4:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d7be4:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   d7bf4:	2545 3e64 4d00 7861 6f62 6974 2078 6554     E%d>.Maxbotix Te
   d7c04:	7473 5400 6d69 3a65 0020 202c 6944 7473     st.Time: ., Dist
   d7c14:	6e61 6563 6928 296e 203a 6600 6961 656c     ance(in): .faile
   d7c24:	2064 6f74 6f20 6570 206e 6163 6472 6400     d to open card.d
   d7c34:	7369 6174 636e 2e65 7874 0074 706f 6e65     istance.txt.open
   d7c44:	6e69 2067 6574 7473 742e 7478 6620 726f     ing test.txt for
   d7c54:	7720 6972 6574 6620 6961 656c 0064 002c      write failed.,.

000d7c64 <_ZTVN5spark13CellularClassE>:
	...
   d7c6c:	5f6f 000d 5f65 000d 5f5b 000d 5f11 000d     o_..e_..[_..._..
   d7c7c:	5f4f 000d 5f43 000d 5f37 000d 5f2f 000d     O_..C_..7_../_..
   d7c8c:	5f25 000d 5f1b 000d 637d 000d               %_..._..}c..

000d7c98 <_ZTVN5spark13EthernetClassE>:
	...
   d7ca0:	6019 000d 600f 000d 6005 000d 5ffb 000d     .`...`...`..._..
   d7cb0:	5fef 000d 5fe3 000d 5fd7 000d 5fcf 000d     ._..._..._..._..
   d7cc0:	5fc5 000d 5fbb 000d 637d 000d               ._..._..}c..

000d7ccc <_ZTV7TwoWire>:
	...
   d7cd4:	6039 000d 6083 000d 605b 000d 603b 000d     9`...`..[`..;`..
   d7ce4:	6063 000d 606b 000d 6073 000d 607b 000d     c`..k`..s`..{`..

000d7cf4 <_ZTV9IPAddress>:
	...
   d7cfc:	60cd 000d 60bd 000d 60bf 000d 6162 6475     .`...`...`..baud
   d7d0c:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d7d1c:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d7d2c:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d7d3c:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d7d4c:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d7d5c:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d7d6c:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d7d7c:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d7d8c:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d7d9c:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d7dac:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d7dbc:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d7dcc:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d7ddc:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d7de8 <_ZTVN5spark9MeshClassE>:
	...
   d7df0:	620f 000d 6205 000d 61fb 000d 61f1 000d     .b...b...a...a..
   d7e00:	61e5 000d 61d9 000d 61cd 000d 61c5 000d     .a...a...a...a..
   d7e10:	61bb 000d 61b1 000d 637d 000d               .a...a..}c..

000d7e1c <_ZTVN5spark12NetworkClassE>:
	...
   d7e24:	6315 000d 631f 000d 6329 000d 6333 000d     .c...c..)c..3c..
   d7e34:	633d 000d 6349 000d 6355 000d 6361 000d     =c..Ic..Uc..ac..
   d7e44:	6369 000d 6373 000d 637d 000d 616e 006e     ic..sc..}c..nan.
   d7e54:	766f 0066 002e 6e69 0066 0000               ovf...inf...

000d7e60 <_ZTV8SPIClass>:
	...
   d7e68:	677d 000d 677f 000d                         }g...g..

000d7e70 <_ZL14clock_divisors>:
   d7e70:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   d7e80:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d7e90:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d7ea0:	0000 0000                                   ....

000d7ea4 <_ZTV11USARTSerial>:
	...
   d7eac:	69a1 000d 69f1 000d 69ff 000d 645d 000d     .i...i...i..]d..
   d7ebc:	69b5 000d 69d7 000d 69c3 000d 69eb 000d     .i...i...i...i..
   d7ecc:	69a3 000d 69a7 000d                         .i...i..

000d7ed4 <_ZTV9USBSerial>:
	...
   d7edc:	6add 000d 6b2d 000d 6b3b 000d 645d 000d     .j..-k..;k..]d..
   d7eec:	6b19 000d 6adf 000d 6af5 000d 6b27 000d     .k...j...j..'k..
   d7efc:	6b0b 000d 6ad9 000d                         .k...j..

000d7f04 <__sf_fake_stdin>:
	...

000d7f24 <__sf_fake_stdout>:
	...

000d7f44 <__sf_fake_stderr>:
	...
   d7f64:	0043                                        C.

000d7f66 <link_const_variable_data_end>:
	...

000d7f68 <link_constructors_location>:
   d7f68:	000d43a5 	.word	0x000d43a5
   d7f6c:	000d4409 	.word	0x000d4409
   d7f70:	000d4af1 	.word	0x000d4af1
   d7f74:	000d5101 	.word	0x000d5101
   d7f78:	000d5125 	.word	0x000d5125
   d7f7c:	000d5129 	.word	0x000d5129
   d7f80:	000d544d 	.word	0x000d544d
   d7f84:	000d5451 	.word	0x000d5451
   d7f88:	000d5455 	.word	0x000d5455
   d7f8c:	000d5459 	.word	0x000d5459
   d7f90:	000d545d 	.word	0x000d545d
   d7f94:	000d5997 	.word	0x000d5997
   d7f98:	000d599b 	.word	0x000d599b
   d7f9c:	000d599f 	.word	0x000d599f
   d7fa0:	000d5a45 	.word	0x000d5a45
   d7fa4:	000d5a49 	.word	0x000d5a49
   d7fa8:	000d5a4d 	.word	0x000d5a4d
   d7fac:	000d5f01 	.word	0x000d5f01
   d7fb0:	000d5f79 	.word	0x000d5f79
   d7fb4:	000d6025 	.word	0x000d6025
   d7fb8:	000d61a1 	.word	0x000d61a1
   d7fbc:	000d62c5 	.word	0x000d62c5
   d7fc0:	000d6449 	.word	0x000d6449
   d7fc4:	000d6761 	.word	0x000d6761
   d7fc8:	000d6909 	.word	0x000d6909
   d7fcc:	000d698d 	.word	0x000d698d
   d7fd0:	000d6dc9 	.word	0x000d6dc9
   d7fd4:	000d6e1d 	.word	0x000d6e1d
   d7fd8:	000d6ee1 	.word	0x000d6ee1
   d7fdc:	000d6f65 	.word	0x000d6f65
   d7fe0:	000d6fe9 	.word	0x000d6fe9

000d7fe4 <link_constructors_end>:
	...
