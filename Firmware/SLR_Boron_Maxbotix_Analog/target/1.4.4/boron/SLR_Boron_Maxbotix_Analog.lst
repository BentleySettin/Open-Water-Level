
/Users/pjb/Dropbox/Particle_Projects/Seaport_SLR_Observation/Seaport_Tide-SLR_Maxbotix_Arduino/Firmware/SLR_Boron_Maxbotix_Analog/target/1.4.4/boron/SLR_Boron_Maxbotix_Analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004040  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000180f8  2**0
                  CONTENTS
  4 .data         0000006c  2003df84  000d8060  0000df84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000800  2003dff0  2003dff0  0001dff0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d80cc  000d80cc  000180cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d80f4  000d80f4  000180f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0016e247  00000000  00000000  000180f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001cf5f  00000000  00000000  0018633f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00026d6f  00000000  00000000  001a329e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029d0  00000000  00000000  001ca00d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000051b0  00000000  00000000  001cc9dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004a502  00000000  00000000  001d1b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004f145  00000000  00000000  0021c08f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010acba  00000000  00000000  0026b1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000da3c  00000000  00000000  00375e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fd96 	bl	d7b62 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fd9b 	bl	d7b78 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003df84 	.word	0x2003df84
   d404c:	000d8060 	.word	0x000d8060
   d4050:	2003dff0 	.word	0x2003dff0
   d4054:	2003dff0 	.word	0x2003dff0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fe51 	bl	d6d04 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d8060 	.word	0x000d8060
   d4084:	000d7fe4 	.word	0x000d7fe4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b87c 	b.w	d4184 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f897 	bl	d41c0 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 be03 	b.w	d6ca0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bf4f 	b.w	d5f3c <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bf55 	b.w	d5f4c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bf53 	b.w	d5f4c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40b6:	7c03      	ldrb	r3, [r0, #16]
   d40b8:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40bc:	4602      	mov	r2, r0
   d40be:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40c2:	b12b      	cbz	r3, d40d0 <_ZN4File9availableEv+0x1a>
   d40c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40c6:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c8:	1a18      	subs	r0, r3, r0
   d40ca:	bf48      	it	mi
   d40cc:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40d0:	4770      	bx	lr

000d40d2 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40d2:	4770      	bx	lr

000d40d4 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d40d4:	3010      	adds	r0, #16
   d40d6:	f000 bbed 	b.w	d48b4 <_ZN7FatFile4syncEv>

000d40da <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d40da:	3010      	adds	r0, #16
   d40dc:	f000 bb02 	b.w	d46e4 <_ZN7FatFile4peekEv>

000d40e0 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d40e0:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d40e2:	2201      	movs	r2, #1
   d40e4:	f10d 0107 	add.w	r1, sp, #7
   d40e8:	3010      	adds	r0, #16
   d40ea:	f000 fa48 	bl	d457e <_ZN7FatFile4readEPvj>
   d40ee:	2801      	cmp	r0, #1
   d40f0:	bf0c      	ite	eq
   d40f2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d40f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   d40fa:	b003      	add	sp, #12
   d40fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d4100 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4100:	3010      	adds	r0, #16
   d4102:	f000 bc63 	b.w	d49cc <_ZN7FatFile5writeEPKvj>

000d4106 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4106:	b507      	push	{r0, r1, r2, lr}
   d4108:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d410a:	2201      	movs	r2, #1
   d410c:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4110:	3010      	adds	r0, #16
   d4112:	4619      	mov	r1, r3
   d4114:	f000 fc5a 	bl	d49cc <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4118:	b003      	add	sp, #12
   d411a:	f85d fb04 	ldr.w	pc, [sp], #4

000d411e <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d411e:	b510      	push	{r4, lr}
   d4120:	2134      	movs	r1, #52	; 0x34
   d4122:	4604      	mov	r4, r0
   d4124:	f002 feb5 	bl	d6e92 <_ZdlPvj>
   d4128:	4620      	mov	r0, r4
   d412a:	bd10      	pop	{r4, pc}

000d412c <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d412c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d412e:	4602      	mov	r2, r0
   d4130:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4132:	7913      	ldrb	r3, [r2, #4]
   d4134:	6895      	ldr	r5, [r2, #8]
   d4136:	b133      	cbz	r3, d4146 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4138:	b93d      	cbnz	r5, d414a <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d413a:	490c      	ldr	r1, [pc, #48]	; (d416c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d413c:	b004      	add	sp, #16
   d413e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4142:	f002 b9db 	b.w	d64fc <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4146:	4b0a      	ldr	r3, [pc, #40]	; (d4170 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4148:	e000      	b.n	d414c <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d414a:	4b0a      	ldr	r3, [pc, #40]	; (d4174 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d414c:	7b16      	ldrb	r6, [r2, #12]
   d414e:	4c0a      	ldr	r4, [pc, #40]	; (d4178 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4150:	490a      	ldr	r1, [pc, #40]	; (d417c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4152:	7b52      	ldrb	r2, [r2, #13]
   d4154:	9202      	str	r2, [sp, #8]
   d4156:	2e01      	cmp	r6, #1
   d4158:	bf08      	it	eq
   d415a:	4621      	moveq	r1, r4
   d415c:	9101      	str	r1, [sp, #4]
   d415e:	9500      	str	r5, [sp, #0]
   d4160:	4a07      	ldr	r2, [pc, #28]	; (d4180 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4162:	2100      	movs	r1, #0
   d4164:	f002 fafa 	bl	d675c <_ZN5Print11printf_implEbPKcz>
  }
   d4168:	b004      	add	sp, #16
   d416a:	bd70      	pop	{r4, r5, r6, pc}
   d416c:	000d7c41 	.word	0x000d7c41
   d4170:	000d7e2b 	.word	0x000d7e2b
   d4174:	000d7c30 	.word	0x000d7c30
   d4178:	000d7c39 	.word	0x000d7c39
   d417c:	000d7c3d 	.word	0x000d7c3d
   d4180:	000d7c57 	.word	0x000d7c57

000d4184 <setup>:
//------------------Turn off cellular for prelim testing
SYSTEM_MODE(MANUAL);
// SYSTEM_THREAD(ENABLED);

void setup(void)
{
   d4184:	b508      	push	{r3, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4186:	480c      	ldr	r0, [pc, #48]	; (d41b8 <setup+0x34>)
   d4188:	2300      	movs	r3, #0
   d418a:	4619      	mov	r1, r3
   d418c:	461a      	mov	r2, r3
   d418e:	6840      	ldr	r0, [r0, #4]
   d4190:	f001 feac 	bl	d5eec <network_off>
  Cellular.off();

  delay(5000); // to see response from begin command
   d4194:	f241 3088 	movw	r0, #5000	; 0x1388
   d4198:	f001 fee8 	bl	d5f6c <delay>

  Serial.begin(9600);
   d419c:	f002 fd3c 	bl	d6c18 <_Z16_fetch_usbserialv>
   d41a0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41a4:	f002 fd2c 	bl	d6c00 <_ZN9USBSerial5beginEl>
  Serial.println("Maxbotix Test");
   d41a8:	f002 fd36 	bl	d6c18 <_Z16_fetch_usbserialv>
   d41ac:	4903      	ldr	r1, [pc, #12]	; (d41bc <setup+0x38>)

}
   d41ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Cellular.off();

  delay(5000); // to see response from begin command

  Serial.begin(9600);
  Serial.println("Maxbotix Test");
   d41b2:	f002 b9b6 	b.w	d6522 <_ZN5Print7printlnEPKc>
   d41b6:	bf00      	nop
   d41b8:	2003e4a4 	.word	0x2003e4a4
   d41bc:	000d7c75 	.word	0x000d7c75

000d41c0 <loop>:

}

void loop(void)
{
   d41c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // Reinitialize sum variable prior to every loop execution
  dist_in_sum = 0; 
   d41c4:	4c84      	ldr	r4, [pc, #528]	; (d43d8 <loop+0x218>)

  for(j=0; j<100; j++){
   d41c6:	4d85      	ldr	r5, [pc, #532]	; (d43dc <loop+0x21c>)
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d41c8:	4f85      	ldr	r7, [pc, #532]	; (d43e0 <loop+0x220>)
}

void loop(void)
{
  // Reinitialize sum variable prior to every loop execution
  dist_in_sum = 0; 
   d41ca:	2300      	movs	r3, #0
   d41cc:	6023      	str	r3, [r4, #0]

  for(j=0; j<100; j++){
   d41ce:	2300      	movs	r3, #0
  Serial.println("Maxbotix Test");

}

void loop(void)
{
   d41d0:	b092      	sub	sp, #72	; 0x48
  // Reinitialize sum variable prior to every loop execution
  dist_in_sum = 0; 

  for(j=0; j<100; j++){
   d41d2:	602b      	str	r3, [r5, #0]
   d41d4:	682b      	ldr	r3, [r5, #0]
   d41d6:	2b63      	cmp	r3, #99	; 0x63
   d41d8:	f300 80bf 	bgt.w	d435a <loop+0x19a>
    // Read analog value and convert
    //Counts * (V range/count range) * (Inch range/V range)
    dist_in = analogRead(V_ultraS)*(3.3/2048)*(254/3.3);
   d41dc:	4b81      	ldr	r3, [pc, #516]	; (d43e4 <loop+0x224>)
   d41de:	f8df 8234 	ldr.w	r8, [pc, #564]	; d4414 <loop+0x254>
   d41e2:	8818      	ldrh	r0, [r3, #0]
   d41e4:	f002 fdf6 	bl	d6dd4 <analogRead>
   d41e8:	f003 f8f0 	bl	d73cc <__aeabi_i2d>
   d41ec:	a376      	add	r3, pc, #472	; (adr r3, d43c8 <loop+0x208>)
   d41ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41f2:	f003 f951 	bl	d7498 <__aeabi_dmul>
   d41f6:	a376      	add	r3, pc, #472	; (adr r3, d43d0 <loop+0x210>)
   d41f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41fc:	f003 f94c 	bl	d7498 <__aeabi_dmul>
   d4200:	f003 fc42 	bl	d7a88 <__aeabi_d2f>
    
    // Add new distance to cumulative value
    dist_in_sum += dist_in;
   d4204:	edd4 7a00 	vldr	s15, [r4]
  dist_in_sum = 0; 

  for(j=0; j<100; j++){
    // Read analog value and convert
    //Counts * (V range/count range) * (Inch range/V range)
    dist_in = analogRead(V_ultraS)*(3.3/2048)*(254/3.3);
   d4208:	f8c8 0000 	str.w	r0, [r8]
   d420c:	ee07 0a10 	vmov	s14, r0
    
    // Add new distance to cumulative value
    dist_in_sum += dist_in;
   d4210:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4214:	f04f 0901 	mov.w	r9, #1
   d4218:	edc4 7a00 	vstr	s15, [r4]

    // Print out distance
    Serial.print("Time: ");
   d421c:	f002 fcfc 	bl	d6c18 <_Z16_fetch_usbserialv>
   d4220:	4971      	ldr	r1, [pc, #452]	; (d43e8 <loop+0x228>)
   d4222:	f002 f96b 	bl	d64fc <_ZN5Print5printEPKc>
    Serial.print(Time.now());
   d4226:	f002 fcf7 	bl	d6c18 <_Z16_fetch_usbserialv>
   d422a:	4606      	mov	r6, r0
   d422c:	f002 fbe4 	bl	d69f8 <_ZN9TimeClass3nowEv>
   d4230:	220a      	movs	r2, #10
   d4232:	4601      	mov	r1, r0
   d4234:	4630      	mov	r0, r6
   d4236:	f002 f9ad 	bl	d6594 <_ZN5Print5printEli>
    Serial.print(", Distance(in): ");
   d423a:	f002 fced 	bl	d6c18 <_Z16_fetch_usbserialv>
   d423e:	496b      	ldr	r1, [pc, #428]	; (d43ec <loop+0x22c>)
   d4240:	f002 f95c 	bl	d64fc <_ZN5Print5printEPKc>
    
    Serial.println(dist_in);
   d4244:	f002 fce8 	bl	d6c18 <_Z16_fetch_usbserialv>
   d4248:	4606      	mov	r6, r0
   d424a:	f8d8 0000 	ldr.w	r0, [r8]
   d424e:	f003 f8cf 	bl	d73f0 <__aeabi_f2d>
   d4252:	ec41 0b10 	vmov	d0, r0, r1
   d4256:	2102      	movs	r1, #2
   d4258:	4630      	mov	r0, r6
   d425a:	f002 fa74 	bl	d6746 <_ZN5Print7printlnEdi>
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d425e:	4e64      	ldr	r6, [pc, #400]	; (d43f0 <loop+0x230>)
   d4260:	9703      	str	r7, [sp, #12]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4266:	9207      	str	r2, [sp, #28]
 public:
  File() {}
   d4268:	4a62      	ldr	r2, [pc, #392]	; (d43f4 <loop+0x234>)
   d426a:	9205      	str	r2, [sp, #20]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d426c:	2300      	movs	r3, #0
   d426e:	4a62      	ldr	r2, [pc, #392]	; (d43f8 <loop+0x238>)
   d4270:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d4274:	f506 6a8c 	add.w	sl, r6, #1120	; 0x460
   d4278:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d427c:	9306      	str	r3, [sp, #24]
   d427e:	9201      	str	r2, [sp, #4]
   d4280:	f88d 3008 	strb.w	r3, [sp, #8]
   d4284:	f88d 3011 	strb.w	r3, [sp, #17]
   d4288:	220e      	movs	r2, #14
   d428a:	ab01      	add	r3, sp, #4
   d428c:	f206 416c 	addw	r1, r6, #1132	; 0x46c
   d4290:	4650      	mov	r0, sl
   d4292:	f88d 9010 	strb.w	r9, [sp, #16]
   d4296:	f001 f9ed 	bl	d5674 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d429a:	b370      	cbz	r0, d42fa <loop+0x13a>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d429c:	f8c6 a000 	str.w	sl, [r6]
    vwd()->close();
   d42a0:	f206 403c 	addw	r0, r6, #1084	; 0x43c
   d42a4:	f000 fb3c 	bl	d4920 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d42a8:	4649      	mov	r1, r9
   d42aa:	4630      	mov	r0, r6
   d42ac:	f001 f887 	bl	d53be <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d42b0:	4601      	mov	r1, r0
   d42b2:	b148      	cbz	r0, d42c8 <loop+0x108>
   d42b4:	f8df 9138 	ldr.w	r9, [pc, #312]	; d43f0 <loop+0x230>
   d42b8:	f209 463c 	addw	r6, r9, #1084	; 0x43c
   d42bc:	4649      	mov	r1, r9
   d42be:	4630      	mov	r0, r6
   d42c0:	f000 f945 	bl	d454e <_ZN7FatFile8openRootEP9FatVolume>
   d42c4:	b1c8      	cbz	r0, d42fa <loop+0x13a>
   d42c6:	e005      	b.n	d42d4 <loop+0x114>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d42c8:	4630      	mov	r0, r6
   d42ca:	f001 f878 	bl	d53be <_ZN9FatVolume4initEh>
   d42ce:	2800      	cmp	r0, #0
   d42d0:	d1f0      	bne.n	d42b4 <loop+0xf4>
   d42d2:	e012      	b.n	d42fa <loop+0x13a>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d42d4:	f899 343c 	ldrb.w	r3, [r9, #1084]	; 0x43c
   d42d8:	f013 0f70 	tst.w	r3, #112	; 0x70
   d42dc:	d00d      	beq.n	d42fa <loop+0x13a>
      return false;
    }
    m_cwd = dir;
   d42de:	4b47      	ldr	r3, [pc, #284]	; (d43fc <loop+0x23c>)
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d42e0:	4a47      	ldr	r2, [pc, #284]	; (d4400 <loop+0x240>)
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
      return false;
    }
    m_cwd = dir;
   d42e2:	601e      	str	r6, [r3, #0]
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d42e4:	4631      	mov	r1, r6
   d42e6:	f244 2302 	movw	r3, #16898	; 0x4202
   d42ea:	a809      	add	r0, sp, #36	; 0x24
   d42ec:	f000 fb1f 	bl	d492e <_ZN7FatFile4openEPS_PKci>
      Serial.println("failed to open card");
      return;
    }

    // open the file for write at end like the "Native SD library"
    if (!myFile.open("distance.txt", O_RDWR | O_CREAT | O_AT_END)) {
   d42f0:	b948      	cbnz	r0, d4306 <loop+0x146>
      Serial.println("opening test.txt for write failed");
   d42f2:	f002 fc91 	bl	d6c18 <_Z16_fetch_usbserialv>
   d42f6:	4943      	ldr	r1, [pc, #268]	; (d4404 <loop+0x244>)
   d42f8:	e002      	b.n	d4300 <loop+0x140>
    // Start SD stuff
    File myFile;

    // Initialize the library
    if (!sd.begin(SD_CHIP_SELECT, SPI_FULL_SPEED)) {
      Serial.println("failed to open card");
   d42fa:	f002 fc8d 	bl	d6c18 <_Z16_fetch_usbserialv>
   d42fe:	4942      	ldr	r1, [pc, #264]	; (d4408 <loop+0x248>)
      return;
    }

    // open the file for write at end like the "Native SD library"
    if (!myFile.open("distance.txt", O_RDWR | O_CREAT | O_AT_END)) {
      Serial.println("opening test.txt for write failed");
   d4300:	f002 f90f 	bl	d6522 <_ZN5Print7printlnEPKc>
      return;
   d4304:	e05d      	b.n	d43c2 <loop+0x202>
    }

    // Save to SD card
    myFile.print(Time.now());
   d4306:	f002 fb77 	bl	d69f8 <_ZN9TimeClass3nowEv>
   d430a:	220a      	movs	r2, #10
   d430c:	4601      	mov	r1, r0
   d430e:	a805      	add	r0, sp, #20
   d4310:	f002 f940 	bl	d6594 <_ZN5Print5printEli>
    myFile.print(",");
   d4314:	493d      	ldr	r1, [pc, #244]	; (d440c <loop+0x24c>)
   d4316:	a805      	add	r0, sp, #20
   d4318:	f002 f8f0 	bl	d64fc <_ZN5Print5printEPKc>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d431c:	f001 fc1a 	bl	d5b54 <HAL_Timer_Get_Milli_Seconds>
    myFile.print(millis());
   d4320:	220a      	movs	r2, #10
   d4322:	4601      	mov	r1, r0
   d4324:	a805      	add	r0, sp, #20
   d4326:	f002 f926 	bl	d6576 <_ZN5Print5printEmi>
    myFile.print(",");
   d432a:	4938      	ldr	r1, [pc, #224]	; (d440c <loop+0x24c>)
   d432c:	a805      	add	r0, sp, #20
   d432e:	f002 f8e5 	bl	d64fc <_ZN5Print5printEPKc>
    myFile.println(dist_in);
   d4332:	f8d8 0000 	ldr.w	r0, [r8]
   d4336:	f003 f85b 	bl	d73f0 <__aeabi_f2d>
   d433a:	ec41 0b10 	vmov	d0, r0, r1
   d433e:	2102      	movs	r1, #2
   d4340:	a805      	add	r0, sp, #20
   d4342:	f002 fa00 	bl	d6746 <_ZN5Print7printlnEdi>
    myFile.close();
   d4346:	a809      	add	r0, sp, #36	; 0x24
   d4348:	f000 faea 	bl	d4920 <_ZN7FatFile5closeEv>

    delay(100);
   d434c:	2064      	movs	r0, #100	; 0x64
   d434e:	f001 fe0d 	bl	d5f6c <delay>
void loop(void)
{
  // Reinitialize sum variable prior to every loop execution
  dist_in_sum = 0; 

  for(j=0; j<100; j++){
   d4352:	682b      	ldr	r3, [r5, #0]
   d4354:	3301      	adds	r3, #1
   d4356:	602b      	str	r3, [r5, #0]
   d4358:	e73c      	b.n	d41d4 <loop+0x14>
    myFile.close();

    delay(100);
  }
  
  dist_in_avg = dist_in_sum/j;
   d435a:	ee07 3a90 	vmov	s15, r3
   d435e:	edd4 6a00 	vldr	s13, [r4]
   d4362:	4d2b      	ldr	r5, [pc, #172]	; (d4410 <loop+0x250>)
   d4364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d436c:	ed85 7a00 	vstr	s14, [r5]

  Serial.print(j);
   d4370:	f002 fc52 	bl	d6c18 <_Z16_fetch_usbserialv>
   d4374:	4b19      	ldr	r3, [pc, #100]	; (d43dc <loop+0x21c>)
   d4376:	220a      	movs	r2, #10
   d4378:	6819      	ldr	r1, [r3, #0]
   d437a:	f002 f92d 	bl	d65d8 <_ZN5Print5printEii>
  Serial.print(",");
   d437e:	f002 fc4b 	bl	d6c18 <_Z16_fetch_usbserialv>
   d4382:	4922      	ldr	r1, [pc, #136]	; (d440c <loop+0x24c>)
   d4384:	f002 f8ba 	bl	d64fc <_ZN5Print5printEPKc>
  Serial.print(dist_in_sum);
   d4388:	f002 fc46 	bl	d6c18 <_Z16_fetch_usbserialv>
   d438c:	4606      	mov	r6, r0
   d438e:	6820      	ldr	r0, [r4, #0]
   d4390:	f003 f82e 	bl	d73f0 <__aeabi_f2d>
   d4394:	ec41 0b10 	vmov	d0, r0, r1
   d4398:	2102      	movs	r1, #2
   d439a:	4630      	mov	r0, r6
   d439c:	f002 f9d0 	bl	d6740 <_ZN5Print5printEdi>
  Serial.print(",");
   d43a0:	f002 fc3a 	bl	d6c18 <_Z16_fetch_usbserialv>
   d43a4:	4919      	ldr	r1, [pc, #100]	; (d440c <loop+0x24c>)
   d43a6:	f002 f8a9 	bl	d64fc <_ZN5Print5printEPKc>
  Serial.println(dist_in_avg);
   d43aa:	f002 fc35 	bl	d6c18 <_Z16_fetch_usbserialv>
   d43ae:	4604      	mov	r4, r0
   d43b0:	6828      	ldr	r0, [r5, #0]
   d43b2:	f003 f81d 	bl	d73f0 <__aeabi_f2d>
   d43b6:	ec41 0b10 	vmov	d0, r0, r1
   d43ba:	2102      	movs	r1, #2
   d43bc:	4620      	mov	r0, r4
   d43be:	f002 f9c2 	bl	d6746 <_ZN5Print7printlnEdi>
}
   d43c2:	b012      	add	sp, #72	; 0x48
   d43c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d43c8:	66666666 	.word	0x66666666
   d43cc:	3f5a6666 	.word	0x3f5a6666
   d43d0:	83e0f83e 	.word	0x83e0f83e
   d43d4:	40533e0f 	.word	0x40533e0f
   d43d8:	2003e48c 	.word	0x2003e48c
   d43dc:	2003dff8 	.word	0x2003dff8
   d43e0:	02faf080 	.word	0x02faf080
   d43e4:	2003df84 	.word	0x2003df84
   d43e8:	000d7c83 	.word	0x000d7c83
   d43ec:	000d7c8a 	.word	0x000d7c8a
   d43f0:	2003e000 	.word	0x2003e000
   d43f4:	000d7c10 	.word	0x000d7c10
   d43f8:	000d7c04 	.word	0x000d7c04
   d43fc:	2003e490 	.word	0x2003e490
   d4400:	000d7c9b 	.word	0x000d7c9b
   d4404:	000d7cbc 	.word	0x000d7cbc
   d4408:	000d7ca8 	.word	0x000d7ca8
   d440c:	000d7cde 	.word	0x000d7cde
   d4410:	2003dff4 	.word	0x2003dff4
   d4414:	2003dffc 	.word	0x2003dffc

000d4418 <_GLOBAL__sub_I_sd>:
   d4418:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d441a:	f001 fbb3 	bl	d5b84 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d441e:	4b13      	ldr	r3, [pc, #76]	; (d446c <_GLOBAL__sub_I_sd+0x54>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4420:	2164      	movs	r1, #100	; 0x64
   d4422:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4426:	4912      	ldr	r1, [pc, #72]	; (d4470 <_GLOBAL__sub_I_sd+0x58>)
   d4428:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d442c:	2101      	movs	r1, #1
   d442e:	2200      	movs	r2, #0
   d4430:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4434:	490f      	ldr	r1, [pc, #60]	; (d4474 <_GLOBAL__sub_I_sd+0x5c>)
   d4436:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4438:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d443c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d4440:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4444:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4448:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d444c:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d4450:	f8c3 146c 	str.w	r1, [r3, #1132]	; 0x46c
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4454:	4b08      	ldr	r3, [pc, #32]	; (d4478 <_GLOBAL__sub_I_sd+0x60>)
   d4456:	701a      	strb	r2, [r3, #0]
   d4458:	805a      	strh	r2, [r3, #2]
   d445a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d445e:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4460:	2003      	movs	r0, #3
   d4462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4466:	f001 bccd 	b.w	d5e04 <set_system_mode>
   d446a:	bf00      	nop
   d446c:	2003e000 	.word	0x2003e000
   d4470:	000d7c04 	.word	0x000d7c04
   d4474:	2003e730 	.word	0x2003e730
   d4478:	2003e484 	.word	0x2003e484

000d447c <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d447c:	f001 bb82 	b.w	d5b84 <HAL_Pin_Map>

000d4480 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d4480:	b510      	push	{r4, lr}
   d4482:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4484:	3024      	adds	r0, #36	; 0x24
   d4486:	f000 fe8b 	bl	d51a0 <_ZN8FatCache4syncEv>
   d448a:	b128      	cbz	r0, d4498 <_ZN9FatVolume9cacheSyncEv+0x18>
   d448c:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d4490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4494:	f000 be84 	b.w	d51a0 <_ZN8FatCache4syncEv>
  }
   d4498:	bd10      	pop	{r4, pc}

000d449a <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d449a:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d449c:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d449e:	f043 0304 	orr.w	r3, r3, #4
   d44a2:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d44a4:	f100 0210 	add.w	r2, r0, #16
   d44a8:	6880      	ldr	r0, [r0, #8]
   d44aa:	f000 bf2f 	b.w	d530c <_ZN9FatVolume15allocateClusterEmPm>
	...

000d44b0 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d44b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d44b4:	7803      	ldrb	r3, [r0, #0]
   d44b6:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d44ba:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d44bc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d44c0:	b10b      	cbz	r3, d44c6 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d44c2:	2600      	movs	r6, #0
   d44c4:	e02e      	b.n	d4524 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d44c6:	6942      	ldr	r2, [r0, #20]
   d44c8:	4b18      	ldr	r3, [pc, #96]	; (d452c <_ZN7FatFile13addDirClusterEv+0x7c>)
   d44ca:	429a      	cmp	r2, r3
   d44cc:	d8f9      	bhi.n	d44c2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d44ce:	f7ff ffe4 	bl	d449a <_ZN7FatFile10addClusterEv>
   d44d2:	4606      	mov	r6, r0
   d44d4:	2800      	cmp	r0, #0
   d44d6:	d0f4      	beq.n	d44c2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d44d8:	6921      	ldr	r1, [r4, #16]
   d44da:	68a0      	ldr	r0, [r4, #8]
   d44dc:	f000 feab 	bl	d5236 <_ZNK9FatVolume17clusterFirstBlockEm>
   d44e0:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d44e2:	68a0      	ldr	r0, [r4, #8]
   d44e4:	2205      	movs	r2, #5
   d44e6:	4639      	mov	r1, r7
   d44e8:	3024      	adds	r0, #36	; 0x24
   d44ea:	f000 fe80 	bl	d51ee <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d44ee:	4680      	mov	r8, r0
   d44f0:	2800      	cmp	r0, #0
   d44f2:	d0e6      	beq.n	d44c2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d44f4:	4629      	mov	r1, r5
   d44f6:	f44f 7200 	mov.w	r2, #512	; 0x200
   d44fa:	f003 fb3d 	bl	d7b78 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d44fe:	2501      	movs	r5, #1
   d4500:	68a3      	ldr	r3, [r4, #8]
   d4502:	791a      	ldrb	r2, [r3, #4]
   d4504:	42aa      	cmp	r2, r5
   d4506:	d909      	bls.n	d451c <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4508:	4642      	mov	r2, r8
   d450a:	19e9      	adds	r1, r5, r7
   d450c:	6818      	ldr	r0, [r3, #0]
   d450e:	f001 f9ef 	bl	d58f0 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d4512:	2800      	cmp	r0, #0
   d4514:	d0d5      	beq.n	d44c2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d4516:	3501      	adds	r5, #1
   d4518:	b2ed      	uxtb	r5, r5
   d451a:	e7f1      	b.n	d4500 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d451c:	6963      	ldr	r3, [r4, #20]
   d451e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d4522:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d4524:	4630      	mov	r0, r6
   d4526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d452a:	bf00      	nop
   d452c:	001ffdff 	.word	0x001ffdff

000d4530 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d4530:	b510      	push	{r4, lr}
   d4532:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4534:	6880      	ldr	r0, [r0, #8]
   d4536:	460a      	mov	r2, r1
   d4538:	3024      	adds	r0, #36	; 0x24
   d453a:	69a1      	ldr	r1, [r4, #24]
   d453c:	f000 fe57 	bl	d51ee <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d4540:	b120      	cbz	r0, d454c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d4542:	88a3      	ldrh	r3, [r4, #4]
   d4544:	f003 030f 	and.w	r3, r3, #15
   d4548:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d454c:	bd10      	pop	{r4, pc}

000d454e <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d454e:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d4550:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d4552:	4605      	mov	r5, r0
   d4554:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d4556:	b984      	cbnz	r4, d457a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d4558:	2224      	movs	r2, #36	; 0x24
   d455a:	4621      	mov	r1, r4
   d455c:	f003 fb0c 	bl	d7b78 <memset>

  m_vol = vol;
   d4560:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d4562:	79f3      	ldrb	r3, [r6, #7]
   d4564:	2b10      	cmp	r3, #16
   d4566:	d003      	beq.n	d4570 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d4568:	2b20      	cmp	r3, #32
   d456a:	d106      	bne.n	d457a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d456c:	2340      	movs	r3, #64	; 0x40
   d456e:	e000      	b.n	d4572 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d4570:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d4572:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d4574:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d4576:	70a8      	strb	r0, [r5, #2]
   d4578:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d457a:	2000      	movs	r0, #0
   d457c:	bd70      	pop	{r4, r5, r6, pc}

000d457e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d457e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4582:	7803      	ldrb	r3, [r0, #0]
   d4584:	4604      	mov	r4, r0
   d4586:	4689      	mov	r9, r1
   d4588:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d458a:	b14b      	cbz	r3, d45a0 <_ZN7FatFile4readEPvj+0x22>
   d458c:	7882      	ldrb	r2, [r0, #2]
   d458e:	07d1      	lsls	r1, r2, #31
   d4590:	d506      	bpl.n	d45a0 <_ZN7FatFile4readEPvj+0x22>
   d4592:	e00c      	b.n	d45ae <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4594:	465a      	mov	r2, fp
   d4596:	6921      	ldr	r1, [r4, #16]
   d4598:	f000 fe53 	bl	d5242 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d459c:	2800      	cmp	r0, #0
   d459e:	da3d      	bge.n	d461c <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d45a0:	7863      	ldrb	r3, [r4, #1]
   d45a2:	f043 0302 	orr.w	r3, r3, #2
   d45a6:	7063      	strb	r3, [r4, #1]
  return -1;
   d45a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d45ac:	e097      	b.n	d46de <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d45ae:	071a      	lsls	r2, r3, #28
   d45b0:	d503      	bpl.n	d45ba <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d45b2:	69e3      	ldr	r3, [r4, #28]
   d45b4:	6962      	ldr	r2, [r4, #20]
   d45b6:	1a9b      	subs	r3, r3, r2
   d45b8:	e007      	b.n	d45ca <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d45ba:	069a      	lsls	r2, r3, #26
   d45bc:	d508      	bpl.n	d45d0 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d45be:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d45c0:	891a      	ldrh	r2, [r3, #8]
   d45c2:	6963      	ldr	r3, [r4, #20]
   d45c4:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d45c8:	b29b      	uxth	r3, r3
   d45ca:	429d      	cmp	r5, r3
   d45cc:	bf28      	it	cs
   d45ce:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d45d0:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d45d2:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d45d6:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d45da:	2e00      	cmp	r6, #0
   d45dc:	d035      	beq.n	d464a <_ZN7FatFile4readEPvj+0xcc>
   d45de:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d45e0:	6963      	ldr	r3, [r4, #20]
   d45e2:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d45e4:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d45e8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d45ec:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d45f0:	d002      	beq.n	d45f8 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d45f2:	6a03      	ldr	r3, [r0, #32]
   d45f4:	4419      	add	r1, r3
   d45f6:	e01d      	b.n	d4634 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d45f8:	f890 8005 	ldrb.w	r8, [r0, #5]
   d45fc:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d4600:	f1ba 0f00 	cmp.w	sl, #0
   d4604:	d110      	bne.n	d4628 <_ZN7FatFile4readEPvj+0xaa>
   d4606:	f1b8 0f00 	cmp.w	r8, #0
   d460a:	d10d      	bne.n	d4628 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d460c:	2b00      	cmp	r3, #0
   d460e:	d1c1      	bne.n	d4594 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4610:	0653      	lsls	r3, r2, #25
   d4612:	bf4c      	ite	mi
   d4614:	6a03      	ldrmi	r3, [r0, #32]
   d4616:	6a23      	ldrpl	r3, [r4, #32]
   d4618:	6123      	str	r3, [r4, #16]
   d461a:	e005      	b.n	d4628 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d461c:	d104      	bne.n	d4628 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d461e:	7823      	ldrb	r3, [r4, #0]
   d4620:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4624:	d111      	bne.n	d464a <_ZN7FatFile4readEPvj+0xcc>
   d4626:	e7bb      	b.n	d45a0 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4628:	6921      	ldr	r1, [r4, #16]
   d462a:	68a0      	ldr	r0, [r4, #8]
   d462c:	f000 fe03 	bl	d5236 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4630:	eb08 0100 	add.w	r1, r8, r0
   d4634:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d4636:	f1ba 0f00 	cmp.w	sl, #0
   d463a:	d135      	bne.n	d46a8 <_ZN7FatFile4readEPvj+0x12a>
   d463c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d4640:	d332      	bcc.n	d46a8 <_ZN7FatFile4readEPvj+0x12a>
   d4642:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4644:	4299      	cmp	r1, r3
   d4646:	d102      	bne.n	d464e <_ZN7FatFile4readEPvj+0xd0>
   d4648:	e02e      	b.n	d46a8 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d464a:	1ba8      	subs	r0, r5, r6
   d464c:	e047      	b.n	d46de <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d464e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d4652:	d31b      	bcc.n	d468c <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d4654:	7822      	ldrb	r2, [r4, #0]
   d4656:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d4658:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d465c:	d406      	bmi.n	d466c <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d465e:	7902      	ldrb	r2, [r0, #4]
   d4660:	ebc8 0202 	rsb	r2, r8, r2
   d4664:	b2d2      	uxtb	r2, r2
   d4666:	4592      	cmp	sl, r2
   d4668:	bf28      	it	cs
   d466a:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d466c:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d466e:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4672:	d207      	bcs.n	d4684 <_ZN7FatFile4readEPvj+0x106>
   d4674:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d4676:	4653      	mov	r3, sl
   d4678:	464a      	mov	r2, r9
   d467a:	6800      	ldr	r0, [r0, #0]
   d467c:	f001 f8f6 	bl	d586c <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d4680:	b960      	cbnz	r0, d469c <_ZN7FatFile4readEPvj+0x11e>
   d4682:	e78d      	b.n	d45a0 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4684:	4453      	add	r3, sl
   d4686:	4299      	cmp	r1, r3
   d4688:	d321      	bcc.n	d46ce <_ZN7FatFile4readEPvj+0x150>
   d468a:	e7f3      	b.n	d4674 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d468c:	464a      	mov	r2, r9
   d468e:	6800      	ldr	r0, [r0, #0]
   d4690:	f001 f8a4 	bl	d57dc <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d4694:	2800      	cmp	r0, #0
   d4696:	d083      	beq.n	d45a0 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d4698:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d469c:	6963      	ldr	r3, [r4, #20]
   d469e:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d46a0:	44b9      	add	r9, r7
    m_curPosition += n;
   d46a2:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d46a4:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d46a6:	e798      	b.n	d45da <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d46a8:	2200      	movs	r2, #0
   d46aa:	3024      	adds	r0, #36	; 0x24
   d46ac:	f000 fd9f 	bl	d51ee <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d46b0:	2800      	cmp	r0, #0
   d46b2:	f43f af75 	beq.w	d45a0 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d46b6:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d46ba:	42b7      	cmp	r7, r6
   d46bc:	bf28      	it	cs
   d46be:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d46c0:	eb00 010a 	add.w	r1, r0, sl
   d46c4:	463a      	mov	r2, r7
   d46c6:	4648      	mov	r0, r9
   d46c8:	f003 fa4b 	bl	d7b62 <memcpy>
   d46cc:	e7e6      	b.n	d469c <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d46ce:	3024      	adds	r0, #36	; 0x24
   d46d0:	9101      	str	r1, [sp, #4]
   d46d2:	f000 fd65 	bl	d51a0 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d46d6:	9901      	ldr	r1, [sp, #4]
   d46d8:	2800      	cmp	r0, #0
   d46da:	d1cb      	bne.n	d4674 <_ZN7FatFile4readEPvj+0xf6>
   d46dc:	e760      	b.n	d45a0 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d46de:	b003      	add	sp, #12
   d46e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d46e4 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d46e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d46e6:	2201      	movs	r2, #1
   d46e8:	f10d 0107 	add.w	r1, sp, #7
   d46ec:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d46ee:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d46f0:	6905      	ldr	r5, [r0, #16]
   d46f2:	f7ff ff44 	bl	d457e <_ZN7FatFile4readEPvj>
   d46f6:	2801      	cmp	r0, #1
   d46f8:	bf05      	ittet	eq
   d46fa:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d46fe:	6166      	streq	r6, [r4, #20]
   d4700:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curCluster = pos->cluster;
   d4704:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d4706:	b002      	add	sp, #8
   d4708:	bd70      	pop	{r4, r5, r6, pc}

000d470a <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d470a:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d470c:	6943      	ldr	r3, [r0, #20]
   d470e:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d4712:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d4714:	b105      	cbz	r5, d4718 <_ZN7FatFile12readDirCacheEb+0xe>
   d4716:	b969      	cbnz	r1, d4734 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d4718:	2201      	movs	r2, #1
   d471a:	f10d 0107 	add.w	r1, sp, #7
   d471e:	4620      	mov	r0, r4
   d4720:	f7ff ff2d 	bl	d457e <_ZN7FatFile4readEPvj>
   d4724:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d4726:	2801      	cmp	r0, #1
   d4728:	d001      	beq.n	d472e <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d472a:	2000      	movs	r0, #0
   d472c:	e008      	b.n	d4740 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d472e:	6963      	ldr	r3, [r4, #20]
   d4730:	331f      	adds	r3, #31
   d4732:	e000      	b.n	d4736 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d4734:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d4736:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d4738:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d473a:	3030      	adds	r0, #48	; 0x30
   d473c:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d4740:	b003      	add	sp, #12
   d4742:	bd30      	pop	{r4, r5, pc}

000d4744 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4748:	460e      	mov	r6, r1
   d474a:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d474c:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d474e:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d4750:	2900      	cmp	r1, #0
   d4752:	d039      	beq.n	d47c8 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d4754:	6945      	ldr	r5, [r0, #20]
   d4756:	42b5      	cmp	r5, r6
   d4758:	d03a      	beq.n	d47d0 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d475a:	b90e      	cbnz	r6, d4760 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d475c:	6106      	str	r6, [r0, #16]
    goto done;
   d475e:	e031      	b.n	d47c4 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d4760:	070b      	lsls	r3, r1, #28
   d4762:	d503      	bpl.n	d476c <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d4764:	69c3      	ldr	r3, [r0, #28]
   d4766:	429e      	cmp	r6, r3
   d4768:	d82e      	bhi.n	d47c8 <_ZN7FatFile7seekSetEm+0x84>
   d476a:	e007      	b.n	d477c <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d476c:	0688      	lsls	r0, r1, #26
   d476e:	d505      	bpl.n	d477c <_ZN7FatFile7seekSetEm+0x38>
   d4770:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d4772:	891b      	ldrh	r3, [r3, #8]
   d4774:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d4778:	d826      	bhi.n	d47c8 <_ZN7FatFile7seekSetEm+0x84>
   d477a:	e023      	b.n	d47c4 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d477c:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d4780:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d4784:	1e6a      	subs	r2, r5, #1
   d4786:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d478a:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d478c:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d478e:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d4790:	429a      	cmp	r2, r3
   d4792:	d800      	bhi.n	d4796 <_ZN7FatFile7seekSetEm+0x52>
   d4794:	b94d      	cbnz	r5, d47aa <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4796:	064a      	lsls	r2, r1, #25
   d4798:	bf4c      	ite	mi
   d479a:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d479e:	6a22      	ldrpl	r2, [r4, #32]
   d47a0:	6122      	str	r2, [r4, #16]
   d47a2:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d47a4:	f104 0810 	add.w	r8, r4, #16
   d47a8:	e00a      	b.n	d47c0 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d47aa:	1a9b      	subs	r3, r3, r2
   d47ac:	e7f9      	b.n	d47a2 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d47ae:	4642      	mov	r2, r8
   d47b0:	6921      	ldr	r1, [r4, #16]
   d47b2:	68a0      	ldr	r0, [r4, #8]
   d47b4:	f000 fd45 	bl	d5242 <_ZN9FatVolume6fatGetEmPm>
   d47b8:	2800      	cmp	r0, #0
   d47ba:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   d47be:	dd03      	ble.n	d47c8 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d47c0:	2d00      	cmp	r5, #0
   d47c2:	d1f4      	bne.n	d47ae <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d47c4:	6166      	str	r6, [r4, #20]
   d47c6:	e003      	b.n	d47d0 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d47c8:	6127      	str	r7, [r4, #16]
  return false;
   d47ca:	2000      	movs	r0, #0
   d47cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d47d0:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d47d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d47d6 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d47d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47d8:	460f      	mov	r7, r1
   d47da:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d47dc:	2100      	movs	r1, #0
   d47de:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d47e0:	4604      	mov	r4, r0
   d47e2:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d47e4:	f003 f9c8 	bl	d7b78 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d47e8:	68b8      	ldr	r0, [r7, #8]
   d47ea:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d47ec:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d47f0:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d47f2:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d47f6:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d47f8:	6a3b      	ldr	r3, [r7, #32]
   d47fa:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d47fc:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d47fe:	7acb      	ldrb	r3, [r1, #11]
   d4800:	071d      	lsls	r5, r3, #28
   d4802:	d44c      	bmi.n	d489e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d4804:	1883      	adds	r3, r0, r2
   d4806:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d480a:	f003 0317 	and.w	r3, r3, #23
   d480e:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d4810:	7ac9      	ldrb	r1, [r1, #11]
   d4812:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d4816:	bf04      	itt	eq
   d4818:	f043 0308 	orreq.w	r3, r3, #8
   d481c:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d481e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4822:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d4824:	f006 0303 	and.w	r3, r6, #3
   d4828:	2b01      	cmp	r3, #1
   d482a:	d009      	beq.n	d4840 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d482c:	2b02      	cmp	r3, #2
   d482e:	d005      	beq.n	d483c <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d4830:	2b00      	cmp	r3, #0
   d4832:	d134      	bne.n	d489e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d4834:	0571      	lsls	r1, r6, #21
   d4836:	d432      	bmi.n	d489e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d4838:	2301      	movs	r3, #1
   d483a:	e002      	b.n	d4842 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d483c:	2303      	movs	r3, #3
   d483e:	e000      	b.n	d4842 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d4840:	2302      	movs	r3, #2
   d4842:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d4844:	78a1      	ldrb	r1, [r4, #2]
   d4846:	078b      	lsls	r3, r1, #30
   d4848:	d503      	bpl.n	d4852 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d484a:	7823      	ldrb	r3, [r4, #0]
   d484c:	f013 0f11 	tst.w	r3, #17
   d4850:	d125      	bne.n	d489e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d4852:	b24b      	sxtb	r3, r1
   d4854:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d4858:	f006 0108 	and.w	r1, r6, #8
   d485c:	bf14      	ite	ne
   d485e:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d4862:	2700      	moveq	r7, #0
   d4864:	4319      	orrs	r1, r3
   d4866:	4339      	orrs	r1, r7
   d4868:	70a1      	strb	r1, [r4, #2]
   d486a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d486c:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d486e:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d4870:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d4872:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d4876:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d487a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d487e:	d504      	bpl.n	d488a <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d4880:	b181      	cbz	r1, d48a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d4882:	f000 fd7e 	bl	d5382 <_ZN9FatVolume9freeChainEm>
   d4886:	b968      	cbnz	r0, d48a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d4888:	e009      	b.n	d489e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d488a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d488c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d488e:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d4890:	0473      	lsls	r3, r6, #17
   d4892:	d50c      	bpl.n	d48ae <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d4894:	69e1      	ldr	r1, [r4, #28]
   d4896:	4620      	mov	r0, r4
   d4898:	f7ff ff54 	bl	d4744 <_ZN7FatFile7seekSetEm>
   d489c:	b938      	cbnz	r0, d48ae <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d489e:	2000      	movs	r0, #0
   d48a0:	7020      	strb	r0, [r4, #0]
  return false;
   d48a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d48a4:	78a3      	ldrb	r3, [r4, #2]
   d48a6:	f043 0304 	orr.w	r3, r3, #4
   d48aa:	70a3      	strb	r3, [r4, #2]
   d48ac:	e7f0      	b.n	d4890 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d48ae:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d48b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d48b4 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d48b4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d48b6:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d48b8:	4604      	mov	r4, r0
  if (!isOpen()) {
   d48ba:	b90b      	cbnz	r3, d48c0 <_ZN7FatFile4syncEv+0xc>
    return true;
   d48bc:	2001      	movs	r0, #1
   d48be:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d48c0:	7883      	ldrb	r3, [r0, #2]
   d48c2:	075a      	lsls	r2, r3, #29
   d48c4:	d523      	bpl.n	d490e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d48c6:	2101      	movs	r1, #1
   d48c8:	f7ff fe32 	bl	d4530 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d48cc:	4605      	mov	r5, r0
   d48ce:	b928      	cbnz	r0, d48dc <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d48d0:	7863      	ldrb	r3, [r4, #1]
   d48d2:	f043 0301 	orr.w	r3, r3, #1
   d48d6:	7063      	strb	r3, [r4, #1]
  return false;
   d48d8:	2000      	movs	r0, #0
   d48da:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d48dc:	7803      	ldrb	r3, [r0, #0]
   d48de:	2be5      	cmp	r3, #229	; 0xe5
   d48e0:	d0f6      	beq.n	d48d0 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d48e2:	7823      	ldrb	r3, [r4, #0]
   d48e4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d48e6:	bf44      	itt	mi
   d48e8:	69e3      	ldrmi	r3, [r4, #28]
   d48ea:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d48ec:	8c23      	ldrh	r3, [r4, #32]
   d48ee:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d48f0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d48f2:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d48f4:	4b09      	ldr	r3, [pc, #36]	; (d491c <_ZN7FatFile4syncEv+0x68>)
   d48f6:	681b      	ldr	r3, [r3, #0]
   d48f8:	b12b      	cbz	r3, d4906 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d48fa:	f100 0116 	add.w	r1, r0, #22
   d48fe:	3018      	adds	r0, #24
   d4900:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d4902:	8b2b      	ldrh	r3, [r5, #24]
   d4904:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d4906:	78a3      	ldrb	r3, [r4, #2]
   d4908:	f023 0304 	bic.w	r3, r3, #4
   d490c:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d490e:	68a0      	ldr	r0, [r4, #8]
   d4910:	f7ff fdb6 	bl	d4480 <_ZN9FatVolume9cacheSyncEv>
   d4914:	2800      	cmp	r0, #0
   d4916:	d0db      	beq.n	d48d0 <_ZN7FatFile4syncEv+0x1c>
   d4918:	e7d0      	b.n	d48bc <_ZN7FatFile4syncEv+0x8>
   d491a:	bf00      	nop
   d491c:	2003e494 	.word	0x2003e494

000d4920 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d4920:	b510      	push	{r4, lr}
   d4922:	4604      	mov	r4, r0
  bool rtn = sync();
   d4924:	f7ff ffc6 	bl	d48b4 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d4928:	2300      	movs	r3, #0
   d492a:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d492c:	bd10      	pop	{r4, pc}

000d492e <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d492e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4930:	b093      	sub	sp, #76	; 0x4c
   d4932:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4934:	2300      	movs	r3, #0
   d4936:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d493a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d493e:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d4940:	9201      	str	r2, [sp, #4]
   d4942:	4606      	mov	r6, r0
   d4944:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d4946:	b10b      	cbz	r3, d494c <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d4948:	2000      	movs	r0, #0
   d494a:	e03d      	b.n	d49c8 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d494c:	780b      	ldrb	r3, [r1, #0]
   d494e:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4952:	d0f9      	beq.n	d4948 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d4954:	7813      	ldrb	r3, [r2, #0]
   d4956:	2b2f      	cmp	r3, #47	; 0x2f
   d4958:	d112      	bne.n	d4980 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d495a:	9b01      	ldr	r3, [sp, #4]
   d495c:	781a      	ldrb	r2, [r3, #0]
   d495e:	2a2f      	cmp	r2, #47	; 0x2f
   d4960:	d102      	bne.n	d4968 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d4962:	3301      	adds	r3, #1
   d4964:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d4966:	e7f8      	b.n	d495a <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d4968:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d496a:	b91a      	cbnz	r2, d4974 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d496c:	4630      	mov	r0, r6
   d496e:	f7ff fdee 	bl	d454e <_ZN7FatFile8openRootEP9FatVolume>
   d4972:	e029      	b.n	d49c8 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d4974:	a809      	add	r0, sp, #36	; 0x24
   d4976:	f7ff fdea 	bl	d454e <_ZN7FatFile8openRootEP9FatVolume>
   d497a:	2800      	cmp	r0, #0
   d497c:	d0e4      	beq.n	d4948 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d497e:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d4980:	aa01      	add	r2, sp, #4
   d4982:	a903      	add	r1, sp, #12
   d4984:	9801      	ldr	r0, [sp, #4]
   d4986:	f000 f8ff 	bl	d4b88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d498a:	2800      	cmp	r0, #0
   d498c:	d0dc      	beq.n	d4948 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d498e:	9b01      	ldr	r3, [sp, #4]
   d4990:	781b      	ldrb	r3, [r3, #0]
   d4992:	b19b      	cbz	r3, d49bc <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d4994:	2300      	movs	r3, #0
   d4996:	aa03      	add	r2, sp, #12
   d4998:	4621      	mov	r1, r4
   d499a:	4630      	mov	r0, r6
   d499c:	f000 fa36 	bl	d4e0c <_ZN7FatFile4openEPS_P7fname_ti>
   d49a0:	2800      	cmp	r0, #0
   d49a2:	d0d1      	beq.n	d4948 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d49a4:	4635      	mov	r5, r6
   d49a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d49a8:	ac09      	add	r4, sp, #36	; 0x24
   d49aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d49ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d49ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d49b0:	682b      	ldr	r3, [r5, #0]
   d49b2:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d49b4:	4630      	mov	r0, r6
   d49b6:	f7ff ffb3 	bl	d4920 <_ZN7FatFile5closeEv>
   d49ba:	e7e0      	b.n	d497e <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d49bc:	463b      	mov	r3, r7
   d49be:	aa03      	add	r2, sp, #12
   d49c0:	4621      	mov	r1, r4
   d49c2:	4630      	mov	r0, r6
   d49c4:	f000 fa22 	bl	d4e0c <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d49c8:	b013      	add	sp, #76	; 0x4c
   d49ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d49cc <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d49cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d49d0:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d49d2:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d49d4:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d49d6:	4604      	mov	r4, r0
   d49d8:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d49da:	d508      	bpl.n	d49ee <_ZN7FatFile5writeEPKvj+0x22>
   d49dc:	7883      	ldrb	r3, [r0, #2]
   d49de:	079a      	lsls	r2, r3, #30
   d49e0:	d505      	bpl.n	d49ee <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d49e2:	071b      	lsls	r3, r3, #28
   d49e4:	d50b      	bpl.n	d49fe <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d49e6:	69e1      	ldr	r1, [r4, #28]
   d49e8:	f7ff feac 	bl	d4744 <_ZN7FatFile7seekSetEm>
   d49ec:	b938      	cbnz	r0, d49fe <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d49ee:	7863      	ldrb	r3, [r4, #1]
   d49f0:	f043 0301 	orr.w	r3, r3, #1
   d49f4:	7063      	strb	r3, [r4, #1]
  return -1;
   d49f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d49fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d49fe:	6963      	ldr	r3, [r4, #20]
   d4a00:	43db      	mvns	r3, r3
   d4a02:	4598      	cmp	r8, r3
   d4a04:	d8f3      	bhi.n	d49ee <_ZN7FatFile5writeEPKvj+0x22>
   d4a06:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4a08:	f04f 0a00 	mov.w	sl, #0
   d4a0c:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4a0e:	2e00      	cmp	r6, #0
   d4a10:	f000 8081 	beq.w	d4b16 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d4a14:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4a16:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4a18:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d4a1c:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4a20:	d11c      	bne.n	d4a5c <_ZN7FatFile5writeEPKvj+0x90>
   d4a22:	b9df      	cbnz	r7, d4a5c <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d4a24:	6921      	ldr	r1, [r4, #16]
   d4a26:	b171      	cbz	r1, d4a46 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4a28:	f104 0210 	add.w	r2, r4, #16
   d4a2c:	f000 fc09 	bl	d5242 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d4a30:	2800      	cmp	r0, #0
   d4a32:	dbdc      	blt.n	d49ee <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d4a34:	f040 808e 	bne.w	d4b54 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d4a38:	4620      	mov	r0, r4
   d4a3a:	f7ff fd2e 	bl	d449a <_ZN7FatFile10addClusterEv>
   d4a3e:	2800      	cmp	r0, #0
   d4a40:	f040 8088 	bne.w	d4b54 <_ZN7FatFile5writeEPKvj+0x188>
   d4a44:	e7d3      	b.n	d49ee <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d4a46:	6a23      	ldr	r3, [r4, #32]
   d4a48:	b93b      	cbnz	r3, d4a5a <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d4a4a:	4620      	mov	r0, r4
   d4a4c:	f7ff fd25 	bl	d449a <_ZN7FatFile10addClusterEv>
   d4a50:	2800      	cmp	r0, #0
   d4a52:	d0cc      	beq.n	d49ee <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d4a54:	6923      	ldr	r3, [r4, #16]
   d4a56:	6223      	str	r3, [r4, #32]
   d4a58:	e000      	b.n	d4a5c <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d4a5a:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4a5c:	6921      	ldr	r1, [r4, #16]
   d4a5e:	68a0      	ldr	r0, [r4, #8]
   d4a60:	f000 fbe9 	bl	d5236 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4a64:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d4a66:	b917      	cbnz	r7, d4a6e <_ZN7FatFile5writeEPKvj+0xa2>
   d4a68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d4a6c:	d221      	bcs.n	d4ab2 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d4a6e:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d4a72:	42b5      	cmp	r5, r6
   d4a74:	bf28      	it	cs
   d4a76:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d4a78:	b937      	cbnz	r7, d4a88 <_ZN7FatFile5writeEPKvj+0xbc>
   d4a7a:	6963      	ldr	r3, [r4, #20]
   d4a7c:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d4a7e:	4293      	cmp	r3, r2
   d4a80:	bf34      	ite	cc
   d4a82:	2201      	movcc	r2, #1
   d4a84:	2205      	movcs	r2, #5
   d4a86:	e000      	b.n	d4a8a <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d4a88:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4a8a:	68a0      	ldr	r0, [r4, #8]
   d4a8c:	3024      	adds	r0, #36	; 0x24
   d4a8e:	f000 fbae 	bl	d51ee <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d4a92:	2800      	cmp	r0, #0
   d4a94:	d0ab      	beq.n	d49ee <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4a96:	4438      	add	r0, r7
   d4a98:	462a      	mov	r2, r5
   d4a9a:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d4a9c:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4a9e:	f003 f860 	bl	d7b62 <memcpy>
      if (512 == (n + blockOffset)) {
   d4aa2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d4aa6:	d130      	bne.n	d4b0a <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d4aa8:	68a0      	ldr	r0, [r4, #8]
   d4aaa:	3024      	adds	r0, #36	; 0x24
   d4aac:	f000 fb78 	bl	d51a0 <_ZN8FatCache4syncEv>
   d4ab0:	e017      	b.n	d4ae2 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d4ab2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d4ab6:	68a0      	ldr	r0, [r4, #8]
   d4ab8:	d315      	bcc.n	d4ae6 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d4aba:	7902      	ldrb	r2, [r0, #4]
   d4abc:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d4abe:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d4ac0:	b2d2      	uxtb	r2, r2
   d4ac2:	4293      	cmp	r3, r2
   d4ac4:	bf28      	it	cs
   d4ac6:	4613      	movcs	r3, r2
   d4ac8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4aca:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d4acc:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4ad0:	d302      	bcc.n	d4ad8 <_ZN7FatFile5writeEPKvj+0x10c>
   d4ad2:	441a      	add	r2, r3
   d4ad4:	4291      	cmp	r1, r2
   d4ad6:	d337      	bcc.n	d4b48 <_ZN7FatFile5writeEPKvj+0x17c>
   d4ad8:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d4ada:	464a      	mov	r2, r9
   d4adc:	6838      	ldr	r0, [r7, #0]
   d4ade:	f000 ff79 	bl	d59d4 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d4ae2:	b990      	cbnz	r0, d4b0a <_ZN7FatFile5writeEPKvj+0x13e>
   d4ae4:	e783      	b.n	d49ee <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d4ae6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4ae8:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4aea:	bf02      	ittt	eq
   d4aec:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4af0:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4af4:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d4af6:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4af8:	464a      	mov	r2, r9
   d4afa:	6818      	ldr	r0, [r3, #0]
   d4afc:	f000 fef8 	bl	d58f0 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d4b00:	2800      	cmp	r0, #0
   d4b02:	f43f af74 	beq.w	d49ee <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d4b06:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d4b0a:	6963      	ldr	r3, [r4, #20]
   d4b0c:	442b      	add	r3, r5
   d4b0e:	6163      	str	r3, [r4, #20]
    src += n;
   d4b10:	44a9      	add	r9, r5
    nToWrite -= n;
   d4b12:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4b14:	e77a      	b.n	d4a0c <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d4b16:	69e2      	ldr	r2, [r4, #28]
   d4b18:	4293      	cmp	r3, r2
   d4b1a:	d901      	bls.n	d4b20 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d4b1c:	61e3      	str	r3, [r4, #28]
   d4b1e:	e002      	b.n	d4b26 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d4b20:	4b0f      	ldr	r3, [pc, #60]	; (d4b60 <_ZN7FatFile5writeEPKvj+0x194>)
   d4b22:	681b      	ldr	r3, [r3, #0]
   d4b24:	b11b      	cbz	r3, d4b2e <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d4b26:	78a3      	ldrb	r3, [r4, #2]
   d4b28:	f043 0304 	orr.w	r3, r3, #4
   d4b2c:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d4b2e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d4b32:	2b00      	cmp	r3, #0
   d4b34:	db02      	blt.n	d4b3c <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d4b36:	4640      	mov	r0, r8
   d4b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d4b3c:	4620      	mov	r0, r4
   d4b3e:	f7ff feb9 	bl	d48b4 <_ZN7FatFile4syncEv>
   d4b42:	2800      	cmp	r0, #0
   d4b44:	d1f7      	bne.n	d4b36 <_ZN7FatFile5writeEPKvj+0x16a>
   d4b46:	e752      	b.n	d49ee <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4b4c:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4b50:	62c2      	str	r2, [r0, #44]	; 0x2c
   d4b52:	e7c1      	b.n	d4ad8 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4b54:	6921      	ldr	r1, [r4, #16]
   d4b56:	68a0      	ldr	r0, [r4, #8]
   d4b58:	f000 fb6d 	bl	d5236 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4b5c:	4601      	mov	r1, r0
   d4b5e:	e783      	b.n	d4a68 <_ZN7FatFile5writeEPKvj+0x9c>
   d4b60:	2003e494 	.word	0x2003e494

000d4b64 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d4b64:	f001 b80e 	b.w	d5b84 <HAL_Pin_Map>

000d4b68 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d4b68:	1e41      	subs	r1, r0, #1
   d4b6a:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d4b6e:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4b70:	0843      	lsrs	r3, r0, #1
   d4b72:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d4b76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d4b7a:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4b7e:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4b80:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4b82:	d1f5      	bne.n	d4b70 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d4b84:	4770      	bx	lr
	...

000d4b88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d4b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d4b8c:	7803      	ldrb	r3, [r0, #0]
   d4b8e:	2b20      	cmp	r3, #32
   d4b90:	f100 0401 	add.w	r4, r0, #1
   d4b94:	d101      	bne.n	d4b9a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d4b96:	4620      	mov	r0, r4
   d4b98:	e7f8      	b.n	d4b8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4b9a:	4f70      	ldr	r7, [pc, #448]	; (d4d5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d4b9c:	6088      	str	r0, [r1, #8]
   d4b9e:	4605      	mov	r5, r0
   d4ba0:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d4ba2:	462e      	mov	r6, r5
   d4ba4:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d4ba8:	b30b      	cbz	r3, d4bee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4baa:	2b2f      	cmp	r3, #47	; 0x2f
   d4bac:	d101      	bne.n	d4bb2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d4bae:	1903      	adds	r3, r0, r4
   d4bb0:	e017      	b.n	d4be2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4bb2:	2b5c      	cmp	r3, #92	; 0x5c
   d4bb4:	d102      	bne.n	d4bbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d4bb6:	2000      	movs	r0, #0
   d4bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4bbc:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d4bc0:	b2e4      	uxtb	r4, r4
   d4bc2:	2c1d      	cmp	r4, #29
   d4bc4:	d803      	bhi.n	d4bce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d4bc6:	fa27 f404 	lsr.w	r4, r7, r4
   d4bca:	07e4      	lsls	r4, r4, #31
   d4bcc:	d4f3      	bmi.n	d4bb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d4bce:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d4bd2:	2c3c      	cmp	r4, #60	; 0x3c
   d4bd4:	d0ef      	beq.n	d4bb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d4bd6:	3b20      	subs	r3, #32
   d4bd8:	2b5e      	cmp	r3, #94	; 0x5e
   d4bda:	d9e1      	bls.n	d4ba0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d4bdc:	e7eb      	b.n	d4bb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d4bde:	2d2f      	cmp	r5, #47	; 0x2f
   d4be0:	d105      	bne.n	d4bee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4be2:	461e      	mov	r6, r3
   d4be4:	f813 5b01 	ldrb.w	r5, [r3], #1
   d4be8:	2d20      	cmp	r5, #32
   d4bea:	d1f8      	bne.n	d4bde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d4bec:	e7f9      	b.n	d4be2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d4bee:	6016      	str	r6, [r2, #0]
   d4bf0:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d4bf2:	4298      	cmp	r0, r3
   d4bf4:	ebc0 0803 	rsb	r8, r0, r3
   d4bf8:	d009      	beq.n	d4c0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d4bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d4bfe:	2a2e      	cmp	r2, #46	; 0x2e
   d4c00:	d0f7      	beq.n	d4bf2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d4c02:	2a20      	cmp	r2, #32
   d4c04:	d0f5      	beq.n	d4bf2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d4c06:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d4c0a:	dcd4      	bgt.n	d4bb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d4c0c:	e001      	b.n	d4c12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d4c0e:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d4c12:	f8c1 8004 	str.w	r8, [r1, #4]
   d4c16:	f101 030c 	add.w	r3, r1, #12
   d4c1a:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d4c1e:	2420      	movs	r4, #32
   d4c20:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d4c24:	4293      	cmp	r3, r2
   d4c26:	d1fb      	bne.n	d4c20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d4c28:	4603      	mov	r3, r0
   d4c2a:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d4c2c:	f813 4b01 	ldrb.w	r4, [r3], #1
   d4c30:	2c2e      	cmp	r4, #46	; 0x2e
   d4c32:	d0fa      	beq.n	d4c2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d4c34:	2c20      	cmp	r4, #32
   d4c36:	d0f8      	beq.n	d4c2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d4c38:	fab2 f482 	clz	r4, r2
   d4c3c:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d4c3e:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   d4c42:	1c73      	adds	r3, r6, #1
   d4c44:	d107      	bne.n	d4c56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d4c46:	2700      	movs	r7, #0
   d4c48:	f04f 0e07 	mov.w	lr, #7
   d4c4c:	463d      	mov	r5, r7
   d4c4e:	46ba      	mov	sl, r7
   d4c50:	f04f 0908 	mov.w	r9, #8
   d4c54:	e009      	b.n	d4c6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d4c56:	5d83      	ldrb	r3, [r0, r6]
   d4c58:	2b2e      	cmp	r3, #46	; 0x2e
   d4c5a:	d0f4      	beq.n	d4c46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d4c5c:	3e01      	subs	r6, #1
   d4c5e:	e7f0      	b.n	d4c42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d4c60:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d4c62:	2b20      	cmp	r3, #32
   d4c64:	d104      	bne.n	d4c70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d4c66:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d4c68:	3201      	adds	r2, #1
   d4c6a:	4542      	cmp	r2, r8
   d4c6c:	dbf8      	blt.n	d4c60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d4c6e:	e04b      	b.n	d4d08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d4c70:	2b2e      	cmp	r3, #46	; 0x2e
   d4c72:	d102      	bne.n	d4c7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d4c74:	42b2      	cmp	r2, r6
   d4c76:	d1f6      	bne.n	d4c66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d4c78:	e003      	b.n	d4c82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d4c7a:	2b22      	cmp	r3, #34	; 0x22
   d4c7c:	d017      	beq.n	d4cae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d4c7e:	2b7c      	cmp	r3, #124	; 0x7c
   d4c80:	d015      	beq.n	d4cae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d4c82:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d4c86:	f1bc 0f05 	cmp.w	ip, #5
   d4c8a:	d801      	bhi.n	d4c90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d4c8c:	2b2d      	cmp	r3, #45	; 0x2d
   d4c8e:	d10e      	bne.n	d4cae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d4c90:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d4c94:	f1bc 0f05 	cmp.w	ip, #5
   d4c98:	d909      	bls.n	d4cae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d4c9a:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d4c9e:	f1bc 0f02 	cmp.w	ip, #2
   d4ca2:	d904      	bls.n	d4cae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d4ca4:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d4ca8:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d4cac:	d902      	bls.n	d4cb4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d4cae:	42b2      	cmp	r2, r6
   d4cb0:	d10e      	bne.n	d4cd0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d4cb2:	e049      	b.n	d4d48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4cb4:	42b2      	cmp	r2, r6
   d4cb6:	d047      	beq.n	d4d48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d4cb8:	4575      	cmp	r5, lr
   d4cba:	d821      	bhi.n	d4d00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d4cbc:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d4cc0:	f1bc 0f19 	cmp.w	ip, #25
   d4cc4:	d808      	bhi.n	d4cd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d4cc6:	3b20      	subs	r3, #32
   d4cc8:	b2db      	uxtb	r3, r3
        lc |= bit;
   d4cca:	ea49 0707 	orr.w	r7, r9, r7
   d4cce:	e00a      	b.n	d4ce6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4cd0:	4575      	cmp	r5, lr
   d4cd2:	d815      	bhi.n	d4d00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d4cd4:	2400      	movs	r4, #0
      c = '_';
   d4cd6:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d4cd8:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d4cdc:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d4ce0:	bf98      	it	ls
   d4ce2:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d4ce6:	f105 0c01 	add.w	ip, r5, #1
   d4cea:	fa5f fc8c 	uxtb.w	ip, ip
   d4cee:	440d      	add	r5, r1
      if (i < 7) {
   d4cf0:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d4cf4:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d4cf6:	d801      	bhi.n	d4cfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d4cf8:	f881 c00c 	strb.w	ip, [r1, #12]
   d4cfc:	4665      	mov	r5, ip
   d4cfe:	e7b3      	b.n	d4c68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4d00:	f1be 0f0a 	cmp.w	lr, #10
   d4d04:	d117      	bne.n	d4d36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d4d06:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d4d08:	7b4b      	ldrb	r3, [r1, #13]
   d4d0a:	2b20      	cmp	r3, #32
   d4d0c:	f43f af53 	beq.w	d4bb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d4d10:	b13c      	cbz	r4, d4d22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d4d12:	ea1a 0f07 	tst.w	sl, r7
   d4d16:	bf18      	it	ne
   d4d18:	2702      	movne	r7, #2
   d4d1a:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d4d1c:	2001      	movs	r0, #1
   d4d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d4d22:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d4d24:	2001      	movs	r0, #1
   d4d26:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d4d28:	4419      	add	r1, r3
   d4d2a:	237e      	movs	r3, #126	; 0x7e
   d4d2c:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d4d2e:	2331      	movs	r3, #49	; 0x31
   d4d30:	738b      	strb	r3, [r1, #14]
   d4d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d4d36:	42b2      	cmp	r2, r6
   d4d38:	dce5      	bgt.n	d4d06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4d3a:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4d3c:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4d40:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4d42:	f04f 0910 	mov.w	r9, #16
   d4d46:	e78e      	b.n	d4c66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4d48:	f1be 0f0a 	cmp.w	lr, #10
   d4d4c:	d0db      	beq.n	d4d06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4d4e:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4d50:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4d54:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4d56:	f04f 0910 	mov.w	r9, #16
   d4d5a:	e785      	b.n	d4c68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d4d5c:	31000101 	.word	0x31000101

000d4d60 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4d64:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4d68:	4606      	mov	r6, r0
   d4d6a:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4d6c:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4d6e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4d70:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d4d74:	6869      	ldr	r1, [r5, #4]
   d4d76:	68aa      	ldr	r2, [r5, #8]
   d4d78:	1863      	adds	r3, r4, r1
   d4d7a:	b29b      	uxth	r3, r3
   d4d7c:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d4d7e:	4291      	cmp	r1, r2
   d4d80:	d006      	beq.n	d4d90 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d4d82:	f812 0b01 	ldrb.w	r0, [r2], #1
   d4d86:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d4d8a:	4043      	eors	r3, r0
   d4d8c:	b29b      	uxth	r3, r3
   d4d8e:	e7f6      	b.n	d4d7e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d4d90:	f1b9 0f03 	cmp.w	r9, #3
   d4d94:	bf28      	it	cs
   d4d96:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4d9a:	f109 0204 	add.w	r2, r9, #4
   d4d9e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d4da0:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4da4:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4da6:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4da8:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4daa:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4dac:	bf94      	ite	ls
   d4dae:	3130      	addls	r1, #48	; 0x30
   d4db0:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4db2:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4db4:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d4db6:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4dba:	d3f1      	bcc.n	d4da0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4dbc:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d4dc0:	2100      	movs	r1, #0
   d4dc2:	735f      	strb	r7, [r3, #13]
   d4dc4:	4630      	mov	r0, r6
   d4dc6:	f7ff fcbd 	bl	d4744 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d4dca:	2101      	movs	r1, #1
   d4dcc:	4630      	mov	r0, r6
   d4dce:	f7ff fc9c 	bl	d470a <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d4dd2:	4601      	mov	r1, r0
   d4dd4:	b928      	cbnz	r0, d4de2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d4dd6:	7870      	ldrb	r0, [r6, #1]
   d4dd8:	fab0 f080 	clz	r0, r0
   d4ddc:	0940      	lsrs	r0, r0, #5
   d4dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d4de2:	7803      	ldrb	r3, [r0, #0]
   d4de4:	b14b      	cbz	r3, d4dfa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4de6:	7ac3      	ldrb	r3, [r0, #11]
   d4de8:	071b      	lsls	r3, r3, #28
   d4dea:	d4ee      	bmi.n	d4dca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4dec:	220b      	movs	r2, #11
   d4dee:	4640      	mov	r0, r8
   d4df0:	f002 fea8 	bl	d7b44 <memcmp>
   d4df4:	2800      	cmp	r0, #0
   d4df6:	d1e8      	bne.n	d4dca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4df8:	e002      	b.n	d4e00 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d4dfa:	2001      	movs	r0, #1
   d4dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4e00:	3401      	adds	r4, #1
   d4e02:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d4e04:	2c64      	cmp	r4, #100	; 0x64
   d4e06:	d1b5      	bne.n	d4d74 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d4e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4e0c <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e10:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4e12:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4e14:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4e16:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4e1a:	9005      	str	r0, [sp, #20]
   d4e1c:	460e      	mov	r6, r1
   d4e1e:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4e20:	d101      	bne.n	d4e26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d4e22:	2000      	movs	r0, #0
   d4e24:	e1a0      	b.n	d5168 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4e26:	9b05      	ldr	r3, [sp, #20]
   d4e28:	781b      	ldrb	r3, [r3, #0]
   d4e2a:	2b00      	cmp	r3, #0
   d4e2c:	d1f9      	bne.n	d4e22 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d4e2e:	6853      	ldr	r3, [r2, #4]
   d4e30:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d4e32:	7813      	ldrb	r3, [r2, #0]
   d4e34:	079b      	lsls	r3, r3, #30
   d4e36:	f000 818d 	beq.w	d5154 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d4e3a:	9b02      	ldr	r3, [sp, #8]
   d4e3c:	270d      	movs	r7, #13
   d4e3e:	330c      	adds	r3, #12
   d4e40:	fbb3 f7f7 	udiv	r7, r3, r7
   d4e44:	3701      	adds	r7, #1
   d4e46:	b2ff      	uxtb	r7, r7
   d4e48:	2100      	movs	r1, #0
   d4e4a:	4630      	mov	r0, r6
   d4e4c:	f7ff fc7a 	bl	d4744 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d4e50:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4e54:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d4e58:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d4e5c:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d4e5e:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d4e60:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d4e62:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4e66:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4e68:	6972      	ldr	r2, [r6, #20]
   d4e6a:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d4e6c:	2101      	movs	r1, #1
   d4e6e:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4e70:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d4e74:	f7ff fc49 	bl	d470a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d4e78:	9b07      	ldr	r3, [sp, #28]
   d4e7a:	b920      	cbnz	r0, d4e86 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d4e7c:	7873      	ldrb	r3, [r6, #1]
   d4e7e:	2b00      	cmp	r3, #0
   d4e80:	f000 8090 	beq.w	d4fa4 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d4e84:	e7cd      	b.n	d4e22 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d4e86:	7802      	ldrb	r2, [r0, #0]
   d4e88:	2ae5      	cmp	r2, #229	; 0xe5
   d4e8a:	d000      	beq.n	d4e8e <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d4e8c:	b942      	cbnz	r2, d4ea0 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4e8e:	2c00      	cmp	r4, #0
   d4e90:	bf08      	it	eq
   d4e92:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d4e94:	42bc      	cmp	r4, r7
        freeFound++;
   d4e96:	bf3c      	itt	cc
   d4e98:	3401      	addcc	r4, #1
   d4e9a:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d4e9c:	b922      	cbnz	r2, d4ea8 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d4e9e:	e081      	b.n	d4fa4 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d4ea0:	42bc      	cmp	r4, r7
   d4ea2:	bf38      	it	cc
   d4ea4:	2400      	movcc	r4, #0
   d4ea6:	e003      	b.n	d4eb0 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d4ea8:	2ae5      	cmp	r2, #229	; 0xe5
   d4eaa:	d101      	bne.n	d4eb0 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d4eac:	2500      	movs	r5, #0
   d4eae:	e7db      	b.n	d4e68 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d4eb0:	2a2e      	cmp	r2, #46	; 0x2e
   d4eb2:	d0fb      	beq.n	d4eac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4eb4:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d4eb6:	290f      	cmp	r1, #15
   d4eb8:	d152      	bne.n	d4f60 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d4eba:	b93d      	cbnz	r5, d4ecc <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d4ebc:	0651      	lsls	r1, r2, #25
   d4ebe:	d5d3      	bpl.n	d4e68 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d4ec0:	7b43      	ldrb	r3, [r0, #13]
   d4ec2:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d4ec4:	f002 051f 	and.w	r5, r2, #31
   d4ec8:	462b      	mov	r3, r5
   d4eca:	e007      	b.n	d4edc <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d4ecc:	3b01      	subs	r3, #1
   d4ece:	b2db      	uxtb	r3, r3
   d4ed0:	429a      	cmp	r2, r3
   d4ed2:	d1eb      	bne.n	d4eac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4ed4:	7b42      	ldrb	r2, [r0, #13]
   d4ed6:	9903      	ldr	r1, [sp, #12]
   d4ed8:	4291      	cmp	r1, r2
   d4eda:	d1e7      	bne.n	d4eac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d4edc:	1e5a      	subs	r2, r3, #1
   d4ede:	f04f 0c0d 	mov.w	ip, #13
   d4ee2:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d4ee6:	9a02      	ldr	r2, [sp, #8]
   d4ee8:	4562      	cmp	r2, ip
   d4eea:	d9df      	bls.n	d4eac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4eec:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d4ef0:	f1be 0f04 	cmp.w	lr, #4
   d4ef4:	fa5f f28e 	uxtb.w	r2, lr
   d4ef8:	d804      	bhi.n	d4f04 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d4efa:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d4efe:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d4f02:	e00c      	b.n	d4f1e <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d4f04:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4f06:	bf95      	itete	ls
   d4f08:	f10e 32ff 	addls.w	r2, lr, #4294967295	; 0xffffffff
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4f0c:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4f10:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4f14:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4f18:	bf94      	ite	ls
   d4f1a:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4f1c:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d4f1e:	9902      	ldr	r1, [sp, #8]
   d4f20:	4561      	cmp	r1, ip
   d4f22:	d103      	bne.n	d4f2c <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d4f24:	2a00      	cmp	r2, #0
   d4f26:	bf18      	it	ne
   d4f28:	2500      	movne	r5, #0
   d4f2a:	e79d      	b.n	d4e68 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4f2c:	2aff      	cmp	r2, #255	; 0xff
   d4f2e:	d8bd      	bhi.n	d4eac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4f30:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4f32:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d4f36:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4f38:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d4f3c:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4f40:	bf98      	it	ls
   d4f42:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4f44:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4f48:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d4f4c:	bf98      	it	ls
   d4f4e:	b2d2      	uxtbls	r2, r2
   d4f50:	f1bc 0f19 	cmp.w	ip, #25
   d4f54:	bf9c      	itt	ls
   d4f56:	3120      	addls	r1, #32
   d4f58:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4f5a:	4291      	cmp	r1, r2
   d4f5c:	d1a6      	bne.n	d4eac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4f5e:	e0fb      	b.n	d5158 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d4f60:	0709      	lsls	r1, r1, #28
   d4f62:	d4a3      	bmi.n	d4eac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d4f64:	b14d      	cbz	r5, d4f7a <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d4f66:	2b01      	cmp	r3, #1
   d4f68:	f47f af5b 	bne.w	d4e22 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d4f6c:	f7ff fdfc 	bl	d4b68 <_ZN7FatFile11lfnChecksumEPh>
   d4f70:	9b03      	ldr	r3, [sp, #12]
   d4f72:	4283      	cmp	r3, r0
   d4f74:	f47f af55 	bne.w	d4e22 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d4f78:	e00f      	b.n	d4f9a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4f7a:	220b      	movs	r2, #11
   d4f7c:	9906      	ldr	r1, [sp, #24]
   d4f7e:	9307      	str	r3, [sp, #28]
   d4f80:	f002 fde0 	bl	d7b44 <memcmp>
   d4f84:	9b07      	ldr	r3, [sp, #28]
   d4f86:	2800      	cmp	r0, #0
   d4f88:	f47f af6e 	bne.w	d4e68 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d4f8c:	f899 2000 	ldrb.w	r2, [r9]
   d4f90:	07d2      	lsls	r2, r2, #31
   d4f92:	d502      	bpl.n	d4f9a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d4f94:	2201      	movs	r2, #1
   d4f96:	9204      	str	r2, [sp, #16]
   d4f98:	e766      	b.n	d4e68 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d4f9a:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d4f9e:	f000 80d1 	beq.w	d5144 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d4fa2:	e73e      	b.n	d4e22 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d4fa4:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d4fa8:	f43f af3b 	beq.w	d4e22 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d4fac:	f00b 0303 	and.w	r3, fp, #3
   d4fb0:	3b01      	subs	r3, #1
   d4fb2:	2b01      	cmp	r3, #1
   d4fb4:	f63f af35 	bhi.w	d4e22 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d4fb8:	2c00      	cmp	r4, #0
   d4fba:	bf08      	it	eq
   d4fbc:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d4fbe:	42bc      	cmp	r4, r7
   d4fc0:	d302      	bcc.n	d4fc8 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d4fc2:	9b04      	ldr	r3, [sp, #16]
   d4fc4:	b9cb      	cbnz	r3, d4ffa <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d4fc6:	e01f      	b.n	d5008 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d4fc8:	2100      	movs	r1, #0
   d4fca:	4630      	mov	r0, r6
   d4fcc:	f7ff fb9d 	bl	d470a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d4fd0:	b910      	cbnz	r0, d4fd8 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d4fd2:	7873      	ldrb	r3, [r6, #1]
   d4fd4:	b15b      	cbz	r3, d4fee <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d4fd6:	e724      	b.n	d4e22 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d4fd8:	3401      	adds	r4, #1
   d4fda:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d4fdc:	e7ef      	b.n	d4fbe <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d4fde:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d4fe0:	791b      	ldrb	r3, [r3, #4]
   d4fe2:	2b01      	cmp	r3, #1
   d4fe4:	d8ed      	bhi.n	d4fc2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d4fe6:	3410      	adds	r4, #16
   d4fe8:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d4fea:	42a7      	cmp	r7, r4
   d4fec:	d9e9      	bls.n	d4fc2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d4fee:	4630      	mov	r0, r6
   d4ff0:	f7ff fa5e 	bl	d44b0 <_ZN7FatFile13addDirClusterEv>
   d4ff4:	2800      	cmp	r0, #0
   d4ff6:	d1f2      	bne.n	d4fde <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d4ff8:	e713      	b.n	d4e22 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d4ffa:	4649      	mov	r1, r9
   d4ffc:	4630      	mov	r0, r6
   d4ffe:	f7ff feaf 	bl	d4d60 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d5002:	2800      	cmp	r0, #0
   d5004:	f43f af0d 	beq.w	d4e22 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d5008:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d500c:	4630      	mov	r0, r6
   d500e:	f7ff fb99 	bl	d4744 <_ZN7FatFile7seekSetEm>
   d5012:	2800      	cmp	r0, #0
   d5014:	f43f af05 	beq.w	d4e22 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d5018:	1e7d      	subs	r5, r7, #1
   d501a:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d501c:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d501e:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d5022:	f04f 080f 	mov.w	r8, #15
   d5026:	e041      	b.n	d50ac <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5028:	2100      	movs	r1, #0
   d502a:	4630      	mov	r0, r6
   d502c:	f7ff fb6d 	bl	d470a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d5030:	4607      	mov	r7, r0
   d5032:	2800      	cmp	r0, #0
   d5034:	f43f aef5 	beq.w	d4e22 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d5038:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d503a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d503e:	42ac      	cmp	r4, r5
   d5040:	f043 0301 	orr.w	r3, r3, #1
   d5044:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d5048:	bf0c      	ite	eq
   d504a:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d504e:	4622      	movne	r2, r4
   d5050:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d5052:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d5056:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d505a:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d505e:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5060:	f7ff fd82 	bl	d4b68 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5064:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5066:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5068:	f887 a01a 	strb.w	sl, [r7, #26]
   d506c:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5070:	f002 021f 	and.w	r2, r2, #31
   d5074:	230d      	movs	r3, #13
   d5076:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5078:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d507c:	435a      	muls	r2, r3
   d507e:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5080:	9902      	ldr	r1, [sp, #8]
   d5082:	4291      	cmp	r1, r2
   d5084:	d915      	bls.n	d50b2 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d5086:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d508a:	2b04      	cmp	r3, #4
   d508c:	fa5f fc83 	uxtb.w	ip, r3
   d5090:	f103 0001 	add.w	r0, r3, #1
   d5094:	d813      	bhi.n	d50be <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d5096:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d509a:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d509e:	280d      	cmp	r0, #13
   d50a0:	f102 0201 	add.w	r2, r2, #1
   d50a4:	4603      	mov	r3, r0
   d50a6:	d1eb      	bne.n	d5080 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d50a8:	3c01      	subs	r4, #1
   d50aa:	b2e4      	uxtb	r4, r4
   d50ac:	2c00      	cmp	r4, #0
   d50ae:	d1bb      	bne.n	d5028 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d50b0:	e00e      	b.n	d50d0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d50b2:	bf14      	ite	ne
   d50b4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d50b8:	2100      	moveq	r1, #0
   d50ba:	b289      	uxth	r1, r1
   d50bc:	e7e5      	b.n	d508a <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d50be:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d50c2:	bf94      	ite	ls
   d50c4:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d50c8:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d50cc:	8099      	strh	r1, [r3, #4]
   d50ce:	e7e6      	b.n	d509e <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d50d0:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d50d2:	4621      	mov	r1, r4
   d50d4:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d50d6:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d50da:	f7ff fb16 	bl	d470a <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d50de:	4607      	mov	r7, r0
   d50e0:	2800      	cmp	r0, #0
   d50e2:	f43f ae9e 	beq.w	d4e22 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d50e6:	2220      	movs	r2, #32
   d50e8:	4621      	mov	r1, r4
   d50ea:	f002 fd45 	bl	d7b78 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d50ee:	464b      	mov	r3, r9
   d50f0:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d50f4:	603a      	str	r2, [r7, #0]
   d50f6:	685a      	ldr	r2, [r3, #4]
   d50f8:	607a      	str	r2, [r7, #4]
   d50fa:	891a      	ldrh	r2, [r3, #8]
   d50fc:	813a      	strh	r2, [r7, #8]
   d50fe:	7a9b      	ldrb	r3, [r3, #10]
   d5100:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d5102:	f899 3000 	ldrb.w	r3, [r9]
   d5106:	f003 0318 	and.w	r3, r3, #24
   d510a:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d510c:	4b18      	ldr	r3, [pc, #96]	; (d5170 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d510e:	681b      	ldr	r3, [r3, #0]
   d5110:	b12b      	cbz	r3, d511e <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d5112:	f107 010e 	add.w	r1, r7, #14
   d5116:	f107 0010 	add.w	r0, r7, #16
   d511a:	4798      	blx	r3
   d511c:	e006      	b.n	d512c <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d511e:	2321      	movs	r3, #33	; 0x21
   d5120:	743b      	strb	r3, [r7, #16]
   d5122:	2328      	movs	r3, #40	; 0x28
   d5124:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d5126:	2308      	movs	r3, #8
   d5128:	73bc      	strb	r4, [r7, #14]
   d512a:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d512c:	8a3b      	ldrh	r3, [r7, #16]
   d512e:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5130:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d5132:	89fb      	ldrh	r3, [r7, #14]
   d5134:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d5136:	68b2      	ldr	r2, [r6, #8]
   d5138:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d513c:	f043 0301 	orr.w	r3, r3, #1
   d5140:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5144:	9500      	str	r5, [sp, #0]
   d5146:	465b      	mov	r3, fp
   d5148:	4652      	mov	r2, sl
   d514a:	4631      	mov	r1, r6
   d514c:	9805      	ldr	r0, [sp, #20]
   d514e:	f7ff fb42 	bl	d47d6 <_ZN7FatFile15openCachedEntryEPS_tih>
   d5152:	e009      	b.n	d5168 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5154:	2701      	movs	r7, #1
   d5156:	e677      	b.n	d4e48 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5158:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d515c:	f1be 0f0d 	cmp.w	lr, #13
   d5160:	f43f ae82 	beq.w	d4e68 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5164:	46d4      	mov	ip, sl
   d5166:	e6c3      	b.n	d4ef0 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5168:	b009      	add	sp, #36	; 0x24
   d516a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d516e:	bf00      	nop
   d5170:	2003e494 	.word	0x2003e494

000d5174 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5174:	f000 bd06 	b.w	d5b84 <HAL_Pin_Map>

000d5178 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5178:	b570      	push	{r4, r5, r6, lr}
   d517a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d517c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d517e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5180:	b149      	cbz	r1, d5196 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5182:	f002 fd29 	bl	d7bd8 <strlen>
   d5186:	682b      	ldr	r3, [r5, #0]
   d5188:	4602      	mov	r2, r0
   d518a:	4621      	mov	r1, r4
   d518c:	4628      	mov	r0, r5
   d518e:	68db      	ldr	r3, [r3, #12]
    }
   d5190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5194:	4718      	bx	r3
    }
   d5196:	bd70      	pop	{r4, r5, r6, pc}

000d5198 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5198:	f000 bcf4 	b.w	d5b84 <HAL_Pin_Map>

000d519c <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d519c:	f000 bcf2 	b.w	d5b84 <HAL_Pin_Map>

000d51a0 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d51a0:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d51a2:	7803      	ldrb	r3, [r0, #0]
   d51a4:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d51a6:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d51a8:	d51e      	bpl.n	d51e8 <_ZN8FatCache4syncEv+0x48>
   d51aa:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d51ac:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d51ae:	f100 060c 	add.w	r6, r0, #12
   d51b2:	4632      	mov	r2, r6
   d51b4:	6818      	ldr	r0, [r3, #0]
   d51b6:	f000 fb9b 	bl	d58f0 <_ZN9SdSpiCard10writeBlockEmPKh>
   d51ba:	4605      	mov	r5, r0
   d51bc:	b908      	cbnz	r0, d51c2 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d51be:	2500      	movs	r5, #0
   d51c0:	e013      	b.n	d51ea <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d51c2:	7823      	ldrb	r3, [r4, #0]
   d51c4:	079b      	lsls	r3, r3, #30
   d51c6:	d404      	bmi.n	d51d2 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d51c8:	7823      	ldrb	r3, [r4, #0]
   d51ca:	f023 0301 	bic.w	r3, r3, #1
   d51ce:	7023      	strb	r3, [r4, #0]
   d51d0:	e00b      	b.n	d51ea <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d51d2:	6863      	ldr	r3, [r4, #4]
   d51d4:	68a0      	ldr	r0, [r4, #8]
   d51d6:	6919      	ldr	r1, [r3, #16]
   d51d8:	4632      	mov	r2, r6
   d51da:	4401      	add	r1, r0
   d51dc:	6818      	ldr	r0, [r3, #0]
   d51de:	f000 fb87 	bl	d58f0 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d51e2:	2800      	cmp	r0, #0
   d51e4:	d1f0      	bne.n	d51c8 <_ZN8FatCache4syncEv+0x28>
   d51e6:	e7ea      	b.n	d51be <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d51e8:	2501      	movs	r5, #1

fail:
  return false;
}
   d51ea:	4628      	mov	r0, r5
   d51ec:	bd70      	pop	{r4, r5, r6, pc}

000d51ee <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d51ee:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d51f0:	6883      	ldr	r3, [r0, #8]
   d51f2:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d51f4:	4604      	mov	r4, r0
   d51f6:	460e      	mov	r6, r1
   d51f8:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d51fa:	d014      	beq.n	d5226 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d51fc:	f7ff ffd0 	bl	d51a0 <_ZN8FatCache4syncEv>
   d5200:	b908      	cbnz	r0, d5206 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5202:	2000      	movs	r0, #0
   d5204:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5206:	076b      	lsls	r3, r5, #29
   d5208:	d503      	bpl.n	d5212 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d520a:	2300      	movs	r3, #0
   d520c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d520e:	60a6      	str	r6, [r4, #8]
   d5210:	e009      	b.n	d5226 <_ZN8FatCache4readEmh+0x38>
   d5212:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5214:	f104 020c 	add.w	r2, r4, #12
   d5218:	4631      	mov	r1, r6
   d521a:	6818      	ldr	r0, [r3, #0]
   d521c:	f000 fade 	bl	d57dc <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5220:	2800      	cmp	r0, #0
   d5222:	d1f2      	bne.n	d520a <_ZN8FatCache4readEmh+0x1c>
   d5224:	e7ed      	b.n	d5202 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5226:	7823      	ldrb	r3, [r4, #0]
   d5228:	4620      	mov	r0, r4
   d522a:	f005 0503 	and.w	r5, r5, #3
   d522e:	431d      	orrs	r5, r3
   d5230:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5234:	bd70      	pop	{r4, r5, r6, pc}

000d5236 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5236:	7983      	ldrb	r3, [r0, #6]
   d5238:	6940      	ldr	r0, [r0, #20]
   d523a:	3902      	subs	r1, #2
   d523c:	4099      	lsls	r1, r3
}
   d523e:	4408      	add	r0, r1
   d5240:	4770      	bx	lr

000d5242 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5242:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5244:	b570      	push	{r4, r5, r6, lr}
   d5246:	4605      	mov	r5, r0
   d5248:	460c      	mov	r4, r1
   d524a:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d524c:	d802      	bhi.n	d5254 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d524e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5252:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5254:	69c3      	ldr	r3, [r0, #28]
   d5256:	4299      	cmp	r1, r3
   d5258:	d8f9      	bhi.n	d524e <_ZN9FatVolume6fatGetEmPm+0xc>
   d525a:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d525c:	2b20      	cmp	r3, #32
   d525e:	d110      	bne.n	d5282 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5260:	6981      	ldr	r1, [r0, #24]
   d5262:	2202      	movs	r2, #2
   d5264:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5268:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d526c:	f7ff ffbf 	bl	d51ee <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5270:	2800      	cmp	r0, #0
   d5272:	d0ec      	beq.n	d524e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5274:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5278:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d527c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5280:	e00f      	b.n	d52a2 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d5282:	2b10      	cmp	r3, #16
   d5284:	d1e3      	bne.n	d524e <_ZN9FatVolume6fatGetEmPm+0xc>
   d5286:	6983      	ldr	r3, [r0, #24]
   d5288:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d528c:	2202      	movs	r2, #2
   d528e:	4419      	add	r1, r3
   d5290:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5294:	f7ff ffab 	bl	d51ee <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5298:	2800      	cmp	r0, #0
   d529a:	d0d8      	beq.n	d524e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d529c:	b2e4      	uxtb	r4, r4
   d529e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d52a2:	69ea      	ldr	r2, [r5, #28]
   d52a4:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d52a6:	bf9a      	itte	ls
   d52a8:	6033      	strls	r3, [r6, #0]
  return 1;
   d52aa:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d52ac:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d52ae:	bd70      	pop	{r4, r5, r6, pc}

000d52b0 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d52b0:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d52b2:	b538      	push	{r3, r4, r5, lr}
   d52b4:	460c      	mov	r4, r1
   d52b6:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d52b8:	d801      	bhi.n	d52be <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d52ba:	2000      	movs	r0, #0
   d52bc:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d52be:	69c3      	ldr	r3, [r0, #28]
   d52c0:	4299      	cmp	r1, r3
   d52c2:	d8fa      	bhi.n	d52ba <_ZN9FatVolume6fatPutEmm+0xa>
   d52c4:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d52c6:	2b20      	cmp	r3, #32
   d52c8:	d10e      	bne.n	d52e8 <_ZN9FatVolume6fatPutEmm+0x38>
   d52ca:	6981      	ldr	r1, [r0, #24]
   d52cc:	2203      	movs	r2, #3
   d52ce:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d52d2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d52d6:	f7ff ff8a 	bl	d51ee <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d52da:	2800      	cmp	r0, #0
   d52dc:	d0ed      	beq.n	d52ba <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d52de:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d52e2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d52e6:	e00f      	b.n	d5308 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d52e8:	2b10      	cmp	r3, #16
   d52ea:	d1e6      	bne.n	d52ba <_ZN9FatVolume6fatPutEmm+0xa>
   d52ec:	6983      	ldr	r3, [r0, #24]
   d52ee:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d52f2:	2203      	movs	r2, #3
   d52f4:	4419      	add	r1, r3
   d52f6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d52fa:	f7ff ff78 	bl	d51ee <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d52fe:	2800      	cmp	r0, #0
   d5300:	d0db      	beq.n	d52ba <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d5302:	b2e4      	uxtb	r4, r4
   d5304:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d5308:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d530a:	bd38      	pop	{r3, r4, r5, pc}

000d530c <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d530c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5310:	68c4      	ldr	r4, [r0, #12]
   d5312:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5314:	4605      	mov	r5, r0
   d5316:	460e      	mov	r6, r1
   d5318:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d531a:	d207      	bcs.n	d532c <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d531c:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d531e:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d5320:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d5322:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d5324:	429c      	cmp	r4, r3
   d5326:	d903      	bls.n	d5330 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d5328:	b9cf      	cbnz	r7, d535e <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d532a:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d532c:	2701      	movs	r7, #1
   d532e:	e7f7      	b.n	d5320 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5330:	42a6      	cmp	r6, r4
   d5332:	d014      	beq.n	d535e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5334:	aa01      	add	r2, sp, #4
   d5336:	4621      	mov	r1, r4
   d5338:	4628      	mov	r0, r5
   d533a:	f7ff ff82 	bl	d5242 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d533e:	2800      	cmp	r0, #0
   d5340:	db0d      	blt.n	d535e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d5342:	d0ed      	beq.n	d5320 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5344:	9b01      	ldr	r3, [sp, #4]
   d5346:	2b00      	cmp	r3, #0
   d5348:	d1ea      	bne.n	d5320 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d534a:	b107      	cbz	r7, d534e <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d534c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d534e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5352:	4621      	mov	r1, r4
   d5354:	4628      	mov	r0, r5
   d5356:	f7ff ffab 	bl	d52b0 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d535a:	4607      	mov	r7, r0
   d535c:	b908      	cbnz	r0, d5362 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d535e:	2700      	movs	r7, #0
   d5360:	e00b      	b.n	d537a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d5362:	b916      	cbnz	r6, d536a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5364:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5368:	e007      	b.n	d537a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d536a:	4622      	mov	r2, r4
   d536c:	4631      	mov	r1, r6
   d536e:	4628      	mov	r0, r5
   d5370:	f7ff ff9e 	bl	d52b0 <_ZN9FatVolume6fatPutEmm>
   d5374:	2800      	cmp	r0, #0
   d5376:	d1f5      	bne.n	d5364 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5378:	e7f1      	b.n	d535e <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d537a:	4638      	mov	r0, r7
   d537c:	b002      	add	sp, #8
   d537e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5382 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d5382:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5384:	4605      	mov	r5, r0
   d5386:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d5388:	aa01      	add	r2, sp, #4
   d538a:	4621      	mov	r1, r4
   d538c:	4628      	mov	r0, r5
   d538e:	f7ff ff58 	bl	d5242 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5392:	1e06      	subs	r6, r0, #0
   d5394:	da01      	bge.n	d539a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d5396:	2000      	movs	r0, #0
   d5398:	e00f      	b.n	d53ba <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d539a:	2200      	movs	r2, #0
   d539c:	4621      	mov	r1, r4
   d539e:	4628      	mov	r0, r5
   d53a0:	f7ff ff86 	bl	d52b0 <_ZN9FatVolume6fatPutEmm>
   d53a4:	2800      	cmp	r0, #0
   d53a6:	d0f6      	beq.n	d5396 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d53a8:	68eb      	ldr	r3, [r5, #12]
   d53aa:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d53ac:	bf9c      	itt	ls
   d53ae:	f104 34ff 	addls.w	r4, r4, #4294967295	; 0xffffffff
   d53b2:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d53b4:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d53b6:	2e00      	cmp	r6, #0
   d53b8:	d1e6      	bne.n	d5388 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d53ba:	b002      	add	sp, #8
   d53bc:	bd70      	pop	{r4, r5, r6, pc}

000d53be <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d53be:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d53c0:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d53c2:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d53c4:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d53c6:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d53c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d53cc:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d53ce:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d53d0:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d53d2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d53d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d53d8:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d53dc:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d53e0:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d53e4:	b1a1      	cbz	r1, d5410 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d53e6:	2904      	cmp	r1, #4
   d53e8:	d85d      	bhi.n	d54a6 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d53ea:	4611      	mov	r1, r2
   d53ec:	3024      	adds	r0, #36	; 0x24
   d53ee:	f7ff fefe 	bl	d51ee <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d53f2:	2800      	cmp	r0, #0
   d53f4:	d057      	beq.n	d54a6 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d53f6:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d53fa:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d53fe:	065b      	lsls	r3, r3, #25
   d5400:	d151      	bne.n	d54a6 <_ZN9FatVolume4initEh+0xe8>
   d5402:	351b      	adds	r5, #27
   d5404:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d5408:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d540c:	2d00      	cmp	r5, #0
   d540e:	d04a      	beq.n	d54a6 <_ZN9FatVolume4initEh+0xe8>
   d5410:	2200      	movs	r2, #0
   d5412:	4629      	mov	r1, r5
   d5414:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5418:	f7ff fee9 	bl	d51ee <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d541c:	2800      	cmp	r0, #0
   d541e:	d042      	beq.n	d54a6 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d5420:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d5424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d5428:	d13d      	bne.n	d54a6 <_ZN9FatVolume4initEh+0xe8>
   d542a:	7c03      	ldrb	r3, [r0, #16]
   d542c:	2b02      	cmp	r3, #2
   d542e:	d13a      	bne.n	d54a6 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d5430:	89c3      	ldrh	r3, [r0, #14]
   d5432:	2b00      	cmp	r3, #0
   d5434:	d037      	beq.n	d54a6 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d5436:	7b41      	ldrb	r1, [r0, #13]
   d5438:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d543a:	1e4b      	subs	r3, r1, #1
   d543c:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d543e:	2300      	movs	r3, #0
   d5440:	71a3      	strb	r3, [r4, #6]
   d5442:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5444:	2301      	movs	r3, #1
   d5446:	428b      	cmp	r3, r1
   d5448:	d007      	beq.n	d545a <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d544a:	3e01      	subs	r6, #1
   d544c:	d02b      	beq.n	d54a6 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d544e:	79a2      	ldrb	r2, [r4, #6]
   d5450:	005b      	lsls	r3, r3, #1
   d5452:	3201      	adds	r2, #1
   d5454:	b2db      	uxtb	r3, r3
   d5456:	71a2      	strb	r2, [r4, #6]
   d5458:	e7f5      	b.n	d5446 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d545a:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d545c:	b902      	cbnz	r2, d5460 <_ZN9FatVolume4initEh+0xa2>
   d545e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d5460:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d5462:	89c6      	ldrh	r6, [r0, #14]
   d5464:	442e      	add	r6, r5
   d5466:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d5468:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d546c:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d546e:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d5472:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d5474:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d5478:	0152      	lsls	r2, r2, #5
   d547a:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d547e:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d5482:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d5484:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d5488:	b903      	cbnz	r3, d548c <_ZN9FatVolume4initEh+0xce>
   d548a:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d548c:	1aad      	subs	r5, r5, r2
   d548e:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d5490:	79a5      	ldrb	r5, [r4, #6]
   d5492:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d5496:	1c6b      	adds	r3, r5, #1
   d5498:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d549a:	f640 73f4 	movw	r3, #4084	; 0xff4
   d549e:	429d      	cmp	r5, r3
   d54a0:	d803      	bhi.n	d54aa <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d54a2:	230c      	movs	r3, #12
   d54a4:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d54a6:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d54a8:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d54aa:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d54ae:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d54b0:	bf85      	ittet	hi
   d54b2:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d54b4:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d54b6:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d54b8:	2320      	movhi	r3, #32
   d54ba:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d54bc:	2001      	movs	r0, #1

fail:
  return false;
}
   d54be:	bd70      	pop	{r4, r5, r6, pc}

000d54c0 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d54c0:	f000 bb60 	b.w	d5b84 <HAL_Pin_Map>

000d54c4 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d54c4:	f000 bb5e 	b.w	d5b84 <HAL_Pin_Map>

000d54c8 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d54c8:	f000 bb5c 	b.w	d5b84 <HAL_Pin_Map>

000d54cc <_GLOBAL__sub_I__ZN7istream3getEv>:
   d54cc:	f000 bb5a 	b.w	d5b84 <HAL_Pin_Map>

000d54d0 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d54d0:	f000 bb58 	b.w	d5b84 <HAL_Pin_Map>

000d54d4 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d54d4:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d54d6:	4c0e      	ldr	r4, [pc, #56]	; (d5510 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d54d8:	460e      	mov	r6, r1
   d54da:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d54dc:	f000 fb32 	bl	d5b44 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d54e0:	6823      	ldr	r3, [r4, #0]
   d54e2:	1ac0      	subs	r0, r0, r3
   d54e4:	4b0b      	ldr	r3, [pc, #44]	; (d5514 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d54e6:	4298      	cmp	r0, r3
   d54e8:	d908      	bls.n	d54fc <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d54ea:	f000 fb33 	bl	d5b54 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d54ee:	4b0a      	ldr	r3, [pc, #40]	; (d5518 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d54f0:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d54f2:	f000 fcb3 	bl	d5e5c <spark_process>
   d54f6:	f000 fb25 	bl	d5b44 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d54fa:	6020      	str	r0, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d54fc:	f000 fb2a 	bl	d5b54 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d5500:	b280      	uxth	r0, r0
   d5502:	1b80      	subs	r0, r0, r6
}
   d5504:	42a8      	cmp	r0, r5
   d5506:	bfd4      	ite	le
   d5508:	2000      	movle	r0, #0
   d550a:	2001      	movgt	r0, #1
   d550c:	bd70      	pop	{r4, r5, r6, pc}
   d550e:	bf00      	nop
   d5510:	2003e498 	.word	0x2003e498
   d5514:	000186a0 	.word	0x000186a0
   d5518:	2003e714 	.word	0x2003e714

000d551c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d551c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d551e:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5520:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d5522:	b94d      	cbnz	r5, d5538 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d5524:	6840      	ldr	r0, [r0, #4]
   d5526:	f000 fa7d 	bl	d5a24 <_ZN14SdSpiAltDriver8activateEv>
   d552a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d552c:	4629      	mov	r1, r5
   d552e:	7d18      	ldrb	r0, [r3, #20]
   d5530:	f001 fc37 	bl	d6da2 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5534:	2301      	movs	r3, #1
   d5536:	7223      	strb	r3, [r4, #8]
   d5538:	bd38      	pop	{r3, r4, r5, pc}

000d553a <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d553a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d553c:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d553e:	4604      	mov	r4, r0
  if (m_spiActive) {
   d5540:	b16b      	cbz	r3, d555e <_ZN9SdSpiCard7spiStopEv+0x24>
   d5542:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d5544:	2101      	movs	r1, #1
   d5546:	7d18      	ldrb	r0, [r3, #20]
   d5548:	f001 fc2b 	bl	d6da2 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d554c:	21ff      	movs	r1, #255	; 0xff
   d554e:	6860      	ldr	r0, [r4, #4]
   d5550:	f000 fa9a 	bl	d5a88 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d5554:	6860      	ldr	r0, [r4, #4]
   d5556:	f000 fa79 	bl	d5a4c <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d555a:	2300      	movs	r3, #0
   d555c:	7223      	strb	r3, [r4, #8]
   d555e:	bd10      	pop	{r4, pc}

000d5560 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d5560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5562:	4604      	mov	r4, r0
   d5564:	460d      	mov	r5, r1
   d5566:	4616      	mov	r6, r2
   d5568:	f000 faf4 	bl	d5b54 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d556c:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d556e:	6860      	ldr	r0, [r4, #4]
   d5570:	f000 fa6f 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5574:	28ff      	cmp	r0, #255	; 0xff
   d5576:	7260      	strb	r0, [r4, #9]
   d5578:	d109      	bne.n	d558e <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d557a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d557e:	4639      	mov	r1, r7
   d5580:	4620      	mov	r0, r4
   d5582:	f7ff ffa7 	bl	d54d4 <_ZN9SdSpiCard10isTimedOutEtt>
   d5586:	2800      	cmp	r0, #0
   d5588:	d0f1      	beq.n	d556e <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d558a:	2355      	movs	r3, #85	; 0x55
   d558c:	e00b      	b.n	d55a6 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d558e:	28fe      	cmp	r0, #254	; 0xfe
   d5590:	d001      	beq.n	d5596 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d5592:	2350      	movs	r3, #80	; 0x50
   d5594:	e007      	b.n	d55a6 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d5596:	4632      	mov	r2, r6
   d5598:	4629      	mov	r1, r5
   d559a:	6860      	ldr	r0, [r4, #4]
   d559c:	f000 fa5e 	bl	d5a5c <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d55a0:	7260      	strb	r0, [r4, #9]
   d55a2:	b130      	cbz	r0, d55b2 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d55a4:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d55a6:	4620      	mov	r0, r4
   d55a8:	7023      	strb	r3, [r4, #0]
   d55aa:	f7ff ffc6 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d55ae:	2000      	movs	r0, #0
}
   d55b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d55b2:	6860      	ldr	r0, [r4, #4]
   d55b4:	f000 fa4d 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>
   d55b8:	6860      	ldr	r0, [r4, #4]
   d55ba:	f000 fa4a 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>
   d55be:	2001      	movs	r0, #1
   d55c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55c2 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d55c2:	b570      	push	{r4, r5, r6, lr}
   d55c4:	4604      	mov	r4, r0
   d55c6:	460e      	mov	r6, r1
   d55c8:	f000 fac4 	bl	d5b54 <HAL_Timer_Get_Milli_Seconds>
   d55cc:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d55ce:	4632      	mov	r2, r6
   d55d0:	4629      	mov	r1, r5
   d55d2:	4620      	mov	r0, r4
   d55d4:	f7ff ff7e 	bl	d54d4 <_ZN9SdSpiCard10isTimedOutEtt>
   d55d8:	b930      	cbnz	r0, d55e8 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d55da:	6860      	ldr	r0, [r4, #4]
   d55dc:	f000 fa39 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d55e0:	28ff      	cmp	r0, #255	; 0xff
   d55e2:	d1f4      	bne.n	d55ce <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d55e4:	2001      	movs	r0, #1
   d55e6:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d55e8:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d55ea:	bd70      	pop	{r4, r5, r6, pc}

000d55ec <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d55ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d55ee:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d55f0:	9201      	str	r2, [sp, #4]
   d55f2:	4604      	mov	r4, r0
   d55f4:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d55f6:	b90b      	cbnz	r3, d55fc <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d55f8:	f7ff ff90 	bl	d551c <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d55fc:	b125      	cbz	r5, d5608 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d55fe:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d5602:	4620      	mov	r0, r4
   d5604:	f7ff ffdd 	bl	d55c2 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5608:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d560c:	6860      	ldr	r0, [r4, #4]
   d560e:	f000 fa3b 	bl	d5a88 <_ZN14SdSpiAltDriver4sendEh>
   d5612:	f10d 0607 	add.w	r6, sp, #7
   d5616:	f10d 0703 	add.w	r7, sp, #3
   d561a:	f816 1901 	ldrb.w	r1, [r6], #-1
   d561e:	6860      	ldr	r0, [r4, #4]
   d5620:	f000 fa32 	bl	d5a88 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d5624:	42be      	cmp	r6, r7
   d5626:	d1f8      	bne.n	d561a <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d5628:	2d00      	cmp	r5, #0
   d562a:	bf0c      	ite	eq
   d562c:	2195      	moveq	r1, #149	; 0x95
   d562e:	2187      	movne	r1, #135	; 0x87
   d5630:	6860      	ldr	r0, [r4, #4]
   d5632:	f000 fa29 	bl	d5a88 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5636:	6860      	ldr	r0, [r4, #4]
   d5638:	f000 fa0b 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>
   d563c:	250b      	movs	r5, #11
   d563e:	6860      	ldr	r0, [r4, #4]
   d5640:	f000 fa07 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d5644:	0603      	lsls	r3, r0, #24
   d5646:	7260      	strb	r0, [r4, #9]
   d5648:	d503      	bpl.n	d5652 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d564a:	3d01      	subs	r5, #1
   d564c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5650:	d1f5      	bne.n	d563e <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d5652:	b003      	add	sp, #12
   d5654:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5656 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d5656:	b570      	push	{r4, r5, r6, lr}
   d5658:	4604      	mov	r4, r0
   d565a:	460d      	mov	r5, r1
   d565c:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d565e:	2137      	movs	r1, #55	; 0x37
   d5660:	2200      	movs	r2, #0
   d5662:	f7ff ffc3 	bl	d55ec <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d5666:	4632      	mov	r2, r6
   d5668:	4629      	mov	r1, r5
   d566a:	4620      	mov	r0, r4
  }
   d566c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d5670:	f7ff bfbc 	b.w	d55ec <_ZN9SdSpiCard11cardCommandEhm>

000d5674 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d5678:	2500      	movs	r5, #0
   d567a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d567c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d567e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d5680:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5682:	4604      	mov	r4, r0
   d5684:	4690      	mov	r8, r2
   d5686:	461e      	mov	r6, r3
   d5688:	f000 fa64 	bl	d5b54 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d568c:	4641      	mov	r1, r8
   d568e:	4607      	mov	r7, r0
   d5690:	6860      	ldr	r0, [r4, #4]
   d5692:	f000 f9cb 	bl	d5a2c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d5696:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5698:	4a4f      	ldr	r2, [pc, #316]	; (d57d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d569a:	721d      	strb	r5, [r3, #8]
   d569c:	f04f 0801 	mov.w	r8, #1
   d56a0:	60da      	str	r2, [r3, #12]
   d56a2:	745d      	strb	r5, [r3, #17]
   d56a4:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d56a8:	4620      	mov	r0, r4
   d56aa:	f7ff ff37 	bl	d551c <_ZN9SdSpiCard8spiStartEv>
   d56ae:	6863      	ldr	r3, [r4, #4]
   d56b0:	4641      	mov	r1, r8
   d56b2:	7d18      	ldrb	r0, [r3, #20]
   d56b4:	f001 fb75 	bl	d6da2 <digitalWrite>
   d56b8:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d56ba:	21ff      	movs	r1, #255	; 0xff
   d56bc:	6860      	ldr	r0, [r4, #4]
   d56be:	3d01      	subs	r5, #1
   d56c0:	f000 f9e2 	bl	d5a88 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d56c4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d56c8:	d1f7      	bne.n	d56ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d56ca:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d56cc:	4629      	mov	r1, r5
   d56ce:	7d18      	ldrb	r0, [r3, #20]
   d56d0:	f001 fb67 	bl	d6da2 <digitalWrite>
   d56d4:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d56d6:	2200      	movs	r2, #0
   d56d8:	4611      	mov	r1, r2
   d56da:	4620      	mov	r0, r4
   d56dc:	f7ff ff86 	bl	d55ec <_ZN9SdSpiCard11cardCommandEhm>
   d56e0:	2801      	cmp	r0, #1
   d56e2:	4680      	mov	r8, r0
   d56e4:	d012      	beq.n	d570c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d56e6:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d56e8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d56ec:	d101      	bne.n	d56f2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d56ee:	2320      	movs	r3, #32
   d56f0:	e057      	b.n	d57a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d56f2:	21fd      	movs	r1, #253	; 0xfd
   d56f4:	6860      	ldr	r0, [r4, #4]
   d56f6:	f000 f9c7 	bl	d5a88 <_ZN14SdSpiAltDriver4sendEh>
   d56fa:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d56fe:	6860      	ldr	r0, [r4, #4]
   d5700:	f000 f9a7 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d5704:	f1b8 0801 	subs.w	r8, r8, #1
   d5708:	d1f9      	bne.n	d56fe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d570a:	e7e4      	b.n	d56d6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d570c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d5710:	2108      	movs	r1, #8
   d5712:	4620      	mov	r0, r4
   d5714:	f7ff ff6a 	bl	d55ec <_ZN9SdSpiCard11cardCommandEhm>
   d5718:	2805      	cmp	r0, #5
   d571a:	d102      	bne.n	d5722 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d571c:	f884 800a 	strb.w	r8, [r4, #10]
   d5720:	e00f      	b.n	d5742 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d5722:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5724:	6860      	ldr	r0, [r4, #4]
   d5726:	f000 f994 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>
   d572a:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d572c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d5730:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5732:	d1f7      	bne.n	d5724 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d5734:	28aa      	cmp	r0, #170	; 0xaa
   d5736:	d102      	bne.n	d573e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5738:	2302      	movs	r3, #2
   d573a:	72a3      	strb	r3, [r4, #10]
   d573c:	e001      	b.n	d5742 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d573e:	2325      	movs	r3, #37	; 0x25
   d5740:	e02f      	b.n	d57a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d5742:	7aa3      	ldrb	r3, [r4, #10]
   d5744:	2b02      	cmp	r3, #2
   d5746:	bf0c      	ite	eq
   d5748:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d574c:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d574e:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d5750:	462a      	mov	r2, r5
   d5752:	2129      	movs	r1, #41	; 0x29
   d5754:	4620      	mov	r0, r4
   d5756:	f7ff ff7e 	bl	d5656 <_ZN9SdSpiCard8cardAcmdEhm>
   d575a:	4602      	mov	r2, r0
   d575c:	b148      	cbz	r0, d5772 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d575e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d5762:	4639      	mov	r1, r7
   d5764:	4620      	mov	r0, r4
   d5766:	f7ff feb5 	bl	d54d4 <_ZN9SdSpiCard10isTimedOutEtt>
   d576a:	2800      	cmp	r0, #0
   d576c:	d0f0      	beq.n	d5750 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d576e:	2343      	movs	r3, #67	; 0x43
   d5770:	e017      	b.n	d57a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d5772:	7aa3      	ldrb	r3, [r4, #10]
   d5774:	2b02      	cmp	r3, #2
   d5776:	d00e      	beq.n	d5796 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d5778:	4620      	mov	r0, r4
   d577a:	f7ff fede 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d577e:	6863      	ldr	r3, [r4, #4]
   d5780:	68b0      	ldr	r0, [r6, #8]
   d5782:	7934      	ldrb	r4, [r6, #4]
   d5784:	7b31      	ldrb	r1, [r6, #12]
   d5786:	7b72      	ldrb	r2, [r6, #13]
   d5788:	745a      	strb	r2, [r3, #17]
   d578a:	60d8      	str	r0, [r3, #12]
   d578c:	721c      	strb	r4, [r3, #8]
   d578e:	7419      	strb	r1, [r3, #16]
  return true;
   d5790:	2001      	movs	r0, #1
   d5792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d5796:	213a      	movs	r1, #58	; 0x3a
   d5798:	4620      	mov	r0, r4
   d579a:	f7ff ff27 	bl	d55ec <_ZN9SdSpiCard11cardCommandEhm>
   d579e:	b138      	cbz	r0, d57b0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d57a0:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d57a2:	4620      	mov	r0, r4
   d57a4:	7023      	strb	r3, [r4, #0]
   d57a6:	f7ff fec8 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d57aa:	2000      	movs	r0, #0
}
   d57ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d57b0:	6860      	ldr	r0, [r4, #4]
   d57b2:	f000 f94e 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d57b6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d57ba:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d57bc:	bf04      	itt	eq
   d57be:	2303      	moveq	r3, #3
   d57c0:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d57c2:	6860      	ldr	r0, [r4, #4]
   d57c4:	f000 f945 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>
   d57c8:	6860      	ldr	r0, [r4, #4]
   d57ca:	f000 f942 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>
   d57ce:	6860      	ldr	r0, [r4, #4]
   d57d0:	f000 f93f 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>
   d57d4:	e7d0      	b.n	d5778 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d57d6:	bf00      	nop
   d57d8:	0003d090 	.word	0x0003d090

000d57dc <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d57dc:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d57de:	7a83      	ldrb	r3, [r0, #10]
   d57e0:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d57e2:	bf18      	it	ne
   d57e4:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d57e6:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d57e8:	460a      	mov	r2, r1
   d57ea:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d57ec:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d57ee:	f7ff fefd 	bl	d55ec <_ZN9SdSpiCard11cardCommandEhm>
   d57f2:	b110      	cbz	r0, d57fa <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d57f4:	2330      	movs	r3, #48	; 0x30
   d57f6:	7023      	strb	r3, [r4, #0]
   d57f8:	e00b      	b.n	d5812 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d57fa:	4629      	mov	r1, r5
   d57fc:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5800:	4620      	mov	r0, r4
   d5802:	f7ff fead 	bl	d5560 <_ZN9SdSpiCard8readDataEPhj>
   d5806:	4605      	mov	r5, r0
   d5808:	b118      	cbz	r0, d5812 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d580a:	4620      	mov	r0, r4
   d580c:	f7ff fe95 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5810:	e003      	b.n	d581a <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d5812:	4620      	mov	r0, r4
   d5814:	f7ff fe91 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5818:	2500      	movs	r5, #0
}
   d581a:	4628      	mov	r0, r5
   d581c:	bd38      	pop	{r3, r4, r5, pc}

000d581e <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d581e:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d5820:	7a83      	ldrb	r3, [r0, #10]
   d5822:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5824:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5826:	bf18      	it	ne
   d5828:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d582a:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d582c:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d582e:	f7ff fedd 	bl	d55ec <_ZN9SdSpiCard11cardCommandEhm>
   d5832:	b130      	cbz	r0, d5842 <_ZN9SdSpiCard9readStartEm+0x24>
   d5834:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d5836:	4620      	mov	r0, r4
   d5838:	7023      	strb	r3, [r4, #0]
   d583a:	f7ff fe7e 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d583e:	2000      	movs	r0, #0
   d5840:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d5842:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5844:	bd10      	pop	{r4, pc}

000d5846 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5846:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d5848:	2200      	movs	r2, #0
   d584a:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d584c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d584e:	f7ff fecd 	bl	d55ec <_ZN9SdSpiCard11cardCommandEhm>
   d5852:	b130      	cbz	r0, d5862 <_ZN9SdSpiCard8readStopEv+0x1c>
   d5854:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d5856:	4620      	mov	r0, r4
   d5858:	7023      	strb	r3, [r4, #0]
   d585a:	f7ff fe6e 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d585e:	2000      	movs	r0, #0
   d5860:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d5862:	4620      	mov	r0, r4
   d5864:	f7ff fe69 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5868:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d586a:	bd10      	pop	{r4, pc}

000d586c <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d586e:	4605      	mov	r5, r0
   d5870:	4616      	mov	r6, r2
   d5872:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d5874:	f7ff ffd3 	bl	d581e <_ZN9SdSpiCard9readStartEm>
   d5878:	b198      	cbz	r0, d58a2 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d587a:	2400      	movs	r4, #0
   d587c:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d587e:	429f      	cmp	r7, r3
   d5880:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d5884:	d908      	bls.n	d5898 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d5886:	f44f 7200 	mov.w	r2, #512	; 0x200
   d588a:	4628      	mov	r0, r5
   d588c:	f7ff fe68 	bl	d5560 <_ZN9SdSpiCard8readDataEPhj>
   d5890:	3401      	adds	r4, #1
   d5892:	2800      	cmp	r0, #0
   d5894:	d1f2      	bne.n	d587c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d5896:	e004      	b.n	d58a2 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d5898:	4628      	mov	r0, r5
}
   d589a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d589e:	f7ff bfd2 	b.w	d5846 <_ZN9SdSpiCard8readStopEv>
}
   d58a2:	2000      	movs	r0, #0
   d58a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58a6 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d58a6:	b538      	push	{r3, r4, r5, lr}
   d58a8:	4604      	mov	r4, r0
   d58aa:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d58ac:	6840      	ldr	r0, [r0, #4]
   d58ae:	f000 f8eb 	bl	d5a88 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d58b2:	f44f 7200 	mov.w	r2, #512	; 0x200
   d58b6:	4629      	mov	r1, r5
   d58b8:	6860      	ldr	r0, [r4, #4]
   d58ba:	f000 f8e9 	bl	d5a90 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d58be:	21ff      	movs	r1, #255	; 0xff
   d58c0:	6860      	ldr	r0, [r4, #4]
   d58c2:	f000 f8e1 	bl	d5a88 <_ZN14SdSpiAltDriver4sendEh>
   d58c6:	21ff      	movs	r1, #255	; 0xff
   d58c8:	6860      	ldr	r0, [r4, #4]
   d58ca:	f000 f8dd 	bl	d5a88 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d58ce:	6860      	ldr	r0, [r4, #4]
   d58d0:	f000 f8bf 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d58d4:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d58d6:	f000 001f 	and.w	r0, r0, #31
   d58da:	2805      	cmp	r0, #5
   d58dc:	d006      	beq.n	d58ec <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d58de:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d58e0:	4620      	mov	r0, r4
   d58e2:	7023      	strb	r3, [r4, #0]
   d58e4:	f7ff fe29 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d58e8:	2000      	movs	r0, #0
   d58ea:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d58ec:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d58ee:	bd38      	pop	{r3, r4, r5, pc}

000d58f0 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d58f0:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d58f2:	7a83      	ldrb	r3, [r0, #10]
   d58f4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d58f6:	bf18      	it	ne
   d58f8:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d58fa:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d58fc:	460a      	mov	r2, r1
   d58fe:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5900:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5902:	f7ff fe73 	bl	d55ec <_ZN9SdSpiCard11cardCommandEhm>
   d5906:	4606      	mov	r6, r0
   d5908:	b108      	cbz	r0, d590e <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d590a:	2332      	movs	r3, #50	; 0x32
   d590c:	e01d      	b.n	d594a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d590e:	462a      	mov	r2, r5
   d5910:	21fe      	movs	r1, #254	; 0xfe
   d5912:	4620      	mov	r0, r4
   d5914:	f7ff ffc7 	bl	d58a6 <_ZN9SdSpiCard9writeDataEhPKh>
   d5918:	b1c0      	cbz	r0, d594c <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d591a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d591e:	4620      	mov	r0, r4
   d5920:	f7ff fe4f 	bl	d55c2 <_ZN9SdSpiCard11waitNotBusyEt>
   d5924:	4605      	mov	r5, r0
   d5926:	b908      	cbnz	r0, d592c <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d5928:	235a      	movs	r3, #90	; 0x5a
   d592a:	e00e      	b.n	d594a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d592c:	4632      	mov	r2, r6
   d592e:	210d      	movs	r1, #13
   d5930:	4620      	mov	r0, r4
   d5932:	f7ff fe5b 	bl	d55ec <_ZN9SdSpiCard11cardCommandEhm>
   d5936:	b938      	cbnz	r0, d5948 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5938:	6860      	ldr	r0, [r4, #4]
   d593a:	f000 f88a 	bl	d5a52 <_ZN14SdSpiAltDriver7receiveEv>
   d593e:	b918      	cbnz	r0, d5948 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d5940:	4620      	mov	r0, r4
   d5942:	f7ff fdfa 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5946:	e005      	b.n	d5954 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5948:	2329      	movs	r3, #41	; 0x29
   d594a:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d594c:	4620      	mov	r0, r4
   d594e:	f7ff fdf4 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5952:	2500      	movs	r5, #0
}
   d5954:	4628      	mov	r0, r5
   d5956:	bd70      	pop	{r4, r5, r6, pc}

000d5958 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5958:	b538      	push	{r3, r4, r5, lr}
   d595a:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d595c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5960:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5962:	f7ff fe2e 	bl	d55c2 <_ZN9SdSpiCard11waitNotBusyEt>
   d5966:	b910      	cbnz	r0, d596e <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d5968:	235b      	movs	r3, #91	; 0x5b
   d596a:	7023      	strb	r3, [r4, #0]
   d596c:	e005      	b.n	d597a <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d596e:	462a      	mov	r2, r5
   d5970:	21fc      	movs	r1, #252	; 0xfc
   d5972:	4620      	mov	r0, r4
   d5974:	f7ff ff97 	bl	d58a6 <_ZN9SdSpiCard9writeDataEhPKh>
   d5978:	b918      	cbnz	r0, d5982 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d597a:	4620      	mov	r0, r4
   d597c:	f7ff fddd 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5980:	2000      	movs	r0, #0
}
   d5982:	bd38      	pop	{r3, r4, r5, pc}

000d5984 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5984:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5986:	7a83      	ldrb	r3, [r0, #10]
   d5988:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d598a:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d598c:	bf18      	it	ne
   d598e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5990:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5992:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5994:	f7ff fe2a 	bl	d55ec <_ZN9SdSpiCard11cardCommandEhm>
   d5998:	b130      	cbz	r0, d59a8 <_ZN9SdSpiCard10writeStartEm+0x24>
   d599a:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d599c:	4620      	mov	r0, r4
   d599e:	7023      	strb	r3, [r4, #0]
   d59a0:	f7ff fdcb 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d59a4:	2000      	movs	r0, #0
   d59a6:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d59a8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d59aa:	bd10      	pop	{r4, pc}

000d59ac <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d59ac:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d59ae:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d59b2:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d59b4:	f7ff fe05 	bl	d55c2 <_ZN9SdSpiCard11waitNotBusyEt>
   d59b8:	4605      	mov	r5, r0
   d59ba:	b120      	cbz	r0, d59c6 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d59bc:	21fd      	movs	r1, #253	; 0xfd
   d59be:	6860      	ldr	r0, [r4, #4]
   d59c0:	f000 f862 	bl	d5a88 <_ZN14SdSpiAltDriver4sendEh>
   d59c4:	e001      	b.n	d59ca <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d59c6:	2356      	movs	r3, #86	; 0x56
   d59c8:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d59ca:	4620      	mov	r0, r4
   d59cc:	f7ff fdb5 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d59d0:	4628      	mov	r0, r5
   d59d2:	bd38      	pop	{r3, r4, r5, pc}

000d59d4 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d59d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59d6:	4605      	mov	r5, r0
   d59d8:	4616      	mov	r6, r2
   d59da:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d59dc:	f7ff ffd2 	bl	d5984 <_ZN9SdSpiCard10writeStartEm>
   d59e0:	b170      	cbz	r0, d5a00 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d59e2:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d59e4:	42bc      	cmp	r4, r7
   d59e6:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d59ea:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d59ec:	d004      	beq.n	d59f8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d59ee:	f7ff ffb3 	bl	d5958 <_ZN9SdSpiCard9writeDataEPKh>
   d59f2:	b128      	cbz	r0, d5a00 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d59f4:	3401      	adds	r4, #1
   d59f6:	e7f5      	b.n	d59e4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d59f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d59fc:	f7ff bfd6 	b.w	d59ac <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d5a00:	4628      	mov	r0, r5
   d5a02:	f7ff fd9a 	bl	d553a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5a06:	2000      	movs	r0, #0
   d5a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a0a <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d5a0a:	f000 b8bb 	b.w	d5b84 <HAL_Pin_Map>

000d5a0e <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d5a0e:	f000 b8b9 	b.w	d5b84 <HAL_Pin_Map>

000d5a12 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d5a12:	f000 b8b7 	b.w	d5b84 <HAL_Pin_Map>
	...

000d5a18 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d5a18:	4b01      	ldr	r3, [pc, #4]	; (d5a20 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d5a1a:	2201      	movs	r2, #1
   d5a1c:	701a      	strb	r2, [r3, #0]
   d5a1e:	4770      	bx	lr
   d5a20:	2003e49c 	.word	0x2003e49c

000d5a24 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d5a24:	1d01      	adds	r1, r0, #4
   d5a26:	6800      	ldr	r0, [r0, #0]
   d5a28:	f000 bf20 	b.w	d686c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d5a2c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d5a2c:	b510      	push	{r4, lr}
   d5a2e:	4604      	mov	r4, r0
  m_csPin = csPin;
   d5a30:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d5a32:	6800      	ldr	r0, [r0, #0]
   d5a34:	f000 fefc 	bl	d6830 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d5a38:	7d20      	ldrb	r0, [r4, #20]
   d5a3a:	2101      	movs	r1, #1
   d5a3c:	f001 f9a0 	bl	d6d80 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d5a40:	7d20      	ldrb	r0, [r4, #20]
   d5a42:	2101      	movs	r1, #1
}
   d5a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d5a48:	f001 b9ab 	b.w	d6da2 <digitalWrite>

000d5a4c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5a4c:	6800      	ldr	r0, [r0, #0]
   d5a4e:	f000 bef4 	b.w	d683a <_ZN8SPIClass14endTransactionEv>

000d5a52 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d5a52:	21ff      	movs	r1, #255	; 0xff
   d5a54:	6800      	ldr	r0, [r0, #0]
   d5a56:	f000 bf79 	b.w	d694c <_ZN8SPIClass8transferEh>
	...

000d5a5c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5a5e:	4b08      	ldr	r3, [pc, #32]	; (d5a80 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d5a60:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5a62:	2500      	movs	r5, #0
   d5a64:	4c07      	ldr	r4, [pc, #28]	; (d5a84 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5a66:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5a68:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5a6a:	4613      	mov	r3, r2
   d5a6c:	460a      	mov	r2, r1
   d5a6e:	4629      	mov	r1, r5
   d5a70:	f000 ff72 	bl	d6958 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5a74:	7823      	ldrb	r3, [r4, #0]
   d5a76:	2b00      	cmp	r3, #0
   d5a78:	d0fc      	beq.n	d5a74 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5a7a:	2000      	movs	r0, #0
   d5a7c:	b003      	add	sp, #12
   d5a7e:	bd30      	pop	{r4, r5, pc}
   d5a80:	000d5a19 	.word	0x000d5a19
   d5a84:	2003e49c 	.word	0x2003e49c

000d5a88 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d5a88:	6800      	ldr	r0, [r0, #0]
   d5a8a:	f000 bf5f 	b.w	d694c <_ZN8SPIClass8transferEh>
	...

000d5a90 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d5a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5a92:	4b07      	ldr	r3, [pc, #28]	; (d5ab0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d5a94:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5a96:	2500      	movs	r5, #0
   d5a98:	4c06      	ldr	r4, [pc, #24]	; (d5ab4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5a9a:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5a9c:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5a9e:	4613      	mov	r3, r2
   d5aa0:	462a      	mov	r2, r5
   d5aa2:	f000 ff59 	bl	d6958 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d5aa6:	7823      	ldrb	r3, [r4, #0]
   d5aa8:	2b00      	cmp	r3, #0
   d5aaa:	d0fc      	beq.n	d5aa6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5aac:	b003      	add	sp, #12
   d5aae:	bd30      	pop	{r4, r5, pc}
   d5ab0:	000d5a19 	.word	0x000d5a19
   d5ab4:	2003e49c 	.word	0x2003e49c

000d5ab8 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d5ab8:	f000 b864 	b.w	d5b84 <HAL_Pin_Map>

000d5abc <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d5abc:	f000 b862 	b.w	d5b84 <HAL_Pin_Map>

000d5ac0 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d5ac0:	f000 b860 	b.w	d5b84 <HAL_Pin_Map>

000d5ac4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5ac4:	b508      	push	{r3, lr}
   d5ac6:	4b02      	ldr	r3, [pc, #8]	; (d5ad0 <os_thread_is_current+0xc>)
   d5ac8:	681b      	ldr	r3, [r3, #0]
   d5aca:	689b      	ldr	r3, [r3, #8]
   d5acc:	9301      	str	r3, [sp, #4]
   d5ace:	bd08      	pop	{r3, pc}
   d5ad0:	00030248 	.word	0x00030248

000d5ad4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5ad4:	b508      	push	{r3, lr}
   d5ad6:	4b02      	ldr	r3, [pc, #8]	; (d5ae0 <os_thread_join+0xc>)
   d5ad8:	681b      	ldr	r3, [r3, #0]
   d5ada:	691b      	ldr	r3, [r3, #16]
   d5adc:	9301      	str	r3, [sp, #4]
   d5ade:	bd08      	pop	{r3, pc}
   d5ae0:	00030248 	.word	0x00030248

000d5ae4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5ae4:	b508      	push	{r3, lr}
   d5ae6:	4b02      	ldr	r3, [pc, #8]	; (d5af0 <os_thread_cleanup+0xc>)
   d5ae8:	681b      	ldr	r3, [r3, #0]
   d5aea:	695b      	ldr	r3, [r3, #20]
   d5aec:	9301      	str	r3, [sp, #4]
   d5aee:	bd08      	pop	{r3, pc}
   d5af0:	00030248 	.word	0x00030248

000d5af4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5af4:	b508      	push	{r3, lr}
   d5af6:	4b02      	ldr	r3, [pc, #8]	; (d5b00 <os_mutex_create+0xc>)
   d5af8:	681b      	ldr	r3, [r3, #0]
   d5afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5afc:	9301      	str	r3, [sp, #4]
   d5afe:	bd08      	pop	{r3, pc}
   d5b00:	00030248 	.word	0x00030248

000d5b04 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d5b04:	b508      	push	{r3, lr}
   d5b06:	4b02      	ldr	r3, [pc, #8]	; (d5b10 <os_mutex_lock+0xc>)
   d5b08:	681b      	ldr	r3, [r3, #0]
   d5b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5b0c:	9301      	str	r3, [sp, #4]
   d5b0e:	bd08      	pop	{r3, pc}
   d5b10:	00030248 	.word	0x00030248

000d5b14 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d5b14:	b508      	push	{r3, lr}
   d5b16:	4b02      	ldr	r3, [pc, #8]	; (d5b20 <os_mutex_unlock+0xc>)
   d5b18:	681b      	ldr	r3, [r3, #0]
   d5b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5b1c:	9301      	str	r3, [sp, #4]
   d5b1e:	bd08      	pop	{r3, pc}
   d5b20:	00030248 	.word	0x00030248

000d5b24 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5b24:	b508      	push	{r3, lr}
   d5b26:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <os_mutex_recursive_create+0xc>)
   d5b28:	681b      	ldr	r3, [r3, #0]
   d5b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5b2c:	9301      	str	r3, [sp, #4]
   d5b2e:	bd08      	pop	{r3, pc}
   d5b30:	00030248 	.word	0x00030248

000d5b34 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5b34:	b508      	push	{r3, lr}
   d5b36:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <HAL_RNG_GetRandomNumber+0xc>)
   d5b38:	681b      	ldr	r3, [r3, #0]
   d5b3a:	685b      	ldr	r3, [r3, #4]
   d5b3c:	9301      	str	r3, [sp, #4]
   d5b3e:	bd08      	pop	{r3, pc}
   d5b40:	00030218 	.word	0x00030218

000d5b44 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5b44:	b508      	push	{r3, lr}
   d5b46:	4b02      	ldr	r3, [pc, #8]	; (d5b50 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5b48:	681b      	ldr	r3, [r3, #0]
   d5b4a:	691b      	ldr	r3, [r3, #16]
   d5b4c:	9301      	str	r3, [sp, #4]
   d5b4e:	bd08      	pop	{r3, pc}
   d5b50:	00030218 	.word	0x00030218

000d5b54 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5b54:	b508      	push	{r3, lr}
   d5b56:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	695b      	ldr	r3, [r3, #20]
   d5b5c:	9301      	str	r3, [sp, #4]
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	00030218 	.word	0x00030218

000d5b64 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5b64:	b508      	push	{r3, lr}
   d5b66:	4b02      	ldr	r3, [pc, #8]	; (d5b70 <HAL_RTC_Get_UnixTime+0xc>)
   d5b68:	681b      	ldr	r3, [r3, #0]
   d5b6a:	69db      	ldr	r3, [r3, #28]
   d5b6c:	9301      	str	r3, [sp, #4]
   d5b6e:	bd08      	pop	{r3, pc}
   d5b70:	00030218 	.word	0x00030218

000d5b74 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5b74:	b508      	push	{r3, lr}
   d5b76:	4b02      	ldr	r3, [pc, #8]	; (d5b80 <HAL_RTC_Time_Is_Valid+0xc>)
   d5b78:	681b      	ldr	r3, [r3, #0]
   d5b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5b7c:	9301      	str	r3, [sp, #4]
   d5b7e:	bd08      	pop	{r3, pc}
   d5b80:	00030218 	.word	0x00030218

000d5b84 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5b84:	b508      	push	{r3, lr}
   d5b86:	4b02      	ldr	r3, [pc, #8]	; (d5b90 <HAL_Pin_Map+0xc>)
   d5b88:	681b      	ldr	r3, [r3, #0]
   d5b8a:	681b      	ldr	r3, [r3, #0]
   d5b8c:	9301      	str	r3, [sp, #4]
   d5b8e:	bd08      	pop	{r3, pc}
   d5b90:	0003022c 	.word	0x0003022c

000d5b94 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5b94:	b508      	push	{r3, lr}
   d5b96:	4b02      	ldr	r3, [pc, #8]	; (d5ba0 <HAL_Validate_Pin_Function+0xc>)
   d5b98:	681b      	ldr	r3, [r3, #0]
   d5b9a:	685b      	ldr	r3, [r3, #4]
   d5b9c:	9301      	str	r3, [sp, #4]
   d5b9e:	bd08      	pop	{r3, pc}
   d5ba0:	0003022c 	.word	0x0003022c

000d5ba4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5ba4:	b508      	push	{r3, lr}
   d5ba6:	4b02      	ldr	r3, [pc, #8]	; (d5bb0 <HAL_Pin_Mode+0xc>)
   d5ba8:	681b      	ldr	r3, [r3, #0]
   d5baa:	689b      	ldr	r3, [r3, #8]
   d5bac:	9301      	str	r3, [sp, #4]
   d5bae:	bd08      	pop	{r3, pc}
   d5bb0:	0003022c 	.word	0x0003022c

000d5bb4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5bb4:	b508      	push	{r3, lr}
   d5bb6:	4b02      	ldr	r3, [pc, #8]	; (d5bc0 <HAL_Get_Pin_Mode+0xc>)
   d5bb8:	681b      	ldr	r3, [r3, #0]
   d5bba:	68db      	ldr	r3, [r3, #12]
   d5bbc:	9301      	str	r3, [sp, #4]
   d5bbe:	bd08      	pop	{r3, pc}
   d5bc0:	0003022c 	.word	0x0003022c

000d5bc4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5bc4:	b508      	push	{r3, lr}
   d5bc6:	4b02      	ldr	r3, [pc, #8]	; (d5bd0 <HAL_GPIO_Write+0xc>)
   d5bc8:	681b      	ldr	r3, [r3, #0]
   d5bca:	691b      	ldr	r3, [r3, #16]
   d5bcc:	9301      	str	r3, [sp, #4]
   d5bce:	bd08      	pop	{r3, pc}
   d5bd0:	0003022c 	.word	0x0003022c

000d5bd4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5bd4:	b508      	push	{r3, lr}
   d5bd6:	4b02      	ldr	r3, [pc, #8]	; (d5be0 <HAL_ADC_Read+0xc>)
   d5bd8:	681b      	ldr	r3, [r3, #0]
   d5bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5bdc:	9301      	str	r3, [sp, #4]
   d5bde:	bd08      	pop	{r3, pc}
   d5be0:	0003022c 	.word	0x0003022c

000d5be4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5be4:	b508      	push	{r3, lr}
   d5be6:	4b02      	ldr	r3, [pc, #8]	; (d5bf0 <HAL_I2C_Write_Data+0xc>)
   d5be8:	681b      	ldr	r3, [r3, #0]
   d5bea:	6a1b      	ldr	r3, [r3, #32]
   d5bec:	9301      	str	r3, [sp, #4]
   d5bee:	bd08      	pop	{r3, pc}
   d5bf0:	00030228 	.word	0x00030228

000d5bf4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5bf4:	b508      	push	{r3, lr}
   d5bf6:	4b02      	ldr	r3, [pc, #8]	; (d5c00 <HAL_I2C_Available_Data+0xc>)
   d5bf8:	681b      	ldr	r3, [r3, #0]
   d5bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5bfc:	9301      	str	r3, [sp, #4]
   d5bfe:	bd08      	pop	{r3, pc}
   d5c00:	00030228 	.word	0x00030228

000d5c04 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <HAL_I2C_Read_Data+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	00030228 	.word	0x00030228

000d5c14 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <HAL_I2C_Peek_Data+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	00030228 	.word	0x00030228

000d5c24 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <HAL_I2C_Flush_Data+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	00030228 	.word	0x00030228

000d5c34 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b02      	ldr	r3, [pc, #8]	; (d5c40 <HAL_I2C_Is_Enabled+0xc>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c3c:	9301      	str	r3, [sp, #4]
   d5c3e:	bd08      	pop	{r3, pc}
   d5c40:	00030228 	.word	0x00030228

000d5c44 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <HAL_I2C_Init+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	00030228 	.word	0x00030228

000d5c54 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <inet_inet_ntop+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	695b      	ldr	r3, [r3, #20]
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	00030264 	.word	0x00030264

000d5c64 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b02      	ldr	r3, [pc, #8]	; (d5c70 <netdb_freeaddrinfo+0xc>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	689b      	ldr	r3, [r3, #8]
   d5c6c:	9301      	str	r3, [sp, #4]
   d5c6e:	bd08      	pop	{r3, pc}
   d5c70:	00030268 	.word	0x00030268

000d5c74 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5c74:	b508      	push	{r3, lr}
   d5c76:	4b02      	ldr	r3, [pc, #8]	; (d5c80 <netdb_getaddrinfo+0xc>)
   d5c78:	681b      	ldr	r3, [r3, #0]
   d5c7a:	68db      	ldr	r3, [r3, #12]
   d5c7c:	9301      	str	r3, [sp, #4]
   d5c7e:	bd08      	pop	{r3, pc}
   d5c80:	00030268 	.word	0x00030268

000d5c84 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5c84:	b508      	push	{r3, lr}
   d5c86:	4b02      	ldr	r3, [pc, #8]	; (d5c90 <HAL_SPI_Begin+0xc>)
   d5c88:	681b      	ldr	r3, [r3, #0]
   d5c8a:	681b      	ldr	r3, [r3, #0]
   d5c8c:	9301      	str	r3, [sp, #4]
   d5c8e:	bd08      	pop	{r3, pc}
   d5c90:	00030230 	.word	0x00030230

000d5c94 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5c94:	b508      	push	{r3, lr}
   d5c96:	4b02      	ldr	r3, [pc, #8]	; (d5ca0 <HAL_SPI_Send_Receive_Data+0xc>)
   d5c98:	681b      	ldr	r3, [r3, #0]
   d5c9a:	695b      	ldr	r3, [r3, #20]
   d5c9c:	9301      	str	r3, [sp, #4]
   d5c9e:	bd08      	pop	{r3, pc}
   d5ca0:	00030230 	.word	0x00030230

000d5ca4 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5ca4:	b508      	push	{r3, lr}
   d5ca6:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <HAL_SPI_Init+0xc>)
   d5ca8:	681b      	ldr	r3, [r3, #0]
   d5caa:	69db      	ldr	r3, [r3, #28]
   d5cac:	9301      	str	r3, [sp, #4]
   d5cae:	bd08      	pop	{r3, pc}
   d5cb0:	00030230 	.word	0x00030230

000d5cb4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b02      	ldr	r3, [pc, #8]	; (d5cc0 <HAL_SPI_Is_Enabled+0xc>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	6a1b      	ldr	r3, [r3, #32]
   d5cbc:	9301      	str	r3, [sp, #4]
   d5cbe:	bd08      	pop	{r3, pc}
   d5cc0:	00030230 	.word	0x00030230

000d5cc4 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b02      	ldr	r3, [pc, #8]	; (d5cd0 <HAL_SPI_Info+0xc>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ccc:	9301      	str	r3, [sp, #4]
   d5cce:	bd08      	pop	{r3, pc}
   d5cd0:	00030230 	.word	0x00030230

000d5cd4 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <HAL_SPI_DMA_Transfer+0xc>)
   d5cd8:	681b      	ldr	r3, [r3, #0]
   d5cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5cdc:	9301      	str	r3, [sp, #4]
   d5cde:	bd08      	pop	{r3, pc}
   d5ce0:	00030230 	.word	0x00030230

000d5ce4 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d5ce4:	b508      	push	{r3, lr}
   d5ce6:	4b02      	ldr	r3, [pc, #8]	; (d5cf0 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5cec:	9301      	str	r3, [sp, #4]
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	00030230 	.word	0x00030230

000d5cf4 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <HAL_SPI_Set_Settings+0xc>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5cfc:	9301      	str	r3, [sp, #4]
   d5cfe:	bd08      	pop	{r3, pc}
   d5d00:	00030230 	.word	0x00030230

000d5d04 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b02      	ldr	r3, [pc, #8]	; (d5d10 <HAL_USART_Init+0xc>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	681b      	ldr	r3, [r3, #0]
   d5d0c:	9301      	str	r3, [sp, #4]
   d5d0e:	bd08      	pop	{r3, pc}
   d5d10:	0003023c 	.word	0x0003023c

000d5d14 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <HAL_USART_Write_Data+0xc>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	68db      	ldr	r3, [r3, #12]
   d5d1c:	9301      	str	r3, [sp, #4]
   d5d1e:	bd08      	pop	{r3, pc}
   d5d20:	0003023c 	.word	0x0003023c

000d5d24 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5d24:	b508      	push	{r3, lr}
   d5d26:	4b02      	ldr	r3, [pc, #8]	; (d5d30 <HAL_USART_Available_Data+0xc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	691b      	ldr	r3, [r3, #16]
   d5d2c:	9301      	str	r3, [sp, #4]
   d5d2e:	bd08      	pop	{r3, pc}
   d5d30:	0003023c 	.word	0x0003023c

000d5d34 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5d34:	b508      	push	{r3, lr}
   d5d36:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <HAL_USART_Read_Data+0xc>)
   d5d38:	681b      	ldr	r3, [r3, #0]
   d5d3a:	695b      	ldr	r3, [r3, #20]
   d5d3c:	9301      	str	r3, [sp, #4]
   d5d3e:	bd08      	pop	{r3, pc}
   d5d40:	0003023c 	.word	0x0003023c

000d5d44 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <HAL_USART_Peek_Data+0xc>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	699b      	ldr	r3, [r3, #24]
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	bd08      	pop	{r3, pc}
   d5d50:	0003023c 	.word	0x0003023c

000d5d54 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5d54:	b508      	push	{r3, lr}
   d5d56:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <HAL_USART_Flush_Data+0xc>)
   d5d58:	681b      	ldr	r3, [r3, #0]
   d5d5a:	69db      	ldr	r3, [r3, #28]
   d5d5c:	9301      	str	r3, [sp, #4]
   d5d5e:	bd08      	pop	{r3, pc}
   d5d60:	0003023c 	.word	0x0003023c

000d5d64 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5d64:	b508      	push	{r3, lr}
   d5d66:	4b02      	ldr	r3, [pc, #8]	; (d5d70 <HAL_USART_Is_Enabled+0xc>)
   d5d68:	681b      	ldr	r3, [r3, #0]
   d5d6a:	6a1b      	ldr	r3, [r3, #32]
   d5d6c:	9301      	str	r3, [sp, #4]
   d5d6e:	bd08      	pop	{r3, pc}
   d5d70:	0003023c 	.word	0x0003023c

000d5d74 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5d74:	b508      	push	{r3, lr}
   d5d76:	4b02      	ldr	r3, [pc, #8]	; (d5d80 <HAL_USART_Available_Data_For_Write+0xc>)
   d5d78:	681b      	ldr	r3, [r3, #0]
   d5d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d7c:	9301      	str	r3, [sp, #4]
   d5d7e:	bd08      	pop	{r3, pc}
   d5d80:	0003023c 	.word	0x0003023c

000d5d84 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5d84:	b508      	push	{r3, lr}
   d5d86:	4b02      	ldr	r3, [pc, #8]	; (d5d90 <HAL_USB_USART_Init+0xc>)
   d5d88:	681b      	ldr	r3, [r3, #0]
   d5d8a:	681b      	ldr	r3, [r3, #0]
   d5d8c:	9301      	str	r3, [sp, #4]
   d5d8e:	bd08      	pop	{r3, pc}
   d5d90:	0003024c 	.word	0x0003024c

000d5d94 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5d94:	b508      	push	{r3, lr}
   d5d96:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <HAL_USB_USART_Begin+0xc>)
   d5d98:	681b      	ldr	r3, [r3, #0]
   d5d9a:	685b      	ldr	r3, [r3, #4]
   d5d9c:	9301      	str	r3, [sp, #4]
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	0003024c 	.word	0x0003024c

000d5da4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <HAL_USB_USART_Available_Data+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	691b      	ldr	r3, [r3, #16]
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	0003024c 	.word	0x0003024c

000d5db4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	695b      	ldr	r3, [r3, #20]
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	0003024c 	.word	0x0003024c

000d5dc4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <HAL_USB_USART_Receive_Data+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	699b      	ldr	r3, [r3, #24]
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	0003024c 	.word	0x0003024c

000d5dd4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <HAL_USB_USART_Send_Data+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	69db      	ldr	r3, [r3, #28]
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	0003024c 	.word	0x0003024c

000d5de4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <HAL_USB_USART_Flush_Data+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	6a1b      	ldr	r3, [r3, #32]
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	0003024c 	.word	0x0003024c

000d5df4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <system_mode+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	681b      	ldr	r3, [r3, #0]
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	00030220 	.word	0x00030220

000d5e04 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <set_system_mode+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	685b      	ldr	r3, [r3, #4]
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	00030220 	.word	0x00030220

000d5e14 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <system_delay_ms+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	695b      	ldr	r3, [r3, #20]
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	00030220 	.word	0x00030220

000d5e24 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <system_thread_get_state+0xc>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5e2c:	9301      	str	r3, [sp, #4]
   d5e2e:	bd08      	pop	{r3, pc}
   d5e30:	00030220 	.word	0x00030220

000d5e34 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5e34:	b508      	push	{r3, lr}
   d5e36:	4b03      	ldr	r3, [pc, #12]	; (d5e44 <system_ctrl_set_app_request_handler+0x10>)
   d5e38:	681b      	ldr	r3, [r3, #0]
   d5e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5e3e:	9301      	str	r3, [sp, #4]
   d5e40:	bd08      	pop	{r3, pc}
   d5e42:	0000      	.short	0x0000
   d5e44:	00030220 	.word	0x00030220

000d5e48 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b03      	ldr	r3, [pc, #12]	; (d5e58 <system_ctrl_set_result+0x10>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5e52:	9301      	str	r3, [sp, #4]
   d5e54:	bd08      	pop	{r3, pc}
   d5e56:	0000      	.short	0x0000
   d5e58:	00030220 	.word	0x00030220

000d5e5c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5e5c:	b508      	push	{r3, lr}
   d5e5e:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <spark_process+0xc>)
   d5e60:	681b      	ldr	r3, [r3, #0]
   d5e62:	689b      	ldr	r3, [r3, #8]
   d5e64:	9301      	str	r3, [sp, #4]
   d5e66:	bd08      	pop	{r3, pc}
   d5e68:	00030244 	.word	0x00030244

000d5e6c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5e6c:	b508      	push	{r3, lr}
   d5e6e:	4b02      	ldr	r3, [pc, #8]	; (d5e78 <spark_cloud_flag_connected+0xc>)
   d5e70:	681b      	ldr	r3, [r3, #0]
   d5e72:	695b      	ldr	r3, [r3, #20]
   d5e74:	9301      	str	r3, [sp, #4]
   d5e76:	bd08      	pop	{r3, pc}
   d5e78:	00030244 	.word	0x00030244

000d5e7c <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5e7c:	b508      	push	{r3, lr}
   d5e7e:	4b02      	ldr	r3, [pc, #8]	; (d5e88 <spark_sync_time_pending+0xc>)
   d5e80:	681b      	ldr	r3, [r3, #0]
   d5e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e84:	9301      	str	r3, [sp, #4]
   d5e86:	bd08      	pop	{r3, pc}
   d5e88:	00030244 	.word	0x00030244

000d5e8c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5e8c:	b508      	push	{r3, lr}
   d5e8e:	4b02      	ldr	r3, [pc, #8]	; (d5e98 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5e90:	681b      	ldr	r3, [r3, #0]
   d5e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e94:	9301      	str	r3, [sp, #4]
   d5e96:	bd08      	pop	{r3, pc}
   d5e98:	00030244 	.word	0x00030244

000d5e9c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e9c:	b508      	push	{r3, lr}
   d5e9e:	4b02      	ldr	r3, [pc, #8]	; (d5ea8 <network_connect+0xc>)
   d5ea0:	681b      	ldr	r3, [r3, #0]
   d5ea2:	685b      	ldr	r3, [r3, #4]
   d5ea4:	9301      	str	r3, [sp, #4]
   d5ea6:	bd08      	pop	{r3, pc}
   d5ea8:	00030240 	.word	0x00030240

000d5eac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5eac:	b508      	push	{r3, lr}
   d5eae:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <network_connecting+0xc>)
   d5eb0:	681b      	ldr	r3, [r3, #0]
   d5eb2:	689b      	ldr	r3, [r3, #8]
   d5eb4:	9301      	str	r3, [sp, #4]
   d5eb6:	bd08      	pop	{r3, pc}
   d5eb8:	00030240 	.word	0x00030240

000d5ebc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5ebc:	b508      	push	{r3, lr}
   d5ebe:	4b02      	ldr	r3, [pc, #8]	; (d5ec8 <network_disconnect+0xc>)
   d5ec0:	681b      	ldr	r3, [r3, #0]
   d5ec2:	68db      	ldr	r3, [r3, #12]
   d5ec4:	9301      	str	r3, [sp, #4]
   d5ec6:	bd08      	pop	{r3, pc}
   d5ec8:	00030240 	.word	0x00030240

000d5ecc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5ecc:	b508      	push	{r3, lr}
   d5ece:	4b02      	ldr	r3, [pc, #8]	; (d5ed8 <network_ready+0xc>)
   d5ed0:	681b      	ldr	r3, [r3, #0]
   d5ed2:	691b      	ldr	r3, [r3, #16]
   d5ed4:	9301      	str	r3, [sp, #4]
   d5ed6:	bd08      	pop	{r3, pc}
   d5ed8:	00030240 	.word	0x00030240

000d5edc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5edc:	b508      	push	{r3, lr}
   d5ede:	4b02      	ldr	r3, [pc, #8]	; (d5ee8 <network_on+0xc>)
   d5ee0:	681b      	ldr	r3, [r3, #0]
   d5ee2:	695b      	ldr	r3, [r3, #20]
   d5ee4:	9301      	str	r3, [sp, #4]
   d5ee6:	bd08      	pop	{r3, pc}
   d5ee8:	00030240 	.word	0x00030240

000d5eec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5eec:	b508      	push	{r3, lr}
   d5eee:	4b02      	ldr	r3, [pc, #8]	; (d5ef8 <network_off+0xc>)
   d5ef0:	681b      	ldr	r3, [r3, #0]
   d5ef2:	699b      	ldr	r3, [r3, #24]
   d5ef4:	9301      	str	r3, [sp, #4]
   d5ef6:	bd08      	pop	{r3, pc}
   d5ef8:	00030240 	.word	0x00030240

000d5efc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5efc:	b508      	push	{r3, lr}
   d5efe:	4b02      	ldr	r3, [pc, #8]	; (d5f08 <network_listen+0xc>)
   d5f00:	681b      	ldr	r3, [r3, #0]
   d5f02:	69db      	ldr	r3, [r3, #28]
   d5f04:	9301      	str	r3, [sp, #4]
   d5f06:	bd08      	pop	{r3, pc}
   d5f08:	00030240 	.word	0x00030240

000d5f0c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5f0c:	b508      	push	{r3, lr}
   d5f0e:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <network_listening+0xc>)
   d5f10:	681b      	ldr	r3, [r3, #0]
   d5f12:	6a1b      	ldr	r3, [r3, #32]
   d5f14:	9301      	str	r3, [sp, #4]
   d5f16:	bd08      	pop	{r3, pc}
   d5f18:	00030240 	.word	0x00030240

000d5f1c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5f1c:	b508      	push	{r3, lr}
   d5f1e:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <network_set_listen_timeout+0xc>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f24:	9301      	str	r3, [sp, #4]
   d5f26:	bd08      	pop	{r3, pc}
   d5f28:	00030240 	.word	0x00030240

000d5f2c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b02      	ldr	r3, [pc, #8]	; (d5f38 <network_get_listen_timeout+0xc>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	bd08      	pop	{r3, pc}
   d5f38:	00030240 	.word	0x00030240

000d5f3c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <malloc+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	681b      	ldr	r3, [r3, #0]
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	0003021c 	.word	0x0003021c

000d5f4c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <free+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	685b      	ldr	r3, [r3, #4]
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	0003021c 	.word	0x0003021c

000d5f5c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <vsnprintf+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	0003021c 	.word	0x0003021c

000d5f6c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5f6c:	2100      	movs	r1, #0
   d5f6e:	f7ff bf51 	b.w	d5e14 <system_delay_ms>
	...

000d5f74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5f74:	4802      	ldr	r0, [pc, #8]	; (d5f80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5f76:	2300      	movs	r3, #0
   d5f78:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5f7a:	f7ff bdd3 	b.w	d5b24 <os_mutex_recursive_create>
   d5f7e:	bf00      	nop
   d5f80:	2003e4a0 	.word	0x2003e4a0

000d5f84 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5f84:	2200      	movs	r2, #0
   d5f86:	4611      	mov	r1, r2
   d5f88:	6840      	ldr	r0, [r0, #4]
   d5f8a:	f7ff bf9f 	b.w	d5ecc <network_ready>

000d5f8e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f8e:	2200      	movs	r2, #0
   d5f90:	4611      	mov	r1, r2
   d5f92:	6840      	ldr	r0, [r0, #4]
   d5f94:	f7ff bfba 	b.w	d5f0c <network_listening>

000d5f98 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5f98:	2200      	movs	r2, #0
   d5f9a:	4611      	mov	r1, r2
   d5f9c:	6840      	ldr	r0, [r0, #4]
   d5f9e:	f7ff bfc5 	b.w	d5f2c <network_get_listen_timeout>

000d5fa2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5fa2:	2200      	movs	r2, #0
   d5fa4:	6840      	ldr	r0, [r0, #4]
   d5fa6:	f7ff bfb9 	b.w	d5f1c <network_set_listen_timeout>

000d5faa <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5faa:	2200      	movs	r2, #0
   d5fac:	f081 0101 	eor.w	r1, r1, #1
   d5fb0:	6840      	ldr	r0, [r0, #4]
   d5fb2:	f7ff bfa3 	b.w	d5efc <network_listen>

000d5fb6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5fb6:	2300      	movs	r3, #0
   d5fb8:	461a      	mov	r2, r3
   d5fba:	4619      	mov	r1, r3
   d5fbc:	6840      	ldr	r0, [r0, #4]
   d5fbe:	f7ff bf95 	b.w	d5eec <network_off>

000d5fc2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5fc2:	2300      	movs	r3, #0
   d5fc4:	461a      	mov	r2, r3
   d5fc6:	4619      	mov	r1, r3
   d5fc8:	6840      	ldr	r0, [r0, #4]
   d5fca:	f7ff bf87 	b.w	d5edc <network_on>

000d5fce <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5fce:	2200      	movs	r2, #0
   d5fd0:	4611      	mov	r1, r2
   d5fd2:	6840      	ldr	r0, [r0, #4]
   d5fd4:	f7ff bf6a 	b.w	d5eac <network_connecting>

000d5fd8 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5fd8:	2200      	movs	r2, #0
   d5fda:	2102      	movs	r1, #2
   d5fdc:	6840      	ldr	r0, [r0, #4]
   d5fde:	f7ff bf6d 	b.w	d5ebc <network_disconnect>

000d5fe2 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5fe2:	2300      	movs	r3, #0
   d5fe4:	461a      	mov	r2, r3
   d5fe6:	6840      	ldr	r0, [r0, #4]
   d5fe8:	f7ff bf58 	b.w	d5e9c <network_connect>

000d5fec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5fec:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5fee:	4c08      	ldr	r4, [pc, #32]	; (d6010 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5ff0:	2528      	movs	r5, #40	; 0x28
   d5ff2:	462a      	mov	r2, r5
   d5ff4:	2100      	movs	r1, #0
   d5ff6:	4620      	mov	r0, r4
   d5ff8:	f001 fdbe 	bl	d7b78 <memset>
        cid = -1;
   d5ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6000:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6002:	4b04      	ldr	r3, [pc, #16]	; (d6014 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d6004:	8025      	strh	r5, [r4, #0]
   d6006:	2204      	movs	r2, #4
   d6008:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d600a:	4a03      	ldr	r2, [pc, #12]	; (d6018 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d600c:	601a      	str	r2, [r3, #0]
   d600e:	bd38      	pop	{r3, r4, r5, pc}
   d6010:	2003e4ac 	.word	0x2003e4ac
   d6014:	2003e4a4 	.word	0x2003e4a4
   d6018:	000d7ce8 	.word	0x000d7ce8

000d601c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d601c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d601e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6020:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6022:	b113      	cbz	r3, d602a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6024:	2203      	movs	r2, #3
   d6026:	4601      	mov	r1, r0
   d6028:	4798      	blx	r3
    }
   d602a:	4620      	mov	r0, r4
   d602c:	bd10      	pop	{r4, pc}

000d602e <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d602e:	2200      	movs	r2, #0
   d6030:	4611      	mov	r1, r2
   d6032:	6840      	ldr	r0, [r0, #4]
   d6034:	f7ff bf6a 	b.w	d5f0c <network_listening>

000d6038 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6038:	2200      	movs	r2, #0
   d603a:	4611      	mov	r1, r2
   d603c:	6840      	ldr	r0, [r0, #4]
   d603e:	f7ff bf75 	b.w	d5f2c <network_get_listen_timeout>

000d6042 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6042:	2200      	movs	r2, #0
   d6044:	6840      	ldr	r0, [r0, #4]
   d6046:	f7ff bf69 	b.w	d5f1c <network_set_listen_timeout>

000d604a <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d604a:	2200      	movs	r2, #0
   d604c:	f081 0101 	eor.w	r1, r1, #1
   d6050:	6840      	ldr	r0, [r0, #4]
   d6052:	f7ff bf53 	b.w	d5efc <network_listen>

000d6056 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6056:	2300      	movs	r3, #0
   d6058:	461a      	mov	r2, r3
   d605a:	4619      	mov	r1, r3
   d605c:	6840      	ldr	r0, [r0, #4]
   d605e:	f7ff bf45 	b.w	d5eec <network_off>

000d6062 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6062:	2300      	movs	r3, #0
   d6064:	461a      	mov	r2, r3
   d6066:	4619      	mov	r1, r3
   d6068:	6840      	ldr	r0, [r0, #4]
   d606a:	f7ff bf37 	b.w	d5edc <network_on>

000d606e <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d606e:	2200      	movs	r2, #0
   d6070:	4611      	mov	r1, r2
   d6072:	6840      	ldr	r0, [r0, #4]
   d6074:	f7ff bf2a 	b.w	d5ecc <network_ready>

000d6078 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6078:	2200      	movs	r2, #0
   d607a:	4611      	mov	r1, r2
   d607c:	6840      	ldr	r0, [r0, #4]
   d607e:	f7ff bf15 	b.w	d5eac <network_connecting>

000d6082 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6082:	2200      	movs	r2, #0
   d6084:	2102      	movs	r1, #2
   d6086:	6840      	ldr	r0, [r0, #4]
   d6088:	f7ff bf18 	b.w	d5ebc <network_disconnect>

000d608c <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d608c:	2300      	movs	r3, #0
   d608e:	461a      	mov	r2, r3
   d6090:	6840      	ldr	r0, [r0, #4]
   d6092:	f7ff bf03 	b.w	d5e9c <network_connect>
	...

000d6098 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6098:	4b02      	ldr	r3, [pc, #8]	; (d60a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d609a:	2203      	movs	r2, #3
   d609c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d609e:	4a02      	ldr	r2, [pc, #8]	; (d60a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d60a0:	601a      	str	r2, [r3, #0]
   d60a2:	4770      	bx	lr
   d60a4:	2003e4d4 	.word	0x2003e4d4
   d60a8:	000d7d1c 	.word	0x000d7d1c

000d60ac <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d60ac:	4770      	bx	lr

000d60ae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d60ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60b0:	4606      	mov	r6, r0
   d60b2:	4615      	mov	r5, r2
   d60b4:	460c      	mov	r4, r1
   d60b6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d60b8:	42bc      	cmp	r4, r7
   d60ba:	d006      	beq.n	d60ca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d60bc:	6833      	ldr	r3, [r6, #0]
   d60be:	f814 1b01 	ldrb.w	r1, [r4], #1
   d60c2:	689b      	ldr	r3, [r3, #8]
   d60c4:	4630      	mov	r0, r6
   d60c6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d60c8:	e7f6      	b.n	d60b8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d60ca:	4628      	mov	r0, r5
   d60cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d60ce <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d60ce:	2200      	movs	r2, #0
   d60d0:	7c00      	ldrb	r0, [r0, #16]
   d60d2:	f7ff bd87 	b.w	d5be4 <HAL_I2C_Write_Data>

000d60d6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d60d6:	2100      	movs	r1, #0
   d60d8:	7c00      	ldrb	r0, [r0, #16]
   d60da:	f7ff bd8b 	b.w	d5bf4 <HAL_I2C_Available_Data>

000d60de <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d60de:	2100      	movs	r1, #0
   d60e0:	7c00      	ldrb	r0, [r0, #16]
   d60e2:	f7ff bd8f 	b.w	d5c04 <HAL_I2C_Read_Data>

000d60e6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d60e6:	2100      	movs	r1, #0
   d60e8:	7c00      	ldrb	r0, [r0, #16]
   d60ea:	f7ff bd93 	b.w	d5c14 <HAL_I2C_Peek_Data>

000d60ee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d60ee:	2100      	movs	r1, #0
   d60f0:	7c00      	ldrb	r0, [r0, #16]
   d60f2:	f7ff bd97 	b.w	d5c24 <HAL_I2C_Flush_Data>

000d60f6 <_ZN7TwoWireD0Ev>:
   d60f6:	b510      	push	{r4, lr}
   d60f8:	2114      	movs	r1, #20
   d60fa:	4604      	mov	r4, r0
   d60fc:	f000 fec9 	bl	d6e92 <_ZdlPvj>
   d6100:	4620      	mov	r0, r4
   d6102:	bd10      	pop	{r4, pc}

000d6104 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6104:	b510      	push	{r4, lr}
   d6106:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d610c:	4608      	mov	r0, r1
   d610e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6110:	2100      	movs	r1, #0
   d6112:	4b04      	ldr	r3, [pc, #16]	; (d6124 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6114:	7420      	strb	r0, [r4, #16]
   d6116:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6118:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d611a:	f7ff fd93 	bl	d5c44 <HAL_I2C_Init>

}
   d611e:	4620      	mov	r0, r4
   d6120:	bd10      	pop	{r4, pc}
   d6122:	bf00      	nop
   d6124:	000d7d50 	.word	0x000d7d50

000d6128 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6128:	2100      	movs	r1, #0
   d612a:	7c00      	ldrb	r0, [r0, #16]
   d612c:	f7ff bd82 	b.w	d5c34 <HAL_I2C_Is_Enabled>

000d6130 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6130:	4770      	bx	lr

000d6132 <_ZN9IPAddressD0Ev>:
   d6132:	b510      	push	{r4, lr}
   d6134:	2118      	movs	r1, #24
   d6136:	4604      	mov	r4, r0
   d6138:	f000 feab 	bl	d6e92 <_ZdlPvj>
   d613c:	4620      	mov	r0, r4
   d613e:	bd10      	pop	{r4, pc}

000d6140 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6140:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6142:	7d03      	ldrb	r3, [r0, #20]
   d6144:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6146:	b08d      	sub	sp, #52	; 0x34
   d6148:	460e      	mov	r6, r1
   d614a:	f100 0704 	add.w	r7, r0, #4
   d614e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6152:	d002      	beq.n	d615a <_ZNK9IPAddress7printToER5Print+0x1a>
   d6154:	f100 0508 	add.w	r5, r0, #8
   d6158:	e018      	b.n	d618c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d615a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d615c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d615e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6162:	232f      	movs	r3, #47	; 0x2f
   d6164:	462a      	mov	r2, r5
   d6166:	200a      	movs	r0, #10
   d6168:	f7ff fd74 	bl	d5c54 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d616c:	4628      	mov	r0, r5
   d616e:	f001 fd33 	bl	d7bd8 <strlen>
   d6172:	6833      	ldr	r3, [r6, #0]
   d6174:	4602      	mov	r2, r0
   d6176:	68db      	ldr	r3, [r3, #12]
   d6178:	4629      	mov	r1, r5
   d617a:	4630      	mov	r0, r6
   d617c:	4798      	blx	r3
   d617e:	e00f      	b.n	d61a0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6180:	b124      	cbz	r4, d618c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6182:	212e      	movs	r1, #46	; 0x2e
   d6184:	4630      	mov	r0, r6
   d6186:	f000 f9bd 	bl	d6504 <_ZN5Print5printEc>
   d618a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d618c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6190:	220a      	movs	r2, #10
   d6192:	4630      	mov	r0, r6
   d6194:	f000 f9fc 	bl	d6590 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6198:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d619a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d619c:	d1f0      	bne.n	d6180 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d619e:	4620      	mov	r0, r4
    }
    return n;
}
   d61a0:	b00d      	add	sp, #52	; 0x34
   d61a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d61a4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d61a4:	b510      	push	{r4, lr}
   d61a6:	4b05      	ldr	r3, [pc, #20]	; (d61bc <_ZN9IPAddressC1Ev+0x18>)
   d61a8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d61aa:	2211      	movs	r2, #17
   d61ac:	f840 3b04 	str.w	r3, [r0], #4
   d61b0:	2100      	movs	r1, #0
   d61b2:	f001 fce1 	bl	d7b78 <memset>
{
    clear();
}
   d61b6:	4620      	mov	r0, r4
   d61b8:	bd10      	pop	{r4, pc}
   d61ba:	bf00      	nop
   d61bc:	000d7d78 	.word	0x000d7d78

000d61c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d61c0:	4603      	mov	r3, r0
   d61c2:	4a07      	ldr	r2, [pc, #28]	; (d61e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d61c4:	b510      	push	{r4, lr}
   d61c6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d61ca:	f101 0210 	add.w	r2, r1, #16
   d61ce:	f851 4b04 	ldr.w	r4, [r1], #4
   d61d2:	f843 4b04 	str.w	r4, [r3], #4
   d61d6:	4291      	cmp	r1, r2
   d61d8:	d1f9      	bne.n	d61ce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d61da:	780a      	ldrb	r2, [r1, #0]
   d61dc:	701a      	strb	r2, [r3, #0]
}
   d61de:	bd10      	pop	{r4, pc}
   d61e0:	000d7d78 	.word	0x000d7d78

000d61e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d61e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d61e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d61ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d61ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d61f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d61f6:	2304      	movs	r3, #4
   d61f8:	6041      	str	r1, [r0, #4]
   d61fa:	7503      	strb	r3, [r0, #20]
   d61fc:	bd10      	pop	{r4, pc}

000d61fe <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d61fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6200:	780d      	ldrb	r5, [r1, #0]
   d6202:	788b      	ldrb	r3, [r1, #2]
   d6204:	784a      	ldrb	r2, [r1, #1]
   d6206:	78c9      	ldrb	r1, [r1, #3]
   d6208:	9100      	str	r1, [sp, #0]
   d620a:	4629      	mov	r1, r5
   d620c:	f7ff ffea 	bl	d61e4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6210:	b003      	add	sp, #12
   d6212:	bd30      	pop	{r4, r5, pc}

000d6214 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6214:	4b01      	ldr	r3, [pc, #4]	; (d621c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6216:	4a02      	ldr	r2, [pc, #8]	; (d6220 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6218:	601a      	str	r2, [r3, #0]
   d621a:	4770      	bx	lr
   d621c:	2003e4dc 	.word	0x2003e4dc
   d6220:	000d7df7 	.word	0x000d7df7

000d6224 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6224:	2200      	movs	r2, #0
   d6226:	4611      	mov	r1, r2
   d6228:	6840      	ldr	r0, [r0, #4]
   d622a:	f7ff be6f 	b.w	d5f0c <network_listening>

000d622e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d622e:	2200      	movs	r2, #0
   d6230:	4611      	mov	r1, r2
   d6232:	6840      	ldr	r0, [r0, #4]
   d6234:	f7ff be7a 	b.w	d5f2c <network_get_listen_timeout>

000d6238 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6238:	2200      	movs	r2, #0
   d623a:	6840      	ldr	r0, [r0, #4]
   d623c:	f7ff be6e 	b.w	d5f1c <network_set_listen_timeout>

000d6240 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6240:	2200      	movs	r2, #0
   d6242:	f081 0101 	eor.w	r1, r1, #1
   d6246:	6840      	ldr	r0, [r0, #4]
   d6248:	f7ff be58 	b.w	d5efc <network_listen>

000d624c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d624c:	2300      	movs	r3, #0
   d624e:	461a      	mov	r2, r3
   d6250:	2101      	movs	r1, #1
   d6252:	6840      	ldr	r0, [r0, #4]
   d6254:	f7ff be4a 	b.w	d5eec <network_off>

000d6258 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6258:	2300      	movs	r3, #0
   d625a:	461a      	mov	r2, r3
   d625c:	4619      	mov	r1, r3
   d625e:	6840      	ldr	r0, [r0, #4]
   d6260:	f7ff be3c 	b.w	d5edc <network_on>

000d6264 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6264:	2200      	movs	r2, #0
   d6266:	4611      	mov	r1, r2
   d6268:	6840      	ldr	r0, [r0, #4]
   d626a:	f7ff be2f 	b.w	d5ecc <network_ready>

000d626e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d626e:	2200      	movs	r2, #0
   d6270:	4611      	mov	r1, r2
   d6272:	6840      	ldr	r0, [r0, #4]
   d6274:	f7ff be1a 	b.w	d5eac <network_connecting>

000d6278 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6278:	2200      	movs	r2, #0
   d627a:	2102      	movs	r1, #2
   d627c:	6840      	ldr	r0, [r0, #4]
   d627e:	f7ff be1d 	b.w	d5ebc <network_disconnect>

000d6282 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6282:	2300      	movs	r3, #0
   d6284:	461a      	mov	r2, r3
   d6286:	6840      	ldr	r0, [r0, #4]
   d6288:	f7ff be08 	b.w	d5e9c <network_connect>

000d628c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d628c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d628e:	4605      	mov	r5, r0
   d6290:	b188      	cbz	r0, d62b6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6292:	6804      	ldr	r4, [r0, #0]
   d6294:	b14c      	cbz	r4, d62aa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6296:	68a3      	ldr	r3, [r4, #8]
   d6298:	b11b      	cbz	r3, d62a2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d629a:	2203      	movs	r2, #3
   d629c:	4621      	mov	r1, r4
   d629e:	4620      	mov	r0, r4
   d62a0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62a2:	2110      	movs	r1, #16
   d62a4:	4620      	mov	r0, r4
   d62a6:	f000 fdf4 	bl	d6e92 <_ZdlPvj>
   d62aa:	4628      	mov	r0, r5
   d62ac:	2114      	movs	r1, #20
      }
   d62ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62b2:	f000 bdee 	b.w	d6e92 <_ZdlPvj>
   d62b6:	bd38      	pop	{r3, r4, r5, pc}

000d62b8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d62b8:	b110      	cbz	r0, d62c0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d62ba:	6803      	ldr	r3, [r0, #0]
   d62bc:	685b      	ldr	r3, [r3, #4]
   d62be:	4718      	bx	r3
   d62c0:	4770      	bx	lr

000d62c2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d62c2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d62c4:	6803      	ldr	r3, [r0, #0]
   d62c6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d62c8:	b1bb      	cbz	r3, d62fa <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d62ca:	6858      	ldr	r0, [r3, #4]
   d62cc:	f7ff fbfa 	bl	d5ac4 <os_thread_is_current>
   d62d0:	b978      	cbnz	r0, d62f2 <_ZN6ThreadD1Ev+0x30>
   d62d2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d62d4:	7c5a      	ldrb	r2, [r3, #17]
   d62d6:	b912      	cbnz	r2, d62de <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d62d8:	6858      	ldr	r0, [r3, #4]
   d62da:	f7ff fbfb 	bl	d5ad4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d62de:	6823      	ldr	r3, [r4, #0]
   d62e0:	6858      	ldr	r0, [r3, #4]
   d62e2:	f7ff fbff 	bl	d5ae4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62e6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d62e8:	2300      	movs	r3, #0
   d62ea:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d62ec:	b128      	cbz	r0, d62fa <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d62ee:	f7ff ffcd 	bl	d628c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62f2:	6820      	ldr	r0, [r4, #0]
   d62f4:	b108      	cbz	r0, d62fa <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d62f6:	f7ff ffc9 	bl	d628c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d62fa:	4620      	mov	r0, r4
   d62fc:	bd10      	pop	{r4, pc}
	...

000d6300 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6300:	b538      	push	{r3, r4, r5, lr}
   d6302:	4b0c      	ldr	r3, [pc, #48]	; (d6334 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6304:	6003      	str	r3, [r0, #0]
   d6306:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6308:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d630c:	b108      	cbz	r0, d6312 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d630e:	f7fd fec8 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6312:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6316:	b135      	cbz	r5, d6326 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6318:	4628      	mov	r0, r5
   d631a:	f7ff ffd2 	bl	d62c2 <_ZN6ThreadD1Ev>
   d631e:	2104      	movs	r1, #4
   d6320:	4628      	mov	r0, r5
   d6322:	f000 fdb6 	bl	d6e92 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6326:	68a0      	ldr	r0, [r4, #8]
   d6328:	b108      	cbz	r0, d632e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d632a:	f7ff ffc5 	bl	d62b8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d632e:	4620      	mov	r0, r4
   d6330:	bd38      	pop	{r3, r4, r5, pc}
   d6332:	bf00      	nop
   d6334:	000d7e6c 	.word	0x000d7e6c

000d6338 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6338:	b538      	push	{r3, r4, r5, lr}
   d633a:	4c0e      	ldr	r4, [pc, #56]	; (d6374 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d633c:	4b0e      	ldr	r3, [pc, #56]	; (d6378 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d633e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6340:	2500      	movs	r5, #0
   d6342:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6344:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6348:	6063      	str	r3, [r4, #4]
   d634a:	60a5      	str	r5, [r4, #8]
   d634c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6350:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6354:	f7ff fbe6 	bl	d5b24 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6358:	4b08      	ldr	r3, [pc, #32]	; (d637c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d635a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d635e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6362:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6364:	4620      	mov	r0, r4
   d6366:	4a06      	ldr	r2, [pc, #24]	; (d6380 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6368:	4906      	ldr	r1, [pc, #24]	; (d6384 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d636a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d636e:	f000 bd8b 	b.w	d6e88 <__aeabi_atexit>
   d6372:	bf00      	nop
   d6374:	2003e4e0 	.word	0x2003e4e0
   d6378:	000d7ea0 	.word	0x000d7ea0
   d637c:	000d7e6c 	.word	0x000d7e6c
   d6380:	2003dff0 	.word	0x2003dff0
   d6384:	000d6301 	.word	0x000d6301

000d6388 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6388:	2300      	movs	r3, #0
   d638a:	461a      	mov	r2, r3
   d638c:	6840      	ldr	r0, [r0, #4]
   d638e:	f7ff bd85 	b.w	d5e9c <network_connect>

000d6392 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6392:	2200      	movs	r2, #0
   d6394:	2102      	movs	r1, #2
   d6396:	6840      	ldr	r0, [r0, #4]
   d6398:	f7ff bd90 	b.w	d5ebc <network_disconnect>

000d639c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d639c:	2200      	movs	r2, #0
   d639e:	4611      	mov	r1, r2
   d63a0:	6840      	ldr	r0, [r0, #4]
   d63a2:	f7ff bd83 	b.w	d5eac <network_connecting>

000d63a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d63a6:	2200      	movs	r2, #0
   d63a8:	4611      	mov	r1, r2
   d63aa:	6840      	ldr	r0, [r0, #4]
   d63ac:	f7ff bd8e 	b.w	d5ecc <network_ready>

000d63b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d63b0:	2300      	movs	r3, #0
   d63b2:	461a      	mov	r2, r3
   d63b4:	4619      	mov	r1, r3
   d63b6:	6840      	ldr	r0, [r0, #4]
   d63b8:	f7ff bd90 	b.w	d5edc <network_on>

000d63bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d63bc:	2300      	movs	r3, #0
   d63be:	461a      	mov	r2, r3
   d63c0:	4619      	mov	r1, r3
   d63c2:	6840      	ldr	r0, [r0, #4]
   d63c4:	f7ff bd92 	b.w	d5eec <network_off>

000d63c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d63c8:	2200      	movs	r2, #0
   d63ca:	f081 0101 	eor.w	r1, r1, #1
   d63ce:	6840      	ldr	r0, [r0, #4]
   d63d0:	f7ff bd94 	b.w	d5efc <network_listen>

000d63d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d63d4:	2200      	movs	r2, #0
   d63d6:	6840      	ldr	r0, [r0, #4]
   d63d8:	f7ff bda0 	b.w	d5f1c <network_set_listen_timeout>

000d63dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d63dc:	2200      	movs	r2, #0
   d63de:	4611      	mov	r1, r2
   d63e0:	6840      	ldr	r0, [r0, #4]
   d63e2:	f7ff bda3 	b.w	d5f2c <network_get_listen_timeout>

000d63e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d63e6:	2200      	movs	r2, #0
   d63e8:	4611      	mov	r1, r2
   d63ea:	6840      	ldr	r0, [r0, #4]
   d63ec:	f7ff bd8e 	b.w	d5f0c <network_listening>

000d63f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d63f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d63f4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d63f6:	b095      	sub	sp, #84	; 0x54
   d63f8:	4616      	mov	r6, r2
   d63fa:	460d      	mov	r5, r1
   d63fc:	4607      	mov	r7, r0
    IPAddress addr;
   d63fe:	f7ff fed1 	bl	d61a4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6402:	4621      	mov	r1, r4
   d6404:	2220      	movs	r2, #32
   d6406:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6408:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d640a:	f001 fbb5 	bl	d7b78 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d640e:	2340      	movs	r3, #64	; 0x40
   d6410:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6412:	4621      	mov	r1, r4
   d6414:	466b      	mov	r3, sp
   d6416:	aa0c      	add	r2, sp, #48	; 0x30
   d6418:	4630      	mov	r0, r6
   d641a:	f7ff fc2b 	bl	d5c74 <netdb_getaddrinfo>
    if (!r) {
   d641e:	4604      	mov	r4, r0
   d6420:	2800      	cmp	r0, #0
   d6422:	d144      	bne.n	d64ae <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6424:	4602      	mov	r2, r0
   d6426:	2101      	movs	r1, #1
   d6428:	6868      	ldr	r0, [r5, #4]
   d642a:	f7ff fd4f 	bl	d5ecc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d642e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6430:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6432:	4622      	mov	r2, r4
   d6434:	6868      	ldr	r0, [r5, #4]
   d6436:	f7ff fd49 	bl	d5ecc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d643a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d643c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d643e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6440:	2e00      	cmp	r6, #0
   d6442:	d034      	beq.n	d64ae <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6444:	2900      	cmp	r1, #0
   d6446:	d132      	bne.n	d64ae <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6448:	6873      	ldr	r3, [r6, #4]
   d644a:	2b02      	cmp	r3, #2
   d644c:	d002      	beq.n	d6454 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d644e:	2b0a      	cmp	r3, #10
   d6450:	d009      	beq.n	d6466 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6452:	e02a      	b.n	d64aa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6454:	f1b8 0f00 	cmp.w	r8, #0
   d6458:	d027      	beq.n	d64aa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d645a:	6971      	ldr	r1, [r6, #20]
   d645c:	4638      	mov	r0, r7
   d645e:	3104      	adds	r1, #4
   d6460:	f7ff fecd 	bl	d61fe <_ZN9IPAddressaSEPKh>
   d6464:	e020      	b.n	d64a8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6466:	f1b9 0f00 	cmp.w	r9, #0
   d646a:	d01e      	beq.n	d64aa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d646c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d646e:	2211      	movs	r2, #17
   d6470:	a801      	add	r0, sp, #4
   d6472:	f001 fb81 	bl	d7b78 <memset>
                    a.v = 6;
   d6476:	2306      	movs	r3, #6
   d6478:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d647c:	ad01      	add	r5, sp, #4
   d647e:	f104 0308 	add.w	r3, r4, #8
   d6482:	3418      	adds	r4, #24
   d6484:	6818      	ldr	r0, [r3, #0]
   d6486:	6859      	ldr	r1, [r3, #4]
   d6488:	462a      	mov	r2, r5
   d648a:	c203      	stmia	r2!, {r0, r1}
   d648c:	3308      	adds	r3, #8
   d648e:	42a3      	cmp	r3, r4
   d6490:	4615      	mov	r5, r2
   d6492:	d1f7      	bne.n	d6484 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6494:	a901      	add	r1, sp, #4
   d6496:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6498:	ad07      	add	r5, sp, #28
   d649a:	f7ff fe91 	bl	d61c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d649e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d64a0:	1d3c      	adds	r4, r7, #4
   d64a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d64a4:	682b      	ldr	r3, [r5, #0]
   d64a6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d64a8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d64aa:	69f6      	ldr	r6, [r6, #28]
   d64ac:	e7c8      	b.n	d6440 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d64ae:	9800      	ldr	r0, [sp, #0]
   d64b0:	f7ff fbd8 	bl	d5c64 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d64b4:	4638      	mov	r0, r7
   d64b6:	b015      	add	sp, #84	; 0x54
   d64b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d64bc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d64bc:	4b02      	ldr	r3, [pc, #8]	; (d64c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d64be:	4a03      	ldr	r2, [pc, #12]	; (d64cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d64c0:	601a      	str	r2, [r3, #0]
   d64c2:	2200      	movs	r2, #0
   d64c4:	605a      	str	r2, [r3, #4]
   d64c6:	4770      	bx	lr
   d64c8:	2003e6b4 	.word	0x2003e6b4
   d64cc:	000d7ea0 	.word	0x000d7ea0

000d64d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d64d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64d2:	4606      	mov	r6, r0
   d64d4:	460d      	mov	r5, r1
   d64d6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d64d8:	2400      	movs	r4, #0
  while (size--) {
   d64da:	42bd      	cmp	r5, r7
   d64dc:	d00c      	beq.n	d64f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d64de:	6833      	ldr	r3, [r6, #0]
   d64e0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d64e4:	689b      	ldr	r3, [r3, #8]
   d64e6:	4630      	mov	r0, r6
   d64e8:	4798      	blx	r3
     if (chunk>=0)
   d64ea:	2800      	cmp	r0, #0
   d64ec:	db01      	blt.n	d64f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d64ee:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d64f0:	e7f3      	b.n	d64da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d64f2:	2c00      	cmp	r4, #0
   d64f4:	bf08      	it	eq
   d64f6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d64f8:	4620      	mov	r0, r4
   d64fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d64fc <_ZN5Print5printEPKc>:
   d64fc:	b508      	push	{r3, lr}
   d64fe:	f7fe fe3b 	bl	d5178 <_ZN5Print5writeEPKc>
   d6502:	bd08      	pop	{r3, pc}

000d6504 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6504:	6803      	ldr	r3, [r0, #0]
   d6506:	689b      	ldr	r3, [r3, #8]
   d6508:	4718      	bx	r3

000d650a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d650a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d650c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d650e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6510:	f7ff fff8 	bl	d6504 <_ZN5Print5printEc>
  n += print('\n');
   d6514:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6516:	4604      	mov	r4, r0
  n += print('\n');
   d6518:	4628      	mov	r0, r5
   d651a:	f7ff fff3 	bl	d6504 <_ZN5Print5printEc>
  return n;
}
   d651e:	4420      	add	r0, r4
   d6520:	bd38      	pop	{r3, r4, r5, pc}

000d6522 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6522:	b538      	push	{r3, r4, r5, lr}
   d6524:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6526:	f7fe fe27 	bl	d5178 <_ZN5Print5writeEPKc>
   d652a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d652c:	4628      	mov	r0, r5
   d652e:	f7ff ffec 	bl	d650a <_ZN5Print7printlnEv>
  return n;
}
   d6532:	4420      	add	r0, r4
   d6534:	bd38      	pop	{r3, r4, r5, pc}

000d6536 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6536:	b530      	push	{r4, r5, lr}
   d6538:	b08b      	sub	sp, #44	; 0x2c
   d653a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d653c:	2100      	movs	r1, #0
   d653e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6542:	2a01      	cmp	r2, #1
   d6544:	bf98      	it	ls
   d6546:	220a      	movls	r2, #10
   d6548:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d654c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6550:	fb05 3312 	mls	r3, r5, r2, r3
   d6554:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6558:	2b09      	cmp	r3, #9
   d655a:	bf94      	ite	ls
   d655c:	3330      	addls	r3, #48	; 0x30
   d655e:	3337      	addhi	r3, #55	; 0x37
   d6560:	b2db      	uxtb	r3, r3
   d6562:	4621      	mov	r1, r4
   d6564:	f804 3901 	strb.w	r3, [r4], #-1
   d6568:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d656a:	2d00      	cmp	r5, #0
   d656c:	d1ee      	bne.n	d654c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d656e:	f7fe fe03 	bl	d5178 <_ZN5Print5writeEPKc>
}
   d6572:	b00b      	add	sp, #44	; 0x2c
   d6574:	bd30      	pop	{r4, r5, pc}

000d6576 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6576:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6578:	b92a      	cbnz	r2, d6586 <_ZN5Print5printEmi+0x10>
   d657a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d657c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6580:	689b      	ldr	r3, [r3, #8]
   d6582:	b2c9      	uxtb	r1, r1
   d6584:	4718      	bx	r3
  else return printNumber(n, base);
   d6586:	b2d2      	uxtb	r2, r2
}
   d6588:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d658c:	f7ff bfd3 	b.w	d6536 <_ZN5Print11printNumberEmh>

000d6590 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6590:	f7ff bff1 	b.w	d6576 <_ZN5Print5printEmi>

000d6594 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6598:	4607      	mov	r7, r0
   d659a:	460e      	mov	r6, r1
  if (base == 0) {
   d659c:	4615      	mov	r5, r2
   d659e:	b92a      	cbnz	r2, d65ac <_ZN5Print5printEli+0x18>
    return write(n);
   d65a0:	6803      	ldr	r3, [r0, #0]
   d65a2:	b2c9      	uxtb	r1, r1
   d65a4:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d65a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d65aa:	4718      	bx	r3
  } else if (base == 10) {
   d65ac:	2a0a      	cmp	r2, #10
   d65ae:	d102      	bne.n	d65b6 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d65b0:	2900      	cmp	r1, #0
   d65b2:	da01      	bge.n	d65b8 <_ZN5Print5printEli+0x24>
   d65b4:	e004      	b.n	d65c0 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d65b6:	b2d2      	uxtb	r2, r2
  }
}
   d65b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d65bc:	f7ff bfbb 	b.w	d6536 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d65c0:	212d      	movs	r1, #45	; 0x2d
   d65c2:	f7ff ff9f 	bl	d6504 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d65c6:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d65c8:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d65ca:	4271      	negs	r1, r6
   d65cc:	4638      	mov	r0, r7
   d65ce:	f7ff ffb2 	bl	d6536 <_ZN5Print11printNumberEmh>
   d65d2:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d65d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d65d8 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d65d8:	f7ff bfdc 	b.w	d6594 <_ZN5Print5printEli>

000d65dc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d65dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d65e0:	ec57 6b10 	vmov	r6, r7, d0
   d65e4:	4682      	mov	sl, r0
   d65e6:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d65e8:	ee10 2a10 	vmov	r2, s0
   d65ec:	463b      	mov	r3, r7
   d65ee:	ee10 0a10 	vmov	r0, s0
   d65f2:	4639      	mov	r1, r7
   d65f4:	f001 f9ea 	bl	d79cc <__aeabi_dcmpun>
   d65f8:	b108      	cbz	r0, d65fe <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d65fa:	4948      	ldr	r1, [pc, #288]	; (d671c <_ZN5Print10printFloatEdh+0x140>)
   d65fc:	e012      	b.n	d6624 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d65fe:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d6602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6606:	4b46      	ldr	r3, [pc, #280]	; (d6720 <_ZN5Print10printFloatEdh+0x144>)
   d6608:	4630      	mov	r0, r6
   d660a:	4649      	mov	r1, r9
   d660c:	f001 f9de 	bl	d79cc <__aeabi_dcmpun>
   d6610:	b968      	cbnz	r0, d662e <_ZN5Print10printFloatEdh+0x52>
   d6612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6616:	4b42      	ldr	r3, [pc, #264]	; (d6720 <_ZN5Print10printFloatEdh+0x144>)
   d6618:	4630      	mov	r0, r6
   d661a:	4649      	mov	r1, r9
   d661c:	f001 f9b8 	bl	d7990 <__aeabi_dcmple>
   d6620:	b928      	cbnz	r0, d662e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6622:	4940      	ldr	r1, [pc, #256]	; (d6724 <_ZN5Print10printFloatEdh+0x148>)
   d6624:	4650      	mov	r0, sl
   d6626:	f7fe fda7 	bl	d5178 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d662a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d662e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6632:	4b3d      	ldr	r3, [pc, #244]	; (d6728 <_ZN5Print10printFloatEdh+0x14c>)
   d6634:	4630      	mov	r0, r6
   d6636:	4639      	mov	r1, r7
   d6638:	f001 f9be 	bl	d79b8 <__aeabi_dcmpgt>
   d663c:	b108      	cbz	r0, d6642 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d663e:	493b      	ldr	r1, [pc, #236]	; (d672c <_ZN5Print10printFloatEdh+0x150>)
   d6640:	e7f0      	b.n	d6624 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d6642:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6646:	4b3a      	ldr	r3, [pc, #232]	; (d6730 <_ZN5Print10printFloatEdh+0x154>)
   d6648:	4630      	mov	r0, r6
   d664a:	4639      	mov	r1, r7
   d664c:	f001 f996 	bl	d797c <__aeabi_dcmplt>
   d6650:	2800      	cmp	r0, #0
   d6652:	d1f4      	bne.n	d663e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d6654:	2200      	movs	r2, #0
   d6656:	2300      	movs	r3, #0
   d6658:	4630      	mov	r0, r6
   d665a:	4639      	mov	r1, r7
   d665c:	f001 f98e 	bl	d797c <__aeabi_dcmplt>
   d6660:	b140      	cbz	r0, d6674 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d6662:	212d      	movs	r1, #45	; 0x2d
   d6664:	4650      	mov	r0, sl
   d6666:	f7ff ff4d 	bl	d6504 <_ZN5Print5printEc>
     number = -number;
   d666a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d666e:	4604      	mov	r4, r0
     number = -number;
   d6670:	461f      	mov	r7, r3
   d6672:	e000      	b.n	d6676 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6674:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6676:	492f      	ldr	r1, [pc, #188]	; (d6734 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6678:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d667c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d667e:	fa5f f388 	uxtb.w	r3, r8
   d6682:	429d      	cmp	r5, r3
   d6684:	d906      	bls.n	d6694 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d6686:	2200      	movs	r2, #0
   d6688:	4b2b      	ldr	r3, [pc, #172]	; (d6738 <_ZN5Print10printFloatEdh+0x15c>)
   d668a:	f001 f82f 	bl	d76ec <__aeabi_ddiv>
   d668e:	f108 0801 	add.w	r8, r8, #1
   d6692:	e7f4      	b.n	d667e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d6694:	4632      	mov	r2, r6
   d6696:	463b      	mov	r3, r7
   d6698:	f000 fd4c 	bl	d7134 <__adddf3>
   d669c:	460f      	mov	r7, r1
   d669e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d66a0:	f001 f9d2 	bl	d7a48 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d66a4:	220a      	movs	r2, #10
   d66a6:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d66a8:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d66aa:	4650      	mov	r0, sl
   d66ac:	f7ff ff43 	bl	d6536 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d66b0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d66b2:	b37d      	cbz	r5, d6714 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d66b4:	4640      	mov	r0, r8
   d66b6:	f000 fe79 	bl	d73ac <__aeabi_ui2d>
   d66ba:	4602      	mov	r2, r0
   d66bc:	460b      	mov	r3, r1
   d66be:	4630      	mov	r0, r6
   d66c0:	4639      	mov	r1, r7
   d66c2:	f000 fd35 	bl	d7130 <__aeabi_dsub>
   d66c6:	4606      	mov	r6, r0
   d66c8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d66ca:	4650      	mov	r0, sl
   d66cc:	491b      	ldr	r1, [pc, #108]	; (d673c <_ZN5Print10printFloatEdh+0x160>)
   d66ce:	f7fe fd53 	bl	d5178 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d66d2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d66d4:	4b18      	ldr	r3, [pc, #96]	; (d6738 <_ZN5Print10printFloatEdh+0x15c>)
   d66d6:	2200      	movs	r2, #0
   d66d8:	4630      	mov	r0, r6
   d66da:	4639      	mov	r1, r7
   d66dc:	f000 fedc 	bl	d7498 <__aeabi_dmul>
   d66e0:	460f      	mov	r7, r1
   d66e2:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d66e4:	f001 f988 	bl	d79f8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d66e8:	220a      	movs	r2, #10
   d66ea:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d66ec:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d66ee:	4650      	mov	r0, sl
   d66f0:	f7ff ff50 	bl	d6594 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d66f4:	4404      	add	r4, r0
    remainder -= toPrint;
   d66f6:	4640      	mov	r0, r8
   d66f8:	f000 fe68 	bl	d73cc <__aeabi_i2d>
   d66fc:	4602      	mov	r2, r0
   d66fe:	460b      	mov	r3, r1
   d6700:	4630      	mov	r0, r6
   d6702:	4639      	mov	r1, r7
   d6704:	f000 fd14 	bl	d7130 <__aeabi_dsub>
   d6708:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d670a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d670e:	4606      	mov	r6, r0
   d6710:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6712:	d1df      	bne.n	d66d4 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6714:	4620      	mov	r0, r4
   d6716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d671a:	bf00      	nop
   d671c:	000d7ecc 	.word	0x000d7ecc
   d6720:	7fefffff 	.word	0x7fefffff
   d6724:	000d7ed6 	.word	0x000d7ed6
   d6728:	41efffff 	.word	0x41efffff
   d672c:	000d7ed0 	.word	0x000d7ed0
   d6730:	c1efffff 	.word	0xc1efffff
   d6734:	3fe00000 	.word	0x3fe00000
   d6738:	40240000 	.word	0x40240000
   d673c:	000d7ed4 	.word	0x000d7ed4

000d6740 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6740:	b2c9      	uxtb	r1, r1
   d6742:	f7ff bf4b 	b.w	d65dc <_ZN5Print10printFloatEdh>

000d6746 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d6746:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6748:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d674a:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d674c:	f7ff ff46 	bl	d65dc <_ZN5Print10printFloatEdh>
   d6750:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d6752:	4628      	mov	r0, r5
   d6754:	f7ff fed9 	bl	d650a <_ZN5Print7printlnEv>
  return n;
}
   d6758:	4420      	add	r0, r4
   d675a:	bd38      	pop	{r3, r4, r5, pc}

000d675c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d675c:	b40c      	push	{r2, r3}
   d675e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6762:	b087      	sub	sp, #28
   d6764:	af00      	add	r7, sp, #0
   d6766:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d676a:	4605      	mov	r5, r0
   d676c:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6770:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6772:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6774:	4623      	mov	r3, r4
   d6776:	464a      	mov	r2, r9
   d6778:	2114      	movs	r1, #20
   d677a:	1d38      	adds	r0, r7, #4
   d677c:	f7ff fbee 	bl	d5f5c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6780:	2813      	cmp	r0, #19
   d6782:	d805      	bhi.n	d6790 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6784:	1d39      	adds	r1, r7, #4
   d6786:	4628      	mov	r0, r5
   d6788:	f7fe fcf6 	bl	d5178 <_ZN5Print5writeEPKc>
   d678c:	4604      	mov	r4, r0
   d678e:	e013      	b.n	d67b8 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6790:	f100 0308 	add.w	r3, r0, #8
   d6794:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6798:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d679a:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d679e:	1c41      	adds	r1, r0, #1
   d67a0:	4623      	mov	r3, r4
   d67a2:	464a      	mov	r2, r9
   d67a4:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d67a6:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d67a8:	f7ff fbd8 	bl	d5f5c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d67ac:	4669      	mov	r1, sp
   d67ae:	4628      	mov	r0, r5
   d67b0:	f7fe fce2 	bl	d5178 <_ZN5Print5writeEPKc>
   d67b4:	4604      	mov	r4, r0
   d67b6:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d67b8:	b11e      	cbz	r6, d67c2 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d67ba:	4628      	mov	r0, r5
   d67bc:	f7ff fea5 	bl	d650a <_ZN5Print7printlnEv>
   d67c0:	4404      	add	r4, r0
    return n;
}
   d67c2:	4620      	mov	r0, r4
   d67c4:	371c      	adds	r7, #28
   d67c6:	46bd      	mov	sp, r7
   d67c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d67cc:	b002      	add	sp, #8
   d67ce:	4770      	bx	lr

000d67d0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d67d0:	b510      	push	{r4, lr}
   d67d2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d67d4:	f7ff fc22 	bl	d601c <_ZNSt14_Function_baseD1Ev>
   d67d8:	4620      	mov	r0, r4
   d67da:	bd10      	pop	{r4, pc}

000d67dc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d67dc:	4803      	ldr	r0, [pc, #12]	; (d67ec <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d67de:	4a04      	ldr	r2, [pc, #16]	; (d67f0 <_GLOBAL__sub_I_RGB+0x14>)
   d67e0:	4904      	ldr	r1, [pc, #16]	; (d67f4 <_GLOBAL__sub_I_RGB+0x18>)
   d67e2:	2300      	movs	r3, #0
   d67e4:	6083      	str	r3, [r0, #8]
   d67e6:	f000 bb4f 	b.w	d6e88 <__aeabi_atexit>
   d67ea:	bf00      	nop
   d67ec:	2003e6bc 	.word	0x2003e6bc
   d67f0:	2003dff0 	.word	0x2003dff0
   d67f4:	000d67d1 	.word	0x000d67d1

000d67f8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d67f8:	4770      	bx	lr

000d67fa <_ZN8SPIClassD0Ev>:
   d67fa:	b510      	push	{r4, lr}
   d67fc:	2110      	movs	r1, #16
   d67fe:	4604      	mov	r4, r0
   d6800:	f000 fb47 	bl	d6e92 <_ZdlPvj>
   d6804:	4620      	mov	r0, r4
   d6806:	bd10      	pop	{r4, pc}

000d6808 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6808:	b570      	push	{r4, r5, r6, lr}
   d680a:	4b08      	ldr	r3, [pc, #32]	; (d682c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d680c:	6003      	str	r3, [r0, #0]
   d680e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6810:	2500      	movs	r5, #0
   d6812:	460e      	mov	r6, r1
   d6814:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6818:	f7ff f96c 	bl	d5af4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d681c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d681e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6820:	f7ff fa40 	bl	d5ca4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6824:	60a5      	str	r5, [r4, #8]
}
   d6826:	4620      	mov	r0, r4
   d6828:	bd70      	pop	{r4, r5, r6, pc}
   d682a:	bf00      	nop
   d682c:	000d7ee4 	.word	0x000d7ee4

000d6830 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6830:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6834:	7900      	ldrb	r0, [r0, #4]
   d6836:	f7ff ba25 	b.w	d5c84 <HAL_SPI_Begin>

000d683a <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
   d683a:	68c0      	ldr	r0, [r0, #12]
   d683c:	f7ff b96a 	b.w	d5b14 <os_mutex_unlock>

000d6840 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d6840:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d6842:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d6844:	6018      	str	r0, [r3, #0]
   d6846:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d6848:	6818      	ldr	r0, [r3, #0]
   d684a:	4288      	cmp	r0, r1
   d684c:	b2e5      	uxtb	r5, r4
   d684e:	d906      	bls.n	d685e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6850:	3401      	adds	r4, #1
   d6852:	2c08      	cmp	r4, #8
   d6854:	d002      	beq.n	d685c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d6856:	0840      	lsrs	r0, r0, #1
   d6858:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d685a:	e7f5      	b.n	d6848 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d685c:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d685e:	4b02      	ldr	r3, [pc, #8]	; (d6868 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6860:	5d5b      	ldrb	r3, [r3, r5]
   d6862:	7013      	strb	r3, [r2, #0]
   d6864:	bd30      	pop	{r4, r5, pc}
   d6866:	bf00      	nop
   d6868:	000d7eec 	.word	0x000d7eec

000d686c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d686c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6870:	4680      	mov	r8, r0
   d6872:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
   d6874:	68c0      	ldr	r0, [r0, #12]
   d6876:	460f      	mov	r7, r1
   d6878:	f7ff f944 	bl	d5b04 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
   d687c:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d6880:	2214      	movs	r2, #20
   d6882:	2100      	movs	r1, #0
   d6884:	a809      	add	r0, sp, #36	; 0x24
   d6886:	f001 f977 	bl	d7b78 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d688a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d688c:	4620      	mov	r0, r4
   d688e:	2200      	movs	r2, #0
   d6890:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d6892:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
   d6896:	f7ff fa15 	bl	d5cc4 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
   d689a:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d689e:	b14c      	cbz	r4, d68b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
   d68a0:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d68a4:	b92d      	cbnz	r5, d68b2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d68a6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d68a8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d68ac:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d68b0:	e003      	b.n	d68ba <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d68b2:	2400      	movs	r4, #0
   d68b4:	46a1      	mov	r9, r4
   d68b6:	4626      	mov	r6, r4
   d68b8:	2501      	movs	r5, #1
   d68ba:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d68bc:	b10d      	cbz	r5, d68c2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
   d68be:	2b00      	cmp	r3, #0
   d68c0:	d140      	bne.n	d6944 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
   d68c2:	429d      	cmp	r5, r3
   d68c4:	d10b      	bne.n	d68de <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
   d68c6:	68ba      	ldr	r2, [r7, #8]
   d68c8:	42b2      	cmp	r2, r6
   d68ca:	d108      	bne.n	d68de <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d68cc:	f88d 9020 	strb.w	r9, [sp, #32]
   d68d0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d68d4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d68d8:	89ba      	ldrh	r2, [r7, #12]
   d68da:	4291      	cmp	r1, r2
   d68dc:	d032      	beq.n	d6944 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
   d68de:	bb23      	cbnz	r3, d692a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
   d68e0:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
   d68e4:	f10d 020f 	add.w	r2, sp, #15
   d68e8:	ab04      	add	r3, sp, #16
   d68ea:	68b9      	ldr	r1, [r7, #8]
   d68ec:	980a      	ldr	r0, [sp, #40]	; 0x28
   d68ee:	f7ff ffa7 	bl	d6840 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d68f2:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d68f4:	b105      	cbz	r5, d68f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
   d68f6:	bb13      	cbnz	r3, d693e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d68f8:	42ab      	cmp	r3, r5
   d68fa:	d009      	beq.n	d6910 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
   d68fc:	2100      	movs	r1, #0
   d68fe:	7b3b      	ldrb	r3, [r7, #12]
   d6900:	9101      	str	r1, [sp, #4]
   d6902:	7b7c      	ldrb	r4, [r7, #13]
   d6904:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6908:	f898 0004 	ldrb.w	r0, [r8, #4]
   d690c:	9400      	str	r4, [sp, #0]
   d690e:	e013      	b.n	d6938 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
   d6910:	68bb      	ldr	r3, [r7, #8]
   d6912:	42b3      	cmp	r3, r6
   d6914:	d3f2      	bcc.n	d68fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6916:	f88d 9020 	strb.w	r9, [sp, #32]
   d691a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d691e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6922:	89bb      	ldrh	r3, [r7, #12]
   d6924:	429a      	cmp	r2, r3
   d6926:	d1e9      	bne.n	d68fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
   d6928:	e009      	b.n	d693e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
   d692a:	2300      	movs	r3, #0
   d692c:	f898 0004 	ldrb.w	r0, [r8, #4]
   d6930:	9301      	str	r3, [sp, #4]
   d6932:	9300      	str	r3, [sp, #0]
   d6934:	461a      	mov	r2, r3
   d6936:	2101      	movs	r1, #1
   d6938:	f7ff f9dc 	bl	d5cf4 <HAL_SPI_Set_Settings>
   d693c:	e002      	b.n	d6944 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
   d693e:	9b04      	ldr	r3, [sp, #16]
   d6940:	42b3      	cmp	r3, r6
   d6942:	d1db      	bne.n	d68fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
   d6944:	2000      	movs	r0, #0
   d6946:	b00f      	add	sp, #60	; 0x3c
   d6948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d694c <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d694c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d694e:	7900      	ldrb	r0, [r0, #4]
   d6950:	f7ff f9a0 	bl	d5c94 <HAL_SPI_Send_Receive_Data>
}
   d6954:	b2c0      	uxtb	r0, r0
   d6956:	bd08      	pop	{r3, pc}

000d6958 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d6958:	b530      	push	{r4, r5, lr}
   d695a:	b087      	sub	sp, #28
   d695c:	4604      	mov	r4, r0
   d695e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d6960:	7900      	ldrb	r0, [r0, #4]
   d6962:	9500      	str	r5, [sp, #0]
   d6964:	f7ff f9b6 	bl	d5cd4 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
   d6968:	b93d      	cbnz	r5, d697a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d696a:	a902      	add	r1, sp, #8
   d696c:	7920      	ldrb	r0, [r4, #4]
   d696e:	f7ff f9b9 	bl	d5ce4 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
   d6972:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6976:	07db      	lsls	r3, r3, #31
   d6978:	d4f7      	bmi.n	d696a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
   d697a:	b007      	add	sp, #28
   d697c:	bd30      	pop	{r4, r5, pc}

000d697e <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d697e:	7900      	ldrb	r0, [r0, #4]
   d6980:	f7ff b998 	b.w	d5cb4 <HAL_SPI_Is_Enabled>

000d6984 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6984:	4b04      	ldr	r3, [pc, #16]	; (d6998 <_GLOBAL__sub_I_System+0x14>)
   d6986:	2000      	movs	r0, #0
   d6988:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d698c:	7018      	strb	r0, [r3, #0]
   d698e:	8058      	strh	r0, [r3, #2]
   d6990:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6992:	f7ff ba37 	b.w	d5e04 <set_system_mode>
   d6996:	bf00      	nop
   d6998:	2003e6cc 	.word	0x2003e6cc

000d699c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d699c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d699e:	2000      	movs	r0, #0
   d69a0:	f7ff fa6c 	bl	d5e7c <spark_sync_time_pending>
   d69a4:	b128      	cbz	r0, d69b2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d69a6:	f7ff fa61 	bl	d5e6c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d69aa:	f080 0001 	eor.w	r0, r0, #1
   d69ae:	b2c0      	uxtb	r0, r0
   d69b0:	bd08      	pop	{r3, pc}
   d69b2:	2001      	movs	r0, #1
    }
   d69b4:	bd08      	pop	{r3, pc}

000d69b6 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d69b6:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d69b8:	2000      	movs	r0, #0
   d69ba:	f7ff f8db 	bl	d5b74 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d69be:	4604      	mov	r4, r0
   d69c0:	b968      	cbnz	r0, d69de <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d69c2:	f7ff fa17 	bl	d5df4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d69c6:	2801      	cmp	r0, #1
   d69c8:	d10b      	bne.n	d69e2 <_ZN9TimeClass7isValidEv+0x2c>
   d69ca:	4620      	mov	r0, r4
   d69cc:	f7ff fa2a 	bl	d5e24 <system_thread_get_state>
   d69d0:	b938      	cbnz	r0, d69e2 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d69d2:	f7ff ffe3 	bl	d699c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d69d6:	b930      	cbnz	r0, d69e6 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d69d8:	f7ff fa40 	bl	d5e5c <spark_process>
   d69dc:	e7f9      	b.n	d69d2 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d69de:	2001      	movs	r0, #1
   d69e0:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d69e2:	2000      	movs	r0, #0
   d69e4:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d69e6:	f7ff ffd9 	bl	d699c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d69ea:	2000      	movs	r0, #0
   d69ec:	f7ff f8c2 	bl	d5b74 <HAL_RTC_Time_Is_Valid>
   d69f0:	3000      	adds	r0, #0
   d69f2:	bf18      	it	ne
   d69f4:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d69f6:	bd10      	pop	{r4, pc}

000d69f8 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d69f8:	b508      	push	{r3, lr}
    (void)isValid();
   d69fa:	f7ff ffdc 	bl	d69b6 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d69fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d6a02:	f7ff b8af 	b.w	d5b64 <HAL_RTC_Get_UnixTime>
	...

000d6a08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6a08:	4b02      	ldr	r3, [pc, #8]	; (d6a14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6a0a:	681a      	ldr	r2, [r3, #0]
   d6a0c:	4b02      	ldr	r3, [pc, #8]	; (d6a18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6a0e:	601a      	str	r2, [r3, #0]
   d6a10:	4770      	bx	lr
   d6a12:	bf00      	nop
   d6a14:	2003df88 	.word	0x2003df88
   d6a18:	2003e6d4 	.word	0x2003e6d4

000d6a1c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6a1c:	4770      	bx	lr

000d6a1e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6a1e:	7441      	strb	r1, [r0, #17]
   d6a20:	4770      	bx	lr

000d6a22 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6a22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6a24:	7c00      	ldrb	r0, [r0, #16]
   d6a26:	f7ff f9a5 	bl	d5d74 <HAL_USART_Available_Data_For_Write>
}
   d6a2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a2e:	bd08      	pop	{r3, pc}

000d6a30 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6a30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6a32:	7c00      	ldrb	r0, [r0, #16]
   d6a34:	f7ff f976 	bl	d5d24 <HAL_USART_Available_Data>
}
   d6a38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a3c:	bd08      	pop	{r3, pc}

000d6a3e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6a3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6a40:	7c00      	ldrb	r0, [r0, #16]
   d6a42:	f7ff f97f 	bl	d5d44 <HAL_USART_Peek_Data>
}
   d6a46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6a4a:	bf28      	it	cs
   d6a4c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6a50:	bd08      	pop	{r3, pc}

000d6a52 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6a52:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6a54:	7c00      	ldrb	r0, [r0, #16]
   d6a56:	f7ff f96d 	bl	d5d34 <HAL_USART_Read_Data>
}
   d6a5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6a5e:	bf28      	it	cs
   d6a60:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6a64:	bd08      	pop	{r3, pc}

000d6a66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6a66:	7c00      	ldrb	r0, [r0, #16]
   d6a68:	f7ff b974 	b.w	d5d54 <HAL_USART_Flush_Data>

000d6a6c <_ZN11USARTSerialD0Ev>:
   d6a6c:	b510      	push	{r4, lr}
   d6a6e:	2114      	movs	r1, #20
   d6a70:	4604      	mov	r4, r0
   d6a72:	f000 fa0e 	bl	d6e92 <_ZdlPvj>
   d6a76:	4620      	mov	r0, r4
   d6a78:	bd10      	pop	{r4, pc}

000d6a7a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6a7a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6a7c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6a7e:	4604      	mov	r4, r0
   d6a80:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6a82:	b925      	cbnz	r5, d6a8e <_ZN11USARTSerial5writeEh+0x14>
   d6a84:	7c00      	ldrb	r0, [r0, #16]
   d6a86:	f7ff f975 	bl	d5d74 <HAL_USART_Available_Data_For_Write>
   d6a8a:	2800      	cmp	r0, #0
   d6a8c:	dd05      	ble.n	d6a9a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6a8e:	4631      	mov	r1, r6
   d6a90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6a96:	f7ff b93d 	b.w	d5d14 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6a9a:	4628      	mov	r0, r5
   d6a9c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6aa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6aa0:	b510      	push	{r4, lr}
   d6aa2:	4604      	mov	r4, r0
   d6aa4:	4608      	mov	r0, r1
   d6aa6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6aa8:	2200      	movs	r2, #0
   d6aaa:	6062      	str	r2, [r4, #4]
   d6aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6ab0:	60a2      	str	r2, [r4, #8]
   d6ab2:	4a05      	ldr	r2, [pc, #20]	; (d6ac8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6ab4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6ab6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6ab8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6aba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6abc:	461a      	mov	r2, r3
   d6abe:	f7ff f921 	bl	d5d04 <HAL_USART_Init>
}
   d6ac2:	4620      	mov	r0, r4
   d6ac4:	bd10      	pop	{r4, pc}
   d6ac6:	bf00      	nop
   d6ac8:	000d7f28 	.word	0x000d7f28

000d6acc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6acc:	7c00      	ldrb	r0, [r0, #16]
   d6ace:	f7ff b949 	b.w	d5d64 <HAL_USART_Is_Enabled>
	...

000d6ad4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d6ad6:	4c19      	ldr	r4, [pc, #100]	; (d6b3c <_Z22__fetch_global_Serial1v+0x68>)
   d6ad8:	6825      	ldr	r5, [r4, #0]
   d6ada:	b94d      	cbnz	r5, d6af0 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d6adc:	2084      	movs	r0, #132	; 0x84
   d6ade:	f7fd fadc 	bl	d409a <_Znwj>
   d6ae2:	4606      	mov	r6, r0
   d6ae4:	b118      	cbz	r0, d6aee <_Z22__fetch_global_Serial1v+0x1a>
   d6ae6:	2284      	movs	r2, #132	; 0x84
   d6ae8:	4629      	mov	r1, r5
   d6aea:	f001 f845 	bl	d7b78 <memset>
   d6aee:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d6af0:	4d13      	ldr	r5, [pc, #76]	; (d6b40 <_Z22__fetch_global_Serial1v+0x6c>)
   d6af2:	682e      	ldr	r6, [r5, #0]
   d6af4:	b94e      	cbnz	r6, d6b0a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d6af6:	2084      	movs	r0, #132	; 0x84
   d6af8:	f7fd facf 	bl	d409a <_Znwj>
   d6afc:	4607      	mov	r7, r0
   d6afe:	b118      	cbz	r0, d6b08 <_Z22__fetch_global_Serial1v+0x34>
   d6b00:	2284      	movs	r2, #132	; 0x84
   d6b02:	4631      	mov	r1, r6
   d6b04:	f001 f838 	bl	d7b78 <memset>
   d6b08:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d6b0a:	4f0e      	ldr	r7, [pc, #56]	; (d6b44 <_Z22__fetch_global_Serial1v+0x70>)
   d6b0c:	6839      	ldr	r1, [r7, #0]
   d6b0e:	f011 0601 	ands.w	r6, r1, #1
   d6b12:	d111      	bne.n	d6b38 <_Z22__fetch_global_Serial1v+0x64>
   d6b14:	4638      	mov	r0, r7
   d6b16:	f7fd fac6 	bl	d40a6 <__cxa_guard_acquire>
   d6b1a:	b168      	cbz	r0, d6b38 <_Z22__fetch_global_Serial1v+0x64>
   d6b1c:	6822      	ldr	r2, [r4, #0]
   d6b1e:	682b      	ldr	r3, [r5, #0]
   d6b20:	4809      	ldr	r0, [pc, #36]	; (d6b48 <_Z22__fetch_global_Serial1v+0x74>)
   d6b22:	4631      	mov	r1, r6
   d6b24:	f7ff ffbc 	bl	d6aa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6b28:	4638      	mov	r0, r7
   d6b2a:	f7fd fac1 	bl	d40b0 <__cxa_guard_release>
   d6b2e:	4a07      	ldr	r2, [pc, #28]	; (d6b4c <_Z22__fetch_global_Serial1v+0x78>)
   d6b30:	4907      	ldr	r1, [pc, #28]	; (d6b50 <_Z22__fetch_global_Serial1v+0x7c>)
   d6b32:	4805      	ldr	r0, [pc, #20]	; (d6b48 <_Z22__fetch_global_Serial1v+0x74>)
   d6b34:	f000 f9a8 	bl	d6e88 <__aeabi_atexit>
#endif
	return serial1;
}
   d6b38:	4803      	ldr	r0, [pc, #12]	; (d6b48 <_Z22__fetch_global_Serial1v+0x74>)
   d6b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6b3c:	2003e6f4 	.word	0x2003e6f4
   d6b40:	2003e6ec 	.word	0x2003e6ec
   d6b44:	2003e6f0 	.word	0x2003e6f0
   d6b48:	2003e6d8 	.word	0x2003e6d8
   d6b4c:	2003dff0 	.word	0x2003dff0
   d6b50:	000d6a1d 	.word	0x000d6a1d

000d6b54 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6b54:	7441      	strb	r1, [r0, #17]
   d6b56:	4770      	bx	lr

000d6b58 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6b58:	4770      	bx	lr

000d6b5a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6b5a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6b5c:	2100      	movs	r1, #0
   d6b5e:	7c00      	ldrb	r0, [r0, #16]
   d6b60:	f7ff f930 	bl	d5dc4 <HAL_USB_USART_Receive_Data>
}
   d6b64:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b68:	bf28      	it	cs
   d6b6a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6b6e:	bd08      	pop	{r3, pc}

000d6b70 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6b70:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6b72:	2101      	movs	r1, #1
   d6b74:	7c00      	ldrb	r0, [r0, #16]
   d6b76:	f7ff f925 	bl	d5dc4 <HAL_USB_USART_Receive_Data>
}
   d6b7a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b7e:	bf28      	it	cs
   d6b80:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6b84:	bd08      	pop	{r3, pc}

000d6b86 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6b86:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6b88:	7c00      	ldrb	r0, [r0, #16]
   d6b8a:	f7ff f913 	bl	d5db4 <HAL_USB_USART_Available_Data_For_Write>
}
   d6b8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b92:	bd08      	pop	{r3, pc}

000d6b94 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6b94:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6b96:	7c00      	ldrb	r0, [r0, #16]
   d6b98:	f7ff f904 	bl	d5da4 <HAL_USB_USART_Available_Data>
}
   d6b9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ba0:	bd08      	pop	{r3, pc}

000d6ba2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6ba2:	7c00      	ldrb	r0, [r0, #16]
   d6ba4:	f7ff b91e 	b.w	d5de4 <HAL_USB_USART_Flush_Data>

000d6ba8 <_ZN9USBSerialD0Ev>:
   d6ba8:	b510      	push	{r4, lr}
   d6baa:	2114      	movs	r1, #20
   d6bac:	4604      	mov	r4, r0
   d6bae:	f000 f970 	bl	d6e92 <_ZdlPvj>
   d6bb2:	4620      	mov	r0, r4
   d6bb4:	bd10      	pop	{r4, pc}

000d6bb6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6bb6:	b538      	push	{r3, r4, r5, lr}
   d6bb8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6bba:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6bbc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6bbe:	f7ff f8f9 	bl	d5db4 <HAL_USB_USART_Available_Data_For_Write>
   d6bc2:	2800      	cmp	r0, #0
   d6bc4:	dc01      	bgt.n	d6bca <_ZN9USBSerial5writeEh+0x14>
   d6bc6:	7c60      	ldrb	r0, [r4, #17]
   d6bc8:	b128      	cbz	r0, d6bd6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6bca:	4629      	mov	r1, r5
   d6bcc:	7c20      	ldrb	r0, [r4, #16]
   d6bce:	f7ff f901 	bl	d5dd4 <HAL_USB_USART_Send_Data>
   d6bd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6bd6:	bd38      	pop	{r3, r4, r5, pc}

000d6bd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6bd8:	b510      	push	{r4, lr}
   d6bda:	4604      	mov	r4, r0
   d6bdc:	2300      	movs	r3, #0
   d6bde:	6063      	str	r3, [r4, #4]
   d6be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6be4:	60a3      	str	r3, [r4, #8]
   d6be6:	4b05      	ldr	r3, [pc, #20]	; (d6bfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6be8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6bea:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6bec:	4608      	mov	r0, r1
{
  _serial = serial;
   d6bee:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6bf0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6bf2:	4611      	mov	r1, r2
   d6bf4:	f7ff f8c6 	bl	d5d84 <HAL_USB_USART_Init>
}
   d6bf8:	4620      	mov	r0, r4
   d6bfa:	bd10      	pop	{r4, pc}
   d6bfc:	000d7f58 	.word	0x000d7f58

000d6c00 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6c00:	2200      	movs	r2, #0
   d6c02:	7c00      	ldrb	r0, [r0, #16]
   d6c04:	f7ff b8c6 	b.w	d5d94 <HAL_USB_USART_Begin>

000d6c08 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6c08:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6c0a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6c0c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6c0e:	2100      	movs	r1, #0
   d6c10:	f000 ffb2 	bl	d7b78 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6c14:	4620      	mov	r0, r4
   d6c16:	bd10      	pop	{r4, pc}

000d6c18 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6c18:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6c1a:	4d0e      	ldr	r5, [pc, #56]	; (d6c54 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6c1c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6c1e:	a801      	add	r0, sp, #4
   d6c20:	f7ff fff2 	bl	d6c08 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6c24:	6829      	ldr	r1, [r5, #0]
   d6c26:	f011 0401 	ands.w	r4, r1, #1
   d6c2a:	d110      	bne.n	d6c4e <_Z16_fetch_usbserialv+0x36>
   d6c2c:	4628      	mov	r0, r5
   d6c2e:	f7fd fa3a 	bl	d40a6 <__cxa_guard_acquire>
   d6c32:	b160      	cbz	r0, d6c4e <_Z16_fetch_usbserialv+0x36>
   d6c34:	aa01      	add	r2, sp, #4
   d6c36:	4621      	mov	r1, r4
   d6c38:	4807      	ldr	r0, [pc, #28]	; (d6c58 <_Z16_fetch_usbserialv+0x40>)
   d6c3a:	f7ff ffcd 	bl	d6bd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6c3e:	4628      	mov	r0, r5
   d6c40:	f7fd fa36 	bl	d40b0 <__cxa_guard_release>
   d6c44:	4a05      	ldr	r2, [pc, #20]	; (d6c5c <_Z16_fetch_usbserialv+0x44>)
   d6c46:	4906      	ldr	r1, [pc, #24]	; (d6c60 <_Z16_fetch_usbserialv+0x48>)
   d6c48:	4803      	ldr	r0, [pc, #12]	; (d6c58 <_Z16_fetch_usbserialv+0x40>)
   d6c4a:	f000 f91d 	bl	d6e88 <__aeabi_atexit>
	return _usbserial;
}
   d6c4e:	4802      	ldr	r0, [pc, #8]	; (d6c58 <_Z16_fetch_usbserialv+0x40>)
   d6c50:	b007      	add	sp, #28
   d6c52:	bd30      	pop	{r4, r5, pc}
   d6c54:	2003e6f8 	.word	0x2003e6f8
   d6c58:	2003e6fc 	.word	0x2003e6fc
   d6c5c:	2003dff0 	.word	0x2003dff0
   d6c60:	000d6b59 	.word	0x000d6b59

000d6c64 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6c64:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6c66:	4b0c      	ldr	r3, [pc, #48]	; (d6c98 <serialEventRun+0x34>)
   d6c68:	b133      	cbz	r3, d6c78 <serialEventRun+0x14>
   d6c6a:	f7ff ffd5 	bl	d6c18 <_Z16_fetch_usbserialv>
   d6c6e:	6803      	ldr	r3, [r0, #0]
   d6c70:	691b      	ldr	r3, [r3, #16]
   d6c72:	4798      	blx	r3
   d6c74:	2800      	cmp	r0, #0
   d6c76:	dc09      	bgt.n	d6c8c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6c78:	4b08      	ldr	r3, [pc, #32]	; (d6c9c <serialEventRun+0x38>)
   d6c7a:	b163      	cbz	r3, d6c96 <serialEventRun+0x32>
   d6c7c:	f7ff ff2a 	bl	d6ad4 <_Z22__fetch_global_Serial1v>
   d6c80:	6803      	ldr	r3, [r0, #0]
   d6c82:	691b      	ldr	r3, [r3, #16]
   d6c84:	4798      	blx	r3
   d6c86:	2800      	cmp	r0, #0
   d6c88:	dc03      	bgt.n	d6c92 <serialEventRun+0x2e>
   d6c8a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6c8c:	f3af 8000 	nop.w
   d6c90:	e7f2      	b.n	d6c78 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6c92:	f3af 8000 	nop.w
   d6c96:	bd08      	pop	{r3, pc}
	...

000d6ca0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6ca0:	b508      	push	{r3, lr}
	serialEventRun();
   d6ca2:	f7ff ffdf 	bl	d6c64 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6ca6:	f7fe ff55 	bl	d5b54 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6caa:	4b01      	ldr	r3, [pc, #4]	; (d6cb0 <_post_loop+0x10>)
   d6cac:	6018      	str	r0, [r3, #0]
   d6cae:	bd08      	pop	{r3, pc}
   d6cb0:	2003e714 	.word	0x2003e714

000d6cb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6cb4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6cb6:	2300      	movs	r3, #0
   d6cb8:	9300      	str	r3, [sp, #0]
   d6cba:	461a      	mov	r2, r3
   d6cbc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6cc0:	f7ff f8c2 	bl	d5e48 <system_ctrl_set_result>
}
   d6cc4:	b003      	add	sp, #12
   d6cc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6ccc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6ccc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6cce:	8843      	ldrh	r3, [r0, #2]
   d6cd0:	2b0a      	cmp	r3, #10
   d6cd2:	d008      	beq.n	d6ce6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6cd4:	2b50      	cmp	r3, #80	; 0x50
   d6cd6:	d109      	bne.n	d6cec <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6cd8:	4b09      	ldr	r3, [pc, #36]	; (d6d00 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6cda:	681b      	ldr	r3, [r3, #0]
   d6cdc:	b13b      	cbz	r3, d6cee <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6cde:	b003      	add	sp, #12
   d6ce0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6ce4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6ce6:	f7ff ffe5 	bl	d6cb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6cea:	e006      	b.n	d6cfa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6cec:	2300      	movs	r3, #0
   d6cee:	9300      	str	r3, [sp, #0]
   d6cf0:	461a      	mov	r2, r3
   d6cf2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6cf6:	f7ff f8a7 	bl	d5e48 <system_ctrl_set_result>
        break;
    }
}
   d6cfa:	b003      	add	sp, #12
   d6cfc:	f85d fb04 	ldr.w	pc, [sp], #4
   d6d00:	2003e710 	.word	0x2003e710

000d6d04 <module_user_init_hook>:

void module_user_init_hook()
{
   d6d04:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6d06:	f7fe ff15 	bl	d5b34 <HAL_RNG_GetRandomNumber>
   d6d0a:	4604      	mov	r4, r0
    srand(seed);
   d6d0c:	f000 ff3c 	bl	d7b88 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6d10:	4b07      	ldr	r3, [pc, #28]	; (d6d30 <module_user_init_hook+0x2c>)
   d6d12:	b113      	cbz	r3, d6d1a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6d14:	4620      	mov	r0, r4
   d6d16:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6d1a:	2100      	movs	r1, #0
   d6d1c:	4804      	ldr	r0, [pc, #16]	; (d6d30 <module_user_init_hook+0x2c>)
   d6d1e:	f7ff f8b5 	bl	d5e8c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6d22:	2100      	movs	r1, #0
   d6d24:	4803      	ldr	r0, [pc, #12]	; (d6d34 <module_user_init_hook+0x30>)
}
   d6d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6d2a:	f7ff b883 	b.w	d5e34 <system_ctrl_set_app_request_handler>
   d6d2e:	bf00      	nop
   d6d30:	00000000 	.word	0x00000000
   d6d34:	000d6ccd 	.word	0x000d6ccd

000d6d38 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6d38:	b510      	push	{r4, lr}
   d6d3a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6d3c:	480f      	ldr	r0, [pc, #60]	; (d6d7c <pinAvailable+0x44>)
   d6d3e:	f7ff fe1e 	bl	d697e <_ZN8SPIClass9isEnabledEv>
   d6d42:	b128      	cbz	r0, d6d50 <pinAvailable+0x18>
   d6d44:	f1a4 030b 	sub.w	r3, r4, #11
   d6d48:	2b02      	cmp	r3, #2
   d6d4a:	d801      	bhi.n	d6d50 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6d4c:	2000      	movs	r0, #0
   d6d4e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6d50:	f000 f858 	bl	d6e04 <_Z19__fetch_global_Wirev>
   d6d54:	f7ff f9e8 	bl	d6128 <_ZN7TwoWire9isEnabledEv>
   d6d58:	b108      	cbz	r0, d6d5e <pinAvailable+0x26>
   d6d5a:	2c01      	cmp	r4, #1
   d6d5c:	d9f6      	bls.n	d6d4c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6d5e:	f7ff feb9 	bl	d6ad4 <_Z22__fetch_global_Serial1v>
   d6d62:	f7ff feb3 	bl	d6acc <_ZN11USARTSerial9isEnabledEv>
   d6d66:	b118      	cbz	r0, d6d70 <pinAvailable+0x38>
   d6d68:	f1a4 0309 	sub.w	r3, r4, #9
   d6d6c:	2b01      	cmp	r3, #1
   d6d6e:	d9ed      	bls.n	d6d4c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6d70:	2c23      	cmp	r4, #35	; 0x23
   d6d72:	bf8c      	ite	hi
   d6d74:	2000      	movhi	r0, #0
   d6d76:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6d78:	bd10      	pop	{r4, pc}
   d6d7a:	bf00      	nop
   d6d7c:	2003e730 	.word	0x2003e730

000d6d80 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6d80:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6d82:	b538      	push	{r3, r4, r5, lr}
   d6d84:	4604      	mov	r4, r0
   d6d86:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6d88:	d80a      	bhi.n	d6da0 <pinMode+0x20>
   d6d8a:	29ff      	cmp	r1, #255	; 0xff
   d6d8c:	d008      	beq.n	d6da0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6d8e:	f7ff ffd3 	bl	d6d38 <pinAvailable>
   d6d92:	b128      	cbz	r0, d6da0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6d94:	4629      	mov	r1, r5
   d6d96:	4620      	mov	r0, r4
}
   d6d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6d9c:	f7fe bf02 	b.w	d5ba4 <HAL_Pin_Mode>
   d6da0:	bd38      	pop	{r3, r4, r5, pc}

000d6da2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6da2:	b538      	push	{r3, r4, r5, lr}
   d6da4:	4604      	mov	r4, r0
   d6da6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6da8:	f7fe ff04 	bl	d5bb4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6dac:	28ff      	cmp	r0, #255	; 0xff
   d6dae:	d010      	beq.n	d6dd2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6db0:	2806      	cmp	r0, #6
   d6db2:	d804      	bhi.n	d6dbe <digitalWrite+0x1c>
   d6db4:	234d      	movs	r3, #77	; 0x4d
   d6db6:	fa23 f000 	lsr.w	r0, r3, r0
   d6dba:	07c3      	lsls	r3, r0, #31
   d6dbc:	d409      	bmi.n	d6dd2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6dbe:	4620      	mov	r0, r4
   d6dc0:	f7ff ffba 	bl	d6d38 <pinAvailable>
   d6dc4:	b128      	cbz	r0, d6dd2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6dc6:	4629      	mov	r1, r5
   d6dc8:	4620      	mov	r0, r4
}
   d6dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6dce:	f7fe bef9 	b.w	d5bc4 <HAL_GPIO_Write>
   d6dd2:	bd38      	pop	{r3, r4, r5, pc}

000d6dd4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6dd4:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6dd6:	b510      	push	{r4, lr}
   d6dd8:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6dda:	bf9c      	itt	ls
   d6ddc:	340e      	addls	r4, #14
   d6dde:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6de0:	4620      	mov	r0, r4
   d6de2:	f7ff ffa9 	bl	d6d38 <pinAvailable>
   d6de6:	b150      	cbz	r0, d6dfe <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6de8:	2103      	movs	r1, #3
   d6dea:	4620      	mov	r0, r4
   d6dec:	f7fe fed2 	bl	d5b94 <HAL_Validate_Pin_Function>
   d6df0:	2803      	cmp	r0, #3
   d6df2:	d104      	bne.n	d6dfe <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6df4:	4620      	mov	r0, r4
}
   d6df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6dfa:	f7fe beeb 	b.w	d5bd4 <HAL_ADC_Read>
}
   d6dfe:	2000      	movs	r0, #0
   d6e00:	bd10      	pop	{r4, pc}
	...

000d6e04 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6e04:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6e06:	4d0b      	ldr	r5, [pc, #44]	; (d6e34 <_Z19__fetch_global_Wirev+0x30>)
   d6e08:	6829      	ldr	r1, [r5, #0]
   d6e0a:	f011 0401 	ands.w	r4, r1, #1
   d6e0e:	d10f      	bne.n	d6e30 <_Z19__fetch_global_Wirev+0x2c>
   d6e10:	4628      	mov	r0, r5
   d6e12:	f7fd f948 	bl	d40a6 <__cxa_guard_acquire>
   d6e16:	b158      	cbz	r0, d6e30 <_Z19__fetch_global_Wirev+0x2c>
   d6e18:	4621      	mov	r1, r4
   d6e1a:	4807      	ldr	r0, [pc, #28]	; (d6e38 <_Z19__fetch_global_Wirev+0x34>)
   d6e1c:	f7ff f972 	bl	d6104 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6e20:	4628      	mov	r0, r5
   d6e22:	f7fd f945 	bl	d40b0 <__cxa_guard_release>
   d6e26:	4a05      	ldr	r2, [pc, #20]	; (d6e3c <_Z19__fetch_global_Wirev+0x38>)
   d6e28:	4905      	ldr	r1, [pc, #20]	; (d6e40 <_Z19__fetch_global_Wirev+0x3c>)
   d6e2a:	4803      	ldr	r0, [pc, #12]	; (d6e38 <_Z19__fetch_global_Wirev+0x34>)
   d6e2c:	f000 f82c 	bl	d6e88 <__aeabi_atexit>
	return wire;
}
   d6e30:	4801      	ldr	r0, [pc, #4]	; (d6e38 <_Z19__fetch_global_Wirev+0x34>)
   d6e32:	bd38      	pop	{r3, r4, r5, pc}
   d6e34:	2003e718 	.word	0x2003e718
   d6e38:	2003e71c 	.word	0x2003e71c
   d6e3c:	2003dff0 	.word	0x2003dff0
   d6e40:	000d60ad 	.word	0x000d60ad

000d6e44 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6e44:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6e46:	4c0c      	ldr	r4, [pc, #48]	; (d6e78 <_GLOBAL__sub_I_SPI+0x34>)
   d6e48:	4e0c      	ldr	r6, [pc, #48]	; (d6e7c <_GLOBAL__sub_I_SPI+0x38>)
   d6e4a:	4d0d      	ldr	r5, [pc, #52]	; (d6e80 <_GLOBAL__sub_I_SPI+0x3c>)
   d6e4c:	2100      	movs	r1, #0
   d6e4e:	4620      	mov	r0, r4
   d6e50:	f7ff fcda 	bl	d6808 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6e54:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6e56:	4c0b      	ldr	r4, [pc, #44]	; (d6e84 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6e58:	4632      	mov	r2, r6
   d6e5a:	4629      	mov	r1, r5
   d6e5c:	f000 f814 	bl	d6e88 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6e60:	2101      	movs	r1, #1
   d6e62:	4620      	mov	r0, r4
   d6e64:	f7ff fcd0 	bl	d6808 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6e68:	4632      	mov	r2, r6
   d6e6a:	4629      	mov	r1, r5
   d6e6c:	4620      	mov	r0, r4
   d6e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6e72:	f000 b809 	b.w	d6e88 <__aeabi_atexit>
   d6e76:	bf00      	nop
   d6e78:	2003e730 	.word	0x2003e730
   d6e7c:	2003dff0 	.word	0x2003dff0
   d6e80:	000d67f9 	.word	0x000d67f9
   d6e84:	2003e740 	.word	0x2003e740

000d6e88 <__aeabi_atexit>:
   d6e88:	460b      	mov	r3, r1
   d6e8a:	4601      	mov	r1, r0
   d6e8c:	4618      	mov	r0, r3
   d6e8e:	f000 be4b 	b.w	d7b28 <__cxa_atexit>

000d6e92 <_ZdlPvj>:
   d6e92:	f7fd b904 	b.w	d409e <_ZdlPv>
	...

000d6e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6e98:	4b24      	ldr	r3, [pc, #144]	; (d6f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6e9a:	681a      	ldr	r2, [r3, #0]
   d6e9c:	07d0      	lsls	r0, r2, #31
   d6e9e:	bf5c      	itt	pl
   d6ea0:	2201      	movpl	r2, #1
   d6ea2:	601a      	strpl	r2, [r3, #0]
   d6ea4:	4b22      	ldr	r3, [pc, #136]	; (d6f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6ea6:	681a      	ldr	r2, [r3, #0]
   d6ea8:	07d1      	lsls	r1, r2, #31
   d6eaa:	bf5c      	itt	pl
   d6eac:	2201      	movpl	r2, #1
   d6eae:	601a      	strpl	r2, [r3, #0]
   d6eb0:	4b20      	ldr	r3, [pc, #128]	; (d6f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6eb2:	681a      	ldr	r2, [r3, #0]
   d6eb4:	07d2      	lsls	r2, r2, #31
   d6eb6:	bf5c      	itt	pl
   d6eb8:	2201      	movpl	r2, #1
   d6eba:	601a      	strpl	r2, [r3, #0]
   d6ebc:	4b1e      	ldr	r3, [pc, #120]	; (d6f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6ebe:	681a      	ldr	r2, [r3, #0]
   d6ec0:	07d0      	lsls	r0, r2, #31
   d6ec2:	bf5c      	itt	pl
   d6ec4:	2201      	movpl	r2, #1
   d6ec6:	601a      	strpl	r2, [r3, #0]
   d6ec8:	4b1c      	ldr	r3, [pc, #112]	; (d6f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6eca:	681a      	ldr	r2, [r3, #0]
   d6ecc:	07d1      	lsls	r1, r2, #31
   d6ece:	bf5c      	itt	pl
   d6ed0:	2201      	movpl	r2, #1
   d6ed2:	601a      	strpl	r2, [r3, #0]
   d6ed4:	4b1a      	ldr	r3, [pc, #104]	; (d6f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6ed6:	681a      	ldr	r2, [r3, #0]
   d6ed8:	07d2      	lsls	r2, r2, #31
   d6eda:	bf5c      	itt	pl
   d6edc:	2201      	movpl	r2, #1
   d6ede:	601a      	strpl	r2, [r3, #0]
   d6ee0:	4b18      	ldr	r3, [pc, #96]	; (d6f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6ee2:	681a      	ldr	r2, [r3, #0]
   d6ee4:	07d0      	lsls	r0, r2, #31
   d6ee6:	bf5c      	itt	pl
   d6ee8:	2201      	movpl	r2, #1
   d6eea:	601a      	strpl	r2, [r3, #0]
   d6eec:	4b16      	ldr	r3, [pc, #88]	; (d6f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6eee:	681a      	ldr	r2, [r3, #0]
   d6ef0:	07d1      	lsls	r1, r2, #31
   d6ef2:	bf5c      	itt	pl
   d6ef4:	2201      	movpl	r2, #1
   d6ef6:	601a      	strpl	r2, [r3, #0]
   d6ef8:	4b14      	ldr	r3, [pc, #80]	; (d6f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6efa:	681a      	ldr	r2, [r3, #0]
   d6efc:	07d2      	lsls	r2, r2, #31
   d6efe:	bf5c      	itt	pl
   d6f00:	2201      	movpl	r2, #1
   d6f02:	601a      	strpl	r2, [r3, #0]
   d6f04:	4b12      	ldr	r3, [pc, #72]	; (d6f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6f06:	681a      	ldr	r2, [r3, #0]
   d6f08:	07d0      	lsls	r0, r2, #31
   d6f0a:	bf5c      	itt	pl
   d6f0c:	2201      	movpl	r2, #1
   d6f0e:	601a      	strpl	r2, [r3, #0]
   d6f10:	4b10      	ldr	r3, [pc, #64]	; (d6f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6f12:	681a      	ldr	r2, [r3, #0]
   d6f14:	07d1      	lsls	r1, r2, #31
   d6f16:	bf5c      	itt	pl
   d6f18:	2201      	movpl	r2, #1
   d6f1a:	601a      	strpl	r2, [r3, #0]
   d6f1c:	4b0e      	ldr	r3, [pc, #56]	; (d6f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6f1e:	681a      	ldr	r2, [r3, #0]
   d6f20:	07d2      	lsls	r2, r2, #31
   d6f22:	bf5c      	itt	pl
   d6f24:	2201      	movpl	r2, #1
   d6f26:	601a      	strpl	r2, [r3, #0]
   d6f28:	4770      	bx	lr
   d6f2a:	bf00      	nop
   d6f2c:	2003e77c 	.word	0x2003e77c
   d6f30:	2003e778 	.word	0x2003e778
   d6f34:	2003e774 	.word	0x2003e774
   d6f38:	2003e770 	.word	0x2003e770
   d6f3c:	2003e76c 	.word	0x2003e76c
   d6f40:	2003e768 	.word	0x2003e768
   d6f44:	2003e764 	.word	0x2003e764
   d6f48:	2003e760 	.word	0x2003e760
   d6f4c:	2003e75c 	.word	0x2003e75c
   d6f50:	2003e758 	.word	0x2003e758
   d6f54:	2003e754 	.word	0x2003e754
   d6f58:	2003e750 	.word	0x2003e750

000d6f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6f5c:	4b18      	ldr	r3, [pc, #96]	; (d6fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6f5e:	681a      	ldr	r2, [r3, #0]
   d6f60:	07d1      	lsls	r1, r2, #31
   d6f62:	bf5c      	itt	pl
   d6f64:	2201      	movpl	r2, #1
   d6f66:	601a      	strpl	r2, [r3, #0]
   d6f68:	4b16      	ldr	r3, [pc, #88]	; (d6fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6f6a:	681a      	ldr	r2, [r3, #0]
   d6f6c:	07d2      	lsls	r2, r2, #31
   d6f6e:	bf5c      	itt	pl
   d6f70:	2201      	movpl	r2, #1
   d6f72:	601a      	strpl	r2, [r3, #0]
   d6f74:	4b14      	ldr	r3, [pc, #80]	; (d6fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6f76:	681a      	ldr	r2, [r3, #0]
   d6f78:	07d0      	lsls	r0, r2, #31
   d6f7a:	bf5c      	itt	pl
   d6f7c:	2201      	movpl	r2, #1
   d6f7e:	601a      	strpl	r2, [r3, #0]
   d6f80:	4b12      	ldr	r3, [pc, #72]	; (d6fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6f82:	681a      	ldr	r2, [r3, #0]
   d6f84:	07d1      	lsls	r1, r2, #31
   d6f86:	bf5c      	itt	pl
   d6f88:	2201      	movpl	r2, #1
   d6f8a:	601a      	strpl	r2, [r3, #0]
   d6f8c:	4b10      	ldr	r3, [pc, #64]	; (d6fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6f8e:	681a      	ldr	r2, [r3, #0]
   d6f90:	07d2      	lsls	r2, r2, #31
   d6f92:	bf5c      	itt	pl
   d6f94:	2201      	movpl	r2, #1
   d6f96:	601a      	strpl	r2, [r3, #0]
   d6f98:	4b0e      	ldr	r3, [pc, #56]	; (d6fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6f9a:	681a      	ldr	r2, [r3, #0]
   d6f9c:	07d0      	lsls	r0, r2, #31
   d6f9e:	bf5c      	itt	pl
   d6fa0:	2201      	movpl	r2, #1
   d6fa2:	601a      	strpl	r2, [r3, #0]
   d6fa4:	4b0c      	ldr	r3, [pc, #48]	; (d6fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6fa6:	681a      	ldr	r2, [r3, #0]
   d6fa8:	07d1      	lsls	r1, r2, #31
   d6faa:	bf5c      	itt	pl
   d6fac:	2201      	movpl	r2, #1
   d6fae:	601a      	strpl	r2, [r3, #0]
   d6fb0:	4b0a      	ldr	r3, [pc, #40]	; (d6fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6fb2:	681a      	ldr	r2, [r3, #0]
   d6fb4:	07d2      	lsls	r2, r2, #31
   d6fb6:	bf5c      	itt	pl
   d6fb8:	2201      	movpl	r2, #1
   d6fba:	601a      	strpl	r2, [r3, #0]
   d6fbc:	4770      	bx	lr
   d6fbe:	bf00      	nop
   d6fc0:	2003e79c 	.word	0x2003e79c
   d6fc4:	2003e798 	.word	0x2003e798
   d6fc8:	2003e794 	.word	0x2003e794
   d6fcc:	2003e790 	.word	0x2003e790
   d6fd0:	2003e78c 	.word	0x2003e78c
   d6fd4:	2003e788 	.word	0x2003e788
   d6fd8:	2003e784 	.word	0x2003e784
   d6fdc:	2003e780 	.word	0x2003e780

000d6fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6fe0:	4b18      	ldr	r3, [pc, #96]	; (d7044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6fe2:	681a      	ldr	r2, [r3, #0]
   d6fe4:	07d1      	lsls	r1, r2, #31
   d6fe6:	bf5c      	itt	pl
   d6fe8:	2201      	movpl	r2, #1
   d6fea:	601a      	strpl	r2, [r3, #0]
   d6fec:	4b16      	ldr	r3, [pc, #88]	; (d7048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6fee:	681a      	ldr	r2, [r3, #0]
   d6ff0:	07d2      	lsls	r2, r2, #31
   d6ff2:	bf5c      	itt	pl
   d6ff4:	2201      	movpl	r2, #1
   d6ff6:	601a      	strpl	r2, [r3, #0]
   d6ff8:	4b14      	ldr	r3, [pc, #80]	; (d704c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6ffa:	681a      	ldr	r2, [r3, #0]
   d6ffc:	07d0      	lsls	r0, r2, #31
   d6ffe:	bf5c      	itt	pl
   d7000:	2201      	movpl	r2, #1
   d7002:	601a      	strpl	r2, [r3, #0]
   d7004:	4b12      	ldr	r3, [pc, #72]	; (d7050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7006:	681a      	ldr	r2, [r3, #0]
   d7008:	07d1      	lsls	r1, r2, #31
   d700a:	bf5c      	itt	pl
   d700c:	2201      	movpl	r2, #1
   d700e:	601a      	strpl	r2, [r3, #0]
   d7010:	4b10      	ldr	r3, [pc, #64]	; (d7054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7012:	681a      	ldr	r2, [r3, #0]
   d7014:	07d2      	lsls	r2, r2, #31
   d7016:	bf5c      	itt	pl
   d7018:	2201      	movpl	r2, #1
   d701a:	601a      	strpl	r2, [r3, #0]
   d701c:	4b0e      	ldr	r3, [pc, #56]	; (d7058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d701e:	681a      	ldr	r2, [r3, #0]
   d7020:	07d0      	lsls	r0, r2, #31
   d7022:	bf5c      	itt	pl
   d7024:	2201      	movpl	r2, #1
   d7026:	601a      	strpl	r2, [r3, #0]
   d7028:	4b0c      	ldr	r3, [pc, #48]	; (d705c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d702a:	681a      	ldr	r2, [r3, #0]
   d702c:	07d1      	lsls	r1, r2, #31
   d702e:	bf5c      	itt	pl
   d7030:	2201      	movpl	r2, #1
   d7032:	601a      	strpl	r2, [r3, #0]
   d7034:	4b0a      	ldr	r3, [pc, #40]	; (d7060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7036:	681a      	ldr	r2, [r3, #0]
   d7038:	07d2      	lsls	r2, r2, #31
   d703a:	bf5c      	itt	pl
   d703c:	2201      	movpl	r2, #1
   d703e:	601a      	strpl	r2, [r3, #0]
   d7040:	4770      	bx	lr
   d7042:	bf00      	nop
   d7044:	2003e7bc 	.word	0x2003e7bc
   d7048:	2003e7b8 	.word	0x2003e7b8
   d704c:	2003e7b4 	.word	0x2003e7b4
   d7050:	2003e7b0 	.word	0x2003e7b0
   d7054:	2003e7ac 	.word	0x2003e7ac
   d7058:	2003e7a8 	.word	0x2003e7a8
   d705c:	2003e7a4 	.word	0x2003e7a4
   d7060:	2003e7a0 	.word	0x2003e7a0

000d7064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7064:	4b24      	ldr	r3, [pc, #144]	; (d70f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7066:	681a      	ldr	r2, [r3, #0]
   d7068:	07d0      	lsls	r0, r2, #31
   d706a:	bf5c      	itt	pl
   d706c:	2201      	movpl	r2, #1
   d706e:	601a      	strpl	r2, [r3, #0]
   d7070:	4b22      	ldr	r3, [pc, #136]	; (d70fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7072:	681a      	ldr	r2, [r3, #0]
   d7074:	07d1      	lsls	r1, r2, #31
   d7076:	bf5c      	itt	pl
   d7078:	2201      	movpl	r2, #1
   d707a:	601a      	strpl	r2, [r3, #0]
   d707c:	4b20      	ldr	r3, [pc, #128]	; (d7100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d707e:	681a      	ldr	r2, [r3, #0]
   d7080:	07d2      	lsls	r2, r2, #31
   d7082:	bf5c      	itt	pl
   d7084:	2201      	movpl	r2, #1
   d7086:	601a      	strpl	r2, [r3, #0]
   d7088:	4b1e      	ldr	r3, [pc, #120]	; (d7104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d708a:	681a      	ldr	r2, [r3, #0]
   d708c:	07d0      	lsls	r0, r2, #31
   d708e:	bf5c      	itt	pl
   d7090:	2201      	movpl	r2, #1
   d7092:	601a      	strpl	r2, [r3, #0]
   d7094:	4b1c      	ldr	r3, [pc, #112]	; (d7108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7096:	681a      	ldr	r2, [r3, #0]
   d7098:	07d1      	lsls	r1, r2, #31
   d709a:	bf5c      	itt	pl
   d709c:	2201      	movpl	r2, #1
   d709e:	601a      	strpl	r2, [r3, #0]
   d70a0:	4b1a      	ldr	r3, [pc, #104]	; (d710c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d70a2:	681a      	ldr	r2, [r3, #0]
   d70a4:	07d2      	lsls	r2, r2, #31
   d70a6:	bf5c      	itt	pl
   d70a8:	2201      	movpl	r2, #1
   d70aa:	601a      	strpl	r2, [r3, #0]
   d70ac:	4b18      	ldr	r3, [pc, #96]	; (d7110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d70ae:	681a      	ldr	r2, [r3, #0]
   d70b0:	07d0      	lsls	r0, r2, #31
   d70b2:	bf5c      	itt	pl
   d70b4:	2201      	movpl	r2, #1
   d70b6:	601a      	strpl	r2, [r3, #0]
   d70b8:	4b16      	ldr	r3, [pc, #88]	; (d7114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d70ba:	681a      	ldr	r2, [r3, #0]
   d70bc:	07d1      	lsls	r1, r2, #31
   d70be:	bf5c      	itt	pl
   d70c0:	2201      	movpl	r2, #1
   d70c2:	601a      	strpl	r2, [r3, #0]
   d70c4:	4b14      	ldr	r3, [pc, #80]	; (d7118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d70c6:	681a      	ldr	r2, [r3, #0]
   d70c8:	07d2      	lsls	r2, r2, #31
   d70ca:	bf5c      	itt	pl
   d70cc:	2201      	movpl	r2, #1
   d70ce:	601a      	strpl	r2, [r3, #0]
   d70d0:	4b12      	ldr	r3, [pc, #72]	; (d711c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d70d2:	681a      	ldr	r2, [r3, #0]
   d70d4:	07d0      	lsls	r0, r2, #31
   d70d6:	bf5c      	itt	pl
   d70d8:	2201      	movpl	r2, #1
   d70da:	601a      	strpl	r2, [r3, #0]
   d70dc:	4b10      	ldr	r3, [pc, #64]	; (d7120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d70de:	681a      	ldr	r2, [r3, #0]
   d70e0:	07d1      	lsls	r1, r2, #31
   d70e2:	bf5c      	itt	pl
   d70e4:	2201      	movpl	r2, #1
   d70e6:	601a      	strpl	r2, [r3, #0]
   d70e8:	4b0e      	ldr	r3, [pc, #56]	; (d7124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d70ea:	681a      	ldr	r2, [r3, #0]
   d70ec:	07d2      	lsls	r2, r2, #31
   d70ee:	bf5c      	itt	pl
   d70f0:	2201      	movpl	r2, #1
   d70f2:	601a      	strpl	r2, [r3, #0]
   d70f4:	4770      	bx	lr
   d70f6:	bf00      	nop
   d70f8:	2003e7ec 	.word	0x2003e7ec
   d70fc:	2003e7e8 	.word	0x2003e7e8
   d7100:	2003e7e4 	.word	0x2003e7e4
   d7104:	2003e7e0 	.word	0x2003e7e0
   d7108:	2003e7dc 	.word	0x2003e7dc
   d710c:	2003e7d8 	.word	0x2003e7d8
   d7110:	2003e7d4 	.word	0x2003e7d4
   d7114:	2003e7d0 	.word	0x2003e7d0
   d7118:	2003e7cc 	.word	0x2003e7cc
   d711c:	2003e7c8 	.word	0x2003e7c8
   d7120:	2003e7c4 	.word	0x2003e7c4
   d7124:	2003e7c0 	.word	0x2003e7c0

000d7128 <__aeabi_drsub>:
   d7128:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d712c:	e002      	b.n	d7134 <__adddf3>
   d712e:	bf00      	nop

000d7130 <__aeabi_dsub>:
   d7130:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7134 <__adddf3>:
   d7134:	b530      	push	{r4, r5, lr}
   d7136:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d713a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d713e:	ea94 0f05 	teq	r4, r5
   d7142:	bf08      	it	eq
   d7144:	ea90 0f02 	teqeq	r0, r2
   d7148:	bf1f      	itttt	ne
   d714a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d714e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7152:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7156:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d715a:	f000 80e2 	beq.w	d7322 <__adddf3+0x1ee>
   d715e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7162:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7166:	bfb8      	it	lt
   d7168:	426d      	neglt	r5, r5
   d716a:	dd0c      	ble.n	d7186 <__adddf3+0x52>
   d716c:	442c      	add	r4, r5
   d716e:	ea80 0202 	eor.w	r2, r0, r2
   d7172:	ea81 0303 	eor.w	r3, r1, r3
   d7176:	ea82 0000 	eor.w	r0, r2, r0
   d717a:	ea83 0101 	eor.w	r1, r3, r1
   d717e:	ea80 0202 	eor.w	r2, r0, r2
   d7182:	ea81 0303 	eor.w	r3, r1, r3
   d7186:	2d36      	cmp	r5, #54	; 0x36
   d7188:	bf88      	it	hi
   d718a:	bd30      	pophi	{r4, r5, pc}
   d718c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7190:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7194:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7198:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d719c:	d002      	beq.n	d71a4 <__adddf3+0x70>
   d719e:	4240      	negs	r0, r0
   d71a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d71a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d71a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d71ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d71b0:	d002      	beq.n	d71b8 <__adddf3+0x84>
   d71b2:	4252      	negs	r2, r2
   d71b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d71b8:	ea94 0f05 	teq	r4, r5
   d71bc:	f000 80a7 	beq.w	d730e <__adddf3+0x1da>
   d71c0:	f1a4 0401 	sub.w	r4, r4, #1
   d71c4:	f1d5 0e20 	rsbs	lr, r5, #32
   d71c8:	db0d      	blt.n	d71e6 <__adddf3+0xb2>
   d71ca:	fa02 fc0e 	lsl.w	ip, r2, lr
   d71ce:	fa22 f205 	lsr.w	r2, r2, r5
   d71d2:	1880      	adds	r0, r0, r2
   d71d4:	f141 0100 	adc.w	r1, r1, #0
   d71d8:	fa03 f20e 	lsl.w	r2, r3, lr
   d71dc:	1880      	adds	r0, r0, r2
   d71de:	fa43 f305 	asr.w	r3, r3, r5
   d71e2:	4159      	adcs	r1, r3
   d71e4:	e00e      	b.n	d7204 <__adddf3+0xd0>
   d71e6:	f1a5 0520 	sub.w	r5, r5, #32
   d71ea:	f10e 0e20 	add.w	lr, lr, #32
   d71ee:	2a01      	cmp	r2, #1
   d71f0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d71f4:	bf28      	it	cs
   d71f6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d71fa:	fa43 f305 	asr.w	r3, r3, r5
   d71fe:	18c0      	adds	r0, r0, r3
   d7200:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7208:	d507      	bpl.n	d721a <__adddf3+0xe6>
   d720a:	f04f 0e00 	mov.w	lr, #0
   d720e:	f1dc 0c00 	rsbs	ip, ip, #0
   d7212:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7216:	eb6e 0101 	sbc.w	r1, lr, r1
   d721a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d721e:	d31b      	bcc.n	d7258 <__adddf3+0x124>
   d7220:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7224:	d30c      	bcc.n	d7240 <__adddf3+0x10c>
   d7226:	0849      	lsrs	r1, r1, #1
   d7228:	ea5f 0030 	movs.w	r0, r0, rrx
   d722c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7230:	f104 0401 	add.w	r4, r4, #1
   d7234:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7238:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d723c:	f080 809a 	bcs.w	d7374 <__adddf3+0x240>
   d7240:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7244:	bf08      	it	eq
   d7246:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d724a:	f150 0000 	adcs.w	r0, r0, #0
   d724e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7252:	ea41 0105 	orr.w	r1, r1, r5
   d7256:	bd30      	pop	{r4, r5, pc}
   d7258:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d725c:	4140      	adcs	r0, r0
   d725e:	eb41 0101 	adc.w	r1, r1, r1
   d7262:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7266:	f1a4 0401 	sub.w	r4, r4, #1
   d726a:	d1e9      	bne.n	d7240 <__adddf3+0x10c>
   d726c:	f091 0f00 	teq	r1, #0
   d7270:	bf04      	itt	eq
   d7272:	4601      	moveq	r1, r0
   d7274:	2000      	moveq	r0, #0
   d7276:	fab1 f381 	clz	r3, r1
   d727a:	bf08      	it	eq
   d727c:	3320      	addeq	r3, #32
   d727e:	f1a3 030b 	sub.w	r3, r3, #11
   d7282:	f1b3 0220 	subs.w	r2, r3, #32
   d7286:	da0c      	bge.n	d72a2 <__adddf3+0x16e>
   d7288:	320c      	adds	r2, #12
   d728a:	dd08      	ble.n	d729e <__adddf3+0x16a>
   d728c:	f102 0c14 	add.w	ip, r2, #20
   d7290:	f1c2 020c 	rsb	r2, r2, #12
   d7294:	fa01 f00c 	lsl.w	r0, r1, ip
   d7298:	fa21 f102 	lsr.w	r1, r1, r2
   d729c:	e00c      	b.n	d72b8 <__adddf3+0x184>
   d729e:	f102 0214 	add.w	r2, r2, #20
   d72a2:	bfd8      	it	le
   d72a4:	f1c2 0c20 	rsble	ip, r2, #32
   d72a8:	fa01 f102 	lsl.w	r1, r1, r2
   d72ac:	fa20 fc0c 	lsr.w	ip, r0, ip
   d72b0:	bfdc      	itt	le
   d72b2:	ea41 010c 	orrle.w	r1, r1, ip
   d72b6:	4090      	lslle	r0, r2
   d72b8:	1ae4      	subs	r4, r4, r3
   d72ba:	bfa2      	ittt	ge
   d72bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d72c0:	4329      	orrge	r1, r5
   d72c2:	bd30      	popge	{r4, r5, pc}
   d72c4:	ea6f 0404 	mvn.w	r4, r4
   d72c8:	3c1f      	subs	r4, #31
   d72ca:	da1c      	bge.n	d7306 <__adddf3+0x1d2>
   d72cc:	340c      	adds	r4, #12
   d72ce:	dc0e      	bgt.n	d72ee <__adddf3+0x1ba>
   d72d0:	f104 0414 	add.w	r4, r4, #20
   d72d4:	f1c4 0220 	rsb	r2, r4, #32
   d72d8:	fa20 f004 	lsr.w	r0, r0, r4
   d72dc:	fa01 f302 	lsl.w	r3, r1, r2
   d72e0:	ea40 0003 	orr.w	r0, r0, r3
   d72e4:	fa21 f304 	lsr.w	r3, r1, r4
   d72e8:	ea45 0103 	orr.w	r1, r5, r3
   d72ec:	bd30      	pop	{r4, r5, pc}
   d72ee:	f1c4 040c 	rsb	r4, r4, #12
   d72f2:	f1c4 0220 	rsb	r2, r4, #32
   d72f6:	fa20 f002 	lsr.w	r0, r0, r2
   d72fa:	fa01 f304 	lsl.w	r3, r1, r4
   d72fe:	ea40 0003 	orr.w	r0, r0, r3
   d7302:	4629      	mov	r1, r5
   d7304:	bd30      	pop	{r4, r5, pc}
   d7306:	fa21 f004 	lsr.w	r0, r1, r4
   d730a:	4629      	mov	r1, r5
   d730c:	bd30      	pop	{r4, r5, pc}
   d730e:	f094 0f00 	teq	r4, #0
   d7312:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7316:	bf06      	itte	eq
   d7318:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d731c:	3401      	addeq	r4, #1
   d731e:	3d01      	subne	r5, #1
   d7320:	e74e      	b.n	d71c0 <__adddf3+0x8c>
   d7322:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7326:	bf18      	it	ne
   d7328:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d732c:	d029      	beq.n	d7382 <__adddf3+0x24e>
   d732e:	ea94 0f05 	teq	r4, r5
   d7332:	bf08      	it	eq
   d7334:	ea90 0f02 	teqeq	r0, r2
   d7338:	d005      	beq.n	d7346 <__adddf3+0x212>
   d733a:	ea54 0c00 	orrs.w	ip, r4, r0
   d733e:	bf04      	itt	eq
   d7340:	4619      	moveq	r1, r3
   d7342:	4610      	moveq	r0, r2
   d7344:	bd30      	pop	{r4, r5, pc}
   d7346:	ea91 0f03 	teq	r1, r3
   d734a:	bf1e      	ittt	ne
   d734c:	2100      	movne	r1, #0
   d734e:	2000      	movne	r0, #0
   d7350:	bd30      	popne	{r4, r5, pc}
   d7352:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7356:	d105      	bne.n	d7364 <__adddf3+0x230>
   d7358:	0040      	lsls	r0, r0, #1
   d735a:	4149      	adcs	r1, r1
   d735c:	bf28      	it	cs
   d735e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7362:	bd30      	pop	{r4, r5, pc}
   d7364:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7368:	bf3c      	itt	cc
   d736a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d736e:	bd30      	popcc	{r4, r5, pc}
   d7370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7374:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7378:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d737c:	f04f 0000 	mov.w	r0, #0
   d7380:	bd30      	pop	{r4, r5, pc}
   d7382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7386:	bf1a      	itte	ne
   d7388:	4619      	movne	r1, r3
   d738a:	4610      	movne	r0, r2
   d738c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7390:	bf1c      	itt	ne
   d7392:	460b      	movne	r3, r1
   d7394:	4602      	movne	r2, r0
   d7396:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d739a:	bf06      	itte	eq
   d739c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d73a0:	ea91 0f03 	teqeq	r1, r3
   d73a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d73a8:	bd30      	pop	{r4, r5, pc}
   d73aa:	bf00      	nop

000d73ac <__aeabi_ui2d>:
   d73ac:	f090 0f00 	teq	r0, #0
   d73b0:	bf04      	itt	eq
   d73b2:	2100      	moveq	r1, #0
   d73b4:	4770      	bxeq	lr
   d73b6:	b530      	push	{r4, r5, lr}
   d73b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d73bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d73c0:	f04f 0500 	mov.w	r5, #0
   d73c4:	f04f 0100 	mov.w	r1, #0
   d73c8:	e750      	b.n	d726c <__adddf3+0x138>
   d73ca:	bf00      	nop

000d73cc <__aeabi_i2d>:
   d73cc:	f090 0f00 	teq	r0, #0
   d73d0:	bf04      	itt	eq
   d73d2:	2100      	moveq	r1, #0
   d73d4:	4770      	bxeq	lr
   d73d6:	b530      	push	{r4, r5, lr}
   d73d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d73dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d73e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d73e4:	bf48      	it	mi
   d73e6:	4240      	negmi	r0, r0
   d73e8:	f04f 0100 	mov.w	r1, #0
   d73ec:	e73e      	b.n	d726c <__adddf3+0x138>
   d73ee:	bf00      	nop

000d73f0 <__aeabi_f2d>:
   d73f0:	0042      	lsls	r2, r0, #1
   d73f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d73f6:	ea4f 0131 	mov.w	r1, r1, rrx
   d73fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d73fe:	bf1f      	itttt	ne
   d7400:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7404:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7408:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d740c:	4770      	bxne	lr
   d740e:	f092 0f00 	teq	r2, #0
   d7412:	bf14      	ite	ne
   d7414:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7418:	4770      	bxeq	lr
   d741a:	b530      	push	{r4, r5, lr}
   d741c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7424:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7428:	e720      	b.n	d726c <__adddf3+0x138>
   d742a:	bf00      	nop

000d742c <__aeabi_ul2d>:
   d742c:	ea50 0201 	orrs.w	r2, r0, r1
   d7430:	bf08      	it	eq
   d7432:	4770      	bxeq	lr
   d7434:	b530      	push	{r4, r5, lr}
   d7436:	f04f 0500 	mov.w	r5, #0
   d743a:	e00a      	b.n	d7452 <__aeabi_l2d+0x16>

000d743c <__aeabi_l2d>:
   d743c:	ea50 0201 	orrs.w	r2, r0, r1
   d7440:	bf08      	it	eq
   d7442:	4770      	bxeq	lr
   d7444:	b530      	push	{r4, r5, lr}
   d7446:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d744a:	d502      	bpl.n	d7452 <__aeabi_l2d+0x16>
   d744c:	4240      	negs	r0, r0
   d744e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7452:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7456:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d745a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d745e:	f43f aedc 	beq.w	d721a <__adddf3+0xe6>
   d7462:	f04f 0203 	mov.w	r2, #3
   d7466:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d746a:	bf18      	it	ne
   d746c:	3203      	addne	r2, #3
   d746e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7472:	bf18      	it	ne
   d7474:	3203      	addne	r2, #3
   d7476:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d747a:	f1c2 0320 	rsb	r3, r2, #32
   d747e:	fa00 fc03 	lsl.w	ip, r0, r3
   d7482:	fa20 f002 	lsr.w	r0, r0, r2
   d7486:	fa01 fe03 	lsl.w	lr, r1, r3
   d748a:	ea40 000e 	orr.w	r0, r0, lr
   d748e:	fa21 f102 	lsr.w	r1, r1, r2
   d7492:	4414      	add	r4, r2
   d7494:	e6c1      	b.n	d721a <__adddf3+0xe6>
   d7496:	bf00      	nop

000d7498 <__aeabi_dmul>:
   d7498:	b570      	push	{r4, r5, r6, lr}
   d749a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d749e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d74a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d74a6:	bf1d      	ittte	ne
   d74a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d74ac:	ea94 0f0c 	teqne	r4, ip
   d74b0:	ea95 0f0c 	teqne	r5, ip
   d74b4:	f000 f8de 	bleq	d7674 <__aeabi_dmul+0x1dc>
   d74b8:	442c      	add	r4, r5
   d74ba:	ea81 0603 	eor.w	r6, r1, r3
   d74be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d74c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d74c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d74ca:	bf18      	it	ne
   d74cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d74d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d74d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d74d8:	d038      	beq.n	d754c <__aeabi_dmul+0xb4>
   d74da:	fba0 ce02 	umull	ip, lr, r0, r2
   d74de:	f04f 0500 	mov.w	r5, #0
   d74e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d74e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d74ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   d74ee:	f04f 0600 	mov.w	r6, #0
   d74f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d74f6:	f09c 0f00 	teq	ip, #0
   d74fa:	bf18      	it	ne
   d74fc:	f04e 0e01 	orrne.w	lr, lr, #1
   d7500:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7504:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7508:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d750c:	d204      	bcs.n	d7518 <__aeabi_dmul+0x80>
   d750e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7512:	416d      	adcs	r5, r5
   d7514:	eb46 0606 	adc.w	r6, r6, r6
   d7518:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d751c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7520:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7524:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7528:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d752c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7530:	bf88      	it	hi
   d7532:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7536:	d81e      	bhi.n	d7576 <__aeabi_dmul+0xde>
   d7538:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d753c:	bf08      	it	eq
   d753e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7542:	f150 0000 	adcs.w	r0, r0, #0
   d7546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d754a:	bd70      	pop	{r4, r5, r6, pc}
   d754c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7550:	ea46 0101 	orr.w	r1, r6, r1
   d7554:	ea40 0002 	orr.w	r0, r0, r2
   d7558:	ea81 0103 	eor.w	r1, r1, r3
   d755c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7560:	bfc2      	ittt	gt
   d7562:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7566:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d756a:	bd70      	popgt	{r4, r5, r6, pc}
   d756c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7570:	f04f 0e00 	mov.w	lr, #0
   d7574:	3c01      	subs	r4, #1
   d7576:	f300 80ab 	bgt.w	d76d0 <__aeabi_dmul+0x238>
   d757a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d757e:	bfde      	ittt	le
   d7580:	2000      	movle	r0, #0
   d7582:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7586:	bd70      	pople	{r4, r5, r6, pc}
   d7588:	f1c4 0400 	rsb	r4, r4, #0
   d758c:	3c20      	subs	r4, #32
   d758e:	da35      	bge.n	d75fc <__aeabi_dmul+0x164>
   d7590:	340c      	adds	r4, #12
   d7592:	dc1b      	bgt.n	d75cc <__aeabi_dmul+0x134>
   d7594:	f104 0414 	add.w	r4, r4, #20
   d7598:	f1c4 0520 	rsb	r5, r4, #32
   d759c:	fa00 f305 	lsl.w	r3, r0, r5
   d75a0:	fa20 f004 	lsr.w	r0, r0, r4
   d75a4:	fa01 f205 	lsl.w	r2, r1, r5
   d75a8:	ea40 0002 	orr.w	r0, r0, r2
   d75ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d75b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d75b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d75b8:	fa21 f604 	lsr.w	r6, r1, r4
   d75bc:	eb42 0106 	adc.w	r1, r2, r6
   d75c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d75c4:	bf08      	it	eq
   d75c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d75ca:	bd70      	pop	{r4, r5, r6, pc}
   d75cc:	f1c4 040c 	rsb	r4, r4, #12
   d75d0:	f1c4 0520 	rsb	r5, r4, #32
   d75d4:	fa00 f304 	lsl.w	r3, r0, r4
   d75d8:	fa20 f005 	lsr.w	r0, r0, r5
   d75dc:	fa01 f204 	lsl.w	r2, r1, r4
   d75e0:	ea40 0002 	orr.w	r0, r0, r2
   d75e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d75e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d75ec:	f141 0100 	adc.w	r1, r1, #0
   d75f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d75f4:	bf08      	it	eq
   d75f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d75fa:	bd70      	pop	{r4, r5, r6, pc}
   d75fc:	f1c4 0520 	rsb	r5, r4, #32
   d7600:	fa00 f205 	lsl.w	r2, r0, r5
   d7604:	ea4e 0e02 	orr.w	lr, lr, r2
   d7608:	fa20 f304 	lsr.w	r3, r0, r4
   d760c:	fa01 f205 	lsl.w	r2, r1, r5
   d7610:	ea43 0302 	orr.w	r3, r3, r2
   d7614:	fa21 f004 	lsr.w	r0, r1, r4
   d7618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d761c:	fa21 f204 	lsr.w	r2, r1, r4
   d7620:	ea20 0002 	bic.w	r0, r0, r2
   d7624:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d762c:	bf08      	it	eq
   d762e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7632:	bd70      	pop	{r4, r5, r6, pc}
   d7634:	f094 0f00 	teq	r4, #0
   d7638:	d10f      	bne.n	d765a <__aeabi_dmul+0x1c2>
   d763a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d763e:	0040      	lsls	r0, r0, #1
   d7640:	eb41 0101 	adc.w	r1, r1, r1
   d7644:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7648:	bf08      	it	eq
   d764a:	3c01      	subeq	r4, #1
   d764c:	d0f7      	beq.n	d763e <__aeabi_dmul+0x1a6>
   d764e:	ea41 0106 	orr.w	r1, r1, r6
   d7652:	f095 0f00 	teq	r5, #0
   d7656:	bf18      	it	ne
   d7658:	4770      	bxne	lr
   d765a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d765e:	0052      	lsls	r2, r2, #1
   d7660:	eb43 0303 	adc.w	r3, r3, r3
   d7664:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7668:	bf08      	it	eq
   d766a:	3d01      	subeq	r5, #1
   d766c:	d0f7      	beq.n	d765e <__aeabi_dmul+0x1c6>
   d766e:	ea43 0306 	orr.w	r3, r3, r6
   d7672:	4770      	bx	lr
   d7674:	ea94 0f0c 	teq	r4, ip
   d7678:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d767c:	bf18      	it	ne
   d767e:	ea95 0f0c 	teqne	r5, ip
   d7682:	d00c      	beq.n	d769e <__aeabi_dmul+0x206>
   d7684:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7688:	bf18      	it	ne
   d768a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d768e:	d1d1      	bne.n	d7634 <__aeabi_dmul+0x19c>
   d7690:	ea81 0103 	eor.w	r1, r1, r3
   d7694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7698:	f04f 0000 	mov.w	r0, #0
   d769c:	bd70      	pop	{r4, r5, r6, pc}
   d769e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d76a2:	bf06      	itte	eq
   d76a4:	4610      	moveq	r0, r2
   d76a6:	4619      	moveq	r1, r3
   d76a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d76ac:	d019      	beq.n	d76e2 <__aeabi_dmul+0x24a>
   d76ae:	ea94 0f0c 	teq	r4, ip
   d76b2:	d102      	bne.n	d76ba <__aeabi_dmul+0x222>
   d76b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d76b8:	d113      	bne.n	d76e2 <__aeabi_dmul+0x24a>
   d76ba:	ea95 0f0c 	teq	r5, ip
   d76be:	d105      	bne.n	d76cc <__aeabi_dmul+0x234>
   d76c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d76c4:	bf1c      	itt	ne
   d76c6:	4610      	movne	r0, r2
   d76c8:	4619      	movne	r1, r3
   d76ca:	d10a      	bne.n	d76e2 <__aeabi_dmul+0x24a>
   d76cc:	ea81 0103 	eor.w	r1, r1, r3
   d76d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d76d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d76d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d76dc:	f04f 0000 	mov.w	r0, #0
   d76e0:	bd70      	pop	{r4, r5, r6, pc}
   d76e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d76e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d76ea:	bd70      	pop	{r4, r5, r6, pc}

000d76ec <__aeabi_ddiv>:
   d76ec:	b570      	push	{r4, r5, r6, lr}
   d76ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d76f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d76f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d76fa:	bf1d      	ittte	ne
   d76fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7700:	ea94 0f0c 	teqne	r4, ip
   d7704:	ea95 0f0c 	teqne	r5, ip
   d7708:	f000 f8a7 	bleq	d785a <__aeabi_ddiv+0x16e>
   d770c:	eba4 0405 	sub.w	r4, r4, r5
   d7710:	ea81 0e03 	eor.w	lr, r1, r3
   d7714:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7718:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d771c:	f000 8088 	beq.w	d7830 <__aeabi_ddiv+0x144>
   d7720:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7724:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7728:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d772c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7730:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7734:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7738:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d773c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7740:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7744:	429d      	cmp	r5, r3
   d7746:	bf08      	it	eq
   d7748:	4296      	cmpeq	r6, r2
   d774a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d774e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7752:	d202      	bcs.n	d775a <__aeabi_ddiv+0x6e>
   d7754:	085b      	lsrs	r3, r3, #1
   d7756:	ea4f 0232 	mov.w	r2, r2, rrx
   d775a:	1ab6      	subs	r6, r6, r2
   d775c:	eb65 0503 	sbc.w	r5, r5, r3
   d7760:	085b      	lsrs	r3, r3, #1
   d7762:	ea4f 0232 	mov.w	r2, r2, rrx
   d7766:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d776a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d776e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7772:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7776:	bf22      	ittt	cs
   d7778:	1ab6      	subcs	r6, r6, r2
   d777a:	4675      	movcs	r5, lr
   d777c:	ea40 000c 	orrcs.w	r0, r0, ip
   d7780:	085b      	lsrs	r3, r3, #1
   d7782:	ea4f 0232 	mov.w	r2, r2, rrx
   d7786:	ebb6 0e02 	subs.w	lr, r6, r2
   d778a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d778e:	bf22      	ittt	cs
   d7790:	1ab6      	subcs	r6, r6, r2
   d7792:	4675      	movcs	r5, lr
   d7794:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7798:	085b      	lsrs	r3, r3, #1
   d779a:	ea4f 0232 	mov.w	r2, r2, rrx
   d779e:	ebb6 0e02 	subs.w	lr, r6, r2
   d77a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d77a6:	bf22      	ittt	cs
   d77a8:	1ab6      	subcs	r6, r6, r2
   d77aa:	4675      	movcs	r5, lr
   d77ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d77b0:	085b      	lsrs	r3, r3, #1
   d77b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d77b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d77ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d77be:	bf22      	ittt	cs
   d77c0:	1ab6      	subcs	r6, r6, r2
   d77c2:	4675      	movcs	r5, lr
   d77c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d77c8:	ea55 0e06 	orrs.w	lr, r5, r6
   d77cc:	d018      	beq.n	d7800 <__aeabi_ddiv+0x114>
   d77ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d77d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d77d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d77da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d77de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d77e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d77e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d77ea:	d1c0      	bne.n	d776e <__aeabi_ddiv+0x82>
   d77ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d77f0:	d10b      	bne.n	d780a <__aeabi_ddiv+0x11e>
   d77f2:	ea41 0100 	orr.w	r1, r1, r0
   d77f6:	f04f 0000 	mov.w	r0, #0
   d77fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d77fe:	e7b6      	b.n	d776e <__aeabi_ddiv+0x82>
   d7800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7804:	bf04      	itt	eq
   d7806:	4301      	orreq	r1, r0
   d7808:	2000      	moveq	r0, #0
   d780a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d780e:	bf88      	it	hi
   d7810:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7814:	f63f aeaf 	bhi.w	d7576 <__aeabi_dmul+0xde>
   d7818:	ebb5 0c03 	subs.w	ip, r5, r3
   d781c:	bf04      	itt	eq
   d781e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7822:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7826:	f150 0000 	adcs.w	r0, r0, #0
   d782a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d782e:	bd70      	pop	{r4, r5, r6, pc}
   d7830:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7834:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7838:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d783c:	bfc2      	ittt	gt
   d783e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7842:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7846:	bd70      	popgt	{r4, r5, r6, pc}
   d7848:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d784c:	f04f 0e00 	mov.w	lr, #0
   d7850:	3c01      	subs	r4, #1
   d7852:	e690      	b.n	d7576 <__aeabi_dmul+0xde>
   d7854:	ea45 0e06 	orr.w	lr, r5, r6
   d7858:	e68d      	b.n	d7576 <__aeabi_dmul+0xde>
   d785a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d785e:	ea94 0f0c 	teq	r4, ip
   d7862:	bf08      	it	eq
   d7864:	ea95 0f0c 	teqeq	r5, ip
   d7868:	f43f af3b 	beq.w	d76e2 <__aeabi_dmul+0x24a>
   d786c:	ea94 0f0c 	teq	r4, ip
   d7870:	d10a      	bne.n	d7888 <__aeabi_ddiv+0x19c>
   d7872:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7876:	f47f af34 	bne.w	d76e2 <__aeabi_dmul+0x24a>
   d787a:	ea95 0f0c 	teq	r5, ip
   d787e:	f47f af25 	bne.w	d76cc <__aeabi_dmul+0x234>
   d7882:	4610      	mov	r0, r2
   d7884:	4619      	mov	r1, r3
   d7886:	e72c      	b.n	d76e2 <__aeabi_dmul+0x24a>
   d7888:	ea95 0f0c 	teq	r5, ip
   d788c:	d106      	bne.n	d789c <__aeabi_ddiv+0x1b0>
   d788e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7892:	f43f aefd 	beq.w	d7690 <__aeabi_dmul+0x1f8>
   d7896:	4610      	mov	r0, r2
   d7898:	4619      	mov	r1, r3
   d789a:	e722      	b.n	d76e2 <__aeabi_dmul+0x24a>
   d789c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d78a0:	bf18      	it	ne
   d78a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d78a6:	f47f aec5 	bne.w	d7634 <__aeabi_dmul+0x19c>
   d78aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d78ae:	f47f af0d 	bne.w	d76cc <__aeabi_dmul+0x234>
   d78b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d78b6:	f47f aeeb 	bne.w	d7690 <__aeabi_dmul+0x1f8>
   d78ba:	e712      	b.n	d76e2 <__aeabi_dmul+0x24a>

000d78bc <__gedf2>:
   d78bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d78c0:	e006      	b.n	d78d0 <__cmpdf2+0x4>
   d78c2:	bf00      	nop

000d78c4 <__ledf2>:
   d78c4:	f04f 0c01 	mov.w	ip, #1
   d78c8:	e002      	b.n	d78d0 <__cmpdf2+0x4>
   d78ca:	bf00      	nop

000d78cc <__cmpdf2>:
   d78cc:	f04f 0c01 	mov.w	ip, #1
   d78d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d78d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d78d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d78dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d78e0:	bf18      	it	ne
   d78e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d78e6:	d01b      	beq.n	d7920 <__cmpdf2+0x54>
   d78e8:	b001      	add	sp, #4
   d78ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d78ee:	bf0c      	ite	eq
   d78f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d78f4:	ea91 0f03 	teqne	r1, r3
   d78f8:	bf02      	ittt	eq
   d78fa:	ea90 0f02 	teqeq	r0, r2
   d78fe:	2000      	moveq	r0, #0
   d7900:	4770      	bxeq	lr
   d7902:	f110 0f00 	cmn.w	r0, #0
   d7906:	ea91 0f03 	teq	r1, r3
   d790a:	bf58      	it	pl
   d790c:	4299      	cmppl	r1, r3
   d790e:	bf08      	it	eq
   d7910:	4290      	cmpeq	r0, r2
   d7912:	bf2c      	ite	cs
   d7914:	17d8      	asrcs	r0, r3, #31
   d7916:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d791a:	f040 0001 	orr.w	r0, r0, #1
   d791e:	4770      	bx	lr
   d7920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7928:	d102      	bne.n	d7930 <__cmpdf2+0x64>
   d792a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d792e:	d107      	bne.n	d7940 <__cmpdf2+0x74>
   d7930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7938:	d1d6      	bne.n	d78e8 <__cmpdf2+0x1c>
   d793a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d793e:	d0d3      	beq.n	d78e8 <__cmpdf2+0x1c>
   d7940:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7944:	4770      	bx	lr
   d7946:	bf00      	nop

000d7948 <__aeabi_cdrcmple>:
   d7948:	4684      	mov	ip, r0
   d794a:	4610      	mov	r0, r2
   d794c:	4662      	mov	r2, ip
   d794e:	468c      	mov	ip, r1
   d7950:	4619      	mov	r1, r3
   d7952:	4663      	mov	r3, ip
   d7954:	e000      	b.n	d7958 <__aeabi_cdcmpeq>
   d7956:	bf00      	nop

000d7958 <__aeabi_cdcmpeq>:
   d7958:	b501      	push	{r0, lr}
   d795a:	f7ff ffb7 	bl	d78cc <__cmpdf2>
   d795e:	2800      	cmp	r0, #0
   d7960:	bf48      	it	mi
   d7962:	f110 0f00 	cmnmi.w	r0, #0
   d7966:	bd01      	pop	{r0, pc}

000d7968 <__aeabi_dcmpeq>:
   d7968:	f84d ed08 	str.w	lr, [sp, #-8]!
   d796c:	f7ff fff4 	bl	d7958 <__aeabi_cdcmpeq>
   d7970:	bf0c      	ite	eq
   d7972:	2001      	moveq	r0, #1
   d7974:	2000      	movne	r0, #0
   d7976:	f85d fb08 	ldr.w	pc, [sp], #8
   d797a:	bf00      	nop

000d797c <__aeabi_dcmplt>:
   d797c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7980:	f7ff ffea 	bl	d7958 <__aeabi_cdcmpeq>
   d7984:	bf34      	ite	cc
   d7986:	2001      	movcc	r0, #1
   d7988:	2000      	movcs	r0, #0
   d798a:	f85d fb08 	ldr.w	pc, [sp], #8
   d798e:	bf00      	nop

000d7990 <__aeabi_dcmple>:
   d7990:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7994:	f7ff ffe0 	bl	d7958 <__aeabi_cdcmpeq>
   d7998:	bf94      	ite	ls
   d799a:	2001      	movls	r0, #1
   d799c:	2000      	movhi	r0, #0
   d799e:	f85d fb08 	ldr.w	pc, [sp], #8
   d79a2:	bf00      	nop

000d79a4 <__aeabi_dcmpge>:
   d79a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d79a8:	f7ff ffce 	bl	d7948 <__aeabi_cdrcmple>
   d79ac:	bf94      	ite	ls
   d79ae:	2001      	movls	r0, #1
   d79b0:	2000      	movhi	r0, #0
   d79b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d79b6:	bf00      	nop

000d79b8 <__aeabi_dcmpgt>:
   d79b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d79bc:	f7ff ffc4 	bl	d7948 <__aeabi_cdrcmple>
   d79c0:	bf34      	ite	cc
   d79c2:	2001      	movcc	r0, #1
   d79c4:	2000      	movcs	r0, #0
   d79c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d79ca:	bf00      	nop

000d79cc <__aeabi_dcmpun>:
   d79cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d79d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d79d4:	d102      	bne.n	d79dc <__aeabi_dcmpun+0x10>
   d79d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d79da:	d10a      	bne.n	d79f2 <__aeabi_dcmpun+0x26>
   d79dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d79e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d79e4:	d102      	bne.n	d79ec <__aeabi_dcmpun+0x20>
   d79e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d79ea:	d102      	bne.n	d79f2 <__aeabi_dcmpun+0x26>
   d79ec:	f04f 0000 	mov.w	r0, #0
   d79f0:	4770      	bx	lr
   d79f2:	f04f 0001 	mov.w	r0, #1
   d79f6:	4770      	bx	lr

000d79f8 <__aeabi_d2iz>:
   d79f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d79fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7a00:	d215      	bcs.n	d7a2e <__aeabi_d2iz+0x36>
   d7a02:	d511      	bpl.n	d7a28 <__aeabi_d2iz+0x30>
   d7a04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7a08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7a0c:	d912      	bls.n	d7a34 <__aeabi_d2iz+0x3c>
   d7a0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7a16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7a1e:	fa23 f002 	lsr.w	r0, r3, r2
   d7a22:	bf18      	it	ne
   d7a24:	4240      	negne	r0, r0
   d7a26:	4770      	bx	lr
   d7a28:	f04f 0000 	mov.w	r0, #0
   d7a2c:	4770      	bx	lr
   d7a2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7a32:	d105      	bne.n	d7a40 <__aeabi_d2iz+0x48>
   d7a34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7a38:	bf08      	it	eq
   d7a3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7a3e:	4770      	bx	lr
   d7a40:	f04f 0000 	mov.w	r0, #0
   d7a44:	4770      	bx	lr
   d7a46:	bf00      	nop

000d7a48 <__aeabi_d2uiz>:
   d7a48:	004a      	lsls	r2, r1, #1
   d7a4a:	d211      	bcs.n	d7a70 <__aeabi_d2uiz+0x28>
   d7a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7a50:	d211      	bcs.n	d7a76 <__aeabi_d2uiz+0x2e>
   d7a52:	d50d      	bpl.n	d7a70 <__aeabi_d2uiz+0x28>
   d7a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7a5c:	d40e      	bmi.n	d7a7c <__aeabi_d2uiz+0x34>
   d7a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7a6a:	fa23 f002 	lsr.w	r0, r3, r2
   d7a6e:	4770      	bx	lr
   d7a70:	f04f 0000 	mov.w	r0, #0
   d7a74:	4770      	bx	lr
   d7a76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7a7a:	d102      	bne.n	d7a82 <__aeabi_d2uiz+0x3a>
   d7a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7a80:	4770      	bx	lr
   d7a82:	f04f 0000 	mov.w	r0, #0
   d7a86:	4770      	bx	lr

000d7a88 <__aeabi_d2f>:
   d7a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7a90:	bf24      	itt	cs
   d7a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7a9a:	d90d      	bls.n	d7ab8 <__aeabi_d2f+0x30>
   d7a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7ab0:	bf08      	it	eq
   d7ab2:	f020 0001 	biceq.w	r0, r0, #1
   d7ab6:	4770      	bx	lr
   d7ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7abc:	d121      	bne.n	d7b02 <__aeabi_d2f+0x7a>
   d7abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7ac2:	bfbc      	itt	lt
   d7ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7ac8:	4770      	bxlt	lr
   d7aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7ad2:	f1c2 0218 	rsb	r2, r2, #24
   d7ad6:	f1c2 0c20 	rsb	ip, r2, #32
   d7ada:	fa10 f30c 	lsls.w	r3, r0, ip
   d7ade:	fa20 f002 	lsr.w	r0, r0, r2
   d7ae2:	bf18      	it	ne
   d7ae4:	f040 0001 	orrne.w	r0, r0, #1
   d7ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7af0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7af4:	ea40 000c 	orr.w	r0, r0, ip
   d7af8:	fa23 f302 	lsr.w	r3, r3, r2
   d7afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7b00:	e7cc      	b.n	d7a9c <__aeabi_d2f+0x14>
   d7b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7b06:	d107      	bne.n	d7b18 <__aeabi_d2f+0x90>
   d7b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7b0c:	bf1e      	ittt	ne
   d7b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7b16:	4770      	bxne	lr
   d7b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7b24:	4770      	bx	lr
   d7b26:	bf00      	nop

000d7b28 <__cxa_atexit>:
   d7b28:	b510      	push	{r4, lr}
   d7b2a:	4c05      	ldr	r4, [pc, #20]	; (d7b40 <__cxa_atexit+0x18>)
   d7b2c:	4613      	mov	r3, r2
   d7b2e:	b12c      	cbz	r4, d7b3c <__cxa_atexit+0x14>
   d7b30:	460a      	mov	r2, r1
   d7b32:	4601      	mov	r1, r0
   d7b34:	2002      	movs	r0, #2
   d7b36:	f3af 8000 	nop.w
   d7b3a:	bd10      	pop	{r4, pc}
   d7b3c:	4620      	mov	r0, r4
   d7b3e:	bd10      	pop	{r4, pc}
   d7b40:	00000000 	.word	0x00000000

000d7b44 <memcmp>:
   d7b44:	b510      	push	{r4, lr}
   d7b46:	3901      	subs	r1, #1
   d7b48:	4402      	add	r2, r0
   d7b4a:	4290      	cmp	r0, r2
   d7b4c:	d007      	beq.n	d7b5e <memcmp+0x1a>
   d7b4e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7b52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7b56:	42a3      	cmp	r3, r4
   d7b58:	d0f7      	beq.n	d7b4a <memcmp+0x6>
   d7b5a:	1b18      	subs	r0, r3, r4
   d7b5c:	bd10      	pop	{r4, pc}
   d7b5e:	2000      	movs	r0, #0
   d7b60:	bd10      	pop	{r4, pc}

000d7b62 <memcpy>:
   d7b62:	b510      	push	{r4, lr}
   d7b64:	1e43      	subs	r3, r0, #1
   d7b66:	440a      	add	r2, r1
   d7b68:	4291      	cmp	r1, r2
   d7b6a:	d004      	beq.n	d7b76 <memcpy+0x14>
   d7b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7b70:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7b74:	e7f8      	b.n	d7b68 <memcpy+0x6>
   d7b76:	bd10      	pop	{r4, pc}

000d7b78 <memset>:
   d7b78:	4402      	add	r2, r0
   d7b7a:	4603      	mov	r3, r0
   d7b7c:	4293      	cmp	r3, r2
   d7b7e:	d002      	beq.n	d7b86 <memset+0xe>
   d7b80:	f803 1b01 	strb.w	r1, [r3], #1
   d7b84:	e7fa      	b.n	d7b7c <memset+0x4>
   d7b86:	4770      	bx	lr

000d7b88 <srand>:
   d7b88:	b538      	push	{r3, r4, r5, lr}
   d7b8a:	4b12      	ldr	r3, [pc, #72]	; (d7bd4 <srand+0x4c>)
   d7b8c:	681c      	ldr	r4, [r3, #0]
   d7b8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7b90:	4605      	mov	r5, r0
   d7b92:	b9d3      	cbnz	r3, d7bca <srand+0x42>
   d7b94:	2018      	movs	r0, #24
   d7b96:	f7fe f9d1 	bl	d5f3c <malloc>
   d7b9a:	f243 330e 	movw	r3, #13070	; 0x330e
   d7b9e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7ba0:	8003      	strh	r3, [r0, #0]
   d7ba2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7ba6:	8043      	strh	r3, [r0, #2]
   d7ba8:	f241 2334 	movw	r3, #4660	; 0x1234
   d7bac:	8083      	strh	r3, [r0, #4]
   d7bae:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7bb2:	80c3      	strh	r3, [r0, #6]
   d7bb4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7bb8:	8103      	strh	r3, [r0, #8]
   d7bba:	2305      	movs	r3, #5
   d7bbc:	8143      	strh	r3, [r0, #10]
   d7bbe:	230b      	movs	r3, #11
   d7bc0:	8183      	strh	r3, [r0, #12]
   d7bc2:	2201      	movs	r2, #1
   d7bc4:	2300      	movs	r3, #0
   d7bc6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7bca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7bcc:	2200      	movs	r2, #0
   d7bce:	611d      	str	r5, [r3, #16]
   d7bd0:	615a      	str	r2, [r3, #20]
   d7bd2:	bd38      	pop	{r3, r4, r5, pc}
   d7bd4:	2003dfec 	.word	0x2003dfec

000d7bd8 <strlen>:
   d7bd8:	4603      	mov	r3, r0
   d7bda:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7bde:	2a00      	cmp	r2, #0
   d7be0:	d1fb      	bne.n	d7bda <strlen+0x2>
   d7be2:	1a18      	subs	r0, r3, r0
   d7be4:	3801      	subs	r0, #1
   d7be6:	4770      	bx	lr

000d7be8 <dynalib_user>:
   d7be8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d7bf8:	0000 0000                                   ....

000d7bfc <_ZTVN8particle13__SPISettingsE>:
	...
   d7c04:	412d 000d                                   -A..

000d7c08 <_ZTV4File>:
	...
   d7c10:	40d3 000d 411f 000d 4107 000d 4101 000d     .@...A...A...A..
   d7c20:	40b7 000d 40e1 000d 40db 000d 40d5 000d     .@...@...@...@..
   d7c30:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d7c40:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d7c50:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d7c60:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   d7c70:	2545 3e64 4d00 7861 6f62 6974 2078 6554     E%d>.Maxbotix Te
   d7c80:	7473 5400 6d69 3a65 0020 202c 6944 7473     st.Time: ., Dist
   d7c90:	6e61 6563 6928 296e 203a 6400 7369 6174     ance(in): .dista
   d7ca0:	636e 2e65 7874 0074 6166 6c69 6465 7420     nce.txt.failed t
   d7cb0:	206f 706f 6e65 6320 7261 0064 706f 6e65     o open card.open
   d7cc0:	6e69 2067 6574 7473 742e 7478 6620 726f     ing test.txt for
   d7cd0:	7720 6972 6574 6620 6961 656c 0064 002c      write failed.,.

000d7ce0 <_ZTVN5spark13CellularClassE>:
	...
   d7ce8:	5fe3 000d 5fd9 000d 5fcf 000d 5f85 000d     ._..._..._..._..
   d7cf8:	5fc3 000d 5fb7 000d 5fab 000d 5fa3 000d     ._..._..._..._..
   d7d08:	5f99 000d 5f8f 000d 63f1 000d               ._..._...c..

000d7d14 <_ZTVN5spark13EthernetClassE>:
	...
   d7d1c:	608d 000d 6083 000d 6079 000d 606f 000d     .`...`..y`..o`..
   d7d2c:	6063 000d 6057 000d 604b 000d 6043 000d     c`..W`..K`..C`..
   d7d3c:	6039 000d 602f 000d 63f1 000d               9`../`...c..

000d7d48 <_ZTV7TwoWire>:
	...
   d7d50:	60ad 000d 60f7 000d 60cf 000d 60af 000d     .`...`...`...`..
   d7d60:	60d7 000d 60df 000d 60e7 000d 60ef 000d     .`...`...`...`..

000d7d70 <_ZTV9IPAddress>:
	...
   d7d78:	6141 000d 6131 000d 6133 000d 6162 6475     Aa..1a..3a..baud
   d7d88:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d7d98:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d7da8:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d7db8:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d7dc8:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d7dd8:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d7de8:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d7df8:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d7e08:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d7e18:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d7e28:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d7e38:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d7e48:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d7e58:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d7e64 <_ZTVN5spark9MeshClassE>:
	...
   d7e6c:	6283 000d 6279 000d 626f 000d 6265 000d     .b..yb..ob..eb..
   d7e7c:	6259 000d 624d 000d 6241 000d 6239 000d     Yb..Mb..Ab..9b..
   d7e8c:	622f 000d 6225 000d 63f1 000d               /b..%b...c..

000d7e98 <_ZTVN5spark12NetworkClassE>:
	...
   d7ea0:	6389 000d 6393 000d 639d 000d 63a7 000d     .c...c...c...c..
   d7eb0:	63b1 000d 63bd 000d 63c9 000d 63d5 000d     .c...c...c...c..
   d7ec0:	63dd 000d 63e7 000d 63f1 000d 616e 006e     .c...c...c..nan.
   d7ed0:	766f 0066 002e 6e69 0066 0000               ovf...inf...

000d7edc <_ZTV8SPIClass>:
	...
   d7ee4:	67f9 000d 67fb 000d                         .g...g..

000d7eec <_ZL14clock_divisors>:
   d7eec:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   d7efc:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d7f0c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d7f1c:	0000 0000                                   ....

000d7f20 <_ZTV11USARTSerial>:
	...
   d7f28:	6a1d 000d 6a6d 000d 6a7b 000d 64d1 000d     .j..mj..{j...d..
   d7f38:	6a31 000d 6a53 000d 6a3f 000d 6a67 000d     1j..Sj..?j..gj..
   d7f48:	6a1f 000d 6a23 000d                         .j..#j..

000d7f50 <_ZTV9USBSerial>:
	...
   d7f58:	6b59 000d 6ba9 000d 6bb7 000d 64d1 000d     Yk...k...k...d..
   d7f68:	6b95 000d 6b5b 000d 6b71 000d 6ba3 000d     .k..[k..qk...k..
   d7f78:	6b87 000d 6b55 000d                         .k..Uk..

000d7f80 <__sf_fake_stdin>:
	...

000d7fa0 <__sf_fake_stdout>:
	...

000d7fc0 <__sf_fake_stderr>:
	...
   d7fe0:	0043                                        C.

000d7fe2 <link_const_variable_data_end>:
	...

000d7fe4 <link_constructors_location>:
   d7fe4:	000d4419 	.word	0x000d4419
   d7fe8:	000d447d 	.word	0x000d447d
   d7fec:	000d4b65 	.word	0x000d4b65
   d7ff0:	000d5175 	.word	0x000d5175
   d7ff4:	000d5199 	.word	0x000d5199
   d7ff8:	000d519d 	.word	0x000d519d
   d7ffc:	000d54c1 	.word	0x000d54c1
   d8000:	000d54c5 	.word	0x000d54c5
   d8004:	000d54c9 	.word	0x000d54c9
   d8008:	000d54cd 	.word	0x000d54cd
   d800c:	000d54d1 	.word	0x000d54d1
   d8010:	000d5a0b 	.word	0x000d5a0b
   d8014:	000d5a0f 	.word	0x000d5a0f
   d8018:	000d5a13 	.word	0x000d5a13
   d801c:	000d5ab9 	.word	0x000d5ab9
   d8020:	000d5abd 	.word	0x000d5abd
   d8024:	000d5ac1 	.word	0x000d5ac1
   d8028:	000d5f75 	.word	0x000d5f75
   d802c:	000d5fed 	.word	0x000d5fed
   d8030:	000d6099 	.word	0x000d6099
   d8034:	000d6215 	.word	0x000d6215
   d8038:	000d6339 	.word	0x000d6339
   d803c:	000d64bd 	.word	0x000d64bd
   d8040:	000d67dd 	.word	0x000d67dd
   d8044:	000d6985 	.word	0x000d6985
   d8048:	000d6a09 	.word	0x000d6a09
   d804c:	000d6e45 	.word	0x000d6e45
   d8050:	000d6e99 	.word	0x000d6e99
   d8054:	000d6f5d 	.word	0x000d6f5d
   d8058:	000d6fe1 	.word	0x000d6fe1
   d805c:	000d7065 	.word	0x000d7065
