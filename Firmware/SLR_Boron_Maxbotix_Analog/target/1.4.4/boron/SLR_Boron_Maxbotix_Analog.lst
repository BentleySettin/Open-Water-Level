
/Users/pjb/Dropbox/Particle_Projects/Seaport_SLR_Observation/Seaport_Tide-SLR_Maxbotix_Arduino/Firmware/SLR_Boron_Maxbotix_Analog/target/1.4.4/boron/SLR_Boron_Maxbotix_Analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002190  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00016248  2**0
                  CONTENTS
  4 .data         0000006c  2003e428  000d61b0  0000e428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000035c  2003e494  2003e494  0001e494  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d621c  000d621c  0001621c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6244  000d6244  00016244  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c7ee8  00000000  00000000  00016248  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fb7d  00000000  00000000  000de130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001b51d  00000000  00000000  000edcad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000021d8  00000000  00000000  001091ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000040e8  00000000  00000000  0010b3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000338a8  00000000  00000000  0010f48a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025935  00000000  00000000  00142d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00100816  00000000  00000000  00168667  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c22c  00000000  00000000  00268e80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f001 febf 	bl	d5db4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f001 fec4 	bl	d5dca <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e428 	.word	0x2003e428
   d404c:	000d61b0 	.word	0x000d61b0
   d4050:	2003e494 	.word	0x2003e494
   d4054:	2003e494 	.word	0x2003e494
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 f803 	bl	d5068 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d61a8 	.word	0x000d61a8
   d4084:	000d616c 	.word	0x000d616c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b816 	b.w	d40b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f833 	bl	d40f8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 bfb5 	b.w	d5004 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 ba1b 	b.w	d44d4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 ba21 	b.w	d44e4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 ba1f 	b.w	d44e4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <setup>:

// SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(MANUAL);

void setup(void)
{
   d40b8:	b508      	push	{r3, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d40ba:	480c      	ldr	r0, [pc, #48]	; (d40ec <setup+0x34>)
   d40bc:	2300      	movs	r3, #0
   d40be:	4619      	mov	r1, r3
   d40c0:	461a      	mov	r2, r3
   d40c2:	6840      	ldr	r0, [r0, #4]
   d40c4:	f000 f9de 	bl	d4484 <network_off>
  Cellular.off();

  delay(5000); // to see response from begin command
   d40c8:	f241 3088 	movw	r0, #5000	; 0x1388
   d40cc:	f000 fa12 	bl	d44f4 <delay>

  Serial.begin(9600);
   d40d0:	f000 ff54 	bl	d4f7c <_Z16_fetch_usbserialv>
   d40d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40d8:	f000 ff44 	bl	d4f64 <_ZN9USBSerial5beginEl>
  Serial.println("Maxbotix Test");
   d40dc:	f000 ff4e 	bl	d4f7c <_Z16_fetch_usbserialv>
   d40e0:	4903      	ldr	r1, [pc, #12]	; (d40f0 <setup+0x38>)

}
   d40e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Cellular.off();

  delay(5000); // to see response from begin command

  Serial.begin(9600);
  Serial.println("Maxbotix Test");
   d40e6:	f000 bcf0 	b.w	d4aca <_ZN5Print7printlnEPKc>
   d40ea:	bf00      	nop
   d40ec:	2003e4a4 	.word	0x2003e4a4
   d40f0:	000d5e50 	.word	0x000d5e50
   d40f4:	00000000 	.word	0x00000000

000d40f8 <loop>:

}

void loop(void)
{
   d40f8:	b510      	push	{r4, lr}
  
  Serial.print("Distance(in): ");
   d40fa:	f000 ff3f 	bl	d4f7c <_Z16_fetch_usbserialv>
   d40fe:	4918      	ldr	r1, [pc, #96]	; (d4160 <loop+0x68>)
   d4100:	f000 fcd0 	bl	d4aa4 <_ZN5Print5printEPKc>
  //Counts * (V range/count range) * (Inch range/V range)
  Serial.print(analogRead(V_ultraS)*(3.3/2048)*(254/3.3)); 
   d4104:	f000 ff3a 	bl	d4f7c <_Z16_fetch_usbserialv>
   d4108:	4b16      	ldr	r3, [pc, #88]	; (d4164 <loop+0x6c>)
   d410a:	4604      	mov	r4, r0
   d410c:	8818      	ldrh	r0, [r3, #0]
   d410e:	f000 ffe9 	bl	d50e4 <analogRead>
   d4112:	f001 fae3 	bl	d56dc <__aeabi_i2d>
   d4116:	a30e      	add	r3, pc, #56	; (adr r3, d4150 <loop+0x58>)
   d4118:	e9d3 2300 	ldrd	r2, r3, [r3]
   d411c:	f001 fb44 	bl	d57a8 <__aeabi_dmul>
   d4120:	a30d      	add	r3, pc, #52	; (adr r3, d4158 <loop+0x60>)
   d4122:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4126:	f001 fb3f 	bl	d57a8 <__aeabi_dmul>
   d412a:	ec41 0b10 	vmov	d0, r0, r1
   d412e:	2102      	movs	r1, #2
   d4130:	4620      	mov	r0, r4
   d4132:	f000 fdd7 	bl	d4ce4 <_ZN5Print5printEdi>
//   float distanceFeet = distanceInches / 12.0;

//   Serial.print(", Distance(ft): ");
//   Serial.print(distanceFeet, 2);

  Serial.println();
   d4136:	f000 ff21 	bl	d4f7c <_Z16_fetch_usbserialv>
   d413a:	f000 fcba 	bl	d4ab2 <_ZN5Print7printlnEv>

  delay(1000);
   d413e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   d4142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//   Serial.print(", Distance(ft): ");
//   Serial.print(distanceFeet, 2);

  Serial.println();

  delay(1000);
   d4146:	f000 b9d5 	b.w	d44f4 <delay>
   d414a:	bf00      	nop
   d414c:	f3af 8000 	nop.w
   d4150:	66666666 	.word	0x66666666
   d4154:	3f5a6666 	.word	0x3f5a6666
   d4158:	83e0f83e 	.word	0x83e0f83e
   d415c:	40533e0f 	.word	0x40533e0f
   d4160:	000d5e5e 	.word	0x000d5e5e
   d4164:	2003e428 	.word	0x2003e428

000d4168 <_GLOBAL__sub_I_V_ultraS>:
}
   d4168:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d416a:	f000 f847 	bl	d41fc <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d416e:	4b06      	ldr	r3, [pc, #24]	; (d4188 <_GLOBAL__sub_I_V_ultraS+0x20>)
   d4170:	2200      	movs	r2, #0
   d4172:	701a      	strb	r2, [r3, #0]
   d4174:	805a      	strh	r2, [r3, #2]
   d4176:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d417a:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d417c:	2003      	movs	r0, #3
   d417e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4182:	f000 b92b 	b.w	d43dc <set_system_mode>
   d4186:	bf00      	nop
   d4188:	2003e498 	.word	0x2003e498

000d418c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d418c:	b508      	push	{r3, lr}
   d418e:	4b02      	ldr	r3, [pc, #8]	; (d4198 <os_thread_is_current+0xc>)
   d4190:	681b      	ldr	r3, [r3, #0]
   d4192:	689b      	ldr	r3, [r3, #8]
   d4194:	9301      	str	r3, [sp, #4]
   d4196:	bd08      	pop	{r3, pc}
   d4198:	00030248 	.word	0x00030248

000d419c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d419c:	b508      	push	{r3, lr}
   d419e:	4b02      	ldr	r3, [pc, #8]	; (d41a8 <os_thread_join+0xc>)
   d41a0:	681b      	ldr	r3, [r3, #0]
   d41a2:	691b      	ldr	r3, [r3, #16]
   d41a4:	9301      	str	r3, [sp, #4]
   d41a6:	bd08      	pop	{r3, pc}
   d41a8:	00030248 	.word	0x00030248

000d41ac <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d41ac:	b508      	push	{r3, lr}
   d41ae:	4b02      	ldr	r3, [pc, #8]	; (d41b8 <os_thread_cleanup+0xc>)
   d41b0:	681b      	ldr	r3, [r3, #0]
   d41b2:	695b      	ldr	r3, [r3, #20]
   d41b4:	9301      	str	r3, [sp, #4]
   d41b6:	bd08      	pop	{r3, pc}
   d41b8:	00030248 	.word	0x00030248

000d41bc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d41bc:	b508      	push	{r3, lr}
   d41be:	4b02      	ldr	r3, [pc, #8]	; (d41c8 <os_mutex_create+0xc>)
   d41c0:	681b      	ldr	r3, [r3, #0]
   d41c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d41c4:	9301      	str	r3, [sp, #4]
   d41c6:	bd08      	pop	{r3, pc}
   d41c8:	00030248 	.word	0x00030248

000d41cc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d41cc:	b508      	push	{r3, lr}
   d41ce:	4b02      	ldr	r3, [pc, #8]	; (d41d8 <os_mutex_recursive_create+0xc>)
   d41d0:	681b      	ldr	r3, [r3, #0]
   d41d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d41d4:	9301      	str	r3, [sp, #4]
   d41d6:	bd08      	pop	{r3, pc}
   d41d8:	00030248 	.word	0x00030248

000d41dc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d41dc:	b508      	push	{r3, lr}
   d41de:	4b02      	ldr	r3, [pc, #8]	; (d41e8 <HAL_RNG_GetRandomNumber+0xc>)
   d41e0:	681b      	ldr	r3, [r3, #0]
   d41e2:	685b      	ldr	r3, [r3, #4]
   d41e4:	9301      	str	r3, [sp, #4]
   d41e6:	bd08      	pop	{r3, pc}
   d41e8:	00030218 	.word	0x00030218

000d41ec <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d41ec:	b508      	push	{r3, lr}
   d41ee:	4b02      	ldr	r3, [pc, #8]	; (d41f8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d41f0:	681b      	ldr	r3, [r3, #0]
   d41f2:	695b      	ldr	r3, [r3, #20]
   d41f4:	9301      	str	r3, [sp, #4]
   d41f6:	bd08      	pop	{r3, pc}
   d41f8:	00030218 	.word	0x00030218

000d41fc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d41fc:	b508      	push	{r3, lr}
   d41fe:	4b02      	ldr	r3, [pc, #8]	; (d4208 <HAL_Pin_Map+0xc>)
   d4200:	681b      	ldr	r3, [r3, #0]
   d4202:	681b      	ldr	r3, [r3, #0]
   d4204:	9301      	str	r3, [sp, #4]
   d4206:	bd08      	pop	{r3, pc}
   d4208:	0003022c 	.word	0x0003022c

000d420c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d420c:	b508      	push	{r3, lr}
   d420e:	4b02      	ldr	r3, [pc, #8]	; (d4218 <HAL_Validate_Pin_Function+0xc>)
   d4210:	681b      	ldr	r3, [r3, #0]
   d4212:	685b      	ldr	r3, [r3, #4]
   d4214:	9301      	str	r3, [sp, #4]
   d4216:	bd08      	pop	{r3, pc}
   d4218:	0003022c 	.word	0x0003022c

000d421c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d421c:	b508      	push	{r3, lr}
   d421e:	4b02      	ldr	r3, [pc, #8]	; (d4228 <HAL_ADC_Read+0xc>)
   d4220:	681b      	ldr	r3, [r3, #0]
   d4222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4224:	9301      	str	r3, [sp, #4]
   d4226:	bd08      	pop	{r3, pc}
   d4228:	0003022c 	.word	0x0003022c

000d422c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d422c:	b508      	push	{r3, lr}
   d422e:	4b02      	ldr	r3, [pc, #8]	; (d4238 <HAL_I2C_Write_Data+0xc>)
   d4230:	681b      	ldr	r3, [r3, #0]
   d4232:	6a1b      	ldr	r3, [r3, #32]
   d4234:	9301      	str	r3, [sp, #4]
   d4236:	bd08      	pop	{r3, pc}
   d4238:	00030228 	.word	0x00030228

000d423c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d423c:	b508      	push	{r3, lr}
   d423e:	4b02      	ldr	r3, [pc, #8]	; (d4248 <HAL_I2C_Available_Data+0xc>)
   d4240:	681b      	ldr	r3, [r3, #0]
   d4242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4244:	9301      	str	r3, [sp, #4]
   d4246:	bd08      	pop	{r3, pc}
   d4248:	00030228 	.word	0x00030228

000d424c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d424c:	b508      	push	{r3, lr}
   d424e:	4b02      	ldr	r3, [pc, #8]	; (d4258 <HAL_I2C_Read_Data+0xc>)
   d4250:	681b      	ldr	r3, [r3, #0]
   d4252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4254:	9301      	str	r3, [sp, #4]
   d4256:	bd08      	pop	{r3, pc}
   d4258:	00030228 	.word	0x00030228

000d425c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d425c:	b508      	push	{r3, lr}
   d425e:	4b02      	ldr	r3, [pc, #8]	; (d4268 <HAL_I2C_Peek_Data+0xc>)
   d4260:	681b      	ldr	r3, [r3, #0]
   d4262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4264:	9301      	str	r3, [sp, #4]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	00030228 	.word	0x00030228

000d426c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d426c:	b508      	push	{r3, lr}
   d426e:	4b02      	ldr	r3, [pc, #8]	; (d4278 <HAL_I2C_Flush_Data+0xc>)
   d4270:	681b      	ldr	r3, [r3, #0]
   d4272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4274:	9301      	str	r3, [sp, #4]
   d4276:	bd08      	pop	{r3, pc}
   d4278:	00030228 	.word	0x00030228

000d427c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d427c:	b508      	push	{r3, lr}
   d427e:	4b02      	ldr	r3, [pc, #8]	; (d4288 <HAL_I2C_Is_Enabled+0xc>)
   d4280:	681b      	ldr	r3, [r3, #0]
   d4282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4284:	9301      	str	r3, [sp, #4]
   d4286:	bd08      	pop	{r3, pc}
   d4288:	00030228 	.word	0x00030228

000d428c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d428c:	b508      	push	{r3, lr}
   d428e:	4b02      	ldr	r3, [pc, #8]	; (d4298 <HAL_I2C_Init+0xc>)
   d4290:	681b      	ldr	r3, [r3, #0]
   d4292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4294:	9301      	str	r3, [sp, #4]
   d4296:	bd08      	pop	{r3, pc}
   d4298:	00030228 	.word	0x00030228

000d429c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d429c:	b508      	push	{r3, lr}
   d429e:	4b02      	ldr	r3, [pc, #8]	; (d42a8 <inet_inet_ntop+0xc>)
   d42a0:	681b      	ldr	r3, [r3, #0]
   d42a2:	695b      	ldr	r3, [r3, #20]
   d42a4:	9301      	str	r3, [sp, #4]
   d42a6:	bd08      	pop	{r3, pc}
   d42a8:	00030264 	.word	0x00030264

000d42ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d42ac:	b508      	push	{r3, lr}
   d42ae:	4b02      	ldr	r3, [pc, #8]	; (d42b8 <netdb_freeaddrinfo+0xc>)
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	689b      	ldr	r3, [r3, #8]
   d42b4:	9301      	str	r3, [sp, #4]
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	00030268 	.word	0x00030268

000d42bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b02      	ldr	r3, [pc, #8]	; (d42c8 <netdb_getaddrinfo+0xc>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	68db      	ldr	r3, [r3, #12]
   d42c4:	9301      	str	r3, [sp, #4]
   d42c6:	bd08      	pop	{r3, pc}
   d42c8:	00030268 	.word	0x00030268

000d42cc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d42cc:	b508      	push	{r3, lr}
   d42ce:	4b02      	ldr	r3, [pc, #8]	; (d42d8 <HAL_SPI_Init+0xc>)
   d42d0:	681b      	ldr	r3, [r3, #0]
   d42d2:	69db      	ldr	r3, [r3, #28]
   d42d4:	9301      	str	r3, [sp, #4]
   d42d6:	bd08      	pop	{r3, pc}
   d42d8:	00030230 	.word	0x00030230

000d42dc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <HAL_SPI_Is_Enabled+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	6a1b      	ldr	r3, [r3, #32]
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	00030230 	.word	0x00030230

000d42ec <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <HAL_USART_Init+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	681b      	ldr	r3, [r3, #0]
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	0003023c 	.word	0x0003023c

000d42fc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <HAL_USART_Write_Data+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	68db      	ldr	r3, [r3, #12]
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	0003023c 	.word	0x0003023c

000d430c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <HAL_USART_Available_Data+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	691b      	ldr	r3, [r3, #16]
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	0003023c 	.word	0x0003023c

000d431c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <HAL_USART_Read_Data+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	695b      	ldr	r3, [r3, #20]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	0003023c 	.word	0x0003023c

000d432c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <HAL_USART_Peek_Data+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	699b      	ldr	r3, [r3, #24]
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	0003023c 	.word	0x0003023c

000d433c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <HAL_USART_Flush_Data+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	69db      	ldr	r3, [r3, #28]
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	0003023c 	.word	0x0003023c

000d434c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <HAL_USART_Is_Enabled+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	6a1b      	ldr	r3, [r3, #32]
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	0003023c 	.word	0x0003023c

000d435c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <HAL_USART_Available_Data_For_Write+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	0003023c 	.word	0x0003023c

000d436c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <HAL_USB_USART_Init+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	681b      	ldr	r3, [r3, #0]
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	0003024c 	.word	0x0003024c

000d437c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <HAL_USB_USART_Begin+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	685b      	ldr	r3, [r3, #4]
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	0003024c 	.word	0x0003024c

000d438c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <HAL_USB_USART_Available_Data+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	691b      	ldr	r3, [r3, #16]
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	0003024c 	.word	0x0003024c

000d439c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	695b      	ldr	r3, [r3, #20]
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	0003024c 	.word	0x0003024c

000d43ac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <HAL_USB_USART_Receive_Data+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	699b      	ldr	r3, [r3, #24]
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	0003024c 	.word	0x0003024c

000d43bc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <HAL_USB_USART_Send_Data+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	69db      	ldr	r3, [r3, #28]
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	0003024c 	.word	0x0003024c

000d43cc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <HAL_USB_USART_Flush_Data+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	6a1b      	ldr	r3, [r3, #32]
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	0003024c 	.word	0x0003024c

000d43dc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <set_system_mode+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	685b      	ldr	r3, [r3, #4]
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	00030220 	.word	0x00030220

000d43ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <system_delay_ms+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	695b      	ldr	r3, [r3, #20]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	00030220 	.word	0x00030220

000d43fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b03      	ldr	r3, [pc, #12]	; (d440c <system_ctrl_set_app_request_handler+0x10>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4406:	9301      	str	r3, [sp, #4]
   d4408:	bd08      	pop	{r3, pc}
   d440a:	0000      	.short	0x0000
   d440c:	00030220 	.word	0x00030220

000d4410 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b03      	ldr	r3, [pc, #12]	; (d4420 <system_ctrl_set_result+0x10>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d441a:	9301      	str	r3, [sp, #4]
   d441c:	bd08      	pop	{r3, pc}
   d441e:	0000      	.short	0x0000
   d4420:	00030220 	.word	0x00030220

000d4424 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	00030244 	.word	0x00030244

000d4434 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <network_connect+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	685b      	ldr	r3, [r3, #4]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	00030240 	.word	0x00030240

000d4444 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <network_connecting+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	689b      	ldr	r3, [r3, #8]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	00030240 	.word	0x00030240

000d4454 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <network_disconnect+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	68db      	ldr	r3, [r3, #12]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030240 	.word	0x00030240

000d4464 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <network_ready+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	691b      	ldr	r3, [r3, #16]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030240 	.word	0x00030240

000d4474 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <network_on+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	695b      	ldr	r3, [r3, #20]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030240 	.word	0x00030240

000d4484 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <network_off+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	699b      	ldr	r3, [r3, #24]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030240 	.word	0x00030240

000d4494 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <network_listen+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	69db      	ldr	r3, [r3, #28]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030240 	.word	0x00030240

000d44a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <network_listening+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	6a1b      	ldr	r3, [r3, #32]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030240 	.word	0x00030240

000d44b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <network_set_listen_timeout+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030240 	.word	0x00030240

000d44c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <network_get_listen_timeout+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030240 	.word	0x00030240

000d44d4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <malloc+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	681b      	ldr	r3, [r3, #0]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	0003021c 	.word	0x0003021c

000d44e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <free+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	685b      	ldr	r3, [r3, #4]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	0003021c 	.word	0x0003021c

000d44f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d44f4:	2100      	movs	r1, #0
   d44f6:	f7ff bf79 	b.w	d43ec <system_delay_ms>
	...

000d44fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d44fc:	4802      	ldr	r0, [pc, #8]	; (d4508 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d44fe:	2300      	movs	r3, #0
   d4500:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4502:	f7ff be63 	b.w	d41cc <os_mutex_recursive_create>
   d4506:	bf00      	nop
   d4508:	2003e4a0 	.word	0x2003e4a0

000d450c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d450c:	2200      	movs	r2, #0
   d450e:	4611      	mov	r1, r2
   d4510:	6840      	ldr	r0, [r0, #4]
   d4512:	f7ff bfa7 	b.w	d4464 <network_ready>

000d4516 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4516:	2200      	movs	r2, #0
   d4518:	4611      	mov	r1, r2
   d451a:	6840      	ldr	r0, [r0, #4]
   d451c:	f7ff bfc2 	b.w	d44a4 <network_listening>

000d4520 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4520:	2200      	movs	r2, #0
   d4522:	4611      	mov	r1, r2
   d4524:	6840      	ldr	r0, [r0, #4]
   d4526:	f7ff bfcd 	b.w	d44c4 <network_get_listen_timeout>

000d452a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d452a:	2200      	movs	r2, #0
   d452c:	6840      	ldr	r0, [r0, #4]
   d452e:	f7ff bfc1 	b.w	d44b4 <network_set_listen_timeout>

000d4532 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4532:	2200      	movs	r2, #0
   d4534:	f081 0101 	eor.w	r1, r1, #1
   d4538:	6840      	ldr	r0, [r0, #4]
   d453a:	f7ff bfab 	b.w	d4494 <network_listen>

000d453e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d453e:	2300      	movs	r3, #0
   d4540:	461a      	mov	r2, r3
   d4542:	4619      	mov	r1, r3
   d4544:	6840      	ldr	r0, [r0, #4]
   d4546:	f7ff bf9d 	b.w	d4484 <network_off>

000d454a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d454a:	2300      	movs	r3, #0
   d454c:	461a      	mov	r2, r3
   d454e:	4619      	mov	r1, r3
   d4550:	6840      	ldr	r0, [r0, #4]
   d4552:	f7ff bf8f 	b.w	d4474 <network_on>

000d4556 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4556:	2200      	movs	r2, #0
   d4558:	4611      	mov	r1, r2
   d455a:	6840      	ldr	r0, [r0, #4]
   d455c:	f7ff bf72 	b.w	d4444 <network_connecting>

000d4560 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4560:	2200      	movs	r2, #0
   d4562:	2102      	movs	r1, #2
   d4564:	6840      	ldr	r0, [r0, #4]
   d4566:	f7ff bf75 	b.w	d4454 <network_disconnect>

000d456a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d456a:	2300      	movs	r3, #0
   d456c:	461a      	mov	r2, r3
   d456e:	6840      	ldr	r0, [r0, #4]
   d4570:	f7ff bf60 	b.w	d4434 <network_connect>

000d4574 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4574:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4576:	4c08      	ldr	r4, [pc, #32]	; (d4598 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4578:	2528      	movs	r5, #40	; 0x28
   d457a:	462a      	mov	r2, r5
   d457c:	2100      	movs	r1, #0
   d457e:	4620      	mov	r0, r4
   d4580:	f001 fc23 	bl	d5dca <memset>
        cid = -1;
   d4584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4588:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d458a:	4b04      	ldr	r3, [pc, #16]	; (d459c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d458c:	8025      	strh	r5, [r4, #0]
   d458e:	2204      	movs	r2, #4
   d4590:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4592:	4a03      	ldr	r2, [pc, #12]	; (d45a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4594:	601a      	str	r2, [r3, #0]
   d4596:	bd38      	pop	{r3, r4, r5, pc}
   d4598:	2003e4ac 	.word	0x2003e4ac
   d459c:	2003e4a4 	.word	0x2003e4a4
   d45a0:	000d5e78 	.word	0x000d5e78

000d45a4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d45a4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d45a6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d45a8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d45aa:	b113      	cbz	r3, d45b2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d45ac:	2203      	movs	r2, #3
   d45ae:	4601      	mov	r1, r0
   d45b0:	4798      	blx	r3
    }
   d45b2:	4620      	mov	r0, r4
   d45b4:	bd10      	pop	{r4, pc}

000d45b6 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d45b6:	2200      	movs	r2, #0
   d45b8:	4611      	mov	r1, r2
   d45ba:	6840      	ldr	r0, [r0, #4]
   d45bc:	f7ff bf72 	b.w	d44a4 <network_listening>

000d45c0 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d45c0:	2200      	movs	r2, #0
   d45c2:	4611      	mov	r1, r2
   d45c4:	6840      	ldr	r0, [r0, #4]
   d45c6:	f7ff bf7d 	b.w	d44c4 <network_get_listen_timeout>

000d45ca <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d45ca:	2200      	movs	r2, #0
   d45cc:	6840      	ldr	r0, [r0, #4]
   d45ce:	f7ff bf71 	b.w	d44b4 <network_set_listen_timeout>

000d45d2 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d45d2:	2200      	movs	r2, #0
   d45d4:	f081 0101 	eor.w	r1, r1, #1
   d45d8:	6840      	ldr	r0, [r0, #4]
   d45da:	f7ff bf5b 	b.w	d4494 <network_listen>

000d45de <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d45de:	2300      	movs	r3, #0
   d45e0:	461a      	mov	r2, r3
   d45e2:	4619      	mov	r1, r3
   d45e4:	6840      	ldr	r0, [r0, #4]
   d45e6:	f7ff bf4d 	b.w	d4484 <network_off>

000d45ea <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d45ea:	2300      	movs	r3, #0
   d45ec:	461a      	mov	r2, r3
   d45ee:	4619      	mov	r1, r3
   d45f0:	6840      	ldr	r0, [r0, #4]
   d45f2:	f7ff bf3f 	b.w	d4474 <network_on>

000d45f6 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d45f6:	2200      	movs	r2, #0
   d45f8:	4611      	mov	r1, r2
   d45fa:	6840      	ldr	r0, [r0, #4]
   d45fc:	f7ff bf32 	b.w	d4464 <network_ready>

000d4600 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4600:	2200      	movs	r2, #0
   d4602:	4611      	mov	r1, r2
   d4604:	6840      	ldr	r0, [r0, #4]
   d4606:	f7ff bf1d 	b.w	d4444 <network_connecting>

000d460a <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d460a:	2200      	movs	r2, #0
   d460c:	2102      	movs	r1, #2
   d460e:	6840      	ldr	r0, [r0, #4]
   d4610:	f7ff bf20 	b.w	d4454 <network_disconnect>

000d4614 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4614:	2300      	movs	r3, #0
   d4616:	461a      	mov	r2, r3
   d4618:	6840      	ldr	r0, [r0, #4]
   d461a:	f7ff bf0b 	b.w	d4434 <network_connect>
	...

000d4620 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4620:	4b02      	ldr	r3, [pc, #8]	; (d462c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4622:	2203      	movs	r2, #3
   d4624:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4626:	4a02      	ldr	r2, [pc, #8]	; (d4630 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4628:	601a      	str	r2, [r3, #0]
   d462a:	4770      	bx	lr
   d462c:	2003e4d4 	.word	0x2003e4d4
   d4630:	000d5eac 	.word	0x000d5eac

000d4634 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4634:	4770      	bx	lr

000d4636 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4638:	4606      	mov	r6, r0
   d463a:	4615      	mov	r5, r2
   d463c:	460c      	mov	r4, r1
   d463e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4640:	42bc      	cmp	r4, r7
   d4642:	d006      	beq.n	d4652 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4644:	6833      	ldr	r3, [r6, #0]
   d4646:	f814 1b01 	ldrb.w	r1, [r4], #1
   d464a:	689b      	ldr	r3, [r3, #8]
   d464c:	4630      	mov	r0, r6
   d464e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4650:	e7f6      	b.n	d4640 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4652:	4628      	mov	r0, r5
   d4654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4656 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4656:	2200      	movs	r2, #0
   d4658:	7c00      	ldrb	r0, [r0, #16]
   d465a:	f7ff bde7 	b.w	d422c <HAL_I2C_Write_Data>

000d465e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d465e:	2100      	movs	r1, #0
   d4660:	7c00      	ldrb	r0, [r0, #16]
   d4662:	f7ff bdeb 	b.w	d423c <HAL_I2C_Available_Data>

000d4666 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4666:	2100      	movs	r1, #0
   d4668:	7c00      	ldrb	r0, [r0, #16]
   d466a:	f7ff bdef 	b.w	d424c <HAL_I2C_Read_Data>

000d466e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d466e:	2100      	movs	r1, #0
   d4670:	7c00      	ldrb	r0, [r0, #16]
   d4672:	f7ff bdf3 	b.w	d425c <HAL_I2C_Peek_Data>

000d4676 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4676:	2100      	movs	r1, #0
   d4678:	7c00      	ldrb	r0, [r0, #16]
   d467a:	f7ff bdf7 	b.w	d426c <HAL_I2C_Flush_Data>

000d467e <_ZN7TwoWireD0Ev>:
   d467e:	b510      	push	{r4, lr}
   d4680:	2114      	movs	r1, #20
   d4682:	4604      	mov	r4, r0
   d4684:	f000 fd8d 	bl	d51a2 <_ZdlPvj>
   d4688:	4620      	mov	r0, r4
   d468a:	bd10      	pop	{r4, pc}

000d468c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d468c:	b510      	push	{r4, lr}
   d468e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4694:	4608      	mov	r0, r1
   d4696:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4698:	2100      	movs	r1, #0
   d469a:	4b04      	ldr	r3, [pc, #16]	; (d46ac <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d469c:	7420      	strb	r0, [r4, #16]
   d469e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d46a0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d46a2:	f7ff fdf3 	bl	d428c <HAL_I2C_Init>

}
   d46a6:	4620      	mov	r0, r4
   d46a8:	bd10      	pop	{r4, pc}
   d46aa:	bf00      	nop
   d46ac:	000d5ee0 	.word	0x000d5ee0

000d46b0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d46b0:	2100      	movs	r1, #0
   d46b2:	7c00      	ldrb	r0, [r0, #16]
   d46b4:	f7ff bde2 	b.w	d427c <HAL_I2C_Is_Enabled>

000d46b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d46b8:	4770      	bx	lr

000d46ba <_ZN9IPAddressD0Ev>:
   d46ba:	b510      	push	{r4, lr}
   d46bc:	2118      	movs	r1, #24
   d46be:	4604      	mov	r4, r0
   d46c0:	f000 fd6f 	bl	d51a2 <_ZdlPvj>
   d46c4:	4620      	mov	r0, r4
   d46c6:	bd10      	pop	{r4, pc}

000d46c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d46c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d46ca:	7d03      	ldrb	r3, [r0, #20]
   d46cc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d46ce:	b08d      	sub	sp, #52	; 0x34
   d46d0:	460e      	mov	r6, r1
   d46d2:	f100 0704 	add.w	r7, r0, #4
   d46d6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d46da:	d002      	beq.n	d46e2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d46dc:	f100 0508 	add.w	r5, r0, #8
   d46e0:	e018      	b.n	d4714 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d46e2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d46e4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d46e6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d46ea:	232f      	movs	r3, #47	; 0x2f
   d46ec:	462a      	mov	r2, r5
   d46ee:	200a      	movs	r0, #10
   d46f0:	f7ff fdd4 	bl	d429c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d46f4:	4628      	mov	r0, r5
   d46f6:	f001 fb99 	bl	d5e2c <strlen>
   d46fa:	6833      	ldr	r3, [r6, #0]
   d46fc:	4602      	mov	r2, r0
   d46fe:	68db      	ldr	r3, [r3, #12]
   d4700:	4629      	mov	r1, r5
   d4702:	4630      	mov	r0, r6
   d4704:	4798      	blx	r3
   d4706:	e00f      	b.n	d4728 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4708:	b124      	cbz	r4, d4714 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d470a:	212e      	movs	r1, #46	; 0x2e
   d470c:	4630      	mov	r0, r6
   d470e:	f000 f9cd 	bl	d4aac <_ZN5Print5printEc>
   d4712:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4714:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4718:	220a      	movs	r2, #10
   d471a:	4630      	mov	r0, r6
   d471c:	f000 fa0c 	bl	d4b38 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4720:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4722:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4724:	d1f0      	bne.n	d4708 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4726:	4620      	mov	r0, r4
    }
    return n;
}
   d4728:	b00d      	add	sp, #52	; 0x34
   d472a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d472c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d472c:	b510      	push	{r4, lr}
   d472e:	4b05      	ldr	r3, [pc, #20]	; (d4744 <_ZN9IPAddressC1Ev+0x18>)
   d4730:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4732:	2211      	movs	r2, #17
   d4734:	f840 3b04 	str.w	r3, [r0], #4
   d4738:	2100      	movs	r1, #0
   d473a:	f001 fb46 	bl	d5dca <memset>
{
    clear();
}
   d473e:	4620      	mov	r0, r4
   d4740:	bd10      	pop	{r4, pc}
   d4742:	bf00      	nop
   d4744:	000d5f08 	.word	0x000d5f08

000d4748 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4748:	4603      	mov	r3, r0
   d474a:	4a07      	ldr	r2, [pc, #28]	; (d4768 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d474c:	b510      	push	{r4, lr}
   d474e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4752:	f101 0210 	add.w	r2, r1, #16
   d4756:	f851 4b04 	ldr.w	r4, [r1], #4
   d475a:	f843 4b04 	str.w	r4, [r3], #4
   d475e:	4291      	cmp	r1, r2
   d4760:	d1f9      	bne.n	d4756 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4762:	780a      	ldrb	r2, [r1, #0]
   d4764:	701a      	strb	r2, [r3, #0]
}
   d4766:	bd10      	pop	{r4, pc}
   d4768:	000d5f08 	.word	0x000d5f08

000d476c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d476c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d476e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4772:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4776:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d477a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d477e:	2304      	movs	r3, #4
   d4780:	6041      	str	r1, [r0, #4]
   d4782:	7503      	strb	r3, [r0, #20]
   d4784:	bd10      	pop	{r4, pc}

000d4786 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4786:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4788:	780d      	ldrb	r5, [r1, #0]
   d478a:	788b      	ldrb	r3, [r1, #2]
   d478c:	784a      	ldrb	r2, [r1, #1]
   d478e:	78c9      	ldrb	r1, [r1, #3]
   d4790:	9100      	str	r1, [sp, #0]
   d4792:	4629      	mov	r1, r5
   d4794:	f7ff ffea 	bl	d476c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4798:	b003      	add	sp, #12
   d479a:	bd30      	pop	{r4, r5, pc}

000d479c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d479c:	4b01      	ldr	r3, [pc, #4]	; (d47a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d479e:	4a02      	ldr	r2, [pc, #8]	; (d47a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d47a0:	601a      	str	r2, [r3, #0]
   d47a2:	4770      	bx	lr
   d47a4:	2003e4dc 	.word	0x2003e4dc
   d47a8:	000d5f87 	.word	0x000d5f87

000d47ac <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d47ac:	2200      	movs	r2, #0
   d47ae:	4611      	mov	r1, r2
   d47b0:	6840      	ldr	r0, [r0, #4]
   d47b2:	f7ff be77 	b.w	d44a4 <network_listening>

000d47b6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d47b6:	2200      	movs	r2, #0
   d47b8:	4611      	mov	r1, r2
   d47ba:	6840      	ldr	r0, [r0, #4]
   d47bc:	f7ff be82 	b.w	d44c4 <network_get_listen_timeout>

000d47c0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d47c0:	2200      	movs	r2, #0
   d47c2:	6840      	ldr	r0, [r0, #4]
   d47c4:	f7ff be76 	b.w	d44b4 <network_set_listen_timeout>

000d47c8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d47c8:	2200      	movs	r2, #0
   d47ca:	f081 0101 	eor.w	r1, r1, #1
   d47ce:	6840      	ldr	r0, [r0, #4]
   d47d0:	f7ff be60 	b.w	d4494 <network_listen>

000d47d4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d47d4:	2300      	movs	r3, #0
   d47d6:	461a      	mov	r2, r3
   d47d8:	2101      	movs	r1, #1
   d47da:	6840      	ldr	r0, [r0, #4]
   d47dc:	f7ff be52 	b.w	d4484 <network_off>

000d47e0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d47e0:	2300      	movs	r3, #0
   d47e2:	461a      	mov	r2, r3
   d47e4:	4619      	mov	r1, r3
   d47e6:	6840      	ldr	r0, [r0, #4]
   d47e8:	f7ff be44 	b.w	d4474 <network_on>

000d47ec <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d47ec:	2200      	movs	r2, #0
   d47ee:	4611      	mov	r1, r2
   d47f0:	6840      	ldr	r0, [r0, #4]
   d47f2:	f7ff be37 	b.w	d4464 <network_ready>

000d47f6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d47f6:	2200      	movs	r2, #0
   d47f8:	4611      	mov	r1, r2
   d47fa:	6840      	ldr	r0, [r0, #4]
   d47fc:	f7ff be22 	b.w	d4444 <network_connecting>

000d4800 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4800:	2200      	movs	r2, #0
   d4802:	2102      	movs	r1, #2
   d4804:	6840      	ldr	r0, [r0, #4]
   d4806:	f7ff be25 	b.w	d4454 <network_disconnect>

000d480a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d480a:	2300      	movs	r3, #0
   d480c:	461a      	mov	r2, r3
   d480e:	6840      	ldr	r0, [r0, #4]
   d4810:	f7ff be10 	b.w	d4434 <network_connect>

000d4814 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4814:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4816:	4605      	mov	r5, r0
   d4818:	b188      	cbz	r0, d483e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d481a:	6804      	ldr	r4, [r0, #0]
   d481c:	b14c      	cbz	r4, d4832 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d481e:	68a3      	ldr	r3, [r4, #8]
   d4820:	b11b      	cbz	r3, d482a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4822:	2203      	movs	r2, #3
   d4824:	4621      	mov	r1, r4
   d4826:	4620      	mov	r0, r4
   d4828:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d482a:	2110      	movs	r1, #16
   d482c:	4620      	mov	r0, r4
   d482e:	f000 fcb8 	bl	d51a2 <_ZdlPvj>
   d4832:	4628      	mov	r0, r5
   d4834:	2114      	movs	r1, #20
      }
   d4836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d483a:	f000 bcb2 	b.w	d51a2 <_ZdlPvj>
   d483e:	bd38      	pop	{r3, r4, r5, pc}

000d4840 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4840:	b110      	cbz	r0, d4848 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4842:	6803      	ldr	r3, [r0, #0]
   d4844:	685b      	ldr	r3, [r3, #4]
   d4846:	4718      	bx	r3
   d4848:	4770      	bx	lr

000d484a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d484a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d484c:	6803      	ldr	r3, [r0, #0]
   d484e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4850:	b1bb      	cbz	r3, d4882 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4852:	6858      	ldr	r0, [r3, #4]
   d4854:	f7ff fc9a 	bl	d418c <os_thread_is_current>
   d4858:	b978      	cbnz	r0, d487a <_ZN6ThreadD1Ev+0x30>
   d485a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d485c:	7c5a      	ldrb	r2, [r3, #17]
   d485e:	b912      	cbnz	r2, d4866 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4860:	6858      	ldr	r0, [r3, #4]
   d4862:	f7ff fc9b 	bl	d419c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4866:	6823      	ldr	r3, [r4, #0]
   d4868:	6858      	ldr	r0, [r3, #4]
   d486a:	f7ff fc9f 	bl	d41ac <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d486e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4870:	2300      	movs	r3, #0
   d4872:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4874:	b128      	cbz	r0, d4882 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4876:	f7ff ffcd 	bl	d4814 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d487a:	6820      	ldr	r0, [r4, #0]
   d487c:	b108      	cbz	r0, d4882 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d487e:	f7ff ffc9 	bl	d4814 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4882:	4620      	mov	r0, r4
   d4884:	bd10      	pop	{r4, pc}
	...

000d4888 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4888:	b538      	push	{r3, r4, r5, lr}
   d488a:	4b0c      	ldr	r3, [pc, #48]	; (d48bc <_ZN5spark9MeshClassD1Ev+0x34>)
   d488c:	6003      	str	r3, [r0, #0]
   d488e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4890:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4894:	b108      	cbz	r0, d489a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4896:	f7ff fc04 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d489a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d489e:	b135      	cbz	r5, d48ae <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d48a0:	4628      	mov	r0, r5
   d48a2:	f7ff ffd2 	bl	d484a <_ZN6ThreadD1Ev>
   d48a6:	2104      	movs	r1, #4
   d48a8:	4628      	mov	r0, r5
   d48aa:	f000 fc7a 	bl	d51a2 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d48ae:	68a0      	ldr	r0, [r4, #8]
   d48b0:	b108      	cbz	r0, d48b6 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d48b2:	f7ff ffc5 	bl	d4840 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d48b6:	4620      	mov	r0, r4
   d48b8:	bd38      	pop	{r3, r4, r5, pc}
   d48ba:	bf00      	nop
   d48bc:	000d5ffc 	.word	0x000d5ffc

000d48c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d48c0:	b538      	push	{r3, r4, r5, lr}
   d48c2:	4c0e      	ldr	r4, [pc, #56]	; (d48fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d48c4:	4b0e      	ldr	r3, [pc, #56]	; (d4900 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d48c6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d48c8:	2500      	movs	r5, #0
   d48ca:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d48cc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d48d0:	6063      	str	r3, [r4, #4]
   d48d2:	60a5      	str	r5, [r4, #8]
   d48d4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d48d8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d48dc:	f7ff fc76 	bl	d41cc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d48e0:	4b08      	ldr	r3, [pc, #32]	; (d4904 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d48e2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d48e6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d48ea:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d48ec:	4620      	mov	r0, r4
   d48ee:	4a06      	ldr	r2, [pc, #24]	; (d4908 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d48f0:	4906      	ldr	r1, [pc, #24]	; (d490c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d48f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d48f6:	f000 bc4f 	b.w	d5198 <__aeabi_atexit>
   d48fa:	bf00      	nop
   d48fc:	2003e4e0 	.word	0x2003e4e0
   d4900:	000d6030 	.word	0x000d6030
   d4904:	000d5ffc 	.word	0x000d5ffc
   d4908:	2003e494 	.word	0x2003e494
   d490c:	000d4889 	.word	0x000d4889

000d4910 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4910:	2300      	movs	r3, #0
   d4912:	461a      	mov	r2, r3
   d4914:	6840      	ldr	r0, [r0, #4]
   d4916:	f7ff bd8d 	b.w	d4434 <network_connect>

000d491a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d491a:	2200      	movs	r2, #0
   d491c:	2102      	movs	r1, #2
   d491e:	6840      	ldr	r0, [r0, #4]
   d4920:	f7ff bd98 	b.w	d4454 <network_disconnect>

000d4924 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4924:	2200      	movs	r2, #0
   d4926:	4611      	mov	r1, r2
   d4928:	6840      	ldr	r0, [r0, #4]
   d492a:	f7ff bd8b 	b.w	d4444 <network_connecting>

000d492e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d492e:	2200      	movs	r2, #0
   d4930:	4611      	mov	r1, r2
   d4932:	6840      	ldr	r0, [r0, #4]
   d4934:	f7ff bd96 	b.w	d4464 <network_ready>

000d4938 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4938:	2300      	movs	r3, #0
   d493a:	461a      	mov	r2, r3
   d493c:	4619      	mov	r1, r3
   d493e:	6840      	ldr	r0, [r0, #4]
   d4940:	f7ff bd98 	b.w	d4474 <network_on>

000d4944 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4944:	2300      	movs	r3, #0
   d4946:	461a      	mov	r2, r3
   d4948:	4619      	mov	r1, r3
   d494a:	6840      	ldr	r0, [r0, #4]
   d494c:	f7ff bd9a 	b.w	d4484 <network_off>

000d4950 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4950:	2200      	movs	r2, #0
   d4952:	f081 0101 	eor.w	r1, r1, #1
   d4956:	6840      	ldr	r0, [r0, #4]
   d4958:	f7ff bd9c 	b.w	d4494 <network_listen>

000d495c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d495c:	2200      	movs	r2, #0
   d495e:	6840      	ldr	r0, [r0, #4]
   d4960:	f7ff bda8 	b.w	d44b4 <network_set_listen_timeout>

000d4964 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4964:	2200      	movs	r2, #0
   d4966:	4611      	mov	r1, r2
   d4968:	6840      	ldr	r0, [r0, #4]
   d496a:	f7ff bdab 	b.w	d44c4 <network_get_listen_timeout>

000d496e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d496e:	2200      	movs	r2, #0
   d4970:	4611      	mov	r1, r2
   d4972:	6840      	ldr	r0, [r0, #4]
   d4974:	f7ff bd96 	b.w	d44a4 <network_listening>

000d4978 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d497c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d497e:	b095      	sub	sp, #84	; 0x54
   d4980:	4616      	mov	r6, r2
   d4982:	460d      	mov	r5, r1
   d4984:	4607      	mov	r7, r0
    IPAddress addr;
   d4986:	f7ff fed1 	bl	d472c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d498a:	4621      	mov	r1, r4
   d498c:	2220      	movs	r2, #32
   d498e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4990:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4992:	f001 fa1a 	bl	d5dca <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4996:	2340      	movs	r3, #64	; 0x40
   d4998:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d499a:	4621      	mov	r1, r4
   d499c:	466b      	mov	r3, sp
   d499e:	aa0c      	add	r2, sp, #48	; 0x30
   d49a0:	4630      	mov	r0, r6
   d49a2:	f7ff fc8b 	bl	d42bc <netdb_getaddrinfo>
    if (!r) {
   d49a6:	4604      	mov	r4, r0
   d49a8:	2800      	cmp	r0, #0
   d49aa:	d144      	bne.n	d4a36 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d49ac:	4602      	mov	r2, r0
   d49ae:	2101      	movs	r1, #1
   d49b0:	6868      	ldr	r0, [r5, #4]
   d49b2:	f7ff fd57 	bl	d4464 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d49b6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d49b8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d49ba:	4622      	mov	r2, r4
   d49bc:	6868      	ldr	r0, [r5, #4]
   d49be:	f7ff fd51 	bl	d4464 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d49c2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d49c4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d49c6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d49c8:	2e00      	cmp	r6, #0
   d49ca:	d034      	beq.n	d4a36 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d49cc:	2900      	cmp	r1, #0
   d49ce:	d132      	bne.n	d4a36 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d49d0:	6873      	ldr	r3, [r6, #4]
   d49d2:	2b02      	cmp	r3, #2
   d49d4:	d002      	beq.n	d49dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d49d6:	2b0a      	cmp	r3, #10
   d49d8:	d009      	beq.n	d49ee <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d49da:	e02a      	b.n	d4a32 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d49dc:	f1b8 0f00 	cmp.w	r8, #0
   d49e0:	d027      	beq.n	d4a32 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d49e2:	6971      	ldr	r1, [r6, #20]
   d49e4:	4638      	mov	r0, r7
   d49e6:	3104      	adds	r1, #4
   d49e8:	f7ff fecd 	bl	d4786 <_ZN9IPAddressaSEPKh>
   d49ec:	e020      	b.n	d4a30 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d49ee:	f1b9 0f00 	cmp.w	r9, #0
   d49f2:	d01e      	beq.n	d4a32 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d49f4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d49f6:	2211      	movs	r2, #17
   d49f8:	a801      	add	r0, sp, #4
   d49fa:	f001 f9e6 	bl	d5dca <memset>
                    a.v = 6;
   d49fe:	2306      	movs	r3, #6
   d4a00:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4a04:	ad01      	add	r5, sp, #4
   d4a06:	f104 0308 	add.w	r3, r4, #8
   d4a0a:	3418      	adds	r4, #24
   d4a0c:	6818      	ldr	r0, [r3, #0]
   d4a0e:	6859      	ldr	r1, [r3, #4]
   d4a10:	462a      	mov	r2, r5
   d4a12:	c203      	stmia	r2!, {r0, r1}
   d4a14:	3308      	adds	r3, #8
   d4a16:	42a3      	cmp	r3, r4
   d4a18:	4615      	mov	r5, r2
   d4a1a:	d1f7      	bne.n	d4a0c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4a1c:	a901      	add	r1, sp, #4
   d4a1e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4a20:	ad07      	add	r5, sp, #28
   d4a22:	f7ff fe91 	bl	d4748 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4a28:	1d3c      	adds	r4, r7, #4
   d4a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a2c:	682b      	ldr	r3, [r5, #0]
   d4a2e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4a30:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4a32:	69f6      	ldr	r6, [r6, #28]
   d4a34:	e7c8      	b.n	d49c8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4a36:	9800      	ldr	r0, [sp, #0]
   d4a38:	f7ff fc38 	bl	d42ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4a3c:	4638      	mov	r0, r7
   d4a3e:	b015      	add	sp, #84	; 0x54
   d4a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4a44 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4a44:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4a46:	4a03      	ldr	r2, [pc, #12]	; (d4a54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4a48:	601a      	str	r2, [r3, #0]
   d4a4a:	2200      	movs	r2, #0
   d4a4c:	605a      	str	r2, [r3, #4]
   d4a4e:	4770      	bx	lr
   d4a50:	2003e6b4 	.word	0x2003e6b4
   d4a54:	000d6030 	.word	0x000d6030

000d4a58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a5a:	4606      	mov	r6, r0
   d4a5c:	460d      	mov	r5, r1
   d4a5e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4a60:	2400      	movs	r4, #0
  while (size--) {
   d4a62:	42bd      	cmp	r5, r7
   d4a64:	d00c      	beq.n	d4a80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4a66:	6833      	ldr	r3, [r6, #0]
   d4a68:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4a6c:	689b      	ldr	r3, [r3, #8]
   d4a6e:	4630      	mov	r0, r6
   d4a70:	4798      	blx	r3
     if (chunk>=0)
   d4a72:	2800      	cmp	r0, #0
   d4a74:	db01      	blt.n	d4a7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4a76:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4a78:	e7f3      	b.n	d4a62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4a7a:	2c00      	cmp	r4, #0
   d4a7c:	bf08      	it	eq
   d4a7e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4a80:	4620      	mov	r0, r4
   d4a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a84 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4a84:	b570      	push	{r4, r5, r6, lr}
   d4a86:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4a88:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4a8a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4a8c:	b149      	cbz	r1, d4aa2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4a8e:	f001 f9cd 	bl	d5e2c <strlen>
   d4a92:	682b      	ldr	r3, [r5, #0]
   d4a94:	4602      	mov	r2, r0
   d4a96:	4621      	mov	r1, r4
   d4a98:	4628      	mov	r0, r5
   d4a9a:	68db      	ldr	r3, [r3, #12]
    }
   d4a9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4aa0:	4718      	bx	r3
    }
   d4aa2:	bd70      	pop	{r4, r5, r6, pc}

000d4aa4 <_ZN5Print5printEPKc>:
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	f7ff ffed 	bl	d4a84 <_ZN5Print5writeEPKc>
   d4aaa:	bd08      	pop	{r3, pc}

000d4aac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4aac:	6803      	ldr	r3, [r0, #0]
   d4aae:	689b      	ldr	r3, [r3, #8]
   d4ab0:	4718      	bx	r3

000d4ab2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4ab2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4ab4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4ab6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4ab8:	f7ff fff8 	bl	d4aac <_ZN5Print5printEc>
  n += print('\n');
   d4abc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4abe:	4604      	mov	r4, r0
  n += print('\n');
   d4ac0:	4628      	mov	r0, r5
   d4ac2:	f7ff fff3 	bl	d4aac <_ZN5Print5printEc>
  return n;
}
   d4ac6:	4420      	add	r0, r4
   d4ac8:	bd38      	pop	{r3, r4, r5, pc}

000d4aca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4aca:	b538      	push	{r3, r4, r5, lr}
   d4acc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4ace:	f7ff ffd9 	bl	d4a84 <_ZN5Print5writeEPKc>
   d4ad2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4ad4:	4628      	mov	r0, r5
   d4ad6:	f7ff ffec 	bl	d4ab2 <_ZN5Print7printlnEv>
  return n;
}
   d4ada:	4420      	add	r0, r4
   d4adc:	bd38      	pop	{r3, r4, r5, pc}

000d4ade <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4ade:	b530      	push	{r4, r5, lr}
   d4ae0:	b08b      	sub	sp, #44	; 0x2c
   d4ae2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ae4:	2100      	movs	r1, #0
   d4ae6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4aea:	2a01      	cmp	r2, #1
   d4aec:	bf98      	it	ls
   d4aee:	220a      	movls	r2, #10
   d4af0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4af4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4af8:	fb05 3312 	mls	r3, r5, r2, r3
   d4afc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4b00:	2b09      	cmp	r3, #9
   d4b02:	bf94      	ite	ls
   d4b04:	3330      	addls	r3, #48	; 0x30
   d4b06:	3337      	addhi	r3, #55	; 0x37
   d4b08:	b2db      	uxtb	r3, r3
   d4b0a:	4621      	mov	r1, r4
   d4b0c:	f804 3901 	strb.w	r3, [r4], #-1
   d4b10:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4b12:	2d00      	cmp	r5, #0
   d4b14:	d1ee      	bne.n	d4af4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4b16:	f7ff ffb5 	bl	d4a84 <_ZN5Print5writeEPKc>
}
   d4b1a:	b00b      	add	sp, #44	; 0x2c
   d4b1c:	bd30      	pop	{r4, r5, pc}

000d4b1e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4b1e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4b20:	b92a      	cbnz	r2, d4b2e <_ZN5Print5printEmi+0x10>
   d4b22:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4b24:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4b28:	689b      	ldr	r3, [r3, #8]
   d4b2a:	b2c9      	uxtb	r1, r1
   d4b2c:	4718      	bx	r3
  else return printNumber(n, base);
   d4b2e:	b2d2      	uxtb	r2, r2
}
   d4b30:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4b34:	f7ff bfd3 	b.w	d4ade <_ZN5Print11printNumberEmh>

000d4b38 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4b38:	f7ff bff1 	b.w	d4b1e <_ZN5Print5printEmi>

000d4b3c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d4b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b40:	4607      	mov	r7, r0
   d4b42:	460e      	mov	r6, r1
  if (base == 0) {
   d4b44:	4615      	mov	r5, r2
   d4b46:	b92a      	cbnz	r2, d4b54 <_ZN5Print5printEli+0x18>
    return write(n);
   d4b48:	6803      	ldr	r3, [r0, #0]
   d4b4a:	b2c9      	uxtb	r1, r1
   d4b4c:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d4b52:	4718      	bx	r3
  } else if (base == 10) {
   d4b54:	2a0a      	cmp	r2, #10
   d4b56:	d102      	bne.n	d4b5e <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d4b58:	2900      	cmp	r1, #0
   d4b5a:	da01      	bge.n	d4b60 <_ZN5Print5printEli+0x24>
   d4b5c:	e004      	b.n	d4b68 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4b5e:	b2d2      	uxtb	r2, r2
  }
}
   d4b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4b64:	f7ff bfbb 	b.w	d4ade <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4b68:	212d      	movs	r1, #45	; 0x2d
   d4b6a:	f7ff ff9f 	bl	d4aac <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d4b6e:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4b70:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d4b72:	4271      	negs	r1, r6
   d4b74:	4638      	mov	r0, r7
   d4b76:	f7ff ffb2 	bl	d4ade <_ZN5Print11printNumberEmh>
   d4b7a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4b80 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4b84:	ec57 6b10 	vmov	r6, r7, d0
   d4b88:	4682      	mov	sl, r0
   d4b8a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4b8c:	ee10 2a10 	vmov	r2, s0
   d4b90:	463b      	mov	r3, r7
   d4b92:	ee10 0a10 	vmov	r0, s0
   d4b96:	4639      	mov	r1, r7
   d4b98:	f001 f8a0 	bl	d5cdc <__aeabi_dcmpun>
   d4b9c:	b108      	cbz	r0, d4ba2 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4b9e:	4948      	ldr	r1, [pc, #288]	; (d4cc0 <_ZN5Print10printFloatEdh+0x140>)
   d4ba0:	e012      	b.n	d4bc8 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4ba2:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4baa:	4b46      	ldr	r3, [pc, #280]	; (d4cc4 <_ZN5Print10printFloatEdh+0x144>)
   d4bac:	4630      	mov	r0, r6
   d4bae:	4649      	mov	r1, r9
   d4bb0:	f001 f894 	bl	d5cdc <__aeabi_dcmpun>
   d4bb4:	b968      	cbnz	r0, d4bd2 <_ZN5Print10printFloatEdh+0x52>
   d4bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4bba:	4b42      	ldr	r3, [pc, #264]	; (d4cc4 <_ZN5Print10printFloatEdh+0x144>)
   d4bbc:	4630      	mov	r0, r6
   d4bbe:	4649      	mov	r1, r9
   d4bc0:	f001 f86e 	bl	d5ca0 <__aeabi_dcmple>
   d4bc4:	b928      	cbnz	r0, d4bd2 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4bc6:	4940      	ldr	r1, [pc, #256]	; (d4cc8 <_ZN5Print10printFloatEdh+0x148>)
   d4bc8:	4650      	mov	r0, sl
   d4bca:	f7ff ff5b 	bl	d4a84 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4bd2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4bd6:	4b3d      	ldr	r3, [pc, #244]	; (d4ccc <_ZN5Print10printFloatEdh+0x14c>)
   d4bd8:	4630      	mov	r0, r6
   d4bda:	4639      	mov	r1, r7
   d4bdc:	f001 f874 	bl	d5cc8 <__aeabi_dcmpgt>
   d4be0:	b108      	cbz	r0, d4be6 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4be2:	493b      	ldr	r1, [pc, #236]	; (d4cd0 <_ZN5Print10printFloatEdh+0x150>)
   d4be4:	e7f0      	b.n	d4bc8 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4be6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4bea:	4b3a      	ldr	r3, [pc, #232]	; (d4cd4 <_ZN5Print10printFloatEdh+0x154>)
   d4bec:	4630      	mov	r0, r6
   d4bee:	4639      	mov	r1, r7
   d4bf0:	f001 f84c 	bl	d5c8c <__aeabi_dcmplt>
   d4bf4:	2800      	cmp	r0, #0
   d4bf6:	d1f4      	bne.n	d4be2 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4bf8:	2200      	movs	r2, #0
   d4bfa:	2300      	movs	r3, #0
   d4bfc:	4630      	mov	r0, r6
   d4bfe:	4639      	mov	r1, r7
   d4c00:	f001 f844 	bl	d5c8c <__aeabi_dcmplt>
   d4c04:	b140      	cbz	r0, d4c18 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4c06:	212d      	movs	r1, #45	; 0x2d
   d4c08:	4650      	mov	r0, sl
   d4c0a:	f7ff ff4f 	bl	d4aac <_ZN5Print5printEc>
     number = -number;
   d4c0e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4c12:	4604      	mov	r4, r0
     number = -number;
   d4c14:	461f      	mov	r7, r3
   d4c16:	e000      	b.n	d4c1a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4c18:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4c1a:	492f      	ldr	r1, [pc, #188]	; (d4cd8 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4c1c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4c20:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4c22:	fa5f f388 	uxtb.w	r3, r8
   d4c26:	429d      	cmp	r5, r3
   d4c28:	d906      	bls.n	d4c38 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4c2a:	2200      	movs	r2, #0
   d4c2c:	4b2b      	ldr	r3, [pc, #172]	; (d4cdc <_ZN5Print10printFloatEdh+0x15c>)
   d4c2e:	f000 fee5 	bl	d59fc <__aeabi_ddiv>
   d4c32:	f108 0801 	add.w	r8, r8, #1
   d4c36:	e7f4      	b.n	d4c22 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4c38:	4632      	mov	r2, r6
   d4c3a:	463b      	mov	r3, r7
   d4c3c:	f000 fc02 	bl	d5444 <__adddf3>
   d4c40:	460f      	mov	r7, r1
   d4c42:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4c44:	f001 f888 	bl	d5d58 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4c48:	220a      	movs	r2, #10
   d4c4a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4c4c:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4c4e:	4650      	mov	r0, sl
   d4c50:	f7ff ff45 	bl	d4ade <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4c54:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4c56:	b37d      	cbz	r5, d4cb8 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4c58:	4640      	mov	r0, r8
   d4c5a:	f000 fd2f 	bl	d56bc <__aeabi_ui2d>
   d4c5e:	4602      	mov	r2, r0
   d4c60:	460b      	mov	r3, r1
   d4c62:	4630      	mov	r0, r6
   d4c64:	4639      	mov	r1, r7
   d4c66:	f000 fbeb 	bl	d5440 <__aeabi_dsub>
   d4c6a:	4606      	mov	r6, r0
   d4c6c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4c6e:	4650      	mov	r0, sl
   d4c70:	491b      	ldr	r1, [pc, #108]	; (d4ce0 <_ZN5Print10printFloatEdh+0x160>)
   d4c72:	f7ff ff07 	bl	d4a84 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4c76:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4c78:	4b18      	ldr	r3, [pc, #96]	; (d4cdc <_ZN5Print10printFloatEdh+0x15c>)
   d4c7a:	2200      	movs	r2, #0
   d4c7c:	4630      	mov	r0, r6
   d4c7e:	4639      	mov	r1, r7
   d4c80:	f000 fd92 	bl	d57a8 <__aeabi_dmul>
   d4c84:	460f      	mov	r7, r1
   d4c86:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d4c88:	f001 f83e 	bl	d5d08 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4c8c:	220a      	movs	r2, #10
   d4c8e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d4c90:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4c92:	4650      	mov	r0, sl
   d4c94:	f7ff ff52 	bl	d4b3c <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d4c98:	4404      	add	r4, r0
    remainder -= toPrint;
   d4c9a:	4640      	mov	r0, r8
   d4c9c:	f000 fd1e 	bl	d56dc <__aeabi_i2d>
   d4ca0:	4602      	mov	r2, r0
   d4ca2:	460b      	mov	r3, r1
   d4ca4:	4630      	mov	r0, r6
   d4ca6:	4639      	mov	r1, r7
   d4ca8:	f000 fbca 	bl	d5440 <__aeabi_dsub>
   d4cac:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4cae:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4cb2:	4606      	mov	r6, r0
   d4cb4:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4cb6:	d1df      	bne.n	d4c78 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4cb8:	4620      	mov	r0, r4
   d4cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4cbe:	bf00      	nop
   d4cc0:	000d605c 	.word	0x000d605c
   d4cc4:	7fefffff 	.word	0x7fefffff
   d4cc8:	000d6066 	.word	0x000d6066
   d4ccc:	41efffff 	.word	0x41efffff
   d4cd0:	000d6060 	.word	0x000d6060
   d4cd4:	c1efffff 	.word	0xc1efffff
   d4cd8:	3fe00000 	.word	0x3fe00000
   d4cdc:	40240000 	.word	0x40240000
   d4ce0:	000d6064 	.word	0x000d6064

000d4ce4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4ce4:	b2c9      	uxtb	r1, r1
   d4ce6:	f7ff bf4b 	b.w	d4b80 <_ZN5Print10printFloatEdh>

000d4cea <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4cea:	b510      	push	{r4, lr}
   d4cec:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4cee:	f7ff fc59 	bl	d45a4 <_ZNSt14_Function_baseD1Ev>
   d4cf2:	4620      	mov	r0, r4
   d4cf4:	bd10      	pop	{r4, pc}
	...

000d4cf8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4cf8:	4803      	ldr	r0, [pc, #12]	; (d4d08 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4cfa:	4a04      	ldr	r2, [pc, #16]	; (d4d0c <_GLOBAL__sub_I_RGB+0x14>)
   d4cfc:	4904      	ldr	r1, [pc, #16]	; (d4d10 <_GLOBAL__sub_I_RGB+0x18>)
   d4cfe:	2300      	movs	r3, #0
   d4d00:	6083      	str	r3, [r0, #8]
   d4d02:	f000 ba49 	b.w	d5198 <__aeabi_atexit>
   d4d06:	bf00      	nop
   d4d08:	2003e6bc 	.word	0x2003e6bc
   d4d0c:	2003e494 	.word	0x2003e494
   d4d10:	000d4ceb 	.word	0x000d4ceb

000d4d14 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4d14:	4770      	bx	lr

000d4d16 <_ZN8SPIClassD0Ev>:
   d4d16:	b510      	push	{r4, lr}
   d4d18:	2110      	movs	r1, #16
   d4d1a:	4604      	mov	r4, r0
   d4d1c:	f000 fa41 	bl	d51a2 <_ZdlPvj>
   d4d20:	4620      	mov	r0, r4
   d4d22:	bd10      	pop	{r4, pc}

000d4d24 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4d24:	b570      	push	{r4, r5, r6, lr}
   d4d26:	4b08      	ldr	r3, [pc, #32]	; (d4d48 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4d28:	6003      	str	r3, [r0, #0]
   d4d2a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4d2c:	2500      	movs	r5, #0
   d4d2e:	460e      	mov	r6, r1
   d4d30:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4d34:	f7ff fa42 	bl	d41bc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4d38:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4d3a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4d3c:	f7ff fac6 	bl	d42cc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4d40:	60a5      	str	r5, [r4, #8]
}
   d4d42:	4620      	mov	r0, r4
   d4d44:	bd70      	pop	{r4, r5, r6, pc}
   d4d46:	bf00      	nop
   d4d48:	000d6074 	.word	0x000d6074

000d4d4c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4d4c:	7900      	ldrb	r0, [r0, #4]
   d4d4e:	f7ff bac5 	b.w	d42dc <HAL_SPI_Is_Enabled>
	...

000d4d54 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4d54:	4b04      	ldr	r3, [pc, #16]	; (d4d68 <_GLOBAL__sub_I_System+0x14>)
   d4d56:	2000      	movs	r0, #0
   d4d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4d5c:	7018      	strb	r0, [r3, #0]
   d4d5e:	8058      	strh	r0, [r3, #2]
   d4d60:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4d62:	f7ff bb3b 	b.w	d43dc <set_system_mode>
   d4d66:	bf00      	nop
   d4d68:	2003e6cc 	.word	0x2003e6cc

000d4d6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4d6c:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4d6e:	681a      	ldr	r2, [r3, #0]
   d4d70:	4b02      	ldr	r3, [pc, #8]	; (d4d7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4d72:	601a      	str	r2, [r3, #0]
   d4d74:	4770      	bx	lr
   d4d76:	bf00      	nop
   d4d78:	2003e42c 	.word	0x2003e42c
   d4d7c:	2003e6d4 	.word	0x2003e6d4

000d4d80 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4d80:	4770      	bx	lr

000d4d82 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4d82:	7441      	strb	r1, [r0, #17]
   d4d84:	4770      	bx	lr

000d4d86 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4d86:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4d88:	7c00      	ldrb	r0, [r0, #16]
   d4d8a:	f7ff fae7 	bl	d435c <HAL_USART_Available_Data_For_Write>
}
   d4d8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d92:	bd08      	pop	{r3, pc}

000d4d94 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4d94:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4d96:	7c00      	ldrb	r0, [r0, #16]
   d4d98:	f7ff fab8 	bl	d430c <HAL_USART_Available_Data>
}
   d4d9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4da0:	bd08      	pop	{r3, pc}

000d4da2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4da2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4da4:	7c00      	ldrb	r0, [r0, #16]
   d4da6:	f7ff fac1 	bl	d432c <HAL_USART_Peek_Data>
}
   d4daa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4dae:	bf28      	it	cs
   d4db0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4db4:	bd08      	pop	{r3, pc}

000d4db6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4db6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4db8:	7c00      	ldrb	r0, [r0, #16]
   d4dba:	f7ff faaf 	bl	d431c <HAL_USART_Read_Data>
}
   d4dbe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4dc2:	bf28      	it	cs
   d4dc4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4dc8:	bd08      	pop	{r3, pc}

000d4dca <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4dca:	7c00      	ldrb	r0, [r0, #16]
   d4dcc:	f7ff bab6 	b.w	d433c <HAL_USART_Flush_Data>

000d4dd0 <_ZN11USARTSerialD0Ev>:
   d4dd0:	b510      	push	{r4, lr}
   d4dd2:	2114      	movs	r1, #20
   d4dd4:	4604      	mov	r4, r0
   d4dd6:	f000 f9e4 	bl	d51a2 <_ZdlPvj>
   d4dda:	4620      	mov	r0, r4
   d4ddc:	bd10      	pop	{r4, pc}

000d4dde <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4dde:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4de0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4de2:	4604      	mov	r4, r0
   d4de4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4de6:	b925      	cbnz	r5, d4df2 <_ZN11USARTSerial5writeEh+0x14>
   d4de8:	7c00      	ldrb	r0, [r0, #16]
   d4dea:	f7ff fab7 	bl	d435c <HAL_USART_Available_Data_For_Write>
   d4dee:	2800      	cmp	r0, #0
   d4df0:	dd05      	ble.n	d4dfe <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4df2:	4631      	mov	r1, r6
   d4df4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4dfa:	f7ff ba7f 	b.w	d42fc <HAL_USART_Write_Data>
  }
  return 0;
}
   d4dfe:	4628      	mov	r0, r5
   d4e00:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4e04:	b510      	push	{r4, lr}
   d4e06:	4604      	mov	r4, r0
   d4e08:	4608      	mov	r0, r1
   d4e0a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4e0c:	2200      	movs	r2, #0
   d4e0e:	6062      	str	r2, [r4, #4]
   d4e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e14:	60a2      	str	r2, [r4, #8]
   d4e16:	4a05      	ldr	r2, [pc, #20]	; (d4e2c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4e18:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4e1a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4e1c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4e1e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4e20:	461a      	mov	r2, r3
   d4e22:	f7ff fa63 	bl	d42ec <HAL_USART_Init>
}
   d4e26:	4620      	mov	r0, r4
   d4e28:	bd10      	pop	{r4, pc}
   d4e2a:	bf00      	nop
   d4e2c:	000d60b0 	.word	0x000d60b0

000d4e30 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4e30:	7c00      	ldrb	r0, [r0, #16]
   d4e32:	f7ff ba8b 	b.w	d434c <HAL_USART_Is_Enabled>
	...

000d4e38 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d4e3a:	4c19      	ldr	r4, [pc, #100]	; (d4ea0 <_Z22__fetch_global_Serial1v+0x68>)
   d4e3c:	6825      	ldr	r5, [r4, #0]
   d4e3e:	b94d      	cbnz	r5, d4e54 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d4e40:	2084      	movs	r0, #132	; 0x84
   d4e42:	f7ff f92a 	bl	d409a <_Znwj>
   d4e46:	4606      	mov	r6, r0
   d4e48:	b118      	cbz	r0, d4e52 <_Z22__fetch_global_Serial1v+0x1a>
   d4e4a:	2284      	movs	r2, #132	; 0x84
   d4e4c:	4629      	mov	r1, r5
   d4e4e:	f000 ffbc 	bl	d5dca <memset>
   d4e52:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d4e54:	4d13      	ldr	r5, [pc, #76]	; (d4ea4 <_Z22__fetch_global_Serial1v+0x6c>)
   d4e56:	682e      	ldr	r6, [r5, #0]
   d4e58:	b94e      	cbnz	r6, d4e6e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d4e5a:	2084      	movs	r0, #132	; 0x84
   d4e5c:	f7ff f91d 	bl	d409a <_Znwj>
   d4e60:	4607      	mov	r7, r0
   d4e62:	b118      	cbz	r0, d4e6c <_Z22__fetch_global_Serial1v+0x34>
   d4e64:	2284      	movs	r2, #132	; 0x84
   d4e66:	4631      	mov	r1, r6
   d4e68:	f000 ffaf 	bl	d5dca <memset>
   d4e6c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d4e6e:	4f0e      	ldr	r7, [pc, #56]	; (d4ea8 <_Z22__fetch_global_Serial1v+0x70>)
   d4e70:	6839      	ldr	r1, [r7, #0]
   d4e72:	f011 0601 	ands.w	r6, r1, #1
   d4e76:	d111      	bne.n	d4e9c <_Z22__fetch_global_Serial1v+0x64>
   d4e78:	4638      	mov	r0, r7
   d4e7a:	f7ff f914 	bl	d40a6 <__cxa_guard_acquire>
   d4e7e:	b168      	cbz	r0, d4e9c <_Z22__fetch_global_Serial1v+0x64>
   d4e80:	6822      	ldr	r2, [r4, #0]
   d4e82:	682b      	ldr	r3, [r5, #0]
   d4e84:	4809      	ldr	r0, [pc, #36]	; (d4eac <_Z22__fetch_global_Serial1v+0x74>)
   d4e86:	4631      	mov	r1, r6
   d4e88:	f7ff ffbc 	bl	d4e04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4e8c:	4638      	mov	r0, r7
   d4e8e:	f7ff f90f 	bl	d40b0 <__cxa_guard_release>
   d4e92:	4a07      	ldr	r2, [pc, #28]	; (d4eb0 <_Z22__fetch_global_Serial1v+0x78>)
   d4e94:	4907      	ldr	r1, [pc, #28]	; (d4eb4 <_Z22__fetch_global_Serial1v+0x7c>)
   d4e96:	4805      	ldr	r0, [pc, #20]	; (d4eac <_Z22__fetch_global_Serial1v+0x74>)
   d4e98:	f000 f97e 	bl	d5198 <__aeabi_atexit>
#endif
	return serial1;
}
   d4e9c:	4803      	ldr	r0, [pc, #12]	; (d4eac <_Z22__fetch_global_Serial1v+0x74>)
   d4e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4ea0:	2003e6f4 	.word	0x2003e6f4
   d4ea4:	2003e6ec 	.word	0x2003e6ec
   d4ea8:	2003e6f0 	.word	0x2003e6f0
   d4eac:	2003e6d8 	.word	0x2003e6d8
   d4eb0:	2003e494 	.word	0x2003e494
   d4eb4:	000d4d81 	.word	0x000d4d81

000d4eb8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4eb8:	7441      	strb	r1, [r0, #17]
   d4eba:	4770      	bx	lr

000d4ebc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4ebc:	4770      	bx	lr

000d4ebe <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4ebe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4ec0:	2100      	movs	r1, #0
   d4ec2:	7c00      	ldrb	r0, [r0, #16]
   d4ec4:	f7ff fa72 	bl	d43ac <HAL_USB_USART_Receive_Data>
}
   d4ec8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4ecc:	bf28      	it	cs
   d4ece:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4ed2:	bd08      	pop	{r3, pc}

000d4ed4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4ed4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4ed6:	2101      	movs	r1, #1
   d4ed8:	7c00      	ldrb	r0, [r0, #16]
   d4eda:	f7ff fa67 	bl	d43ac <HAL_USB_USART_Receive_Data>
}
   d4ede:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4ee2:	bf28      	it	cs
   d4ee4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4ee8:	bd08      	pop	{r3, pc}

000d4eea <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4eea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4eec:	7c00      	ldrb	r0, [r0, #16]
   d4eee:	f7ff fa55 	bl	d439c <HAL_USB_USART_Available_Data_For_Write>
}
   d4ef2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ef6:	bd08      	pop	{r3, pc}

000d4ef8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4ef8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4efa:	7c00      	ldrb	r0, [r0, #16]
   d4efc:	f7ff fa46 	bl	d438c <HAL_USB_USART_Available_Data>
}
   d4f00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f04:	bd08      	pop	{r3, pc}

000d4f06 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4f06:	7c00      	ldrb	r0, [r0, #16]
   d4f08:	f7ff ba60 	b.w	d43cc <HAL_USB_USART_Flush_Data>

000d4f0c <_ZN9USBSerialD0Ev>:
   d4f0c:	b510      	push	{r4, lr}
   d4f0e:	2114      	movs	r1, #20
   d4f10:	4604      	mov	r4, r0
   d4f12:	f000 f946 	bl	d51a2 <_ZdlPvj>
   d4f16:	4620      	mov	r0, r4
   d4f18:	bd10      	pop	{r4, pc}

000d4f1a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4f1a:	b538      	push	{r3, r4, r5, lr}
   d4f1c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f1e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4f20:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f22:	f7ff fa3b 	bl	d439c <HAL_USB_USART_Available_Data_For_Write>
   d4f26:	2800      	cmp	r0, #0
   d4f28:	dc01      	bgt.n	d4f2e <_ZN9USBSerial5writeEh+0x14>
   d4f2a:	7c60      	ldrb	r0, [r4, #17]
   d4f2c:	b128      	cbz	r0, d4f3a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4f2e:	4629      	mov	r1, r5
   d4f30:	7c20      	ldrb	r0, [r4, #16]
   d4f32:	f7ff fa43 	bl	d43bc <HAL_USB_USART_Send_Data>
   d4f36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4f3a:	bd38      	pop	{r3, r4, r5, pc}

000d4f3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f3c:	b510      	push	{r4, lr}
   d4f3e:	4604      	mov	r4, r0
   d4f40:	2300      	movs	r3, #0
   d4f42:	6063      	str	r3, [r4, #4]
   d4f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f48:	60a3      	str	r3, [r4, #8]
   d4f4a:	4b05      	ldr	r3, [pc, #20]	; (d4f60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4f4c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4f4e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f50:	4608      	mov	r0, r1
{
  _serial = serial;
   d4f52:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4f54:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4f56:	4611      	mov	r1, r2
   d4f58:	f7ff fa08 	bl	d436c <HAL_USB_USART_Init>
}
   d4f5c:	4620      	mov	r0, r4
   d4f5e:	bd10      	pop	{r4, pc}
   d4f60:	000d60e0 	.word	0x000d60e0

000d4f64 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4f64:	2200      	movs	r2, #0
   d4f66:	7c00      	ldrb	r0, [r0, #16]
   d4f68:	f7ff ba08 	b.w	d437c <HAL_USB_USART_Begin>

000d4f6c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f6c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4f6e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f70:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4f72:	2100      	movs	r1, #0
   d4f74:	f000 ff29 	bl	d5dca <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4f78:	4620      	mov	r0, r4
   d4f7a:	bd10      	pop	{r4, pc}

000d4f7c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4f7c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4f7e:	4d0e      	ldr	r5, [pc, #56]	; (d4fb8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4f80:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4f82:	a801      	add	r0, sp, #4
   d4f84:	f7ff fff2 	bl	d4f6c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4f88:	6829      	ldr	r1, [r5, #0]
   d4f8a:	f011 0401 	ands.w	r4, r1, #1
   d4f8e:	d110      	bne.n	d4fb2 <_Z16_fetch_usbserialv+0x36>
   d4f90:	4628      	mov	r0, r5
   d4f92:	f7ff f888 	bl	d40a6 <__cxa_guard_acquire>
   d4f96:	b160      	cbz	r0, d4fb2 <_Z16_fetch_usbserialv+0x36>
   d4f98:	aa01      	add	r2, sp, #4
   d4f9a:	4621      	mov	r1, r4
   d4f9c:	4807      	ldr	r0, [pc, #28]	; (d4fbc <_Z16_fetch_usbserialv+0x40>)
   d4f9e:	f7ff ffcd 	bl	d4f3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4fa2:	4628      	mov	r0, r5
   d4fa4:	f7ff f884 	bl	d40b0 <__cxa_guard_release>
   d4fa8:	4a05      	ldr	r2, [pc, #20]	; (d4fc0 <_Z16_fetch_usbserialv+0x44>)
   d4faa:	4906      	ldr	r1, [pc, #24]	; (d4fc4 <_Z16_fetch_usbserialv+0x48>)
   d4fac:	4803      	ldr	r0, [pc, #12]	; (d4fbc <_Z16_fetch_usbserialv+0x40>)
   d4fae:	f000 f8f3 	bl	d5198 <__aeabi_atexit>
	return _usbserial;
}
   d4fb2:	4802      	ldr	r0, [pc, #8]	; (d4fbc <_Z16_fetch_usbserialv+0x40>)
   d4fb4:	b007      	add	sp, #28
   d4fb6:	bd30      	pop	{r4, r5, pc}
   d4fb8:	2003e6f8 	.word	0x2003e6f8
   d4fbc:	2003e6fc 	.word	0x2003e6fc
   d4fc0:	2003e494 	.word	0x2003e494
   d4fc4:	000d4ebd 	.word	0x000d4ebd

000d4fc8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4fc8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4fca:	4b0c      	ldr	r3, [pc, #48]	; (d4ffc <serialEventRun+0x34>)
   d4fcc:	b133      	cbz	r3, d4fdc <serialEventRun+0x14>
   d4fce:	f7ff ffd5 	bl	d4f7c <_Z16_fetch_usbserialv>
   d4fd2:	6803      	ldr	r3, [r0, #0]
   d4fd4:	691b      	ldr	r3, [r3, #16]
   d4fd6:	4798      	blx	r3
   d4fd8:	2800      	cmp	r0, #0
   d4fda:	dc09      	bgt.n	d4ff0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4fdc:	4b08      	ldr	r3, [pc, #32]	; (d5000 <serialEventRun+0x38>)
   d4fde:	b163      	cbz	r3, d4ffa <serialEventRun+0x32>
   d4fe0:	f7ff ff2a 	bl	d4e38 <_Z22__fetch_global_Serial1v>
   d4fe4:	6803      	ldr	r3, [r0, #0]
   d4fe6:	691b      	ldr	r3, [r3, #16]
   d4fe8:	4798      	blx	r3
   d4fea:	2800      	cmp	r0, #0
   d4fec:	dc03      	bgt.n	d4ff6 <serialEventRun+0x2e>
   d4fee:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4ff0:	f3af 8000 	nop.w
   d4ff4:	e7f2      	b.n	d4fdc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4ff6:	f3af 8000 	nop.w
   d4ffa:	bd08      	pop	{r3, pc}
	...

000d5004 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5004:	b508      	push	{r3, lr}
	serialEventRun();
   d5006:	f7ff ffdf 	bl	d4fc8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d500a:	f7ff f8ef 	bl	d41ec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d500e:	4b01      	ldr	r3, [pc, #4]	; (d5014 <_post_loop+0x10>)
   d5010:	6018      	str	r0, [r3, #0]
   d5012:	bd08      	pop	{r3, pc}
   d5014:	2003e714 	.word	0x2003e714

000d5018 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5018:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d501a:	2300      	movs	r3, #0
   d501c:	9300      	str	r3, [sp, #0]
   d501e:	461a      	mov	r2, r3
   d5020:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5024:	f7ff f9f4 	bl	d4410 <system_ctrl_set_result>
}
   d5028:	b003      	add	sp, #12
   d502a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5030 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5030:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5032:	8843      	ldrh	r3, [r0, #2]
   d5034:	2b0a      	cmp	r3, #10
   d5036:	d008      	beq.n	d504a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5038:	2b50      	cmp	r3, #80	; 0x50
   d503a:	d109      	bne.n	d5050 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d503c:	4b09      	ldr	r3, [pc, #36]	; (d5064 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d503e:	681b      	ldr	r3, [r3, #0]
   d5040:	b13b      	cbz	r3, d5052 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5042:	b003      	add	sp, #12
   d5044:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5048:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d504a:	f7ff ffe5 	bl	d5018 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d504e:	e006      	b.n	d505e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5050:	2300      	movs	r3, #0
   d5052:	9300      	str	r3, [sp, #0]
   d5054:	461a      	mov	r2, r3
   d5056:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d505a:	f7ff f9d9 	bl	d4410 <system_ctrl_set_result>
        break;
    }
}
   d505e:	b003      	add	sp, #12
   d5060:	f85d fb04 	ldr.w	pc, [sp], #4
   d5064:	2003e710 	.word	0x2003e710

000d5068 <module_user_init_hook>:

void module_user_init_hook()
{
   d5068:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d506a:	f7ff f8b7 	bl	d41dc <HAL_RNG_GetRandomNumber>
   d506e:	4604      	mov	r4, r0
    srand(seed);
   d5070:	f000 feb4 	bl	d5ddc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5074:	4b07      	ldr	r3, [pc, #28]	; (d5094 <module_user_init_hook+0x2c>)
   d5076:	b113      	cbz	r3, d507e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5078:	4620      	mov	r0, r4
   d507a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d507e:	2100      	movs	r1, #0
   d5080:	4804      	ldr	r0, [pc, #16]	; (d5094 <module_user_init_hook+0x2c>)
   d5082:	f7ff f9cf 	bl	d4424 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5086:	2100      	movs	r1, #0
   d5088:	4803      	ldr	r0, [pc, #12]	; (d5098 <module_user_init_hook+0x30>)
}
   d508a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d508e:	f7ff b9b5 	b.w	d43fc <system_ctrl_set_app_request_handler>
   d5092:	bf00      	nop
   d5094:	00000000 	.word	0x00000000
   d5098:	000d5031 	.word	0x000d5031

000d509c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d509c:	b510      	push	{r4, lr}
   d509e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d50a0:	480f      	ldr	r0, [pc, #60]	; (d50e0 <pinAvailable+0x44>)
   d50a2:	f7ff fe53 	bl	d4d4c <_ZN8SPIClass9isEnabledEv>
   d50a6:	b128      	cbz	r0, d50b4 <pinAvailable+0x18>
   d50a8:	f1a4 030b 	sub.w	r3, r4, #11
   d50ac:	2b02      	cmp	r3, #2
   d50ae:	d801      	bhi.n	d50b4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d50b0:	2000      	movs	r0, #0
   d50b2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d50b4:	f000 f82e 	bl	d5114 <_Z19__fetch_global_Wirev>
   d50b8:	f7ff fafa 	bl	d46b0 <_ZN7TwoWire9isEnabledEv>
   d50bc:	b108      	cbz	r0, d50c2 <pinAvailable+0x26>
   d50be:	2c01      	cmp	r4, #1
   d50c0:	d9f6      	bls.n	d50b0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d50c2:	f7ff feb9 	bl	d4e38 <_Z22__fetch_global_Serial1v>
   d50c6:	f7ff feb3 	bl	d4e30 <_ZN11USARTSerial9isEnabledEv>
   d50ca:	b118      	cbz	r0, d50d4 <pinAvailable+0x38>
   d50cc:	f1a4 0309 	sub.w	r3, r4, #9
   d50d0:	2b01      	cmp	r3, #1
   d50d2:	d9ed      	bls.n	d50b0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d50d4:	2c23      	cmp	r4, #35	; 0x23
   d50d6:	bf8c      	ite	hi
   d50d8:	2000      	movhi	r0, #0
   d50da:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d50dc:	bd10      	pop	{r4, pc}
   d50de:	bf00      	nop
   d50e0:	2003e730 	.word	0x2003e730

000d50e4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d50e4:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d50e6:	b510      	push	{r4, lr}
   d50e8:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d50ea:	bf9c      	itt	ls
   d50ec:	340e      	addls	r4, #14
   d50ee:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d50f0:	4620      	mov	r0, r4
   d50f2:	f7ff ffd3 	bl	d509c <pinAvailable>
   d50f6:	b150      	cbz	r0, d510e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d50f8:	2103      	movs	r1, #3
   d50fa:	4620      	mov	r0, r4
   d50fc:	f7ff f886 	bl	d420c <HAL_Validate_Pin_Function>
   d5100:	2803      	cmp	r0, #3
   d5102:	d104      	bne.n	d510e <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5104:	4620      	mov	r0, r4
}
   d5106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d510a:	f7ff b887 	b.w	d421c <HAL_ADC_Read>
}
   d510e:	2000      	movs	r0, #0
   d5110:	bd10      	pop	{r4, pc}
	...

000d5114 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5114:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5116:	4d0b      	ldr	r5, [pc, #44]	; (d5144 <_Z19__fetch_global_Wirev+0x30>)
   d5118:	6829      	ldr	r1, [r5, #0]
   d511a:	f011 0401 	ands.w	r4, r1, #1
   d511e:	d10f      	bne.n	d5140 <_Z19__fetch_global_Wirev+0x2c>
   d5120:	4628      	mov	r0, r5
   d5122:	f7fe ffc0 	bl	d40a6 <__cxa_guard_acquire>
   d5126:	b158      	cbz	r0, d5140 <_Z19__fetch_global_Wirev+0x2c>
   d5128:	4621      	mov	r1, r4
   d512a:	4807      	ldr	r0, [pc, #28]	; (d5148 <_Z19__fetch_global_Wirev+0x34>)
   d512c:	f7ff faae 	bl	d468c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5130:	4628      	mov	r0, r5
   d5132:	f7fe ffbd 	bl	d40b0 <__cxa_guard_release>
   d5136:	4a05      	ldr	r2, [pc, #20]	; (d514c <_Z19__fetch_global_Wirev+0x38>)
   d5138:	4905      	ldr	r1, [pc, #20]	; (d5150 <_Z19__fetch_global_Wirev+0x3c>)
   d513a:	4803      	ldr	r0, [pc, #12]	; (d5148 <_Z19__fetch_global_Wirev+0x34>)
   d513c:	f000 f82c 	bl	d5198 <__aeabi_atexit>
	return wire;
}
   d5140:	4801      	ldr	r0, [pc, #4]	; (d5148 <_Z19__fetch_global_Wirev+0x34>)
   d5142:	bd38      	pop	{r3, r4, r5, pc}
   d5144:	2003e718 	.word	0x2003e718
   d5148:	2003e71c 	.word	0x2003e71c
   d514c:	2003e494 	.word	0x2003e494
   d5150:	000d4635 	.word	0x000d4635

000d5154 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5154:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5156:	4c0c      	ldr	r4, [pc, #48]	; (d5188 <_GLOBAL__sub_I_SPI+0x34>)
   d5158:	4e0c      	ldr	r6, [pc, #48]	; (d518c <_GLOBAL__sub_I_SPI+0x38>)
   d515a:	4d0d      	ldr	r5, [pc, #52]	; (d5190 <_GLOBAL__sub_I_SPI+0x3c>)
   d515c:	2100      	movs	r1, #0
   d515e:	4620      	mov	r0, r4
   d5160:	f7ff fde0 	bl	d4d24 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5164:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5166:	4c0b      	ldr	r4, [pc, #44]	; (d5194 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5168:	4632      	mov	r2, r6
   d516a:	4629      	mov	r1, r5
   d516c:	f000 f814 	bl	d5198 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5170:	2101      	movs	r1, #1
   d5172:	4620      	mov	r0, r4
   d5174:	f7ff fdd6 	bl	d4d24 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5178:	4632      	mov	r2, r6
   d517a:	4629      	mov	r1, r5
   d517c:	4620      	mov	r0, r4
   d517e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5182:	f000 b809 	b.w	d5198 <__aeabi_atexit>
   d5186:	bf00      	nop
   d5188:	2003e730 	.word	0x2003e730
   d518c:	2003e494 	.word	0x2003e494
   d5190:	000d4d15 	.word	0x000d4d15
   d5194:	2003e740 	.word	0x2003e740

000d5198 <__aeabi_atexit>:
   d5198:	460b      	mov	r3, r1
   d519a:	4601      	mov	r1, r0
   d519c:	4618      	mov	r0, r3
   d519e:	f000 bdfb 	b.w	d5d98 <__cxa_atexit>

000d51a2 <_ZdlPvj>:
   d51a2:	f7fe bf7c 	b.w	d409e <_ZdlPv>
	...

000d51a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d51a8:	4b24      	ldr	r3, [pc, #144]	; (d523c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d51aa:	681a      	ldr	r2, [r3, #0]
   d51ac:	07d0      	lsls	r0, r2, #31
   d51ae:	bf5c      	itt	pl
   d51b0:	2201      	movpl	r2, #1
   d51b2:	601a      	strpl	r2, [r3, #0]
   d51b4:	4b22      	ldr	r3, [pc, #136]	; (d5240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d51b6:	681a      	ldr	r2, [r3, #0]
   d51b8:	07d1      	lsls	r1, r2, #31
   d51ba:	bf5c      	itt	pl
   d51bc:	2201      	movpl	r2, #1
   d51be:	601a      	strpl	r2, [r3, #0]
   d51c0:	4b20      	ldr	r3, [pc, #128]	; (d5244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d51c2:	681a      	ldr	r2, [r3, #0]
   d51c4:	07d2      	lsls	r2, r2, #31
   d51c6:	bf5c      	itt	pl
   d51c8:	2201      	movpl	r2, #1
   d51ca:	601a      	strpl	r2, [r3, #0]
   d51cc:	4b1e      	ldr	r3, [pc, #120]	; (d5248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d51ce:	681a      	ldr	r2, [r3, #0]
   d51d0:	07d0      	lsls	r0, r2, #31
   d51d2:	bf5c      	itt	pl
   d51d4:	2201      	movpl	r2, #1
   d51d6:	601a      	strpl	r2, [r3, #0]
   d51d8:	4b1c      	ldr	r3, [pc, #112]	; (d524c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d51da:	681a      	ldr	r2, [r3, #0]
   d51dc:	07d1      	lsls	r1, r2, #31
   d51de:	bf5c      	itt	pl
   d51e0:	2201      	movpl	r2, #1
   d51e2:	601a      	strpl	r2, [r3, #0]
   d51e4:	4b1a      	ldr	r3, [pc, #104]	; (d5250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d51e6:	681a      	ldr	r2, [r3, #0]
   d51e8:	07d2      	lsls	r2, r2, #31
   d51ea:	bf5c      	itt	pl
   d51ec:	2201      	movpl	r2, #1
   d51ee:	601a      	strpl	r2, [r3, #0]
   d51f0:	4b18      	ldr	r3, [pc, #96]	; (d5254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d51f2:	681a      	ldr	r2, [r3, #0]
   d51f4:	07d0      	lsls	r0, r2, #31
   d51f6:	bf5c      	itt	pl
   d51f8:	2201      	movpl	r2, #1
   d51fa:	601a      	strpl	r2, [r3, #0]
   d51fc:	4b16      	ldr	r3, [pc, #88]	; (d5258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d51fe:	681a      	ldr	r2, [r3, #0]
   d5200:	07d1      	lsls	r1, r2, #31
   d5202:	bf5c      	itt	pl
   d5204:	2201      	movpl	r2, #1
   d5206:	601a      	strpl	r2, [r3, #0]
   d5208:	4b14      	ldr	r3, [pc, #80]	; (d525c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d520a:	681a      	ldr	r2, [r3, #0]
   d520c:	07d2      	lsls	r2, r2, #31
   d520e:	bf5c      	itt	pl
   d5210:	2201      	movpl	r2, #1
   d5212:	601a      	strpl	r2, [r3, #0]
   d5214:	4b12      	ldr	r3, [pc, #72]	; (d5260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5216:	681a      	ldr	r2, [r3, #0]
   d5218:	07d0      	lsls	r0, r2, #31
   d521a:	bf5c      	itt	pl
   d521c:	2201      	movpl	r2, #1
   d521e:	601a      	strpl	r2, [r3, #0]
   d5220:	4b10      	ldr	r3, [pc, #64]	; (d5264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5222:	681a      	ldr	r2, [r3, #0]
   d5224:	07d1      	lsls	r1, r2, #31
   d5226:	bf5c      	itt	pl
   d5228:	2201      	movpl	r2, #1
   d522a:	601a      	strpl	r2, [r3, #0]
   d522c:	4b0e      	ldr	r3, [pc, #56]	; (d5268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d522e:	681a      	ldr	r2, [r3, #0]
   d5230:	07d2      	lsls	r2, r2, #31
   d5232:	bf5c      	itt	pl
   d5234:	2201      	movpl	r2, #1
   d5236:	601a      	strpl	r2, [r3, #0]
   d5238:	4770      	bx	lr
   d523a:	bf00      	nop
   d523c:	2003e77c 	.word	0x2003e77c
   d5240:	2003e778 	.word	0x2003e778
   d5244:	2003e774 	.word	0x2003e774
   d5248:	2003e770 	.word	0x2003e770
   d524c:	2003e76c 	.word	0x2003e76c
   d5250:	2003e768 	.word	0x2003e768
   d5254:	2003e764 	.word	0x2003e764
   d5258:	2003e760 	.word	0x2003e760
   d525c:	2003e75c 	.word	0x2003e75c
   d5260:	2003e758 	.word	0x2003e758
   d5264:	2003e754 	.word	0x2003e754
   d5268:	2003e750 	.word	0x2003e750

000d526c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d526c:	4b18      	ldr	r3, [pc, #96]	; (d52d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d526e:	681a      	ldr	r2, [r3, #0]
   d5270:	07d1      	lsls	r1, r2, #31
   d5272:	bf5c      	itt	pl
   d5274:	2201      	movpl	r2, #1
   d5276:	601a      	strpl	r2, [r3, #0]
   d5278:	4b16      	ldr	r3, [pc, #88]	; (d52d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d527a:	681a      	ldr	r2, [r3, #0]
   d527c:	07d2      	lsls	r2, r2, #31
   d527e:	bf5c      	itt	pl
   d5280:	2201      	movpl	r2, #1
   d5282:	601a      	strpl	r2, [r3, #0]
   d5284:	4b14      	ldr	r3, [pc, #80]	; (d52d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5286:	681a      	ldr	r2, [r3, #0]
   d5288:	07d0      	lsls	r0, r2, #31
   d528a:	bf5c      	itt	pl
   d528c:	2201      	movpl	r2, #1
   d528e:	601a      	strpl	r2, [r3, #0]
   d5290:	4b12      	ldr	r3, [pc, #72]	; (d52dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5292:	681a      	ldr	r2, [r3, #0]
   d5294:	07d1      	lsls	r1, r2, #31
   d5296:	bf5c      	itt	pl
   d5298:	2201      	movpl	r2, #1
   d529a:	601a      	strpl	r2, [r3, #0]
   d529c:	4b10      	ldr	r3, [pc, #64]	; (d52e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d529e:	681a      	ldr	r2, [r3, #0]
   d52a0:	07d2      	lsls	r2, r2, #31
   d52a2:	bf5c      	itt	pl
   d52a4:	2201      	movpl	r2, #1
   d52a6:	601a      	strpl	r2, [r3, #0]
   d52a8:	4b0e      	ldr	r3, [pc, #56]	; (d52e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d52aa:	681a      	ldr	r2, [r3, #0]
   d52ac:	07d0      	lsls	r0, r2, #31
   d52ae:	bf5c      	itt	pl
   d52b0:	2201      	movpl	r2, #1
   d52b2:	601a      	strpl	r2, [r3, #0]
   d52b4:	4b0c      	ldr	r3, [pc, #48]	; (d52e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d52b6:	681a      	ldr	r2, [r3, #0]
   d52b8:	07d1      	lsls	r1, r2, #31
   d52ba:	bf5c      	itt	pl
   d52bc:	2201      	movpl	r2, #1
   d52be:	601a      	strpl	r2, [r3, #0]
   d52c0:	4b0a      	ldr	r3, [pc, #40]	; (d52ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d52c2:	681a      	ldr	r2, [r3, #0]
   d52c4:	07d2      	lsls	r2, r2, #31
   d52c6:	bf5c      	itt	pl
   d52c8:	2201      	movpl	r2, #1
   d52ca:	601a      	strpl	r2, [r3, #0]
   d52cc:	4770      	bx	lr
   d52ce:	bf00      	nop
   d52d0:	2003e79c 	.word	0x2003e79c
   d52d4:	2003e798 	.word	0x2003e798
   d52d8:	2003e794 	.word	0x2003e794
   d52dc:	2003e790 	.word	0x2003e790
   d52e0:	2003e78c 	.word	0x2003e78c
   d52e4:	2003e788 	.word	0x2003e788
   d52e8:	2003e784 	.word	0x2003e784
   d52ec:	2003e780 	.word	0x2003e780

000d52f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d52f0:	4b18      	ldr	r3, [pc, #96]	; (d5354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d52f2:	681a      	ldr	r2, [r3, #0]
   d52f4:	07d1      	lsls	r1, r2, #31
   d52f6:	bf5c      	itt	pl
   d52f8:	2201      	movpl	r2, #1
   d52fa:	601a      	strpl	r2, [r3, #0]
   d52fc:	4b16      	ldr	r3, [pc, #88]	; (d5358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d52fe:	681a      	ldr	r2, [r3, #0]
   d5300:	07d2      	lsls	r2, r2, #31
   d5302:	bf5c      	itt	pl
   d5304:	2201      	movpl	r2, #1
   d5306:	601a      	strpl	r2, [r3, #0]
   d5308:	4b14      	ldr	r3, [pc, #80]	; (d535c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d530a:	681a      	ldr	r2, [r3, #0]
   d530c:	07d0      	lsls	r0, r2, #31
   d530e:	bf5c      	itt	pl
   d5310:	2201      	movpl	r2, #1
   d5312:	601a      	strpl	r2, [r3, #0]
   d5314:	4b12      	ldr	r3, [pc, #72]	; (d5360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5316:	681a      	ldr	r2, [r3, #0]
   d5318:	07d1      	lsls	r1, r2, #31
   d531a:	bf5c      	itt	pl
   d531c:	2201      	movpl	r2, #1
   d531e:	601a      	strpl	r2, [r3, #0]
   d5320:	4b10      	ldr	r3, [pc, #64]	; (d5364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5322:	681a      	ldr	r2, [r3, #0]
   d5324:	07d2      	lsls	r2, r2, #31
   d5326:	bf5c      	itt	pl
   d5328:	2201      	movpl	r2, #1
   d532a:	601a      	strpl	r2, [r3, #0]
   d532c:	4b0e      	ldr	r3, [pc, #56]	; (d5368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d532e:	681a      	ldr	r2, [r3, #0]
   d5330:	07d0      	lsls	r0, r2, #31
   d5332:	bf5c      	itt	pl
   d5334:	2201      	movpl	r2, #1
   d5336:	601a      	strpl	r2, [r3, #0]
   d5338:	4b0c      	ldr	r3, [pc, #48]	; (d536c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d533a:	681a      	ldr	r2, [r3, #0]
   d533c:	07d1      	lsls	r1, r2, #31
   d533e:	bf5c      	itt	pl
   d5340:	2201      	movpl	r2, #1
   d5342:	601a      	strpl	r2, [r3, #0]
   d5344:	4b0a      	ldr	r3, [pc, #40]	; (d5370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5346:	681a      	ldr	r2, [r3, #0]
   d5348:	07d2      	lsls	r2, r2, #31
   d534a:	bf5c      	itt	pl
   d534c:	2201      	movpl	r2, #1
   d534e:	601a      	strpl	r2, [r3, #0]
   d5350:	4770      	bx	lr
   d5352:	bf00      	nop
   d5354:	2003e7bc 	.word	0x2003e7bc
   d5358:	2003e7b8 	.word	0x2003e7b8
   d535c:	2003e7b4 	.word	0x2003e7b4
   d5360:	2003e7b0 	.word	0x2003e7b0
   d5364:	2003e7ac 	.word	0x2003e7ac
   d5368:	2003e7a8 	.word	0x2003e7a8
   d536c:	2003e7a4 	.word	0x2003e7a4
   d5370:	2003e7a0 	.word	0x2003e7a0

000d5374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5374:	4b24      	ldr	r3, [pc, #144]	; (d5408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5376:	681a      	ldr	r2, [r3, #0]
   d5378:	07d0      	lsls	r0, r2, #31
   d537a:	bf5c      	itt	pl
   d537c:	2201      	movpl	r2, #1
   d537e:	601a      	strpl	r2, [r3, #0]
   d5380:	4b22      	ldr	r3, [pc, #136]	; (d540c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5382:	681a      	ldr	r2, [r3, #0]
   d5384:	07d1      	lsls	r1, r2, #31
   d5386:	bf5c      	itt	pl
   d5388:	2201      	movpl	r2, #1
   d538a:	601a      	strpl	r2, [r3, #0]
   d538c:	4b20      	ldr	r3, [pc, #128]	; (d5410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d538e:	681a      	ldr	r2, [r3, #0]
   d5390:	07d2      	lsls	r2, r2, #31
   d5392:	bf5c      	itt	pl
   d5394:	2201      	movpl	r2, #1
   d5396:	601a      	strpl	r2, [r3, #0]
   d5398:	4b1e      	ldr	r3, [pc, #120]	; (d5414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d539a:	681a      	ldr	r2, [r3, #0]
   d539c:	07d0      	lsls	r0, r2, #31
   d539e:	bf5c      	itt	pl
   d53a0:	2201      	movpl	r2, #1
   d53a2:	601a      	strpl	r2, [r3, #0]
   d53a4:	4b1c      	ldr	r3, [pc, #112]	; (d5418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d53a6:	681a      	ldr	r2, [r3, #0]
   d53a8:	07d1      	lsls	r1, r2, #31
   d53aa:	bf5c      	itt	pl
   d53ac:	2201      	movpl	r2, #1
   d53ae:	601a      	strpl	r2, [r3, #0]
   d53b0:	4b1a      	ldr	r3, [pc, #104]	; (d541c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d53b2:	681a      	ldr	r2, [r3, #0]
   d53b4:	07d2      	lsls	r2, r2, #31
   d53b6:	bf5c      	itt	pl
   d53b8:	2201      	movpl	r2, #1
   d53ba:	601a      	strpl	r2, [r3, #0]
   d53bc:	4b18      	ldr	r3, [pc, #96]	; (d5420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d53be:	681a      	ldr	r2, [r3, #0]
   d53c0:	07d0      	lsls	r0, r2, #31
   d53c2:	bf5c      	itt	pl
   d53c4:	2201      	movpl	r2, #1
   d53c6:	601a      	strpl	r2, [r3, #0]
   d53c8:	4b16      	ldr	r3, [pc, #88]	; (d5424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d53ca:	681a      	ldr	r2, [r3, #0]
   d53cc:	07d1      	lsls	r1, r2, #31
   d53ce:	bf5c      	itt	pl
   d53d0:	2201      	movpl	r2, #1
   d53d2:	601a      	strpl	r2, [r3, #0]
   d53d4:	4b14      	ldr	r3, [pc, #80]	; (d5428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d53d6:	681a      	ldr	r2, [r3, #0]
   d53d8:	07d2      	lsls	r2, r2, #31
   d53da:	bf5c      	itt	pl
   d53dc:	2201      	movpl	r2, #1
   d53de:	601a      	strpl	r2, [r3, #0]
   d53e0:	4b12      	ldr	r3, [pc, #72]	; (d542c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d53e2:	681a      	ldr	r2, [r3, #0]
   d53e4:	07d0      	lsls	r0, r2, #31
   d53e6:	bf5c      	itt	pl
   d53e8:	2201      	movpl	r2, #1
   d53ea:	601a      	strpl	r2, [r3, #0]
   d53ec:	4b10      	ldr	r3, [pc, #64]	; (d5430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d53ee:	681a      	ldr	r2, [r3, #0]
   d53f0:	07d1      	lsls	r1, r2, #31
   d53f2:	bf5c      	itt	pl
   d53f4:	2201      	movpl	r2, #1
   d53f6:	601a      	strpl	r2, [r3, #0]
   d53f8:	4b0e      	ldr	r3, [pc, #56]	; (d5434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d53fa:	681a      	ldr	r2, [r3, #0]
   d53fc:	07d2      	lsls	r2, r2, #31
   d53fe:	bf5c      	itt	pl
   d5400:	2201      	movpl	r2, #1
   d5402:	601a      	strpl	r2, [r3, #0]
   d5404:	4770      	bx	lr
   d5406:	bf00      	nop
   d5408:	2003e7ec 	.word	0x2003e7ec
   d540c:	2003e7e8 	.word	0x2003e7e8
   d5410:	2003e7e4 	.word	0x2003e7e4
   d5414:	2003e7e0 	.word	0x2003e7e0
   d5418:	2003e7dc 	.word	0x2003e7dc
   d541c:	2003e7d8 	.word	0x2003e7d8
   d5420:	2003e7d4 	.word	0x2003e7d4
   d5424:	2003e7d0 	.word	0x2003e7d0
   d5428:	2003e7cc 	.word	0x2003e7cc
   d542c:	2003e7c8 	.word	0x2003e7c8
   d5430:	2003e7c4 	.word	0x2003e7c4
   d5434:	2003e7c0 	.word	0x2003e7c0

000d5438 <__aeabi_drsub>:
   d5438:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d543c:	e002      	b.n	d5444 <__adddf3>
   d543e:	bf00      	nop

000d5440 <__aeabi_dsub>:
   d5440:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5444 <__adddf3>:
   d5444:	b530      	push	{r4, r5, lr}
   d5446:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d544a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d544e:	ea94 0f05 	teq	r4, r5
   d5452:	bf08      	it	eq
   d5454:	ea90 0f02 	teqeq	r0, r2
   d5458:	bf1f      	itttt	ne
   d545a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d545e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5462:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5466:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d546a:	f000 80e2 	beq.w	d5632 <__adddf3+0x1ee>
   d546e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5472:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5476:	bfb8      	it	lt
   d5478:	426d      	neglt	r5, r5
   d547a:	dd0c      	ble.n	d5496 <__adddf3+0x52>
   d547c:	442c      	add	r4, r5
   d547e:	ea80 0202 	eor.w	r2, r0, r2
   d5482:	ea81 0303 	eor.w	r3, r1, r3
   d5486:	ea82 0000 	eor.w	r0, r2, r0
   d548a:	ea83 0101 	eor.w	r1, r3, r1
   d548e:	ea80 0202 	eor.w	r2, r0, r2
   d5492:	ea81 0303 	eor.w	r3, r1, r3
   d5496:	2d36      	cmp	r5, #54	; 0x36
   d5498:	bf88      	it	hi
   d549a:	bd30      	pophi	{r4, r5, pc}
   d549c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d54a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d54a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d54a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d54ac:	d002      	beq.n	d54b4 <__adddf3+0x70>
   d54ae:	4240      	negs	r0, r0
   d54b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d54b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d54b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d54bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d54c0:	d002      	beq.n	d54c8 <__adddf3+0x84>
   d54c2:	4252      	negs	r2, r2
   d54c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d54c8:	ea94 0f05 	teq	r4, r5
   d54cc:	f000 80a7 	beq.w	d561e <__adddf3+0x1da>
   d54d0:	f1a4 0401 	sub.w	r4, r4, #1
   d54d4:	f1d5 0e20 	rsbs	lr, r5, #32
   d54d8:	db0d      	blt.n	d54f6 <__adddf3+0xb2>
   d54da:	fa02 fc0e 	lsl.w	ip, r2, lr
   d54de:	fa22 f205 	lsr.w	r2, r2, r5
   d54e2:	1880      	adds	r0, r0, r2
   d54e4:	f141 0100 	adc.w	r1, r1, #0
   d54e8:	fa03 f20e 	lsl.w	r2, r3, lr
   d54ec:	1880      	adds	r0, r0, r2
   d54ee:	fa43 f305 	asr.w	r3, r3, r5
   d54f2:	4159      	adcs	r1, r3
   d54f4:	e00e      	b.n	d5514 <__adddf3+0xd0>
   d54f6:	f1a5 0520 	sub.w	r5, r5, #32
   d54fa:	f10e 0e20 	add.w	lr, lr, #32
   d54fe:	2a01      	cmp	r2, #1
   d5500:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5504:	bf28      	it	cs
   d5506:	f04c 0c02 	orrcs.w	ip, ip, #2
   d550a:	fa43 f305 	asr.w	r3, r3, r5
   d550e:	18c0      	adds	r0, r0, r3
   d5510:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5518:	d507      	bpl.n	d552a <__adddf3+0xe6>
   d551a:	f04f 0e00 	mov.w	lr, #0
   d551e:	f1dc 0c00 	rsbs	ip, ip, #0
   d5522:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5526:	eb6e 0101 	sbc.w	r1, lr, r1
   d552a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d552e:	d31b      	bcc.n	d5568 <__adddf3+0x124>
   d5530:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5534:	d30c      	bcc.n	d5550 <__adddf3+0x10c>
   d5536:	0849      	lsrs	r1, r1, #1
   d5538:	ea5f 0030 	movs.w	r0, r0, rrx
   d553c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5540:	f104 0401 	add.w	r4, r4, #1
   d5544:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5548:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d554c:	f080 809a 	bcs.w	d5684 <__adddf3+0x240>
   d5550:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5554:	bf08      	it	eq
   d5556:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d555a:	f150 0000 	adcs.w	r0, r0, #0
   d555e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5562:	ea41 0105 	orr.w	r1, r1, r5
   d5566:	bd30      	pop	{r4, r5, pc}
   d5568:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d556c:	4140      	adcs	r0, r0
   d556e:	eb41 0101 	adc.w	r1, r1, r1
   d5572:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5576:	f1a4 0401 	sub.w	r4, r4, #1
   d557a:	d1e9      	bne.n	d5550 <__adddf3+0x10c>
   d557c:	f091 0f00 	teq	r1, #0
   d5580:	bf04      	itt	eq
   d5582:	4601      	moveq	r1, r0
   d5584:	2000      	moveq	r0, #0
   d5586:	fab1 f381 	clz	r3, r1
   d558a:	bf08      	it	eq
   d558c:	3320      	addeq	r3, #32
   d558e:	f1a3 030b 	sub.w	r3, r3, #11
   d5592:	f1b3 0220 	subs.w	r2, r3, #32
   d5596:	da0c      	bge.n	d55b2 <__adddf3+0x16e>
   d5598:	320c      	adds	r2, #12
   d559a:	dd08      	ble.n	d55ae <__adddf3+0x16a>
   d559c:	f102 0c14 	add.w	ip, r2, #20
   d55a0:	f1c2 020c 	rsb	r2, r2, #12
   d55a4:	fa01 f00c 	lsl.w	r0, r1, ip
   d55a8:	fa21 f102 	lsr.w	r1, r1, r2
   d55ac:	e00c      	b.n	d55c8 <__adddf3+0x184>
   d55ae:	f102 0214 	add.w	r2, r2, #20
   d55b2:	bfd8      	it	le
   d55b4:	f1c2 0c20 	rsble	ip, r2, #32
   d55b8:	fa01 f102 	lsl.w	r1, r1, r2
   d55bc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d55c0:	bfdc      	itt	le
   d55c2:	ea41 010c 	orrle.w	r1, r1, ip
   d55c6:	4090      	lslle	r0, r2
   d55c8:	1ae4      	subs	r4, r4, r3
   d55ca:	bfa2      	ittt	ge
   d55cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d55d0:	4329      	orrge	r1, r5
   d55d2:	bd30      	popge	{r4, r5, pc}
   d55d4:	ea6f 0404 	mvn.w	r4, r4
   d55d8:	3c1f      	subs	r4, #31
   d55da:	da1c      	bge.n	d5616 <__adddf3+0x1d2>
   d55dc:	340c      	adds	r4, #12
   d55de:	dc0e      	bgt.n	d55fe <__adddf3+0x1ba>
   d55e0:	f104 0414 	add.w	r4, r4, #20
   d55e4:	f1c4 0220 	rsb	r2, r4, #32
   d55e8:	fa20 f004 	lsr.w	r0, r0, r4
   d55ec:	fa01 f302 	lsl.w	r3, r1, r2
   d55f0:	ea40 0003 	orr.w	r0, r0, r3
   d55f4:	fa21 f304 	lsr.w	r3, r1, r4
   d55f8:	ea45 0103 	orr.w	r1, r5, r3
   d55fc:	bd30      	pop	{r4, r5, pc}
   d55fe:	f1c4 040c 	rsb	r4, r4, #12
   d5602:	f1c4 0220 	rsb	r2, r4, #32
   d5606:	fa20 f002 	lsr.w	r0, r0, r2
   d560a:	fa01 f304 	lsl.w	r3, r1, r4
   d560e:	ea40 0003 	orr.w	r0, r0, r3
   d5612:	4629      	mov	r1, r5
   d5614:	bd30      	pop	{r4, r5, pc}
   d5616:	fa21 f004 	lsr.w	r0, r1, r4
   d561a:	4629      	mov	r1, r5
   d561c:	bd30      	pop	{r4, r5, pc}
   d561e:	f094 0f00 	teq	r4, #0
   d5622:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5626:	bf06      	itte	eq
   d5628:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d562c:	3401      	addeq	r4, #1
   d562e:	3d01      	subne	r5, #1
   d5630:	e74e      	b.n	d54d0 <__adddf3+0x8c>
   d5632:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5636:	bf18      	it	ne
   d5638:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d563c:	d029      	beq.n	d5692 <__adddf3+0x24e>
   d563e:	ea94 0f05 	teq	r4, r5
   d5642:	bf08      	it	eq
   d5644:	ea90 0f02 	teqeq	r0, r2
   d5648:	d005      	beq.n	d5656 <__adddf3+0x212>
   d564a:	ea54 0c00 	orrs.w	ip, r4, r0
   d564e:	bf04      	itt	eq
   d5650:	4619      	moveq	r1, r3
   d5652:	4610      	moveq	r0, r2
   d5654:	bd30      	pop	{r4, r5, pc}
   d5656:	ea91 0f03 	teq	r1, r3
   d565a:	bf1e      	ittt	ne
   d565c:	2100      	movne	r1, #0
   d565e:	2000      	movne	r0, #0
   d5660:	bd30      	popne	{r4, r5, pc}
   d5662:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5666:	d105      	bne.n	d5674 <__adddf3+0x230>
   d5668:	0040      	lsls	r0, r0, #1
   d566a:	4149      	adcs	r1, r1
   d566c:	bf28      	it	cs
   d566e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5672:	bd30      	pop	{r4, r5, pc}
   d5674:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5678:	bf3c      	itt	cc
   d567a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d567e:	bd30      	popcc	{r4, r5, pc}
   d5680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5684:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5688:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d568c:	f04f 0000 	mov.w	r0, #0
   d5690:	bd30      	pop	{r4, r5, pc}
   d5692:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5696:	bf1a      	itte	ne
   d5698:	4619      	movne	r1, r3
   d569a:	4610      	movne	r0, r2
   d569c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d56a0:	bf1c      	itt	ne
   d56a2:	460b      	movne	r3, r1
   d56a4:	4602      	movne	r2, r0
   d56a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d56aa:	bf06      	itte	eq
   d56ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d56b0:	ea91 0f03 	teqeq	r1, r3
   d56b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d56b8:	bd30      	pop	{r4, r5, pc}
   d56ba:	bf00      	nop

000d56bc <__aeabi_ui2d>:
   d56bc:	f090 0f00 	teq	r0, #0
   d56c0:	bf04      	itt	eq
   d56c2:	2100      	moveq	r1, #0
   d56c4:	4770      	bxeq	lr
   d56c6:	b530      	push	{r4, r5, lr}
   d56c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d56cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d56d0:	f04f 0500 	mov.w	r5, #0
   d56d4:	f04f 0100 	mov.w	r1, #0
   d56d8:	e750      	b.n	d557c <__adddf3+0x138>
   d56da:	bf00      	nop

000d56dc <__aeabi_i2d>:
   d56dc:	f090 0f00 	teq	r0, #0
   d56e0:	bf04      	itt	eq
   d56e2:	2100      	moveq	r1, #0
   d56e4:	4770      	bxeq	lr
   d56e6:	b530      	push	{r4, r5, lr}
   d56e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d56ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d56f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d56f4:	bf48      	it	mi
   d56f6:	4240      	negmi	r0, r0
   d56f8:	f04f 0100 	mov.w	r1, #0
   d56fc:	e73e      	b.n	d557c <__adddf3+0x138>
   d56fe:	bf00      	nop

000d5700 <__aeabi_f2d>:
   d5700:	0042      	lsls	r2, r0, #1
   d5702:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5706:	ea4f 0131 	mov.w	r1, r1, rrx
   d570a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d570e:	bf1f      	itttt	ne
   d5710:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5714:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5718:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d571c:	4770      	bxne	lr
   d571e:	f092 0f00 	teq	r2, #0
   d5722:	bf14      	ite	ne
   d5724:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5728:	4770      	bxeq	lr
   d572a:	b530      	push	{r4, r5, lr}
   d572c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5738:	e720      	b.n	d557c <__adddf3+0x138>
   d573a:	bf00      	nop

000d573c <__aeabi_ul2d>:
   d573c:	ea50 0201 	orrs.w	r2, r0, r1
   d5740:	bf08      	it	eq
   d5742:	4770      	bxeq	lr
   d5744:	b530      	push	{r4, r5, lr}
   d5746:	f04f 0500 	mov.w	r5, #0
   d574a:	e00a      	b.n	d5762 <__aeabi_l2d+0x16>

000d574c <__aeabi_l2d>:
   d574c:	ea50 0201 	orrs.w	r2, r0, r1
   d5750:	bf08      	it	eq
   d5752:	4770      	bxeq	lr
   d5754:	b530      	push	{r4, r5, lr}
   d5756:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d575a:	d502      	bpl.n	d5762 <__aeabi_l2d+0x16>
   d575c:	4240      	negs	r0, r0
   d575e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5762:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5766:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d576a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d576e:	f43f aedc 	beq.w	d552a <__adddf3+0xe6>
   d5772:	f04f 0203 	mov.w	r2, #3
   d5776:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d577a:	bf18      	it	ne
   d577c:	3203      	addne	r2, #3
   d577e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5782:	bf18      	it	ne
   d5784:	3203      	addne	r2, #3
   d5786:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d578a:	f1c2 0320 	rsb	r3, r2, #32
   d578e:	fa00 fc03 	lsl.w	ip, r0, r3
   d5792:	fa20 f002 	lsr.w	r0, r0, r2
   d5796:	fa01 fe03 	lsl.w	lr, r1, r3
   d579a:	ea40 000e 	orr.w	r0, r0, lr
   d579e:	fa21 f102 	lsr.w	r1, r1, r2
   d57a2:	4414      	add	r4, r2
   d57a4:	e6c1      	b.n	d552a <__adddf3+0xe6>
   d57a6:	bf00      	nop

000d57a8 <__aeabi_dmul>:
   d57a8:	b570      	push	{r4, r5, r6, lr}
   d57aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d57ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d57b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d57b6:	bf1d      	ittte	ne
   d57b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d57bc:	ea94 0f0c 	teqne	r4, ip
   d57c0:	ea95 0f0c 	teqne	r5, ip
   d57c4:	f000 f8de 	bleq	d5984 <__aeabi_dmul+0x1dc>
   d57c8:	442c      	add	r4, r5
   d57ca:	ea81 0603 	eor.w	r6, r1, r3
   d57ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d57d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d57d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d57da:	bf18      	it	ne
   d57dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d57e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d57e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d57e8:	d038      	beq.n	d585c <__aeabi_dmul+0xb4>
   d57ea:	fba0 ce02 	umull	ip, lr, r0, r2
   d57ee:	f04f 0500 	mov.w	r5, #0
   d57f2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d57f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d57fa:	fbe0 e503 	umlal	lr, r5, r0, r3
   d57fe:	f04f 0600 	mov.w	r6, #0
   d5802:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5806:	f09c 0f00 	teq	ip, #0
   d580a:	bf18      	it	ne
   d580c:	f04e 0e01 	orrne.w	lr, lr, #1
   d5810:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5814:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5818:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d581c:	d204      	bcs.n	d5828 <__aeabi_dmul+0x80>
   d581e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5822:	416d      	adcs	r5, r5
   d5824:	eb46 0606 	adc.w	r6, r6, r6
   d5828:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d582c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5830:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5834:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5838:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d583c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5840:	bf88      	it	hi
   d5842:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5846:	d81e      	bhi.n	d5886 <__aeabi_dmul+0xde>
   d5848:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d584c:	bf08      	it	eq
   d584e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5852:	f150 0000 	adcs.w	r0, r0, #0
   d5856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d585a:	bd70      	pop	{r4, r5, r6, pc}
   d585c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5860:	ea46 0101 	orr.w	r1, r6, r1
   d5864:	ea40 0002 	orr.w	r0, r0, r2
   d5868:	ea81 0103 	eor.w	r1, r1, r3
   d586c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5870:	bfc2      	ittt	gt
   d5872:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5876:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d587a:	bd70      	popgt	{r4, r5, r6, pc}
   d587c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5880:	f04f 0e00 	mov.w	lr, #0
   d5884:	3c01      	subs	r4, #1
   d5886:	f300 80ab 	bgt.w	d59e0 <__aeabi_dmul+0x238>
   d588a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d588e:	bfde      	ittt	le
   d5890:	2000      	movle	r0, #0
   d5892:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5896:	bd70      	pople	{r4, r5, r6, pc}
   d5898:	f1c4 0400 	rsb	r4, r4, #0
   d589c:	3c20      	subs	r4, #32
   d589e:	da35      	bge.n	d590c <__aeabi_dmul+0x164>
   d58a0:	340c      	adds	r4, #12
   d58a2:	dc1b      	bgt.n	d58dc <__aeabi_dmul+0x134>
   d58a4:	f104 0414 	add.w	r4, r4, #20
   d58a8:	f1c4 0520 	rsb	r5, r4, #32
   d58ac:	fa00 f305 	lsl.w	r3, r0, r5
   d58b0:	fa20 f004 	lsr.w	r0, r0, r4
   d58b4:	fa01 f205 	lsl.w	r2, r1, r5
   d58b8:	ea40 0002 	orr.w	r0, r0, r2
   d58bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d58c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d58c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d58c8:	fa21 f604 	lsr.w	r6, r1, r4
   d58cc:	eb42 0106 	adc.w	r1, r2, r6
   d58d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d58d4:	bf08      	it	eq
   d58d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d58da:	bd70      	pop	{r4, r5, r6, pc}
   d58dc:	f1c4 040c 	rsb	r4, r4, #12
   d58e0:	f1c4 0520 	rsb	r5, r4, #32
   d58e4:	fa00 f304 	lsl.w	r3, r0, r4
   d58e8:	fa20 f005 	lsr.w	r0, r0, r5
   d58ec:	fa01 f204 	lsl.w	r2, r1, r4
   d58f0:	ea40 0002 	orr.w	r0, r0, r2
   d58f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d58f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d58fc:	f141 0100 	adc.w	r1, r1, #0
   d5900:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5904:	bf08      	it	eq
   d5906:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d590a:	bd70      	pop	{r4, r5, r6, pc}
   d590c:	f1c4 0520 	rsb	r5, r4, #32
   d5910:	fa00 f205 	lsl.w	r2, r0, r5
   d5914:	ea4e 0e02 	orr.w	lr, lr, r2
   d5918:	fa20 f304 	lsr.w	r3, r0, r4
   d591c:	fa01 f205 	lsl.w	r2, r1, r5
   d5920:	ea43 0302 	orr.w	r3, r3, r2
   d5924:	fa21 f004 	lsr.w	r0, r1, r4
   d5928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d592c:	fa21 f204 	lsr.w	r2, r1, r4
   d5930:	ea20 0002 	bic.w	r0, r0, r2
   d5934:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5938:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d593c:	bf08      	it	eq
   d593e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5942:	bd70      	pop	{r4, r5, r6, pc}
   d5944:	f094 0f00 	teq	r4, #0
   d5948:	d10f      	bne.n	d596a <__aeabi_dmul+0x1c2>
   d594a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d594e:	0040      	lsls	r0, r0, #1
   d5950:	eb41 0101 	adc.w	r1, r1, r1
   d5954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5958:	bf08      	it	eq
   d595a:	3c01      	subeq	r4, #1
   d595c:	d0f7      	beq.n	d594e <__aeabi_dmul+0x1a6>
   d595e:	ea41 0106 	orr.w	r1, r1, r6
   d5962:	f095 0f00 	teq	r5, #0
   d5966:	bf18      	it	ne
   d5968:	4770      	bxne	lr
   d596a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d596e:	0052      	lsls	r2, r2, #1
   d5970:	eb43 0303 	adc.w	r3, r3, r3
   d5974:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5978:	bf08      	it	eq
   d597a:	3d01      	subeq	r5, #1
   d597c:	d0f7      	beq.n	d596e <__aeabi_dmul+0x1c6>
   d597e:	ea43 0306 	orr.w	r3, r3, r6
   d5982:	4770      	bx	lr
   d5984:	ea94 0f0c 	teq	r4, ip
   d5988:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d598c:	bf18      	it	ne
   d598e:	ea95 0f0c 	teqne	r5, ip
   d5992:	d00c      	beq.n	d59ae <__aeabi_dmul+0x206>
   d5994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5998:	bf18      	it	ne
   d599a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d599e:	d1d1      	bne.n	d5944 <__aeabi_dmul+0x19c>
   d59a0:	ea81 0103 	eor.w	r1, r1, r3
   d59a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d59a8:	f04f 0000 	mov.w	r0, #0
   d59ac:	bd70      	pop	{r4, r5, r6, pc}
   d59ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d59b2:	bf06      	itte	eq
   d59b4:	4610      	moveq	r0, r2
   d59b6:	4619      	moveq	r1, r3
   d59b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d59bc:	d019      	beq.n	d59f2 <__aeabi_dmul+0x24a>
   d59be:	ea94 0f0c 	teq	r4, ip
   d59c2:	d102      	bne.n	d59ca <__aeabi_dmul+0x222>
   d59c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d59c8:	d113      	bne.n	d59f2 <__aeabi_dmul+0x24a>
   d59ca:	ea95 0f0c 	teq	r5, ip
   d59ce:	d105      	bne.n	d59dc <__aeabi_dmul+0x234>
   d59d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d59d4:	bf1c      	itt	ne
   d59d6:	4610      	movne	r0, r2
   d59d8:	4619      	movne	r1, r3
   d59da:	d10a      	bne.n	d59f2 <__aeabi_dmul+0x24a>
   d59dc:	ea81 0103 	eor.w	r1, r1, r3
   d59e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d59e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d59e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d59ec:	f04f 0000 	mov.w	r0, #0
   d59f0:	bd70      	pop	{r4, r5, r6, pc}
   d59f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d59f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d59fa:	bd70      	pop	{r4, r5, r6, pc}

000d59fc <__aeabi_ddiv>:
   d59fc:	b570      	push	{r4, r5, r6, lr}
   d59fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5a02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5a06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5a0a:	bf1d      	ittte	ne
   d5a0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5a10:	ea94 0f0c 	teqne	r4, ip
   d5a14:	ea95 0f0c 	teqne	r5, ip
   d5a18:	f000 f8a7 	bleq	d5b6a <__aeabi_ddiv+0x16e>
   d5a1c:	eba4 0405 	sub.w	r4, r4, r5
   d5a20:	ea81 0e03 	eor.w	lr, r1, r3
   d5a24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5a28:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5a2c:	f000 8088 	beq.w	d5b40 <__aeabi_ddiv+0x144>
   d5a30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5a34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5a38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5a3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5a40:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5a44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5a48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5a4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5a50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5a54:	429d      	cmp	r5, r3
   d5a56:	bf08      	it	eq
   d5a58:	4296      	cmpeq	r6, r2
   d5a5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5a5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5a62:	d202      	bcs.n	d5a6a <__aeabi_ddiv+0x6e>
   d5a64:	085b      	lsrs	r3, r3, #1
   d5a66:	ea4f 0232 	mov.w	r2, r2, rrx
   d5a6a:	1ab6      	subs	r6, r6, r2
   d5a6c:	eb65 0503 	sbc.w	r5, r5, r3
   d5a70:	085b      	lsrs	r3, r3, #1
   d5a72:	ea4f 0232 	mov.w	r2, r2, rrx
   d5a76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5a7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5a7e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5a82:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5a86:	bf22      	ittt	cs
   d5a88:	1ab6      	subcs	r6, r6, r2
   d5a8a:	4675      	movcs	r5, lr
   d5a8c:	ea40 000c 	orrcs.w	r0, r0, ip
   d5a90:	085b      	lsrs	r3, r3, #1
   d5a92:	ea4f 0232 	mov.w	r2, r2, rrx
   d5a96:	ebb6 0e02 	subs.w	lr, r6, r2
   d5a9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5a9e:	bf22      	ittt	cs
   d5aa0:	1ab6      	subcs	r6, r6, r2
   d5aa2:	4675      	movcs	r5, lr
   d5aa4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5aa8:	085b      	lsrs	r3, r3, #1
   d5aaa:	ea4f 0232 	mov.w	r2, r2, rrx
   d5aae:	ebb6 0e02 	subs.w	lr, r6, r2
   d5ab2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5ab6:	bf22      	ittt	cs
   d5ab8:	1ab6      	subcs	r6, r6, r2
   d5aba:	4675      	movcs	r5, lr
   d5abc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5ac0:	085b      	lsrs	r3, r3, #1
   d5ac2:	ea4f 0232 	mov.w	r2, r2, rrx
   d5ac6:	ebb6 0e02 	subs.w	lr, r6, r2
   d5aca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5ace:	bf22      	ittt	cs
   d5ad0:	1ab6      	subcs	r6, r6, r2
   d5ad2:	4675      	movcs	r5, lr
   d5ad4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5ad8:	ea55 0e06 	orrs.w	lr, r5, r6
   d5adc:	d018      	beq.n	d5b10 <__aeabi_ddiv+0x114>
   d5ade:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5ae2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5ae6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5aea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5aee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5af2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5af6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5afa:	d1c0      	bne.n	d5a7e <__aeabi_ddiv+0x82>
   d5afc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5b00:	d10b      	bne.n	d5b1a <__aeabi_ddiv+0x11e>
   d5b02:	ea41 0100 	orr.w	r1, r1, r0
   d5b06:	f04f 0000 	mov.w	r0, #0
   d5b0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5b0e:	e7b6      	b.n	d5a7e <__aeabi_ddiv+0x82>
   d5b10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5b14:	bf04      	itt	eq
   d5b16:	4301      	orreq	r1, r0
   d5b18:	2000      	moveq	r0, #0
   d5b1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5b1e:	bf88      	it	hi
   d5b20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5b24:	f63f aeaf 	bhi.w	d5886 <__aeabi_dmul+0xde>
   d5b28:	ebb5 0c03 	subs.w	ip, r5, r3
   d5b2c:	bf04      	itt	eq
   d5b2e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5b32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5b36:	f150 0000 	adcs.w	r0, r0, #0
   d5b3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5b3e:	bd70      	pop	{r4, r5, r6, pc}
   d5b40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5b44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5b48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5b4c:	bfc2      	ittt	gt
   d5b4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5b52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5b56:	bd70      	popgt	{r4, r5, r6, pc}
   d5b58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5b5c:	f04f 0e00 	mov.w	lr, #0
   d5b60:	3c01      	subs	r4, #1
   d5b62:	e690      	b.n	d5886 <__aeabi_dmul+0xde>
   d5b64:	ea45 0e06 	orr.w	lr, r5, r6
   d5b68:	e68d      	b.n	d5886 <__aeabi_dmul+0xde>
   d5b6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5b6e:	ea94 0f0c 	teq	r4, ip
   d5b72:	bf08      	it	eq
   d5b74:	ea95 0f0c 	teqeq	r5, ip
   d5b78:	f43f af3b 	beq.w	d59f2 <__aeabi_dmul+0x24a>
   d5b7c:	ea94 0f0c 	teq	r4, ip
   d5b80:	d10a      	bne.n	d5b98 <__aeabi_ddiv+0x19c>
   d5b82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5b86:	f47f af34 	bne.w	d59f2 <__aeabi_dmul+0x24a>
   d5b8a:	ea95 0f0c 	teq	r5, ip
   d5b8e:	f47f af25 	bne.w	d59dc <__aeabi_dmul+0x234>
   d5b92:	4610      	mov	r0, r2
   d5b94:	4619      	mov	r1, r3
   d5b96:	e72c      	b.n	d59f2 <__aeabi_dmul+0x24a>
   d5b98:	ea95 0f0c 	teq	r5, ip
   d5b9c:	d106      	bne.n	d5bac <__aeabi_ddiv+0x1b0>
   d5b9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5ba2:	f43f aefd 	beq.w	d59a0 <__aeabi_dmul+0x1f8>
   d5ba6:	4610      	mov	r0, r2
   d5ba8:	4619      	mov	r1, r3
   d5baa:	e722      	b.n	d59f2 <__aeabi_dmul+0x24a>
   d5bac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5bb0:	bf18      	it	ne
   d5bb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5bb6:	f47f aec5 	bne.w	d5944 <__aeabi_dmul+0x19c>
   d5bba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5bbe:	f47f af0d 	bne.w	d59dc <__aeabi_dmul+0x234>
   d5bc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5bc6:	f47f aeeb 	bne.w	d59a0 <__aeabi_dmul+0x1f8>
   d5bca:	e712      	b.n	d59f2 <__aeabi_dmul+0x24a>

000d5bcc <__gedf2>:
   d5bcc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d5bd0:	e006      	b.n	d5be0 <__cmpdf2+0x4>
   d5bd2:	bf00      	nop

000d5bd4 <__ledf2>:
   d5bd4:	f04f 0c01 	mov.w	ip, #1
   d5bd8:	e002      	b.n	d5be0 <__cmpdf2+0x4>
   d5bda:	bf00      	nop

000d5bdc <__cmpdf2>:
   d5bdc:	f04f 0c01 	mov.w	ip, #1
   d5be0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5be4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5be8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5bf0:	bf18      	it	ne
   d5bf2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5bf6:	d01b      	beq.n	d5c30 <__cmpdf2+0x54>
   d5bf8:	b001      	add	sp, #4
   d5bfa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5bfe:	bf0c      	ite	eq
   d5c00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5c04:	ea91 0f03 	teqne	r1, r3
   d5c08:	bf02      	ittt	eq
   d5c0a:	ea90 0f02 	teqeq	r0, r2
   d5c0e:	2000      	moveq	r0, #0
   d5c10:	4770      	bxeq	lr
   d5c12:	f110 0f00 	cmn.w	r0, #0
   d5c16:	ea91 0f03 	teq	r1, r3
   d5c1a:	bf58      	it	pl
   d5c1c:	4299      	cmppl	r1, r3
   d5c1e:	bf08      	it	eq
   d5c20:	4290      	cmpeq	r0, r2
   d5c22:	bf2c      	ite	cs
   d5c24:	17d8      	asrcs	r0, r3, #31
   d5c26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5c2a:	f040 0001 	orr.w	r0, r0, #1
   d5c2e:	4770      	bx	lr
   d5c30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5c38:	d102      	bne.n	d5c40 <__cmpdf2+0x64>
   d5c3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5c3e:	d107      	bne.n	d5c50 <__cmpdf2+0x74>
   d5c40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5c44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5c48:	d1d6      	bne.n	d5bf8 <__cmpdf2+0x1c>
   d5c4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5c4e:	d0d3      	beq.n	d5bf8 <__cmpdf2+0x1c>
   d5c50:	f85d 0b04 	ldr.w	r0, [sp], #4
   d5c54:	4770      	bx	lr
   d5c56:	bf00      	nop

000d5c58 <__aeabi_cdrcmple>:
   d5c58:	4684      	mov	ip, r0
   d5c5a:	4610      	mov	r0, r2
   d5c5c:	4662      	mov	r2, ip
   d5c5e:	468c      	mov	ip, r1
   d5c60:	4619      	mov	r1, r3
   d5c62:	4663      	mov	r3, ip
   d5c64:	e000      	b.n	d5c68 <__aeabi_cdcmpeq>
   d5c66:	bf00      	nop

000d5c68 <__aeabi_cdcmpeq>:
   d5c68:	b501      	push	{r0, lr}
   d5c6a:	f7ff ffb7 	bl	d5bdc <__cmpdf2>
   d5c6e:	2800      	cmp	r0, #0
   d5c70:	bf48      	it	mi
   d5c72:	f110 0f00 	cmnmi.w	r0, #0
   d5c76:	bd01      	pop	{r0, pc}

000d5c78 <__aeabi_dcmpeq>:
   d5c78:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5c7c:	f7ff fff4 	bl	d5c68 <__aeabi_cdcmpeq>
   d5c80:	bf0c      	ite	eq
   d5c82:	2001      	moveq	r0, #1
   d5c84:	2000      	movne	r0, #0
   d5c86:	f85d fb08 	ldr.w	pc, [sp], #8
   d5c8a:	bf00      	nop

000d5c8c <__aeabi_dcmplt>:
   d5c8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5c90:	f7ff ffea 	bl	d5c68 <__aeabi_cdcmpeq>
   d5c94:	bf34      	ite	cc
   d5c96:	2001      	movcc	r0, #1
   d5c98:	2000      	movcs	r0, #0
   d5c9a:	f85d fb08 	ldr.w	pc, [sp], #8
   d5c9e:	bf00      	nop

000d5ca0 <__aeabi_dcmple>:
   d5ca0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5ca4:	f7ff ffe0 	bl	d5c68 <__aeabi_cdcmpeq>
   d5ca8:	bf94      	ite	ls
   d5caa:	2001      	movls	r0, #1
   d5cac:	2000      	movhi	r0, #0
   d5cae:	f85d fb08 	ldr.w	pc, [sp], #8
   d5cb2:	bf00      	nop

000d5cb4 <__aeabi_dcmpge>:
   d5cb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5cb8:	f7ff ffce 	bl	d5c58 <__aeabi_cdrcmple>
   d5cbc:	bf94      	ite	ls
   d5cbe:	2001      	movls	r0, #1
   d5cc0:	2000      	movhi	r0, #0
   d5cc2:	f85d fb08 	ldr.w	pc, [sp], #8
   d5cc6:	bf00      	nop

000d5cc8 <__aeabi_dcmpgt>:
   d5cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5ccc:	f7ff ffc4 	bl	d5c58 <__aeabi_cdrcmple>
   d5cd0:	bf34      	ite	cc
   d5cd2:	2001      	movcc	r0, #1
   d5cd4:	2000      	movcs	r0, #0
   d5cd6:	f85d fb08 	ldr.w	pc, [sp], #8
   d5cda:	bf00      	nop

000d5cdc <__aeabi_dcmpun>:
   d5cdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5ce0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5ce4:	d102      	bne.n	d5cec <__aeabi_dcmpun+0x10>
   d5ce6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5cea:	d10a      	bne.n	d5d02 <__aeabi_dcmpun+0x26>
   d5cec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5cf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5cf4:	d102      	bne.n	d5cfc <__aeabi_dcmpun+0x20>
   d5cf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5cfa:	d102      	bne.n	d5d02 <__aeabi_dcmpun+0x26>
   d5cfc:	f04f 0000 	mov.w	r0, #0
   d5d00:	4770      	bx	lr
   d5d02:	f04f 0001 	mov.w	r0, #1
   d5d06:	4770      	bx	lr

000d5d08 <__aeabi_d2iz>:
   d5d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5d0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5d10:	d215      	bcs.n	d5d3e <__aeabi_d2iz+0x36>
   d5d12:	d511      	bpl.n	d5d38 <__aeabi_d2iz+0x30>
   d5d14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5d18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5d1c:	d912      	bls.n	d5d44 <__aeabi_d2iz+0x3c>
   d5d1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5d22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5d26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5d2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5d2e:	fa23 f002 	lsr.w	r0, r3, r2
   d5d32:	bf18      	it	ne
   d5d34:	4240      	negne	r0, r0
   d5d36:	4770      	bx	lr
   d5d38:	f04f 0000 	mov.w	r0, #0
   d5d3c:	4770      	bx	lr
   d5d3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5d42:	d105      	bne.n	d5d50 <__aeabi_d2iz+0x48>
   d5d44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5d48:	bf08      	it	eq
   d5d4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5d4e:	4770      	bx	lr
   d5d50:	f04f 0000 	mov.w	r0, #0
   d5d54:	4770      	bx	lr
   d5d56:	bf00      	nop

000d5d58 <__aeabi_d2uiz>:
   d5d58:	004a      	lsls	r2, r1, #1
   d5d5a:	d211      	bcs.n	d5d80 <__aeabi_d2uiz+0x28>
   d5d5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5d60:	d211      	bcs.n	d5d86 <__aeabi_d2uiz+0x2e>
   d5d62:	d50d      	bpl.n	d5d80 <__aeabi_d2uiz+0x28>
   d5d64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5d68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5d6c:	d40e      	bmi.n	d5d8c <__aeabi_d2uiz+0x34>
   d5d6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5d72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5d76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5d7a:	fa23 f002 	lsr.w	r0, r3, r2
   d5d7e:	4770      	bx	lr
   d5d80:	f04f 0000 	mov.w	r0, #0
   d5d84:	4770      	bx	lr
   d5d86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5d8a:	d102      	bne.n	d5d92 <__aeabi_d2uiz+0x3a>
   d5d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5d90:	4770      	bx	lr
   d5d92:	f04f 0000 	mov.w	r0, #0
   d5d96:	4770      	bx	lr

000d5d98 <__cxa_atexit>:
   d5d98:	b510      	push	{r4, lr}
   d5d9a:	4c05      	ldr	r4, [pc, #20]	; (d5db0 <__cxa_atexit+0x18>)
   d5d9c:	4613      	mov	r3, r2
   d5d9e:	b12c      	cbz	r4, d5dac <__cxa_atexit+0x14>
   d5da0:	460a      	mov	r2, r1
   d5da2:	4601      	mov	r1, r0
   d5da4:	2002      	movs	r0, #2
   d5da6:	f3af 8000 	nop.w
   d5daa:	bd10      	pop	{r4, pc}
   d5dac:	4620      	mov	r0, r4
   d5dae:	bd10      	pop	{r4, pc}
   d5db0:	00000000 	.word	0x00000000

000d5db4 <memcpy>:
   d5db4:	b510      	push	{r4, lr}
   d5db6:	1e43      	subs	r3, r0, #1
   d5db8:	440a      	add	r2, r1
   d5dba:	4291      	cmp	r1, r2
   d5dbc:	d004      	beq.n	d5dc8 <memcpy+0x14>
   d5dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5dc6:	e7f8      	b.n	d5dba <memcpy+0x6>
   d5dc8:	bd10      	pop	{r4, pc}

000d5dca <memset>:
   d5dca:	4402      	add	r2, r0
   d5dcc:	4603      	mov	r3, r0
   d5dce:	4293      	cmp	r3, r2
   d5dd0:	d002      	beq.n	d5dd8 <memset+0xe>
   d5dd2:	f803 1b01 	strb.w	r1, [r3], #1
   d5dd6:	e7fa      	b.n	d5dce <memset+0x4>
   d5dd8:	4770      	bx	lr
	...

000d5ddc <srand>:
   d5ddc:	b538      	push	{r3, r4, r5, lr}
   d5dde:	4b12      	ldr	r3, [pc, #72]	; (d5e28 <srand+0x4c>)
   d5de0:	681c      	ldr	r4, [r3, #0]
   d5de2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5de4:	4605      	mov	r5, r0
   d5de6:	b9d3      	cbnz	r3, d5e1e <srand+0x42>
   d5de8:	2018      	movs	r0, #24
   d5dea:	f7fe fb73 	bl	d44d4 <malloc>
   d5dee:	f243 330e 	movw	r3, #13070	; 0x330e
   d5df2:	63a0      	str	r0, [r4, #56]	; 0x38
   d5df4:	8003      	strh	r3, [r0, #0]
   d5df6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5dfa:	8043      	strh	r3, [r0, #2]
   d5dfc:	f241 2334 	movw	r3, #4660	; 0x1234
   d5e00:	8083      	strh	r3, [r0, #4]
   d5e02:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5e06:	80c3      	strh	r3, [r0, #6]
   d5e08:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5e0c:	8103      	strh	r3, [r0, #8]
   d5e0e:	2305      	movs	r3, #5
   d5e10:	8143      	strh	r3, [r0, #10]
   d5e12:	230b      	movs	r3, #11
   d5e14:	8183      	strh	r3, [r0, #12]
   d5e16:	2201      	movs	r2, #1
   d5e18:	2300      	movs	r3, #0
   d5e1a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5e1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5e20:	2200      	movs	r2, #0
   d5e22:	611d      	str	r5, [r3, #16]
   d5e24:	615a      	str	r2, [r3, #20]
   d5e26:	bd38      	pop	{r3, r4, r5, pc}
   d5e28:	2003e490 	.word	0x2003e490

000d5e2c <strlen>:
   d5e2c:	4603      	mov	r3, r0
   d5e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5e32:	2a00      	cmp	r2, #0
   d5e34:	d1fb      	bne.n	d5e2e <strlen+0x2>
   d5e36:	1a18      	subs	r0, r3, r0
   d5e38:	3801      	subs	r0, #1
   d5e3a:	4770      	bx	lr

000d5e3c <dynalib_user>:
   d5e3c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d5e4c:	0000 0000 614d 6278 746f 7869 5420 7365     ....Maxbotix Tes
   d5e5c:	0074 6944 7473 6e61 6563 6928 296e 203a     t.Distance(in): 
   d5e6c:	0000 0000                                   ....

000d5e70 <_ZTVN5spark13CellularClassE>:
	...
   d5e78:	456b 000d 4561 000d 4557 000d 450d 000d     kE..aE..WE...E..
   d5e88:	454b 000d 453f 000d 4533 000d 452b 000d     KE..?E..3E..+E..
   d5e98:	4521 000d 4517 000d 4979 000d               !E...E..yI..

000d5ea4 <_ZTVN5spark13EthernetClassE>:
	...
   d5eac:	4615 000d 460b 000d 4601 000d 45f7 000d     .F...F...F...E..
   d5ebc:	45eb 000d 45df 000d 45d3 000d 45cb 000d     .E...E...E...E..
   d5ecc:	45c1 000d 45b7 000d 4979 000d               .E...E..yI..

000d5ed8 <_ZTV7TwoWire>:
	...
   d5ee0:	4635 000d 467f 000d 4657 000d 4637 000d     5F...F..WF..7F..
   d5ef0:	465f 000d 4667 000d 466f 000d 4677 000d     _F..gF..oF..wF..

000d5f00 <_ZTV9IPAddress>:
	...
   d5f08:	46c9 000d 46b9 000d 46bb 000d 6162 6475     .F...F...F..baud
   d5f18:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5f28:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5f38:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5f48:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5f58:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d5f68:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d5f78:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5f88:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d5f98:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d5fa8:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d5fb8:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d5fc8:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d5fd8:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d5fe8:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d5ff4 <_ZTVN5spark9MeshClassE>:
	...
   d5ffc:	480b 000d 4801 000d 47f7 000d 47ed 000d     .H...H...G...G..
   d600c:	47e1 000d 47d5 000d 47c9 000d 47c1 000d     .G...G...G...G..
   d601c:	47b7 000d 47ad 000d 4979 000d               .G...G..yI..

000d6028 <_ZTVN5spark12NetworkClassE>:
	...
   d6030:	4911 000d 491b 000d 4925 000d 492f 000d     .I...I..%I../I..
   d6040:	4939 000d 4945 000d 4951 000d 495d 000d     9I..EI..QI..]I..
   d6050:	4965 000d 496f 000d 4979 000d 616e 006e     eI..oI..yI..nan.
   d6060:	766f 0066 002e 6e69 0066 0000               ovf...inf...

000d606c <_ZTV8SPIClass>:
	...
   d6074:	4d15 000d 4d17 000d 005a 2b25 3330 3a64     .M...M..Z.%+03d:
   d6084:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d6094:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d60a4:	0000 0000                                   ....

000d60a8 <_ZTV11USARTSerial>:
	...
   d60b0:	4d81 000d 4dd1 000d 4ddf 000d 4a59 000d     .M...M...M..YJ..
   d60c0:	4d95 000d 4db7 000d 4da3 000d 4dcb 000d     .M...M...M...M..
   d60d0:	4d83 000d 4d87 000d                         .M...M..

000d60d8 <_ZTV9USBSerial>:
	...
   d60e0:	4ebd 000d 4f0d 000d 4f1b 000d 4a59 000d     .N...O...O..YJ..
   d60f0:	4ef9 000d 4ebf 000d 4ed5 000d 4f07 000d     .N...N...N...O..
   d6100:	4eeb 000d 4eb9 000d                         .N...N..

000d6108 <__sf_fake_stdin>:
	...

000d6128 <__sf_fake_stdout>:
	...

000d6148 <__sf_fake_stderr>:
	...
   d6168:	0043                                        C.

000d616a <link_const_variable_data_end>:
	...

000d616c <link_constructors_location>:
   d616c:	000d4169 	.word	0x000d4169
   d6170:	000d44fd 	.word	0x000d44fd
   d6174:	000d4575 	.word	0x000d4575
   d6178:	000d4621 	.word	0x000d4621
   d617c:	000d479d 	.word	0x000d479d
   d6180:	000d48c1 	.word	0x000d48c1
   d6184:	000d4a45 	.word	0x000d4a45
   d6188:	000d4cf9 	.word	0x000d4cf9
   d618c:	000d4d55 	.word	0x000d4d55
   d6190:	000d4d6d 	.word	0x000d4d6d
   d6194:	000d5155 	.word	0x000d5155
   d6198:	000d51a9 	.word	0x000d51a9
   d619c:	000d526d 	.word	0x000d526d
   d61a0:	000d52f1 	.word	0x000d52f1
   d61a4:	000d5375 	.word	0x000d5375

000d61a8 <link_constructors_end>:
	...
